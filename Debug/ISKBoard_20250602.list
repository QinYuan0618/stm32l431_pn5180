
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000239fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002314  08023b90  08023b90  00024b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025ea4  08025ea4  00027240  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08025ea4  08025ea4  00026ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025eac  08025eac  00027240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025eac  08025eac  00026eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025eb0  08025eb0  00026eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  08025eb4  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000240  080260f4  00027240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  080260f4  00027d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e350  00000000  00000000  00027270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009dbd  00000000  00000000  000755c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003080  00000000  00000000  0007f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002565  00000000  00000000  00082400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000364f9  00000000  00000000  00084965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005dea3  00000000  00000000  000bae5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d1a2  00000000  00000000  00118d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00235ea3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d93c  00000000  00000000  00235ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00243824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08023b74 	.word	0x08023b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	08023b74 	.word	0x08023b74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b40      	ldr	r3, [pc, #256]	@ (800108c <MX_GPIO_Init+0x118>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800108c <MX_GPIO_Init+0x118>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b3d      	ldr	r3, [pc, #244]	@ (800108c <MX_GPIO_Init+0x118>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b37      	ldr	r3, [pc, #220]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b34      	ldr	r3, [pc, #208]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a33      	ldr	r2, [pc, #204]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <MX_GPIO_Init+0x118>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f01b f98e 	bl	801c314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000ffe:	f01b f989 	bl	801c314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	2301      	movs	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f01a ff10 	bl	801be3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f01a ff00 	bl	801be3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_IRQ_Pin */
  GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 800103c:	2310      	movs	r3, #16
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001040:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480f      	ldr	r0, [pc, #60]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8001052:	f01a fef3 	bl	801be3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4808      	ldr	r0, [pc, #32]	@ (8001090 <MX_GPIO_Init+0x11c>)
 800106e:	f01a fee5 	bl	801be3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	200a      	movs	r0, #10
 8001078:	f01a fe2b 	bl	801bcd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800107c:	200a      	movs	r0, #10
 800107e:	f01a fe44 	bl	801bd0a <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001098:	f01a fca8 	bl	801b9ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109c:	f000 f81a 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f7ff ff68 	bl	8000f74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010a4:	f000 fc2e 	bl	8001904 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80010a8:	f000 fb0e 	bl	80016c8 <MX_TIM6_Init>
  MX_TIM1_Init();
 80010ac:	f000 fa30 	bl	8001510 <MX_TIM1_Init>
  MX_SPI3_Init();
 80010b0:	f000 f866 	bl	8001180 <MX_SPI3_Init>
  MX_TIM2_Init();
 80010b4:	f000 faba 	bl	800162c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <main+0x3c>)
 80010ba:	f020 fc6f 	bl	802199c <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 80010be:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fbee 	bl	80018a4 <beep_start>

  /* 调用NFC Discovery功能*/
  nfc_discovery_main();
 80010c8:	f000 fd1c 	bl	8001b04 <nfc_discovery_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <main+0x38>
 80010d0:	08023b90 	.word	0x08023b90

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	@ 0x58
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2244      	movs	r2, #68	@ 0x44
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f020 fd86 	bl	8021bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010fa:	f01b f955 	bl	801c3a8 <HAL_PWREx_ControlVoltageScaling>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001104:	f000 f835 	bl	8001172 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001116:	2303      	movs	r3, #3
 8001118:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800111e:	2314      	movs	r3, #20
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001122:	2307      	movs	r3, #7
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f01b f98e 	bl	801c454 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800113e:	f000 f818 	bl	8001172 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2303      	movs	r3, #3
 8001148:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f01b fd8e 	bl	801cc7c <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001166:	f000 f804 	bl	8001172 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3758      	adds	r7, #88	@ 0x58
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001176:	b672      	cpsid	i
}
 8001178:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117a:	bf00      	nop
 800117c:	e7fd      	b.n	800117a <Error_Handler+0x8>
	...

08001180 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MX_SPI3_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <MX_SPI3_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_SPI3_Init+0x74>)
 800118c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001190:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_SPI3_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <MX_SPI3_Init+0x74>)
 800119a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800119e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011b6:	2218      	movs	r2, #24
 80011b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011ce:	2207      	movs	r2, #7
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_SPI3_Init+0x74>)
 80011e0:	f01c fa7a 	bl	801d6d8 <HAL_SPI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f7ff ffc2 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000025c 	.word	0x2000025c
 80011f8:	40003c00 	.word	0x40003c00

080011fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_SPI_MspInit+0x7c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d128      	bne.n	8001270 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001228:	6593      	str	r3, [r2, #88]	@ 0x58
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_SPI_MspInit+0x80>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_SPI_MspInit+0x80>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_SPI_MspInit+0x80>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 800124e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001260:	2306      	movs	r3, #6
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_SPI_MspInit+0x84>)
 800126c:	f01a fde6 	bl	801be3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40003c00 	.word	0x40003c00
 800127c:	40021000 	.word	0x40021000
 8001280:	48000800 	.word	0x48000800

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x44>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_MspInit+0x44>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	@ 0x60
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_MspInit+0x44>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_MspInit+0x44>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f01a fbb7 	bl	801ba94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}

0800132a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PN5180_IRQ_Pin);
 800132e:	2010      	movs	r0, #16
 8001330:	f01b f808 	bl	801c344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <TIM2_IRQHandler+0x10>)
 800133e:	f01d f8cf 	bl	801e4e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000310 	.word	0x20000310

0800134c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USART1_IRQHandler+0x10>)
 8001352:	f01e fa73 	bl	801f83c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200004b0 	.word	0x200004b0

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800137a:	f020 fca3 	bl	8021cc4 <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
  return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a2:	bf00      	nop
 80013a4:	e7fd      	b.n	80013a2 <_exit+0x12>

080013a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e00a      	b.n	80013ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b8:	f3af 8000 	nop.w
 80013bc:	4601      	mov	r1, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	60ba      	str	r2, [r7, #8]
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbf0      	blt.n	80013b8 <_read+0x12>
  }

  return len;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fb18 	bl	8001a30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
  }
  return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_close>:

int _close(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	605a      	str	r2, [r3, #4]
  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f020 fc08 	bl	8021cc4 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000c000 	.word	0x2000c000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	200002c0 	.word	0x200002c0
 80014e8:	20001d58 	.word	0x20001d58

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b096      	sub	sp, #88	@ 0x58
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	222c      	movs	r2, #44	@ 0x2c
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f020 fb59 	bl	8021bf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001544:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <MX_TIM1_Init+0x118>)
 8001546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001548:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <MX_TIM1_Init+0x114>)
 800154a:	224f      	movs	r2, #79	@ 0x4f
 800154c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001556:	f240 1271 	movw	r2, #369	@ 0x171
 800155a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <MX_TIM1_Init+0x114>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001562:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <MX_TIM1_Init+0x114>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800156e:	482d      	ldr	r0, [pc, #180]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001570:	f01c fdf8 	bl	801e164 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f7ff fdfa 	bl	8001172 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800158e:	4619      	mov	r1, r3
 8001590:	4824      	ldr	r0, [pc, #144]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001592:	f01d fe6b 	bl	801f26c <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800159c:	f7ff fde9 	bl	8001172 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	@ 0x60
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 80015a4:	23b9      	movs	r3, #185	@ 0xb9
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015bc:	220c      	movs	r2, #12
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	@ (8001624 <MX_TIM1_Init+0x114>)
 80015c2:	f01d f895 	bl	801e6f0 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80015cc:	f7ff fdd1 	bl	8001172 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001606:	f01d fe97 	bl	801f338 <HAL_TIMEx_ConfigBreakDeadTime>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001610:	f7ff fdaf 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <MX_TIM1_Init+0x114>)
 8001616:	f000 f8e5 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3758      	adds	r7, #88	@ 0x58
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200002c4 	.word	0x200002c4
 8001628:	40012c00 	.word	0x40012c00

0800162c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <MX_TIM2_Init+0x98>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001654:	224f      	movs	r2, #79	@ 0x4f
 8001656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_TIM2_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <MX_TIM2_Init+0x98>)
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001672:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001674:	f01c fc56 	bl	801df24 <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800167e:	f7ff fd78 	bl	8001172 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_TIM2_Init+0x98>)
 8001690:	f01d f942 	bl	801e918 <HAL_TIM_ConfigClockSource>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800169a:	f7ff fd6a 	bl	8001172 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_TIM2_Init+0x98>)
 80016ac:	f01d fdde 	bl	801f26c <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016b6:	f7ff fd5c 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000310 	.word	0x20000310

080016c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_TIM6_Init+0x64>)
 80016da:	4a15      	ldr	r2, [pc, #84]	@ (8001730 <MX_TIM6_Init+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80016de:	4b13      	ldr	r3, [pc, #76]	@ (800172c <MX_TIM6_Init+0x64>)
 80016e0:	224f      	movs	r2, #79	@ 0x4f
 80016e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_TIM6_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_TIM6_Init+0x64>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_TIM6_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <MX_TIM6_Init+0x64>)
 80016f8:	f01c fc14 	bl	801df24 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001702:	f7ff fd36 	bl	8001172 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	@ (800172c <MX_TIM6_Init+0x64>)
 8001714:	f01d fdaa 	bl	801f26c <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800171e:	f7ff fd28 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000035c 	.word	0x2000035c
 8001730:	40001000 	.word	0x40001000

08001734 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_PWM_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 800174c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001750:	6613      	str	r3, [r2, #96]	@ 0x60
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001784:	d114      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6593      	str	r3, [r2, #88]	@ 0x58
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	201c      	movs	r0, #28
 80017a4:	f01a fa95 	bl	801bcd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a8:	201c      	movs	r0, #28
 80017aa:	f01a faae 	bl	801bd0a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80017ae:	e010      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40001000 	.word	0x40001000

080017e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a12      	ldr	r2, [pc, #72]	@ (800184c <HAL_TIM_MspPostInit+0x68>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11d      	bne.n	8001842 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_TIM_MspPostInit+0x6c>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <HAL_TIM_MspPostInit+0x6c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <HAL_TIM_MspPostInit+0x6c>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 800181e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001830:	2301      	movs	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f01a fafd 	bl	801be3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40021000 	.word	0x40021000

08001854 <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8001864:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001868:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800186c:	3360      	adds	r3, #96	@ 0x60
 800186e:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 8001870:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <delay_us+0x4c>)
 8001872:	f01c fbaf 	bl	801dfd4 <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <delay_us+0x4c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	89fa      	ldrh	r2, [r7, #14]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 800187e:	e003      	b.n	8001888 <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <delay_us+0x4c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800188e:	4293      	cmp	r3, r2
 8001890:	d9f6      	bls.n	8001880 <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 8001892:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <delay_us+0x4c>)
 8001894:	f01c fbea 	bl	801e06c <HAL_TIM_Base_Stop>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000035c 	.word	0x2000035c

080018a4 <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 80018b4:	e019      	b.n	80018ea <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 80018b6:	210c      	movs	r1, #12
 80018b8:	4811      	ldr	r0, [pc, #68]	@ (8001900 <beep_start+0x5c>)
 80018ba:	f01c fcab 	bl	801e214 <HAL_TIM_PWM_Start>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 80018c4:	f7ff fc55 	bl	8001172 <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f01a f902 	bl	801bad4 <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 80018d0:	210c      	movs	r1, #12
 80018d2:	480b      	ldr	r0, [pc, #44]	@ (8001900 <beep_start+0x5c>)
 80018d4:	f01c fd7c 	bl	801e3d0 <HAL_TIM_PWM_Stop>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 80018de:	f7ff fc48 	bl	8001172 <Error_Handler>
		}
		HAL_Delay(interval);
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f01a f8f5 	bl	801bad4 <HAL_Delay>
	while( times -- )
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	71fa      	strb	r2, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e0      	bne.n	80018b6 <beep_start+0x12>
	}
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002c4 	.word	0x200002c4

08001904 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800190a:	4a17      	ldr	r2, [pc, #92]	@ (8001968 <MX_USART1_UART_Init+0x64>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 8001948:	f01d fd8c 	bl	801f464 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001952:	f7ff fc0e 	bl	8001172 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	4904      	ldr	r1, [pc, #16]	@ (800196c <MX_USART1_UART_Init+0x68>)
 800195a:	4802      	ldr	r0, [pc, #8]	@ (8001964 <MX_USART1_UART_Init+0x60>)
 800195c:	f01d ff22 	bl	801f7a4 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200004b0 	.word	0x200004b0
 8001968:	40013800 	.word	0x40013800
 800196c:	200003a8 	.word	0x200003a8

08001970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0a0      	sub	sp, #128	@ 0x80
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	225c      	movs	r2, #92	@ 0x5c
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f020 f92f 	bl	8021bf4 <memset>
  if(uartHandle->Instance==USART1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a23      	ldr	r2, [pc, #140]	@ (8001a28 <HAL_UART_MspInit+0xb8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13f      	bne.n	8001a20 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f01b fb89 	bl	801d0c4 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fbdb 	bl	8001172 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_UART_MspInit+0xbc>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fe:	2307      	movs	r3, #7
 8001a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0c:	f01a fa16 	bl	801be3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2025      	movs	r0, #37	@ 0x25
 8001a16:	f01a f95c 	bl	801bcd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a1a:	2025      	movs	r0, #37	@ 0x25
 8001a1c:	f01a f975 	bl	801bd0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3780      	adds	r7, #128	@ 0x80
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40021000 	.word	0x40021000

08001a30 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a38:	1d39      	adds	r1, r7, #4
 8001a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <__io_putchar+0x20>)
 8001a42:	f01d fd5d 	bl	801f500 <HAL_UART_Transmit>
	return ch;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200004b0 	.word	0x200004b0

08001a54 <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <HAL_UART_RxCpltCallback+0x44>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 8001a66:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <HAL_UART_RxCpltCallback+0x48>)
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <HAL_UART_RxCpltCallback+0x4c>)
 8001a6a:	f01f ff27 	bl	80218bc <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x50>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	b2d1      	uxtb	r1, r2
 8001a76:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x50>)
 8001a78:	7011      	strb	r1, [r2, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x54>)
 8001a7e:	7819      	ldrb	r1, [r3, #0]
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_UART_RxCpltCallback+0x48>)
 8001a82:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	4908      	ldr	r1, [pc, #32]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x54>)
 8001a88:	4808      	ldr	r0, [pc, #32]	@ (8001aac <HAL_UART_RxCpltCallback+0x58>)
 8001a8a:	f01d fe8b 	bl	801f7a4 <HAL_UART_Receive_IT>
	}
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	200003ac 	.word	0x200003ac
 8001aa0:	08023bb4 	.word	0x08023bb4
 8001aa4:	200004ac 	.word	0x200004ac
 8001aa8:	200003a8 	.word	0x200003a8
 8001aac:	200004b0 	.word	0x200004b0

08001ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f7ff fd1a 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f020 f8f7 	bl	8021cd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae2:	f7ff fad7 	bl	8001094 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001af4:	08025eb4 	.word	0x08025eb4
  ldr r2, =_sbss
 8001af8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001afc:	20001d54 	.word	0x20001d54

08001b00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_IRQHandler>
	...

08001b04 <nfc_discovery_main>:
/*******************************************************************************
**   Code
*******************************************************************************/

int nfc_discovery_main(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 8001b0a:	237f      	movs	r3, #127	@ 0x7f
 8001b0c:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        phNfcLib_AppContext_t AppContext = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
#ifndef PH_OSAL_NULLOS
        phOsal_ThreadObj_t DiscLoop;
#endif /* PH_OSAL_NULLOS */

        /* 1.CPU初始化：Perform Controller specific initialization. */
        phApp_CPU_Init();
 8001b18:	f002 fef2 	bl	8004900 <phApp_CPU_Init>

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init(); // STM32的HAL_Ini()中已经配置了Systick，通过HAL_InitTick()，不需要OSAL的定时器

        DEBUG_PRINTF("\n DiscoveryLoop Example: \n");
 8001b1c:	484c      	ldr	r0, [pc, #304]	@ (8001c50 <nfc_discovery_main+0x14c>)
 8001b1e:	f01f ff3d 	bl	802199c <puts>
 8001b22:	4b4c      	ldr	r3, [pc, #304]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f01f fdf1 	bl	8021710 <fflush>

        /* 3.IC前端初始化 */
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4849      	ldr	r0, [pc, #292]	@ (8001c58 <nfc_discovery_main+0x154>)
 8001b32:	f019 fd13 	bl	801b55c <phbalReg_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001b3a:	8afb      	ldrh	r3, [r7, #22]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <nfc_discovery_main+0x54>
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	461a      	mov	r2, r3
 8001b44:	218f      	movs	r1, #143	@ 0x8f
 8001b46:	4845      	ldr	r0, [pc, #276]	@ (8001c5c <nfc_discovery_main+0x158>)
 8001b48:	f01f feb8 	bl	80218bc <iprintf>
 8001b4c:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f01f fddc 	bl	8021710 <fflush>

        AppContext.pBalDataparams = &sBalParams;
 8001b58:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <nfc_discovery_main+0x154>)
 8001b5a:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f006 fa92 	bl	8008088 <phNfcLib_SetContext>
 8001b64:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00a      	beq.n	8001b82 <nfc_discovery_main+0x7e>
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	2193      	movs	r1, #147	@ 0x93
 8001b70:	483b      	ldr	r0, [pc, #236]	@ (8001c60 <nfc_discovery_main+0x15c>)
 8001b72:	f01f fea3 	bl	80218bc <iprintf>
 8001b76:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f01f fdc7 	bl	8021710 <fflush>
#endif

        /* 4.初始化NFC库：Initialize library */
        dwStatus = phNfcLib_Init();
 8001b82:	f006 fd0b 	bl	800859c <phNfcLib_Init>
 8001b86:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <nfc_discovery_main+0xa0>
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	2198      	movs	r1, #152	@ 0x98
 8001b92:	4833      	ldr	r0, [pc, #204]	@ (8001c60 <nfc_discovery_main+0x15c>)
 8001b94:	f01f fe92 	bl	80218bc <iprintf>
 8001b98:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f01f fdb6 	bl	8021710 <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d142      	bne.n	8001c30 <nfc_discovery_main+0x12c>

        /* 5. 获取关键组件指针：Set the generic pointer */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);			// 硬件抽象层
 8001baa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bae:	f006 fdb9 	bl	8008724 <phNfcLib_GetDataParams>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <nfc_discovery_main+0x160>)
 8001bb6:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP);	// Discovery Loop 组件
 8001bb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bbc:	f006 fdb2 	bl	8008724 <phNfcLib_GetDataParams>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <nfc_discovery_main+0x164>)
 8001bc4:	6013      	str	r3, [r2, #0]

        /* 6.初始化其他组件：Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <nfc_discovery_main+0x164>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 feaa 	bl	8004924 <phApp_Comp_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <nfc_discovery_main+0xee>
 8001bda:	8afb      	ldrh	r3, [r7, #22]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	21a1      	movs	r1, #161	@ 0xa1
 8001be0:	481e      	ldr	r0, [pc, #120]	@ (8001c5c <nfc_discovery_main+0x158>)
 8001be2:	f01f fe6b 	bl	80218bc <iprintf>
 8001be6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f01f fd8f 	bl	8021710 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001bf2:	8afb      	ldrh	r3, [r7, #22]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11d      	bne.n	8001c34 <nfc_discovery_main+0x130>

        /* 7.配置中断：Perform Platform Init */
        status = phApp_Configure_IRQ();
 8001bf8:	f002 fec6 	bl	8004988 <phApp_Configure_IRQ>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <nfc_discovery_main+0x11a>
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	21a6      	movs	r1, #166	@ 0xa6
 8001c0c:	4813      	ldr	r0, [pc, #76]	@ (8001c5c <nfc_discovery_main+0x158>)
 8001c0e:	f01f fe55 	bl	80218bc <iprintf>
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <nfc_discovery_main+0x150>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f01f fd79 	bl	8021710 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001c1e:	8afb      	ldrh	r3, [r7, #22]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <nfc_discovery_main+0x134>
        phOsal_StartScheduler();

        DEBUG_PRINTF("RTOS Error : Scheduler exited. \n");
#else
        /* 8.启动DiscoveryLoop主任务 */
        (void)DiscoveryLoop_Demo(pDiscLoop);
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <nfc_discovery_main+0x164>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f821 	bl	8001c70 <DiscoveryLoop_Demo>
 8001c2e:	e004      	b.n	8001c3a <nfc_discovery_main+0x136>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001c30:	bf00      	nop
 8001c32:	e002      	b.n	8001c3a <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8001c34:	bf00      	nop
 8001c36:	e000      	b.n	8001c3a <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8001c38:	bf00      	nop
#endif
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 8001c3a:	bf00      	nop
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <nfc_discovery_main+0x168>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1fa      	bne.n	8001c3c <nfc_discovery_main+0x138>

    return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	08023bcc 	.word	0x08023bcc
 8001c54:	20000084 	.word	0x20000084
 8001c58:	200008dc 	.word	0x200008dc
 8001c5c:	08023be8 	.word	0x08023be8
 8001c60:	08023c50 	.word	0x08023c50
 8001c64:	200008e0 	.word	0x200008e0
 8001c68:	20000538 	.word	0x20000538
 8001c6c:	20000022 	.word	0x20000022

08001c70 <DiscoveryLoop_Demo>:
* 用于持续检测是否有NFC标签进入天线区域，并报告检测到的NFC技术类型
* \param   pDataParams      The discovery loop data parameters
* \note    This function will never return
*/
void DiscoveryLoop_Demo(void  *pDataParams)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    phStatus_t    status, statustmp;
    uint16_t      wEntryPoint;
    phacDiscLoop_Profile_t bProfile = PHAC_DISCLOOP_PROFILE_UNKNOWN;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	757b      	strb	r3, [r7, #21]
    /* This call shall allocate secure context before calling any secure function,
     * when FreeRtos trust zone is enabled.
     * */
//    phOsal_ThreadSecureStack( 512 ); // 这是FreeRTOS Trust Zone相关的，裸机不需要

    DEBUG_PRINTF("Entering Discovery Loop Demo...\r\n");
 8001c7c:	489b      	ldr	r0, [pc, #620]	@ (8001eec <DiscoveryLoop_Demo+0x27c>)
 8001c7e:	f01f fe8d 	bl	802199c <puts>
 8001c82:	4b9b      	ldr	r3, [pc, #620]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f01f fd41 	bl	8021710 <fflush>
#ifdef ENABLE_DISC_CONFIG

#ifndef ENABLE_EMVCO_PROF
    bProfile = PHAC_DISCLOOP_PROFILE_NFC;
#else
    bProfile = PHAC_DISCLOOP_PROFILE_EMVCO;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	757b      	strb	r3, [r7, #21]
#endif
    /* Load selected profile for Discovery loop */
    LoadProfile(bProfile);
 8001c92:	7d7b      	ldrb	r3, [r7, #21]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fc57 	bl	8002548 <LoadProfile>
#endif /* ENABLE_DISC_CONFIG */

/* 确保初始化PN5180芯片用于监听模式的参数设置正确 */
#ifdef NXPBUILD__PHHAL_HW_TARGET	// 启用了底层HAL硬件目标平台的支持(PN5180)
    /* Initialize the setting for Listen Mode */
    status = phApp_HALConfigAutoColl();
 8001c9a:	f002 fe8b 	bl	80049b4 <phApp_HALConfigAutoColl>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	827b      	strh	r3, [r7, #18]
    CHECK_STATUS(status);
 8001ca2:	8a7b      	ldrh	r3, [r7, #18]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <DiscoveryLoop_Demo+0x50>
 8001ca8:	8a7b      	ldrh	r3, [r7, #18]
 8001caa:	461a      	mov	r2, r3
 8001cac:	21e4      	movs	r1, #228	@ 0xe4
 8001cae:	4891      	ldr	r0, [pc, #580]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001cb0:	f01f fe04 	bl	80218bc <iprintf>
 8001cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f01f fd28 	bl	8021710 <fflush>
#endif /* NXPBUILD__PHHAL_HW_TARGET */

    /* 2.获取当前的轮询技术支持（例如启用了14443A、15693等）Get Poll Configuration */
    status = phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, &bSavePollTechCfg);
 8001cc0:	4a8d      	ldr	r2, [pc, #564]	@ (8001ef8 <DiscoveryLoop_Demo+0x288>)
 8001cc2:	218c      	movs	r1, #140	@ 0x8c
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f007 ffb1 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	827b      	strh	r3, [r7, #18]
    CHECK_STATUS(status);
 8001cce:	8a7b      	ldrh	r3, [r7, #18]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <DiscoveryLoop_Demo+0x7c>
 8001cd4:	8a7b      	ldrh	r3, [r7, #18]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	21e9      	movs	r1, #233	@ 0xe9
 8001cda:	4886      	ldr	r0, [pc, #536]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001cdc:	f01f fdee 	bl	80218bc <iprintf>
 8001ce0:	4b83      	ldr	r3, [pc, #524]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f01f fd12 	bl	8021710 <fflush>

    /* 3.设置为轮询而不是监听 Start in poll mode */
    wEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	82fb      	strh	r3, [r7, #22]
    status = PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED;
 8001cf0:	2386      	movs	r3, #134	@ 0x86
 8001cf2:	827b      	strh	r3, [r7, #18]

    /* 4. 关闭射频场，准备进行新一轮发现（防止错误识别）Switch off RF field */
    statustmp = phhalHw_FieldOff(pHal);
 8001cf4:	4b81      	ldr	r3, [pc, #516]	@ (8001efc <DiscoveryLoop_Demo+0x28c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00d fd1b 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	823b      	strh	r3, [r7, #16]
    CHECK_STATUS(statustmp);
 8001d02:	8a3b      	ldrh	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <DiscoveryLoop_Demo+0xb0>
 8001d08:	8a3b      	ldrh	r3, [r7, #16]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	21f1      	movs	r1, #241	@ 0xf1
 8001d0e:	4879      	ldr	r0, [pc, #484]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001d10:	f01f fdd4 	bl	80218bc <iprintf>
 8001d14:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f01f fcf8 	bl	8021710 <fflush>

//1    TestRFField();

    while(1)
    {
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8001d20:	4877      	ldr	r0, [pc, #476]	@ (8001f00 <DiscoveryLoop_Demo+0x290>)
 8001d22:	f01f fe3b 	bl	802199c <puts>
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f01f fcef 	bl	8021710 <fflush>

        /* 每一次轮询开始前将轮询状态设为"检测中"，有些场景中如果上一次卡片未移除，需设置成"removal"状态
         * Before polling set Discovery Poll State to Detection , as later in the code it can be changed to e.g. PHAC_DISCLOOP_POLL_STATE_REMOVAL*/
        statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2184      	movs	r1, #132	@ 0x84
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f007 fafa 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	823b      	strh	r3, [r7, #16]
        CHECK_STATUS(statustmp);
 8001d40:	8a3b      	ldrh	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <DiscoveryLoop_Demo+0xee>
 8001d46:	8a3b      	ldrh	r3, [r7, #16]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	21fd      	movs	r1, #253	@ 0xfd
 8001d4c:	4869      	ldr	r0, [pc, #420]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001d4e:	f01f fdb5 	bl	80218bc <iprintf>
 8001d52:	4b67      	ldr	r3, [pc, #412]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f01f fcd9 	bl	8021710 <fflush>
#endif /* PH_EXAMPLE1_LPCD_ENABLE*/

        /* 启动轮询核心函数
         * Start discovery loop */
        /* PROGRAM BLOCK HERE at first, problem is solved */
        status = phacDiscLoop_Run(pDataParams, wEntryPoint);
 8001d5e:	8afb      	ldrh	r3, [r7, #22]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f007 fa11 	bl	800918c <phacDiscLoop_Sw_Run>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	827b      	strh	r3, [r7, #18]
        /* 输出：0x4080  或者  0x4083, 是否表示错误? 检测到卡返回0x408B */
        DEBUG_PRINTF("Discovery result: 0x%04X\r\n", status);
 8001d6e:	8a7b      	ldrh	r3, [r7, #18]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4864      	ldr	r0, [pc, #400]	@ (8001f04 <DiscoveryLoop_Demo+0x294>)
 8001d74:	f01f fda2 	bl	80218bc <iprintf>
 8001d78:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f01f fcc6 	bl	8021710 <fflush>

        /* ========== 🆕 EMV交易处理集成点 ========== */
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 8001d84:	8a7b      	ldrh	r3, [r7, #18]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b8b      	cmp	r3, #139	@ 0x8b
 8001d8a:	d145      	bne.n	8001e18 <DiscoveryLoop_Demo+0x1a8>
        {
            DEBUG_PRINTF("Card activated, checking EMV compatibility\r\n");
 8001d8c:	485e      	ldr	r0, [pc, #376]	@ (8001f08 <DiscoveryLoop_Demo+0x298>)
 8001d8e:	f01f fe05 	bl	802199c <puts>
 8001d92:	4b57      	ldr	r3, [pc, #348]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f01f fcb9 	bl	8021710 <fflush>

            /* 检查是否为EMV兼容卡片 */
            if (EMV_IsEMVCompatibleCard(pDataParams))
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f001 f896 	bl	8002ed0 <EMV_IsEMVCompatibleCard>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d02d      	beq.n	8001e06 <DiscoveryLoop_Demo+0x196>
            {
                DEBUG_PRINTF("=== EMV Compatible Card Detected, Starting Transaction ===\r\n");
 8001daa:	4858      	ldr	r0, [pc, #352]	@ (8001f0c <DiscoveryLoop_Demo+0x29c>)
 8001dac:	f01f fdf6 	bl	802199c <puts>
 8001db0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f01f fcaa 	bl	8021710 <fflush>

                /* 执行EMV交易流程 */
//1                EMV_Result_t emv_result = EMV_ProcessTransaction(pDataParams, 1000, 0x0156); // 10.00元, CNY
                EMV_Result_t emv_result = EMV_ProcessTransaction_Enhanced(pDataParams, 1000, 0x0156);
 8001dbc:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8001dc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f001 f8cf 	bl	8002f68 <EMV_ProcessTransaction_Enhanced>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73fb      	strb	r3, [r7, #15]

                if (emv_result == EMV_SUCCESS) {
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <DiscoveryLoop_Demo+0x178>
                    DEBUG_PRINTF("=== EMV Transaction Completed Successfully ===\r\n");
 8001dd4:	484e      	ldr	r0, [pc, #312]	@ (8001f10 <DiscoveryLoop_Demo+0x2a0>)
 8001dd6:	f01f fde1 	bl	802199c <puts>
 8001dda:	4b45      	ldr	r3, [pc, #276]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f01f fc95 	bl	8021710 <fflush>
 8001de6:	e00a      	b.n	8001dfe <DiscoveryLoop_Demo+0x18e>
                } else {
                    DEBUG_PRINTF("=== EMV Transaction Failed, Error Code: %d ===\r\n", emv_result);
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	4619      	mov	r1, r3
 8001dec:	4849      	ldr	r0, [pc, #292]	@ (8001f14 <DiscoveryLoop_Demo+0x2a4>)
 8001dee:	f01f fd65 	bl	80218bc <iprintf>
 8001df2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f01f fc89 	bl	8021710 <fflush>
                }

                /* 等待卡片移除后继续循环 */
                EMV_WaitForCardRemoval(pDataParams);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f001 fa48 	bl	8003294 <EMV_WaitForCardRemoval>

                /* 继续下一次轮询 */
                continue;
 8001e04:	e070      	b.n	8001ee8 <DiscoveryLoop_Demo+0x278>
            }
            else
            {
                DEBUG_PRINTF("Non-EMV card, using original processing flow\r\n");
 8001e06:	4844      	ldr	r0, [pc, #272]	@ (8001f18 <DiscoveryLoop_Demo+0x2a8>)
 8001e08:	f01f fdc8 	bl	802199c <puts>
 8001e0c:	4b38      	ldr	r3, [pc, #224]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f01f fc7c 	bl	8021710 <fflush>
            }
        }
        /* ========== EMV交易处理集成点结束 ========== */

        if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 8001e18:	7d7b      	ldrb	r3, [r7, #21]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d105      	bne.n	8001e2a <DiscoveryLoop_Demo+0x1ba>
        {
#if defined(ENABLE_EMVCO_PROF)
            EmvcoProfileProcess(pDataParams, status);
 8001e1e:	8a7b      	ldrh	r3, [r7, #18]
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f002 f8ac 	bl	8003f80 <EmvcoProfileProcess>
 8001e28:	e77a      	b.n	8001d20 <DiscoveryLoop_Demo+0xb0>
#endif /* ENABLE_EMVCO_PROF */
        }
        else
        {
            wEntryPoint = NFCForumProcess(wEntryPoint, status);
 8001e2a:	8a7a      	ldrh	r2, [r7, #18]
 8001e2c:	8afb      	ldrh	r3, [r7, #22]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f875 	bl	8001f20 <NFCForumProcess>
 8001e36:	4603      	mov	r3, r0
 8001e38:	82fb      	strh	r3, [r7, #22]

            /* 恢复轮询设置 Set Poll Configuration */
            statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, bSavePollTechCfg);
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <DiscoveryLoop_Demo+0x288>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	218c      	movs	r1, #140	@ 0x8c
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f007 fa74 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	823b      	strh	r3, [r7, #16]
            CHECK_STATUS(statustmp);
 8001e4c:	8a3b      	ldrh	r3, [r7, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <DiscoveryLoop_Demo+0x1fc>
 8001e52:	8a3b      	ldrh	r3, [r7, #16]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8001e5a:	4826      	ldr	r0, [pc, #152]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001e5c:	f01f fd2e 	bl	80218bc <iprintf>
 8001e60:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f01f fc52 	bl	8021710 <fflush>

            /* 关闭RF场 Switch off RF field */
            statustmp = phhalHw_FieldOff(pHal);
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <DiscoveryLoop_Demo+0x28c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00d fc5f 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 8001e76:	4603      	mov	r3, r0
 8001e78:	823b      	strh	r3, [r7, #16]
            CHECK_STATUS(statustmp);
 8001e7a:	8a3b      	ldrh	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00c      	beq.n	8001e9a <DiscoveryLoop_Demo+0x22a>
 8001e80:	8a3b      	ldrh	r3, [r7, #16]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001e88:	481a      	ldr	r0, [pc, #104]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001e8a:	f01f fd17 	bl	80218bc <iprintf>
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f01f fc3b 	bl	8021710 <fflush>

            /* 等待场关闭完成 Wait for field-off time-out */
            statustmp = phhalHw_Wait(pHal, PHHAL_HW_TIME_MICROSECONDS, 5100);
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <DiscoveryLoop_Demo+0x28c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00d fc69 	bl	800f77c <phhalHw_Pn5180_Wait>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	823b      	strh	r3, [r7, #16]
            CHECK_STATUS(statustmp);	// error
 8001eae:	8a3b      	ldrh	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00c      	beq.n	8001ece <DiscoveryLoop_Demo+0x25e>
 8001eb4:	8a3b      	ldrh	r3, [r7, #16]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8001ebc:	480d      	ldr	r0, [pc, #52]	@ (8001ef4 <DiscoveryLoop_Demo+0x284>)
 8001ebe:	f01f fcfd 	bl	80218bc <iprintf>
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f01f fc21 	bl	8021710 <fflush>

            DEBUG_PRINTF("Poll cycle complete, waiting...\r\n");
 8001ece:	4813      	ldr	r0, [pc, #76]	@ (8001f1c <DiscoveryLoop_Demo+0x2ac>)
 8001ed0:	f01f fd64 	bl	802199c <puts>
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <DiscoveryLoop_Demo+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f01f fc18 	bl	8021710 <fflush>
            HAL_Delay(1000);  // 1秒延时，方便观察
 8001ee0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ee4:	f019 fdf6 	bl	801bad4 <HAL_Delay>
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8001ee8:	e71a      	b.n	8001d20 <DiscoveryLoop_Demo+0xb0>
 8001eea:	bf00      	nop
 8001eec:	08023c88 	.word	0x08023c88
 8001ef0:	20000084 	.word	0x20000084
 8001ef4:	08023be8 	.word	0x08023be8
 8001ef8:	2000053c 	.word	0x2000053c
 8001efc:	200008e0 	.word	0x200008e0
 8001f00:	08023cac 	.word	0x08023cac
 8001f04:	08023cc4 	.word	0x08023cc4
 8001f08:	08023ce0 	.word	0x08023ce0
 8001f0c:	08023d0c 	.word	0x08023d0c
 8001f10:	08023d48 	.word	0x08023d48
 8001f14:	08023d78 	.word	0x08023d78
 8001f18:	08023dac 	.word	0x08023dac
 8001f1c:	08023ddc 	.word	0x08023ddc

08001f20 <NFCForumProcess>:
 * 1.输出识别到的卡信息
 * 2.执行冲突解决和卡激活
 * 3.决定下一个入口点（轮询Poll 或 监听Listen）
 */
uint16_t NFCForumProcess(uint16_t wEntryPoint, phStatus_t DiscLoopStatus)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	80bb      	strh	r3, [r7, #4]
    phStatus_t    status;
    uint16_t      wTechDetected = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	823b      	strh	r3, [r7, #16]
    uint16_t      wNumberOfTags = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	81fb      	strh	r3, [r7, #14]
    uint16_t      wValue;
    uint8_t       bIndex;
    uint16_t      wReturnEntryPoint;

    // 轮询POLL
    if(wEntryPoint == PHAC_DISCLOOP_ENTRY_POINT_POLL)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 826e 	bne.w	800241c <NFCForumProcess+0x4fc>
    {
    	/* 1.检测到多个技术，选择其中一个，配置冲突解决状态，重新执行POLL */
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_TECH_DETECTED)
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b88      	cmp	r3, #136	@ 0x88
 8001f46:	f040 80c6 	bne.w	80020d6 <NFCForumProcess+0x1b6>
        {
            DEBUG_PRINTF (" \n Multiple technology detected: \n");
 8001f4a:	489a      	ldr	r0, [pc, #616]	@ (80021b4 <NFCForumProcess+0x294>)
 8001f4c:	f01f fd26 	bl	802199c <puts>
 8001f50:	4b99      	ldr	r3, [pc, #612]	@ (80021b8 <NFCForumProcess+0x298>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f01f fbda 	bl	8021710 <fflush>

            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8001f5c:	4b97      	ldr	r3, [pc, #604]	@ (80021bc <NFCForumProcess+0x29c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	2187      	movs	r1, #135	@ 0x87
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 fe60 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8001f70:	8afb      	ldrh	r3, [r7, #22]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <NFCForumProcess+0x70>
 8001f76:	8afb      	ldrh	r3, [r7, #22]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f240 116d 	movw	r1, #365	@ 0x16d
 8001f7e:	4890      	ldr	r0, [pc, #576]	@ (80021c0 <NFCForumProcess+0x2a0>)
 8001f80:	f01f fc9c 	bl	80218bc <iprintf>
 8001f84:	4b8c      	ldr	r3, [pc, #560]	@ (80021b8 <NFCForumProcess+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f01f fbc0 	bl	8021710 <fflush>

            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8001f90:	8a3b      	ldrh	r3, [r7, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <NFCForumProcess+0x8c>
            {
                DEBUG_PRINTF (" \tType A detected... \n");
 8001f9a:	488a      	ldr	r0, [pc, #552]	@ (80021c4 <NFCForumProcess+0x2a4>)
 8001f9c:	f01f fcfe 	bl	802199c <puts>
 8001fa0:	4b85      	ldr	r3, [pc, #532]	@ (80021b8 <NFCForumProcess+0x298>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f01f fbb2 	bl	8021710 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 8001fac:	8a3b      	ldrh	r3, [r7, #16]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <NFCForumProcess+0xa8>
            {
                DEBUG_PRINTF (" \tType B detected... \n");
 8001fb6:	4884      	ldr	r0, [pc, #528]	@ (80021c8 <NFCForumProcess+0x2a8>)
 8001fb8:	f01f fcf0 	bl	802199c <puts>
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80021b8 <NFCForumProcess+0x298>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f01f fba4 	bl	8021710 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212))
 8001fc8:	8a3b      	ldrh	r3, [r7, #16]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <NFCForumProcess+0xc4>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 212... \n");
 8001fd2:	487e      	ldr	r0, [pc, #504]	@ (80021cc <NFCForumProcess+0x2ac>)
 8001fd4:	f01f fce2 	bl	802199c <puts>
 8001fd8:	4b77      	ldr	r3, [pc, #476]	@ (80021b8 <NFCForumProcess+0x298>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f01f fb96 	bl	8021710 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8001fe4:	8a3b      	ldrh	r3, [r7, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <NFCForumProcess+0xe0>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 424... \n");
 8001fee:	4878      	ldr	r0, [pc, #480]	@ (80021d0 <NFCForumProcess+0x2b0>)
 8001ff0:	f01f fcd4 	bl	802199c <puts>
 8001ff4:	4b70      	ldr	r3, [pc, #448]	@ (80021b8 <NFCForumProcess+0x298>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f01f fb88 	bl	8021710 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 8002000:	8a3b      	ldrh	r3, [r7, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <NFCForumProcess+0xfc>
            {
                DEBUG_PRINTF(" \tType V / ISO 15693 / T5T detected... \n");
 800200a:	4872      	ldr	r0, [pc, #456]	@ (80021d4 <NFCForumProcess+0x2b4>)
 800200c:	f01f fcc6 	bl	802199c <puts>
 8002010:	4b69      	ldr	r3, [pc, #420]	@ (80021b8 <NFCForumProcess+0x298>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4618      	mov	r0, r3
 8002018:	f01f fb7a 	bl	8021710 <fflush>
            }

            /* Select 1st Detected Technology to Resolve*/
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800201c:	2300      	movs	r3, #0
 800201e:	757b      	strb	r3, [r7, #21]
 8002020:	e029      	b.n	8002076 <NFCForumProcess+0x156>
            {
                if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	461a      	mov	r2, r3
 8002026:	7d7b      	ldrb	r3, [r7, #21]
 8002028:	fa42 f303 	asr.w	r3, r2, r3
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01d      	beq.n	8002070 <NFCForumProcess+0x150>
                {
                    /* Configure for one of the detected technology */
                    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (1 << bIndex));
 8002034:	4b61      	ldr	r3, [pc, #388]	@ (80021bc <NFCForumProcess+0x29c>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	7d7b      	ldrb	r3, [r7, #21]
 800203a:	2201      	movs	r2, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	218c      	movs	r1, #140	@ 0x8c
 8002046:	f007 f973 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 800204e:	8afb      	ldrh	r3, [r7, #22]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d014      	beq.n	800207e <NFCForumProcess+0x15e>
 8002054:	8afb      	ldrh	r3, [r7, #22]
 8002056:	461a      	mov	r2, r3
 8002058:	f240 118b 	movw	r1, #395	@ 0x18b
 800205c:	4858      	ldr	r0, [pc, #352]	@ (80021c0 <NFCForumProcess+0x2a0>)
 800205e:	f01f fc2d 	bl	80218bc <iprintf>
 8002062:	4b55      	ldr	r3, [pc, #340]	@ (80021b8 <NFCForumProcess+0x298>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4618      	mov	r0, r3
 800206a:	f01f fb51 	bl	8021710 <fflush>
                    break;
 800206e:	e006      	b.n	800207e <NFCForumProcess+0x15e>
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8002070:	7d7b      	ldrb	r3, [r7, #21]
 8002072:	3301      	adds	r3, #1
 8002074:	757b      	strb	r3, [r7, #21]
 8002076:	7d7b      	ldrb	r3, [r7, #21]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d9d2      	bls.n	8002022 <NFCForumProcess+0x102>
 800207c:	e000      	b.n	8002080 <NFCForumProcess+0x160>
                    break;
 800207e:	bf00      	nop
                }
            }

            /* Print the technology resolved */
            phApp_PrintTech((1 << bIndex));
 8002080:	7d7b      	ldrb	r3, [r7, #21]
 8002082:	2201      	movs	r2, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f002 f922 	bl	80042d4 <phApp_PrintTech>

            /* Set Discovery Poll State to collision resolution */
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION);
 8002090:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <NFCForumProcess+0x29c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2202      	movs	r2, #2
 8002096:	2184      	movs	r1, #132	@ 0x84
 8002098:	4618      	mov	r0, r3
 800209a:	f007 f949 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80020a2:	8afb      	ldrh	r3, [r7, #22]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00c      	beq.n	80020c2 <NFCForumProcess+0x1a2>
 80020a8:	8afb      	ldrh	r3, [r7, #22]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f240 1195 	movw	r1, #405	@ 0x195
 80020b0:	4843      	ldr	r0, [pc, #268]	@ (80021c0 <NFCForumProcess+0x2a0>)
 80020b2:	f01f fc03 	bl	80218bc <iprintf>
 80020b6:	4b40      	ldr	r3, [pc, #256]	@ (80021b8 <NFCForumProcess+0x298>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4618      	mov	r0, r3
 80020be:	f01f fb27 	bl	8021710 <fflush>

            /* Restart discovery loop in poll mode from collision resolution phase */
            DiscLoopStatus = phacDiscLoop_Run(pDiscLoop, wEntryPoint);
 80020c2:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <NFCForumProcess+0x29c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 f85d 	bl	800918c <phacDiscLoop_Sw_Run>
 80020d2:	4603      	mov	r3, r0
 80020d4:	80bb      	strh	r3, [r7, #4]
        }

        /* 2. 解决了多个设备，获取tag数量、技术类型，激活其中一个卡 */
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED)
 80020d6:	88bb      	ldrh	r3, [r7, #4]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b8a      	cmp	r3, #138	@ 0x8a
 80020dc:	f040 80b5 	bne.w	800224a <NFCForumProcess+0x32a>
        {
            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80020e0:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <NFCForumProcess+0x29c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f107 0210 	add.w	r2, r7, #16
 80020e8:	2187      	movs	r1, #135	@ 0x87
 80020ea:	4618      	mov	r0, r3
 80020ec:	f007 fd9e 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <NFCForumProcess+0x1f4>
 80020fa:	8afb      	ldrh	r3, [r7, #22]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8002102:	482f      	ldr	r0, [pc, #188]	@ (80021c0 <NFCForumProcess+0x2a0>)
 8002104:	f01f fbda 	bl	80218bc <iprintf>
 8002108:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <NFCForumProcess+0x298>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f01f fafe 	bl	8021710 <fflush>

            /* Get number of tags detected */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 8002114:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <NFCForumProcess+0x29c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f107 020e 	add.w	r2, r7, #14
 800211c:	2181      	movs	r1, #129	@ 0x81
 800211e:	4618      	mov	r0, r3
 8002120:	f007 fd84 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002128:	8afb      	ldrh	r3, [r7, #22]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <NFCForumProcess+0x228>
 800212e:	8afb      	ldrh	r3, [r7, #22]
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002136:	4822      	ldr	r0, [pc, #136]	@ (80021c0 <NFCForumProcess+0x2a0>)
 8002138:	f01f fbc0 	bl	80218bc <iprintf>
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <NFCForumProcess+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f01f fae4 	bl	8021710 <fflush>

            DEBUG_PRINTF (" \n Multiple cards resolved: %d cards \n",wNumberOfTags);
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	4619      	mov	r1, r3
 800214c:	4822      	ldr	r0, [pc, #136]	@ (80021d8 <NFCForumProcess+0x2b8>)
 800214e:	f01f fbb5 	bl	80218bc <iprintf>
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <NFCForumProcess+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f01f fad9 	bl	8021710 <fflush>
            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <NFCForumProcess+0x29c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	89f9      	ldrh	r1, [r7, #14]
 8002164:	8a3a      	ldrh	r2, [r7, #16]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 f94c 	bl	8004404 <phApp_PrintTagInfo>

            if(wNumberOfTags > 1)
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	2b01      	cmp	r3, #1
 8002170:	f240 8151 	bls.w	8002416 <NFCForumProcess+0x4f6>
            {
                /* Get 1st Detected Technology and Activate device at index 0 */
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8002174:	2300      	movs	r3, #0
 8002176:	757b      	strb	r3, [r7, #21]
 8002178:	e035      	b.n	80021e6 <NFCForumProcess+0x2c6>
                {
                    if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 800217a:	8a3b      	ldrh	r3, [r7, #16]
 800217c:	461a      	mov	r2, r3
 800217e:	7d7b      	ldrb	r3, [r7, #21]
 8002180:	fa42 f303 	asr.w	r3, r2, r3
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d029      	beq.n	80021e0 <NFCForumProcess+0x2c0>
                    {
                        DEBUG_PRINTF("\t Activating one card...\n");
 800218c:	4813      	ldr	r0, [pc, #76]	@ (80021dc <NFCForumProcess+0x2bc>)
 800218e:	f01f fc05 	bl	802199c <puts>
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <NFCForumProcess+0x298>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4618      	mov	r0, r3
 800219a:	f01f fab9 	bl	8021710 <fflush>
                        status = phacDiscLoop_ActivateCard(pDiscLoop, bIndex, 0);
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <NFCForumProcess+0x29c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	7d79      	ldrb	r1, [r7, #21]
 80021a4:	2200      	movs	r2, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f007 fffc 	bl	800a1a4 <phacDiscLoop_Sw_ActivateCard>
 80021ac:	4603      	mov	r3, r0
 80021ae:	82fb      	strh	r3, [r7, #22]
                        break;
 80021b0:	e01c      	b.n	80021ec <NFCForumProcess+0x2cc>
 80021b2:	bf00      	nop
 80021b4:	08023e00 	.word	0x08023e00
 80021b8:	20000084 	.word	0x20000084
 80021bc:	20000538 	.word	0x20000538
 80021c0:	08023be8 	.word	0x08023be8
 80021c4:	08023e24 	.word	0x08023e24
 80021c8:	08023e3c 	.word	0x08023e3c
 80021cc:	08023e54 	.word	0x08023e54
 80021d0:	08023e80 	.word	0x08023e80
 80021d4:	08023eac 	.word	0x08023eac
 80021d8:	08023ed4 	.word	0x08023ed4
 80021dc:	08023efc 	.word	0x08023efc
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 80021e0:	7d7b      	ldrb	r3, [r7, #21]
 80021e2:	3301      	adds	r3, #1
 80021e4:	757b      	strb	r3, [r7, #21]
 80021e6:	7d7b      	ldrb	r3, [r7, #21]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d9c6      	bls.n	800217a <NFCForumProcess+0x25a>
                    }
                }

                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 80021ec:	8afb      	ldrh	r3, [r7, #22]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b8b      	cmp	r3, #139	@ 0x8b
 80021f2:	d008      	beq.n	8002206 <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 80021f4:	8afb      	ldrh	r3, [r7, #22]
 80021f6:	b2db      	uxtb	r3, r3
                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 80021f8:	2b8d      	cmp	r3, #141	@ 0x8d
 80021fa:	d004      	beq.n	8002206 <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND))
 80021fc:	8afb      	ldrh	r3, [r7, #22]
 80021fe:	b2db      	uxtb	r3, r3
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 8002200:	2b8e      	cmp	r3, #142	@ 0x8e
 8002202:	f040 8108 	bne.w	8002416 <NFCForumProcess+0x4f6>
                {
                    /* Get Detected Technology Type */
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002206:	4ba7      	ldr	r3, [pc, #668]	@ (80024a4 <NFCForumProcess+0x584>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f107 0210 	add.w	r2, r7, #16
 800220e:	2187      	movs	r1, #135	@ 0x87
 8002210:	4618      	mov	r0, r3
 8002212:	f007 fd0b 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <NFCForumProcess+0x31a>
 8002220:	8afb      	ldrh	r3, [r7, #22]
 8002222:	461a      	mov	r2, r3
 8002224:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8002228:	489f      	ldr	r0, [pc, #636]	@ (80024a8 <NFCForumProcess+0x588>)
 800222a:	f01f fb47 	bl	80218bc <iprintf>
 800222e:	4b9f      	ldr	r3, [pc, #636]	@ (80024ac <NFCForumProcess+0x58c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f01f fa6b 	bl	8021710 <fflush>

                    phApp_PrintTagInfo(pDiscLoop, 0x01, wTechDetected);
 800223a:	4b9a      	ldr	r3, [pc, #616]	@ (80024a4 <NFCForumProcess+0x584>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	8a3a      	ldrh	r2, [r7, #16]
 8002240:	2101      	movs	r1, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f002 f8de 	bl	8004404 <phApp_PrintTagInfo>
 8002248:	e0e5      	b.n	8002416 <NFCForumProcess+0x4f6>
                    PRINT_INFO("\t\tCard activation failed...\n");
                }
            }
            /* Switch to LISTEN mode after POLL mode */
        }
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b84      	cmp	r3, #132	@ 0x84
 8002250:	f000 80e1 	beq.w	8002416 <NFCForumProcess+0x4f6>
                ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_DEVICE_RESOLVED))
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	b2db      	uxtb	r3, r3
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 8002258:	2b85      	cmp	r3, #133	@ 0x85
 800225a:	f000 80dc 	beq.w	8002416 <NFCForumProcess+0x4f6>
        {
            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFON)
 800225e:	88bb      	ldrh	r3, [r7, #4]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b82      	cmp	r3, #130	@ 0x82
 8002264:	f000 80d7 	beq.w	8002416 <NFCForumProcess+0x4f6>
            /*
             * If external RF is detected during POLL, return back so that the application
             * can restart the loop in LISTEN mode
             */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 8002268:	88bb      	ldrh	r3, [r7, #4]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b8e      	cmp	r3, #142	@ 0x8e
 800226e:	d12a      	bne.n	80022c6 <NFCForumProcess+0x3a6>
        {
            DEBUG_PRINTF (" \n Device having T4T and NFC-DEP support detected... \n");
 8002270:	488f      	ldr	r0, [pc, #572]	@ (80024b0 <NFCForumProcess+0x590>)
 8002272:	f01f fb93 	bl	802199c <puts>
 8002276:	4b8d      	ldr	r3, [pc, #564]	@ (80024ac <NFCForumProcess+0x58c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f01f fa47 	bl	8021710 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002282:	4b88      	ldr	r3, [pc, #544]	@ (80024a4 <NFCForumProcess+0x584>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f107 0210 	add.w	r2, r7, #16
 800228a:	2187      	movs	r1, #135	@ 0x87
 800228c:	4618      	mov	r0, r3
 800228e:	f007 fccd 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002296:	8afb      	ldrh	r3, [r7, #22]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00c      	beq.n	80022b6 <NFCForumProcess+0x396>
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	461a      	mov	r2, r3
 80022a0:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80022a4:	4880      	ldr	r0, [pc, #512]	@ (80024a8 <NFCForumProcess+0x588>)
 80022a6:	f01f fb09 	bl	80218bc <iprintf>
 80022aa:	4b80      	ldr	r3, [pc, #512]	@ (80024ac <NFCForumProcess+0x58c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f01f fa2d 	bl	8021710 <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 80022b6:	4b7b      	ldr	r3, [pc, #492]	@ (80024a4 <NFCForumProcess+0x584>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	8a3a      	ldrh	r2, [r7, #16]
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 f8a0 	bl	8004404 <phApp_PrintTagInfo>
 80022c4:	e0a7      	b.n	8002416 <NFCForumProcess+0x4f6>

        /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b8b      	cmp	r3, #139	@ 0x8b
 80022cc:	d144      	bne.n	8002358 <NFCForumProcess+0x438>
        {
            DEBUG_PRINTF (" \n Card detected and activated successfully... \n");
 80022ce:	4879      	ldr	r0, [pc, #484]	@ (80024b4 <NFCForumProcess+0x594>)
 80022d0:	f01f fb64 	bl	802199c <puts>
 80022d4:	4b75      	ldr	r3, [pc, #468]	@ (80024ac <NFCForumProcess+0x58c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4618      	mov	r0, r3
 80022dc:	f01f fa18 	bl	8021710 <fflush>
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 80022e0:	4b70      	ldr	r3, [pc, #448]	@ (80024a4 <NFCForumProcess+0x584>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f107 020e 	add.w	r2, r7, #14
 80022e8:	2181      	movs	r1, #129	@ 0x81
 80022ea:	4618      	mov	r0, r3
 80022ec:	f007 fc9e 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <NFCForumProcess+0x3f4>
 80022fa:	8afb      	ldrh	r3, [r7, #22]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002302:	4869      	ldr	r0, [pc, #420]	@ (80024a8 <NFCForumProcess+0x588>)
 8002304:	f01f fada 	bl	80218bc <iprintf>
 8002308:	4b68      	ldr	r3, [pc, #416]	@ (80024ac <NFCForumProcess+0x58c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f01f f9fe 	bl	8021710 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002314:	4b63      	ldr	r3, [pc, #396]	@ (80024a4 <NFCForumProcess+0x584>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f107 0210 	add.w	r2, r7, #16
 800231c:	2187      	movs	r1, #135	@ 0x87
 800231e:	4618      	mov	r0, r3
 8002320:	f007 fc84 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <NFCForumProcess+0x428>
 800232e:	8afb      	ldrh	r3, [r7, #22]
 8002330:	461a      	mov	r2, r3
 8002332:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8002336:	485c      	ldr	r0, [pc, #368]	@ (80024a8 <NFCForumProcess+0x588>)
 8002338:	f01f fac0 	bl	80218bc <iprintf>
 800233c:	4b5b      	ldr	r3, [pc, #364]	@ (80024ac <NFCForumProcess+0x58c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f01f f9e4 	bl	8021710 <fflush>

            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 8002348:	4b56      	ldr	r3, [pc, #344]	@ (80024a4 <NFCForumProcess+0x584>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	89f9      	ldrh	r1, [r7, #14]
 800234e:	8a3a      	ldrh	r2, [r7, #16]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 f857 	bl	8004404 <phApp_PrintTagInfo>
 8002356:	e05e      	b.n	8002416 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED)
 8002358:	88bb      	ldrh	r3, [r7, #4]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b8c      	cmp	r3, #140	@ 0x8c
 800235e:	d109      	bne.n	8002374 <NFCForumProcess+0x454>
        {
            DEBUG_PRINTF (" \n Active target detected... \n");
 8002360:	4855      	ldr	r0, [pc, #340]	@ (80024b8 <NFCForumProcess+0x598>)
 8002362:	f01f fb1b 	bl	802199c <puts>
 8002366:	4b51      	ldr	r3, [pc, #324]	@ (80024ac <NFCForumProcess+0x58c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4618      	mov	r0, r3
 800236e:	f01f f9cf 	bl	8021710 <fflush>
 8002372:	e050      	b.n	8002416 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED)
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b8d      	cmp	r3, #141	@ 0x8d
 800237a:	d12a      	bne.n	80023d2 <NFCForumProcess+0x4b2>
        {
            DEBUG_PRINTF (" \n Passive target detected... \n");
 800237c:	484f      	ldr	r0, [pc, #316]	@ (80024bc <NFCForumProcess+0x59c>)
 800237e:	f01f fb0d 	bl	802199c <puts>
 8002382:	4b4a      	ldr	r3, [pc, #296]	@ (80024ac <NFCForumProcess+0x58c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4618      	mov	r0, r3
 800238a:	f01f f9c1 	bl	8021710 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 800238e:	4b45      	ldr	r3, [pc, #276]	@ (80024a4 <NFCForumProcess+0x584>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f107 0210 	add.w	r2, r7, #16
 8002396:	2187      	movs	r1, #135	@ 0x87
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fc47 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00c      	beq.n	80023c2 <NFCForumProcess+0x4a2>
 80023a8:	8afb      	ldrh	r3, [r7, #22]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f240 11f9 	movw	r1, #505	@ 0x1f9
 80023b0:	483d      	ldr	r0, [pc, #244]	@ (80024a8 <NFCForumProcess+0x588>)
 80023b2:	f01f fa83 	bl	80218bc <iprintf>
 80023b6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <NFCForumProcess+0x58c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4618      	mov	r0, r3
 80023be:	f01f f9a7 	bl	8021710 <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 80023c2:	4b38      	ldr	r3, [pc, #224]	@ (80024a4 <NFCForumProcess+0x584>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	8a3a      	ldrh	r2, [r7, #16]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 f81a 	bl	8004404 <phApp_PrintTagInfo>
 80023d0:	e021      	b.n	8002416 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED)
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b86      	cmp	r3, #134	@ 0x86
 80023d8:	d01d      	beq.n	8002416 <NFCForumProcess+0x4f6>
        {
            /* LPCD is succeed but no tag is detected. */
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 80023da:	88bb      	ldrh	r3, [r7, #4]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b80      	cmp	r3, #128	@ 0x80
 80023e0:	d119      	bne.n	8002416 <NFCForumProcess+0x4f6>
            {
                status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 80023e2:	4b30      	ldr	r3, [pc, #192]	@ (80024a4 <NFCForumProcess+0x584>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f107 020c 	add.w	r2, r7, #12
 80023ea:	2185      	movs	r1, #133	@ 0x85
 80023ec:	4618      	mov	r0, r3
 80023ee:	f007 fc1d 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	82fb      	strh	r3, [r7, #22]
                CHECK_STATUS(status);
 80023f6:	8afb      	ldrh	r3, [r7, #22]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <NFCForumProcess+0x4f6>
 80023fc:	8afb      	ldrh	r3, [r7, #22]
 80023fe:	461a      	mov	r2, r3
 8002400:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002404:	4828      	ldr	r0, [pc, #160]	@ (80024a8 <NFCForumProcess+0x588>)
 8002406:	f01f fa59 	bl	80218bc <iprintf>
 800240a:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <NFCForumProcess+0x58c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f01f f97d 	bl	8021710 <fflush>
                DEBUG_ERROR_PRINT(PrintErrorInfo(status));
            }
        }

        /* Update the Entry point to LISTEN mode. */
        wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 8002416:	2301      	movs	r3, #1
 8002418:	827b      	strh	r3, [r7, #18]
 800241a:	e088      	b.n	800252e <NFCForumProcess+0x60e>

    }
    else
    {
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFOFF)
 800241c:	88bb      	ldrh	r3, [r7, #4]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b83      	cmp	r3, #131	@ 0x83
 8002422:	d152      	bne.n	80024ca <NFCForumProcess+0x5aa>
            /*
             * Enters here if in the target/card mode and external RF is not available
             * Wait for LISTEN timeout till an external RF is detected.
             * Application may choose to go into standby at this point.
             */
            status = phhalHw_EventConsume(pHal);
 8002424:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <NFCForumProcess+0x5a0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f010 f849 	bl	80124c0 <phhalHw_Pn5180_EventConsume>
 800242e:	4603      	mov	r3, r0
 8002430:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002432:	8afb      	ldrh	r3, [r7, #22]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00c      	beq.n	8002452 <NFCForumProcess+0x532>
 8002438:	8afb      	ldrh	r3, [r7, #22]
 800243a:	461a      	mov	r2, r3
 800243c:	f240 211f 	movw	r1, #543	@ 0x21f
 8002440:	4819      	ldr	r0, [pc, #100]	@ (80024a8 <NFCForumProcess+0x588>)
 8002442:	f01f fa3b 	bl	80218bc <iprintf>
 8002446:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <NFCForumProcess+0x58c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f01f f95f 	bl	8021710 <fflush>

            status = phhalHw_SetConfig(pHal, PHHAL_HW_CONFIG_RFON_INTERRUPT, PH_ON);
 8002452:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <NFCForumProcess+0x5a0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	2157      	movs	r1, #87	@ 0x57
 800245a:	4618      	mov	r0, r3
 800245c:	f00d fa48 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002464:	8afb      	ldrh	r3, [r7, #22]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <NFCForumProcess+0x564>
 800246a:	8afb      	ldrh	r3, [r7, #22]
 800246c:	461a      	mov	r2, r3
 800246e:	f240 2122 	movw	r1, #546	@ 0x222
 8002472:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <NFCForumProcess+0x588>)
 8002474:	f01f fa22 	bl	80218bc <iprintf>
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <NFCForumProcess+0x58c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4618      	mov	r0, r3
 8002480:	f01f f946 	bl	8021710 <fflush>

            status = phhalHw_EventWait(pHal, LISTEN_PHASE_TIME_MS);
 8002484:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <NFCForumProcess+0x5a0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800248c:	4618      	mov	r0, r3
 800248e:	f00f fffd 	bl	801248c <phhalHw_Pn5180_EventWait>
 8002492:	4603      	mov	r3, r0
 8002494:	82fb      	strh	r3, [r7, #22]
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8002496:	8afb      	ldrh	r3, [r7, #22]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d112      	bne.n	80024c4 <NFCForumProcess+0x5a4>
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 800249e:	2300      	movs	r3, #0
 80024a0:	827b      	strh	r3, [r7, #18]
 80024a2:	e044      	b.n	800252e <NFCForumProcess+0x60e>
 80024a4:	20000538 	.word	0x20000538
 80024a8:	08023be8 	.word	0x08023be8
 80024ac:	20000084 	.word	0x20000084
 80024b0:	08023f18 	.word	0x08023f18
 80024b4:	08023f50 	.word	0x08023f50
 80024b8:	08023f80 	.word	0x08023f80
 80024bc:	08023fa0 	.word	0x08023fa0
 80024c0:	200008e0 	.word	0x200008e0
            }
            else
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 80024c4:	2301      	movs	r3, #1
 80024c6:	827b      	strh	r3, [r7, #18]
 80024c8:	e031      	b.n	800252e <NFCForumProcess+0x60e>
            }
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVATED_BY_PEER)
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b8f      	cmp	r3, #143	@ 0x8f
 80024d0:	d109      	bne.n	80024e6 <NFCForumProcess+0x5c6>
            {
                DEBUG_PRINTF (" \n Device activated in listen mode... \n");
 80024d2:	4819      	ldr	r0, [pc, #100]	@ (8002538 <NFCForumProcess+0x618>)
 80024d4:	f01f fa62 	bl	802199c <puts>
 80024d8:	4b18      	ldr	r3, [pc, #96]	@ (800253c <NFCForumProcess+0x61c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f01f f916 	bl	8021710 <fflush>
 80024e4:	e021      	b.n	800252a <NFCForumProcess+0x60a>
            }
            else if ((DiscLoopStatus & PH_ERR_MASK) == PH_ERR_INVALID_PARAMETER)
 80024e6:	88bb      	ldrh	r3, [r7, #4]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b21      	cmp	r3, #33	@ 0x21
 80024ec:	d01d      	beq.n	800252a <NFCForumProcess+0x60a>
                /* In case of Front end used is RC663, then listen mode is not supported.
                 * Switch from listen mode to poll mode. */
            }
            else
            {
                if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 80024ee:	88bb      	ldrh	r3, [r7, #4]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b80      	cmp	r3, #128	@ 0x80
 80024f4:	d119      	bne.n	800252a <NFCForumProcess+0x60a>
                {
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <NFCForumProcess+0x620>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f107 020c 	add.w	r2, r7, #12
 80024fe:	2185      	movs	r1, #133	@ 0x85
 8002500:	4618      	mov	r0, r3
 8002502:	f007 fb93 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 800250a:	8afb      	ldrh	r3, [r7, #22]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <NFCForumProcess+0x60a>
 8002510:	8afb      	ldrh	r3, [r7, #22]
 8002512:	461a      	mov	r2, r3
 8002514:	f240 213e 	movw	r1, #574	@ 0x23e
 8002518:	480a      	ldr	r0, [pc, #40]	@ (8002544 <NFCForumProcess+0x624>)
 800251a:	f01f f9cf 	bl	80218bc <iprintf>
 800251e:	4b07      	ldr	r3, [pc, #28]	@ (800253c <NFCForumProcess+0x61c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f01f f8f3 	bl	8021710 <fflush>
                    DEBUG_ERROR_PRINT(PrintErrorInfo(status));
                }
            }

            /* On successful activated by Peer, switch to LISTEN mode */
            wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 800252a:	2300      	movs	r3, #0
 800252c:	827b      	strh	r3, [r7, #18]
        }
    }
    return wReturnEntryPoint;
 800252e:	8a7b      	ldrh	r3, [r7, #18]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	08023fc0 	.word	0x08023fc0
 800253c:	20000084 	.word	0x20000084
 8002540:	20000538 	.word	0x20000538
 8002544:	08023be8 	.word	0x08023be8

08002548 <LoadProfile>:
* 根据给定的NFC 配置 profile（如 NFC Forum 或 EMVCo）为 Discovery Loop 加载默认的轮询参数、通信协议支持位图、超时设置等
* \param   bProfile      Reader Library Profile
* \note    Values used below are default and is for demonstration purpose.
*/
static phStatus_t LoadProfile(phacDiscLoop_Profile_t bProfile)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
    phStatus_t status = PH_ERR_SUCCESS;
 8002552:	2300      	movs	r3, #0
 8002554:	82fb      	strh	r3, [r7, #22]
    uint16_t   wPasPollConfig = 0;	// 被动轮询技术掩码（如TypeA/B/F/V）
 8002556:	2300      	movs	r3, #0
 8002558:	82bb      	strh	r3, [r7, #20]
    uint16_t   wActPollConfig = 0;	// 主动轮询技术掩码（如P2P 106/212/424kbps）
 800255a:	2300      	movs	r3, #0
 800255c:	827b      	strh	r3, [r7, #18]
    uint16_t   wPasLisConfig = 0;	// 被动监听模式支持（当设备作为被动Tag）
 800255e:	2300      	movs	r3, #0
 8002560:	823b      	strh	r3, [r7, #16]
    uint16_t   wActLisConfig = 0;	// 主动监听模式支持（设备作为主动P2P目标）
 8002562:	2300      	movs	r3, #0
 8002564:	81fb      	strh	r3, [r7, #14]

/* 1.通过一系列#ifdef宏, 构建这几个变量的位图. 即哪些协议被支持, 就把对应的bit位置为1 */
/* 1.1 被动轮询技术掩码 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8002566:	8abb      	ldrh	r3, [r7, #20]
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800256e:	8abb      	ldrh	r3, [r7, #20]
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    wPasPollConfig |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 8002576:	8abb      	ldrh	r3, [r7, #20]
 8002578:	f043 030c 	orr.w	r3, r3, #12
 800257c:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800257e:	8abb      	ldrh	r3, [r7, #20]
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 8002586:	8abb      	ldrh	r3, [r7, #20]
 8002588:	f043 0320 	orr.w	r3, r3, #32
 800258c:	82bb      	strh	r3, [r7, #20]
#endif

/* 1.2 主动轮询技术掩码 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_106;
 800258e:	8a7b      	ldrh	r3, [r7, #18]
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212;
 8002596:	8a7b      	ldrh	r3, [r7, #18]
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424;
 800259e:	8a7b      	ldrh	r3, [r7, #18]
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	827b      	strh	r3, [r7, #18]
#endif

/* 1.3 被动监听模式支持 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80025a6:	8a3b      	ldrh	r3, [r7, #16]
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80025ae:	8a3b      	ldrh	r3, [r7, #16]
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80025b6:	8a3b      	ldrh	r3, [r7, #16]
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	823b      	strh	r3, [r7, #16]
#endif

/* 1.4 主动监听模式支持 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80025be:	89fb      	ldrh	r3, [r7, #14]
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	81fb      	strh	r3, [r7, #14]
#endif

/* 2. 根据配置 Profile 加载对应参数 */
    if(bProfile == PHAC_DISCLOOP_PROFILE_NFC)
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 8209 	bne.w	80029f0 <LoadProfile+0x4a8>
    {
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 80025de:	4baf      	ldr	r3, [pc, #700]	@ (800289c <LoadProfile+0x354>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2186      	movs	r1, #134	@ 0x86
 80025e6:	4618      	mov	r0, r3
 80025e8:	f006 fea2 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80025ec:	4603      	mov	r3, r0
 80025ee:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80025f0:	8afb      	ldrh	r3, [r7, #22]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <LoadProfile+0xc8>
 80025f6:	8afb      	ldrh	r3, [r7, #22]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f240 2196 	movw	r1, #662	@ 0x296
 80025fe:	48a8      	ldr	r0, [pc, #672]	@ (80028a0 <LoadProfile+0x358>)
 8002600:	f01f f95c 	bl	80218bc <iprintf>
 8002604:	4ba7      	ldr	r3, [pc, #668]	@ (80028a4 <LoadProfile+0x35c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f01f f880 	bl	8021710 <fflush>

        /* Set Passive poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, wPasPollConfig);
 8002610:	4ba2      	ldr	r3, [pc, #648]	@ (800289c <LoadProfile+0x354>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	8aba      	ldrh	r2, [r7, #20]
 8002616:	218c      	movs	r1, #140	@ 0x8c
 8002618:	4618      	mov	r0, r3
 800261a:	f006 fe89 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00c      	beq.n	8002642 <LoadProfile+0xfa>
 8002628:	8afb      	ldrh	r3, [r7, #22]
 800262a:	461a      	mov	r2, r3
 800262c:	f240 219a 	movw	r1, #666	@ 0x29a
 8002630:	489b      	ldr	r0, [pc, #620]	@ (80028a0 <LoadProfile+0x358>)
 8002632:	f01f f943 	bl	80218bc <iprintf>
 8002636:	4b9b      	ldr	r3, [pc, #620]	@ (80028a4 <LoadProfile+0x35c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4618      	mov	r0, r3
 800263e:	f01f f867 	bl	8021710 <fflush>

        /* Set Active poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, wActPollConfig);
 8002642:	4b96      	ldr	r3, [pc, #600]	@ (800289c <LoadProfile+0x354>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	8a7a      	ldrh	r2, [r7, #18]
 8002648:	218a      	movs	r1, #138	@ 0x8a
 800264a:	4618      	mov	r0, r3
 800264c:	f006 fe70 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002654:	8afb      	ldrh	r3, [r7, #22]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <LoadProfile+0x12c>
 800265a:	8afb      	ldrh	r3, [r7, #22]
 800265c:	461a      	mov	r2, r3
 800265e:	f240 219e 	movw	r1, #670	@ 0x29e
 8002662:	488f      	ldr	r0, [pc, #572]	@ (80028a0 <LoadProfile+0x358>)
 8002664:	f01f f92a 	bl	80218bc <iprintf>
 8002668:	4b8e      	ldr	r3, [pc, #568]	@ (80028a4 <LoadProfile+0x35c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f01f f84e 	bl	8021710 <fflush>

        /* Set Passive listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, wPasLisConfig);
 8002674:	4b89      	ldr	r3, [pc, #548]	@ (800289c <LoadProfile+0x354>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	8a3a      	ldrh	r2, [r7, #16]
 800267a:	218b      	movs	r1, #139	@ 0x8b
 800267c:	4618      	mov	r0, r3
 800267e:	f006 fe57 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002686:	8afb      	ldrh	r3, [r7, #22]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <LoadProfile+0x15e>
 800268c:	8afb      	ldrh	r3, [r7, #22]
 800268e:	461a      	mov	r2, r3
 8002690:	f240 21a2 	movw	r1, #674	@ 0x2a2
 8002694:	4882      	ldr	r0, [pc, #520]	@ (80028a0 <LoadProfile+0x358>)
 8002696:	f01f f911 	bl	80218bc <iprintf>
 800269a:	4b82      	ldr	r3, [pc, #520]	@ (80028a4 <LoadProfile+0x35c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f01f f835 	bl	8021710 <fflush>

        /* Set Active listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, wActLisConfig);
 80026a6:	4b7d      	ldr	r3, [pc, #500]	@ (800289c <LoadProfile+0x354>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	89fa      	ldrh	r2, [r7, #14]
 80026ac:	2189      	movs	r1, #137	@ 0x89
 80026ae:	4618      	mov	r0, r3
 80026b0:	f006 fe3e 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <LoadProfile+0x190>
 80026be:	8afb      	ldrh	r3, [r7, #22]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f240 21a6 	movw	r1, #678	@ 0x2a6
 80026c6:	4876      	ldr	r0, [pc, #472]	@ (80028a0 <LoadProfile+0x358>)
 80026c8:	f01f f8f8 	bl	80218bc <iprintf>
 80026cc:	4b75      	ldr	r3, [pc, #468]	@ (80028a4 <LoadProfile+0x35c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f01f f81c 	bl	8021710 <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 80026d8:	4b70      	ldr	r3, [pc, #448]	@ (800289c <LoadProfile+0x354>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	2183      	movs	r1, #131	@ 0x83
 80026e0:	4618      	mov	r0, r3
 80026e2:	f006 fe25 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80026ea:	8afb      	ldrh	r3, [r7, #22]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <LoadProfile+0x1c2>
 80026f0:	8afb      	ldrh	r3, [r7, #22]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f240 21aa 	movw	r1, #682	@ 0x2aa
 80026f8:	4869      	ldr	r0, [pc, #420]	@ (80028a0 <LoadProfile+0x358>)
 80026fa:	f01f f8df 	bl	80218bc <iprintf>
 80026fe:	4b69      	ldr	r3, [pc, #420]	@ (80028a4 <LoadProfile+0x35c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4618      	mov	r0, r3
 8002706:	f01f f803 	bl	8021710 <fflush>

        /* whether anti-collision is supported or not. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 800270a:	4b64      	ldr	r3, [pc, #400]	@ (800289c <LoadProfile+0x354>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	2188      	movs	r1, #136	@ 0x88
 8002712:	4618      	mov	r0, r3
 8002714:	f006 fe0c 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800271c:	8afb      	ldrh	r3, [r7, #22]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <LoadProfile+0x1f4>
 8002722:	8afb      	ldrh	r3, [r7, #22]
 8002724:	461a      	mov	r2, r3
 8002726:	f240 21ae 	movw	r1, #686	@ 0x2ae
 800272a:	485d      	ldr	r0, [pc, #372]	@ (80028a0 <LoadProfile+0x358>)
 800272c:	f01f f8c6 	bl	80218bc <iprintf>
 8002730:	4b5c      	ldr	r3, [pc, #368]	@ (80028a4 <LoadProfile+0x35c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4618      	mov	r0, r3
 8002738:	f01e ffea 	bl	8021710 <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 800273c:	4b57      	ldr	r3, [pc, #348]	@ (800289c <LoadProfile+0x354>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	2184      	movs	r1, #132	@ 0x84
 8002744:	4618      	mov	r0, r3
 8002746:	f006 fdf3 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800274e:	8afb      	ldrh	r3, [r7, #22]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <LoadProfile+0x226>
 8002754:	8afb      	ldrh	r3, [r7, #22]
 8002756:	461a      	mov	r2, r3
 8002758:	f240 21b2 	movw	r1, #690	@ 0x2b2
 800275c:	4850      	ldr	r0, [pc, #320]	@ (80028a0 <LoadProfile+0x358>)
 800275e:	f01f f8ad 	bl	80218bc <iprintf>
 8002762:	4b50      	ldr	r3, [pc, #320]	@ (80028a4 <LoadProfile+0x35c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f01e ffd1 	bl	8021710 <fflush>

#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 800276e:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <LoadProfile+0x354>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	2110      	movs	r1, #16
 8002776:	4618      	mov	r0, r3
 8002778:	f006 fdda 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002780:	8afb      	ldrh	r3, [r7, #22]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <LoadProfile+0x258>
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	461a      	mov	r2, r3
 800278a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800278e:	4844      	ldr	r0, [pc, #272]	@ (80028a0 <LoadProfile+0x358>)
 8002790:	f01f f894 	bl	80218bc <iprintf>
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <LoadProfile+0x35c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f01e ffb8 	bl	8021710 <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 80027a0:	4b3e      	ldr	r3, [pc, #248]	@ (800289c <LoadProfile+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fdc0 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <LoadProfile+0x28c>
 80027ba:	8afb      	ldrh	r3, [r7, #22]
 80027bc:	461a      	mov	r2, r3
 80027be:	f240 21bb 	movw	r1, #699	@ 0x2bb
 80027c2:	4837      	ldr	r0, [pc, #220]	@ (80028a0 <LoadProfile+0x358>)
 80027c4:	f01f f87a 	bl	80218bc <iprintf>
 80027c8:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <LoadProfile+0x35c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f01e ff9e 	bl	8021710 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 80027d4:	4b31      	ldr	r3, [pc, #196]	@ (800289c <LoadProfile+0x354>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	2111      	movs	r1, #17
 80027dc:	4618      	mov	r0, r3
 80027de:	f006 fda7 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00c      	beq.n	8002806 <LoadProfile+0x2be>
 80027ec:	8afb      	ldrh	r3, [r7, #22]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f240 21c1 	movw	r1, #705	@ 0x2c1
 80027f4:	482a      	ldr	r0, [pc, #168]	@ (80028a0 <LoadProfile+0x358>)
 80027f6:	f01f f861 	bl	80218bc <iprintf>
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <LoadProfile+0x35c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4618      	mov	r0, r3
 8002802:	f01e ff85 	bl	8021710 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8002806:	4b25      	ldr	r3, [pc, #148]	@ (800289c <LoadProfile+0x354>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800280e:	2101      	movs	r1, #1
 8002810:	4618      	mov	r0, r3
 8002812:	f006 fd8d 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002816:	4603      	mov	r3, r0
 8002818:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800281a:	8afb      	ldrh	r3, [r7, #22]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <LoadProfile+0x2f2>
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8002828:	481d      	ldr	r0, [pc, #116]	@ (80028a0 <LoadProfile+0x358>)
 800282a:	f01f f847 	bl	80218bc <iprintf>
 800282e:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <LoadProfile+0x35c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4618      	mov	r0, r3
 8002836:	f01e ff6b 	bl	8021710 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
        /* Device limit for Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT, 1);
 800283a:	4b18      	ldr	r3, [pc, #96]	@ (800289c <LoadProfile+0x354>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	2112      	movs	r1, #18
 8002842:	4618      	mov	r0, r3
 8002844:	f006 fd74 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800284c:	8afb      	ldrh	r3, [r7, #22]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <LoadProfile+0x324>
 8002852:	8afb      	ldrh	r3, [r7, #22]
 8002854:	461a      	mov	r2, r3
 8002856:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800285a:	4811      	ldr	r0, [pc, #68]	@ (80028a0 <LoadProfile+0x358>)
 800285c:	f01f f82e 	bl	80218bc <iprintf>
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <LoadProfile+0x35c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f01e ff52 	bl	8021710 <fflush>

        /* Guard time for Type F. This guard time is applied when Type F poll before Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US, 20400);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <LoadProfile+0x354>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8002874:	2102      	movs	r1, #2
 8002876:	4618      	mov	r0, r3
 8002878:	f006 fd5a 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002880:	8afb      	ldrh	r3, [r7, #22]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <LoadProfile+0x366>
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	461a      	mov	r2, r3
 800288a:	f240 21ce 	movw	r1, #718	@ 0x2ce
 800288e:	4804      	ldr	r0, [pc, #16]	@ (80028a0 <LoadProfile+0x358>)
 8002890:	f01f f814 	bl	80218bc <iprintf>
 8002894:	4b03      	ldr	r3, [pc, #12]	@ (80028a4 <LoadProfile+0x35c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	e005      	b.n	80028a8 <LoadProfile+0x360>
 800289c:	20000538 	.word	0x20000538
 80028a0:	08023be8 	.word	0x08023be8
 80028a4:	20000084 	.word	0x20000084
 80028a8:	4618      	mov	r0, r3
 80028aa:	f01e ff31 	bl	8021710 <fflush>

        /* Guard time for Type F. This guard time is applied when Type B poll before Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US, 15300);
 80028ae:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <LoadProfile+0x49c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 80028b6:	2103      	movs	r1, #3
 80028b8:	4618      	mov	r0, r3
 80028ba:	f006 fd39 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80028c2:	8afb      	ldrh	r3, [r7, #22]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <LoadProfile+0x39a>
 80028c8:	8afb      	ldrh	r3, [r7, #22]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80028d0:	4845      	ldr	r0, [pc, #276]	@ (80029e8 <LoadProfile+0x4a0>)
 80028d2:	f01e fff3 	bl	80218bc <iprintf>
 80028d6:	4b45      	ldr	r3, [pc, #276]	@ (80029ec <LoadProfile+0x4a4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4618      	mov	r0, r3
 80028de:	f01e ff17 	bl	8021710 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
        /* Device limit for Type V (ISO 15693) */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 80028e2:	4b40      	ldr	r3, [pc, #256]	@ (80029e4 <LoadProfile+0x49c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	2113      	movs	r1, #19
 80028ea:	4618      	mov	r0, r3
 80028ec:	f006 fd20 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80028f4:	8afb      	ldrh	r3, [r7, #22]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <LoadProfile+0x3cc>
 80028fa:	8afb      	ldrh	r3, [r7, #22]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 8002902:	4839      	ldr	r0, [pc, #228]	@ (80029e8 <LoadProfile+0x4a0>)
 8002904:	f01e ffda 	bl	80218bc <iprintf>
 8002908:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <LoadProfile+0x4a4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f01e fefe 	bl	8021710 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5200);
 8002914:	4b33      	ldr	r3, [pc, #204]	@ (80029e4 <LoadProfile+0x49c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f241 4250 	movw	r2, #5200	@ 0x1450
 800291c:	2104      	movs	r1, #4
 800291e:	4618      	mov	r0, r3
 8002920:	f006 fd06 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <LoadProfile+0x400>
 800292e:	8afb      	ldrh	r3, [r7, #22]
 8002930:	461a      	mov	r2, r3
 8002932:	f240 21db 	movw	r1, #731	@ 0x2db
 8002936:	482c      	ldr	r0, [pc, #176]	@ (80029e8 <LoadProfile+0x4a0>)
 8002938:	f01e ffc0 	bl	80218bc <iprintf>
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <LoadProfile+0x4a4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4618      	mov	r0, r3
 8002944:	f01e fee4 	bl	8021710 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
        /* Device limit for 18000P3M3 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT, 1);
 8002948:	4b26      	ldr	r3, [pc, #152]	@ (80029e4 <LoadProfile+0x49c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	2114      	movs	r1, #20
 8002950:	4618      	mov	r0, r3
 8002952:	f006 fced 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800295a:	8afb      	ldrh	r3, [r7, #22]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <LoadProfile+0x432>
 8002960:	8afb      	ldrh	r3, [r7, #22]
 8002962:	461a      	mov	r2, r3
 8002964:	f240 21e1 	movw	r1, #737	@ 0x2e1
 8002968:	481f      	ldr	r0, [pc, #124]	@ (80029e8 <LoadProfile+0x4a0>)
 800296a:	f01e ffa7 	bl	80218bc <iprintf>
 800296e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <LoadProfile+0x4a4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f01e fecb 	bl	8021710 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, 10000);
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <LoadProfile+0x49c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002982:	2105      	movs	r1, #5
 8002984:	4618      	mov	r0, r3
 8002986:	f006 fcd3 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800298e:	8afb      	ldrh	r3, [r7, #22]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00c      	beq.n	80029ae <LoadProfile+0x466>
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	461a      	mov	r2, r3
 8002998:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 800299c:	4812      	ldr	r0, [pc, #72]	@ (80029e8 <LoadProfile+0x4a0>)
 800299e:	f01e ff8d 	bl	80218bc <iprintf>
 80029a2:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <LoadProfile+0x4a4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f01e feb1 	bl	8021710 <fflush>
#endif

        /* Discovery loop Operation mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_NFC);
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <LoadProfile+0x49c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2202      	movs	r2, #2
 80029b4:	2182      	movs	r1, #130	@ 0x82
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 fcba 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80029c0:	8afb      	ldrh	r3, [r7, #22]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8279 	beq.w	8002eba <LoadProfile+0x972>
 80029c8:	8afb      	ldrh	r3, [r7, #22]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f240 21e9 	movw	r1, #745	@ 0x2e9
 80029d0:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <LoadProfile+0x4a0>)
 80029d2:	f01e ff73 	bl	80218bc <iprintf>
 80029d6:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <LoadProfile+0x4a4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f01e fe97 	bl	8021710 <fflush>
 80029e2:	e26a      	b.n	8002eba <LoadProfile+0x972>
 80029e4:	20000538 	.word	0x20000538
 80029e8:	08023be8 	.word	0x08023be8
 80029ec:	20000084 	.word	0x20000084
    }
    /* 对于EMVCo模式, 专用于支付终端POS, 配置更加严格, 通常只允许Type A/B协议, 不使用P2P、不启动主动监听 */
    else if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	f040 8261 	bne.w	8002eba <LoadProfile+0x972>
    {
        /* EMVCO */
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 80029f8:	4baf      	ldr	r3, [pc, #700]	@ (8002cb8 <LoadProfile+0x770>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2186      	movs	r1, #134	@ 0x86
 8002a00:	4618      	mov	r0, r3
 8002a02:	f006 fc95 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002a06:	4603      	mov	r3, r0
 8002a08:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a0a:	8afb      	ldrh	r3, [r7, #22]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <LoadProfile+0x4e2>
 8002a10:	8afb      	ldrh	r3, [r7, #22]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8002a18:	48a8      	ldr	r0, [pc, #672]	@ (8002cbc <LoadProfile+0x774>)
 8002a1a:	f01e ff4f 	bl	80218bc <iprintf>
 8002a1e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cc0 <LoadProfile+0x778>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f01e fe73 	bl	8021710 <fflush>

        /* passive poll bitmap config.只启用TypeA/B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B));
 8002a2a:	4ba3      	ldr	r3, [pc, #652]	@ (8002cb8 <LoadProfile+0x770>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	218c      	movs	r1, #140	@ 0x8c
 8002a32:	4618      	mov	r0, r3
 8002a34:	f006 fc7c 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a3c:	8afb      	ldrh	r3, [r7, #22]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <LoadProfile+0x514>
 8002a42:	8afb      	ldrh	r3, [r7, #22]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f240 21f5 	movw	r1, #757	@ 0x2f5
 8002a4a:	489c      	ldr	r0, [pc, #624]	@ (8002cbc <LoadProfile+0x774>)
 8002a4c:	f01e ff36 	bl	80218bc <iprintf>
 8002a50:	4b9b      	ldr	r3, [pc, #620]	@ (8002cc0 <LoadProfile+0x778>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f01e fe5a 	bl	8021710 <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, 0x00);
 8002a5c:	4b96      	ldr	r3, [pc, #600]	@ (8002cb8 <LoadProfile+0x770>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	218b      	movs	r1, #139	@ 0x8b
 8002a64:	4618      	mov	r0, r3
 8002a66:	f006 fc63 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a6e:	8afb      	ldrh	r3, [r7, #22]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <LoadProfile+0x546>
 8002a74:	8afb      	ldrh	r3, [r7, #22]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f240 21f9 	movw	r1, #761	@ 0x2f9
 8002a7c:	488f      	ldr	r0, [pc, #572]	@ (8002cbc <LoadProfile+0x774>)
 8002a7e:	f01e ff1d 	bl	80218bc <iprintf>
 8002a82:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc0 <LoadProfile+0x778>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f01e fe41 	bl	8021710 <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, 0x00);
 8002a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8002cb8 <LoadProfile+0x770>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2189      	movs	r1, #137	@ 0x89
 8002a96:	4618      	mov	r0, r3
 8002a98:	f006 fc4a 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002aa0:	8afb      	ldrh	r3, [r7, #22]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <LoadProfile+0x578>
 8002aa6:	8afb      	ldrh	r3, [r7, #22]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8002aae:	4883      	ldr	r0, [pc, #524]	@ (8002cbc <LoadProfile+0x774>)
 8002ab0:	f01e ff04 	bl	80218bc <iprintf>
 8002ab4:	4b82      	ldr	r3, [pc, #520]	@ (8002cc0 <LoadProfile+0x778>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f01e fe28 	bl	8021710 <fflush>

        /* Active Poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, 0x00);
 8002ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb8 <LoadProfile+0x770>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	218a      	movs	r1, #138	@ 0x8a
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f006 fc31 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002ad2:	8afb      	ldrh	r3, [r7, #22]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00c      	beq.n	8002af2 <LoadProfile+0x5aa>
 8002ad8:	8afb      	ldrh	r3, [r7, #22]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f240 3101 	movw	r1, #769	@ 0x301
 8002ae0:	4876      	ldr	r0, [pc, #472]	@ (8002cbc <LoadProfile+0x774>)
 8002ae2:	f01e feeb 	bl	80218bc <iprintf>
 8002ae6:	4b76      	ldr	r3, [pc, #472]	@ (8002cc0 <LoadProfile+0x778>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f01e fe0f 	bl	8021710 <fflush>

        /* Bool to enable LPCD feature. 禁用低功耗卡检测 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ENABLE_LPCD, PH_OFF);
 8002af2:	4b71      	ldr	r3, [pc, #452]	@ (8002cb8 <LoadProfile+0x770>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 fc18 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002b00:	4603      	mov	r3, r0
 8002b02:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <LoadProfile+0x5dc>
 8002b0a:	8afb      	ldrh	r3, [r7, #22]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f240 3105 	movw	r1, #773	@ 0x305
 8002b12:	486a      	ldr	r0, [pc, #424]	@ (8002cbc <LoadProfile+0x774>)
 8002b14:	f01e fed2 	bl	80218bc <iprintf>
 8002b18:	4b69      	ldr	r3, [pc, #420]	@ (8002cc0 <LoadProfile+0x778>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f01e fdf6 	bl	8021710 <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 8002b24:	4b64      	ldr	r3, [pc, #400]	@ (8002cb8 <LoadProfile+0x770>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2183      	movs	r1, #131	@ 0x83
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f006 fbff 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <LoadProfile+0x60e>
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f240 3109 	movw	r1, #777	@ 0x309
 8002b44:	485d      	ldr	r0, [pc, #372]	@ (8002cbc <LoadProfile+0x774>)
 8002b46:	f01e feb9 	bl	80218bc <iprintf>
 8002b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc0 <LoadProfile+0x778>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f01e fddd 	bl	8021710 <fflush>

        /* whether anti-collision is supported or not.启用防冲突 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8002b56:	4b58      	ldr	r3, [pc, #352]	@ (8002cb8 <LoadProfile+0x770>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2188      	movs	r1, #136	@ 0x88
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f006 fbe6 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002b64:	4603      	mov	r3, r0
 8002b66:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b68:	8afb      	ldrh	r3, [r7, #22]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <LoadProfile+0x640>
 8002b6e:	8afb      	ldrh	r3, [r7, #22]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f240 310d 	movw	r1, #781	@ 0x30d
 8002b76:	4851      	ldr	r0, [pc, #324]	@ (8002cbc <LoadProfile+0x774>)
 8002b78:	f01e fea0 	bl	80218bc <iprintf>
 8002b7c:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <LoadProfile+0x778>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f01e fdc4 	bl	8021710 <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8002b88:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb8 <LoadProfile+0x770>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2184      	movs	r1, #132	@ 0x84
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 fbcd 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002b96:	4603      	mov	r3, r0
 8002b98:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00c      	beq.n	8002bba <LoadProfile+0x672>
 8002ba0:	8afb      	ldrh	r3, [r7, #22]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f240 3111 	movw	r1, #785	@ 0x311
 8002ba8:	4844      	ldr	r0, [pc, #272]	@ (8002cbc <LoadProfile+0x774>)
 8002baa:	f01e fe87 	bl	80218bc <iprintf>
 8002bae:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <LoadProfile+0x778>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f01e fdab 	bl	8021710 <fflush>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 8002bba:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb8 <LoadProfile+0x770>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 fbb4 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002bcc:	8afb      	ldrh	r3, [r7, #22]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <LoadProfile+0x6a4>
 8002bd2:	8afb      	ldrh	r3, [r7, #22]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f240 3116 	movw	r1, #790	@ 0x316
 8002bda:	4838      	ldr	r0, [pc, #224]	@ (8002cbc <LoadProfile+0x774>)
 8002bdc:	f01e fe6e 	bl	80218bc <iprintf>
 8002be0:	4b37      	ldr	r3, [pc, #220]	@ (8002cc0 <LoadProfile+0x778>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f01e fd92 	bl	8021710 <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 8002bec:	4b32      	ldr	r3, [pc, #200]	@ (8002cb8 <LoadProfile+0x770>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 fb9a 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c00:	8afb      	ldrh	r3, [r7, #22]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <LoadProfile+0x6d8>
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f240 311a 	movw	r1, #794	@ 0x31a
 8002c0e:	482b      	ldr	r0, [pc, #172]	@ (8002cbc <LoadProfile+0x774>)
 8002c10:	f01e fe54 	bl	80218bc <iprintf>
 8002c14:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <LoadProfile+0x778>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f01e fd78 	bl	8021710 <fflush>

        /* Configure FSDI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI, 0x08);
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <LoadProfile+0x770>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2208      	movs	r2, #8
 8002c26:	2140      	movs	r1, #64	@ 0x40
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f006 fb81 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c32:	8afb      	ldrh	r3, [r7, #22]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <LoadProfile+0x70a>
 8002c38:	8afb      	ldrh	r3, [r7, #22]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f240 311e 	movw	r1, #798	@ 0x31e
 8002c40:	481e      	ldr	r0, [pc, #120]	@ (8002cbc <LoadProfile+0x774>)
 8002c42:	f01e fe3b 	bl	80218bc <iprintf>
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <LoadProfile+0x778>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f01e fd5f 	bl	8021710 <fflush>

        /* Configure CID for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID, 0x00);
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <LoadProfile+0x770>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	2141      	movs	r1, #65	@ 0x41
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f006 fb68 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c64:	8afb      	ldrh	r3, [r7, #22]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <LoadProfile+0x73c>
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f240 3122 	movw	r1, #802	@ 0x322
 8002c72:	4812      	ldr	r0, [pc, #72]	@ (8002cbc <LoadProfile+0x774>)
 8002c74:	f01e fe22 	bl	80218bc <iprintf>
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <LoadProfile+0x778>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f01e fd46 	bl	8021710 <fflush>

        /* Configure DRI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI, 0x00);
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <LoadProfile+0x770>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2143      	movs	r1, #67	@ 0x43
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f006 fb4f 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c96:	8afb      	ldrh	r3, [r7, #22]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <LoadProfile+0x77c>
 8002c9c:	8afb      	ldrh	r3, [r7, #22]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f240 3126 	movw	r1, #806	@ 0x326
 8002ca4:	4805      	ldr	r0, [pc, #20]	@ (8002cbc <LoadProfile+0x774>)
 8002ca6:	f01e fe09 	bl	80218bc <iprintf>
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <LoadProfile+0x778>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f01e fd2d 	bl	8021710 <fflush>
 8002cb6:	e005      	b.n	8002cc4 <LoadProfile+0x77c>
 8002cb8:	20000538 	.word	0x20000538
 8002cbc:	08023be8 	.word	0x08023be8
 8002cc0:	20000084 	.word	0x20000084

        /* Configure DSI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI, 0x00);
 8002cc4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec4 <LoadProfile+0x97c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2144      	movs	r1, #68	@ 0x44
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f006 fb2f 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002cd6:	8afb      	ldrh	r3, [r7, #22]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <LoadProfile+0x7ae>
 8002cdc:	8afb      	ldrh	r3, [r7, #22]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f240 312a 	movw	r1, #810	@ 0x32a
 8002ce4:	4878      	ldr	r0, [pc, #480]	@ (8002ec8 <LoadProfile+0x980>)
 8002ce6:	f01e fde9 	bl	80218bc <iprintf>
 8002cea:	4b78      	ldr	r3, [pc, #480]	@ (8002ecc <LoadProfile+0x984>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f01e fd0d 	bl	8021710 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 8002cf6:	4b73      	ldr	r3, [pc, #460]	@ (8002ec4 <LoadProfile+0x97c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2111      	movs	r1, #17
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f006 fb16 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d08:	8afb      	ldrh	r3, [r7, #22]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <LoadProfile+0x7e0>
 8002d0e:	8afb      	ldrh	r3, [r7, #22]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8002d16:	486c      	ldr	r0, [pc, #432]	@ (8002ec8 <LoadProfile+0x980>)
 8002d18:	f01e fdd0 	bl	80218bc <iprintf>
 8002d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ecc <LoadProfile+0x984>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f01e fcf4 	bl	8021710 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8002d28:	4b66      	ldr	r3, [pc, #408]	@ (8002ec4 <LoadProfile+0x97c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f006 fafc 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <LoadProfile+0x814>
 8002d42:	8afb      	ldrh	r3, [r7, #22]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f240 3133 	movw	r1, #819	@ 0x333
 8002d4a:	485f      	ldr	r0, [pc, #380]	@ (8002ec8 <LoadProfile+0x980>)
 8002d4c:	f01e fdb6 	bl	80218bc <iprintf>
 8002d50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ecc <LoadProfile+0x984>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f01e fcda 	bl	8021710 <fflush>

        /* Configure AFI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ, 0x00);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	@ (8002ec4 <LoadProfile+0x97c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2130      	movs	r1, #48	@ 0x30
 8002d64:	4618      	mov	r0, r3
 8002d66:	f006 fae3 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d6e:	8afb      	ldrh	r3, [r7, #22]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <LoadProfile+0x846>
 8002d74:	8afb      	ldrh	r3, [r7, #22]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f240 3137 	movw	r1, #823	@ 0x337
 8002d7c:	4852      	ldr	r0, [pc, #328]	@ (8002ec8 <LoadProfile+0x980>)
 8002d7e:	f01e fd9d 	bl	80218bc <iprintf>
 8002d82:	4b52      	ldr	r3, [pc, #328]	@ (8002ecc <LoadProfile+0x984>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f01e fcc1 	bl	8021710 <fflush>

        /* Configure FSDI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_FSDI, 0x08);
 8002d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec4 <LoadProfile+0x97c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2208      	movs	r2, #8
 8002d94:	2132      	movs	r1, #50	@ 0x32
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 faca 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002da0:	8afb      	ldrh	r3, [r7, #22]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <LoadProfile+0x878>
 8002da6:	8afb      	ldrh	r3, [r7, #22]
 8002da8:	461a      	mov	r2, r3
 8002daa:	f240 313b 	movw	r1, #827	@ 0x33b
 8002dae:	4846      	ldr	r0, [pc, #280]	@ (8002ec8 <LoadProfile+0x980>)
 8002db0:	f01e fd84 	bl	80218bc <iprintf>
 8002db4:	4b45      	ldr	r3, [pc, #276]	@ (8002ecc <LoadProfile+0x984>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f01e fca8 	bl	8021710 <fflush>

        /* Configure CID for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_CID, 0x00);
 8002dc0:	4b40      	ldr	r3, [pc, #256]	@ (8002ec4 <LoadProfile+0x97c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2133      	movs	r1, #51	@ 0x33
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f006 fab1 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002dd2:	8afb      	ldrh	r3, [r7, #22]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <LoadProfile+0x8aa>
 8002dd8:	8afb      	ldrh	r3, [r7, #22]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f240 313f 	movw	r1, #831	@ 0x33f
 8002de0:	4839      	ldr	r0, [pc, #228]	@ (8002ec8 <LoadProfile+0x980>)
 8002de2:	f01e fd6b 	bl	80218bc <iprintf>
 8002de6:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <LoadProfile+0x984>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f01e fc8f 	bl	8021710 <fflush>

        /* Configure DRI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DRI, 0x00);
 8002df2:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <LoadProfile+0x97c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2135      	movs	r1, #53	@ 0x35
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f006 fa98 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002e04:	8afb      	ldrh	r3, [r7, #22]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <LoadProfile+0x8dc>
 8002e0a:	8afb      	ldrh	r3, [r7, #22]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f240 3143 	movw	r1, #835	@ 0x343
 8002e12:	482d      	ldr	r0, [pc, #180]	@ (8002ec8 <LoadProfile+0x980>)
 8002e14:	f01e fd52 	bl	80218bc <iprintf>
 8002e18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <LoadProfile+0x984>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f01e fc76 	bl	8021710 <fflush>

        /* Configure DSI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DSI, 0x00);
 8002e24:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <LoadProfile+0x97c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2136      	movs	r1, #54	@ 0x36
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f006 fa7f 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002e36:	8afb      	ldrh	r3, [r7, #22]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <LoadProfile+0x90e>
 8002e3c:	8afb      	ldrh	r3, [r7, #22]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f240 3147 	movw	r1, #839	@ 0x347
 8002e44:	4820      	ldr	r0, [pc, #128]	@ (8002ec8 <LoadProfile+0x980>)
 8002e46:	f01e fd39 	bl	80218bc <iprintf>
 8002e4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <LoadProfile+0x984>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f01e fc5d 	bl	8021710 <fflush>

        /* Configure Extended ATQB support for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB, 0x00);
 8002e56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <LoadProfile+0x97c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2131      	movs	r1, #49	@ 0x31
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f006 fa66 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002e68:	8afb      	ldrh	r3, [r7, #22]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <LoadProfile+0x940>
 8002e6e:	8afb      	ldrh	r3, [r7, #22]
 8002e70:	461a      	mov	r2, r3
 8002e72:	f240 314b 	movw	r1, #843	@ 0x34b
 8002e76:	4814      	ldr	r0, [pc, #80]	@ (8002ec8 <LoadProfile+0x980>)
 8002e78:	f01e fd20 	bl	80218bc <iprintf>
 8002e7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <LoadProfile+0x984>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f01e fc44 	bl	8021710 <fflush>
#endif
        /* Configure reader library mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_EMVCO);
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <LoadProfile+0x97c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2182      	movs	r1, #130	@ 0x82
 8002e90:	4618      	mov	r0, r3
 8002e92:	f006 fa4d 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 8002e96:	4603      	mov	r3, r0
 8002e98:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002e9a:	8afb      	ldrh	r3, [r7, #22]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <LoadProfile+0x972>
 8002ea0:	8afb      	ldrh	r3, [r7, #22]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f240 314f 	movw	r1, #847	@ 0x34f
 8002ea8:	4807      	ldr	r0, [pc, #28]	@ (8002ec8 <LoadProfile+0x980>)
 8002eaa:	f01e fd07 	bl	80218bc <iprintf>
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <LoadProfile+0x984>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f01e fc2b 	bl	8021710 <fflush>
    }
    else
    {
        /* Do Nothing */
    }
    return status;
 8002eba:	8afb      	ldrh	r3, [r7, #22]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000538 	.word	0x20000538
 8002ec8:	08023be8 	.word	0x08023be8
 8002ecc:	20000084 	.word	0x20000084

08002ed0 <EMV_IsEMVCompatibleCard>:

/**
 * 检查是否为EMV兼容卡片
 */
uint8_t EMV_IsEMVCompatibleCard(void *pDataParams)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    phacDiscLoop_Sw_DataParams_t *pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDataParams;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	617b      	str	r3, [r7, #20]

    // 检查检测到的技术类型
    uint16_t wTechDetected = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	81fb      	strh	r3, [r7, #14]
    phStatus_t status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002ee0:	f107 030e 	add.w	r3, r7, #14
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2187      	movs	r1, #135	@ 0x87
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f006 fe9f 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	827b      	strh	r3, [r7, #18]

    if (status != PH_ERR_SUCCESS) {
 8002ef2:	8a7b      	ldrh	r3, [r7, #18]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <EMV_IsEMVCompatibleCard+0x2c>
        return 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e02b      	b.n	8002f54 <EMV_IsEMVCompatibleCard+0x84>
    }

    // 检查是否为Type A卡片
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_A)) {
 8002efc:	89fb      	ldrh	r3, [r7, #14]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <EMV_IsEMVCompatibleCard+0x62>
        // 检查是否支持ISO14443-4 (Type 4A)
        uint8_t sak = pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aSak;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002f0c:	747b      	strb	r3, [r7, #17]

        // SAK bit 5 = 1 表示支持ISO14443-4协议 (EMV所需)
        if ((sak & 0x20) != 0) {
 8002f0e:	7c7b      	ldrb	r3, [r7, #17]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <EMV_IsEMVCompatibleCard+0x62>
        	DEBUG_PRINTF("Type A ISO14443-4 compatible card detected (SAK: 0x%02X)\r\n", sak);
 8002f18:	7c7b      	ldrb	r3, [r7, #17]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480f      	ldr	r0, [pc, #60]	@ (8002f5c <EMV_IsEMVCompatibleCard+0x8c>)
 8002f1e:	f01e fccd 	bl	80218bc <iprintf>
 8002f22:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <EMV_IsEMVCompatibleCard+0x90>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f01e fbf1 	bl	8021710 <fflush>
            return 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e010      	b.n	8002f54 <EMV_IsEMVCompatibleCard+0x84>
        }
    }

    // 检查是否为Type B卡片 (也可能是EMV)
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_B)) {
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <EMV_IsEMVCompatibleCard+0x82>
        DEBUG_PRINTF("Type B card detected\r\n");
 8002f3c:	4809      	ldr	r0, [pc, #36]	@ (8002f64 <EMV_IsEMVCompatibleCard+0x94>)
 8002f3e:	f01e fd2d 	bl	802199c <puts>
 8002f42:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <EMV_IsEMVCompatibleCard+0x90>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f01e fbe1 	bl	8021710 <fflush>
        return 1; // Type B默认支持ISO14443-4
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <EMV_IsEMVCompatibleCard+0x84>
    }

    return 0;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	080240b4 	.word	0x080240b4
 8002f60:	20000084 	.word	0x20000084
 8002f64:	080240f0 	.word	0x080240f0

08002f68 <EMV_ProcessTransaction_Enhanced>:

// ==================================================
// 修改2: 重写EMV交易处理函数 - 专注数据收集
// ==================================================
EMV_Result_t EMV_ProcessTransaction_Enhanced(void *pDataParams, uint32_t amount, uint16_t currency_code)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	f5ad 6d55 	sub.w	sp, sp, #3408	@ 0xd50
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8002f74:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8002f78:	6018      	str	r0, [r3, #0]
 8002f7a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8002f7e:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8002f82:	6019      	str	r1, [r3, #0]
 8002f84:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8002f88:	f6a3 534a 	subw	r3, r3, #3402	@ 0xd4a
 8002f8c:	801a      	strh	r2, [r3, #0]
    phacDiscLoop_Sw_DataParams_t *pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDataParams;
 8002f8e:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8002f92:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8c7 3d48 	str.w	r3, [r7, #3400]	@ 0xd48
    EMV_Complete_Card_Data_t card_data;
    memset(&card_data, 0, sizeof(card_data));
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	f640 5234 	movw	r2, #3380	@ 0xd34
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f01e fe24 	bl	8021bf4 <memset>

    DEBUG_PRINTF("=== Starting Enhanced EMV Data Collection ===\r\n");
 8002fac:	48a5      	ldr	r0, [pc, #660]	@ (8003244 <EMV_ProcessTransaction_Enhanced+0x2dc>)
 8002fae:	f01e fcf5 	bl	802199c <puts>
 8002fb2:	4ba5      	ldr	r3, [pc, #660]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f01e fba9 	bl	8021710 <fflush>
    DEBUG_PRINTF("Transaction Amount: %lu.%02lu CNY\r\n", amount/100, amount%100);
 8002fbe:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8002fc2:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4aa0      	ldr	r2, [pc, #640]	@ (800324c <EMV_ProcessTransaction_Enhanced+0x2e4>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0959      	lsrs	r1, r3, #5
 8002fd0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8002fd4:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b9c      	ldr	r3, [pc, #624]	@ (800324c <EMV_ProcessTransaction_Enhanced+0x2e4>)
 8002fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2064      	movs	r0, #100	@ 0x64
 8002fe4:	fb00 f303 	mul.w	r3, r0, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	4898      	ldr	r0, [pc, #608]	@ (8003250 <EMV_ProcessTransaction_Enhanced+0x2e8>)
 8002fee:	f01e fc65 	bl	80218bc <iprintf>
 8002ff2:	4b95      	ldr	r3, [pc, #596]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f01e fb89 	bl	8021710 <fflush>

    // 设置交易参数
    card_data.amount = amount;
 8002ffe:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8003002:	f6a3 533c 	subw	r3, r3, #3388	@ 0xd3c
 8003006:	f507 6255 	add.w	r2, r7, #3408	@ 0xd50
 800300a:	f6a2 5248 	subw	r2, r2, #3400	@ 0xd48
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	f8c3 2d2c 	str.w	r2, [r3, #3372]	@ 0xd2c
    card_data.currency_code = currency_code;
 8003014:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8003018:	f6a3 533c 	subw	r3, r3, #3388	@ 0xd3c
 800301c:	f507 6255 	add.w	r2, r7, #3408	@ 0xd50
 8003020:	f6a2 524a 	subw	r2, r2, #3402	@ 0xd4a
 8003024:	8812      	ldrh	r2, [r2, #0]
 8003026:	f8a3 2d30 	strh.w	r2, [r3, #3376]	@ 0xd30
    card_data.transaction_type = 0x00; // 商品/服务交易
 800302a:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800302e:	f6a3 533c 	subw	r3, r3, #3388	@ 0xd3c
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2d32 	strb.w	r2, [r3, #3378]	@ 0xd32

    EMV_Result_t result = EMV_SUCCESS;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f

    do {
        // 步骤1: 收集卡片基础信息
        DEBUG_PRINTF("Step 1: Collect Card Basic Info\r\n");
 800303e:	4885      	ldr	r0, [pc, #532]	@ (8003254 <EMV_ProcessTransaction_Enhanced+0x2ec>)
 8003040:	f01e fcac 	bl	802199c <puts>
 8003044:	4b80      	ldr	r3, [pc, #512]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4618      	mov	r0, r3
 800304c:	f01e fb60 	bl	8021710 <fflush>
        result = EMV_CollectCardBasicInfo(pDiscLoop, &card_data);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	f8d7 0d48 	ldr.w	r0, [r7, #3400]	@ 0xd48
 800305a:	f000 f969 	bl	8003330 <EMV_CollectCardBasicInfo>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 8003064:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <EMV_ProcessTransaction_Enhanced+0x118>
            DEBUG_PRINTF("Failed to collect card basic info\r\n");
 800306c:	487a      	ldr	r0, [pc, #488]	@ (8003258 <EMV_ProcessTransaction_Enhanced+0x2f0>)
 800306e:	f01e fc95 	bl	802199c <puts>
 8003072:	4b75      	ldr	r3, [pc, #468]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f01e fb49 	bl	8021710 <fflush>
            break;
 800307e:	e0bc      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        // 步骤2: 收集PPSE信息
        DEBUG_PRINTF("Step 2: Collect PPSE Information\r\n");
 8003080:	4876      	ldr	r0, [pc, #472]	@ (800325c <EMV_ProcessTransaction_Enhanced+0x2f4>)
 8003082:	f01e fc8b 	bl	802199c <puts>
 8003086:	4b70      	ldr	r3, [pc, #448]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f01e fb3f 	bl	8021710 <fflush>
        result = EMV_CollectPPSEInfo(&card_data);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f9b0 	bl	80033fc <EMV_CollectPPSEInfo>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 80030a2:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <EMV_ProcessTransaction_Enhanced+0x156>
            DEBUG_PRINTF("PPSE collection failed\r\n");
 80030aa:	486d      	ldr	r0, [pc, #436]	@ (8003260 <EMV_ProcessTransaction_Enhanced+0x2f8>)
 80030ac:	f01e fc76 	bl	802199c <puts>
 80030b0:	4b65      	ldr	r3, [pc, #404]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f01e fb2a 	bl	8021710 <fflush>
            break;
 80030bc:	e09d      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        // 步骤3: 收集应用选择信息
        DEBUG_PRINTF("Step 3: Collect Application Selection Info\r\n");
 80030be:	4869      	ldr	r0, [pc, #420]	@ (8003264 <EMV_ProcessTransaction_Enhanced+0x2fc>)
 80030c0:	f01e fc6c 	bl	802199c <puts>
 80030c4:	4b60      	ldr	r3, [pc, #384]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f01e fb20 	bl	8021710 <fflush>
        result = EMV_CollectApplicationInfo(&card_data);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f9ff 	bl	80034d8 <EMV_CollectApplicationInfo>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 80030e0:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <EMV_ProcessTransaction_Enhanced+0x194>
            DEBUG_PRINTF("Application selection failed\r\n");
 80030e8:	485f      	ldr	r0, [pc, #380]	@ (8003268 <EMV_ProcessTransaction_Enhanced+0x300>)
 80030ea:	f01e fc57 	bl	802199c <puts>
 80030ee:	4b56      	ldr	r3, [pc, #344]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f01e fb0b 	bl	8021710 <fflush>
            break;
 80030fa:	e07e      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        // 步骤4: 收集GPO信息
        DEBUG_PRINTF("Step 4: Collect GPO Information\r\n");
 80030fc:	485b      	ldr	r0, [pc, #364]	@ (800326c <EMV_ProcessTransaction_Enhanced+0x304>)
 80030fe:	f01e fc4d 	bl	802199c <puts>
 8003102:	4b51      	ldr	r3, [pc, #324]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f01e fb01 	bl	8021710 <fflush>
        result = EMV_CollectGPOInfo(&card_data);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fae0 	bl	80036d8 <EMV_CollectGPOInfo>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 800311e:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <EMV_ProcessTransaction_Enhanced+0x1d2>
            DEBUG_PRINTF("GPO collection failed\r\n");
 8003126:	4852      	ldr	r0, [pc, #328]	@ (8003270 <EMV_ProcessTransaction_Enhanced+0x308>)
 8003128:	f01e fc38 	bl	802199c <puts>
 800312c:	4b46      	ldr	r3, [pc, #280]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f01e faec 	bl	8021710 <fflush>
            break;
 8003138:	e05f      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        // 步骤5: 收集所有应用记录
        DEBUG_PRINTF("Step 5: Collect All Application Records\r\n");
 800313a:	484e      	ldr	r0, [pc, #312]	@ (8003274 <EMV_ProcessTransaction_Enhanced+0x30c>)
 800313c:	f01e fc2e 	bl	802199c <puts>
 8003140:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4618      	mov	r0, r3
 8003148:	f01e fae2 	bl	8021710 <fflush>
        result = EMV_CollectAllRecords(&card_data);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fb1d 	bl	8003790 <EMV_CollectAllRecords>
 8003156:	4603      	mov	r3, r0
 8003158:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 800315c:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <EMV_ProcessTransaction_Enhanced+0x210>
            DEBUG_PRINTF("Record collection failed\r\n");
 8003164:	4844      	ldr	r0, [pc, #272]	@ (8003278 <EMV_ProcessTransaction_Enhanced+0x310>)
 8003166:	f01e fc19 	bl	802199c <puts>
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f01e facd 	bl	8021710 <fflush>
            break;
 8003176:	e040      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        // 步骤6: 发送完整数据到Linux处理
        DEBUG_PRINTF("Step 6: Send Complete Data to Linux\r\n");
 8003178:	4840      	ldr	r0, [pc, #256]	@ (800327c <EMV_ProcessTransaction_Enhanced+0x314>)
 800317a:	f01e fc0f 	bl	802199c <puts>
 800317e:	4b32      	ldr	r3, [pc, #200]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f01e fac3 	bl	8021710 <fflush>
        result = EMV_SendCompleteDataToLinux(&card_data);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fbc0 	bl	8003914 <EMV_SendCompleteDataToLinux>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 800319a:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <EMV_ProcessTransaction_Enhanced+0x24e>
            DEBUG_PRINTF("Data transmission failed\r\n");
 80031a2:	4837      	ldr	r0, [pc, #220]	@ (8003280 <EMV_ProcessTransaction_Enhanced+0x318>)
 80031a4:	f01e fbfa 	bl	802199c <puts>
 80031a8:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f01e faae 	bl	8021710 <fflush>
            break;
 80031b4:	e021      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        // 步骤7: 等待Linux处理结果
        DEBUG_PRINTF("Step 7: Wait for Linux Processing Result\r\n");
 80031b6:	4833      	ldr	r0, [pc, #204]	@ (8003284 <EMV_ProcessTransaction_Enhanced+0x31c>)
 80031b8:	f01e fbf0 	bl	802199c <puts>
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f01e faa4 	bl	8021710 <fflush>
        result = EMV_WaitForLinuxResult(&card_data);
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fe3b 	bl	8003e48 <EMV_WaitForLinuxResult>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f
        if (result != EMV_SUCCESS) {
 80031d8:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <EMV_ProcessTransaction_Enhanced+0x28c>
            DEBUG_PRINTF("Linux processing failed\r\n");
 80031e0:	4829      	ldr	r0, [pc, #164]	@ (8003288 <EMV_ProcessTransaction_Enhanced+0x320>)
 80031e2:	f01e fbdb 	bl	802199c <puts>
 80031e6:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f01e fa8f 	bl	8021710 <fflush>
            break;
 80031f2:	e002      	b.n	80031fa <EMV_ProcessTransaction_Enhanced+0x292>
        }

        result = EMV_SUCCESS;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 3d4f 	strb.w	r3, [r7, #3407]	@ 0xd4f

    } while(0);

    // 显示最终结果
    if (result == EMV_SUCCESS) {
 80031fa:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <EMV_ProcessTransaction_Enhanced+0x2b2>
        DEBUG_PRINTF("=== EMV Transaction Completed Successfully ===\r\n");
 8003202:	4822      	ldr	r0, [pc, #136]	@ (800328c <EMV_ProcessTransaction_Enhanced+0x324>)
 8003204:	f01e fbca 	bl	802199c <puts>
 8003208:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f01e fa7e 	bl	8021710 <fflush>
        EMV_ShowSuccessIndication();
 8003214:	f000 fe90 	bl	8003f38 <EMV_ShowSuccessIndication>
 8003218:	e00d      	b.n	8003236 <EMV_ProcessTransaction_Enhanced+0x2ce>
    } else {
        DEBUG_PRINTF("=== EMV Transaction Failed, Error Code: %d ===\r\n", result);
 800321a:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
 800321e:	4619      	mov	r1, r3
 8003220:	481b      	ldr	r0, [pc, #108]	@ (8003290 <EMV_ProcessTransaction_Enhanced+0x328>)
 8003222:	f01e fb4b 	bl	80218bc <iprintf>
 8003226:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <EMV_ProcessTransaction_Enhanced+0x2e0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f01e fa6f 	bl	8021710 <fflush>
        EMV_ShowFailureIndication();
 8003232:	f000 fe93 	bl	8003f5c <EMV_ShowFailureIndication>
    }

    return result;
 8003236:	f897 3d4f 	ldrb.w	r3, [r7, #3407]	@ 0xd4f
}
 800323a:	4618      	mov	r0, r3
 800323c:	f507 6755 	add.w	r7, r7, #3408	@ 0xd50
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	08024108 	.word	0x08024108
 8003248:	20000084 	.word	0x20000084
 800324c:	51eb851f 	.word	0x51eb851f
 8003250:	08024138 	.word	0x08024138
 8003254:	0802415c 	.word	0x0802415c
 8003258:	08024180 	.word	0x08024180
 800325c:	080241a4 	.word	0x080241a4
 8003260:	080241c8 	.word	0x080241c8
 8003264:	080241e0 	.word	0x080241e0
 8003268:	0802420c 	.word	0x0802420c
 800326c:	0802422c 	.word	0x0802422c
 8003270:	08024250 	.word	0x08024250
 8003274:	08024268 	.word	0x08024268
 8003278:	08024294 	.word	0x08024294
 800327c:	080242b0 	.word	0x080242b0
 8003280:	080242d8 	.word	0x080242d8
 8003284:	080242f4 	.word	0x080242f4
 8003288:	08024320 	.word	0x08024320
 800328c:	08023d48 	.word	0x08023d48
 8003290:	08023d78 	.word	0x08023d78

08003294 <EMV_WaitForCardRemoval>:

/**
 * Wait for card removal
 */
void EMV_WaitForCardRemoval(void *pDataParams)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    phacDiscLoop_Sw_DataParams_t *pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDataParams;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	613b      	str	r3, [r7, #16]

    DEBUG_PRINTF("Please remove the card...\r\n");
 80032a0:	481f      	ldr	r0, [pc, #124]	@ (8003320 <EMV_WaitForCardRemoval+0x8c>)
 80032a2:	f01e fb7b 	bl	802199c <puts>
 80032a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <EMV_WaitForCardRemoval+0x90>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f01e fa2f 	bl	8021710 <fflush>

    // Set to card removal detection mode
    phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_REMOVAL);
 80032b2:	2203      	movs	r2, #3
 80032b4:	2184      	movs	r1, #132	@ 0x84
 80032b6:	6938      	ldr	r0, [r7, #16]
 80032b8:	f006 f83a 	bl	8009330 <phacDiscLoop_Sw_SetConfig>

    // Run removal detection
    phStatus_t status;
    int removal_attempts = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
    do {
        status = phacDiscLoop_Run(pDiscLoop, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 80032c0:	2100      	movs	r1, #0
 80032c2:	6938      	ldr	r0, [r7, #16]
 80032c4:	f005 ff62 	bl	800918c <phacDiscLoop_Sw_Run>
 80032c8:	4603      	mov	r3, r0
 80032ca:	81fb      	strh	r3, [r7, #14]
        HAL_Delay(100);
 80032cc:	2064      	movs	r0, #100	@ 0x64
 80032ce:	f018 fc01 	bl	801bad4 <HAL_Delay>
        removal_attempts++;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]

        // Avoid infinite waiting
        if (removal_attempts > 100) { // 10 seconds timeout
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	dd09      	ble.n	80032f2 <EMV_WaitForCardRemoval+0x5e>
            DEBUG_PRINTF("Card removal detection timeout\r\n");
 80032de:	4812      	ldr	r0, [pc, #72]	@ (8003328 <EMV_WaitForCardRemoval+0x94>)
 80032e0:	f01e fb5c 	bl	802199c <puts>
 80032e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <EMV_WaitForCardRemoval+0x90>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f01e fa10 	bl	8021710 <fflush>
            break;
 80032f0:	e003      	b.n	80032fa <EMV_WaitForCardRemoval+0x66>
        }
    } while ((status & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED);
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b84      	cmp	r3, #132	@ 0x84
 80032f8:	d1e2      	bne.n	80032c0 <EMV_WaitForCardRemoval+0x2c>

    DEBUG_PRINTF("Card removed\r\n");
 80032fa:	480c      	ldr	r0, [pc, #48]	@ (800332c <EMV_WaitForCardRemoval+0x98>)
 80032fc:	f01e fb4e 	bl	802199c <puts>
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <EMV_WaitForCardRemoval+0x90>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f01e fa02 	bl	8021710 <fflush>

    // Reset to detection mode, prepare for next polling
    phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 800330c:	2201      	movs	r2, #1
 800330e:	2184      	movs	r1, #132	@ 0x84
 8003310:	6938      	ldr	r0, [r7, #16]
 8003312:	f006 f80d 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08024510 	.word	0x08024510
 8003324:	20000084 	.word	0x20000084
 8003328:	0802452c 	.word	0x0802452c
 800332c:	0802454c 	.word	0x0802454c

08003330 <EMV_CollectCardBasicInfo>:

// ==================================================
// 新增功能1: 收集卡片基础信息
// ==================================================
EMV_Result_t EMV_CollectCardBasicInfo(phacDiscLoop_Sw_DataParams_t *pDiscLoop, EMV_Complete_Card_Data_t *card_data)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
    // 收集UID
    if (pDiscLoop->sTypeATargetInfo.bTotalTagsFound > 0) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d04c      	beq.n	80033de <EMV_CollectCardBasicInfo+0xae>
        card_data->card_uid_len = pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	729a      	strb	r2, [r3, #10]
        memcpy(card_data->card_uid,
 800334e:	6838      	ldr	r0, [r7, #0]
               pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f103 0160 	add.w	r1, r3, #96	@ 0x60
               card_data->card_uid_len);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	7a9b      	ldrb	r3, [r3, #10]
        memcpy(card_data->card_uid,
 800335a:	461a      	mov	r2, r3
 800335c:	f01e fcdf 	bl	8021d1e <memcpy>

        card_data->card_sak = pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aSak;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	72da      	strb	r2, [r3, #11]
        memcpy(card_data->card_atqa,
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	330c      	adds	r3, #12
               pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa,
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	325e      	adds	r2, #94	@ 0x5e
        memcpy(card_data->card_atqa,
 8003372:	8812      	ldrh	r2, [r2, #0]
 8003374:	b292      	uxth	r2, r2
 8003376:	801a      	strh	r2, [r3, #0]
               2);

        DEBUG_PRINTF("Card UID: ");
 8003378:	481b      	ldr	r0, [pc, #108]	@ (80033e8 <EMV_CollectCardBasicInfo+0xb8>)
 800337a:	f01e fa9f 	bl	80218bc <iprintf>
 800337e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <EMV_CollectCardBasicInfo+0xbc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f01e f9c3 	bl	8021710 <fflush>
        for (int i = 0; i < card_data->card_uid_len; i++) {
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e00a      	b.n	80033a6 <EMV_CollectCardBasicInfo+0x76>
            printf("%02X ", card_data->card_uid[i]);
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	4815      	ldr	r0, [pc, #84]	@ (80033f0 <EMV_CollectCardBasicInfo+0xc0>)
 800339c:	f01e fa8e 	bl	80218bc <iprintf>
        for (int i = 0; i < card_data->card_uid_len; i++) {
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	7a9b      	ldrb	r3, [r3, #10]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	dbee      	blt.n	8003390 <EMV_CollectCardBasicInfo+0x60>
        }
        printf("\r\n");
 80033b2:	4810      	ldr	r0, [pc, #64]	@ (80033f4 <EMV_CollectCardBasicInfo+0xc4>)
 80033b4:	f01e faf2 	bl	802199c <puts>
        DEBUG_PRINTF("SAK: 0x%02X, ATQA: %02X %02X\r\n",
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	7adb      	ldrb	r3, [r3, #11]
 80033bc:	4619      	mov	r1, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	7b1b      	ldrb	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	7b5b      	ldrb	r3, [r3, #13]
 80033c8:	480b      	ldr	r0, [pc, #44]	@ (80033f8 <EMV_CollectCardBasicInfo+0xc8>)
 80033ca:	f01e fa77 	bl	80218bc <iprintf>
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <EMV_CollectCardBasicInfo+0xbc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f01e f99b 	bl	8021710 <fflush>
                     card_data->card_sak, card_data->card_atqa[0], card_data->card_atqa[1]);

        return EMV_SUCCESS;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <EMV_CollectCardBasicInfo+0xb0>
    }

    return EMV_ERROR_CARD_NOT_EMV;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	0802455c 	.word	0x0802455c
 80033ec:	20000084 	.word	0x20000084
 80033f0:	08024384 	.word	0x08024384
 80033f4:	0802438c 	.word	0x0802438c
 80033f8:	08024568 	.word	0x08024568

080033fc <EMV_CollectPPSEInfo>:

// ==================================================
// 新增功能2: 收集PPSE信息
// ==================================================
EMV_Result_t EMV_CollectPPSEInfo(EMV_Complete_Card_Data_t *card_data)
{
 80033fc:	b5b0      	push	{r4, r5, r7, lr}
 80033fe:	b08c      	sub	sp, #48	@ 0x30
 8003400:	af02      	add	r7, sp, #8
 8003402:	6078      	str	r0, [r7, #4]
    uint8_t PPSE_SELECT_APDU[] = {
 8003404:	4b30      	ldr	r3, [pc, #192]	@ (80034c8 <EMV_CollectPPSEInfo+0xcc>)
 8003406:	f107 0410 	add.w	r4, r7, #16
 800340a:	461d      	mov	r5, r3
 800340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	6023      	str	r3, [r4, #0]
        0x00
    };

    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	817b      	strh	r3, [r7, #10]

    status = phpalI14443p4_Exchange(
 8003418:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800341c:	f005 f982 	bl	8008724 <phNfcLib_GetDataParams>
 8003420:	f107 0210 	add.w	r2, r7, #16
 8003424:	f107 030a 	add.w	r3, r7, #10
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2314      	movs	r3, #20
 8003432:	2100      	movs	r1, #0
 8003434:	f013 fdcc 	bl	8016fd0 <phpalI14443p4_Sw_Exchange>
 8003438:	4603      	mov	r3, r0
 800343a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        sizeof(PPSE_SELECT_APDU),
        &ppRxBuffer,
        &wRxLen
    );

    if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 800343c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800343e:	2b00      	cmp	r3, #0
 8003440:	d130      	bne.n	80034a4 <EMV_CollectPPSEInfo+0xa8>
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d92d      	bls.n	80034a4 <EMV_CollectPPSEInfo+0xa8>
        uint8_t sw1 = ppRxBuffer[wRxLen-2];
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	897b      	ldrh	r3, [r7, #10]
 800344c:	3b02      	subs	r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint8_t sw2 = ppRxBuffer[wRxLen-1];
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	3b01      	subs	r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

        if (sw1 == 0x90 && sw2 == 0x00) {
 8003464:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003468:	2b90      	cmp	r3, #144	@ 0x90
 800346a:	d11b      	bne.n	80034a4 <EMV_CollectPPSEInfo+0xa8>
 800346c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	d117      	bne.n	80034a4 <EMV_CollectPPSEInfo+0xa8>
            // 保存完整PPSE响应数据
            card_data->ppse_len = wRxLen;
 8003474:	897a      	ldrh	r2, [r7, #10]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
            memcpy(card_data->ppse_data, ppRxBuffer, wRxLen);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	330e      	adds	r3, #14
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	897a      	ldrh	r2, [r7, #10]
 8003484:	4618      	mov	r0, r3
 8003486:	f01e fc4a 	bl	8021d1e <memcpy>

            DEBUG_PRINTF("PPSE collected: %d bytes\r\n", wRxLen);
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	4619      	mov	r1, r3
 800348e:	480f      	ldr	r0, [pc, #60]	@ (80034cc <EMV_CollectPPSEInfo+0xd0>)
 8003490:	f01e fa14 	bl	80218bc <iprintf>
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <EMV_CollectPPSEInfo+0xd4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f01e f938 	bl	8021710 <fflush>
            return EMV_SUCCESS;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e00d      	b.n	80034c0 <EMV_CollectPPSEInfo+0xc4>
        }
    }

    // PPSE失败不是致命错误，可能是老卡
    DEBUG_PRINTF("PPSE not available, continuing...\r\n");
 80034a4:	480b      	ldr	r0, [pc, #44]	@ (80034d4 <EMV_CollectPPSEInfo+0xd8>)
 80034a6:	f01e fa79 	bl	802199c <puts>
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <EMV_CollectPPSEInfo+0xd4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f01e f92d 	bl	8021710 <fflush>
    card_data->ppse_len = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
    return EMV_SUCCESS;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	@ 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdb0      	pop	{r4, r5, r7, pc}
 80034c8:	080243d4 	.word	0x080243d4
 80034cc:	08024588 	.word	0x08024588
 80034d0:	20000084 	.word	0x20000084
 80034d4:	080245a4 	.word	0x080245a4

080034d8 <EMV_CollectApplicationInfo>:

// ==================================================
// 新增功能3: 收集应用选择信息
// ==================================================
EMV_Result_t EMV_CollectApplicationInfo(EMV_Complete_Card_Data_t *card_data)
{
 80034d8:	b5b0      	push	{r4, r5, r7, lr}
 80034da:	b0a2      	sub	sp, #136	@ 0x88
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
    // 尝试多个常见AID
    uint8_t aids[][16] = {
 80034e0:	4b77      	ldr	r3, [pc, #476]	@ (80036c0 <EMV_CollectApplicationInfo+0x1e8>)
 80034e2:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80034e6:	461d      	mov	r5, r3
 80034e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0xA0, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10}, // MasterCard (7字节)
        {0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10}, // Visa (7字节)
        {0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01}, // UnionPay (7字节)
    };
    uint8_t aid_lens[] = {7, 7, 7};
 80034f8:	4a72      	ldr	r2, [pc, #456]	@ (80036c4 <EMV_CollectApplicationInfo+0x1ec>)
 80034fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	4611      	mov	r1, r2
 8003502:	8019      	strh	r1, [r3, #0]
 8003504:	3302      	adds	r3, #2
 8003506:	0c12      	lsrs	r2, r2, #16
 8003508:	701a      	strb	r2, [r3, #0]
    const char* aid_names[] = {"MasterCard", "Visa", "UnionPay"};
 800350a:	4a6f      	ldr	r2, [pc, #444]	@ (80036c8 <EMV_CollectApplicationInfo+0x1f0>)
 800350c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003510:	ca07      	ldmia	r2, {r0, r1, r2}
 8003512:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (int i = 0; i < 3; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800351a:	e0c7      	b.n	80036ac <EMV_CollectApplicationInfo+0x1d4>
        DEBUG_PRINTF("Trying %s AID...\r\n", aid_names[i]);
 800351c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	3380      	adds	r3, #128	@ 0x80
 8003522:	443b      	add	r3, r7
 8003524:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003528:	4619      	mov	r1, r3
 800352a:	4868      	ldr	r0, [pc, #416]	@ (80036cc <EMV_CollectApplicationInfo+0x1f4>)
 800352c:	f01e f9c6 	bl	80218bc <iprintf>
 8003530:	4b67      	ldr	r3, [pc, #412]	@ (80036d0 <EMV_CollectApplicationInfo+0x1f8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f01e f8ea 	bl	8021710 <fflush>

        uint8_t select_apdu[32];
        uint8_t apdu_len = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

        select_apdu[apdu_len++] = 0x00;  // CLA
 8003542:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 800354c:	3380      	adds	r3, #128	@ 0x80
 800354e:	443b      	add	r3, r7
 8003550:	2200      	movs	r2, #0
 8003552:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = 0xA4;  // INS
 8003556:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 8003560:	3380      	adds	r3, #128	@ 0x80
 8003562:	443b      	add	r3, r7
 8003564:	22a4      	movs	r2, #164	@ 0xa4
 8003566:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = 0x04;  // P1
 800356a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 8003574:	3380      	adds	r3, #128	@ 0x80
 8003576:	443b      	add	r3, r7
 8003578:	2204      	movs	r2, #4
 800357a:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = 0x00;  // P2
 800357e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 8003588:	3380      	adds	r3, #128	@ 0x80
 800358a:	443b      	add	r3, r7
 800358c:	2200      	movs	r2, #0
 800358e:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = aid_lens[i]; // LC
 8003592:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 800359c:	4619      	mov	r1, r3
 800359e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80035a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035a4:	4413      	add	r3, r2
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	f101 0380 	add.w	r3, r1, #128	@ 0x80
 80035ac:	443b      	add	r3, r7
 80035ae:	f803 2c74 	strb.w	r2, [r3, #-116]

        memcpy(&select_apdu[apdu_len], aids[i], aid_lens[i]);
 80035b2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035b6:	f107 020c 	add.w	r2, r7, #12
 80035ba:	18d0      	adds	r0, r2, r3
 80035bc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80035c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	18d1      	adds	r1, r2, r3
 80035c6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80035ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035cc:	4413      	add	r3, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f01e fba4 	bl	8021d1e <memcpy>
        apdu_len += aid_lens[i];
 80035d6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80035da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035dc:	4413      	add	r3, r2
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035e4:	4413      	add	r3, r2
 80035e6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        select_apdu[apdu_len++] = 0x00;  // LE
 80035ea:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 80035f4:	3380      	adds	r3, #128	@ 0x80
 80035f6:	443b      	add	r3, r7
 80035f8:	2200      	movs	r2, #0
 80035fa:	f803 2c74 	strb.w	r2, [r3, #-116]

        phStatus_t status;
        uint8_t *ppRxBuffer;
        uint16_t wRxLen = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        status = phpalI14443p4_Exchange(
 8003602:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8003606:	f005 f88d 	bl	8008724 <phNfcLib_GetDataParams>
 800360a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800360e:	b299      	uxth	r1, r3
 8003610:	f107 020c 	add.w	r2, r7, #12
 8003614:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	460b      	mov	r3, r1
 8003622:	2100      	movs	r1, #0
 8003624:	f013 fcd4 	bl	8016fd0 <phpalI14443p4_Sw_Exchange>
 8003628:	4603      	mov	r3, r0
 800362a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
            PH_EXCHANGE_DEFAULT,
            select_apdu, apdu_len,
            &ppRxBuffer, &wRxLen
        );

        if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 800362e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003632:	2b00      	cmp	r3, #0
 8003634:	d137      	bne.n	80036a6 <EMV_CollectApplicationInfo+0x1ce>
 8003636:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003638:	2b01      	cmp	r3, #1
 800363a:	d934      	bls.n	80036a6 <EMV_CollectApplicationInfo+0x1ce>
            uint8_t sw1 = ppRxBuffer[wRxLen-2];
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003640:	3b02      	subs	r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            uint8_t sw2 = ppRxBuffer[wRxLen-1];
 800364a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800364e:	3b01      	subs	r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

            if (sw1 == 0x90 && sw2 == 0x00) {
 8003658:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800365c:	2b90      	cmp	r3, #144	@ 0x90
 800365e:	d122      	bne.n	80036a6 <EMV_CollectApplicationInfo+0x1ce>
 8003660:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11e      	bne.n	80036a6 <EMV_CollectApplicationInfo+0x1ce>
                // 成功选择应用，保存响应数据
                card_data->app_select_len = wRxLen;
 8003668:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
                memcpy(card_data->app_select_data, ppRxBuffer, wRxLen);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003676:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003678:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800367a:	4618      	mov	r0, r3
 800367c:	f01e fb4f 	bl	8021d1e <memcpy>

                DEBUG_PRINTF("%s application selected: %d bytes\r\n", aid_names[i], wRxLen);
 8003680:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3380      	adds	r3, #128	@ 0x80
 8003686:	443b      	add	r3, r7
 8003688:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800368c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800368e:	4619      	mov	r1, r3
 8003690:	4810      	ldr	r0, [pc, #64]	@ (80036d4 <EMV_CollectApplicationInfo+0x1fc>)
 8003692:	f01e f913 	bl	80218bc <iprintf>
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <EMV_CollectApplicationInfo+0x1f8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f01e f837 	bl	8021710 <fflush>
                return EMV_SUCCESS;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e007      	b.n	80036b6 <EMV_CollectApplicationInfo+0x1de>
    for (int i = 0; i < 3; i++) {
 80036a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036a8:	3301      	adds	r3, #1
 80036aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	f77f af34 	ble.w	800351c <EMV_CollectApplicationInfo+0x44>
            }
        }
    }

    return EMV_ERROR_APP_SELECT;
 80036b4:	2303      	movs	r3, #3
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3780      	adds	r7, #128	@ 0x80
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdb0      	pop	{r4, r5, r7, pc}
 80036be:	bf00      	nop
 80036c0:	08024600 	.word	0x08024600
 80036c4:	08024630 	.word	0x08024630
 80036c8:	08024654 	.word	0x08024654
 80036cc:	080245c8 	.word	0x080245c8
 80036d0:	20000084 	.word	0x20000084
 80036d4:	080245dc 	.word	0x080245dc

080036d8 <EMV_CollectGPOInfo>:

// ==================================================
// 新增功能4: 收集GPO信息
// ==================================================
EMV_Result_t EMV_CollectGPOInfo(EMV_Complete_Card_Data_t *card_data)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
    uint8_t gpo_apdu[] = {
 80036e0:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <EMV_CollectGPOInfo+0xac>)
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ea:	e883 0003 	stmia.w	r3, {r0, r1}
        0x80, 0xA8, 0x00, 0x00, 0x02, 0x83, 0x00, 0x00
    };

    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	81fb      	strh	r3, [r7, #14]

    status = phpalI14443p4_Exchange(
 80036f2:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80036f6:	f005 f815 	bl	8008724 <phNfcLib_GetDataParams>
 80036fa:	f107 0214 	add.w	r2, r7, #20
 80036fe:	f107 030e 	add.w	r3, r7, #14
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	f107 0310 	add.w	r3, r7, #16
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2308      	movs	r3, #8
 800370c:	2100      	movs	r1, #0
 800370e:	f013 fc5f 	bl	8016fd0 <phpalI14443p4_Sw_Exchange>
 8003712:	4603      	mov	r3, r0
 8003714:	83fb      	strh	r3, [r7, #30]
        PH_EXCHANGE_DEFAULT,
        gpo_apdu, sizeof(gpo_apdu),
        &ppRxBuffer, &wRxLen
    );

    if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 8003716:	8bfb      	ldrh	r3, [r7, #30]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d12d      	bne.n	8003778 <EMV_CollectGPOInfo+0xa0>
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d92a      	bls.n	8003778 <EMV_CollectGPOInfo+0xa0>
        uint8_t sw1 = ppRxBuffer[wRxLen-2];
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	89fb      	ldrh	r3, [r7, #14]
 8003726:	3b02      	subs	r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	777b      	strb	r3, [r7, #29]
        uint8_t sw2 = ppRxBuffer[wRxLen-1];
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	3b01      	subs	r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	773b      	strb	r3, [r7, #28]

        if (sw1 == 0x90 && sw2 == 0x00) {
 800373a:	7f7b      	ldrb	r3, [r7, #29]
 800373c:	2b90      	cmp	r3, #144	@ 0x90
 800373e:	d11b      	bne.n	8003778 <EMV_CollectGPOInfo+0xa0>
 8003740:	7f3b      	ldrb	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <EMV_CollectGPOInfo+0xa0>
            card_data->gpo_len = wRxLen;
 8003746:	89fa      	ldrh	r2, [r7, #14]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8a3 2312 	strh.w	r2, [r3, #786]	@ 0x312
            memcpy(card_data->gpo_data, ppRxBuffer, wRxLen);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	89fa      	ldrh	r2, [r7, #14]
 8003758:	4618      	mov	r0, r3
 800375a:	f01e fae0 	bl	8021d1e <memcpy>

            DEBUG_PRINTF("GPO collected: %d bytes\r\n", wRxLen);
 800375e:	89fb      	ldrh	r3, [r7, #14]
 8003760:	4619      	mov	r1, r3
 8003762:	4809      	ldr	r0, [pc, #36]	@ (8003788 <EMV_CollectGPOInfo+0xb0>)
 8003764:	f01e f8aa 	bl	80218bc <iprintf>
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <EMV_CollectGPOInfo+0xb4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f01d ffce 	bl	8021710 <fflush>
            return EMV_SUCCESS;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <EMV_CollectGPOInfo+0xa2>
        }
    }

    return EMV_ERROR_GPO;
 8003778:	2304      	movs	r3, #4
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	0802467c 	.word	0x0802467c
 8003788:	08024660 	.word	0x08024660
 800378c:	20000084 	.word	0x20000084

08003790 <EMV_CollectAllRecords>:

// ==================================================
// 新增功能5: 收集所有记录
// ==================================================
EMV_Result_t EMV_CollectAllRecords(EMV_Complete_Card_Data_t *card_data)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	@ 0x30
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
    // 尝试读取常见的SFI记录
    uint8_t sfi_list[] = {1, 2, 3, 4};
 8003798:	4b5a      	ldr	r3, [pc, #360]	@ (8003904 <EMV_CollectAllRecords+0x174>)
 800379a:	61bb      	str	r3, [r7, #24]
    uint8_t max_records_per_sfi = 5;
 800379c:	2305      	movs	r3, #5
 800379e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    card_data->sfi_record_count = 0;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2d28 	strb.w	r2, [r3, #3368]	@ 0xd28

    for (int sfi_idx = 0; sfi_idx < sizeof(sfi_list); sfi_idx++) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ae:	e08b      	b.n	80038c8 <EMV_CollectAllRecords+0x138>
        uint8_t sfi = sfi_list[sfi_idx];
 80037b0:	f107 0218 	add.w	r2, r7, #24
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        for (uint8_t record = 1; record <= max_records_per_sfi; record++) {
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c4:	e077      	b.n	80038b6 <EMV_CollectAllRecords+0x126>
            uint8_t read_record_apdu[5] = {
 80037c6:	2300      	movs	r3, #0
 80037c8:	743b      	strb	r3, [r7, #16]
 80037ca:	23b2      	movs	r3, #178	@ 0xb2
 80037cc:	747b      	strb	r3, [r7, #17]
 80037ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037d2:	74bb      	strb	r3, [r7, #18]
                0x00, 0xB2, record, (sfi << 3) | 0x04, 0x00
 80037d4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
            uint8_t read_record_apdu[5] = {
 80037e4:	74fb      	strb	r3, [r7, #19]
 80037e6:	2300      	movs	r3, #0
 80037e8:	753b      	strb	r3, [r7, #20]
            };

            phStatus_t status;
            uint8_t *ppRxBuffer;
            uint16_t wRxLen = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	817b      	strh	r3, [r7, #10]

            status = phpalI14443p4_Exchange(
 80037ee:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80037f2:	f004 ff97 	bl	8008724 <phNfcLib_GetDataParams>
 80037f6:	f107 0210 	add.w	r2, r7, #16
 80037fa:	f107 030a 	add.w	r3, r7, #10
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2305      	movs	r3, #5
 8003808:	2100      	movs	r1, #0
 800380a:	f013 fbe1 	bl	8016fd0 <phpalI14443p4_Sw_Exchange>
 800380e:	4603      	mov	r3, r0
 8003810:	83fb      	strh	r3, [r7, #30]
                PH_EXCHANGE_DEFAULT,
                read_record_apdu, sizeof(read_record_apdu),
                &ppRxBuffer, &wRxLen
            );

            if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 8003812:	8bfb      	ldrh	r3, [r7, #30]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d149      	bne.n	80038ac <EMV_CollectAllRecords+0x11c>
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d946      	bls.n	80038ac <EMV_CollectAllRecords+0x11c>
                uint8_t sw1 = ppRxBuffer[wRxLen-2];
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	897b      	ldrh	r3, [r7, #10]
 8003822:	3b02      	subs	r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	777b      	strb	r3, [r7, #29]
                uint8_t sw2 = ppRxBuffer[wRxLen-1];
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	897b      	ldrh	r3, [r7, #10]
 800382e:	3b01      	subs	r3, #1
 8003830:	4413      	add	r3, r2
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	773b      	strb	r3, [r7, #28]

                if (sw1 == 0x90 && sw2 == 0x00) {
 8003836:	7f7b      	ldrb	r3, [r7, #29]
 8003838:	2b90      	cmp	r3, #144	@ 0x90
 800383a:	d142      	bne.n	80038c2 <EMV_CollectAllRecords+0x132>
 800383c:	7f3b      	ldrb	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d13f      	bne.n	80038c2 <EMV_CollectAllRecords+0x132>
                    // 成功读取记录
                    if (card_data->sfi_record_count < 10) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8003848:	2b09      	cmp	r3, #9
 800384a:	d82f      	bhi.n	80038ac <EMV_CollectAllRecords+0x11c>
                        card_data->sfi_record_lens[card_data->sfi_record_count] = wRxLen;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	f503 63d1 	add.w	r3, r3, #1672	@ 0x688
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	460a      	mov	r2, r1
 8003860:	809a      	strh	r2, [r3, #4]
                        memcpy(card_data->sfi_records[card_data->sfi_record_count],
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	897a      	ldrh	r2, [r7, #10]
 8003878:	4618      	mov	r0, r3
 800387a:	f01e fa50 	bl	8021d1e <memcpy>
                               ppRxBuffer, wRxLen);
                        card_data->sfi_record_count++;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8003884:	3301      	adds	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f883 2d28 	strb.w	r2, [r3, #3368]	@ 0xd28

                        DEBUG_PRINTF("SFI %d Record %d: %d bytes\r\n", sfi, record, wRxLen-2);
 800388e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8003892:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	3b02      	subs	r3, #2
 800389a:	481b      	ldr	r0, [pc, #108]	@ (8003908 <EMV_CollectAllRecords+0x178>)
 800389c:	f01e f80e 	bl	80218bc <iprintf>
 80038a0:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <EMV_CollectAllRecords+0x17c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f01d ff32 	bl	8021710 <fflush>
        for (uint8_t record = 1; record <= max_records_per_sfi; record++) {
 80038ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038b0:	3301      	adds	r3, #1
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80038ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80038be:	429a      	cmp	r2, r3
 80038c0:	d981      	bls.n	80037c6 <EMV_CollectAllRecords+0x36>
    for (int sfi_idx = 0; sfi_idx < sizeof(sfi_list); sfi_idx++) {
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	3301      	adds	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	f67f af70 	bls.w	80037b0 <EMV_CollectAllRecords+0x20>
                }
            }
        }
    }

    if (card_data->sfi_record_count > 0) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <EMV_CollectAllRecords+0x168>
        DEBUG_PRINTF("Total records collected: %d\r\n", card_data->sfi_record_count);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 80038e0:	4619      	mov	r1, r3
 80038e2:	480b      	ldr	r0, [pc, #44]	@ (8003910 <EMV_CollectAllRecords+0x180>)
 80038e4:	f01d ffea 	bl	80218bc <iprintf>
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <EMV_CollectAllRecords+0x17c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f01d ff0e 	bl	8021710 <fflush>
        return EMV_SUCCESS;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <EMV_CollectAllRecords+0x16a>
    }

    return EMV_ERROR_READ_RECORD;
 80038f8:	2305      	movs	r3, #5
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3728      	adds	r7, #40	@ 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	04030201 	.word	0x04030201
 8003908:	08024684 	.word	0x08024684
 800390c:	20000084 	.word	0x20000084
 8003910:	080246a4 	.word	0x080246a4

08003914 <EMV_SendCompleteDataToLinux>:

// ==================================================
// 新增功能6: 发送完整数据到Linux
// ==================================================
EMV_Result_t EMV_SendCompleteDataToLinux(EMV_Complete_Card_Data_t *card_data)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	f6ad 0d28 	subw	sp, sp, #2088	@ 0x828
 800391a:	af00      	add	r7, sp, #0
 800391c:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003920:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003924:	6018      	str	r0, [r3, #0]
    extern UART_HandleTypeDef huart1;
    char buffer[2048];
    int pos = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824

    // 构建结构化数据包
    pos += sprintf(buffer + pos, "EMV_COMPLETE_DATA_START\r\n");
 800392c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003930:	f107 020c 	add.w	r2, r7, #12
 8003934:	4413      	add	r3, r2
 8003936:	49bb      	ldr	r1, [pc, #748]	@ (8003c24 <EMV_SendCompleteDataToLinux+0x310>)
 8003938:	4618      	mov	r0, r3
 800393a:	f01e f837 	bl	80219ac <siprintf>
 800393e:	4602      	mov	r2, r0
 8003940:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003944:	4413      	add	r3, r2
 8003946:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824

    // 基础卡片信息
    pos += sprintf(buffer + pos, "CARD_UID:");
 800394a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 800394e:	f107 020c 	add.w	r2, r7, #12
 8003952:	4413      	add	r3, r2
 8003954:	49b4      	ldr	r1, [pc, #720]	@ (8003c28 <EMV_SendCompleteDataToLinux+0x314>)
 8003956:	4618      	mov	r0, r3
 8003958:	f01e f828 	bl	80219ac <siprintf>
 800395c:	4602      	mov	r2, r0
 800395e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003962:	4413      	add	r3, r2
 8003964:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    for (int i = 0; i < card_data->card_uid_len; i++) {
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 800396e:	e01c      	b.n	80039aa <EMV_SendCompleteDataToLinux+0x96>
        pos += sprintf(buffer + pos, "%02X", card_data->card_uid[i]);
 8003970:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003974:	f107 020c 	add.w	r2, r7, #12
 8003978:	18d0      	adds	r0, r2, r3
 800397a:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 800397e:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003988:	4413      	add	r3, r2
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	49a7      	ldr	r1, [pc, #668]	@ (8003c2c <EMV_SendCompleteDataToLinux+0x318>)
 8003990:	f01e f80c 	bl	80219ac <siprintf>
 8003994:	4602      	mov	r2, r0
 8003996:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 800399a:	4413      	add	r3, r2
 800399c:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    for (int i = 0; i < card_data->card_uid_len; i++) {
 80039a0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80039a4:	3301      	adds	r3, #1
 80039a6:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 80039aa:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80039ae:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	7a9b      	ldrb	r3, [r3, #10]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80039bc:	4293      	cmp	r3, r2
 80039be:	dbd7      	blt.n	8003970 <EMV_SendCompleteDataToLinux+0x5c>
    }
    pos += sprintf(buffer + pos, "\r\n");
 80039c0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80039c4:	f107 020c 	add.w	r2, r7, #12
 80039c8:	4413      	add	r3, r2
 80039ca:	4999      	ldr	r1, [pc, #612]	@ (8003c30 <EMV_SendCompleteDataToLinux+0x31c>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f01d ffed 	bl	80219ac <siprintf>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80039d8:	4413      	add	r3, r2
 80039da:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824

    pos += sprintf(buffer + pos, "CARD_SAK:%02X\r\n", card_data->card_sak);
 80039de:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80039e2:	f107 020c 	add.w	r2, r7, #12
 80039e6:	18d0      	adds	r0, r2, r3
 80039e8:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80039ec:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	7adb      	ldrb	r3, [r3, #11]
 80039f4:	461a      	mov	r2, r3
 80039f6:	498f      	ldr	r1, [pc, #572]	@ (8003c34 <EMV_SendCompleteDataToLinux+0x320>)
 80039f8:	f01d ffd8 	bl	80219ac <siprintf>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a02:	4413      	add	r3, r2
 8003a04:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    pos += sprintf(buffer + pos, "CARD_ATQA:%02X%02X\r\n",
 8003a08:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a0c:	f107 020c 	add.w	r2, r7, #12
 8003a10:	18d0      	adds	r0, r2, r3
                   card_data->card_atqa[0], card_data->card_atqa[1]);
 8003a12:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003a16:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	7b1b      	ldrb	r3, [r3, #12]
    pos += sprintf(buffer + pos, "CARD_ATQA:%02X%02X\r\n",
 8003a1e:	461a      	mov	r2, r3
                   card_data->card_atqa[0], card_data->card_atqa[1]);
 8003a20:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003a24:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	7b5b      	ldrb	r3, [r3, #13]
    pos += sprintf(buffer + pos, "CARD_ATQA:%02X%02X\r\n",
 8003a2c:	4982      	ldr	r1, [pc, #520]	@ (8003c38 <EMV_SendCompleteDataToLinux+0x324>)
 8003a2e:	f01d ffbd 	bl	80219ac <siprintf>
 8003a32:	4602      	mov	r2, r0
 8003a34:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a38:	4413      	add	r3, r2
 8003a3a:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824

    // 交易参数
    pos += sprintf(buffer + pos, "AMOUNT:%lu\r\n", card_data->amount);
 8003a3e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a42:	f107 020c 	add.w	r2, r7, #12
 8003a46:	18d0      	adds	r0, r2, r3
 8003a48:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003a4c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	@ 0xd2c
 8003a56:	461a      	mov	r2, r3
 8003a58:	4978      	ldr	r1, [pc, #480]	@ (8003c3c <EMV_SendCompleteDataToLinux+0x328>)
 8003a5a:	f01d ffa7 	bl	80219ac <siprintf>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a64:	4413      	add	r3, r2
 8003a66:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    pos += sprintf(buffer + pos, "CURRENCY:%04X\r\n", card_data->currency_code);
 8003a6a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a6e:	f107 020c 	add.w	r2, r7, #12
 8003a72:	18d0      	adds	r0, r2, r3
 8003a74:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003a78:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3d30 	ldrh.w	r3, [r3, #3376]	@ 0xd30
 8003a82:	461a      	mov	r2, r3
 8003a84:	496e      	ldr	r1, [pc, #440]	@ (8003c40 <EMV_SendCompleteDataToLinux+0x32c>)
 8003a86:	f01d ff91 	bl	80219ac <siprintf>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003a90:	4413      	add	r3, r2
 8003a92:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824

    // PPSE数据
    if (card_data->ppse_len > 0) {
 8003a96:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003a9a:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d04b      	beq.n	8003b40 <EMV_SendCompleteDataToLinux+0x22c>
        pos += sprintf(buffer + pos, "PPSE_DATA:");
 8003aa8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003aac:	f107 020c 	add.w	r2, r7, #12
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4964      	ldr	r1, [pc, #400]	@ (8003c44 <EMV_SendCompleteDataToLinux+0x330>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f01d ff79 	bl	80219ac <siprintf>
 8003aba:	4602      	mov	r2, r0
 8003abc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int i = 0; i < card_data->ppse_len; i++) {
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8003acc:	e01d      	b.n	8003b0a <EMV_SendCompleteDataToLinux+0x1f6>
            pos += sprintf(buffer + pos, "%02X", card_data->ppse_data[i]);
 8003ace:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003ad2:	f107 020c 	add.w	r2, r7, #12
 8003ad6:	18d0      	adds	r0, r2, r3
 8003ad8:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003adc:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8003ae6:	4413      	add	r3, r2
 8003ae8:	330e      	adds	r3, #14
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	494f      	ldr	r1, [pc, #316]	@ (8003c2c <EMV_SendCompleteDataToLinux+0x318>)
 8003af0:	f01d ff5c 	bl	80219ac <siprintf>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003afa:	4413      	add	r3, r2
 8003afc:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int i = 0; i < card_data->ppse_len; i++) {
 8003b00:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8003b04:	3301      	adds	r3, #1
 8003b06:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8003b0a:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003b0e:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	dbd5      	blt.n	8003ace <EMV_SendCompleteDataToLinux+0x1ba>
        }
        pos += sprintf(buffer + pos, "\r\n");
 8003b22:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003b26:	f107 020c 	add.w	r2, r7, #12
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4940      	ldr	r1, [pc, #256]	@ (8003c30 <EMV_SendCompleteDataToLinux+0x31c>)
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f01d ff3c 	bl	80219ac <siprintf>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    }

    // 应用选择数据
    if (card_data->app_select_len > 0) {
 8003b40:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003b44:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04c      	beq.n	8003bec <EMV_SendCompleteDataToLinux+0x2d8>
        pos += sprintf(buffer + pos, "APP_SELECT_DATA:");
 8003b52:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003b56:	f107 020c 	add.w	r2, r7, #12
 8003b5a:	4413      	add	r3, r2
 8003b5c:	493a      	ldr	r1, [pc, #232]	@ (8003c48 <EMV_SendCompleteDataToLinux+0x334>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f01d ff24 	bl	80219ac <siprintf>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int i = 0; i < card_data->app_select_len; i++) {
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8003b76:	e01e      	b.n	8003bb6 <EMV_SendCompleteDataToLinux+0x2a2>
            pos += sprintf(buffer + pos, "%02X", card_data->app_select_data[i]);
 8003b78:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003b7c:	f107 020c 	add.w	r2, r7, #12
 8003b80:	18d0      	adds	r0, r2, r3
 8003b82:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003b86:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4924      	ldr	r1, [pc, #144]	@ (8003c2c <EMV_SendCompleteDataToLinux+0x318>)
 8003b9c:	f01d ff06 	bl	80219ac <siprintf>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int i = 0; i < card_data->app_select_len; i++) {
 8003bac:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8003bb6:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003bba:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	dbd4      	blt.n	8003b78 <EMV_SendCompleteDataToLinux+0x264>
        }
        pos += sprintf(buffer + pos, "\r\n");
 8003bce:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003bd2:	f107 020c 	add.w	r2, r7, #12
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4915      	ldr	r1, [pc, #84]	@ (8003c30 <EMV_SendCompleteDataToLinux+0x31c>)
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f01d fee6 	bl	80219ac <siprintf>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003be6:	4413      	add	r3, r2
 8003be8:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    }

    // GPO数据
    if (card_data->gpo_len > 0) {
 8003bec:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003bf0:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8b3 3312 	ldrh.w	r3, [r3, #786]	@ 0x312
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d062      	beq.n	8003cc4 <EMV_SendCompleteDataToLinux+0x3b0>
        pos += sprintf(buffer + pos, "GPO_DATA:");
 8003bfe:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003c02:	f107 020c 	add.w	r2, r7, #12
 8003c06:	4413      	add	r3, r2
 8003c08:	4910      	ldr	r1, [pc, #64]	@ (8003c4c <EMV_SendCompleteDataToLinux+0x338>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f01d fece 	bl	80219ac <siprintf>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003c16:	4413      	add	r3, r2
 8003c18:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int i = 0; i < card_data->gpo_len; i++) {
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8003c22:	e034      	b.n	8003c8e <EMV_SendCompleteDataToLinux+0x37a>
 8003c24:	080246c4 	.word	0x080246c4
 8003c28:	080246e0 	.word	0x080246e0
 8003c2c:	080246ec 	.word	0x080246ec
 8003c30:	080246f4 	.word	0x080246f4
 8003c34:	080246f8 	.word	0x080246f8
 8003c38:	08024708 	.word	0x08024708
 8003c3c:	08024720 	.word	0x08024720
 8003c40:	08024730 	.word	0x08024730
 8003c44:	08024740 	.word	0x08024740
 8003c48:	0802474c 	.word	0x0802474c
 8003c4c:	08024760 	.word	0x08024760
            pos += sprintf(buffer + pos, "%02X", card_data->gpo_data[i]);
 8003c50:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003c54:	f107 020c 	add.w	r2, r7, #12
 8003c58:	18d0      	adds	r0, r2, r3
 8003c5a:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003c5e:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	496d      	ldr	r1, [pc, #436]	@ (8003e28 <EMV_SendCompleteDataToLinux+0x514>)
 8003c74:	f01d fe9a 	bl	80219ac <siprintf>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003c7e:	4413      	add	r3, r2
 8003c80:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int i = 0; i < card_data->gpo_len; i++) {
 8003c84:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8003c8e:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003c92:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3312 	ldrh.w	r3, [r3, #786]	@ 0x312
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	dbd4      	blt.n	8003c50 <EMV_SendCompleteDataToLinux+0x33c>
        }
        pos += sprintf(buffer + pos, "\r\n");
 8003ca6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003caa:	f107 020c 	add.w	r2, r7, #12
 8003cae:	4413      	add	r3, r2
 8003cb0:	495e      	ldr	r1, [pc, #376]	@ (8003e2c <EMV_SendCompleteDataToLinux+0x518>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f01d fe7a 	bl	80219ac <siprintf>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    }

    // 记录数据
    pos += sprintf(buffer + pos, "RECORD_COUNT:%d\r\n", card_data->sfi_record_count);
 8003cc4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003cc8:	f107 020c 	add.w	r2, r7, #12
 8003ccc:	18d0      	adds	r0, r2, r3
 8003cce:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003cd2:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4954      	ldr	r1, [pc, #336]	@ (8003e30 <EMV_SendCompleteDataToLinux+0x51c>)
 8003ce0:	f01d fe64 	bl	80219ac <siprintf>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003cea:	4413      	add	r3, r2
 8003cec:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    for (int i = 0; i < card_data->sfi_record_count; i++) {
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 8003cf6:	e05c      	b.n	8003db2 <EMV_SendCompleteDataToLinux+0x49e>
        pos += sprintf(buffer + pos, "RECORD_%d:", i);
 8003cf8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003cfc:	f107 020c 	add.w	r2, r7, #12
 8003d00:	4413      	add	r3, r2
 8003d02:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8003d06:	494b      	ldr	r1, [pc, #300]	@ (8003e34 <EMV_SendCompleteDataToLinux+0x520>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f01d fe4f 	bl	80219ac <siprintf>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003d14:	4413      	add	r3, r2
 8003d16:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int j = 0; j < card_data->sfi_record_lens[i]; j++) {
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8003d20:	e022      	b.n	8003d68 <EMV_SendCompleteDataToLinux+0x454>
            pos += sprintf(buffer + pos, "%02X", card_data->sfi_records[i][j]);
 8003d22:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003d26:	f107 020c 	add.w	r2, r7, #12
 8003d2a:	18d0      	adds	r0, r2, r3
 8003d2c:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003d30:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	441a      	add	r2, r3
 8003d3e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4936      	ldr	r1, [pc, #216]	@ (8003e28 <EMV_SendCompleteDataToLinux+0x514>)
 8003d4e:	f01d fe2d 	bl	80219ac <siprintf>
 8003d52:	4602      	mov	r2, r0
 8003d54:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003d58:	4413      	add	r3, r2
 8003d5a:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
        for (int j = 0; j < card_data->sfi_record_lens[i]; j++) {
 8003d5e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003d62:	3301      	adds	r3, #1
 8003d64:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8003d68:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003d6c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8003d76:	f503 63d1 	add.w	r3, r3, #1672	@ 0x688
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	889b      	ldrh	r3, [r3, #4]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003d86:	4293      	cmp	r3, r2
 8003d88:	dbcb      	blt.n	8003d22 <EMV_SendCompleteDataToLinux+0x40e>
        }
        pos += sprintf(buffer + pos, "\r\n");
 8003d8a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003d8e:	f107 020c 	add.w	r2, r7, #12
 8003d92:	4413      	add	r3, r2
 8003d94:	4925      	ldr	r1, [pc, #148]	@ (8003e2c <EMV_SendCompleteDataToLinux+0x518>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f01d fe08 	bl	80219ac <siprintf>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003da2:	4413      	add	r3, r2
 8003da4:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    for (int i = 0; i < card_data->sfi_record_count; i++) {
 8003da8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8003dac:	3301      	adds	r3, #1
 8003dae:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 8003db2:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8003db6:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	db96      	blt.n	8003cf8 <EMV_SendCompleteDataToLinux+0x3e4>
    }

    pos += sprintf(buffer + pos, "EMV_COMPLETE_DATA_END\r\n");
 8003dca:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003dce:	f107 020c 	add.w	r2, r7, #12
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4918      	ldr	r1, [pc, #96]	@ (8003e38 <EMV_SendCompleteDataToLinux+0x524>)
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f01d fde8 	bl	80219ac <siprintf>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003de2:	4413      	add	r3, r2
 8003de4:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824

    // 发送数据
    if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, pos, 5000) == HAL_OK) {
 8003de8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	f107 010c 	add.w	r1, r7, #12
 8003df2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003df6:	4811      	ldr	r0, [pc, #68]	@ (8003e3c <EMV_SendCompleteDataToLinux+0x528>)
 8003df8:	f01b fb82 	bl	801f500 <HAL_UART_Transmit>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <EMV_SendCompleteDataToLinux+0x508>
        DEBUG_PRINTF("Complete data sent to Linux: %d bytes\r\n", pos);
 8003e02:	f8d7 1824 	ldr.w	r1, [r7, #2084]	@ 0x824
 8003e06:	480e      	ldr	r0, [pc, #56]	@ (8003e40 <EMV_SendCompleteDataToLinux+0x52c>)
 8003e08:	f01d fd58 	bl	80218bc <iprintf>
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <EMV_SendCompleteDataToLinux+0x530>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f01d fc7c 	bl	8021710 <fflush>
        return EMV_SUCCESS;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <EMV_SendCompleteDataToLinux+0x50a>
    }

    return EMV_ERROR_COMMUNICATION;
 8003e1c:	2306      	movs	r3, #6
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f607 0728 	addw	r7, r7, #2088	@ 0x828
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	080246ec 	.word	0x080246ec
 8003e2c:	080246f4 	.word	0x080246f4
 8003e30:	0802476c 	.word	0x0802476c
 8003e34:	08024780 	.word	0x08024780
 8003e38:	0802478c 	.word	0x0802478c
 8003e3c:	200004b0 	.word	0x200004b0
 8003e40:	080247a4 	.word	0x080247a4
 8003e44:	20000084 	.word	0x20000084

08003e48 <EMV_WaitForLinuxResult>:

// ==================================================
// 新增功能7: 等待Linux处理结果
// ==================================================
EMV_Result_t EMV_WaitForLinuxResult(EMV_Complete_Card_Data_t *card_data)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b0c4      	sub	sp, #272	@ 0x110
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003e52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e56:	6018      	str	r0, [r3, #0]
    extern UART_HandleTypeDef huart1;
    uint8_t rx_buffer[256];
    uint32_t timeout = 10000; // 10秒超时
 8003e58:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003e5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    DEBUG_PRINTF("Waiting for Linux processing result...\r\n");
 8003e60:	482c      	ldr	r0, [pc, #176]	@ (8003f14 <EMV_WaitForLinuxResult+0xcc>)
 8003e62:	f01d fd9b 	bl	802199c <puts>
 8003e66:	4b2c      	ldr	r3, [pc, #176]	@ (8003f18 <EMV_WaitForLinuxResult+0xd0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f01d fc4f 	bl	8021710 <fflush>

    if (HAL_UART_Receive(&huart1, rx_buffer, sizeof(rx_buffer), timeout) == HAL_OK) {
 8003e72:	f107 010c 	add.w	r1, r7, #12
 8003e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e7e:	4827      	ldr	r0, [pc, #156]	@ (8003f1c <EMV_WaitForLinuxResult+0xd4>)
 8003e80:	f01b fbc7 	bl	801f612 <HAL_UART_Receive>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d135      	bne.n	8003ef6 <EMV_WaitForLinuxResult+0xae>
        // 解析Linux响应
        if (strstr((char*)rx_buffer, "TRANSACTION_APPROVED") != NULL) {
 8003e8a:	f107 030c 	add.w	r3, r7, #12
 8003e8e:	4924      	ldr	r1, [pc, #144]	@ (8003f20 <EMV_WaitForLinuxResult+0xd8>)
 8003e90:	4618      	mov	r0, r3
 8003e92:	f01d feb7 	bl	8021c04 <strstr>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <EMV_WaitForLinuxResult+0x6a>
            DEBUG_PRINTF("Transaction APPROVED by Linux\r\n");
 8003e9c:	4821      	ldr	r0, [pc, #132]	@ (8003f24 <EMV_WaitForLinuxResult+0xdc>)
 8003e9e:	f01d fd7d 	bl	802199c <puts>
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <EMV_WaitForLinuxResult+0xd0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f01d fc31 	bl	8021710 <fflush>
            return EMV_SUCCESS;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e02b      	b.n	8003f0a <EMV_WaitForLinuxResult+0xc2>
        } else if (strstr((char*)rx_buffer, "TRANSACTION_DECLINED") != NULL) {
 8003eb2:	f107 030c 	add.w	r3, r7, #12
 8003eb6:	491c      	ldr	r1, [pc, #112]	@ (8003f28 <EMV_WaitForLinuxResult+0xe0>)
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f01d fea3 	bl	8021c04 <strstr>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <EMV_WaitForLinuxResult+0x92>
            DEBUG_PRINTF("Transaction DECLINED by Linux\r\n");
 8003ec4:	4819      	ldr	r0, [pc, #100]	@ (8003f2c <EMV_WaitForLinuxResult+0xe4>)
 8003ec6:	f01d fd69 	bl	802199c <puts>
 8003eca:	4b13      	ldr	r3, [pc, #76]	@ (8003f18 <EMV_WaitForLinuxResult+0xd0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f01d fc1d 	bl	8021710 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 8003ed6:	2307      	movs	r3, #7
 8003ed8:	e017      	b.n	8003f0a <EMV_WaitForLinuxResult+0xc2>
        } else {
            DEBUG_PRINTF("Linux response: %s\r\n", rx_buffer);
 8003eda:	f107 030c 	add.w	r3, r7, #12
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4813      	ldr	r0, [pc, #76]	@ (8003f30 <EMV_WaitForLinuxResult+0xe8>)
 8003ee2:	f01d fceb 	bl	80218bc <iprintf>
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <EMV_WaitForLinuxResult+0xd0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f01d fc0f 	bl	8021710 <fflush>
            return EMV_ERROR_COMMUNICATION;
 8003ef2:	2306      	movs	r3, #6
 8003ef4:	e009      	b.n	8003f0a <EMV_WaitForLinuxResult+0xc2>
        }
    }

    DEBUG_PRINTF("Timeout waiting for Linux response\r\n");
 8003ef6:	480f      	ldr	r0, [pc, #60]	@ (8003f34 <EMV_WaitForLinuxResult+0xec>)
 8003ef8:	f01d fd50 	bl	802199c <puts>
 8003efc:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <EMV_WaitForLinuxResult+0xd0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f01d fc04 	bl	8021710 <fflush>
    return EMV_ERROR_COMMUNICATION;
 8003f08:	2306      	movs	r3, #6
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	080247cc 	.word	0x080247cc
 8003f18:	20000084 	.word	0x20000084
 8003f1c:	200004b0 	.word	0x200004b0
 8003f20:	080247f4 	.word	0x080247f4
 8003f24:	0802480c 	.word	0x0802480c
 8003f28:	0802482c 	.word	0x0802482c
 8003f2c:	08024844 	.word	0x08024844
 8003f30:	08024864 	.word	0x08024864
 8003f34:	0802487c 	.word	0x0802487c

08003f38 <EMV_ShowSuccessIndication>:

// ==================================================
// 新增功能8: 硬件指示
// ==================================================
void EMV_ShowSuccessIndication(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("Transaction Successful! 💳\r\n");
 8003f3c:	4805      	ldr	r0, [pc, #20]	@ (8003f54 <EMV_ShowSuccessIndication+0x1c>)
 8003f3e:	f01d fd2d 	bl	802199c <puts>
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <EMV_ShowSuccessIndication+0x20>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f01d fbe1 	bl	8021710 <fflush>
    // 可以添加LED闪烁、蜂鸣器提示等
    // beep_start(2, 200);  // 成功提示音
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	080248a0 	.word	0x080248a0
 8003f58:	20000084 	.word	0x20000084

08003f5c <EMV_ShowFailureIndication>:

void EMV_ShowFailureIndication(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("Transaction Failed! ❌\r\n");
 8003f60:	4805      	ldr	r0, [pc, #20]	@ (8003f78 <EMV_ShowFailureIndication+0x1c>)
 8003f62:	f01d fd1b 	bl	802199c <puts>
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <EMV_ShowFailureIndication+0x20>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f01d fbcf 	bl	8021710 <fflush>
    // 可以添加LED闪烁、蜂鸣器提示等
    // beep_start(3, 100);  // 失败提示音
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	080248c0 	.word	0x080248c0
 8003f7c:	20000084 	.word	0x20000084

08003f80 <EmvcoProfileProcess>:
static phStatus_t EmvcoDataExchange(uint8_t * com_buffer, uint8_t cmdsize, uint8_t ** resp_buffer, uint32_t * wRxLength);
static void EmvcoRfReset(phacDiscLoop_Sw_DataParams_t * pDataParams);
static phStatus_t EmvcoDataLoopBack(phacDiscLoop_Sw_DataParams_t * pDataParams);

void EmvcoProfileProcess (phacDiscLoop_Sw_DataParams_t * pDataParams,phStatus_t eDiscStatus)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
	phStatus_t status = eDiscStatus;
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	81fb      	strh	r3, [r7, #14]

	if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 8003f90:	89fb      	ldrh	r3, [r7, #14]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b8b      	cmp	r3, #139	@ 0x8b
 8003f96:	d104      	bne.n	8003fa2 <EmvcoProfileProcess+0x22>
	{
		status = EmvcoDataLoopBack(pDataParams);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f861 	bl	8004060 <EmvcoDataLoopBack>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	81fb      	strh	r3, [r7, #14]
	}

	if((status & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8003fa2:	89fb      	ldrh	r3, [r7, #14]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b84      	cmp	r3, #132	@ 0x84
 8003fa8:	d002      	beq.n	8003fb0 <EmvcoProfileProcess+0x30>
	{
		/* Perform RF Reset */
		EmvcoRfReset(pDataParams);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f804 	bl	8003fb8 <EmvcoRfReset>
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <EmvcoRfReset>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static void EmvcoRfReset(phacDiscLoop_Sw_DataParams_t * pDataParams)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
    phStatus_t status = PH_ERR_SUCCESS;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	81fb      	strh	r3, [r7, #14]

    /*RF Field OFF*/
    status = phhalHw_FieldOff(pDataParams->pHalDataParams);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f00b fbb3 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <EmvcoRfReset+0x38>
 8003fd8:	89fb      	ldrh	r3, [r7, #14]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2180      	movs	r1, #128	@ 0x80
 8003fde:	481e      	ldr	r0, [pc, #120]	@ (8004058 <EmvcoRfReset+0xa0>)
 8003fe0:	f01d fc6c 	bl	80218bc <iprintf>
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <EmvcoRfReset+0xa4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f01d fb90 	bl	8021710 <fflush>

    status = phhalHw_Wait(pDataParams->pHalDataParams,PHHAL_HW_TIME_MICROSECONDS, 5100);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f00b fbbe 	bl	800f77c <phhalHw_Pn5180_Wait>
 8004000:	4603      	mov	r3, r0
 8004002:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <EmvcoRfReset+0x6a>
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	461a      	mov	r2, r3
 800400e:	2183      	movs	r1, #131	@ 0x83
 8004010:	4811      	ldr	r0, [pc, #68]	@ (8004058 <EmvcoRfReset+0xa0>)
 8004012:	f01d fc53 	bl	80218bc <iprintf>
 8004016:	4b11      	ldr	r3, [pc, #68]	@ (800405c <EmvcoRfReset+0xa4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f01d fb77 	bl	8021710 <fflush>

    /*RF Field ON*/
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	4618      	mov	r0, r3
 8004028:	f00b fb2e 	bl	800f688 <phhalHw_Pn5180_FieldOn>
 800402c:	4603      	mov	r3, r0
 800402e:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 8004030:	89fb      	ldrh	r3, [r7, #14]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <EmvcoRfReset+0x96>
 8004036:	89fb      	ldrh	r3, [r7, #14]
 8004038:	461a      	mov	r2, r3
 800403a:	2187      	movs	r1, #135	@ 0x87
 800403c:	4806      	ldr	r0, [pc, #24]	@ (8004058 <EmvcoRfReset+0xa0>)
 800403e:	f01d fc3d 	bl	80218bc <iprintf>
 8004042:	4b06      	ldr	r3, [pc, #24]	@ (800405c <EmvcoRfReset+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f01d fb61 	bl	8021710 <fflush>

}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	080248dc 	.word	0x080248dc
 800405c:	20000084 	.word	0x20000084

08004060 <EmvcoDataLoopBack>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static phStatus_t EmvcoDataLoopBack(phacDiscLoop_Sw_DataParams_t * pDataParams)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    uint32_t cmdsize, respsize;
    phStatus_t status;
    uint8_t bEndOfLoopBack = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	747b      	strb	r3, [r7, #17]
    uint8_t bRemovalProcedure = PH_OFF;
 800406c:	2300      	movs	r3, #0
 800406e:	743b      	strb	r3, [r7, #16]
    cmdsize = sizeof(PPSE_SELECT_APDU);
 8004070:	2314      	movs	r3, #20
 8004072:	617b      	str	r3, [r7, #20]

    status = EmvcoDataExchange(PPSE_SELECT_APDU, cmdsize, &response_buffer, &respsize);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	b2d9      	uxtb	r1, r3
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4a5d      	ldr	r2, [pc, #372]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 800407e:	485e      	ldr	r0, [pc, #376]	@ (80041f8 <EmvcoDataLoopBack+0x198>)
 8004080:	f000 f8d0 	bl	8004224 <EmvcoDataExchange>
 8004084:	4603      	mov	r3, r0
 8004086:	827b      	strh	r3, [r7, #18]

#ifndef RUN_TEST_SUIT

    /*Check if P1 is 0x04 which means that the data field consists of DF name */
    if(PPSE_SELECT_APDU[2] == 0x04)
 8004088:	4b5b      	ldr	r3, [pc, #364]	@ (80041f8 <EmvcoDataLoopBack+0x198>)
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d10e      	bne.n	80040ae <EmvcoDataLoopBack+0x4e>
    {
        DEBUG_PRINTF("\n DF Name: \n");
 8004090:	485a      	ldr	r0, [pc, #360]	@ (80041fc <EmvcoDataLoopBack+0x19c>)
 8004092:	f01d fc83 	bl	802199c <puts>
 8004096:	4b5a      	ldr	r3, [pc, #360]	@ (8004200 <EmvcoDataLoopBack+0x1a0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f01d fb37 	bl	8021710 <fflush>
        /* DF Size = Total Command size - size of(PDU Header + Expected Len(Le))*/
        phApp_Print_Buff(&PPSE_SELECT_APDU[5], PPSE_SELECT_APDU[4]);
 80040a2:	4b55      	ldr	r3, [pc, #340]	@ (80041f8 <EmvcoDataLoopBack+0x198>)
 80040a4:	791b      	ldrb	r3, [r3, #4]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4856      	ldr	r0, [pc, #344]	@ (8004204 <EmvcoDataLoopBack+0x1a4>)
 80040aa:	f000 f983 	bl	80043b4 <phApp_Print_Buff>
    }
    if (respsize > 0)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d021      	beq.n	80040f8 <EmvcoDataLoopBack+0x98>
    {
        memcpy(&PPSE_response_buffer[0],response_buffer,respsize);
 80040b4:	4b4f      	ldr	r3, [pc, #316]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4619      	mov	r1, r3
 80040bc:	4852      	ldr	r0, [pc, #328]	@ (8004208 <EmvcoDataLoopBack+0x1a8>)
 80040be:	f01d fe2e 	bl	8021d1e <memcpy>
        DEBUG_PRINTF("\n SELECT_PPSE Res:\n");
 80040c2:	4852      	ldr	r0, [pc, #328]	@ (800420c <EmvcoDataLoopBack+0x1ac>)
 80040c4:	f01d fc6a 	bl	802199c <puts>
 80040c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004200 <EmvcoDataLoopBack+0x1a0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f01d fb1e 	bl	8021710 <fflush>
        /* Status word removed */
        phApp_Print_Buff(PPSE_response_buffer, (respsize - 2));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3b02      	subs	r3, #2
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	4619      	mov	r1, r3
 80040de:	484a      	ldr	r0, [pc, #296]	@ (8004208 <EmvcoDataLoopBack+0x1a8>)
 80040e0:	f000 f968 	bl	80043b4 <phApp_Print_Buff>
        DEBUG_PRINTF("\nTransaction Done Remove card\n");
 80040e4:	484a      	ldr	r0, [pc, #296]	@ (8004210 <EmvcoDataLoopBack+0x1b0>)
 80040e6:	f01d fc59 	bl	802199c <puts>
 80040ea:	4b45      	ldr	r3, [pc, #276]	@ (8004200 <EmvcoDataLoopBack+0x1a0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f01d fb0d 	bl	8021710 <fflush>
 80040f6:	e055      	b.n	80041a4 <EmvcoDataLoopBack+0x144>
    }
    else
    {
        DEBUG_PRINTF("\nFCI not recieved\n");
 80040f8:	4846      	ldr	r0, [pc, #280]	@ (8004214 <EmvcoDataLoopBack+0x1b4>)
 80040fa:	f01d fc4f 	bl	802199c <puts>
 80040fe:	4b40      	ldr	r3, [pc, #256]	@ (8004200 <EmvcoDataLoopBack+0x1a0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4618      	mov	r0, r3
 8004106:	f01d fb03 	bl	8021710 <fflush>
#ifdef PPSE_NO_LE
        DEBUG_PRINTF("Transaction Done Remove card\n");
#else
        DEBUG_PRINTF("Transaction Failed Replace the card\n");
 800410a:	4843      	ldr	r0, [pc, #268]	@ (8004218 <EmvcoDataLoopBack+0x1b8>)
 800410c:	f01d fc46 	bl	802199c <puts>
 8004110:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <EmvcoDataLoopBack+0x1a0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f01d fafa 	bl	8021710 <fflush>
#endif
    }

#endif

    while (!bEndOfLoopBack)
 800411c:	e042      	b.n	80041a4 <EmvcoDataLoopBack+0x144>
    {
        if (respsize > 0)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03d      	beq.n	80041a0 <EmvcoDataLoopBack+0x140>
        {
            if (respsize >= MiN_VALID_DATA_SIZE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b05      	cmp	r3, #5
 8004128:	d92a      	bls.n	8004180 <EmvcoDataLoopBack+0x120>
            {
                /* EOT (End Of Test) Command. Exit the loop */
                if (eEmdRes_EOT == response_buffer[1])
 800412a:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b70      	cmp	r3, #112	@ 0x70
 8004134:	d104      	bne.n	8004140 <EmvcoDataLoopBack+0xe0>
                {
                    /* Second byte = 0x70, stop the loopback */
                    bEndOfLoopBack = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	747b      	strb	r3, [r7, #17]
                    bRemovalProcedure = PH_ON;
 800413a:	2301      	movs	r3, #1
 800413c:	743b      	strb	r3, [r7, #16]
 800413e:	e031      	b.n	80041a4 <EmvcoDataLoopBack+0x144>
                }
                else if (eEmdRes_SW_0 == response_buffer[respsize - 2])
 8004140:	4b2c      	ldr	r3, [pc, #176]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b02      	subs	r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b90      	cmp	r3, #144	@ 0x90
 800414e:	d114      	bne.n	800417a <EmvcoDataLoopBack+0x11a>
                {
                    /* Format the card response into a new command without the status word 0x90 0x00 */
                    cmdsize = respsize - 2;  /* To Remove two bytes of status word */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b02      	subs	r3, #2
 8004154:	617b      	str	r3, [r7, #20]
                    memcpy(command_buffer, response_buffer, cmdsize);
 8004156:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4619      	mov	r1, r3
 800415e:	482f      	ldr	r0, [pc, #188]	@ (800421c <EmvcoDataLoopBack+0x1bc>)
 8004160:	f01d fddd 	bl	8021d1e <memcpy>

                    /* Send back(Command) : Received Response - Status_Word */
                    status = EmvcoDataExchange(command_buffer, cmdsize, &response_buffer, &respsize);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	b2d9      	uxtb	r1, r3
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4a21      	ldr	r2, [pc, #132]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 800416e:	482b      	ldr	r0, [pc, #172]	@ (800421c <EmvcoDataLoopBack+0x1bc>)
 8004170:	f000 f858 	bl	8004224 <EmvcoDataExchange>
 8004174:	4603      	mov	r3, r0
 8004176:	827b      	strh	r3, [r7, #18]
 8004178:	e014      	b.n	80041a4 <EmvcoDataLoopBack+0x144>
                }
                else
                {
                    /* error Abort Loopback */
                    bEndOfLoopBack = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	747b      	strb	r3, [r7, #17]
 800417e:	e011      	b.n	80041a4 <EmvcoDataLoopBack+0x144>
                }
            }
            else/*if (respsize <6)*/
            {
                /* re-send the select appli APDU */
                status = EmvcoDataExchange(PPSE_SELECT_APDU, cmdsize, &response_buffer, &respsize);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	b2d9      	uxtb	r1, r3
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	4a1a      	ldr	r2, [pc, #104]	@ (80041f4 <EmvcoDataLoopBack+0x194>)
 800418a:	481b      	ldr	r0, [pc, #108]	@ (80041f8 <EmvcoDataLoopBack+0x198>)
 800418c:	f000 f84a 	bl	8004224 <EmvcoDataExchange>
 8004190:	4603      	mov	r3, r0
 8004192:	827b      	strh	r3, [r7, #18]
                if (respsize == 0)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <EmvcoDataLoopBack+0x144>
                {
                    bEndOfLoopBack = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	747b      	strb	r3, [r7, #17]
 800419e:	e001      	b.n	80041a4 <EmvcoDataLoopBack+0x144>
                }
            }
        }/*if(respsize > 0)*/
        else
        {
            bEndOfLoopBack = 1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	747b      	strb	r3, [r7, #17]
    while (!bEndOfLoopBack)
 80041a4:	7c7b      	ldrb	r3, [r7, #17]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0b9      	beq.n	800411e <EmvcoDataLoopBack+0xbe>
        }
    }/*while (!bEndOfLoopBack)*/

    if(bRemovalProcedure == PH_ON)
 80041aa:	7c3b      	ldrb	r3, [r7, #16]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d11b      	bne.n	80041e8 <EmvcoDataLoopBack+0x188>
    {
        /* Set Poll state to perform Tag removal procedure*/
        status = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_REMOVAL);
 80041b0:	2203      	movs	r2, #3
 80041b2:	2184      	movs	r1, #132	@ 0x84
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f005 f8bb 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 80041ba:	4603      	mov	r3, r0
 80041bc:	827b      	strh	r3, [r7, #18]
        CHECK_STATUS(status);
 80041be:	8a7b      	ldrh	r3, [r7, #18]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <EmvcoDataLoopBack+0x17c>
 80041c4:	8a7b      	ldrh	r3, [r7, #18]
 80041c6:	461a      	mov	r2, r3
 80041c8:	21ec      	movs	r1, #236	@ 0xec
 80041ca:	4815      	ldr	r0, [pc, #84]	@ (8004220 <EmvcoDataLoopBack+0x1c0>)
 80041cc:	f01d fb76 	bl	80218bc <iprintf>
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <EmvcoDataLoopBack+0x1a0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f01d fa9a 	bl	8021710 <fflush>

        status = phacDiscLoop_Run(pDataParams, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 80041dc:	2100      	movs	r1, #0
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f004 ffd4 	bl	800918c <phacDiscLoop_Sw_Run>
 80041e4:	4603      	mov	r3, r0
 80041e6:	827b      	strh	r3, [r7, #18]
    }
    return status;
 80041e8:	8a7b      	ldrh	r3, [r7, #18]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000898 	.word	0x20000898
 80041f8:	20000024 	.word	0x20000024
 80041fc:	08024944 	.word	0x08024944
 8004200:	20000084 	.word	0x20000084
 8004204:	20000029 	.word	0x20000029
 8004208:	20000540 	.word	0x20000540
 800420c:	08024950 	.word	0x08024950
 8004210:	08024964 	.word	0x08024964
 8004214:	08024984 	.word	0x08024984
 8004218:	08024998 	.word	0x08024998
 800421c:	20000640 	.word	0x20000640
 8004220:	080248dc 	.word	0x080248dc

08004224 <EmvcoDataExchange>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static phStatus_t EmvcoDataExchange(uint8_t * com_buffer, uint8_t cmdsize, uint8_t ** resp_buffer, uint32_t * wRxLength)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	460b      	mov	r3, r1
 8004232:	72fb      	strb	r3, [r7, #11]
    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	82fb      	strh	r3, [r7, #22]

    // 打印发送的C-APDU
    DEBUG_PRINTF("\n=== C-APDU SEND (%d bytes) ===\n", cmdsize);
 8004238:	7afb      	ldrb	r3, [r7, #11]
 800423a:	4619      	mov	r1, r3
 800423c:	4822      	ldr	r0, [pc, #136]	@ (80042c8 <EmvcoDataExchange+0xa4>)
 800423e:	f01d fb3d 	bl	80218bc <iprintf>
 8004242:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <EmvcoDataExchange+0xa8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f01d fa61 	bl	8021710 <fflush>
    phApp_Print_Buff(com_buffer, cmdsize);
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	4619      	mov	r1, r3
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f8ae 	bl	80043b4 <phApp_Print_Buff>

    status = phpalI14443p4_Exchange(phNfcLib_GetDataParams(PH_COMP_PAL_ISO14443P4), PH_EXCHANGE_DEFAULT,
 8004258:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800425c:	f004 fa62 	bl	8008724 <phNfcLib_GetDataParams>
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	b29a      	uxth	r2, r3
 8004264:	f107 0316 	add.w	r3, r7, #22
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f107 0318 	add.w	r3, r7, #24
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	2100      	movs	r1, #0
 8004276:	f012 feab 	bl	8016fd0 <phpalI14443p4_Sw_Exchange>
 800427a:	4603      	mov	r3, r0
 800427c:	83fb      	strh	r3, [r7, #30]
    		com_buffer, cmdsize, &ppRxBuffer, &wRxLen);
    if (PH_ERR_SUCCESS == status)
 800427e:	8bfb      	ldrh	r3, [r7, #30]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d115      	bne.n	80042b0 <EmvcoDataExchange+0x8c>
    {
        /* set the pointer to the start of the R-APDU */
        *resp_buffer = &ppRxBuffer[0];
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]

        // 打印接收的R-APDU
        DEBUG_PRINTF("\n=== R-APDU RECV (%d bytes) ===\n", wRxLen);
 800428a:	8afb      	ldrh	r3, [r7, #22]
 800428c:	4619      	mov	r1, r3
 800428e:	4810      	ldr	r0, [pc, #64]	@ (80042d0 <EmvcoDataExchange+0xac>)
 8004290:	f01d fb14 	bl	80218bc <iprintf>
 8004294:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <EmvcoDataExchange+0xa8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4618      	mov	r0, r3
 800429c:	f01d fa38 	bl	8021710 <fflush>
        phApp_Print_Buff(ppRxBuffer, wRxLen);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	8afa      	ldrh	r2, [r7, #22]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f883 	bl	80043b4 <phApp_Print_Buff>
 80042ae:	e001      	b.n	80042b4 <EmvcoDataExchange+0x90>
    }
    else
    {
        /* Exchange not successful, reset the number of rxd bytes */
        wRxLen = 0x00;
 80042b0:	2300      	movs	r3, #0
 80042b2:	82fb      	strh	r3, [r7, #22]
    }

    *wRxLength = wRxLen;
 80042b4:	8afb      	ldrh	r3, [r7, #22]
 80042b6:	461a      	mov	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]

    return status;
 80042bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	080249bc 	.word	0x080249bc
 80042cc:	20000084 	.word	0x20000084
 80042d0:	080249e0 	.word	0x080249e0

080042d4 <phApp_PrintTech>:
/*******************************************************************************
**   Function Definitions
*******************************************************************************/
/* Print technology being resolved */
void phApp_PrintTech(uint8_t TechType)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
    switch(TechType)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d854      	bhi.n	8004390 <phApp_PrintTech+0xbc>
 80042e6:	a201      	add	r2, pc, #4	@ (adr r2, 80042ec <phApp_PrintTech+0x18>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	08004341 	.word	0x08004341
 80042f4:	08004391 	.word	0x08004391
 80042f8:	08004355 	.word	0x08004355
 80042fc:	08004391 	.word	0x08004391
 8004300:	08004391 	.word	0x08004391
 8004304:	08004391 	.word	0x08004391
 8004308:	08004369 	.word	0x08004369
 800430c:	08004391 	.word	0x08004391
 8004310:	08004391 	.word	0x08004391
 8004314:	08004391 	.word	0x08004391
 8004318:	08004391 	.word	0x08004391
 800431c:	08004391 	.word	0x08004391
 8004320:	08004391 	.word	0x08004391
 8004324:	08004391 	.word	0x08004391
 8004328:	0800437d 	.word	0x0800437d
    {
    case PHAC_DISCLOOP_POS_BIT_MASK_A:
        DEBUG_PRINTF ("\tResolving Type A... \n");
 800432c:	481b      	ldr	r0, [pc, #108]	@ (800439c <phApp_PrintTech+0xc8>)
 800432e:	f01d fb35 	bl	802199c <puts>
 8004332:	4b1b      	ldr	r3, [pc, #108]	@ (80043a0 <phApp_PrintTech+0xcc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4618      	mov	r0, r3
 800433a:	f01d f9e9 	bl	8021710 <fflush>
        break;
 800433e:	e028      	b.n	8004392 <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_B:
        DEBUG_PRINTF ("\tResolving Type B... \n");
 8004340:	4818      	ldr	r0, [pc, #96]	@ (80043a4 <phApp_PrintTech+0xd0>)
 8004342:	f01d fb2b 	bl	802199c <puts>
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <phApp_PrintTech+0xcc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4618      	mov	r0, r3
 800434e:	f01d f9df 	bl	8021710 <fflush>
        break;
 8004352:	e01e      	b.n	8004392 <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F212:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 212... \n");
 8004354:	4814      	ldr	r0, [pc, #80]	@ (80043a8 <phApp_PrintTech+0xd4>)
 8004356:	f01d fb21 	bl	802199c <puts>
 800435a:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <phApp_PrintTech+0xcc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4618      	mov	r0, r3
 8004362:	f01d f9d5 	bl	8021710 <fflush>
        break;
 8004366:	e014      	b.n	8004392 <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F424:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 424... \n");
 8004368:	4810      	ldr	r0, [pc, #64]	@ (80043ac <phApp_PrintTech+0xd8>)
 800436a:	f01d fb17 	bl	802199c <puts>
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <phApp_PrintTech+0xcc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f01d f9cb 	bl	8021710 <fflush>
        break;
 800437a:	e00a      	b.n	8004392 <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_V:
        DEBUG_PRINTF ("\tResolving Type V... \n");
 800437c:	480c      	ldr	r0, [pc, #48]	@ (80043b0 <phApp_PrintTech+0xdc>)
 800437e:	f01d fb0d 	bl	802199c <puts>
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <phApp_PrintTech+0xcc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4618      	mov	r0, r3
 800438a:	f01d f9c1 	bl	8021710 <fflush>
        break;
 800438e:	e000      	b.n	8004392 <phApp_PrintTech+0xbe>

    default:
        break;
 8004390:	bf00      	nop
    }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	08024a04 	.word	0x08024a04
 80043a0:	20000084 	.word	0x20000084
 80043a4:	08024a1c 	.word	0x08024a1c
 80043a8:	08024a34 	.word	0x08024a34
 80043ac:	08024a60 	.word	0x08024a60
 80043b0:	08024a8c 	.word	0x08024a8c

080043b4 <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e010      	b.n	80043e8 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	480a      	ldr	r0, [pc, #40]	@ (80043fc <phApp_Print_Buff+0x48>)
 80043d2:	f01d fa73 	bl	80218bc <iprintf>
 80043d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <phApp_Print_Buff+0x4c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f01d f997 	bl	8021710 <fflush>
    for(i = 0; i < num; i++)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3ea      	bcc.n	80043c6 <phApp_Print_Buff+0x12>
    }
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	08024aa4 	.word	0x08024aa4
 8004400:	20000084 	.word	0x20000084

08004404 <phApp_PrintTagInfo>:
* \param   pDataParams      The discovery loop data parameters
* \param   wNumberOfTags    Total number of tags detected
* \param   wTagsDetected    Technology Detected
*/
void phApp_PrintTagInfo(phacDiscLoop_Sw_DataParams_t *pDataParams, uint16_t wNumberOfTags, uint16_t wTagsDetected)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
 8004410:	4613      	mov	r3, r2
 8004412:	803b      	strh	r3, [r7, #0]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint8_t bTagType;
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8004414:	883b      	ldrh	r3, [r7, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80da 	beq.w	80045d4 <phApp_PrintTagInfo+0x1d0>
    {
        if(pDataParams->sTypeATargetInfo.bT1TFlag)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004426:	2b00      	cmp	r3, #0
 8004428:	d032      	beq.n	8004490 <phApp_PrintTagInfo+0x8c>
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 800442a:	4898      	ldr	r0, [pc, #608]	@ (800468c <phApp_PrintTagInfo+0x288>)
 800442c:	f01d fa46 	bl	80218bc <iprintf>
 8004430:	4b97      	ldr	r3, [pc, #604]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f01d f96a 	bl	8021710 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 800443c:	4895      	ldr	r0, [pc, #596]	@ (8004694 <phApp_PrintTagInfo+0x290>)
 800443e:	f01d fa3d 	bl	80218bc <iprintf>
 8004442:	4b93      	ldr	r3, [pc, #588]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f01d f961 	bl	8021710 <fflush>
            phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7ff ffa9 	bl	80043b4 <phApp_Print_Buff>
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
            DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aSak);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8004468:	4619      	mov	r1, r3
 800446a:	488b      	ldr	r0, [pc, #556]	@ (8004698 <phApp_PrintTagInfo+0x294>)
 800446c:	f01d fa26 	bl	80218bc <iprintf>
 8004470:	4b87      	ldr	r3, [pc, #540]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f01d f94a 	bl	8021710 <fflush>
            DEBUG_PRINTF ("\n\t\tType: Type 1 Tag\n");
 800447c:	4887      	ldr	r0, [pc, #540]	@ (800469c <phApp_PrintTagInfo+0x298>)
 800447e:	f01d fa8d 	bl	802199c <puts>
 8004482:	4b83      	ldr	r3, [pc, #524]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f01d f941 	bl	8021710 <fflush>
 800448e:	e0a1      	b.n	80045d4 <phApp_PrintTagInfo+0x1d0>
        }
        else
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 8004490:	487e      	ldr	r0, [pc, #504]	@ (800468c <phApp_PrintTagInfo+0x288>)
 8004492:	f01d fa13 	bl	80218bc <iprintf>
 8004496:	4b7e      	ldr	r3, [pc, #504]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f01d f937 	bl	8021710 <fflush>
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
 80044a6:	e08f      	b.n	80045c8 <phApp_PrintTagInfo+0x1c4>
            {
                DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	3301      	adds	r3, #1
 80044ac:	4619      	mov	r1, r3
 80044ae:	487c      	ldr	r0, [pc, #496]	@ (80046a0 <phApp_PrintTagInfo+0x29c>)
 80044b0:	f01d fa04 	bl	80218bc <iprintf>
 80044b4:	4b76      	ldr	r3, [pc, #472]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f01d f928 	bl	8021710 <fflush>
                DEBUG_PRINTF ("\n\t\tUID :");
 80044c0:	4874      	ldr	r0, [pc, #464]	@ (8004694 <phApp_PrintTagInfo+0x290>)
 80044c2:	f01d f9fb 	bl	80218bc <iprintf>
 80044c6:	4b72      	ldr	r3, [pc, #456]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f01d f91f 	bl	8021710 <fflush>
                phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aUid,
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	3358      	adds	r3, #88	@ 0x58
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4413      	add	r3, r2
 80044e0:	f103 0008 	add.w	r0, r3, #8
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	440b      	add	r3, r1
 80044f0:	336a      	adds	r3, #106	@ 0x6a
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	f7ff ff5d 	bl	80043b4 <phApp_Print_Buff>
                            pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize);
                DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak);
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	440b      	add	r3, r1
 8004506:	336b      	adds	r3, #107	@ 0x6b
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4862      	ldr	r0, [pc, #392]	@ (8004698 <phApp_PrintTagInfo+0x294>)
 800450e:	f01d f9d5 	bl	80218bc <iprintf>
 8004512:	4b5f      	ldr	r3, [pc, #380]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4618      	mov	r0, r3
 800451a:	f01d f8f9 	bl	8021710 <fflush>

                if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & (uint8_t) ~0xFB) == 0)
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	440b      	add	r3, r1
 800452a:	336b      	adds	r3, #107	@ 0x6b
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d145      	bne.n	80045c2 <phApp_PrintTagInfo+0x1be>
                {
                    /* Bit b3 is set to zero, [Digital] 4.8.2 */
                    /* Mask out all other bits except for b7 and b6 */
                    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & 0x60);
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	440b      	add	r3, r1
 8004542:	336b      	adds	r3, #107	@ 0x6b
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800454a:	73bb      	strb	r3, [r7, #14]
                    bTagType = bTagType >> 5;
 800454c:	7bbb      	ldrb	r3, [r7, #14]
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	73bb      	strb	r3, [r7, #14]

                    switch(bTagType)
 8004552:	7bbb      	ldrb	r3, [r7, #14]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d833      	bhi.n	80045c0 <phApp_PrintTagInfo+0x1bc>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <phApp_PrintTagInfo+0x15c>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	08004585 	.word	0x08004585
 8004568:	08004599 	.word	0x08004599
 800456c:	080045ad 	.word	0x080045ad
                    {
                    case PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 2 Tag\n");
 8004570:	484c      	ldr	r0, [pc, #304]	@ (80046a4 <phApp_PrintTagInfo+0x2a0>)
 8004572:	f01d fa13 	bl	802199c <puts>
 8004576:	4b46      	ldr	r3, [pc, #280]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f01d f8c7 	bl	8021710 <fflush>
                        break;
 8004582:	e01e      	b.n	80045c2 <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 4A Tag\n");
 8004584:	4848      	ldr	r0, [pc, #288]	@ (80046a8 <phApp_PrintTagInfo+0x2a4>)
 8004586:	f01d fa09 	bl	802199c <puts>
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f01d f8bd 	bl	8021710 <fflush>
                        break;
 8004596:	e014      	b.n	80045c2 <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: P2P\n");
 8004598:	4844      	ldr	r0, [pc, #272]	@ (80046ac <phApp_PrintTagInfo+0x2a8>)
 800459a:	f01d f9ff 	bl	802199c <puts>
 800459e:	4b3c      	ldr	r3, [pc, #240]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f01d f8b3 	bl	8021710 <fflush>
                        break;
 80045aa:	e00a      	b.n	80045c2 <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type NFC_DEP and  4A Tag\n");
 80045ac:	4840      	ldr	r0, [pc, #256]	@ (80046b0 <phApp_PrintTagInfo+0x2ac>)
 80045ae:	f01d f9f5 	bl	802199c <puts>
 80045b2:	4b37      	ldr	r3, [pc, #220]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f01d f8a9 	bl	8021710 <fflush>
                        break;
 80045be:	e000      	b.n	80045c2 <phApp_PrintTagInfo+0x1be>
                    default:
                        break;
 80045c0:	bf00      	nop
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	3301      	adds	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	887a      	ldrh	r2, [r7, #2]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	f63f af6a 	bhi.w	80044a8 <phApp_PrintTagInfo+0xa4>
        }
    }
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 80045d4:	883b      	ldrh	r3, [r7, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d03e      	beq.n	800465c <phApp_PrintTagInfo+0x258>
    {
        DEBUG_PRINTF("\tTechnology  : Type B");
 80045de:	4835      	ldr	r0, [pc, #212]	@ (80046b4 <phApp_PrintTagInfo+0x2b0>)
 80045e0:	f01d f96c 	bl	80218bc <iprintf>
 80045e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f01d f890 	bl	8021710 <fflush>
        /* Loop through all the Type B tags detected and print the Pupi */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e024      	b.n	8004640 <phApp_PrintTagInfo+0x23c>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	3301      	adds	r3, #1
 80045fa:	4619      	mov	r1, r3
 80045fc:	4828      	ldr	r0, [pc, #160]	@ (80046a0 <phApp_PrintTagInfo+0x29c>)
 80045fe:	f01d f95d 	bl	80218bc <iprintf>
 8004602:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4618      	mov	r0, r3
 800460a:	f01d f881 	bl	8021710 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 800460e:	4821      	ldr	r0, [pc, #132]	@ (8004694 <phApp_PrintTagInfo+0x290>)
 8004610:	f01d f954 	bl	80218bc <iprintf>
 8004614:	4b1e      	ldr	r3, [pc, #120]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f01d f878 	bl	8021710 <fflush>
            /* PUPI Length is always 4 bytes */
            phApp_Print_Buff( pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].aPupi, 0x04);
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	33c8      	adds	r3, #200	@ 0xc8
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	3301      	adds	r3, #1
 8004632:	2104      	movs	r1, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff febd 	bl	80043b4 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	3301      	adds	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	b29b      	uxth	r3, r3
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	429a      	cmp	r2, r3
 8004648:	d8d5      	bhi.n	80045f6 <phApp_PrintTagInfo+0x1f2>
        }
        DEBUG_PRINTF("\n");
 800464a:	200a      	movs	r0, #10
 800464c:	f01d f948 	bl	80218e0 <putchar>
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4618      	mov	r0, r3
 8004658:	f01d f85a 	bl	8021710 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 800465c:	883b      	ldrh	r3, [r7, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <phApp_PrintTagInfo+0x26e>
        PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8004666:	883b      	ldrh	r3, [r7, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 809b 	beq.w	80047a8 <phApp_PrintTagInfo+0x3a4>
    {
        DEBUG_PRINTF("\tTechnology  : Type F");
 8004672:	4811      	ldr	r0, [pc, #68]	@ (80046b8 <phApp_PrintTagInfo+0x2b4>)
 8004674:	f01d f922 	bl	80218bc <iprintf>
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <phApp_PrintTagInfo+0x28c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f01d f846 	bl	8021710 <fflush>

        /* Loop through all the type F tags and print the IDm */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004684:	2300      	movs	r3, #0
 8004686:	73fb      	strb	r3, [r7, #15]
 8004688:	e089      	b.n	800479e <phApp_PrintTagInfo+0x39a>
 800468a:	bf00      	nop
 800468c:	08024aac 	.word	0x08024aac
 8004690:	20000084 	.word	0x20000084
 8004694:	08024ac4 	.word	0x08024ac4
 8004698:	08024ad0 	.word	0x08024ad0
 800469c:	08024ae0 	.word	0x08024ae0
 80046a0:	08024af4 	.word	0x08024af4
 80046a4:	08024b00 	.word	0x08024b00
 80046a8:	08024b14 	.word	0x08024b14
 80046ac:	08024b2c 	.word	0x08024b2c
 80046b0:	08024b3c 	.word	0x08024b3c
 80046b4:	08024b60 	.word	0x08024b60
 80046b8:	08024b78 	.word	0x08024b78
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	3301      	adds	r3, #1
 80046c0:	4619      	mov	r1, r3
 80046c2:	4885      	ldr	r0, [pc, #532]	@ (80048d8 <phApp_PrintTagInfo+0x4d4>)
 80046c4:	f01d f8fa 	bl	80218bc <iprintf>
 80046c8:	4b84      	ldr	r3, [pc, #528]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f01d f81e 	bl	8021710 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80046d4:	4882      	ldr	r0, [pc, #520]	@ (80048e0 <phApp_PrintTagInfo+0x4dc>)
 80046d6:	f01d f8f1 	bl	80218bc <iprintf>
 80046da:	4b80      	ldr	r3, [pc, #512]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f01d f815 	bl	8021710 <fflush>
            phApp_Print_Buff( pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm,
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	00da      	lsls	r2, r3, #3
 80046f0:	1ad2      	subs	r2, r2, r3
 80046f2:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	3304      	adds	r3, #4
 80046fc:	2108      	movs	r1, #8
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fe58 	bl	80043b4 <phApp_Print_Buff>
                        PHAC_DISCLOOP_FELICA_IDM_LENGTH );
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	00da      	lsls	r2, r3, #3
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	188b      	adds	r3, r1, r2
 8004714:	3394      	adds	r3, #148	@ 0x94
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d115      	bne.n	8004748 <phApp_PrintTagInfo+0x344>
                (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFE))
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	00da      	lsls	r2, r3, #3
 8004728:	1ad2      	subs	r2, r2, r3
 800472a:	188b      	adds	r3, r1, r2
 800472c:	3395      	adds	r3, #149	@ 0x95
 800472e:	781b      	ldrb	r3, [r3, #0]
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 8004730:	2bfe      	cmp	r3, #254	@ 0xfe
 8004732:	d109      	bne.n	8004748 <phApp_PrintTagInfo+0x344>
            {
                /* This is Type F tag with P2P capabilities */
                DEBUG_PRINTF ("\n\t\tType: P2P");
 8004734:	486b      	ldr	r0, [pc, #428]	@ (80048e4 <phApp_PrintTagInfo+0x4e0>)
 8004736:	f01d f8c1 	bl	80218bc <iprintf>
 800473a:	4b68      	ldr	r3, [pc, #416]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f01c ffe5 	bl	8021710 <fflush>
 8004746:	e008      	b.n	800475a <phApp_PrintTagInfo+0x356>
            }
            else
            {
                /* This is Type F T3T tag */
                DEBUG_PRINTF ("\n\t\tType: Type 3 Tag");
 8004748:	4867      	ldr	r0, [pc, #412]	@ (80048e8 <phApp_PrintTagInfo+0x4e4>)
 800474a:	f01d f8b7 	bl	80218bc <iprintf>
 800474e:	4b63      	ldr	r3, [pc, #396]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4618      	mov	r0, r3
 8004756:	f01c ffdb 	bl	8021710 <fflush>
            }

            if(pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].bBaud != PHAC_DISCLOOP_CON_BITR_212)
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	00da      	lsls	r2, r3, #3
 8004766:	1ad2      	subs	r2, r2, r3
 8004768:	188b      	adds	r3, r1, r2
 800476a:	33a6      	adds	r3, #166	@ 0xa6
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d009      	beq.n	8004786 <phApp_PrintTagInfo+0x382>
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 424\n");
 8004772:	485e      	ldr	r0, [pc, #376]	@ (80048ec <phApp_PrintTagInfo+0x4e8>)
 8004774:	f01d f912 	bl	802199c <puts>
 8004778:	4b58      	ldr	r3, [pc, #352]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f01c ffc6 	bl	8021710 <fflush>
 8004784:	e008      	b.n	8004798 <phApp_PrintTagInfo+0x394>
            }
            else
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 212\n");
 8004786:	485a      	ldr	r0, [pc, #360]	@ (80048f0 <phApp_PrintTagInfo+0x4ec>)
 8004788:	f01d f908 	bl	802199c <puts>
 800478c:	4b53      	ldr	r3, [pc, #332]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f01c ffbc 	bl	8021710 <fflush>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3301      	adds	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d889      	bhi.n	80046bc <phApp_PrintTagInfo+0x2b8>
        }
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 80047a8:	883b      	ldrh	r3, [r7, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03d      	beq.n	800482e <phApp_PrintTagInfo+0x42a>
    {
        DEBUG_PRINTF("\tTechnology  : Type V / ISO 15693 / T5T");
 80047b2:	4850      	ldr	r0, [pc, #320]	@ (80048f4 <phApp_PrintTagInfo+0x4f0>)
 80047b4:	f01d f882 	bl	80218bc <iprintf>
 80047b8:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	4618      	mov	r0, r3
 80047c0:	f01c ffa6 	bl	8021710 <fflush>
        /* Loop through all the Type V tags detected and print the UIDs */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e023      	b.n	8004812 <phApp_PrintTagInfo+0x40e>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4619      	mov	r1, r3
 80047d0:	4841      	ldr	r0, [pc, #260]	@ (80048d8 <phApp_PrintTagInfo+0x4d4>)
 80047d2:	f01d f873 	bl	80218bc <iprintf>
 80047d6:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f01c ff97 	bl	8021710 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80047e2:	483f      	ldr	r0, [pc, #252]	@ (80048e0 <phApp_PrintTagInfo+0x4dc>)
 80047e4:	f01d f86a 	bl	80218bc <iprintf>
 80047e8:	4b3c      	ldr	r3, [pc, #240]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f01c ff8e 	bl	8021710 <fflush>
            phApp_Print_Buff( pDataParams->sTypeVTargetInfo.aTypeV[bIndex].aUid, 0x08);
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	33d8      	adds	r3, #216	@ 0xd8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	330b      	adds	r3, #11
 8004804:	2108      	movs	r1, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fdd4 	bl	80043b4 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	3301      	adds	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	b29b      	uxth	r3, r3
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	429a      	cmp	r2, r3
 800481a:	d8d6      	bhi.n	80047ca <phApp_PrintTagInfo+0x3c6>
        }
        DEBUG_PRINTF("\n");
 800481c:	200a      	movs	r0, #10
 800481e:	f01d f85f 	bl	80218e0 <putchar>
 8004822:	4b2e      	ldr	r3, [pc, #184]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4618      	mov	r0, r3
 800482a:	f01c ff71 	bl	8021710 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800482e:	883b      	ldrh	r3, [r7, #0]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d04b      	beq.n	80048d0 <phApp_PrintTagInfo+0x4cc>
    {
        DEBUG_PRINTF("\tTechnology  : ISO 18000p3m3 / EPC Gen2");
 8004838:	482f      	ldr	r0, [pc, #188]	@ (80048f8 <phApp_PrintTagInfo+0x4f4>)
 800483a:	f01d f83f 	bl	80218bc <iprintf>
 800483e:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4618      	mov	r0, r3
 8004846:	f01c ff63 	bl	8021710 <fflush>
        /* Loop through all the 18000p3m3 tags detected and print the UII */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e031      	b.n	80048b4 <phApp_PrintTagInfo+0x4b0>
        {
            DEBUG_PRINTF("\n\t\tCard: %d",bIndex + 1);
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	3301      	adds	r3, #1
 8004854:	4619      	mov	r1, r3
 8004856:	4820      	ldr	r0, [pc, #128]	@ (80048d8 <phApp_PrintTagInfo+0x4d4>)
 8004858:	f01d f830 	bl	80218bc <iprintf>
 800485c:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f01c ff54 	bl	8021710 <fflush>
            DEBUG_PRINTF("\n\t\tUII :");
 8004868:	4824      	ldr	r0, [pc, #144]	@ (80048fc <phApp_PrintTagInfo+0x4f8>)
 800486a:	f01d f827 	bl	80218bc <iprintf>
 800486e:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f01c ff4b 	bl	8021710 <fflush>
            phApp_Print_Buff(
                pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].aUii,
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	33e8      	adds	r3, #232	@ 0xe8
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	f103 0008 	add.w	r0, r3, #8
                (pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].wUiiLength / 8));
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 80048a0:	881b      	ldrh	r3, [r3, #0]
            phApp_Print_Buff(
 80048a2:	08db      	lsrs	r3, r3, #3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7ff fd83 	bl	80043b4 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	3301      	adds	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	887a      	ldrh	r2, [r7, #2]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d8c8      	bhi.n	8004850 <phApp_PrintTagInfo+0x44c>
        }
        DEBUG_PRINTF("\n");
 80048be:	200a      	movs	r0, #10
 80048c0:	f01d f80e 	bl	80218e0 <putchar>
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <phApp_PrintTagInfo+0x4d8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f01c ff20 	bl	8021710 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	08024af4 	.word	0x08024af4
 80048dc:	20000084 	.word	0x20000084
 80048e0:	08024ac4 	.word	0x08024ac4
 80048e4:	08024b2c 	.word	0x08024b2c
 80048e8:	08024b90 	.word	0x08024b90
 80048ec:	08024ba4 	.word	0x08024ba4
 80048f0:	08024bb8 	.word	0x08024bb8
 80048f4:	08024bcc 	.word	0x08024bcc
 80048f8:	08024bf4 	.word	0x08024bf4
 80048fc:	08024c1c 	.word	0x08024c1c

08004900 <phApp_CPU_Init>:
* This function will initialize Host Controller interfaced with NXP Reader IC's.
* Any initialization which is not generic across Platforms, should be done here.
* Note: For NXP NFC Controllers HOST initialization is not required.
*/
void phApp_CPU_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
	DEBUG_PRINTF("STM32 CPU already initialized\r\n");
 8004904:	4805      	ldr	r0, [pc, #20]	@ (800491c <phApp_CPU_Init+0x1c>)
 8004906:	f01d f849 	bl	802199c <puts>
 800490a:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <phApp_CPU_Init+0x20>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f01c fefd 	bl	8021710 <fflush>
    }
#else
    /* In case of LPC series, startup file takes care of initializing clock and ports.
     * No initialization is required in Linux environment. */
#endif
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	08024fb8 	.word	0x08024fb8
 8004920:	20000084 	.word	0x20000084

08004924 <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 800492c:	2300      	movs	r3, #0
 800492e:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60bb      	str	r3, [r7, #8]
#endif /* NXPBUILD__PHLN_LLCP_SW */

#ifdef NXPBUILD__PHAC_DISCLOOP_SW
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW)
    /* Assign the GI for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4a11      	ldr	r2, [pc, #68]	@ (800497c <phApp_Comp_Init+0x58>)
 8004938:	675a      	str	r2, [r3, #116]	@ 0x74
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.bGiLength = bLLCPGBLength;
 800493a:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <phApp_Comp_Init+0x5c>)
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    /* Assign the GI for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a0d      	ldr	r2, [pc, #52]	@ (800497c <phApp_Comp_Init+0x58>)
 8004948:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.bGiLength = bLLCPGBLength;
 800494c:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <phApp_Comp_Init+0x5c>)
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    /* Assign ATR response for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pAtrRes   = aResponseHolder;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <phApp_Comp_Init+0x60>)
 800495a:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) ||  defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <phApp_Comp_Init+0x60>)
 8004960:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <phApp_Comp_Init+0x60>)
 8004968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 800496c:	89fb      	ldrh	r3, [r7, #14]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000038 	.word	0x20000038
 8004980:	2000005c 	.word	0x2000005c
 8004984:	2000089c 	.word	0x2000089c

08004988 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
#ifdef PH_PLATFORM_HAS_ICFRONTEND
    // 如果不是Linux平台并且芯片不是PN5190，配置IRQ引脚
#if !(defined(PH_OSAL_LINUX) && defined(NXPBUILD__PHHAL_HW_PN5190))
    phDriver_Pin_Config_t pinCfg;

    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;		// 输出低电平
 800498e:	2300      	movs	r3, #0
 8004990:	717b      	strb	r3, [r7, #5]
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;	// 上拉
 8004992:	2301      	movs	r3, #1
 8004994:	713b      	strb	r3, [r7, #4]
    pinCfg.eInterruptConfig = PIN_IRQ_TRIGGER_TYPE;	// 下降沿触发
 8004996:	2304      	movs	r3, #4
 8004998:	71bb      	strb	r3, [r7, #6]

    phDriver_PinConfig(PHDRIVER_PIN_IRQ, PH_DRIVER_PINFUNC_INTERRUPT, &pinCfg);
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	2204      	movs	r2, #4
 800499e:	2110      	movs	r1, #16
 80049a0:	4803      	ldr	r0, [pc, #12]	@ (80049b0 <phApp_Configure_IRQ+0x28>)
 80049a2:	f016 fd17 	bl	801b3d4 <phDriver_PinConfig>
#endif /* PHDRIVER_KINETIS_K82 */

#endif /* #ifdef PH_PLATFORM_HAS_ICFRONTEND */

    // 可能不配置IRQ，直接返回
    return PH_ERR_SUCCESS;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	48000400 	.word	0x48000400

080049b4 <phApp_HALConfigAutoColl>:
*******************************************************************************/
/**
* This function will initialize Hal Target Config
*/
phStatus_t phApp_HALConfigAutoColl(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	@ 0x28
 80049b8:	af02      	add	r7, sp, #8
#ifdef NXPBUILD__PHHAL_HW_TARGET
    phStatus_t wStatus;
    uint8_t baDynamicUidConfig[1U] = { 1U };
 80049ba:	2301      	movs	r3, #1
 80049bc:	773b      	strb	r3, [r7, #28]
    uint8_t baReadEepromConfig[24U] = { 0U };
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
 80049cc:	615a      	str	r2, [r3, #20]

    /* Read Set Listen Parameters data from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 80049ce:	4b54      	ldr	r3, [pc, #336]	@ (8004b20 <phApp_HALConfigAutoColl+0x16c>)
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	1d3a      	adds	r2, r7, #4
 80049d4:	2318      	movs	r3, #24
 80049d6:	2140      	movs	r1, #64	@ 0x40
 80049d8:	f00e f98c 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 80049dc:	4603      	mov	r3, r0
 80049de:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR,
        baReadEepromConfig,
        24U
        );
    CHECK_SUCCESS(wStatus);
 80049e0:	8bfb      	ldrh	r3, [r7, #30]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <phApp_HALConfigAutoColl+0x4e>
 80049e6:	8bfb      	ldrh	r3, [r7, #30]
 80049e8:	461a      	mov	r2, r3
 80049ea:	2152      	movs	r1, #82	@ 0x52
 80049ec:	484d      	ldr	r0, [pc, #308]	@ (8004b24 <phApp_HALConfigAutoColl+0x170>)
 80049ee:	f01c ff65 	bl	80218bc <iprintf>
 80049f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004b28 <phApp_HALConfigAutoColl+0x174>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f01c fe89 	bl	8021710 <fflush>
 80049fe:	8bfb      	ldrh	r3, [r7, #30]
 8004a00:	e08a      	b.n	8004b18 <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and configure Set Listen Parameters if EEPROM data is not correct. */
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	2202      	movs	r2, #2
 8004a06:	4949      	ldr	r1, [pc, #292]	@ (8004b2c <phApp_HALConfigAutoColl+0x178>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f01d f8c9 	bl	8021ba0 <memcmp>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11a      	bne.n	8004a4a <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	3302      	adds	r3, #2
 8004a18:	2203      	movs	r2, #3
 8004a1a:	4945      	ldr	r1, [pc, #276]	@ (8004b30 <phApp_HALConfigAutoColl+0x17c>)
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f01d f8bf 	bl	8021ba0 <memcmp>
 8004a22:	4603      	mov	r3, r0
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d110      	bne.n	8004a4a <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	3305      	adds	r3, #5
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <phApp_HALConfigAutoColl+0x180>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d109      	bne.n	8004a4a <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[6U], poll_res, 18U) != 0x00))
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	3306      	adds	r3, #6
 8004a3a:	2212      	movs	r2, #18
 8004a3c:	493e      	ldr	r1, [pc, #248]	@ (8004b38 <phApp_HALConfigAutoColl+0x184>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f01d f8ae 	bl	8021ba0 <memcmp>
 8004a44:	4603      	mov	r3, r0
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d020      	beq.n	8004a8c <phApp_HALConfigAutoColl+0xd8>
    {
        /* Configure Set Listen Parameters. */
        wStatus = phhalHw_Pn5180_SetListenParameters(
 8004a4a:	4b35      	ldr	r3, [pc, #212]	@ (8004b20 <phApp_HALConfigAutoColl+0x16c>)
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <phApp_HALConfigAutoColl+0x180>)
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	4b3a      	ldr	r3, [pc, #232]	@ (8004b3c <phApp_HALConfigAutoColl+0x188>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <phApp_HALConfigAutoColl+0x184>)
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	4a34      	ldr	r2, [pc, #208]	@ (8004b30 <phApp_HALConfigAutoColl+0x17c>)
 8004a60:	4932      	ldr	r1, [pc, #200]	@ (8004b2c <phApp_HALConfigAutoColl+0x178>)
 8004a62:	f00d fab1 	bl	8011fc8 <phhalHw_Pn5180_SetListenParameters>
 8004a66:	4603      	mov	r3, r0
 8004a68:	83fb      	strh	r3, [r7, #30]
            &nfc_id1[0],
            sel_res,
            &poll_res[0],
            nfc_id3
            );
        CHECK_SUCCESS(wStatus);
 8004a6a:	8bfb      	ldrh	r3, [r7, #30]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <phApp_HALConfigAutoColl+0xd8>
 8004a70:	8bfb      	ldrh	r3, [r7, #30]
 8004a72:	461a      	mov	r2, r3
 8004a74:	2163      	movs	r1, #99	@ 0x63
 8004a76:	482b      	ldr	r0, [pc, #172]	@ (8004b24 <phApp_HALConfigAutoColl+0x170>)
 8004a78:	f01c ff20 	bl	80218bc <iprintf>
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b28 <phApp_HALConfigAutoColl+0x174>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f01c fe44 	bl	8021710 <fflush>
 8004a88:	8bfb      	ldrh	r3, [r7, #30]
 8004a8a:	e045      	b.n	8004b18 <phApp_HALConfigAutoColl+0x164>
    }

    if (pHal->wFirmwareVer < 0x308U)
 8004a8c:	4b24      	ldr	r3, [pc, #144]	@ (8004b20 <phApp_HALConfigAutoColl+0x16c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8004a94:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8004a98:	d201      	bcs.n	8004a9e <phApp_HALConfigAutoColl+0xea>
    {
        /* With Pn5180 FW version < 3.8, only static UID is supported. */
        baDynamicUidConfig[0] = 0x00;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	773b      	strb	r3, [r7, #28]
    }

    /* Read Dynamic UID configuration from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 8004a9e:	4b20      	ldr	r3, [pc, #128]	@ (8004b20 <phApp_HALConfigAutoColl+0x16c>)
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	1d3a      	adds	r2, r7, #4
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	2158      	movs	r1, #88	@ 0x58
 8004aa8:	f00e f924 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8004aac:	4603      	mov	r3, r0
 8004aae:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
        baReadEepromConfig,
        1U
        );
    CHECK_SUCCESS(wStatus);
 8004ab0:	8bfb      	ldrh	r3, [r7, #30]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <phApp_HALConfigAutoColl+0x11e>
 8004ab6:	8bfb      	ldrh	r3, [r7, #30]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2173      	movs	r1, #115	@ 0x73
 8004abc:	4819      	ldr	r0, [pc, #100]	@ (8004b24 <phApp_HALConfigAutoColl+0x170>)
 8004abe:	f01c fefd 	bl	80218bc <iprintf>
 8004ac2:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <phApp_HALConfigAutoColl+0x174>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f01c fe21 	bl	8021710 <fflush>
 8004ace:	8bfb      	ldrh	r3, [r7, #30]
 8004ad0:	e022      	b.n	8004b18 <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and perform Dynamic UID configuration if EEPROM data is not correct. */
    if (memcmp(baReadEepromConfig, baDynamicUidConfig, 1U) != 0x00)
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	f107 031c 	add.w	r3, r7, #28
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d01a      	beq.n	8004b16 <phApp_HALConfigAutoColl+0x162>
    {
        /* Configure Dynamic UID */
        wStatus = phhalHw_Pn5180_Instr_WriteE2Prom(
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <phApp_HALConfigAutoColl+0x16c>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f107 021c 	add.w	r2, r7, #28
 8004ae8:	2301      	movs	r3, #1
 8004aea:	2158      	movs	r1, #88	@ 0x58
 8004aec:	f00e f88a 	bl	8012c04 <phhalHw_Pn5180_Instr_WriteE2Prom>
 8004af0:	4603      	mov	r3, r0
 8004af2:	83fb      	strh	r3, [r7, #30]
            (phhalHw_Pn5180_DataParams_t *) pHal,
            PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
            baDynamicUidConfig,
            1U
            );
        CHECK_SUCCESS(wStatus);
 8004af4:	8bfb      	ldrh	r3, [r7, #30]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <phApp_HALConfigAutoColl+0x162>
 8004afa:	8bfb      	ldrh	r3, [r7, #30]
 8004afc:	461a      	mov	r2, r3
 8004afe:	217f      	movs	r1, #127	@ 0x7f
 8004b00:	4808      	ldr	r0, [pc, #32]	@ (8004b24 <phApp_HALConfigAutoColl+0x170>)
 8004b02:	f01c fedb 	bl	80218bc <iprintf>
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <phApp_HALConfigAutoColl+0x174>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f01c fdff 	bl	8021710 <fflush>
 8004b12:	8bfb      	ldrh	r3, [r7, #30]
 8004b14:	e000      	b.n	8004b18 <phApp_HALConfigAutoColl+0x164>
    }
#endif /* NXPBUILD__PHHAL_HW_TARGET */
    return PH_ERR_SUCCESS;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	200008e0 	.word	0x200008e0
 8004b24:	08024fd8 	.word	0x08024fd8
 8004b28:	20000084 	.word	0x20000084
 8004b2c:	20000004 	.word	0x20000004
 8004b30:	20000008 	.word	0x20000008
 8004b34:	2000000b 	.word	0x2000000b
 8004b38:	20000010 	.word	0x20000010
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d002      	beq.n	8004b5a <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8004b54:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8004b58:	e01b      	b.n	8004b92 <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <phCryptoRng_Sw_Init+0x24>
 8004b60:	2321      	movs	r3, #33	@ 0x21
 8004b62:	e016      	b.n	8004b92 <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <phCryptoRng_Sw_Init+0x2e>
 8004b6a:	2321      	movs	r3, #33	@ 0x21
 8004b6c:	e011      	b.n	8004b92 <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f24e 4201 	movw	r2, #58369	@ 0xe401
 8004b74:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	2210      	movs	r2, #16
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f01d f835 	bl	8021bf4 <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8004b9c:	b5b0      	push	{r4, r5, r7, lr}
 8004b9e:	b092      	sub	sp, #72	@ 0x48
 8004ba0:	af04      	add	r7, sp, #16
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d90e      	bls.n	8004bce <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f107 0414 	add.w	r4, r7, #20
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	6828      	ldr	r0, [r5, #0]
 8004bba:	6869      	ldr	r1, [r5, #4]
 8004bbc:	68aa      	ldr	r2, [r5, #8]
 8004bbe:	68eb      	ldr	r3, [r5, #12]
 8004bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bc2:	6928      	ldr	r0, [r5, #16]
 8004bc4:	6969      	ldr	r1, [r5, #20]
 8004bc6:	69aa      	ldr	r2, [r5, #24]
 8004bc8:	69eb      	ldr	r3, [r5, #28]
 8004bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bcc:	e006      	b.n	8004bdc <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 8004bce:	79fa      	ldrb	r2, [r7, #7]
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f01d f8a1 	bl	8021d1e <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	7f1b      	ldrb	r3, [r3, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10f      	bne.n	8004c04 <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 8004be4:	f107 0114 	add.w	r1, r7, #20
 8004be8:	2300      	movs	r3, #0
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	2300      	movs	r3, #0
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f8a9 	bl	8004d50 <phCryptoRng_Sw_Instantiate>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c02:	e00a      	b.n	8004c1a <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 8004c04:	f107 0114 	add.w	r1, r7, #20
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2220      	movs	r2, #32
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f914 	bl	8004e3e <phCryptoRng_Sw_Reseed>
 8004c16:	4603      	mov	r3, r0
 8004c18:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 8004c1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <phCryptoRng_Sw_Seed+0x9c>
 8004c20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <phCryptoRng_Sw_Seed+0x9c>
 8004c2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	4b04      	ldr	r3, [pc, #16]	@ (8004c44 <phCryptoRng_Sw_Seed+0xa8>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	e000      	b.n	8004c3a <phCryptoRng_Sw_Seed+0x9e>
 8004c38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3738      	adds	r7, #56	@ 0x38
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bdb0      	pop	{r4, r5, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	ffffe400 	.word	0xffffe400

08004c48 <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	@ 0x28
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9fa 	bl	800504c <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6858      	ldr	r0, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f103 0208 	add.w	r2, r3, #8
 8004c62:	f107 030c 	add.w	r3, r7, #12
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2310      	movs	r3, #16
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	f002 ff4e 	bl	8007b0c <phCryptoSym_Encrypt>
 8004c70:	4603      	mov	r3, r0
 8004c72:	83bb      	strh	r3, [r7, #28]
 8004c74:	8bbb      	ldrh	r3, [r7, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <phCryptoRng_Sw_Update+0x36>
 8004c7a:	8bbb      	ldrh	r3, [r7, #28]
 8004c7c:	e064      	b.n	8004d48 <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d018      	beq.n	8004cb6 <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8004c84:	2300      	movs	r3, #0
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e012      	b.n	8004cb0 <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	3320      	adds	r3, #32
 8004c8e:	443b      	add	r3, r7
 8004c90:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
 8004c9e:	404a      	eors	r2, r1
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	3320      	adds	r3, #32
 8004ca4:	443b      	add	r3, r7
 8004ca6:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
 8004cac:	3301      	adds	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	7ffb      	ldrb	r3, [r7, #31]
 8004cb2:	2b0f      	cmp	r3, #15
 8004cb4:	d9e9      	bls.n	8004c8a <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9c8 	bl	800504c <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6858      	ldr	r0, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f103 0208 	add.w	r2, r3, #8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2310      	movs	r3, #16
 8004cce:	2100      	movs	r1, #0
 8004cd0:	f002 ff1c 	bl	8007b0c <phCryptoSym_Encrypt>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	83bb      	strh	r3, [r7, #28]
 8004cd8:	8bbb      	ldrh	r3, [r7, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <phCryptoRng_Sw_Update+0x9a>
 8004cde:	8bbb      	ldrh	r3, [r7, #28]
 8004ce0:	e032      	b.n	8004d48 <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d018      	beq.n	8004d1a <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e012      	b.n	8004d14 <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 8004cee:	7ffb      	ldrb	r3, [r7, #31]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	7a19      	ldrb	r1, [r3, #8]
 8004cf6:	7ffb      	ldrb	r3, [r7, #31]
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	404a      	eors	r2, r1
 8004d04:	b2d1      	uxtb	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
 8004d10:	3301      	adds	r3, #1
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d9e9      	bls.n	8004cee <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f107 010c 	add.w	r1, r7, #12
 8004d22:	2200      	movs	r2, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 ffb6 	bl	8007c96 <phCryptoSym_LoadKeyDirect>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	83bb      	strh	r3, [r7, #28]
 8004d2e:	8bbb      	ldrh	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <phCryptoRng_Sw_Update+0xf0>
 8004d34:	8bbb      	ldrh	r3, [r7, #28]
 8004d36:	e007      	b.n	8004d48 <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f01c ff57 	bl	8021bf4 <memset>
    return PH_ERR_SUCCESS;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	@ 0x38
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004d6c:	441a      	add	r2, r3
 8004d6e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004d72:	4413      	add	r3, r2
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d002      	beq.n	8004d7e <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8004d78:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8004d7c:	e05b      	b.n	8004e36 <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f01c ffc9 	bl	8021d1e <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	f107 0214 	add.w	r2, r7, #20
 8004d92:	4413      	add	r3, r2
 8004d94:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f01c ffbf 	bl	8021d1e <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004da6:	4413      	add	r3, r2
 8004da8:	f107 0214 	add.w	r2, r7, #20
 8004dac:	4413      	add	r3, r2
 8004dae:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8004db2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004db4:	4618      	mov	r0, r3
 8004db6:	f01c ffb2 	bl	8021d1e <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f88f 	bl	8004ee4 <phCryptoRng_Sw_BlockCipherDf>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <phCryptoRng_Sw_Instantiate+0x84>
 8004dd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004dd2:	e030      	b.n	8004e36 <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2210      	movs	r2, #16
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f01c ff09 	bl	8021bf4 <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6858      	ldr	r0, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3308      	adds	r3, #8
 8004dea:	2200      	movs	r2, #0
 8004dec:	4619      	mov	r1, r3
 8004dee:	f002 ff52 	bl	8007c96 <phCryptoSym_LoadKeyDirect>
 8004df2:	4603      	mov	r3, r0
 8004df4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004df6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <phCryptoRng_Sw_Instantiate+0xb0>
 8004dfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004dfe:	e01a      	b.n	8004e36 <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4619      	mov	r1, r3
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ff1e 	bl	8004c48 <phCryptoRng_Sw_Update>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004e10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <phCryptoRng_Sw_Instantiate+0xca>
 8004e16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e18:	e00d      	b.n	8004e36 <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f01c fee0 	bl	8021bf4 <memset>

    return PH_ERR_SUCCESS;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3738      	adds	r7, #56	@ 0x38
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08e      	sub	sp, #56	@ 0x38
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	7f1b      	ldrb	r3, [r3, #28]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d002      	beq.n	8004e5c <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 8004e56:	f24e 4325 	movw	r3, #58405	@ 0xe425
 8004e5a:	e03e      	b.n	8004eda <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004e62:	4413      	add	r3, r2
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d002      	beq.n	8004e6e <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8004e68:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8004e6c:	e035      	b.n	8004eda <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f01c ff51 	bl	8021d1e <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	f107 0214 	add.w	r2, r7, #20
 8004e82:	4413      	add	r3, r2
 8004e84:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f01c ff47 	bl	8021d1e <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	4619      	mov	r1, r3
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f824 	bl	8004ee4 <phCryptoRng_Sw_BlockCipherDf>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004ea0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <phCryptoRng_Sw_Reseed+0x6c>
 8004ea6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ea8:	e017      	b.n	8004eda <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	4619      	mov	r1, r3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fec9 	bl	8004c48 <phCryptoRng_Sw_Update>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004eba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <phCryptoRng_Sw_Reseed+0x86>
 8004ec0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ec2:	e00a      	b.n	8004eda <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	2220      	movs	r2, #32
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f01c fe8e 	bl	8021bf4 <memset>

    return PH_ERR_SUCCESS;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3738      	adds	r7, #56	@ 0x38
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b096      	sub	sp, #88	@ 0x58
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4954      	ldr	r1, [pc, #336]	@ (8005048 <phCryptoRng_Sw_BlockCipherDf+0x164>)
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f002 fecd 	bl	8007c96 <phCryptoSym_LoadKeyDirect>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004f02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <phCryptoRng_Sw_BlockCipherDf+0x2c>
 8004f0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f0e:	e097      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 8004f10:	f107 030c 	add.w	r3, r7, #12
 8004f14:	2240      	movs	r2, #64	@ 0x40
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f01c fe6b 	bl	8021bf4 <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 8004f1e:	2320      	movs	r3, #32
 8004f20:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 8004f22:	2320      	movs	r3, #32
 8004f24:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	2220      	movs	r2, #32
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f01c fef3 	bl	8021d1e <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f107 010c 	add.w	r1, r7, #12
 8004f46:	2210      	movs	r2, #16
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f002 fe6e 	bl	8007c2a <phCryptoSym_LoadIv>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <phCryptoRng_Sw_BlockCipherDf+0x7e>
 8004f5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f60:	e06e      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6858      	ldr	r0, [r3, #4]
 8004f66:	f107 020c 	add.w	r2, r7, #12
 8004f6a:	f107 030b 	add.w	r3, r7, #11
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	2340      	movs	r3, #64	@ 0x40
 8004f76:	2101      	movs	r1, #1
 8004f78:	f002 fe0a 	bl	8007b90 <phCryptoSym_CalculateMac>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <phCryptoRng_Sw_BlockCipherDf+0xac>
 8004f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f8e:	e057      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 8004f90:	2301      	movs	r3, #1
 8004f92:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6858      	ldr	r0, [r3, #4]
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f107 010c 	add.w	r1, r7, #12
 8004fa4:	f107 020b 	add.w	r2, r7, #11
 8004fa8:	9201      	str	r2, [sp, #4]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2340      	movs	r3, #64	@ 0x40
 8004fae:	460a      	mov	r2, r1
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	f002 fded 	bl	8007b90 <phCryptoSym_CalculateMac>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004fbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <phCryptoRng_Sw_BlockCipherDf+0xe6>
 8004fc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fc8:	e03a      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f002 fe5f 	bl	8007c96 <phCryptoSym_LoadKeyDirect>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <phCryptoRng_Sw_BlockCipherDf+0x108>
 8004fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fea:	e029      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6858      	ldr	r0, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f103 0210 	add.w	r2, r3, #16
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f002 fd85 	bl	8007b0c <phCryptoSym_Encrypt>
 8005002:	4603      	mov	r3, r0
 8005004:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005008:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <phCryptoRng_Sw_BlockCipherDf+0x132>
 8005010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005014:	e014      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6858      	ldr	r0, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	3310      	adds	r3, #16
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2310      	movs	r3, #16
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	2100      	movs	r1, #0
 8005026:	f002 fd71 	bl	8007b0c <phCryptoSym_Encrypt>
 800502a:	4603      	mov	r3, r0
 800502c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005030:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8005038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800503c:	e000      	b.n	8005040 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3750      	adds	r7, #80	@ 0x50
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08025180 	.word	0x08025180

0800504c <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	e018      	b.n	800508c <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	7a1b      	ldrb	r3, [r3, #8]
 8005062:	2bff      	cmp	r3, #255	@ 0xff
 8005064:	d00a      	beq.n	800507c <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	441a      	add	r2, r3
 800506c:	7a12      	ldrb	r2, [r2, #8]
 800506e:	3201      	adds	r2, #1
 8005070:	b2d1      	uxtb	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	460a      	mov	r2, r1
 8005078:	721a      	strb	r2, [r3, #8]
            break;
 800507a:	e00b      	b.n	8005094 <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	3301      	adds	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d9e3      	bls.n	800505a <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <phCryptoRng_Seed+0x1a>
 80050b4:	f24e 4320 	movw	r3, #58400	@ 0xe420
 80050b8:	e027      	b.n	800510a <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <phCryptoRng_Seed+0x2c>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <phCryptoRng_Seed+0x2c>
 80050c6:	f24e 4321 	movw	r3, #58401	@ 0xe421
 80050ca:	e01e      	b.n	800510a <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80050d4:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 80050d8:	d004      	beq.n	80050e4 <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 80050da:	f24e 4320 	movw	r3, #58400	@ 0xe420
 80050de:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80050e0:	8afb      	ldrh	r3, [r7, #22]
 80050e2:	e012      	b.n	800510a <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d108      	bne.n	8005100 <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	461a      	mov	r2, r3
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fd51 	bl	8004b9c <phCryptoRng_Sw_Seed>
 80050fa:	4603      	mov	r3, r0
 80050fc:	82fb      	strh	r3, [r7, #22]
            break;
 80050fe:	e003      	b.n	8005108 <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8005100:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8005104:	82fb      	strh	r3, [r7, #22]
            break;
 8005106:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8005108:	8afb      	ldrh	r3, [r7, #22]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	460b      	mov	r3, r1
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 8005124:	897b      	ldrh	r3, [r7, #10]
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d002      	beq.n	8005130 <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800512a:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800512e:	e016      	b.n	800515e <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <phCryptoSym_Sw_Init+0x28>
 8005136:	2321      	movs	r3, #33	@ 0x21
 8005138:	e011      	b.n	800515e <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8005140:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f80c 	bl	8005166 <phCryptoSym_Sw_InvalidateKey>
 800514e:	4603      	mov	r3, r0
 8005150:	82fb      	strh	r3, [r7, #22]
 8005152:	8afb      	ldrh	r3, [r7, #22]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <phCryptoSym_Sw_Init+0x4a>
 8005158:	8afb      	ldrh	r3, [r7, #22]
 800515a:	e000      	b.n	800515e <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3308      	adds	r3, #8
 8005172:	2220      	movs	r2, #32
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f01c fd3c 	bl	8021bf4 <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3328      	adds	r3, #40	@ 0x28
 8005180:	2210      	movs	r2, #16
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f01c fd35 	bl	8021bf4 <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005190:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	461a      	mov	r2, r3
 80051b4:	460b      	mov	r3, r1
 80051b6:	817b      	strh	r3, [r7, #10]
 80051b8:	4613      	mov	r3, r2
 80051ba:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	461a      	mov	r2, r3
 80051d6:	2102      	movs	r1, #2
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fb13 	bl	8005804 <phCryptoSym_Sw_GetConfig>
 80051de:	4603      	mov	r3, r0
 80051e0:	82fb      	strh	r3, [r7, #22]
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <phCryptoSym_Sw_Encrypt+0x44>
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	e097      	b.n	800531c <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 80051ec:	8aba      	ldrh	r2, [r7, #20]
 80051ee:	893b      	ldrh	r3, [r7, #8]
 80051f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80051f4:	fb01 f202 	mul.w	r2, r1, r2
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005200:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005204:	e08a      	b.n	800531c <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3328      	adds	r3, #40	@ 0x28
 800520a:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8005210:	e070      	b.n	80052f4 <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	429a      	cmp	r2, r3
 8005218:	d009      	beq.n	800522e <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 800521a:	8bfb      	ldrh	r3, [r7, #30]
 800521c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800521e:	18d0      	adds	r0, r2, r3
 8005220:	8bfb      	ldrh	r3, [r7, #30]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	8aba      	ldrh	r2, [r7, #20]
 8005228:	4619      	mov	r1, r3
 800522a:	f01c fd78 	bl	8021d1e <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d027      	beq.n	8005286 <phCryptoSym_Sw_Encrypt+0xde>
 8005236:	2b00      	cmp	r3, #0
 8005238:	db22      	blt.n	8005280 <phCryptoSym_Sw_Encrypt+0xd8>
 800523a:	3b01      	subs	r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d81f      	bhi.n	8005280 <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005240:	2300      	movs	r3, #0
 8005242:	777b      	strb	r3, [r7, #29]
 8005244:	e016      	b.n	8005274 <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 8005246:	7f7a      	ldrb	r2, [r7, #29]
 8005248:	8bfb      	ldrh	r3, [r7, #30]
 800524a:	4413      	add	r3, r2
 800524c:	461a      	mov	r2, r3
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	4413      	add	r3, r2
 8005252:	7819      	ldrb	r1, [r3, #0]
 8005254:	7f7b      	ldrb	r3, [r7, #29]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4413      	add	r3, r2
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	7f78      	ldrb	r0, [r7, #29]
 800525e:	8bfb      	ldrh	r3, [r7, #30]
 8005260:	4403      	add	r3, r0
 8005262:	4618      	mov	r0, r3
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	4403      	add	r3, r0
 8005268:	404a      	eors	r2, r1
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800526e:	7f7b      	ldrb	r3, [r7, #29]
 8005270:	3301      	adds	r3, #1
 8005272:	777b      	strb	r3, [r7, #29]
 8005274:	7f7b      	ldrb	r3, [r7, #29]
 8005276:	b29a      	uxth	r2, r3
 8005278:	8abb      	ldrh	r3, [r7, #20]
 800527a:	429a      	cmp	r2, r3
 800527c:	d3e3      	bcc.n	8005246 <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 800527e:	e003      	b.n	8005288 <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8005280:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8005284:	e04a      	b.n	800531c <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8005286:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8005288:	897b      	ldrh	r3, [r7, #10]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d10d      	bne.n	80052ac <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8005290:	8bfb      	ldrh	r3, [r7, #30]
 8005292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005294:	4413      	add	r3, r2
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f002 fb91 	bl	80079c0 <phCryptoSym_Sw_DecryptBlock>
 800529e:	4603      	mov	r3, r0
 80052a0:	82fb      	strh	r3, [r7, #22]
 80052a2:	8afb      	ldrh	r3, [r7, #22]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <phCryptoSym_Sw_Encrypt+0x120>
 80052a8:	8afb      	ldrh	r3, [r7, #22]
 80052aa:	e037      	b.n	800531c <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 80052ac:	8bfb      	ldrh	r3, [r7, #30]
 80052ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b0:	4413      	add	r3, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f002 fadd 	bl	8007874 <phCryptoSym_Sw_EncryptBlock>
 80052ba:	4603      	mov	r3, r0
 80052bc:	82fb      	strh	r3, [r7, #22]
 80052be:	8afb      	ldrh	r3, [r7, #22]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <phCryptoSym_Sw_Encrypt+0x120>
 80052c4:	8afb      	ldrh	r3, [r7, #22]
 80052c6:	e029      	b.n	800531c <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 80052c8:	897b      	ldrh	r3, [r7, #10]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <phCryptoSym_Sw_Encrypt+0x142>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	db07      	blt.n	80052e4 <phCryptoSym_Sw_Encrypt+0x13c>
 80052d4:	3b01      	subs	r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d804      	bhi.n	80052e4 <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052de:	4413      	add	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
                break;
 80052e2:	e003      	b.n	80052ec <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80052e4:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80052e8:	e018      	b.n	800531c <phCryptoSym_Sw_Encrypt+0x174>
                break;
 80052ea:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 80052ec:	8aba      	ldrh	r2, [r7, #20]
 80052ee:	8bfb      	ldrh	r3, [r7, #30]
 80052f0:	4413      	add	r3, r2
 80052f2:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 80052f4:	8bfa      	ldrh	r2, [r7, #30]
 80052f6:	893b      	ldrh	r3, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d38a      	bcc.n	8005212 <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005300:	2b01      	cmp	r3, #1
 8005302:	d003      	beq.n	800530c <phCryptoSym_Sw_Encrypt+0x164>
 8005304:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005308:	2b00      	cmp	r3, #0
 800530a:	da06      	bge.n	800531a <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3328      	adds	r3, #40	@ 0x28
 8005310:	8aba      	ldrh	r2, [r7, #20]
 8005312:	69b9      	ldr	r1, [r7, #24]
 8005314:	4618      	mov	r0, r3
 8005316:	f01c fd02 	bl	8021d1e <memcpy>
    }

    return PH_ERR_SUCCESS;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b094      	sub	sp, #80	@ 0x50
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	461a      	mov	r2, r3
 8005330:	460b      	mov	r3, r1
 8005332:	817b      	strh	r3, [r7, #10]
 8005334:	4613      	mov	r3, r2
 8005336:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 800535a:	f107 0320 	add.w	r3, r7, #32
 800535e:	2210      	movs	r2, #16
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f01c fc46 	bl	8021bf4 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8005368:	f107 0310 	add.w	r3, r7, #16
 800536c:	2210      	movs	r2, #16
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f01c fc3f 	bl	8021bf4 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 8005376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 800537c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005380:	2210      	movs	r2, #16
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f01c fc35 	bl	8021bf4 <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800538a:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800538e:	461a      	mov	r2, r3
 8005390:	2102      	movs	r1, #2
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa36 	bl	8005804 <phCryptoSym_Sw_GetConfig>
 8005398:	4603      	mov	r3, r0
 800539a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800539e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <phCryptoSym_Sw_CalculateMac+0x88>
 80053a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053aa:	e175      	b.n	8005698 <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 80053ac:	897b      	ldrh	r3, [r7, #10]
 80053ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10b      	bne.n	80053ce <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d007      	beq.n	80053ce <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3328      	adds	r3, #40	@ 0x28
 80053c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f01c fc13 	bl	8021bf4 <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 80053ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da0e      	bge.n	80053f4 <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 80053d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80053e0:	fb01 f202 	mul.w	r2, r1, r2
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80ac 	beq.w	8005546 <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80053ee:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80053f2:	e151      	b.n	8005698 <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 80053f4:	897b      	ldrh	r3, [r7, #10]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <phCryptoSym_Sw_CalculateMac+0xde>
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d015      	beq.n	800542c <phCryptoSym_Sw_CalculateMac+0x108>
 8005400:	e011      	b.n	8005426 <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 8005402:	f107 0210 	add.w	r2, r7, #16
 8005406:	f107 0320 	add.w	r3, r7, #32
 800540a:	4619      	mov	r1, r3
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f002 f987 	bl	8007720 <phCryptoSym_Sw_CMAC_GenerateK1K2>
 8005412:	4603      	mov	r3, r0
 8005414:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005418:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <phCryptoSym_Sw_CalculateMac+0x10c>
 8005420:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005424:	e138      	b.n	8005698 <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8005426:	f24e 1323 	movw	r3, #57635	@ 0xe123
 800542a:	e135      	b.n	8005698 <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 800542c:	bf00      	nop
 800542e:	e000      	b.n	8005432 <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 8005430:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 8005432:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	fbb3 f1f2 	udiv	r1, r3, r2
 800543c:	fb01 f202 	mul.w	r2, r1, r2
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	b29b      	uxth	r3, r3
 8005444:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 8005448:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <phCryptoSym_Sw_CalculateMac+0x132>
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d13f      	bne.n	80054d6 <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 8005456:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800545a:	b29b      	uxth	r3, r3
 800545c:	893a      	ldrh	r2, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 8005462:	893b      	ldrh	r3, [r7, #8]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	18d1      	adds	r1, r2, r3
 8005468:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800546c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005470:	4618      	mov	r0, r3
 8005472:	f01c fc54 	bl	8021d1e <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 8005476:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800547a:	3350      	adds	r3, #80	@ 0x50
 800547c:	443b      	add	r3, r7
 800547e:	2280      	movs	r2, #128	@ 0x80
 8005480:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8005484:	897b      	ldrh	r3, [r7, #10]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d15c      	bne.n	8005546 <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800548c:	2300      	movs	r3, #0
 800548e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005492:	e018      	b.n	80054c6 <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 8005494:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005498:	3350      	adds	r3, #80	@ 0x50
 800549a:	443b      	add	r3, r7
 800549c:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80054a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054a4:	3350      	adds	r3, #80	@ 0x50
 80054a6:	443b      	add	r3, r7
 80054a8:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 80054ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054b0:	404a      	eors	r2, r1
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	3350      	adds	r3, #80	@ 0x50
 80054b6:	443b      	add	r3, r7
 80054b8:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80054bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054c0:	3301      	adds	r3, #1
 80054c2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80054c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d3df      	bcc.n	8005494 <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 80054d4:	e037      	b.n	8005546 <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 80054d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054da:	893a      	ldrh	r2, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 80054e0:	893b      	ldrh	r3, [r7, #8]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	18d1      	adds	r1, r2, r3
 80054e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054ea:	461a      	mov	r2, r3
 80054ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80054f0:	4618      	mov	r0, r3
 80054f2:	f01c fc14 	bl	8021d1e <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d123      	bne.n	8005546 <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005504:	e018      	b.n	8005538 <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 8005506:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800550a:	3350      	adds	r3, #80	@ 0x50
 800550c:	443b      	add	r3, r7
 800550e:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8005512:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005516:	3350      	adds	r3, #80	@ 0x50
 8005518:	443b      	add	r3, r7
 800551a:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 800551e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005522:	404a      	eors	r2, r1
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	3350      	adds	r3, #80	@ 0x50
 8005528:	443b      	add	r3, r7
 800552a:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800552e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005532:	3301      	adds	r3, #1
 8005534:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005538:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800553c:	b29a      	uxth	r2, r3
 800553e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005542:	429a      	cmp	r2, r3
 8005544:	d3df      	bcc.n	8005506 <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3328      	adds	r3, #40	@ 0x28
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8005552:	e03b      	b.n	80055cc <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005554:	2300      	movs	r3, #0
 8005556:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800555a:	e019      	b.n	8005590 <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 800555c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005562:	4413      	add	r3, r2
 8005564:	7819      	ldrb	r1, [r3, #0]
 8005566:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800556a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800556e:	4413      	add	r3, r2
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	781a      	ldrb	r2, [r3, #0]
 8005578:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800557c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800557e:	4403      	add	r3, r0
 8005580:	404a      	eors	r2, r1
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005586:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800558a:	3301      	adds	r3, #1
 800558c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005590:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005594:	b29a      	uxth	r2, r3
 8005596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800559a:	429a      	cmp	r2, r3
 800559c:	d3de      	bcc.n	800555c <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 800559e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f002 f967 	bl	8007874 <phCryptoSym_Sw_EncryptBlock>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80055ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <phCryptoSym_Sw_CalculateMac+0x296>
 80055b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055b8:	e06e      	b.n	8005698 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 80055ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055bc:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 80055be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80055c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055c6:	4413      	add	r3, r2
 80055c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 80055cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80055d0:	893b      	ldrh	r3, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3be      	bcc.n	8005554 <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 80055d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	db2f      	blt.n	800563e <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80055e4:	e016      	b.n	8005614 <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 80055e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80055ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ec:	4413      	add	r3, r2
 80055ee:	7819      	ldrb	r1, [r3, #0]
 80055f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80055f4:	3350      	adds	r3, #80	@ 0x50
 80055f6:	443b      	add	r3, r7
 80055f8:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80055fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005600:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005602:	4403      	add	r3, r0
 8005604:	404a      	eors	r2, r1
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800560a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800560e:	3301      	adds	r3, #1
 8005610:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005614:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005618:	b29a      	uxth	r2, r3
 800561a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800561e:	429a      	cmp	r2, r3
 8005620:	d3e1      	bcc.n	80055e6 <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8005622:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f002 f925 	bl	8007874 <phCryptoSym_Sw_EncryptBlock>
 800562a:	4603      	mov	r3, r0
 800562c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005630:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <phCryptoSym_Sw_CalculateMac+0x31a>
 8005638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800563c:	e02c      	b.n	8005698 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005642:	2b01      	cmp	r3, #1
 8005644:	d003      	beq.n	800564e <phCryptoSym_Sw_CalculateMac+0x32a>
 8005646:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800564a:	2b00      	cmp	r3, #0
 800564c:	da08      	bge.n	8005660 <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3328      	adds	r3, #40	@ 0x28
 8005652:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005656:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005658:	4618      	mov	r0, r3
 800565a:	f01c fb60 	bl	8021d1e <memcpy>
 800565e:	e007      	b.n	8005670 <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3328      	adds	r3, #40	@ 0x28
 8005664:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f01c fac2 	bl	8021bf4 <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8005670:	f107 0320 	add.w	r3, r7, #32
 8005674:	2210      	movs	r2, #16
 8005676:	2100      	movs	r1, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f01c fabb 	bl	8021bf4 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 800567e:	f107 0310 	add.w	r3, r7, #16
 8005682:	2210      	movs	r2, #16
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f01c fab4 	bl	8021bf4 <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 800568c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005694:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3750      	adds	r7, #80	@ 0x50
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	461a      	mov	r2, r3
 80056bc:	2102      	movs	r1, #2
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f8a0 	bl	8005804 <phCryptoSym_Sw_GetConfig>
 80056c4:	4603      	mov	r3, r0
 80056c6:	82fb      	strh	r3, [r7, #22]
 80056c8:	8afb      	ldrh	r3, [r7, #22]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <phCryptoSym_Sw_LoadIv+0x32>
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	e00f      	b.n	80056f2 <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	8abb      	ldrh	r3, [r7, #20]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d002      	beq.n	80056e2 <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80056dc:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80056e0:	e007      	b.n	80056f2 <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3328      	adds	r3, #40	@ 0x28
 80056e6:	8aba      	ldrh	r2, [r7, #20]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f01c fb17 	bl	8021d1e <memcpy>

    return PH_ERR_SUCCESS;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3308      	adds	r3, #8
 8005712:	2220      	movs	r2, #32
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f01c fa6c 	bl	8021bf4 <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	2b05      	cmp	r3, #5
 8005720:	d859      	bhi.n	80057d6 <phCryptoSym_Sw_LoadKeyDirect+0xda>
 8005722:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005741 	.word	0x08005741
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005775 	.word	0x08005775
 8005734:	0800578f 	.word	0x0800578f
 8005738:	080057a7 	.word	0x080057a7
 800573c:	080057bf 	.word	0x080057bf
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8005740:	232c      	movs	r3, #44	@ 0x2c
 8005742:	2204      	movs	r2, #4
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f8d8 	bl	80058fc <phCryptoSym_Sw_Aes_KeyExpansion>
 800574c:	4603      	mov	r3, r0
 800574e:	82fb      	strh	r3, [r7, #22]
 8005750:	8afb      	ldrh	r3, [r7, #22]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d042      	beq.n	80057dc <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	e04f      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 800575a:	2334      	movs	r3, #52	@ 0x34
 800575c:	2206      	movs	r2, #6
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f8cb 	bl	80058fc <phCryptoSym_Sw_Aes_KeyExpansion>
 8005766:	4603      	mov	r3, r0
 8005768:	82fb      	strh	r3, [r7, #22]
 800576a:	8afb      	ldrh	r3, [r7, #22]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d037      	beq.n	80057e0 <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 8005770:	8afb      	ldrh	r3, [r7, #22]
 8005772:	e042      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8005774:	233c      	movs	r3, #60	@ 0x3c
 8005776:	2208      	movs	r2, #8
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f8be 	bl	80058fc <phCryptoSym_Sw_Aes_KeyExpansion>
 8005780:	4603      	mov	r3, r0
 8005782:	82fb      	strh	r3, [r7, #22]
 8005784:	8afb      	ldrh	r3, [r7, #22]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d02c      	beq.n	80057e4 <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 800578a:	8afb      	ldrh	r3, [r7, #22]
 800578c:	e035      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 800578e:	2201      	movs	r2, #1
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fe62 	bl	800645c <phCryptoSym_Sw_Des_KeyInit>
 8005798:	4603      	mov	r3, r0
 800579a:	82fb      	strh	r3, [r7, #22]
 800579c:	8afb      	ldrh	r3, [r7, #22]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d022      	beq.n	80057e8 <phCryptoSym_Sw_LoadKeyDirect+0xec>
 80057a2:	8afb      	ldrh	r3, [r7, #22]
 80057a4:	e029      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 80057a6:	2202      	movs	r2, #2
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fe56 	bl	800645c <phCryptoSym_Sw_Des_KeyInit>
 80057b0:	4603      	mov	r3, r0
 80057b2:	82fb      	strh	r3, [r7, #22]
 80057b4:	8afb      	ldrh	r3, [r7, #22]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 80057ba:	8afb      	ldrh	r3, [r7, #22]
 80057bc:	e01d      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 80057be:	2203      	movs	r2, #3
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fe4a 	bl	800645c <phCryptoSym_Sw_Des_KeyInit>
 80057c8:	4603      	mov	r3, r0
 80057ca:	82fb      	strh	r3, [r7, #22]
 80057cc:	8afb      	ldrh	r3, [r7, #22]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 80057d2:	8afb      	ldrh	r3, [r7, #22]
 80057d4:	e011      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80057d6:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80057da:	e00e      	b.n	80057fa <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 80057dc:	bf00      	nop
 80057de:	e008      	b.n	80057f2 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80057e0:	bf00      	nop
 80057e2:	e006      	b.n	80057f2 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80057e4:	bf00      	nop
 80057e6:	e004      	b.n	80057f2 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80057f0:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop

08005804 <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	460b      	mov	r3, r1
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	2b06      	cmp	r3, #6
 8005816:	d867      	bhi.n	80058e8 <phCryptoSym_Sw_GetConfig+0xe4>
 8005818:	a201      	add	r2, pc, #4	@ (adr r2, 8005820 <phCryptoSym_Sw_GetConfig+0x1c>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	080058cb 	.word	0x080058cb
 8005824:	0800583d 	.word	0x0800583d
 8005828:	0800589d 	.word	0x0800589d
 800582c:	080058d5 	.word	0x080058d5
 8005830:	080058e9 	.word	0x080058e9
 8005834:	080058e9 	.word	0x080058e9
 8005838:	080058df 	.word	0x080058df
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005840:	2b05      	cmp	r3, #5
 8005842:	d827      	bhi.n	8005894 <phCryptoSym_Sw_GetConfig+0x90>
 8005844:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <phCryptoSym_Sw_GetConfig+0x48>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005865 	.word	0x08005865
 8005850:	0800586d 	.word	0x0800586d
 8005854:	08005875 	.word	0x08005875
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2210      	movs	r2, #16
 8005868:	801a      	strh	r2, [r3, #0]
                    break;
 800586a:	e016      	b.n	800589a <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2218      	movs	r2, #24
 8005870:	801a      	strh	r2, [r3, #0]
                    break;
 8005872:	e012      	b.n	800589a <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	801a      	strh	r2, [r3, #0]
                    break;
 800587a:	e00e      	b.n	800589a <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2208      	movs	r2, #8
 8005880:	801a      	strh	r2, [r3, #0]
                    break;
 8005882:	e00a      	b.n	800589a <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2210      	movs	r2, #16
 8005888:	801a      	strh	r2, [r3, #0]
                    break;
 800588a:	e006      	b.n	800589a <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2218      	movs	r2, #24
 8005890:	801a      	strh	r2, [r3, #0]
                    break;
 8005892:	e002      	b.n	800589a <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005894:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005898:	e02a      	b.n	80058f0 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 800589a:	e028      	b.n	80058ee <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	dc02      	bgt.n	80058aa <phCryptoSym_Sw_GetConfig+0xa6>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	da04      	bge.n	80058b2 <phCryptoSym_Sw_GetConfig+0xae>
 80058a8:	e00b      	b.n	80058c2 <phCryptoSym_Sw_GetConfig+0xbe>
 80058aa:	3b03      	subs	r3, #3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d808      	bhi.n	80058c2 <phCryptoSym_Sw_GetConfig+0xbe>
 80058b0:	e003      	b.n	80058ba <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2210      	movs	r2, #16
 80058b6:	801a      	strh	r2, [r3, #0]
                    break;
 80058b8:	e006      	b.n	80058c8 <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2208      	movs	r2, #8
 80058be:	801a      	strh	r2, [r3, #0]
                    break;
 80058c0:	e002      	b.n	80058c8 <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80058c2:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80058c6:	e013      	b.n	80058f0 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 80058c8:	e011      	b.n	80058ee <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	801a      	strh	r2, [r3, #0]
            break;
 80058d2:	e00c      	b.n	80058ee <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	801a      	strh	r2, [r3, #0]
            break;
 80058dc:	e007      	b.n	80058ee <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	801a      	strh	r2, [r3, #0]
            break;
 80058e6:	e002      	b.n	80058ee <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80058e8:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80058ec:	e000      	b.n	80058f0 <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	460b      	mov	r3, r1
 800590c:	71fb      	strb	r3, [r7, #7]
 800590e:	4613      	mov	r3, r2
 8005910:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f103 0008 	add.w	r0, r3, #8
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	461a      	mov	r2, r3
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	f01c f9fd 	bl	8021d1e <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b090      	sub	sp, #64	@ 0x40
 8005932:	af02      	add	r7, sp, #8
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	4613      	mov	r3, r2
 800593a:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005946:	2b02      	cmp	r3, #2
 8005948:	d00e      	beq.n	8005968 <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 800594a:	2b02      	cmp	r3, #2
 800594c:	dc10      	bgt.n	8005970 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 8005952:	2b01      	cmp	r3, #1
 8005954:	d004      	beq.n	8005960 <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 8005956:	e00b      	b.n	8005970 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800595e:	e00a      	b.n	8005976 <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8005960:	2306      	movs	r3, #6
 8005962:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8005966:	e006      	b.n	8005976 <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800596e:	e002      	b.n	8005976 <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8005970:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8005974:	e04a      	b.n	8005a0c <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f103 0108 	add.w	r1, r3, #8
 800597c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005980:	009a      	lsls	r2, r3, #2
 8005982:	f107 0314 	add.w	r3, r7, #20
 8005986:	4618      	mov	r0, r3
 8005988:	f01c f9c9 	bl	8021d1e <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800598c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005990:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8005994:	f107 0114 	add.w	r1, r7, #20
 8005998:	200f      	movs	r0, #15
 800599a:	9000      	str	r0, [sp, #0]
 800599c:	68b8      	ldr	r0, [r7, #8]
 800599e:	f000 fba9 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80059a8:	e015      	b.n	80059d6 <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 80059aa:	68b8      	ldr	r0, [r7, #8]
 80059ac:	f000 f8c8 	bl	8005b40 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 80059b0:	68b8      	ldr	r0, [r7, #8]
 80059b2:	f000 fa09 	bl	8005dc8 <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80059b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80059ba:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80059be:	f107 0114 	add.w	r1, r7, #20
 80059c2:	200f      	movs	r0, #15
 80059c4:	9000      	str	r0, [sp, #0]
 80059c6:	68b8      	ldr	r0, [r7, #8]
 80059c8:	f000 fb94 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 80059cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059d0:	3301      	adds	r3, #1
 80059d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80059d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3e4      	bcc.n	80059aa <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 80059e0:	68b8      	ldr	r0, [r7, #8]
 80059e2:	f000 f8ad 	bl	8005b40 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80059e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80059ea:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80059ee:	f107 0114 	add.w	r1, r7, #20
 80059f2:	200f      	movs	r0, #15
 80059f4:	9000      	str	r0, [sp, #0]
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f000 fb7c 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	2220      	movs	r2, #32
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f01c f8f5 	bl	8021bf4 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3738      	adds	r7, #56	@ 0x38
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b090      	sub	sp, #64	@ 0x40
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d014      	beq.n	8005a54 <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	dc19      	bgt.n	8005a62 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d007      	beq.n	8005a46 <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 8005a36:	e014      	b.n	8005a62 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 8005a3e:	232b      	movs	r3, #43	@ 0x2b
 8005a40:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8005a44:	e010      	b.n	8005a68 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8005a46:	2306      	movs	r3, #6
 8005a48:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 8005a4c:	2333      	movs	r3, #51	@ 0x33
 8005a4e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8005a52:	e009      	b.n	8005a68 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 8005a5a:	233b      	movs	r3, #59	@ 0x3b
 8005a5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8005a60:	e002      	b.n	8005a68 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8005a62:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8005a66:	e066      	b.n	8005b36 <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f103 0108 	add.w	r1, r3, #8
 8005a6e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005a72:	009a      	lsls	r2, r3, #2
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f01c f950 	bl	8021d1e <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005a8a:	e00f      	b.n	8005aac <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 8005a8c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005a90:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005a94:	f107 0114 	add.w	r1, r7, #20
 8005a98:	2030      	movs	r0, #48	@ 0x30
 8005a9a:	9000      	str	r0, [sp, #0]
 8005a9c:	68b8      	ldr	r0, [r7, #8]
 8005a9e:	f000 fb29 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 8005aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005aac:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d9ea      	bls.n	8005a8c <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8005ab6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005aba:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8005abe:	f107 0114 	add.w	r1, r7, #20
 8005ac2:	20c0      	movs	r0, #192	@ 0xc0
 8005ac4:	9000      	str	r0, [sp, #0]
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f000 fb14 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005ad4:	e015      	b.n	8005b02 <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 8005ad6:	68b8      	ldr	r0, [r7, #8]
 8005ad8:	f000 f8d4 	bl	8005c84 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8005adc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005ae0:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8005ae4:	f107 0114 	add.w	r1, r7, #20
 8005ae8:	20c0      	movs	r0, #192	@ 0xc0
 8005aea:	9000      	str	r0, [sp, #0]
 8005aec:	68b8      	ldr	r0, [r7, #8]
 8005aee:	f000 fb01 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 8005af2:	68b8      	ldr	r0, [r7, #8]
 8005af4:	f000 fa06 	bl	8005f04 <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 8005af8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005afc:	3b01      	subs	r3, #1
 8005afe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005b02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e5      	bne.n	8005ad6 <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	f000 f8ba 	bl	8005c84 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8005b10:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005b14:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8005b18:	f107 0114 	add.w	r1, r7, #20
 8005b1c:	20c0      	movs	r0, #192	@ 0xc0
 8005b1e:	9000      	str	r0, [sp, #0]
 8005b20:	68b8      	ldr	r0, [r7, #8]
 8005b22:	f000 fae7 	bl	80060f4 <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f01c f860 	bl	8021bf4 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3738      	adds	r7, #56	@ 0x38
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005b50:	5c9a      	ldrb	r2, [r3, r2]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4a47      	ldr	r2, [pc, #284]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005b64:	5c52      	ldrb	r2, [r2, r1]
 8005b66:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3308      	adds	r3, #8
 8005b74:	4a42      	ldr	r2, [pc, #264]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005b76:	5c52      	ldrb	r2, [r2, r1]
 8005b78:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	330c      	adds	r3, #12
 8005b86:	4a3e      	ldr	r2, [pc, #248]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005b88:	5c52      	ldrb	r2, [r2, r1]
 8005b8a:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b3a      	ldr	r3, [pc, #232]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005b96:	5c9b      	ldrb	r3, [r3, r2]
 8005b98:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3305      	adds	r3, #5
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a36      	ldr	r2, [pc, #216]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005ba8:	5c52      	ldrb	r2, [r2, r1]
 8005baa:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3309      	adds	r3, #9
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3305      	adds	r3, #5
 8005bb8:	4a31      	ldr	r2, [pc, #196]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005bba:	5c52      	ldrb	r2, [r2, r1]
 8005bbc:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	330d      	adds	r3, #13
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3309      	adds	r3, #9
 8005bca:	4a2d      	ldr	r2, [pc, #180]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005bcc:	5c52      	ldrb	r2, [r2, r1]
 8005bce:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	330d      	adds	r3, #13
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3302      	adds	r3, #2
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	4b27      	ldr	r3, [pc, #156]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005be2:	5c9b      	ldrb	r3, [r3, r2]
 8005be4:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	330a      	adds	r3, #10
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	4619      	mov	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	4a23      	ldr	r2, [pc, #140]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005bf4:	5c52      	ldrb	r2, [r2, r1]
 8005bf6:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	330a      	adds	r3, #10
 8005bfc:	7bfa      	ldrb	r2, [r7, #15]
 8005bfe:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3306      	adds	r3, #6
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b1d      	ldr	r3, [pc, #116]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005c0a:	5c9b      	ldrb	r3, [r3, r2]
 8005c0c:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	330e      	adds	r3, #14
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	4619      	mov	r1, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3306      	adds	r3, #6
 8005c1a:	4a19      	ldr	r2, [pc, #100]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005c1c:	5c52      	ldrb	r2, [r2, r1]
 8005c1e:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	330e      	adds	r3, #14
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	330f      	adds	r3, #15
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005c32:	5c9b      	ldrb	r3, [r3, r2]
 8005c34:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	330b      	adds	r3, #11
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	330f      	adds	r3, #15
 8005c42:	4a0f      	ldr	r2, [pc, #60]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005c44:	5c52      	ldrb	r2, [r2, r1]
 8005c46:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3307      	adds	r3, #7
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	330b      	adds	r3, #11
 8005c54:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005c56:	5c52      	ldrb	r2, [r2, r1]
 8005c58:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3303      	adds	r3, #3
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	4619      	mov	r1, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3307      	adds	r3, #7
 8005c66:	4a06      	ldr	r2, [pc, #24]	@ (8005c80 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8005c68:	5c52      	ldrb	r2, [r2, r1]
 8005c6a:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3303      	adds	r3, #3
 8005c70:	7bfa      	ldrb	r2, [r7, #15]
 8005c72:	701a      	strb	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	08025190 	.word	0x08025190

08005c84 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b4c      	ldr	r3, [pc, #304]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005c94:	5c9a      	ldrb	r2, [r3, r2]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4a47      	ldr	r2, [pc, #284]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005ca8:	5c52      	ldrb	r2, [r2, r1]
 8005caa:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	4a42      	ldr	r2, [pc, #264]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005cba:	5c52      	ldrb	r2, [r2, r1]
 8005cbc:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	4a3e      	ldr	r2, [pc, #248]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005ccc:	5c52      	ldrb	r2, [r2, r1]
 8005cce:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	330d      	adds	r3, #13
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005cda:	5c9b      	ldrb	r3, [r3, r2]
 8005cdc:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3309      	adds	r3, #9
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	330d      	adds	r3, #13
 8005cea:	4a36      	ldr	r2, [pc, #216]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005cec:	5c52      	ldrb	r2, [r2, r1]
 8005cee:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3305      	adds	r3, #5
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3309      	adds	r3, #9
 8005cfc:	4a31      	ldr	r2, [pc, #196]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005cfe:	5c52      	ldrb	r2, [r2, r1]
 8005d00:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3301      	adds	r3, #1
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3305      	adds	r3, #5
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d10:	5c52      	ldrb	r2, [r2, r1]
 8005d12:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3301      	adds	r3, #1
 8005d18:	7bfa      	ldrb	r2, [r7, #15]
 8005d1a:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3302      	adds	r3, #2
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	4b27      	ldr	r3, [pc, #156]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d26:	5c9b      	ldrb	r3, [r3, r2]
 8005d28:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	330a      	adds	r3, #10
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4619      	mov	r1, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3302      	adds	r3, #2
 8005d36:	4a23      	ldr	r2, [pc, #140]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d38:	5c52      	ldrb	r2, [r2, r1]
 8005d3a:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	330a      	adds	r3, #10
 8005d40:	7bfa      	ldrb	r2, [r7, #15]
 8005d42:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3306      	adds	r3, #6
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	330e      	adds	r3, #14
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3306      	adds	r3, #6
 8005d5e:	4a19      	ldr	r2, [pc, #100]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d60:	5c52      	ldrb	r2, [r2, r1]
 8005d62:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	330e      	adds	r3, #14
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3303      	adds	r3, #3
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d76:	5c9b      	ldrb	r3, [r3, r2]
 8005d78:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3303      	adds	r3, #3
 8005d86:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d88:	5c52      	ldrb	r2, [r2, r1]
 8005d8a:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	330b      	adds	r3, #11
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	4619      	mov	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3307      	adds	r3, #7
 8005d98:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005d9a:	5c52      	ldrb	r2, [r2, r1]
 8005d9c:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	330f      	adds	r3, #15
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	330b      	adds	r3, #11
 8005daa:	4a06      	ldr	r2, [pc, #24]	@ (8005dc4 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8005dac:	5c52      	ldrb	r2, [r2, r1]
 8005dae:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	330f      	adds	r3, #15
 8005db4:	7bfa      	ldrb	r2, [r7, #15]
 8005db6:	701a      	strb	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	08025290 	.word	0x08025290

08005dc8 <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
 8005dd4:	e089      	b.n	8005eea <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4b48      	ldr	r3, [pc, #288]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005dde:	5c9a      	ldrb	r2, [r3, r2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3301      	adds	r3, #1
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	4b45      	ldr	r3, [pc, #276]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005dea:	5c59      	ldrb	r1, [r3, r1]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3301      	adds	r3, #1
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	404b      	eors	r3, r1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	4053      	eors	r3, r2
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	4053      	eors	r3, r2
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3303      	adds	r3, #3
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	4053      	eors	r3, r2
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3301      	adds	r3, #1
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4b38      	ldr	r3, [pc, #224]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005e1e:	5c5b      	ldrb	r3, [r3, r1]
 8005e20:	4053      	eors	r3, r2
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3302      	adds	r3, #2
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4b34      	ldr	r3, [pc, #208]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005e2e:	5c59      	ldrb	r1, [r3, r1]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3302      	adds	r3, #2
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	404b      	eors	r3, r1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4053      	eors	r3, r2
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3303      	adds	r3, #3
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4053      	eors	r3, r2
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3301      	adds	r3, #1
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4053      	eors	r3, r2
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4b27      	ldr	r3, [pc, #156]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005e62:	5c5b      	ldrb	r3, [r3, r1]
 8005e64:	4053      	eors	r3, r2
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3303      	adds	r3, #3
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4b23      	ldr	r3, [pc, #140]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005e72:	5c59      	ldrb	r1, [r3, r1]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3303      	adds	r3, #3
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	404b      	eors	r3, r1
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4053      	eors	r3, r2
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005e8c:	5c9a      	ldrb	r2, [r3, r2]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	4053      	eors	r3, r2
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4053      	eors	r3, r2
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	4053      	eors	r3, r2
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3303      	adds	r3, #3
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8005eb4:	5c5b      	ldrb	r3, [r3, r1]
 8005eb6:	4053      	eors	r3, r2
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	7a3a      	ldrb	r2, [r7, #8]
 8005ec4:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	7a7a      	ldrb	r2, [r7, #9]
 8005ece:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	7aba      	ldrb	r2, [r7, #10]
 8005ed8:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	7afa      	ldrb	r2, [r7, #11]
 8005ee2:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	f67f af72 	bls.w	8005dd6 <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	08025390 	.word	0x08025390

08005f04 <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e0df      	b.n	80060d2 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b73      	ldr	r3, [pc, #460]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8005f1a:	5c9a      	ldrb	r2, [r3, r2]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	4b72      	ldr	r3, [pc, #456]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8005f24:	5c5b      	ldrb	r3, [r3, r1]
 8005f26:	4053      	eors	r3, r2
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4619      	mov	r1, r3
 8005f32:	4b6f      	ldr	r3, [pc, #444]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8005f34:	5c59      	ldrb	r1, [r3, r1]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	4b6b      	ldr	r3, [pc, #428]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8005f40:	5c1b      	ldrb	r3, [r3, r0]
 8005f42:	404b      	eors	r3, r1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4053      	eors	r3, r2
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	4619      	mov	r1, r3
 8005f52:	4b65      	ldr	r3, [pc, #404]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8005f54:	5c59      	ldrb	r1, [r3, r1]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	404b      	eors	r3, r1
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	4053      	eors	r3, r2
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3303      	adds	r3, #3
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4b60      	ldr	r3, [pc, #384]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8005f6e:	5c5b      	ldrb	r3, [r3, r1]
 8005f70:	4053      	eors	r3, r2
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8005f7e:	5c9a      	ldrb	r2, [r3, r2]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3301      	adds	r3, #1
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4b57      	ldr	r3, [pc, #348]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8005f8a:	5c59      	ldrb	r1, [r3, r1]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8005f96:	5c1b      	ldrb	r3, [r3, r0]
 8005f98:	404b      	eors	r3, r1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	4053      	eors	r3, r2
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4b51      	ldr	r3, [pc, #324]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8005faa:	5c59      	ldrb	r1, [r3, r1]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3302      	adds	r3, #2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8005fb6:	5c1b      	ldrb	r3, [r3, r0]
 8005fb8:	404b      	eors	r3, r1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	4053      	eors	r3, r2
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3303      	adds	r3, #3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4b47      	ldr	r3, [pc, #284]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8005fca:	5c59      	ldrb	r1, [r3, r1]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3303      	adds	r3, #3
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	404b      	eors	r3, r1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4053      	eors	r3, r2
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b41      	ldr	r3, [pc, #260]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8005fe4:	5c9a      	ldrb	r2, [r3, r2]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4053      	eors	r3, r2
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8005ff8:	5c5b      	ldrb	r3, [r3, r1]
 8005ffa:	4053      	eors	r3, r2
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3302      	adds	r3, #2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	4b38      	ldr	r3, [pc, #224]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8006008:	5c59      	ldrb	r1, [r3, r1]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3302      	adds	r3, #2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	4b36      	ldr	r3, [pc, #216]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006014:	5c1b      	ldrb	r3, [r3, r0]
 8006016:	404b      	eors	r3, r1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	4053      	eors	r3, r2
 800601c:	b2da      	uxtb	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3303      	adds	r3, #3
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4619      	mov	r1, r3
 8006026:	4b32      	ldr	r3, [pc, #200]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8006028:	5c59      	ldrb	r1, [r3, r1]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3303      	adds	r3, #3
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	4b2e      	ldr	r3, [pc, #184]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006034:	5c1b      	ldrb	r3, [r3, r0]
 8006036:	404b      	eors	r3, r1
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4053      	eors	r3, r2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	4b2a      	ldr	r3, [pc, #168]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8006048:	5c9a      	ldrb	r2, [r3, r2]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	4619      	mov	r1, r3
 8006050:	4b26      	ldr	r3, [pc, #152]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006052:	5c5b      	ldrb	r3, [r3, r1]
 8006054:	4053      	eors	r3, r2
 8006056:	b2da      	uxtb	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3301      	adds	r3, #1
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	4b21      	ldr	r3, [pc, #132]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8006062:	5c59      	ldrb	r1, [r3, r1]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3301      	adds	r3, #1
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	404b      	eors	r3, r1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	4053      	eors	r3, r2
 8006070:	b2da      	uxtb	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3302      	adds	r3, #2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 800607c:	5c5b      	ldrb	r3, [r3, r1]
 800607e:	4053      	eors	r3, r2
 8006080:	b2da      	uxtb	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3303      	adds	r3, #3
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	4619      	mov	r1, r3
 800608a:	4b17      	ldr	r3, [pc, #92]	@ (80060e8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 800608c:	5c59      	ldrb	r1, [r3, r1]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3303      	adds	r3, #3
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	4b15      	ldr	r3, [pc, #84]	@ (80060ec <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006098:	5c1b      	ldrb	r3, [r3, r0]
 800609a:	404b      	eors	r3, r1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	4053      	eors	r3, r2
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	7a3a      	ldrb	r2, [r7, #8]
 80060ac:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	7a7a      	ldrb	r2, [r7, #9]
 80060b6:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	7aba      	ldrb	r2, [r7, #10]
 80060c0:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	7afa      	ldrb	r2, [r7, #11]
 80060ca:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	3301      	adds	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	f67f af1c 	bls.w	8005f12 <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	08025590 	.word	0x08025590
 80060ec:	08025390 	.word	0x08025390
 80060f0:	08025490 	.word	0x08025490

080060f4 <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b089      	sub	sp, #36	@ 0x24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 8006106:	2300      	movs	r3, #0
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e197      	b.n	800643c <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	fbb3 f1f2 	udiv	r1, r3, r2
 8006116:	fb01 f202 	mul.w	r2, r1, r2
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	4413      	add	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8006128:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800612c:	2bc0      	cmp	r3, #192	@ 0xc0
 800612e:	d150      	bne.n	80061d2 <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 8006130:	7ffb      	ldrb	r3, [r7, #31]
 8006132:	f1c3 0303 	rsb	r3, r3, #3
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	7819      	ldrb	r1, [r3, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	f1c3 0303 	rsb	r3, r3, #3
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	4403      	add	r3, r0
 800614e:	404a      	eors	r2, r1
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8006154:	7ffb      	ldrb	r3, [r7, #31]
 8006156:	f1c3 0303 	rsb	r3, r3, #3
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	3301      	adds	r3, #1
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	7819      	ldrb	r1, [r3, #0]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	3301      	adds	r3, #1
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	7ffb      	ldrb	r3, [r7, #31]
 800616c:	f1c3 0303 	rsb	r3, r3, #3
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	3301      	adds	r3, #1
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	4403      	add	r3, r0
 8006178:	404a      	eors	r2, r1
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 800617e:	7ffb      	ldrb	r3, [r7, #31]
 8006180:	f1c3 0303 	rsb	r3, r3, #3
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	3302      	adds	r3, #2
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	7819      	ldrb	r1, [r3, #0]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	3302      	adds	r3, #2
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	7ffb      	ldrb	r3, [r7, #31]
 8006196:	f1c3 0303 	rsb	r3, r3, #3
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	3302      	adds	r3, #2
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	4403      	add	r3, r0
 80061a2:	404a      	eors	r2, r1
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 80061a8:	7ffb      	ldrb	r3, [r7, #31]
 80061aa:	f1c3 0303 	rsb	r3, r3, #3
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	3303      	adds	r3, #3
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	7819      	ldrb	r1, [r3, #0]
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3303      	adds	r3, #3
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	f1c3 0303 	rsb	r3, r3, #3
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	3303      	adds	r3, #3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	4403      	add	r3, r0
 80061cc:	404a      	eors	r2, r1
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d903      	bls.n	80061e4 <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	3304      	adds	r3, #4
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e0d1      	b.n	8006388 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d153      	bne.n	8006292 <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	7dbb      	ldrb	r3, [r7, #22]
 80061fe:	69b9      	ldr	r1, [r7, #24]
 8006200:	440b      	add	r3, r1
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	4619      	mov	r1, r3
 8006206:	4b93      	ldr	r3, [pc, #588]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006208:	5c59      	ldrb	r1, [r3, r1]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	7818      	ldrb	r0, [r3, #0]
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	fbb0 f3f3 	udiv	r3, r0, r3
 8006214:	b2db      	uxtb	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	488f      	ldr	r0, [pc, #572]	@ (8006458 <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 800621a:	5cc3      	ldrb	r3, [r0, r3]
 800621c:	404b      	eors	r3, r1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	4053      	eors	r3, r2
 8006222:	b2da      	uxtb	r2, r3
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	3301      	adds	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	781a      	ldrb	r2, [r3, #0]
 8006232:	7dbb      	ldrb	r3, [r7, #22]
 8006234:	69b9      	ldr	r1, [r7, #24]
 8006236:	440b      	add	r3, r1
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	4619      	mov	r1, r3
 800623c:	4b85      	ldr	r3, [pc, #532]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 800623e:	5c5b      	ldrb	r3, [r3, r1]
 8006240:	4053      	eors	r3, r2
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	3301      	adds	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	781a      	ldrb	r2, [r3, #0]
 8006252:	7dbb      	ldrb	r3, [r7, #22]
 8006254:	69b9      	ldr	r1, [r7, #24]
 8006256:	440b      	add	r3, r1
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	4619      	mov	r1, r3
 800625c:	4b7d      	ldr	r3, [pc, #500]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 800625e:	5c5b      	ldrb	r3, [r3, r1]
 8006260:	4053      	eors	r3, r2
 8006262:	b2da      	uxtb	r2, r3
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	3301      	adds	r3, #1
 800626c:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	7dbb      	ldrb	r3, [r7, #22]
 8006274:	3b04      	subs	r3, #4
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	440b      	add	r3, r1
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4619      	mov	r1, r3
 800627e:	4b75      	ldr	r3, [pc, #468]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006280:	5c5b      	ldrb	r3, [r3, r1]
 8006282:	4053      	eors	r3, r2
 8006284:	b2da      	uxtb	r2, r3
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	3301      	adds	r3, #1
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e07a      	b.n	8006388 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d147      	bne.n	8006328 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	fbb3 f1f2 	udiv	r1, r3, r2
 80062a2:	fb01 f202 	mul.w	r2, r1, r2
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d13c      	bne.n	8006328 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	3b04      	subs	r3, #4
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	4619      	mov	r1, r3
 80062ba:	4b66      	ldr	r3, [pc, #408]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80062bc:	5c5b      	ldrb	r3, [r3, r1]
 80062be:	4053      	eors	r3, r2
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3301      	adds	r3, #1
 80062ca:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	3b04      	subs	r3, #4
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80062da:	5c5b      	ldrb	r3, [r3, r1]
 80062dc:	4053      	eors	r3, r2
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	3b04      	subs	r3, #4
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4b57      	ldr	r3, [pc, #348]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 80062f8:	5c5b      	ldrb	r3, [r3, r1]
 80062fa:	4053      	eors	r3, r2
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	3301      	adds	r3, #1
 8006306:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	3b04      	subs	r3, #4
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	4b4f      	ldr	r3, [pc, #316]	@ (8006454 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006316:	5c5b      	ldrb	r3, [r3, r1]
 8006318:	4053      	eors	r3, r2
 800631a:	b2da      	uxtb	r2, r3
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	3301      	adds	r3, #1
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e02f      	b.n	8006388 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	781a      	ldrb	r2, [r3, #0]
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	3b04      	subs	r3, #4
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	4053      	eors	r3, r2
 8006334:	b2da      	uxtb	r2, r3
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	3301      	adds	r3, #1
 800633e:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	781a      	ldrb	r2, [r3, #0]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	3b04      	subs	r3, #4
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	4053      	eors	r3, r2
 800634c:	b2da      	uxtb	r2, r3
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3301      	adds	r3, #1
 8006356:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3b04      	subs	r3, #4
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	4053      	eors	r3, r2
 8006364:	b2da      	uxtb	r2, r3
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3301      	adds	r3, #1
 800636e:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	3b04      	subs	r3, #4
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	4053      	eors	r3, r2
 800637c:	b2da      	uxtb	r2, r3
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	3301      	adds	r3, #1
 8006386:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8006388:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800638c:	2bc0      	cmp	r3, #192	@ 0xc0
 800638e:	d006      	beq.n	800639e <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e005      	b.n	80063aa <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 80063aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	d141      	bne.n	8006436 <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 80063b2:	7ffb      	ldrb	r3, [r7, #31]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	7819      	ldrb	r1, [r3, #0]
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3b04      	subs	r3, #4
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	7ffb      	ldrb	r3, [r7, #31]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	4403      	add	r3, r0
 80063ca:	404a      	eors	r2, r1
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	3301      	adds	r3, #1
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	7819      	ldrb	r1, [r3, #0]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	3b03      	subs	r3, #3
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	7ffb      	ldrb	r3, [r7, #31]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	3301      	adds	r3, #1
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	4403      	add	r3, r0
 80063ec:	404a      	eors	r2, r1
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	3302      	adds	r3, #2
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	7819      	ldrb	r1, [r3, #0]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	3b02      	subs	r3, #2
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	7ffb      	ldrb	r3, [r7, #31]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3302      	adds	r3, #2
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	4403      	add	r3, r0
 800640e:	404a      	eors	r2, r1
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 8006414:	7ffb      	ldrb	r3, [r7, #31]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	3303      	adds	r3, #3
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	7819      	ldrb	r1, [r3, #0]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	3b01      	subs	r3, #1
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	7ffb      	ldrb	r3, [r7, #31]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	3303      	adds	r3, #3
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	4403      	add	r3, r0
 8006430:	404a      	eors	r2, r1
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8006436:	7ffb      	ldrb	r3, [r7, #31]
 8006438:	3301      	adds	r3, #1
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	7ffb      	ldrb	r3, [r7, #31]
 800643e:	2b03      	cmp	r3, #3
 8006440:	f67f ae64 	bls.w	800610c <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	3724      	adds	r7, #36	@ 0x24
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	08025190 	.word	0x08025190
 8006458:	08025690 	.word	0x08025690

0800645c <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	4613      	mov	r3, r2
 8006468:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 800646a:	e00b      	b.n	8006484 <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	18d0      	adds	r0, r2, r3
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	3308      	adds	r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	4619      	mov	r1, r3
 8006480:	f000 f9f0 	bl	8006864 <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	71fa      	strb	r2, [r7, #7]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ee      	bne.n	800646c <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	3308      	adds	r3, #8
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 80064b2:	f107 0310 	add.w	r3, r7, #16
 80064b6:	4619      	mov	r1, r3
 80064b8:	68b8      	ldr	r0, [r7, #8]
 80064ba:	f000 f887 	bl	80065cc <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 80064be:	2300      	movs	r3, #0
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e021      	b.n	8006508 <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006530 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 80064c8:	5cd3      	ldrb	r3, [r2, r3]
 80064ca:	4619      	mov	r1, r3
 80064cc:	69b8      	ldr	r0, [r7, #24]
 80064ce:	f000 fd8f 	bl	8006ff0 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	1d1a      	adds	r2, r3, #4
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	4915      	ldr	r1, [pc, #84]	@ (8006530 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fd86 	bl	8006ff0 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3320      	adds	r3, #32
 80064e8:	4619      	mov	r1, r3
 80064ea:	69b8      	ldr	r0, [r7, #24]
 80064ec:	f000 fa3f 	bl	800696e <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f103 0220 	add.w	r2, r3, #32
 80064f6:	f107 0310 	add.w	r3, r7, #16
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fdc2 	bl	8007086 <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 8006502:	7ffb      	ldrb	r3, [r7, #31]
 8006504:	3301      	adds	r3, #1
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	7ffb      	ldrb	r3, [r7, #31]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d9da      	bls.n	80064c4 <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 800650e:	f107 0310 	add.w	r3, r7, #16
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fdf3 	bl	80070fe <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 8006518:	f107 0310 	add.w	r3, r7, #16
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f8f3 	bl	800670a <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	0802569c 	.word	0x0802569c

08006534 <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	3308      	adds	r3, #8
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 800654e:	f107 0310 	add.w	r3, r7, #16
 8006552:	4619      	mov	r1, r3
 8006554:	68b8      	ldr	r0, [r7, #8]
 8006556:	f000 f839 	bl	80065cc <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 800655a:	230f      	movs	r3, #15
 800655c:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3320      	adds	r3, #32
 8006562:	4619      	mov	r1, r3
 8006564:	69b8      	ldr	r0, [r7, #24]
 8006566:	f000 fa02 	bl	800696e <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 800656a:	7ffb      	ldrb	r3, [r7, #31]
 800656c:	4a16      	ldr	r2, [pc, #88]	@ (80065c8 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 800656e:	5cd3      	ldrb	r3, [r2, r3]
 8006570:	4619      	mov	r1, r3
 8006572:	69b8      	ldr	r0, [r7, #24]
 8006574:	f000 fce5 	bl	8006f42 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	7ffb      	ldrb	r3, [r7, #31]
 800657e:	4912      	ldr	r1, [pc, #72]	@ (80065c8 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8006580:	5ccb      	ldrb	r3, [r1, r3]
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f000 fcdc 	bl	8006f42 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f103 0220 	add.w	r2, r3, #32
 8006590:	f107 0310 	add.w	r3, r7, #16
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fd75 	bl	8007086 <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	1e5a      	subs	r2, r3, #1
 80065a0:	77fa      	strb	r2, [r7, #31]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1db      	bne.n	800655e <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 80065a6:	f107 0310 	add.w	r3, r7, #16
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fda7 	bl	80070fe <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 80065b0:	f107 0310 	add.w	r3, r7, #16
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f8a7 	bl	800670a <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	0802569c 	.word	0x0802569c

080065cc <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]
 80065de:	e089      	b.n	80066f4 <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3304      	adds	r3, #4
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 80065ee:	2300      	movs	r3, #0
 80065f0:	73bb      	strb	r3, [r7, #14]
 80065f2:	e046      	b.n	8006682 <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3304      	adds	r3, #4
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	b25a      	sxtb	r2, r3
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	440b      	add	r3, r1
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800660a:	b25b      	sxtb	r3, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	b25a      	sxtb	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	3304      	adds	r3, #4
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3304      	adds	r3, #4
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	3304      	adds	r3, #4
 8006622:	0852      	lsrs	r2, r2, #1
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	781a      	ldrb	r2, [r3, #0]
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	440b      	add	r3, r1
 8006636:	0052      	lsls	r2, r2, #1
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b25a      	sxtb	r2, r3
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	440b      	add	r3, r1
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	b25b      	sxtb	r3, r3
 800664c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006650:	b25b      	sxtb	r3, r3
 8006652:	4313      	orrs	r3, r2
 8006654:	b25b      	sxtb	r3, r3
 8006656:	b2da      	uxtb	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	440b      	add	r3, r1
 8006676:	0052      	lsls	r2, r2, #1
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	3301      	adds	r3, #1
 8006680:	73bb      	strb	r3, [r7, #14]
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b06      	cmp	r3, #6
 8006686:	d9b5      	bls.n	80065f4 <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3304      	adds	r3, #4
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b25a      	sxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3307      	adds	r3, #7
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b25b      	sxtb	r3, r3
 8006698:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800669c:	b25b      	sxtb	r3, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	b25a      	sxtb	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3304      	adds	r3, #4
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3307      	adds	r3, #7
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3307      	adds	r3, #7
 80066b4:	0052      	lsls	r2, r2, #1
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	b25a      	sxtb	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3307      	adds	r3, #7
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3307      	adds	r3, #7
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3307      	adds	r3, #7
 80066e2:	0052      	lsls	r2, r2, #1
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	3301      	adds	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	f67f af72 	bls.w	80065e0 <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 8006714:	2300      	movs	r3, #0
 8006716:	72fb      	strb	r3, [r7, #11]
 8006718:	e099      	b.n	800684e <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	4413      	add	r3, r2
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 8006728:	2300      	movs	r3, #0
 800672a:	72bb      	strb	r3, [r7, #10]
 800672c:	e04c      	b.n	80067c8 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	4413      	add	r3, r2
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b25a      	sxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3304      	adds	r3, #4
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b25b      	sxtb	r3, r3
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	b25b      	sxtb	r3, r3
 8006746:	4313      	orrs	r3, r2
 8006748:	b259      	sxtb	r1, r3
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	4413      	add	r3, r2
 8006750:	b2ca      	uxtb	r2, r1
 8006752:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	4413      	add	r3, r2
 800675a:	781a      	ldrb	r2, [r3, #0]
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	440b      	add	r3, r1
 8006762:	0052      	lsls	r2, r2, #1
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	4413      	add	r3, r2
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	b25a      	sxtb	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	b25b      	sxtb	r3, r3
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	b25b      	sxtb	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b259      	sxtb	r1, r3
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	4413      	add	r3, r2
 8006788:	b2ca      	uxtb	r2, r1
 800678a:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	4413      	add	r3, r2
 8006792:	781a      	ldrb	r2, [r3, #0]
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	440b      	add	r3, r1
 800679a:	0052      	lsls	r2, r2, #1
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3304      	adds	r3, #4
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	0852      	lsrs	r2, r2, #1
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
            inTmp++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 80067c2:	7abb      	ldrb	r3, [r7, #10]
 80067c4:	3301      	adds	r3, #1
 80067c6:	72bb      	strb	r3, [r7, #10]
 80067c8:	7abb      	ldrb	r3, [r7, #10]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d9af      	bls.n	800672e <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 80067ce:	7afb      	ldrb	r3, [r7, #11]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	4413      	add	r3, r2
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b25a      	sxtb	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3304      	adds	r3, #4
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	4313      	orrs	r3, r2
 80067e8:	b259      	sxtb	r1, r3
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	4413      	add	r3, r2
 80067f0:	b2ca      	uxtb	r2, r1
 80067f2:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	440b      	add	r3, r1
 8006802:	0052      	lsls	r2, r2, #1
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4413      	add	r3, r2
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b25a      	sxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b25b      	sxtb	r3, r3
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	b25b      	sxtb	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b259      	sxtb	r1, r3
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	4413      	add	r3, r2
 8006828:	b2ca      	uxtb	r2, r1
 800682a:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3304      	adds	r3, #4
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3304      	adds	r3, #4
 8006842:	0852      	lsrs	r2, r2, #1
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	3301      	adds	r3, #1
 800684c:	72fb      	strb	r3, [r7, #11]
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b07      	cmp	r3, #7
 8006852:	f67f af62 	bls.w	800671a <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	f107 030c 	add.w	r3, r7, #12
 8006874:	6810      	ldr	r0, [r2, #0]
 8006876:	6851      	ldr	r1, [r2, #4]
 8006878:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
 800687e:	e050      	b.n	8006922 <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	4413      	add	r3, r2
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 800688a:	2300      	movs	r3, #0
 800688c:	75bb      	strb	r3, [r7, #22]
 800688e:	e02d      	b.n	80068ec <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4413      	add	r3, r2
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	b25a      	sxtb	r2, r3
 800689a:	7dbb      	ldrb	r3, [r7, #22]
 800689c:	3318      	adds	r3, #24
 800689e:	443b      	add	r3, r7
 80068a0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	4313      	orrs	r3, r2
 80068ae:	b259      	sxtb	r1, r3
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	b2ca      	uxtb	r2, r1
 80068b8:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	4413      	add	r3, r2
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	440b      	add	r3, r1
 80068c8:	0852      	lsrs	r2, r2, #1
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 80068ce:	7dbb      	ldrb	r3, [r7, #22]
 80068d0:	3318      	adds	r3, #24
 80068d2:	443b      	add	r3, r7
 80068d4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80068d8:	7dbb      	ldrb	r3, [r7, #22]
 80068da:	0052      	lsls	r2, r2, #1
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	3318      	adds	r3, #24
 80068e0:	443b      	add	r3, r7
 80068e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 80068e6:	7dbb      	ldrb	r3, [r7, #22]
 80068e8:	3301      	adds	r3, #1
 80068ea:	75bb      	strb	r3, [r7, #22]
 80068ec:	7dbb      	ldrb	r3, [r7, #22]
 80068ee:	2b06      	cmp	r3, #6
 80068f0:	d9ce      	bls.n	8006890 <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	4413      	add	r3, r2
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b25a      	sxtb	r2, r3
 80068fc:	7cfb      	ldrb	r3, [r7, #19]
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006904:	b25b      	sxtb	r3, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	b259      	sxtb	r1, r3
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	4413      	add	r3, r2
 8006910:	b2ca      	uxtb	r2, r1
 8006912:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 8006914:	7cfb      	ldrb	r3, [r7, #19]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	3301      	adds	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	2b06      	cmp	r3, #6
 8006926:	d9ab      	bls.n	8006880 <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	3303      	adds	r3, #3
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	3307      	adds	r3, #7
 8006932:	0112      	lsls	r2, r2, #4
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	3303      	adds	r3, #3
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	3303      	adds	r3, #3
 8006942:	f022 020f 	bic.w	r2, r2, #15
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	799b      	ldrb	r3, [r3, #6]
 800694e:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	3306      	adds	r3, #6
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	7912      	ldrb	r2, [r2, #4]
 8006958:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	3304      	adds	r3, #4
 800695e:	7dfa      	ldrb	r2, [r7, #23]
 8006960:	701a      	strb	r2, [r3, #0]

}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3301      	adds	r3, #1
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	b2da      	uxtb	r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3302      	adds	r3, #2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	08db      	lsrs	r3, r3, #3
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3301      	adds	r3, #1
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	089b      	lsrs	r3, r3, #2
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	4313      	orrs	r3, r2
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b25a      	sxtb	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3302      	adds	r3, #2
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	b25b      	sxtb	r3, r3
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	f002 0220 	and.w	r2, r2, #32
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b25a      	sxtb	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3303      	adds	r3, #3
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	b25b      	sxtb	r3, r3
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b25a      	sxtb	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b25a      	sxtb	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3301      	adds	r3, #1
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	b25b      	sxtb	r3, r3
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b25a      	sxtb	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b25a      	sxtb	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b25a      	sxtb	r2, r3
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	3301      	adds	r3, #1
 8006a96:	7819      	ldrb	r1, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	430a      	orrs	r2, r1
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	7819      	ldrb	r1, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3301      	adds	r3, #1
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	430a      	orrs	r2, r1
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	3302      	adds	r3, #2
 8006ae0:	f002 0220 	and.w	r2, r2, #32
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	3302      	adds	r3, #2
 8006aec:	7819      	ldrb	r1, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3302      	adds	r3, #2
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	3302      	adds	r3, #2
 8006b02:	430a      	orrs	r2, r1
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	7819      	ldrb	r1, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3301      	adds	r3, #1
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	3302      	adds	r3, #2
 8006b22:	430a      	orrs	r2, r1
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	7819      	ldrb	r1, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	3302      	adds	r3, #2
 8006b40:	430a      	orrs	r2, r1
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	3302      	adds	r3, #2
 8006b4a:	7819      	ldrb	r1, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3303      	adds	r3, #3
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	3302      	adds	r3, #2
 8006b60:	430a      	orrs	r2, r1
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b25a      	sxtb	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b25a      	sxtb	r2, r3
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	3302      	adds	r3, #2
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	015b      	lsls	r3, r3, #5
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	3303      	adds	r3, #3
 8006b94:	f002 0220 	and.w	r2, r2, #32
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	3303      	adds	r3, #3
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b25a      	sxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	b25b      	sxtb	r3, r3
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	b25b      	sxtb	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b25a      	sxtb	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	3303      	adds	r3, #3
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	3303      	adds	r3, #3
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3303      	adds	r3, #3
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	3303      	adds	r3, #3
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	3303      	adds	r3, #3
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3302      	adds	r3, #2
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	3303      	adds	r3, #3
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	3303      	adds	r3, #3
 8006c04:	7819      	ldrb	r1, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	3303      	adds	r3, #3
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	3303      	adds	r3, #3
 8006c24:	7819      	ldrb	r1, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	099b      	lsrs	r3, r3, #6
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	3303      	adds	r3, #3
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3305      	adds	r3, #5
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	f002 0220 	and.w	r2, r2, #32
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	b25a      	sxtb	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3306      	adds	r3, #6
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b25a      	sxtb	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3304      	adds	r3, #4
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	7819      	ldrb	r1, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	3304      	adds	r3, #4
 8006c94:	430a      	orrs	r2, r1
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	7819      	ldrb	r1, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3305      	adds	r3, #5
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3306      	adds	r3, #6
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	7819      	ldrb	r1, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3307      	adds	r3, #7
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	3305      	adds	r3, #5
 8006d08:	f002 0220 	and.w	r2, r2, #32
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	3305      	adds	r3, #5
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b25a      	sxtb	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3305      	adds	r3, #5
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b25a      	sxtb	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	3305      	adds	r3, #5
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3305      	adds	r3, #5
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b25a      	sxtb	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3306      	adds	r3, #6
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b25b      	sxtb	r3, r3
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b25a      	sxtb	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	3305      	adds	r3, #5
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	3305      	adds	r3, #5
 8006d5c:	7819      	ldrb	r1, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3306      	adds	r3, #6
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	3305      	adds	r3, #5
 8006d72:	430a      	orrs	r2, r1
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	3305      	adds	r3, #5
 8006d7c:	7819      	ldrb	r1, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	089b      	lsrs	r3, r3, #2
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	3305      	adds	r3, #5
 8006d92:	430a      	orrs	r2, r1
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	3305      	adds	r3, #5
 8006d9c:	7819      	ldrb	r1, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3306      	adds	r3, #6
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	3305      	adds	r3, #5
 8006db2:	430a      	orrs	r2, r1
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3305      	adds	r3, #5
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	015b      	lsls	r3, r3, #5
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	3306      	adds	r3, #6
 8006dc6:	f002 0220 	and.w	r2, r2, #32
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	3306      	adds	r3, #6
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b25a      	sxtb	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3306      	adds	r3, #6
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	b25b      	sxtb	r3, r3
 8006de8:	4313      	orrs	r3, r2
 8006dea:	b25a      	sxtb	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	3306      	adds	r3, #6
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	3306      	adds	r3, #6
 8006df8:	7819      	ldrb	r1, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3305      	adds	r3, #5
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	089b      	lsrs	r3, r3, #2
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	3306      	adds	r3, #6
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	3306      	adds	r3, #6
 8006e18:	7819      	ldrb	r1, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	3306      	adds	r3, #6
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	3306      	adds	r3, #6
 8006e38:	7819      	ldrb	r1, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	3306      	adds	r3, #6
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	3306      	adds	r3, #6
 8006e58:	7819      	ldrb	r1, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	09db      	lsrs	r3, r3, #7
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	3306      	adds	r3, #6
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3306      	adds	r3, #6
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	3307      	adds	r3, #7
 8006e7c:	f002 0220 	and.w	r2, r2, #32
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	3307      	adds	r3, #7
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b25a      	sxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3305      	adds	r3, #5
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b25a      	sxtb	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	3307      	adds	r3, #7
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	3307      	adds	r3, #7
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b25a      	sxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3306      	adds	r3, #6
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	b25b      	sxtb	r3, r3
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	b25b      	sxtb	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b25a      	sxtb	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	3307      	adds	r3, #7
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	3307      	adds	r3, #7
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	b25a      	sxtb	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3304      	adds	r3, #4
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b25a      	sxtb	r2, r3
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	3307      	adds	r3, #7
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3307      	adds	r3, #7
 8006efa:	7819      	ldrb	r1, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	3307      	adds	r3, #7
 8006f10:	430a      	orrs	r2, r1
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	3307      	adds	r3, #7
 8006f1a:	7819      	ldrb	r1, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	091b      	lsrs	r3, r3, #4
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	3307      	adds	r3, #7
 8006f30:	430a      	orrs	r2, r1
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 8006f56:	e041      	b.n	8006fdc <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e01f      	b.n	8006f9e <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	01db      	lsls	r3, r3, #7
 8006f68:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	440b      	add	r3, r1
 8006f78:	0852      	lsrs	r2, r2, #1
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4413      	add	r3, r2
 8006f84:	7819      	ldrb	r1, [r3, #0]
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	7bba      	ldrb	r2, [r7, #14]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8006f94:	7b7b      	ldrb	r3, [r7, #13]
 8006f96:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d9dc      	bls.n	8006f5e <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3303      	adds	r3, #3
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00f      	beq.n	8006fd2 <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3303      	adds	r3, #3
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	f022 020f 	bic.w	r2, r2, #15
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1ba      	bne.n	8006f58 <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 8007004:	e035      	b.n	8007072 <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 8007006:	2304      	movs	r3, #4
 8007008:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	3b01      	subs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4413      	add	r3, r2
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	09db      	lsrs	r3, r3, #7
 800701a:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	440b      	add	r3, r1
 800702a:	0052      	lsls	r2, r2, #1
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	7819      	ldrb	r1, [r3, #0]
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	7bba      	ldrb	r2, [r7, #14]
 8007040:	430a      	orrs	r2, r1
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8007046:	7b7b      	ldrb	r3, [r7, #13]
 8007048:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1dc      	bne.n	800700a <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d008      	beq.n	8007068 <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3303      	adds	r3, #3
 800705a:	781a      	ldrb	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3303      	adds	r3, #3
 8007060:	f042 0210 	orr.w	r2, r2, #16
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	3b01      	subs	r3, #1
 8007070:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1c6      	bne.n	8007006 <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3304      	adds	r3, #4
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 f83f 	bl	800712c <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	7819      	ldrb	r1, [r3, #0]
 80070b4:	7b3a      	ldrb	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3304      	adds	r3, #4
 80070ba:	404a      	eors	r2, r1
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3305      	adds	r3, #5
 80070c4:	7819      	ldrb	r1, [r3, #0]
 80070c6:	7b7a      	ldrb	r2, [r7, #13]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3305      	adds	r3, #5
 80070cc:	404a      	eors	r2, r1
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3306      	adds	r3, #6
 80070d6:	7819      	ldrb	r1, [r3, #0]
 80070d8:	7bba      	ldrb	r2, [r7, #14]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3306      	adds	r3, #6
 80070de:	404a      	eors	r2, r1
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3307      	adds	r3, #7
 80070e8:	7819      	ldrb	r1, [r3, #0]
 80070ea:	7bfa      	ldrb	r2, [r7, #15]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3307      	adds	r3, #7
 80070f0:	404a      	eors	r2, r1
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	601a      	str	r2, [r3, #0]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8007136:	f107 030c 	add.w	r3, r7, #12
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa4d 	bl	80075dc <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
 8007146:	e06d      	b.n	8007224 <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	3318      	adds	r3, #24
 800714e:	443b      	add	r3, r7
 8007150:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	440b      	add	r3, r1
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4053      	eors	r3, r2
 8007160:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8007162:	7dbb      	ldrb	r3, [r7, #22]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	b2da      	uxtb	r2, r3
 800716a:	7dbb      	ldrb	r3, [r7, #22]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	b2db      	uxtb	r3, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	b2da      	uxtb	r2, r3
 800717a:	7dbb      	ldrb	r3, [r7, #22]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	b2db      	uxtb	r3, r3
 8007186:	4313      	orrs	r3, r2
 8007188:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	005a      	lsls	r2, r3, #1
 800718e:	7dbb      	ldrb	r3, [r7, #22]
 8007190:	4923      	ldr	r1, [pc, #140]	@ (8007220 <phCryptoSym_Sw_Des_F+0xf4>)
 8007192:	0192      	lsls	r2, r2, #6
 8007194:	440a      	add	r2, r1
 8007196:	4413      	add	r3, r2
 8007198:	781a      	ldrb	r2, [r3, #0]
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	0112      	lsls	r2, r2, #4
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	3318      	adds	r3, #24
 80071a2:	443b      	add	r3, r7
 80071a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	3301      	adds	r3, #1
 80071ae:	3318      	adds	r3, #24
 80071b0:	443b      	add	r3, r7
 80071b2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	3301      	adds	r3, #1
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	440b      	add	r3, r1
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4053      	eors	r3, r2
 80071c4:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 80071c6:	7dbb      	ldrb	r3, [r7, #22]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	7dbb      	ldrb	r3, [r7, #22]
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	7dbb      	ldrb	r3, [r7, #22]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	3318      	adds	r3, #24
 80071f2:	443b      	add	r3, r7
 80071f4:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	7dbb      	ldrb	r3, [r7, #22]
 8007200:	4807      	ldr	r0, [pc, #28]	@ (8007220 <phCryptoSym_Sw_Des_F+0xf4>)
 8007202:	0192      	lsls	r2, r2, #6
 8007204:	4402      	add	r2, r0
 8007206:	4413      	add	r3, r2
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	430a      	orrs	r2, r1
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	3318      	adds	r3, #24
 8007212:	443b      	add	r3, r7
 8007214:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	3301      	adds	r3, #1
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e001      	b.n	8007224 <phCryptoSym_Sw_Des_F+0xf8>
 8007220:	080256ac 	.word	0x080256ac
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d98e      	bls.n	8007148 <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 800722a:	7b3a      	ldrb	r2, [r7, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3301      	adds	r3, #1
 8007230:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 8007238:	7b3b      	ldrb	r3, [r7, #12]
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 8007240:	7b3a      	ldrb	r2, [r7, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3302      	adds	r3, #2
 8007246:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3302      	adds	r3, #2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b25a      	sxtb	r2, r3
 8007256:	7b3b      	ldrb	r3, [r7, #12]
 8007258:	b25b      	sxtb	r3, r3
 800725a:	015b      	lsls	r3, r3, #5
 800725c:	b25b      	sxtb	r3, r3
 800725e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007262:	b25b      	sxtb	r3, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	b25a      	sxtb	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3302      	adds	r3, #2
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8007270:	7b3b      	ldrb	r3, [r7, #12]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727a:	b2da      	uxtb	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8007280:	7b3b      	ldrb	r3, [r7, #12]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3303      	adds	r3, #3
 800728a:	f002 0210 	and.w	r2, r2, #16
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 8007292:	7b3b      	ldrb	r3, [r7, #12]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	b2db      	uxtb	r3, r3
 8007298:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3303      	adds	r3, #3
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	b25a      	sxtb	r2, r3
 80072a2:	7b3b      	ldrb	r3, [r7, #12]
 80072a4:	b25b      	sxtb	r3, r3
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	b25b      	sxtb	r3, r3
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b25a      	sxtb	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3303      	adds	r3, #3
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 80072b8:	7b3b      	ldrb	r3, [r7, #12]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3302      	adds	r3, #2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b25a      	sxtb	r2, r3
 80072c8:	7b3b      	ldrb	r3, [r7, #12]
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	b25a      	sxtb	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3302      	adds	r3, #2
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	7b7b      	ldrb	r3, [r7, #13]
 80072e4:	01db      	lsls	r3, r3, #7
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3301      	adds	r3, #1
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b25a      	sxtb	r2, r3
 80072f8:	7b7b      	ldrb	r3, [r7, #13]
 80072fa:	b25b      	sxtb	r3, r3
 80072fc:	015b      	lsls	r3, r3, #5
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007304:	b25b      	sxtb	r3, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	b25a      	sxtb	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3301      	adds	r3, #1
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3302      	adds	r3, #2
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	b25a      	sxtb	r2, r3
 800731a:	7b7b      	ldrb	r3, [r7, #13]
 800731c:	b25b      	sxtb	r3, r3
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	b25b      	sxtb	r3, r3
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	b25b      	sxtb	r3, r3
 8007328:	4313      	orrs	r3, r2
 800732a:	b25a      	sxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3302      	adds	r3, #2
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3303      	adds	r3, #3
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b25a      	sxtb	r2, r3
 800733c:	7b7b      	ldrb	r3, [r7, #13]
 800733e:	b25b      	sxtb	r3, r3
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	b25b      	sxtb	r3, r3
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	b25b      	sxtb	r3, r3
 800734a:	4313      	orrs	r3, r2
 800734c:	b25a      	sxtb	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3303      	adds	r3, #3
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 8007356:	7b7b      	ldrb	r3, [r7, #13]
 8007358:	089b      	lsrs	r3, r3, #2
 800735a:	b2db      	uxtb	r3, r3
 800735c:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b25a      	sxtb	r2, r3
 8007364:	7b7b      	ldrb	r3, [r7, #13]
 8007366:	b25b      	sxtb	r3, r3
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	b25b      	sxtb	r3, r3
 800736e:	4313      	orrs	r3, r2
 8007370:	b25b      	sxtb	r3, r3
 8007372:	b2da      	uxtb	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8007378:	7b7b      	ldrb	r3, [r7, #13]
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	b2db      	uxtb	r3, r3
 800737e:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3303      	adds	r3, #3
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b25a      	sxtb	r2, r3
 8007388:	7b7b      	ldrb	r3, [r7, #13]
 800738a:	b25b      	sxtb	r3, r3
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	b25b      	sxtb	r3, r3
 8007392:	4313      	orrs	r3, r2
 8007394:	b25a      	sxtb	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3303      	adds	r3, #3
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 800739e:	7b7b      	ldrb	r3, [r7, #13]
 80073a0:	08db      	lsrs	r3, r3, #3
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3301      	adds	r3, #1
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b25a      	sxtb	r2, r3
 80073ae:	7b7b      	ldrb	r3, [r7, #13]
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b25a      	sxtb	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3301      	adds	r3, #1
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 80073c4:	7b7b      	ldrb	r3, [r7, #13]
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3302      	adds	r3, #2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	b25a      	sxtb	r2, r3
 80073d4:	7b7b      	ldrb	r3, [r7, #13]
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	b25a      	sxtb	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3302      	adds	r3, #2
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	09db      	lsrs	r3, r3, #7
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	7819      	ldrb	r1, [r3, #0]
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	b2da      	uxtb	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3301      	adds	r3, #1
 8007412:	430a      	orrs	r2, r1
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3303      	adds	r3, #3
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b25a      	sxtb	r2, r3
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	b25b      	sxtb	r3, r3
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800742c:	b25b      	sxtb	r3, r3
 800742e:	4313      	orrs	r3, r2
 8007430:	b25a      	sxtb	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3303      	adds	r3, #3
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b25a      	sxtb	r2, r3
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	b25b      	sxtb	r3, r3
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	b25b      	sxtb	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b25b      	sxtb	r3, r3
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	b25a      	sxtb	r2, r3
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	b25b      	sxtb	r3, r3
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	b25b      	sxtb	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	b25b      	sxtb	r3, r3
 8007470:	b2da      	uxtb	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3303      	adds	r3, #3
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b25a      	sxtb	r2, r3
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	b25b      	sxtb	r3, r3
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	b25b      	sxtb	r3, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	b25a      	sxtb	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3303      	adds	r3, #3
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	b2db      	uxtb	r3, r3
 800749a:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3301      	adds	r3, #1
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b25a      	sxtb	r2, r3
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	4313      	orrs	r3, r2
 80074b0:	b25a      	sxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3301      	adds	r3, #1
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3302      	adds	r3, #2
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	b25a      	sxtb	r2, r3
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	b25b      	sxtb	r3, r3
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b25a      	sxtb	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3302      	adds	r3, #2
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b25a      	sxtb	r2, r3
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	b25b      	sxtb	r3, r3
 80074ec:	4313      	orrs	r3, r2
 80074ee:	b25b      	sxtb	r3, r3
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3301      	adds	r3, #1
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	b25a      	sxtb	r2, r3
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	b25b      	sxtb	r3, r3
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	b25b      	sxtb	r3, r3
 8007508:	4313      	orrs	r3, r2
 800750a:	b25a      	sxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3301      	adds	r3, #1
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3303      	adds	r3, #3
 8007518:	7819      	ldrb	r1, [r3, #0]
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	09db      	lsrs	r3, r3, #7
 800751e:	b2da      	uxtb	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3303      	adds	r3, #3
 8007524:	430a      	orrs	r2, r1
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3302      	adds	r3, #2
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b25a      	sxtb	r2, r3
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	b25b      	sxtb	r3, r3
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	b25b      	sxtb	r3, r3
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	b25b      	sxtb	r3, r3
 8007540:	4313      	orrs	r3, r2
 8007542:	b25a      	sxtb	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3302      	adds	r3, #2
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3303      	adds	r3, #3
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b25a      	sxtb	r2, r3
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	b25b      	sxtb	r3, r3
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	b25b      	sxtb	r3, r3
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	b25b      	sxtb	r3, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	b25a      	sxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3303      	adds	r3, #3
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	089b      	lsrs	r3, r3, #2
 8007572:	b2db      	uxtb	r3, r3
 8007574:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3301      	adds	r3, #1
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b25a      	sxtb	r2, r3
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	b25b      	sxtb	r3, r3
 8007582:	f003 0310 	and.w	r3, r3, #16
 8007586:	b25b      	sxtb	r3, r3
 8007588:	4313      	orrs	r3, r2
 800758a:	b25a      	sxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3301      	adds	r3, #1
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3302      	adds	r3, #2
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b25a      	sxtb	r2, r3
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	b25b      	sxtb	r3, r3
 80075ae:	4313      	orrs	r3, r2
 80075b0:	b25a      	sxtb	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3302      	adds	r3, #2
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b25a      	sxtb	r2, r3
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	b25b      	sxtb	r3, r3
 80075ca:	4313      	orrs	r3, r2
 80075cc:	b25b      	sxtb	r3, r3
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	701a      	strb	r2, [r3, #0]

}
 80075d4:	bf00      	nop
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3303      	adds	r3, #3
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	015b      	lsls	r3, r3, #5
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4313      	orrs	r3, r2
 8007600:	b2db      	uxtb	r3, r3
 8007602:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007606:	b2da      	uxtb	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3301      	adds	r3, #1
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	09db      	lsrs	r3, r3, #7
 800761c:	b2db      	uxtb	r3, r3
 800761e:	4313      	orrs	r3, r2
 8007620:	b2da      	uxtb	r2, r3
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	015b      	lsls	r3, r3, #5
 8007634:	b2db      	uxtb	r3, r3
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	b2da      	uxtb	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3301      	adds	r3, #1
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	08db      	lsrs	r3, r3, #3
 8007644:	b2db      	uxtb	r3, r3
 8007646:	4313      	orrs	r3, r2
 8007648:	b2da      	uxtb	r2, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	3302      	adds	r3, #2
 800764e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3301      	adds	r3, #1
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3302      	adds	r3, #2
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	b2db      	uxtb	r3, r3
 800766a:	4313      	orrs	r3, r2
 800766c:	b2da      	uxtb	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3303      	adds	r3, #3
 8007672:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3301      	adds	r3, #1
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	015b      	lsls	r3, r3, #5
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	b2da      	uxtb	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3302      	adds	r3, #2
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	08db      	lsrs	r3, r3, #3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	b2da      	uxtb	r2, r3
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	3304      	adds	r3, #4
 800769c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80076a0:	b2d2      	uxtb	r2, r2
 80076a2:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3302      	adds	r3, #2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3303      	adds	r3, #3
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	09db      	lsrs	r3, r3, #7
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	3305      	adds	r3, #5
 80076c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80076c4:	b2d2      	uxtb	r2, r2
 80076c6:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3302      	adds	r3, #2
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	015b      	lsls	r3, r3, #5
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3303      	adds	r3, #3
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	08db      	lsrs	r3, r3, #3
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3306      	adds	r3, #6
 80076ea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3303      	adds	r3, #3
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	09db      	lsrs	r3, r3, #7
 8007702:	b2db      	uxtb	r3, r3
 8007704:	4313      	orrs	r3, r2
 8007706:	b2da      	uxtb	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	3307      	adds	r3, #7
 800770c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	701a      	strb	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	@ 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	2210      	movs	r2, #16
 8007732:	2100      	movs	r1, #0
 8007734:	4618      	mov	r0, r3
 8007736:	f01a fa5d 	bl	8021bf4 <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800773a:	f107 0312 	add.w	r3, r7, #18
 800773e:	461a      	mov	r2, r3
 8007740:	2102      	movs	r1, #2
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7fe f85e 	bl	8005804 <phCryptoSym_Sw_GetConfig>
 8007748:	4603      	mov	r3, r0
 800774a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800774c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 8007752:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007754:	e058      	b.n	8007808 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 8007756:	8a7b      	ldrh	r3, [r7, #18]
 8007758:	2b08      	cmp	r3, #8
 800775a:	d005      	beq.n	8007768 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 800775c:	2b10      	cmp	r3, #16
 800775e:	d107      	bne.n	8007770 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 8007760:	2387      	movs	r3, #135	@ 0x87
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8007766:	e006      	b.n	8007776 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 8007768:	231b      	movs	r3, #27
 800776a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800776e:	e002      	b.n	8007776 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8007770:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8007774:	e048      	b.n	8007808 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 8007776:	f107 0314 	add.w	r3, r7, #20
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f879 	bl	8007874 <phCryptoSym_Sw_EncryptBlock>
 8007782:	4603      	mov	r3, r0
 8007784:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 800778c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800778e:	e03b      	b.n	8007808 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 8007790:	8a7b      	ldrh	r3, [r7, #18]
 8007792:	b2d9      	uxtb	r1, r3
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f838 	bl	8007810 <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 80077a0:	7d3b      	ldrb	r3, [r7, #20]
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da0d      	bge.n	80077c4 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 80077a8:	8a7b      	ldrh	r3, [r7, #18]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4413      	add	r3, r2
 80077b0:	7819      	ldrb	r1, [r3, #0]
 80077b2:	8a7b      	ldrh	r3, [r7, #18]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	4413      	add	r3, r2
 80077ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80077be:	404a      	eors	r2, r1
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 80077c4:	8a7b      	ldrh	r3, [r7, #18]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4619      	mov	r1, r3
 80077cc:	68b8      	ldr	r0, [r7, #8]
 80077ce:	f000 f81f 	bl	8007810 <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	b25b      	sxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	da0d      	bge.n	80077f8 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 80077dc:	8a7b      	ldrh	r3, [r7, #18]
 80077de:	3b01      	subs	r3, #1
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	7819      	ldrb	r1, [r3, #0]
 80077e6:	8a7b      	ldrh	r3, [r7, #18]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80077f2:	404a      	eors	r2, r1
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	2210      	movs	r2, #16
 80077fe:	2100      	movs	r1, #0
 8007800:	4618      	mov	r0, r3
 8007802:	f01a f9f7 	bl	8021bf4 <memset>

    return PH_ERR_SUCCESS;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	@ 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	460b      	mov	r3, r1
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	3b01      	subs	r3, #1
 8007826:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	781a      	ldrb	r2, [r3, #0]
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	440b      	add	r3, r1
 8007836:	0052      	lsls	r2, r2, #1
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	7819      	ldrb	r1, [r3, #0]
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	7dfa      	ldrb	r2, [r7, #23]
 800784c:	430a      	orrs	r2, r1
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	09db      	lsrs	r3, r3, #7
 800785c:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1de      	bne.n	8007822 <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
	...

08007874 <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007882:	2b05      	cmp	r3, #5
 8007884:	f200 8088 	bhi.w	8007998 <phCryptoSym_Sw_EncryptBlock+0x124>
 8007888:	a201      	add	r2, pc, #4	@ (adr r2, 8007890 <phCryptoSym_Sw_EncryptBlock+0x1c>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078a9 	.word	0x080078a9
 8007894:	080078c1 	.word	0x080078c1
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	08007909 	.word	0x08007909
 80078a4:	08007951 	.word	0x08007951
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80078a8:	220a      	movs	r2, #10
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fe f83e 	bl	800592e <phCryptoSym_Sw_Aes_EncryptBlock>
 80078b2:	4603      	mov	r3, r0
 80078b4:	81fb      	strh	r3, [r7, #14]
 80078b6:	89fb      	ldrh	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d070      	beq.n	800799e <phCryptoSym_Sw_EncryptBlock+0x12a>
 80078bc:	89fb      	ldrh	r3, [r7, #14]
 80078be:	e07a      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80078c0:	220c      	movs	r2, #12
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fe f832 	bl	800592e <phCryptoSym_Sw_Aes_EncryptBlock>
 80078ca:	4603      	mov	r3, r0
 80078cc:	81fb      	strh	r3, [r7, #14]
 80078ce:	89fb      	ldrh	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d066      	beq.n	80079a2 <phCryptoSym_Sw_EncryptBlock+0x12e>
 80078d4:	89fb      	ldrh	r3, [r7, #14]
 80078d6:	e06e      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80078d8:	220e      	movs	r2, #14
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fe f826 	bl	800592e <phCryptoSym_Sw_Aes_EncryptBlock>
 80078e2:	4603      	mov	r3, r0
 80078e4:	81fb      	strh	r3, [r7, #14]
 80078e6:	89fb      	ldrh	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d05c      	beq.n	80079a6 <phCryptoSym_Sw_EncryptBlock+0x132>
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	e062      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80078f0:	2200      	movs	r2, #0
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fe fdcf 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 80078fa:	4603      	mov	r3, r0
 80078fc:	81fb      	strh	r3, [r7, #14]
 80078fe:	89fb      	ldrh	r3, [r7, #14]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d052      	beq.n	80079aa <phCryptoSym_Sw_EncryptBlock+0x136>
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	e056      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8007908:	2200      	movs	r2, #0
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fe fdc3 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 8007912:	4603      	mov	r3, r0
 8007914:	81fb      	strh	r3, [r7, #14]
 8007916:	89fb      	ldrh	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <phCryptoSym_Sw_EncryptBlock+0xac>
 800791c:	89fb      	ldrh	r3, [r7, #14]
 800791e:	e04a      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007920:	2201      	movs	r2, #1
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe fe05 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 800792a:	4603      	mov	r3, r0
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	89fb      	ldrh	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <phCryptoSym_Sw_EncryptBlock+0xc4>
 8007934:	89fb      	ldrh	r3, [r7, #14]
 8007936:	e03e      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8007938:	2200      	movs	r2, #0
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fe fdab 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 8007942:	4603      	mov	r3, r0
 8007944:	81fb      	strh	r3, [r7, #14]
 8007946:	89fb      	ldrh	r3, [r7, #14]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d030      	beq.n	80079ae <phCryptoSym_Sw_EncryptBlock+0x13a>
 800794c:	89fb      	ldrh	r3, [r7, #14]
 800794e:	e032      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8007950:	2200      	movs	r2, #0
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fe fd9f 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 800795a:	4603      	mov	r3, r0
 800795c:	81fb      	strh	r3, [r7, #14]
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <phCryptoSym_Sw_EncryptBlock+0xf4>
 8007964:	89fb      	ldrh	r3, [r7, #14]
 8007966:	e026      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007968:	2201      	movs	r2, #1
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe fde1 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 8007972:	4603      	mov	r3, r0
 8007974:	81fb      	strh	r3, [r7, #14]
 8007976:	89fb      	ldrh	r3, [r7, #14]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <phCryptoSym_Sw_EncryptBlock+0x10c>
 800797c:	89fb      	ldrh	r3, [r7, #14]
 800797e:	e01a      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8007980:	2202      	movs	r2, #2
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fe fd87 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 800798a:	4603      	mov	r3, r0
 800798c:	81fb      	strh	r3, [r7, #14]
 800798e:	89fb      	ldrh	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00e      	beq.n	80079b2 <phCryptoSym_Sw_EncryptBlock+0x13e>
 8007994:	89fb      	ldrh	r3, [r7, #14]
 8007996:	e00e      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8007998:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800799c:	e00b      	b.n	80079b6 <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 800799e:	bf00      	nop
 80079a0:	e008      	b.n	80079b4 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80079a2:	bf00      	nop
 80079a4:	e006      	b.n	80079b4 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80079a6:	bf00      	nop
 80079a8:	e004      	b.n	80079b4 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80079aa:	bf00      	nop
 80079ac:	e002      	b.n	80079b4 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80079ae:	bf00      	nop
 80079b0:	e000      	b.n	80079b4 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80079b2:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop

080079c0 <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	f200 8088 	bhi.w	8007ae4 <phCryptoSym_Sw_DecryptBlock+0x124>
 80079d4:	a201      	add	r2, pc, #4	@ (adr r2, 80079dc <phCryptoSym_Sw_DecryptBlock+0x1c>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	08007a25 	.word	0x08007a25
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	08007a55 	.word	0x08007a55
 80079f0:	08007a9d 	.word	0x08007a9d
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80079f4:	220a      	movs	r2, #10
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fe f80b 	bl	8005a14 <phCryptoSym_Sw_Aes_DecryptBlock>
 80079fe:	4603      	mov	r3, r0
 8007a00:	81fb      	strh	r3, [r7, #14]
 8007a02:	89fb      	ldrh	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d070      	beq.n	8007aea <phCryptoSym_Sw_DecryptBlock+0x12a>
 8007a08:	89fb      	ldrh	r3, [r7, #14]
 8007a0a:	e07a      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8007a0c:	220c      	movs	r2, #12
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fd ffff 	bl	8005a14 <phCryptoSym_Sw_Aes_DecryptBlock>
 8007a16:	4603      	mov	r3, r0
 8007a18:	81fb      	strh	r3, [r7, #14]
 8007a1a:	89fb      	ldrh	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d066      	beq.n	8007aee <phCryptoSym_Sw_DecryptBlock+0x12e>
 8007a20:	89fb      	ldrh	r3, [r7, #14]
 8007a22:	e06e      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8007a24:	220e      	movs	r2, #14
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fd fff3 	bl	8005a14 <phCryptoSym_Sw_Aes_DecryptBlock>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	81fb      	strh	r3, [r7, #14]
 8007a32:	89fb      	ldrh	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05c      	beq.n	8007af2 <phCryptoSym_Sw_DecryptBlock+0x132>
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	e062      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fe fd77 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 8007a46:	4603      	mov	r3, r0
 8007a48:	81fb      	strh	r3, [r7, #14]
 8007a4a:	89fb      	ldrh	r3, [r7, #14]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d052      	beq.n	8007af6 <phCryptoSym_Sw_DecryptBlock+0x136>
 8007a50:	89fb      	ldrh	r3, [r7, #14]
 8007a52:	e056      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007a54:	2200      	movs	r2, #0
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fe fd6b 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	81fb      	strh	r3, [r7, #14]
 8007a62:	89fb      	ldrh	r3, [r7, #14]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <phCryptoSym_Sw_DecryptBlock+0xac>
 8007a68:	89fb      	ldrh	r3, [r7, #14]
 8007a6a:	e04a      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7fe fd11 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 8007a76:	4603      	mov	r3, r0
 8007a78:	81fb      	strh	r3, [r7, #14]
 8007a7a:	89fb      	ldrh	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <phCryptoSym_Sw_DecryptBlock+0xc4>
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	e03e      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007a84:	2200      	movs	r2, #0
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fe fd53 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	81fb      	strh	r3, [r7, #14]
 8007a92:	89fb      	ldrh	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d030      	beq.n	8007afa <phCryptoSym_Sw_DecryptBlock+0x13a>
 8007a98:	89fb      	ldrh	r3, [r7, #14]
 8007a9a:	e032      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7fe fd47 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	81fb      	strh	r3, [r7, #14]
 8007aaa:	89fb      	ldrh	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <phCryptoSym_Sw_DecryptBlock+0xf4>
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	e026      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7fe fced 	bl	8006498 <phCryptoSym_Sw_Des_EncryptBlock>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	81fb      	strh	r3, [r7, #14]
 8007ac2:	89fb      	ldrh	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <phCryptoSym_Sw_DecryptBlock+0x10c>
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	e01a      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8007acc:	2200      	movs	r2, #0
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7fe fd2f 	bl	8006534 <phCryptoSym_Sw_Des_DecryptBlock>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	81fb      	strh	r3, [r7, #14]
 8007ada:	89fb      	ldrh	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00e      	beq.n	8007afe <phCryptoSym_Sw_DecryptBlock+0x13e>
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	e00e      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8007ae4:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007ae8:	e00b      	b.n	8007b02 <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 8007aea:	bf00      	nop
 8007aec:	e008      	b.n	8007b00 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8007aee:	bf00      	nop
 8007af0:	e006      	b.n	8007b00 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8007af2:	bf00      	nop
 8007af4:	e004      	b.n	8007b00 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8007afe:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop

08007b0c <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	461a      	mov	r2, r3
 8007b18:	460b      	mov	r3, r1
 8007b1a:	817b      	strh	r3, [r7, #10]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <phCryptoSym_Encrypt+0x20>
 8007b26:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007b2a:	e02d      	b.n	8007b88 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <phCryptoSym_Encrypt+0x2c>
 8007b32:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007b36:	e027      	b.n	8007b88 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <phCryptoSym_Encrypt+0x38>
 8007b3e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007b42:	e021      	b.n	8007b88 <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b4c:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8007b50:	d004      	beq.n	8007b5c <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007b52:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007b56:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8007b58:	8afb      	ldrh	r3, [r7, #22]
 8007b5a:	e015      	b.n	8007b88 <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10b      	bne.n	8007b7e <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 8007b66:	893a      	ldrh	r2, [r7, #8]
 8007b68:	8979      	ldrh	r1, [r7, #10]
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7fd fb18 	bl	80051a8 <phCryptoSym_Sw_Encrypt>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 8007b7c:	e003      	b.n	8007b86 <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007b7e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007b82:	82fb      	strh	r3, [r7, #22]
            break;
 8007b84:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8007b86:	8afb      	ldrh	r3, [r7, #22]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	817b      	strh	r3, [r7, #10]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <phCryptoSym_CalculateMac+0x20>
 8007baa:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007bae:	e038      	b.n	8007c22 <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <phCryptoSym_CalculateMac+0x32>
 8007bbc:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007bc0:	e02f      	b.n	8007c22 <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <phCryptoSym_CalculateMac+0x3e>
 8007bc8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007bcc:	e029      	b.n	8007c22 <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <phCryptoSym_CalculateMac+0x4a>
 8007bd4:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007bd8:	e023      	b.n	8007c22 <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007be2:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8007be6:	d004      	beq.n	8007bf2 <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007be8:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007bec:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8007bee:	8afb      	ldrh	r3, [r7, #22]
 8007bf0:	e017      	b.n	8007c22 <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d10d      	bne.n	8007c18 <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 8007bfc:	893a      	ldrh	r2, [r7, #8]
 8007bfe:	8979      	ldrh	r1, [r7, #10]
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7fd fb89 	bl	8005324 <phCryptoSym_Sw_CalculateMac>
 8007c12:	4603      	mov	r3, r0
 8007c14:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 8007c16:	e003      	b.n	8007c20 <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007c18:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007c1c:	82fb      	strh	r3, [r7, #22]
            break;
 8007c1e:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8007c20:	8afb      	ldrh	r3, [r7, #22]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	4613      	mov	r3, r2
 8007c36:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <phCryptoSym_LoadIv+0x1a>
 8007c3e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007c42:	e024      	b.n	8007c8e <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <phCryptoSym_LoadIv+0x26>
 8007c4a:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007c4e:	e01e      	b.n	8007c8e <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c58:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8007c5c:	d004      	beq.n	8007c68 <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007c5e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007c62:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8007c64:	8afb      	ldrh	r3, [r7, #22]
 8007c66:	e012      	b.n	8007c8e <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d108      	bne.n	8007c84 <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	461a      	mov	r2, r3
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7fd fd11 	bl	80056a0 <phCryptoSym_Sw_LoadIv>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	82fb      	strh	r3, [r7, #22]
            break;
 8007c82:	e003      	b.n	8007c8c <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007c84:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007c88:	82fb      	strh	r3, [r7, #22]
            break;
 8007c8a:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8007c8c:	8afb      	ldrh	r3, [r7, #22]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <phCryptoSym_LoadKeyDirect+0x1a>
 8007caa:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007cae:	e024      	b.n	8007cfa <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <phCryptoSym_LoadKeyDirect+0x26>
 8007cb6:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8007cba:	e01e      	b.n	8007cfa <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007cc4:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8007cc8:	d004      	beq.n	8007cd4 <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007cca:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007cce:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8007cd0:	8afb      	ldrh	r3, [r7, #22]
 8007cd2:	e012      	b.n	8007cfa <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d108      	bne.n	8007cf0 <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7fd fd09 	bl	80056fc <phCryptoSym_Sw_LoadKeyDirect>
 8007cea:	4603      	mov	r3, r0
 8007cec:	82fb      	strh	r3, [r7, #22]
            break;
 8007cee:	e003      	b.n	8007cf8 <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8007cf0:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8007cf4:	82fb      	strh	r3, [r7, #22]
            break;
 8007cf6:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8007cf8:	8afb      	ldrh	r3, [r7, #22]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b088      	sub	sp, #32
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	460b      	mov	r3, r1
 8007d10:	817b      	strh	r3, [r7, #10]
 8007d12:	4613      	mov	r3, r2
 8007d14:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 8007d16:	897b      	ldrh	r3, [r7, #10]
 8007d18:	2b18      	cmp	r3, #24
 8007d1a:	d002      	beq.n	8007d22 <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 8007d1c:	f24e 2320 	movw	r3, #57888	@ 0xe220
 8007d20:	e07b      	b.n	8007e1a <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <phKeyStore_Sw_Init+0x2a>
 8007d28:	2321      	movs	r3, #33	@ 0x21
 8007d2a:	e076      	b.n	8007e1a <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <phKeyStore_Sw_Init+0x34>
 8007d32:	2321      	movs	r3, #33	@ 0x21
 8007d34:	e071      	b.n	8007e1a <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 8007d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <phKeyStore_Sw_Init+0x3e>
 8007d3c:	2321      	movs	r3, #33	@ 0x21
 8007d3e:	e06c      	b.n	8007e1a <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <phKeyStore_Sw_Init+0x48>
 8007d46:	2321      	movs	r3, #33	@ 0x21
 8007d48:	e067      	b.n	8007e1a <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f24e 2201 	movw	r2, #57857	@ 0xe201
 8007d50:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d5c:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	893a      	ldrh	r2, [r7, #8]
 8007d62:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007d68:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6e:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007d74:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	83fb      	strh	r3, [r7, #30]
 8007d7a:	e02e      	b.n	8007dda <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	8bfb      	ldrh	r3, [r7, #30]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d8a:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	8bfb      	ldrh	r3, [r7, #30]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d9a:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	83bb      	strh	r3, [r7, #28]
 8007da0:	e013      	b.n	8007dca <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	8bba      	ldrh	r2, [r7, #28]
 8007da8:	8bf9      	ldrh	r1, [r7, #30]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f90a 	bl	8007fc4 <phKeyStore_Sw_GetKeyValuePtrPos>
 8007db0:	4603      	mov	r3, r0
 8007db2:	837b      	strh	r3, [r7, #26]
 8007db4:	8b7b      	ldrh	r3, [r7, #26]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <phKeyStore_Sw_Init+0xbc>
 8007dba:	8b7b      	ldrh	r3, [r7, #26]
 8007dbc:	e02d      	b.n	8007e1a <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8007dc4:	8bbb      	ldrh	r3, [r7, #28]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	83bb      	strh	r3, [r7, #28]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	89db      	ldrh	r3, [r3, #14]
 8007dce:	8bba      	ldrh	r2, [r7, #28]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d3e6      	bcc.n	8007da2 <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 8007dd4:	8bfb      	ldrh	r3, [r7, #30]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	83fb      	strh	r3, [r7, #30]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	8bfa      	ldrh	r2, [r7, #30]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d3cb      	bcc.n	8007d7c <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 8007de4:	2300      	movs	r3, #0
 8007de6:	83fb      	strh	r3, [r7, #30]
 8007de8:	e011      	b.n	8007e0e <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	8bfb      	ldrh	r3, [r7, #30]
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	8bfb      	ldrh	r3, [r7, #30]
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	4413      	add	r3, r2
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 8007e08:	8bfb      	ldrh	r3, [r7, #30]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	83fb      	strh	r3, [r7, #30]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8a9b      	ldrh	r3, [r3, #20]
 8007e12:	8bfa      	ldrh	r2, [r7, #30]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d3e8      	bcc.n	8007dea <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	807b      	strh	r3, [r7, #2]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	899b      	ldrh	r3, [r3, #12]
 8007e36:	887a      	ldrh	r2, [r7, #2]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d302      	bcc.n	8007e42 <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007e3c:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007e40:	e038      	b.n	8007eb4 <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 8007e42:	883b      	ldrh	r3, [r7, #0]
 8007e44:	2b06      	cmp	r3, #6
 8007e46:	d902      	bls.n	8007e4e <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007e48:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007e4c:	e032      	b.n	8007eb4 <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 8007e4e:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	887b      	ldrh	r3, [r7, #2]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	883a      	ldrh	r2, [r7, #0]
 8007e5c:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	887b      	ldrh	r3, [r7, #2]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e6c:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	81fb      	strh	r3, [r7, #14]
 8007e72:	e019      	b.n	8007ea8 <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 8007e74:	f107 0308 	add.w	r3, r7, #8
 8007e78:	89fa      	ldrh	r2, [r7, #14]
 8007e7a:	8879      	ldrh	r1, [r7, #2]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8a1 	bl	8007fc4 <phKeyStore_Sw_GetKeyValuePtrPos>
 8007e82:	4603      	mov	r3, r0
 8007e84:	81bb      	strh	r3, [r7, #12]
 8007e86:	89bb      	ldrh	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <phKeyStore_Sw_FormatKeyEntry+0x6e>
 8007e8c:	89bb      	ldrh	r3, [r7, #12]
 8007e8e:	e011      	b.n	8007eb4 <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f019 fea9 	bl	8021bf4 <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8007ea2:	89fb      	ldrh	r3, [r7, #14]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	89db      	ldrh	r3, [r3, #14]
 8007eac:	89fa      	ldrh	r2, [r7, #14]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d3e0      	bcc.n	8007e74 <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	817b      	strh	r3, [r7, #10]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	813b      	strh	r3, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 8007ed6:	f107 0310 	add.w	r3, r7, #16
 8007eda:	893a      	ldrh	r2, [r7, #8]
 8007edc:	8979      	ldrh	r1, [r7, #10]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f827 	bl	8007f32 <phKeyStore_Sw_GetKeyValuePtrVersion>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	82fb      	strh	r3, [r7, #22]
 8007ee8:	8afb      	ldrh	r3, [r7, #22]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <phKeyStore_Sw_SetKey+0x36>
 8007eee:	8afb      	ldrh	r3, [r7, #22]
 8007ef0:	e01b      	b.n	8007f2a <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	897b      	ldrh	r3, [r7, #10]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	88fa      	ldrh	r2, [r7, #6]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d002      	beq.n	8007f0a <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007f04:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007f08:	e00f      	b.n	8007f2a <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	461c      	mov	r4, r3
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 f88d 	bl	8008030 <phKeyStore_GetKeySize>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f019 fefe 	bl	8021d1e <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007f26:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd90      	pop	{r4, r7, pc}

08007f32 <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	817b      	strh	r3, [r7, #10]
 8007f40:	4613      	mov	r3, r2
 8007f42:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	899b      	ldrh	r3, [r3, #12]
 8007f4e:	897a      	ldrh	r2, [r7, #10]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d302      	bcc.n	8007f5a <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007f54:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007f58:	e02e      	b.n	8007fb8 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	82fb      	strh	r3, [r7, #22]
 8007f5e:	e01b      	b.n	8007f98 <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	89db      	ldrh	r3, [r3, #14]
 8007f68:	8979      	ldrh	r1, [r7, #10]
 8007f6a:	fb11 f303 	smulbb	r3, r1, r3
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4619      	mov	r1, r3
 8007f72:	8afb      	ldrh	r3, [r7, #22]
 8007f74:	440b      	add	r3, r1
 8007f76:	4619      	mov	r1, r3
 8007f78:	460b      	mov	r3, r1
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	440b      	add	r3, r1
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	441a      	add	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	8c1b      	ldrh	r3, [r3, #32]
 8007f8c:	893a      	ldrh	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d008      	beq.n	8007fa4 <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8007f92:	8afb      	ldrh	r3, [r7, #22]
 8007f94:	3301      	adds	r3, #1
 8007f96:	82fb      	strh	r3, [r7, #22]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	89db      	ldrh	r3, [r3, #14]
 8007f9c:	8afa      	ldrh	r2, [r7, #22]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d3de      	bcc.n	8007f60 <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 8007fa2:	e000      	b.n	8007fa6 <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 8007fa4:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	89db      	ldrh	r3, [r3, #14]
 8007faa:	8afa      	ldrh	r2, [r7, #22]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d102      	bne.n	8007fb6 <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007fb0:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007fb4:	e000      	b.n	8007fb8 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	817b      	strh	r3, [r7, #10]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	899b      	ldrh	r3, [r3, #12]
 8007fe0:	897a      	ldrh	r2, [r7, #10]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d302      	bcc.n	8007fec <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007fe6:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007fea:	e01b      	b.n	8008024 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	89db      	ldrh	r3, [r3, #14]
 8007ff0:	893a      	ldrh	r2, [r7, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d302      	bcc.n	8007ffc <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8007ff6:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8007ffa:	e013      	b.n	8008024 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	89db      	ldrh	r3, [r3, #14]
 8008004:	8979      	ldrh	r1, [r7, #10]
 8008006:	fb11 f303 	smulbb	r3, r1, r3
 800800a:	b29b      	uxth	r3, r3
 800800c:	4619      	mov	r1, r3
 800800e:	893b      	ldrh	r3, [r7, #8]
 8008010:	440b      	add	r3, r1
 8008012:	4619      	mov	r1, r3
 8008014:	460b      	mov	r3, r1
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	440b      	add	r3, r1
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	2b06      	cmp	r3, #6
 800803e:	d81b      	bhi.n	8008078 <phKeyStore_GetKeySize+0x48>
 8008040:	a201      	add	r2, pc, #4	@ (adr r2, 8008048 <phKeyStore_GetKeySize+0x18>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	0800806d 	.word	0x0800806d
 800804c:	08008071 	.word	0x08008071
 8008050:	08008075 	.word	0x08008075
 8008054:	08008069 	.word	0x08008069
 8008058:	0800806d 	.word	0x0800806d
 800805c:	08008071 	.word	0x08008071
 8008060:	08008065 	.word	0x08008065
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8008064:	230c      	movs	r3, #12
 8008066:	e008      	b.n	800807a <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8008068:	2308      	movs	r3, #8
 800806a:	e006      	b.n	800807a <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 800806c:	2310      	movs	r3, #16
 800806e:	e004      	b.n	800807a <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 8008070:	2318      	movs	r3, #24
 8008072:	e002      	b.n	800807a <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8008074:	2320      	movs	r3, #32
 8008076:	e000      	b.n	800807a <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8008078:	2300      	movs	r3, #0
    }
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop

08008088 <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8008096:	2302      	movs	r3, #2
 8008098:	e010      	b.n	80080bc <phNfcLib_SetContext+0x34>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a0a      	ldr	r2, [pc, #40]	@ (80080c8 <phNfcLib_SetContext+0x40>)
 80080a0:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b07      	ldr	r3, [pc, #28]	@ (80080c8 <phNfcLib_SetContext+0x40>)
 80080aa:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b04      	ldr	r3, [pc, #16]	@ (80080c8 <phNfcLib_SetContext+0x40>)
 80080b6:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200008e4 	.word	0x200008e4

080080cc <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80080d2:	2300      	movs	r3, #0
 80080d4:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 80080d6:	2301      	movs	r3, #1
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	4b3c      	ldr	r3, [pc, #240]	@ (80081cc <phNfcLib_CommonLayer_Init+0x100>)
 80080dc:	9302      	str	r3, [sp, #8]
 80080de:	2302      	movs	r3, #2
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	4b3b      	ldr	r3, [pc, #236]	@ (80081d0 <phNfcLib_CommonLayer_Init+0x104>)
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2308      	movs	r3, #8
 80080e8:	4a3a      	ldr	r2, [pc, #232]	@ (80081d4 <phNfcLib_CommonLayer_Init+0x108>)
 80080ea:	2118      	movs	r1, #24
 80080ec:	483a      	ldr	r0, [pc, #232]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 80080ee:	f7ff fe08 	bl	8007d02 <phKeyStore_Sw_Init>
 80080f2:	4603      	mov	r3, r0
 80080f4:	80fb      	strh	r3, [r7, #6]
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d162      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 80080fc:	2206      	movs	r2, #6
 80080fe:	2101      	movs	r1, #1
 8008100:	4835      	ldr	r0, [pc, #212]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 8008102:	f7ff fe8e 	bl	8007e22 <phKeyStore_Sw_FormatKeyEntry>
 8008106:	4603      	mov	r3, r0
 8008108:	80fb      	strh	r3, [r7, #6]
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d158      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 8008110:	2300      	movs	r3, #0
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	4b31      	ldr	r3, [pc, #196]	@ (80081dc <phNfcLib_CommonLayer_Init+0x110>)
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2306      	movs	r3, #6
 800811a:	2200      	movs	r2, #0
 800811c:	2101      	movs	r1, #1
 800811e:	482e      	ldr	r0, [pc, #184]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 8008120:	f7ff fecc 	bl	8007ebc <phKeyStore_Sw_SetKey>
 8008124:	4603      	mov	r3, r0
 8008126:	80fb      	strh	r3, [r7, #6]
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d149      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 800812e:	4a2a      	ldr	r2, [pc, #168]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 8008130:	2140      	movs	r1, #64	@ 0x40
 8008132:	482b      	ldr	r0, [pc, #172]	@ (80081e0 <phNfcLib_CommonLayer_Init+0x114>)
 8008134:	f7fc ffed 	bl	8005112 <phCryptoSym_Sw_Init>
 8008138:	4603      	mov	r3, r0
 800813a:	80fb      	strh	r3, [r7, #6]
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d13f      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8008142:	4a25      	ldr	r2, [pc, #148]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 8008144:	2140      	movs	r1, #64	@ 0x40
 8008146:	4827      	ldr	r0, [pc, #156]	@ (80081e4 <phNfcLib_CommonLayer_Init+0x118>)
 8008148:	f7fc ffe3 	bl	8005112 <phCryptoSym_Sw_Init>
 800814c:	4603      	mov	r3, r0
 800814e:	80fb      	strh	r3, [r7, #6]
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d135      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8008156:	4a20      	ldr	r2, [pc, #128]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 8008158:	2140      	movs	r1, #64	@ 0x40
 800815a:	4823      	ldr	r0, [pc, #140]	@ (80081e8 <phNfcLib_CommonLayer_Init+0x11c>)
 800815c:	f7fc ffd9 	bl	8005112 <phCryptoSym_Sw_Init>
 8008160:	4603      	mov	r3, r0
 8008162:	80fb      	strh	r3, [r7, #6]
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d12b      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 800816a:	22ff      	movs	r2, #255	@ 0xff
 800816c:	2100      	movs	r1, #0
 800816e:	481f      	ldr	r0, [pc, #124]	@ (80081ec <phNfcLib_CommonLayer_Init+0x120>)
 8008170:	f019 fd40 	bl	8021bf4 <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 8008174:	22ff      	movs	r2, #255	@ 0xff
 8008176:	491d      	ldr	r1, [pc, #116]	@ (80081ec <phNfcLib_CommonLayer_Init+0x120>)
 8008178:	481d      	ldr	r0, [pc, #116]	@ (80081f0 <phNfcLib_CommonLayer_Init+0x124>)
 800817a:	f000 fc49 	bl	8008a10 <phTMIUtils_Init>
 800817e:	4603      	mov	r3, r0
 8008180:	80fb      	strh	r3, [r7, #6]
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11c      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8008188:	4a13      	ldr	r2, [pc, #76]	@ (80081d8 <phNfcLib_CommonLayer_Init+0x10c>)
 800818a:	2140      	movs	r1, #64	@ 0x40
 800818c:	4819      	ldr	r0, [pc, #100]	@ (80081f4 <phNfcLib_CommonLayer_Init+0x128>)
 800818e:	f7fc ffc0 	bl	8005112 <phCryptoSym_Sw_Init>
 8008192:	4603      	mov	r3, r0
 8008194:	80fb      	strh	r3, [r7, #6]
 8008196:	88fb      	ldrh	r3, [r7, #6]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d112      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 800819c:	4a15      	ldr	r2, [pc, #84]	@ (80081f4 <phNfcLib_CommonLayer_Init+0x128>)
 800819e:	2120      	movs	r1, #32
 80081a0:	4815      	ldr	r0, [pc, #84]	@ (80081f8 <phNfcLib_CommonLayer_Init+0x12c>)
 80081a2:	f7fc fccd 	bl	8004b40 <phCryptoRng_Sw_Init>
 80081a6:	4603      	mov	r3, r0
 80081a8:	80fb      	strh	r3, [r7, #6]
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d108      	bne.n	80081c2 <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 80081b0:	2208      	movs	r2, #8
 80081b2:	4912      	ldr	r1, [pc, #72]	@ (80081fc <phNfcLib_CommonLayer_Init+0x130>)
 80081b4:	4810      	ldr	r0, [pc, #64]	@ (80081f8 <phNfcLib_CommonLayer_Init+0x12c>)
 80081b6:	f7fc ff73 	bl	80050a0 <phCryptoRng_Seed>
 80081ba:	4603      	mov	r3, r0
 80081bc:	80fb      	strh	r3, [r7, #6]
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 80081c2:	88fb      	ldrh	r3, [r7, #6]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20001bd8 	.word	0x20001bd8
 80081d0:	200019b8 	.word	0x200019b8
 80081d4:	20001998 	.word	0x20001998
 80081d8:	20000a80 	.word	0x20000a80
 80081dc:	20000064 	.word	0x20000064
 80081e0:	20001124 	.word	0x20001124
 80081e4:	20001164 	.word	0x20001164
 80081e8:	200011a4 	.word	0x200011a4
 80081ec:	200015b4 	.word	0x200015b4
 80081f0:	20001944 	.word	0x20001944
 80081f4:	20001958 	.word	0x20001958
 80081f8:	200011e4 	.word	0x200011e4
 80081fc:	200015ac 	.word	0x200015ac

08008200 <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8008206:	2300      	movs	r3, #0
 8008208:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 800820a:	4a3c      	ldr	r2, [pc, #240]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 800820c:	2118      	movs	r1, #24
 800820e:	483c      	ldr	r0, [pc, #240]	@ (8008300 <phNfcLib_PAL_Init+0x100>)
 8008210:	f00d f92a 	bl	8015468 <phpalI14443p3a_Sw_Init>
 8008214:	4603      	mov	r3, r0
 8008216:	80fb      	strh	r3, [r7, #6]
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d169      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 800821e:	4a37      	ldr	r2, [pc, #220]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 8008220:	212c      	movs	r1, #44	@ 0x2c
 8008222:	4838      	ldr	r0, [pc, #224]	@ (8008304 <phNfcLib_PAL_Init+0x104>)
 8008224:	f00d ff20 	bl	8016068 <phpalI14443p3b_Sw_Init>
 8008228:	4603      	mov	r3, r0
 800822a:	80fb      	strh	r3, [r7, #6]
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d15f      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 8008232:	4a32      	ldr	r2, [pc, #200]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 8008234:	2114      	movs	r1, #20
 8008236:	4834      	ldr	r0, [pc, #208]	@ (8008308 <phNfcLib_PAL_Init+0x108>)
 8008238:	f010 f836 	bl	80182a8 <phpalI14443p4a_Sw_Init>
 800823c:	4603      	mov	r3, r0
 800823e:	80fb      	strh	r3, [r7, #6]
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d155      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 8008246:	4a2d      	ldr	r2, [pc, #180]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 8008248:	2114      	movs	r1, #20
 800824a:	4830      	ldr	r0, [pc, #192]	@ (800830c <phNfcLib_PAL_Init+0x10c>)
 800824c:	f00e fd80 	bl	8016d50 <phpalI14443p4_Sw_Init>
 8008250:	4603      	mov	r3, r0
 8008252:	80fb      	strh	r3, [r7, #6]
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d14b      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 800825a:	4b2c      	ldr	r3, [pc, #176]	@ (800830c <phNfcLib_PAL_Init+0x10c>)
 800825c:	4a27      	ldr	r2, [pc, #156]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 800825e:	210c      	movs	r1, #12
 8008260:	482b      	ldr	r0, [pc, #172]	@ (8008310 <phNfcLib_PAL_Init+0x110>)
 8008262:	f011 fe1a 	bl	8019e9a <phpalMifare_Sw_Init>
 8008266:	4603      	mov	r3, r0
 8008268:	80fb      	strh	r3, [r7, #6]
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d140      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8008270:	4a22      	ldr	r2, [pc, #136]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 8008272:	2120      	movs	r1, #32
 8008274:	4827      	ldr	r0, [pc, #156]	@ (8008314 <phNfcLib_PAL_Init+0x114>)
 8008276:	f00c fe9d 	bl	8014fb4 <phpalFelica_Sw_Init>
 800827a:	4603      	mov	r3, r0
 800827c:	80fb      	strh	r3, [r7, #6]
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d136      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 8008284:	4a1d      	ldr	r2, [pc, #116]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 8008286:	211c      	movs	r1, #28
 8008288:	4823      	ldr	r0, [pc, #140]	@ (8008318 <phNfcLib_PAL_Init+0x118>)
 800828a:	f011 fe2f 	bl	8019eec <phpalSli15693_Sw_Init>
 800828e:	4603      	mov	r3, r0
 8008290:	80fb      	strh	r3, [r7, #6]
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d12c      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8008298:	4a18      	ldr	r2, [pc, #96]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 800829a:	210c      	movs	r1, #12
 800829c:	481f      	ldr	r0, [pc, #124]	@ (800831c <phNfcLib_PAL_Init+0x11c>)
 800829e:	f010 fddc 	bl	8018e5a <phpalI18000p3m3_Sw_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	80fb      	strh	r3, [r7, #6]
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d122      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_EPCUID_SW */

        /* Initialize 18092 Initiator PAL component */
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mPI_Sw_Init(
 80082ac:	4a13      	ldr	r2, [pc, #76]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 80082ae:	2124      	movs	r1, #36	@ 0x24
 80082b0:	481b      	ldr	r0, [pc, #108]	@ (8008320 <phNfcLib_PAL_Init+0x120>)
 80082b2:	f010 ffb9 	bl	8019228 <phpalI18092mPI_Sw_Init>
 80082b6:	4603      	mov	r3, r0
 80082b8:	80fb      	strh	r3, [r7, #6]
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d118      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 80082c0:	4b18      	ldr	r3, [pc, #96]	@ (8008324 <phNfcLib_PAL_Init+0x124>)
 80082c2:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 80082c6:	4a0d      	ldr	r2, [pc, #52]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 80082c8:	2134      	movs	r1, #52	@ 0x34
 80082ca:	4817      	ldr	r0, [pc, #92]	@ (8008328 <phNfcLib_PAL_Init+0x128>)
 80082cc:	f010 fd1e 	bl	8018d0c <phpalI14443p4mC_Sw_Init>
 80082d0:	4603      	mov	r3, r0
 80082d2:	80fb      	strh	r3, [r7, #6]
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <phNfcLib_PAL_Init+0xf2>
            ));
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

        /* Initialize 18092 Target PAL component */
#ifdef NXPBUILD__PHPAL_I18092MT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mT_Sw_Init(
 80082da:	4b12      	ldr	r3, [pc, #72]	@ (8008324 <phNfcLib_PAL_Init+0x124>)
 80082dc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80082e0:	4a06      	ldr	r2, [pc, #24]	@ (80082fc <phNfcLib_PAL_Init+0xfc>)
 80082e2:	214c      	movs	r1, #76	@ 0x4c
 80082e4:	4811      	ldr	r0, [pc, #68]	@ (800832c <phNfcLib_PAL_Init+0x12c>)
 80082e6:	f011 fd27 	bl	8019d38 <phpalI18092mT_Sw_Init>
 80082ea:	4603      	mov	r3, r0
 80082ec:	80fb      	strh	r3, [r7, #6]
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 80082f2:	88fb      	ldrh	r3, [r7, #6]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200008ec 	.word	0x200008ec
 8008300:	20000a9c 	.word	0x20000a9c
 8008304:	20000ab4 	.word	0x20000ab4
 8008308:	20000ae0 	.word	0x20000ae0
 800830c:	20000af4 	.word	0x20000af4
 8008310:	20000bfc 	.word	0x20000bfc
 8008314:	20000b30 	.word	0x20000b30
 8008318:	20000b08 	.word	0x20000b08
 800831c:	20000b24 	.word	0x20000b24
 8008320:	20000b50 	.word	0x20000b50
 8008324:	200008e4 	.word	0x200008e4
 8008328:	20000bc4 	.word	0x20000bc4
 800832c:	20000b74 	.word	0x20000b74

08008330 <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8008336:	2300      	movs	r3, #0
 8008338:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 800833a:	4a7b      	ldr	r2, [pc, #492]	@ (8008528 <phNfcLib_AL_Init+0x1f8>)
 800833c:	210c      	movs	r1, #12
 800833e:	487b      	ldr	r0, [pc, #492]	@ (800852c <phNfcLib_AL_Init+0x1fc>)
 8008340:	f005 fc14 	bl	800db6c <phalFelica_Sw_Init>
 8008344:	4603      	mov	r3, r0
 8008346:	80fb      	strh	r3, [r7, #6]
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 80e6 	bne.w	800851c <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 8008350:	4b77      	ldr	r3, [pc, #476]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 8008352:	4a78      	ldr	r2, [pc, #480]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 8008354:	210c      	movs	r1, #12
 8008356:	4878      	ldr	r0, [pc, #480]	@ (8008538 <phNfcLib_AL_Init+0x208>)
 8008358:	f005 fd60 	bl	800de1c <phalMfc_Sw_Init>
 800835c:	4603      	mov	r3, r0
 800835e:	80fb      	strh	r3, [r7, #6]
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f040 80da 	bne.w	800851c <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8008368:	4b74      	ldr	r3, [pc, #464]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	2300      	movs	r3, #0
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4b6f      	ldr	r3, [pc, #444]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 8008372:	4a70      	ldr	r2, [pc, #448]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 8008374:	211c      	movs	r1, #28
 8008376:	4872      	ldr	r0, [pc, #456]	@ (8008540 <phNfcLib_AL_Init+0x210>)
 8008378:	f006 f850 	bl	800e41c <phalMful_Sw_Init>
 800837c:	4603      	mov	r3, r0
 800837e:	80fb      	strh	r3, [r7, #6]
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f040 80ca 	bne.w	800851c <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8008388:	4b6e      	ldr	r3, [pc, #440]	@ (8008544 <phNfcLib_AL_Init+0x214>)
 800838a:	9302      	str	r3, [sp, #8]
 800838c:	4b6b      	ldr	r3, [pc, #428]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	2300      	movs	r3, #0
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4b66      	ldr	r3, [pc, #408]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 8008396:	4a67      	ldr	r2, [pc, #412]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 8008398:	2168      	movs	r1, #104	@ 0x68
 800839a:	486b      	ldr	r0, [pc, #428]	@ (8008548 <phNfcLib_AL_Init+0x218>)
 800839c:	f005 fd67 	bl	800de6e <phalMfdf_Sw_Init>
 80083a0:	4603      	mov	r3, r0
 80083a2:	80fb      	strh	r3, [r7, #6]
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80b8 	bne.w	800851c <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 80083ac:	4b67      	ldr	r3, [pc, #412]	@ (800854c <phNfcLib_AL_Init+0x21c>)
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	4a67      	ldr	r2, [pc, #412]	@ (8008550 <phNfcLib_AL_Init+0x220>)
 80083b2:	8812      	ldrh	r2, [r2, #0]
 80083b4:	9205      	str	r2, [sp, #20]
 80083b6:	4a67      	ldr	r2, [pc, #412]	@ (8008554 <phNfcLib_AL_Init+0x224>)
 80083b8:	9204      	str	r2, [sp, #16]
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	4b66      	ldr	r3, [pc, #408]	@ (8008558 <phNfcLib_AL_Init+0x228>)
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	4b5e      	ldr	r3, [pc, #376]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	4b65      	ldr	r3, [pc, #404]	@ (800855c <phNfcLib_AL_Init+0x22c>)
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	4b59      	ldr	r3, [pc, #356]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 80083ca:	4a5a      	ldr	r2, [pc, #360]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 80083cc:	2154      	movs	r1, #84	@ 0x54
 80083ce:	4864      	ldr	r0, [pc, #400]	@ (8008560 <phNfcLib_AL_Init+0x230>)
 80083d0:	f006 f959 	bl	800e686 <phalVca_Sw_Init>
 80083d4:	4603      	mov	r3, r0
 80083d6:	80fb      	strh	r3, [r7, #6]
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f040 809e 	bne.w	800851c <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 80083e0:	4b58      	ldr	r3, [pc, #352]	@ (8008544 <phNfcLib_AL_Init+0x214>)
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	4b5e      	ldr	r3, [pc, #376]	@ (8008560 <phNfcLib_AL_Init+0x230>)
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008564 <phNfcLib_AL_Init+0x234>)
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	4b53      	ldr	r3, [pc, #332]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	4b5d      	ldr	r3, [pc, #372]	@ (8008568 <phNfcLib_AL_Init+0x238>)
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	4b59      	ldr	r3, [pc, #356]	@ (800855c <phNfcLib_AL_Init+0x22c>)
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 80083fa:	4a4e      	ldr	r2, [pc, #312]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 80083fc:	21b4      	movs	r1, #180	@ 0xb4
 80083fe:	485b      	ldr	r0, [pc, #364]	@ (800856c <phNfcLib_AL_Init+0x23c>)
 8008400:	f005 fd9f 	bl	800df42 <phalMfdfEVx_Sw_Init>
 8008404:	4603      	mov	r3, r0
 8008406:	80fb      	strh	r3, [r7, #6]
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 8086 	bne.w	800851c <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8008410:	4956      	ldr	r1, [pc, #344]	@ (800856c <phNfcLib_AL_Init+0x23c>)
 8008412:	4853      	ldr	r0, [pc, #332]	@ (8008560 <phNfcLib_AL_Init+0x230>)
 8008414:	f006 faad 	bl	800e972 <phalVca_SetApplicationType>
 8008418:	4603      	mov	r3, r0
 800841a:	80fb      	strh	r3, [r7, #6]
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d17c      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 8008422:	4b48      	ldr	r3, [pc, #288]	@ (8008544 <phNfcLib_AL_Init+0x214>)
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	4b4f      	ldr	r3, [pc, #316]	@ (8008564 <phNfcLib_AL_Init+0x234>)
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	4b44      	ldr	r3, [pc, #272]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 800842c:	9302      	str	r3, [sp, #8]
 800842e:	4b4e      	ldr	r3, [pc, #312]	@ (8008568 <phNfcLib_AL_Init+0x238>)
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	4b4a      	ldr	r3, [pc, #296]	@ (800855c <phNfcLib_AL_Init+0x22c>)
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b3e      	ldr	r3, [pc, #248]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 8008438:	4a3e      	ldr	r2, [pc, #248]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 800843a:	21ac      	movs	r1, #172	@ 0xac
 800843c:	484c      	ldr	r0, [pc, #304]	@ (8008570 <phNfcLib_AL_Init+0x240>)
 800843e:	f005 fe32 	bl	800e0a6 <phalMfdfLight_Sw_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	80fb      	strh	r3, [r7, #6]
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d167      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 800844c:	4b44      	ldr	r3, [pc, #272]	@ (8008560 <phNfcLib_AL_Init+0x230>)
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	4b44      	ldr	r3, [pc, #272]	@ (8008564 <phNfcLib_AL_Init+0x234>)
 8008452:	9304      	str	r3, [sp, #16]
 8008454:	4b47      	ldr	r3, [pc, #284]	@ (8008574 <phNfcLib_AL_Init+0x244>)
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	4b38      	ldr	r3, [pc, #224]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	4b42      	ldr	r3, [pc, #264]	@ (8008568 <phNfcLib_AL_Init+0x238>)
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	4b3e      	ldr	r3, [pc, #248]	@ (800855c <phNfcLib_AL_Init+0x22c>)
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4b32      	ldr	r3, [pc, #200]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 8008466:	4a33      	ldr	r2, [pc, #204]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 8008468:	2184      	movs	r1, #132	@ 0x84
 800846a:	4843      	ldr	r0, [pc, #268]	@ (8008578 <phNfcLib_AL_Init+0x248>)
 800846c:	f005 fed9 	bl	800e222 <phalMfpEVx_Sw_Init>
 8008470:	4603      	mov	r3, r0
 8008472:	80fb      	strh	r3, [r7, #6]
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d150      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 800847a:	493f      	ldr	r1, [pc, #252]	@ (8008578 <phNfcLib_AL_Init+0x248>)
 800847c:	4838      	ldr	r0, [pc, #224]	@ (8008560 <phNfcLib_AL_Init+0x230>)
 800847e:	f006 fa78 	bl	800e972 <phalVca_SetApplicationType>
 8008482:	4603      	mov	r3, r0
 8008484:	80fb      	strh	r3, [r7, #6]
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d147      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 800848c:	4b2d      	ldr	r3, [pc, #180]	@ (8008544 <phNfcLib_AL_Init+0x214>)
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	4b2a      	ldr	r3, [pc, #168]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 8008492:	9302      	str	r3, [sp, #8]
 8008494:	4b34      	ldr	r3, [pc, #208]	@ (8008568 <phNfcLib_AL_Init+0x238>)
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	4b30      	ldr	r3, [pc, #192]	@ (800855c <phNfcLib_AL_Init+0x22c>)
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 800849e:	4a25      	ldr	r2, [pc, #148]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 80084a0:	21a8      	movs	r1, #168	@ 0xa8
 80084a2:	4836      	ldr	r0, [pc, #216]	@ (800857c <phNfcLib_AL_Init+0x24c>)
 80084a4:	f005 fc06 	bl	800dcb4 <phalMfNtag42XDna_Sw_Init>
 80084a8:	4603      	mov	r3, r0
 80084aa:	80fb      	strh	r3, [r7, #6]
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d134      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 80084b2:	4a33      	ldr	r2, [pc, #204]	@ (8008580 <phNfcLib_AL_Init+0x250>)
 80084b4:	2110      	movs	r1, #16
 80084b6:	4833      	ldr	r0, [pc, #204]	@ (8008584 <phNfcLib_AL_Init+0x254>)
 80084b8:	f005 ffeb 	bl	800e492 <phalT1T_Sw_Init>
 80084bc:	4603      	mov	r3, r0
 80084be:	80fb      	strh	r3, [r7, #6]
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d12a      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 80084c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008530 <phNfcLib_AL_Init+0x200>)
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	4b1c      	ldr	r3, [pc, #112]	@ (800853c <phNfcLib_AL_Init+0x20c>)
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	2300      	movs	r3, #0
 80084d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008588 <phNfcLib_AL_Init+0x258>)
 80084d2:	2120      	movs	r1, #32
 80084d4:	482d      	ldr	r0, [pc, #180]	@ (800858c <phNfcLib_AL_Init+0x25c>)
 80084d6:	f005 fbb4 	bl	800dc42 <phalICode_Sw_Init>
 80084da:	4603      	mov	r3, r0
 80084dc:	80fb      	strh	r3, [r7, #6]
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d11b      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 80084e4:	4b26      	ldr	r3, [pc, #152]	@ (8008580 <phNfcLib_AL_Init+0x250>)
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	4b28      	ldr	r3, [pc, #160]	@ (800858c <phNfcLib_AL_Init+0x25c>)
 80084ea:	9302      	str	r3, [sp, #8]
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <phNfcLib_AL_Init+0x204>)
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	4b0e      	ldr	r3, [pc, #56]	@ (800852c <phNfcLib_AL_Init+0x1fc>)
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	4b12      	ldr	r3, [pc, #72]	@ (8008540 <phNfcLib_AL_Init+0x210>)
 80084f6:	4a23      	ldr	r2, [pc, #140]	@ (8008584 <phNfcLib_AL_Init+0x254>)
 80084f8:	2180      	movs	r1, #128	@ 0x80
 80084fa:	4825      	ldr	r0, [pc, #148]	@ (8008590 <phNfcLib_AL_Init+0x260>)
 80084fc:	f006 f873 	bl	800e5e6 <phalTop_Sw_Init>
 8008500:	4603      	mov	r3, r0
 8008502:	80fb      	strh	r3, [r7, #6]
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d108      	bne.n	800851c <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 800850a:	4a22      	ldr	r2, [pc, #136]	@ (8008594 <phNfcLib_AL_Init+0x264>)
 800850c:	210c      	movs	r1, #12
 800850e:	4822      	ldr	r0, [pc, #136]	@ (8008598 <phNfcLib_AL_Init+0x268>)
 8008510:	f005 fb54 	bl	800dbbc <phalI18000p3m3_Sw_Init>
 8008514:	4603      	mov	r3, r0
 8008516:	80fb      	strh	r3, [r7, #6]
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 800851c:	88fb      	ldrh	r3, [r7, #6]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20000b30 	.word	0x20000b30
 800852c:	20000c14 	.word	0x20000c14
 8008530:	20000a80 	.word	0x20000a80
 8008534:	20000bfc 	.word	0x20000bfc
 8008538:	20000c40 	.word	0x20000c40
 800853c:	200011e4 	.word	0x200011e4
 8008540:	20000e98 	.word	0x20000e98
 8008544:	200008ec 	.word	0x200008ec
 8008548:	20000c4c 	.word	0x20000c4c
 800854c:	2000005e 	.word	0x2000005e
 8008550:	20000060 	.word	0x20000060
 8008554:	20001774 	.word	0x20001774
 8008558:	200016b4 	.word	0x200016b4
 800855c:	20001124 	.word	0x20001124
 8008560:	200018f0 	.word	0x200018f0
 8008564:	20001944 	.word	0x20001944
 8008568:	20001164 	.word	0x20001164
 800856c:	20000cb4 	.word	0x20000cb4
 8008570:	20000d68 	.word	0x20000d68
 8008574:	200011a4 	.word	0x200011a4
 8008578:	20000e14 	.word	0x20000e14
 800857c:	20000eb4 	.word	0x20000eb4
 8008580:	20000a9c 	.word	0x20000a9c
 8008584:	20000f5c 	.word	0x20000f5c
 8008588:	20000b08 	.word	0x20000b08
 800858c:	20000c20 	.word	0x20000c20
 8008590:	20000f6c 	.word	0x20000f6c
 8008594:	20000b24 	.word	0x20000b24
 8008598:	20000c08 	.word	0x20000c08

0800859c <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 80085a2:	2300      	movs	r3, #0
 80085a4:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 80085a6:	2301      	movs	r3, #1
 80085a8:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 80085aa:	4b4d      	ldr	r3, [pc, #308]	@ (80086e0 <phNfcLib_Init+0x144>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 8091 	bne.w	80086d6 <phNfcLib_Init+0x13a>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 80085b4:	f7ff fd8a 	bl	80080cc <phNfcLib_CommonLayer_Init>
 80085b8:	4603      	mov	r3, r0
 80085ba:	80fb      	strh	r3, [r7, #6]
 80085bc:	88fb      	ldrh	r3, [r7, #6]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d15d      	bne.n	800867e <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 80085c2:	4b48      	ldr	r3, [pc, #288]	@ (80086e4 <phNfcLib_Init+0x148>)
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	4b46      	ldr	r3, [pc, #280]	@ (80086e8 <phNfcLib_Init+0x14c>)
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	4b45      	ldr	r3, [pc, #276]	@ (80086ec <phNfcLib_Init+0x150>)
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	4b45      	ldr	r3, [pc, #276]	@ (80086f0 <phNfcLib_Init+0x154>)
 80085dc:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80085e0:	4844      	ldr	r0, [pc, #272]	@ (80086f4 <phNfcLib_Init+0x158>)
 80085e2:	f006 fa23 	bl	800ea2c <phhalHw_Pn5180_Init>
 80085e6:	4603      	mov	r3, r0
 80085e8:	80fb      	strh	r3, [r7, #6]
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <phNfcLib_Init+0x58>
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	e071      	b.n	80086d8 <phNfcLib_Init+0x13c>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 80085f4:	f7ff fe04 	bl	8008200 <phNfcLib_PAL_Init>
 80085f8:	4603      	mov	r3, r0
 80085fa:	80fb      	strh	r3, [r7, #6]
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d13d      	bne.n	800867e <phNfcLib_Init+0xe2>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 8008602:	f7ff fe95 	bl	8008330 <phNfcLib_AL_Init>
 8008606:	4603      	mov	r3, r0
 8008608:	80fb      	strh	r3, [r7, #6]
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d136      	bne.n	800867e <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 8008610:	4a38      	ldr	r2, [pc, #224]	@ (80086f4 <phNfcLib_Init+0x158>)
 8008612:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8008616:	4838      	ldr	r0, [pc, #224]	@ (80086f8 <phNfcLib_Init+0x15c>)
 8008618:	f000 fc18 	bl	8008e4c <phacDiscLoop_Sw_Init>
 800861c:	4603      	mov	r3, r0
 800861e:	80fb      	strh	r3, [r7, #6]
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d12b      	bne.n	800867e <phNfcLib_Init+0xe2>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 8008626:	4b2f      	ldr	r3, [pc, #188]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008628:	4a32      	ldr	r2, [pc, #200]	@ (80086f4 <phNfcLib_Init+0x158>)
 800862a:	f8c3 2730 	str.w	r2, [r3, #1840]	@ 0x730

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 800862e:	4b2d      	ldr	r3, [pc, #180]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008630:	4a32      	ldr	r2, [pc, #200]	@ (80086fc <phNfcLib_Init+0x160>)
 8008632:	f8c3 2734 	str.w	r2, [r3, #1844]	@ 0x734
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 8008636:	4b2b      	ldr	r3, [pc, #172]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008638:	4a31      	ldr	r2, [pc, #196]	@ (8008700 <phNfcLib_Init+0x164>)
 800863a:	f8c3 273c 	str.w	r2, [r3, #1852]	@ 0x73c
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 800863e:	4b29      	ldr	r3, [pc, #164]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008640:	4a30      	ldr	r2, [pc, #192]	@ (8008704 <phNfcLib_Init+0x168>)
 8008642:	f8c3 2744 	str.w	r2, [r3, #1860]	@ 0x744
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 8008646:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008648:	4a2f      	ldr	r2, [pc, #188]	@ (8008708 <phNfcLib_Init+0x16c>)
 800864a:	f8c3 2740 	str.w	r2, [r3, #1856]	@ 0x740
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 800864e:	4b25      	ldr	r3, [pc, #148]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008650:	4a2e      	ldr	r2, [pc, #184]	@ (800870c <phNfcLib_Init+0x170>)
 8008652:	f8c3 2738 	str.w	r2, [r3, #1848]	@ 0x738
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 8008656:	4b23      	ldr	r3, [pc, #140]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008658:	4a2d      	ldr	r2, [pc, #180]	@ (8008710 <phNfcLib_Init+0x174>)
 800865a:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
 800865e:	4b21      	ldr	r3, [pc, #132]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008660:	4a2c      	ldr	r2, [pc, #176]	@ (8008714 <phNfcLib_Init+0x178>)
 8008662:	f8c3 2754 	str.w	r2, [r3, #1876]	@ 0x754
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 8008666:	4b1f      	ldr	r3, [pc, #124]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008668:	4a2b      	ldr	r2, [pc, #172]	@ (8008718 <phNfcLib_Init+0x17c>)
 800866a:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 800866e:	4b1d      	ldr	r3, [pc, #116]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008670:	4a2a      	ldr	r2, [pc, #168]	@ (800871c <phNfcLib_Init+0x180>)
 8008672:	f8c3 2750 	str.w	r2, [r3, #1872]	@ 0x750
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 8008676:	4b1b      	ldr	r3, [pc, #108]	@ (80086e4 <phNfcLib_Init+0x148>)
 8008678:	4a29      	ldr	r2, [pc, #164]	@ (8008720 <phNfcLib_Init+0x184>)
 800867a:	f8c3 2758 	str.w	r2, [r3, #1880]	@ 0x758
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <phNfcLib_Init+0xee>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 8008684:	2310      	movs	r3, #16
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	e025      	b.n	80086d6 <phNfcLib_Init+0x13a>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 800868a:	4b15      	ldr	r3, [pc, #84]	@ (80086e0 <phNfcLib_Init+0x144>)
 800868c:	2201      	movs	r2, #1
 800868e:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 8008690:	4b13      	ldr	r3, [pc, #76]	@ (80086e0 <phNfcLib_Init+0x144>)
 8008692:	2200      	movs	r2, #0
 8008694:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 8008696:	4b12      	ldr	r3, [pc, #72]	@ (80086e0 <phNfcLib_Init+0x144>)
 8008698:	2200      	movs	r2, #0
 800869a:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 800869c:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <phNfcLib_Init+0x144>)
 800869e:	2201      	movs	r2, #1
 80086a0:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 80086a2:	4b0f      	ldr	r3, [pc, #60]	@ (80086e0 <phNfcLib_Init+0x144>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 80086a8:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <phNfcLib_Init+0x144>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 80086ae:	4b0c      	ldr	r3, [pc, #48]	@ (80086e0 <phNfcLib_Init+0x144>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 80086b4:	4b0a      	ldr	r3, [pc, #40]	@ (80086e0 <phNfcLib_Init+0x144>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 80086ba:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <phNfcLib_Init+0x144>)
 80086bc:	22ff      	movs	r2, #255	@ 0xff
 80086be:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 80086c2:	4b08      	ldr	r3, [pc, #32]	@ (80086e4 <phNfcLib_Init+0x148>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 80086ca:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <phNfcLib_Init+0x144>)
 80086cc:	2208      	movs	r2, #8
 80086ce:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 80086d2:	2300      	movs	r3, #0
 80086d4:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 80086d6:	683b      	ldr	r3, [r7, #0]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20001204 	.word	0x20001204
 80086e4:	200008e4 	.word	0x200008e4
 80086e8:	20001348 	.word	0x20001348
 80086ec:	2000121c 	.word	0x2000121c
 80086f0:	20000a80 	.word	0x20000a80
 80086f4:	200008ec 	.word	0x200008ec
 80086f8:	20000fec 	.word	0x20000fec
 80086fc:	20000a9c 	.word	0x20000a9c
 8008700:	20000ab4 	.word	0x20000ab4
 8008704:	20000ae0 	.word	0x20000ae0
 8008708:	20000af4 	.word	0x20000af4
 800870c:	20000b30 	.word	0x20000b30
 8008710:	20000b08 	.word	0x20000b08
 8008714:	20000b50 	.word	0x20000b50
 8008718:	20000b24 	.word	0x20000b24
 800871c:	20000c08 	.word	0x20000c08
 8008720:	20000f5c 	.word	0x20000f5c

08008724 <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 8008732:	4b9a      	ldr	r3, [pc, #616]	@ (800899c <phNfcLib_GetDataParams+0x278>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8129 	beq.w	800898e <phNfcLib_GetDataParams+0x26a>
    {
        switch(wComponent & PH_COMP_MASK)
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008742:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 8008746:	f000 811e 	beq.w	8008986 <phNfcLib_GetDataParams+0x262>
 800874a:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 800874e:	f300 811d 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008752:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8008756:	f000 8113 	beq.w	8008980 <phNfcLib_GetDataParams+0x25c>
 800875a:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 800875e:	f300 8115 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008762:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 8008766:	f000 8105 	beq.w	8008974 <phNfcLib_GetDataParams+0x250>
 800876a:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 800876e:	f300 810d 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008772:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8008776:	f000 8100 	beq.w	800897a <phNfcLib_GetDataParams+0x256>
 800877a:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800877e:	f300 8105 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008786:	f000 80f2 	beq.w	800896e <phNfcLib_GetDataParams+0x24a>
 800878a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800878e:	f300 80fd 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008792:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8008796:	f000 80d5 	beq.w	8008944 <phNfcLib_GetDataParams+0x220>
 800879a:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 800879e:	f300 80f5 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 80087a2:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 80087a6:	f000 80c7 	beq.w	8008938 <phNfcLib_GetDataParams+0x214>
 80087aa:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 80087ae:	f300 80ed 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 80087b2:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 80087b6:	f000 80c2 	beq.w	800893e <phNfcLib_GetDataParams+0x21a>
 80087ba:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 80087be:	f300 80e5 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 80087c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c6:	f000 80b4 	beq.w	8008932 <phNfcLib_GetDataParams+0x20e>
 80087ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ce:	f300 80dd 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 80087d2:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80087d6:	f000 80c4 	beq.w	8008962 <phNfcLib_GetDataParams+0x23e>
 80087da:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80087de:	f300 80d5 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 80087e2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80087e6:	f000 80b9 	beq.w	800895c <phNfcLib_GetDataParams+0x238>
 80087ea:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80087ee:	f300 80cd 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 80087f2:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80087f6:	f000 8099 	beq.w	800892c <phNfcLib_GetDataParams+0x208>
 80087fa:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80087fe:	f300 80c5 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008802:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008806:	f000 80af 	beq.w	8008968 <phNfcLib_GetDataParams+0x244>
 800880a:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800880e:	f300 80bd 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008812:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 8008816:	f000 809e 	beq.w	8008956 <phNfcLib_GetDataParams+0x232>
 800881a:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 800881e:	f300 80b5 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008822:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008826:	f000 8093 	beq.w	8008950 <phNfcLib_GetDataParams+0x22c>
 800882a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800882e:	f300 80ad 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008832:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8008836:	f000 8088 	beq.w	800894a <phNfcLib_GetDataParams+0x226>
 800883a:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 800883e:	f300 80a5 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008846:	d06e      	beq.n	8008926 <phNfcLib_GetDataParams+0x202>
 8008848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800884c:	f300 809e 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008850:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008854:	d064      	beq.n	8008920 <phNfcLib_GetDataParams+0x1fc>
 8008856:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800885a:	f300 8097 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 800885e:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8008862:	d05a      	beq.n	800891a <phNfcLib_GetDataParams+0x1f6>
 8008864:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8008868:	f300 8090 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 800886c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008870:	d04d      	beq.n	800890e <phNfcLib_GetDataParams+0x1ea>
 8008872:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008876:	f300 8089 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 800887a:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800887e:	d043      	beq.n	8008908 <phNfcLib_GetDataParams+0x1e4>
 8008880:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8008884:	f300 8082 	bgt.w	800898c <phNfcLib_GetDataParams+0x268>
 8008888:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800888c:	d039      	beq.n	8008902 <phNfcLib_GetDataParams+0x1de>
 800888e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008892:	dc7b      	bgt.n	800898c <phNfcLib_GetDataParams+0x268>
 8008894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008898:	d03c      	beq.n	8008914 <phNfcLib_GetDataParams+0x1f0>
 800889a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800889e:	dc75      	bgt.n	800898c <phNfcLib_GetDataParams+0x268>
 80088a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088a4:	d02a      	beq.n	80088fc <phNfcLib_GetDataParams+0x1d8>
 80088a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088aa:	dc6f      	bgt.n	800898c <phNfcLib_GetDataParams+0x268>
 80088ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80088b0:	d021      	beq.n	80088f6 <phNfcLib_GetDataParams+0x1d2>
 80088b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80088b6:	dc69      	bgt.n	800898c <phNfcLib_GetDataParams+0x268>
 80088b8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80088bc:	d018      	beq.n	80088f0 <phNfcLib_GetDataParams+0x1cc>
 80088be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80088c2:	dc63      	bgt.n	800898c <phNfcLib_GetDataParams+0x268>
 80088c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c8:	d00f      	beq.n	80088ea <phNfcLib_GetDataParams+0x1c6>
 80088ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ce:	dc5d      	bgt.n	800898c <phNfcLib_GetDataParams+0x268>
 80088d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d4:	d003      	beq.n	80088de <phNfcLib_GetDataParams+0x1ba>
 80088d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088da:	d003      	beq.n	80088e4 <phNfcLib_GetDataParams+0x1c0>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 80088dc:	e056      	b.n	800898c <phNfcLib_GetDataParams+0x268>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 80088de:	4b30      	ldr	r3, [pc, #192]	@ (80089a0 <phNfcLib_GetDataParams+0x27c>)
 80088e0:	60fb      	str	r3, [r7, #12]
            break;
 80088e2:	e054      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 80088e4:	4b2f      	ldr	r3, [pc, #188]	@ (80089a4 <phNfcLib_GetDataParams+0x280>)
 80088e6:	60fb      	str	r3, [r7, #12]
            break;
 80088e8:	e051      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 80088ea:	4b2f      	ldr	r3, [pc, #188]	@ (80089a8 <phNfcLib_GetDataParams+0x284>)
 80088ec:	60fb      	str	r3, [r7, #12]
            break;
 80088ee:	e04e      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 80088f0:	4b2e      	ldr	r3, [pc, #184]	@ (80089ac <phNfcLib_GetDataParams+0x288>)
 80088f2:	60fb      	str	r3, [r7, #12]
            break;
 80088f4:	e04b      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 80088f6:	4b2e      	ldr	r3, [pc, #184]	@ (80089b0 <phNfcLib_GetDataParams+0x28c>)
 80088f8:	60fb      	str	r3, [r7, #12]
            break;
 80088fa:	e048      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 80088fc:	4b2d      	ldr	r3, [pc, #180]	@ (80089b4 <phNfcLib_GetDataParams+0x290>)
 80088fe:	60fb      	str	r3, [r7, #12]
            break;
 8008900:	e045      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 8008902:	4b2d      	ldr	r3, [pc, #180]	@ (80089b8 <phNfcLib_GetDataParams+0x294>)
 8008904:	60fb      	str	r3, [r7, #12]
            break;
 8008906:	e042      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 8008908:	4b2c      	ldr	r3, [pc, #176]	@ (80089bc <phNfcLib_GetDataParams+0x298>)
 800890a:	60fb      	str	r3, [r7, #12]
            break;
 800890c:	e03f      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mPI;
 800890e:	4b2c      	ldr	r3, [pc, #176]	@ (80089c0 <phNfcLib_GetDataParams+0x29c>)
 8008910:	60fb      	str	r3, [r7, #12]
            break;
 8008912:	e03c      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 8008914:	4b2b      	ldr	r3, [pc, #172]	@ (80089c4 <phNfcLib_GetDataParams+0x2a0>)
 8008916:	60fb      	str	r3, [r7, #12]
            break;
 8008918:	e039      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mT;
 800891a:	4b2b      	ldr	r3, [pc, #172]	@ (80089c8 <phNfcLib_GetDataParams+0x2a4>)
 800891c:	60fb      	str	r3, [r7, #12]
            break;
 800891e:	e036      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 8008920:	4b2a      	ldr	r3, [pc, #168]	@ (80089cc <phNfcLib_GetDataParams+0x2a8>)
 8008922:	60fb      	str	r3, [r7, #12]
            break;
 8008924:	e033      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 8008926:	4b2a      	ldr	r3, [pc, #168]	@ (80089d0 <phNfcLib_GetDataParams+0x2ac>)
 8008928:	60fb      	str	r3, [r7, #12]
            break;
 800892a:	e030      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 800892c:	4b29      	ldr	r3, [pc, #164]	@ (80089d4 <phNfcLib_GetDataParams+0x2b0>)
 800892e:	60fb      	str	r3, [r7, #12]
            break;
 8008930:	e02d      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 8008932:	4b29      	ldr	r3, [pc, #164]	@ (80089d8 <phNfcLib_GetDataParams+0x2b4>)
 8008934:	60fb      	str	r3, [r7, #12]
            break;
 8008936:	e02a      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 8008938:	4b28      	ldr	r3, [pc, #160]	@ (80089dc <phNfcLib_GetDataParams+0x2b8>)
 800893a:	60fb      	str	r3, [r7, #12]
            break;
 800893c:	e027      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 800893e:	4b28      	ldr	r3, [pc, #160]	@ (80089e0 <phNfcLib_GetDataParams+0x2bc>)
 8008940:	60fb      	str	r3, [r7, #12]
            break;
 8008942:	e024      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 8008944:	4b27      	ldr	r3, [pc, #156]	@ (80089e4 <phNfcLib_GetDataParams+0x2c0>)
 8008946:	60fb      	str	r3, [r7, #12]
            break;
 8008948:	e021      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 800894a:	4b27      	ldr	r3, [pc, #156]	@ (80089e8 <phNfcLib_GetDataParams+0x2c4>)
 800894c:	60fb      	str	r3, [r7, #12]
            break;
 800894e:	e01e      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 8008950:	4b26      	ldr	r3, [pc, #152]	@ (80089ec <phNfcLib_GetDataParams+0x2c8>)
 8008952:	60fb      	str	r3, [r7, #12]
            break;
 8008954:	e01b      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <phNfcLib_GetDataParams+0x2cc>)
 8008958:	60fb      	str	r3, [r7, #12]
            break;
 800895a:	e018      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 800895c:	4b25      	ldr	r3, [pc, #148]	@ (80089f4 <phNfcLib_GetDataParams+0x2d0>)
 800895e:	60fb      	str	r3, [r7, #12]
            break;
 8008960:	e015      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 8008962:	4b25      	ldr	r3, [pc, #148]	@ (80089f8 <phNfcLib_GetDataParams+0x2d4>)
 8008964:	60fb      	str	r3, [r7, #12]
            break;
 8008966:	e012      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 8008968:	4b24      	ldr	r3, [pc, #144]	@ (80089fc <phNfcLib_GetDataParams+0x2d8>)
 800896a:	60fb      	str	r3, [r7, #12]
            break;
 800896c:	e00f      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 800896e:	4b24      	ldr	r3, [pc, #144]	@ (8008a00 <phNfcLib_GetDataParams+0x2dc>)
 8008970:	60fb      	str	r3, [r7, #12]
            break;
 8008972:	e00c      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sKeyStore;
 8008974:	4b23      	ldr	r3, [pc, #140]	@ (8008a04 <phNfcLib_GetDataParams+0x2e0>)
 8008976:	60fb      	str	r3, [r7, #12]
            break;
 8008978:	e009      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoSym;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
            break;
 800897e:	e006      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoRng;
 8008980:	4b21      	ldr	r3, [pc, #132]	@ (8008a08 <phNfcLib_GetDataParams+0x2e4>)
 8008982:	60fb      	str	r3, [r7, #12]
            break;
 8008984:	e003      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            pDataparam = &sTMI;
 8008986:	4b21      	ldr	r3, [pc, #132]	@ (8008a0c <phNfcLib_GetDataParams+0x2e8>)
 8008988:	60fb      	str	r3, [r7, #12]
            break;
 800898a:	e000      	b.n	800898e <phNfcLib_GetDataParams+0x26a>
            break;
 800898c:	bf00      	nop
        }
    }
    return pDataparam;
 800898e:	68fb      	ldr	r3, [r7, #12]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	20001204 	.word	0x20001204
 80089a0:	200008ec 	.word	0x200008ec
 80089a4:	20000a9c 	.word	0x20000a9c
 80089a8:	20000ab4 	.word	0x20000ab4
 80089ac:	20000ae0 	.word	0x20000ae0
 80089b0:	20000af4 	.word	0x20000af4
 80089b4:	20000bfc 	.word	0x20000bfc
 80089b8:	20000b08 	.word	0x20000b08
 80089bc:	20000b24 	.word	0x20000b24
 80089c0:	20000b50 	.word	0x20000b50
 80089c4:	20000b30 	.word	0x20000b30
 80089c8:	20000b74 	.word	0x20000b74
 80089cc:	20000bc4 	.word	0x20000bc4
 80089d0:	20000c40 	.word	0x20000c40
 80089d4:	20000c4c 	.word	0x20000c4c
 80089d8:	20000cb4 	.word	0x20000cb4
 80089dc:	20000d68 	.word	0x20000d68
 80089e0:	20000e14 	.word	0x20000e14
 80089e4:	20000eb4 	.word	0x20000eb4
 80089e8:	20000e98 	.word	0x20000e98
 80089ec:	20000c14 	.word	0x20000c14
 80089f0:	20000c20 	.word	0x20000c20
 80089f4:	20000f5c 	.word	0x20000f5c
 80089f8:	20000f6c 	.word	0x20000f6c
 80089fc:	20000c08 	.word	0x20000c08
 8008a00:	20000fec 	.word	0x20000fec
 8008a04:	20000a80 	.word	0x20000a80
 8008a08:	200011e4 	.word	0x200011e4
 8008a0c:	20001944 	.word	0x20001944

08008a10 <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <phTMIUtils_Init+0x16>
 8008a22:	2321      	movs	r3, #33	@ 0x21
 8008a24:	e018      	b.n	8008a58 <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <phTMIUtils_Init+0x22>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d102      	bne.n	8008a38 <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8008a32:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8008a36:	e00f      	b.n	8008a58 <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <phTMIUtils_ActivateTMICollection+0x1a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8008a7e:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8008a82:	e02c      	b.n	8008ade <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d825      	bhi.n	8008ad6 <phTMIUtils_ActivateTMICollection+0x72>
 8008a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <phTMIUtils_ActivateTMICollection+0x2c>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008aa5 	.word	0x08008aa5
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ac1 	.word	0x08008ac1
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ac9 	.word	0x08008ac9
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	731a      	strb	r2, [r3, #12]
        break;
 8008ab6:	e011      	b.n	8008adc <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	731a      	strb	r2, [r3, #12]
        break;
 8008abe:	e00d      	b.n	8008adc <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	731a      	strb	r2, [r3, #12]
        break;
 8008ac6:	e009      	b.n	8008adc <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	611a      	str	r2, [r3, #16]
        break;
 8008ad4:	e002      	b.n	8008adc <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8008ad6:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8008ada:	e000      	b.n	8008ade <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6039      	str	r1, [r7, #0]
 8008af4:	4611      	mov	r1, r2
 8008af6:	461a      	mov	r2, r3
 8008af8:	4603      	mov	r3, r0
 8008afa:	71fb      	strb	r3, [r7, #7]
 8008afc:	460b      	mov	r3, r1
 8008afe:	80bb      	strh	r3, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <phTools_DecodeParity+0x24>
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <phTools_DecodeParity+0x2a>
 8008b10:	79bb      	ldrb	r3, [r7, #6]
 8008b12:	2b07      	cmp	r3, #7
 8008b14:	d902      	bls.n	8008b1c <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 8008b16:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8008b1a:	e0fa      	b.n	8008d12 <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 8008b1c:	88bb      	ldrh	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10d      	bne.n	8008b3e <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 8008b22:	79bb      	ldrb	r3, [r7, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d107      	bne.n	8008b38 <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 8008b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b30:	2200      	movs	r2, #0
 8008b32:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 8008b34:	2300      	movs	r3, #0
 8008b36:	e0ec      	b.n	8008d12 <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 8008b38:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8008b3c:	e0e9      	b.n	8008d12 <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 8008b3e:	79bb      	ldrb	r3, [r7, #6]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d111      	bne.n	8008b68 <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 8008b44:	88bb      	ldrh	r3, [r7, #4]
 8008b46:	4a75      	ldr	r2, [pc, #468]	@ (8008d1c <phTools_DecodeParity+0x230>)
 8008b48:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 8008b50:	88ba      	ldrh	r2, [r7, #4]
 8008b52:	4b72      	ldr	r3, [pc, #456]	@ (8008d1c <phTools_DecodeParity+0x230>)
 8008b54:	fba3 1302 	umull	r1, r3, r3, r2
 8008b58:	0859      	lsrs	r1, r3, #1
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	73fb      	strb	r3, [r7, #15]
 8008b66:	e012      	b.n	8008b8e <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 8008b68:	88bb      	ldrh	r3, [r7, #4]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8008d1c <phTools_DecodeParity+0x230>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	085b      	lsrs	r3, r3, #1
 8008b74:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 8008b76:	88bb      	ldrh	r3, [r7, #4]
 8008b78:	1e59      	subs	r1, r3, #1
 8008b7a:	4b68      	ldr	r3, [pc, #416]	@ (8008d1c <phTools_DecodeParity+0x230>)
 8008b7c:	fba3 2301 	umull	r2, r3, r3, r1
 8008b80:	085a      	lsrs	r2, r3, #1
 8008b82:	4613      	mov	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4413      	add	r3, r2
 8008b88:	1aca      	subs	r2, r1, r3
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 8008b8e:	8a3b      	ldrh	r3, [r7, #16]
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	4413      	add	r3, r2
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 8008ba0:	7bfa      	ldrb	r2, [r7, #15]
 8008ba2:	79bb      	ldrb	r3, [r7, #6]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d905      	bls.n	8008bb4 <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 8008bb4:	79bb      	ldrb	r3, [r7, #6]
 8008bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bb8:	8812      	ldrh	r2, [r2, #0]
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 8008bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 8008bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	8c3a      	ldrh	r2, [r7, #32]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d205      	bcs.n	8008bf2 <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	2200      	movs	r2, #0
 8008bea:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 8008bec:	f24e 3304 	movw	r3, #58116	@ 0xe304
 8008bf0:	e08f      	b.n	8008d12 <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 8008bfa:	2307      	movs	r3, #7
 8008bfc:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8008bfe:	e068      	b.n	8008cd2 <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 8008c00:	8afb      	ldrh	r3, [r7, #22]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4413      	add	r3, r2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	7cfb      	ldrb	r3, [r7, #19]
 8008c0c:	f1c3 0307 	rsb	r3, r3, #7
 8008c10:	fa42 f103 	asr.w	r1, r2, r3
 8008c14:	8abb      	ldrh	r3, [r7, #20]
 8008c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c18:	4413      	add	r3, r2
 8008c1a:	b2ca      	uxtb	r2, r1
 8008c1c:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 8008c1e:	8afb      	ldrh	r3, [r7, #22]
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	88bb      	ldrh	r3, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d243      	bcs.n	8008cb0 <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 8008c28:	8abb      	ldrh	r3, [r7, #20]
 8008c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c2c:	4413      	add	r3, r2
 8008c2e:	7819      	ldrb	r1, [r3, #0]
 8008c30:	8afb      	ldrh	r3, [r7, #22]
 8008c32:	3301      	adds	r3, #1
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	4413      	add	r3, r2
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	7cfb      	ldrb	r3, [r7, #19]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	8abb      	ldrh	r3, [r7, #20]
 8008c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c4a:	4403      	add	r3, r0
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 8008c5a:	8abb      	ldrh	r3, [r7, #20]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c60:	8812      	ldrh	r2, [r2, #0]
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d224      	bcs.n	8008cb0 <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 8008c66:	8abb      	ldrh	r3, [r7, #20]
 8008c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c6a:	4413      	add	r3, r2
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	79fa      	ldrb	r2, [r7, #7]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f854 	bl	8008d20 <phTools_CalcParity>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 8008c7c:	8afb      	ldrh	r3, [r7, #22]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	4413      	add	r3, r2
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	7cfb      	ldrb	r3, [r7, #19]
 8008c88:	f1c3 0307 	rsb	r3, r3, #7
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	4013      	ands	r3, r2
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	7bba      	ldrb	r2, [r7, #14]
 8008c9c:	7cfb      	ldrb	r3, [r7, #19]
 8008c9e:	f1c3 0307 	rsb	r3, r3, #7
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	d002      	beq.n	8008cb0 <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 8008caa:	f24e 3302 	movw	r3, #58114	@ 0xe302
 8008cae:	e030      	b.n	8008d12 <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 8008cb0:	7cfb      	ldrb	r3, [r7, #19]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 8008cb6:	2308      	movs	r3, #8
 8008cb8:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 8008cba:	8afb      	ldrh	r3, [r7, #22]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8008cc0:	8abb      	ldrh	r3, [r7, #20]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	82bb      	strh	r3, [r7, #20]
 8008cc6:	8afb      	ldrh	r3, [r7, #22]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	82fb      	strh	r3, [r7, #22]
 8008ccc:	7cfb      	ldrb	r3, [r7, #19]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	74fb      	strb	r3, [r7, #19]
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	8aba      	ldrh	r2, [r7, #20]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d391      	bcc.n	8008c00 <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d015      	beq.n	8008d10 <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cec:	4413      	add	r3, r2
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f1c3 0308 	rsb	r3, r3, #8
 8008cf8:	22ff      	movs	r2, #255	@ 0xff
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d08:	4403      	add	r3, r0
 8008d0a:	400a      	ands	r2, r1
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	38e38e39 	.word	0x38e38e39

08008d20 <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	460a      	mov	r2, r1
 8008d2a:	71fb      	strb	r3, [r7, #7]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 8008d30:	79bb      	ldrb	r3, [r7, #6]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73bb      	strb	r3, [r7, #14]
 8008d3a:	e001      	b.n	8008d40 <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e00f      	b.n	8008d66 <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	4013      	ands	r3, r2
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <phTools_CalcParity+0x40>
        {
            ++bParity;
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	3301      	adds	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b07      	cmp	r3, #7
 8008d6a:	d9ec      	bls.n	8008d46 <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	b2db      	uxtb	r3, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	4053      	eors	r3, r2
 8008d96:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 8008d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	b25a      	sxtb	r2, r3
 8008da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008da4:	4053      	eors	r3, r2
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	b21a      	sxth	r2, r3
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	b21b      	sxth	r3, r3
 8008db8:	021b      	lsls	r3, r3, #8
 8008dba:	b21b      	sxth	r3, r3
 8008dbc:	4053      	eors	r3, r2
 8008dbe:	b21a      	sxth	r2, r3
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	b21b      	sxth	r3, r3
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	b21b      	sxth	r3, r3
 8008dc8:	4053      	eors	r3, r2
 8008dca:	b21a      	sxth	r2, r3
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	091b      	lsrs	r3, r3, #4
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	b21b      	sxth	r3, r3
 8008dd4:	4053      	eors	r3, r2
 8008dd6:	b21b      	sxth	r3, r3
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	801a      	strh	r2, [r3, #0]
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 8008dfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dfe:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	60fa      	str	r2, [r7, #12]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 8008e0a:	f107 0214 	add.w	r2, r7, #20
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff ffb4 	bl	8008d80 <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1ed      	bne.n	8008e00 <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 8008e24:	8abb      	ldrh	r3, [r7, #20]
 8008e26:	43db      	mvns	r3, r3
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 8008e2c:	8abb      	ldrh	r3, [r7, #20]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 8008e34:	8abb      	ldrh	r3, [r7, #20]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	460b      	mov	r3, r1
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 8008e5a:	897b      	ldrh	r3, [r7, #10]
 8008e5c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8008e60:	d002      	beq.n	8008e68 <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 8008e62:	f244 0320 	movw	r3, #16416	@ 0x4020
 8008e66:	e189      	b.n	800917c <phacDiscLoop_Sw_Init+0x330>
    }

    PH_ASSERT_NULL(pDataParams);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <phacDiscLoop_Sw_Init+0x26>
 8008e6e:	2321      	movs	r3, #33	@ 0x21
 8008e70:	e184      	b.n	800917c <phacDiscLoop_Sw_Init+0x330>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f244 0201 	movw	r2, #16385	@ 0x4001
 8008e78:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2222      	movs	r2, #34	@ 0x22
 8008ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4aa6      	ldr	r2, [pc, #664]	@ (8009188 <phacDiscLoop_Sw_Init+0x33c>)
 8008eee:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8008f1a:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2208      	movs	r2, #8
 8008f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8008f3e:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	789b      	ldrb	r3, [r3, #2]
 8008f44:	f043 0301 	orr.w	r3, r3, #1
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	709a      	strb	r2, [r3, #2]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	78db      	ldrb	r3, [r3, #3]
 8008f52:	f043 0301 	orr.w	r3, r3, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	795b      	ldrb	r3, [r3, #5]
 8008f60:	f043 0301 	orr.w	r3, r3, #1
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	799b      	ldrb	r3, [r3, #6]
 8008f6e:	f043 0301 	orr.w	r3, r3, #1
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8008f84:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	789b      	ldrb	r3, [r3, #2]
 8008f8a:	f043 0302 	orr.w	r3, r3, #2
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8008fa6:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8008fae:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	f043 030c 	orr.w	r3, r3, #12
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212 ;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	78db      	ldrb	r3, [r3, #3]
 8008fc2:	f043 0302 	orr.w	r3, r3, #2
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	78db      	ldrb	r3, [r3, #3]
 8008fd0:	f043 0304 	orr.w	r3, r3, #4
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	795b      	ldrb	r3, [r3, #5]
 8008fde:	f043 0304 	orr.w	r3, r3, #4
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	795b      	ldrb	r3, [r3, #5]
 8008fec:	f043 0308 	orr.w	r3, r3, #8
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	799b      	ldrb	r3, [r3, #6]
 8008ffa:	f043 0304 	orr.w	r3, r3, #4
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	799b      	ldrb	r3, [r3, #6]
 8009008:	f043 0308 	orr.w	r3, r3, #8
 800900c:	b2da      	uxtb	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800901e:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	789b      	ldrb	r3, [r3, #2]
 8009024:	f043 0310 	orr.w	r3, r3, #16
 8009028:	b2da      	uxtb	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800903a:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	789b      	ldrb	r3, [r3, #2]
 8009040:	f043 0320 	orr.w	r3, r3, #32
 8009044:	b2da      	uxtb	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    #if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid        = 0;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri        = 0;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2208      	movs	r2, #8
 8009076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2208      	movs	r2, #8
 80090ae:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	22ff      	movs	r2, #255	@ 0xff
 80090e6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	22ff      	movs	r2, #255	@ 0xff
 80090ee:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2203      	movs	r2, #3
 80090f6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]
 80090fe:	e00d      	b.n	800911c <phacDiscLoop_Sw_Init+0x2d0>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8009100:	7dfa      	ldrb	r2, [r7, #23]
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	00da      	lsls	r2, r3, #3
 800910c:	1ad2      	subs	r2, r2, r3
 800910e:	188b      	adds	r3, r1, r2
 8009110:	33a7      	adds	r3, #167	@ 0xa7
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	3301      	adds	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0ee      	beq.n	8009100 <phacDiscLoop_Sw_Init+0x2b4>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid          = 0;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri          = 0;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2202      	movs	r2, #2
 800914e:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2220      	movs	r2, #32
 8009156:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2203      	movs	r2, #3
 8009166:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	080258ac 	.word	0x080258ac

0800918c <phacDiscLoop_Sw_Run>:
// discoveryLoop的核心调度函数：根据入口点参数执行轮询（Poll）模式或监听（Listen）模式的标签发现流程
phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* 关闭干扰检测 Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919c:	2200      	movs	r2, #0
 800919e:	215e      	movs	r1, #94	@ 0x5e
 80091a0:	4618      	mov	r0, r3
 80091a2:	f006 fba5 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80091a6:	4603      	mov	r3, r0
 80091a8:	81fb      	strh	r3, [r7, #14]
 80091aa:	89fb      	ldrh	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <phacDiscLoop_Sw_Run+0x28>
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	e0b9      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b8:	2200      	movs	r2, #0
 80091ba:	2120      	movs	r1, #32
 80091bc:	4618      	mov	r0, r3
 80091be:	f006 fb97 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80091c2:	4603      	mov	r3, r0
 80091c4:	81fb      	strh	r3, [r7, #14]
 80091c6:	89fb      	ldrh	r3, [r7, #14]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <phacDiscLoop_Sw_Run+0x44>
 80091cc:	89fb      	ldrh	r3, [r7, #14]
 80091ce:	e0ab      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <phacDiscLoop_Sw_Run+0x50>
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d07a      	beq.n	80092d0 <phacDiscLoop_Sw_Run+0x144>
 80091da:	e0a3      	b.n	8009324 <phacDiscLoop_Sw_Run+0x198>
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

		/* 低功耗卡检测LPCD */
#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	7fdb      	ldrb	r3, [r3, #31]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d017      	beq.n	8009214 <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	891b      	ldrh	r3, [r3, #8]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d113      	bne.n	8009214 <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f0:	4618      	mov	r0, r3
 80091f2:	f008 fdf9 	bl	8011de8 <phhalHw_Pn5180_Lpcd>
 80091f6:	4603      	mov	r3, r0
 80091f8:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80091fa:	89fb      	ldrh	r3, [r7, #14]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8009202:	89fb      	ldrh	r3, [r7, #14]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b01      	cmp	r3, #1
 8009208:	d102      	bne.n	8009210 <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 800920a:	f244 0384 	movw	r3, #16516	@ 0x4084
 800920e:	e08b      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 8009210:	89fb      	ldrh	r3, [r7, #14]
 8009212:	e089      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* 1.1 主动轮询模式 Check for active poll configuration */
    	// 如果当前设置了 Active Polling 模式，并且处于“轮询检测”的状态
        if((0U != (pDataParams->bActPollTechCfg))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	78db      	ldrb	r3, [r3, #3]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d037      	beq.n	800928c <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	891b      	ldrh	r3, [r3, #8]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d133      	bne.n	800928c <phacDiscLoop_Sw_Run+0x100>
        {
        	/* 尝试使用不同速率（106/212/424 kbps）的NFC P2P主动通信模式与周围的目标设备建立连接
            *  先关闭 RF 场地 -> 等待恢复时间 -> 设置协议速率 -> 开场 -> 发送 ATR 请求
			*	-> 根据返回状态判断是否成功建立连接
            */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f931 	bl	800a48c <phacDiscLoop_Sw_Int_ActivePollMode>
 800922a:	4603      	mov	r3, r0
 800922c:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 800922e:	89fb      	ldrh	r3, [r7, #14]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b84      	cmp	r3, #132	@ 0x84
 8009234:	d00f      	beq.n	8009256 <phacDiscLoop_Sw_Run+0xca>
            {
            	// 失败
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8009236:	89fb      	ldrh	r3, [r7, #14]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b8c      	cmp	r3, #140	@ 0x8c
 800923c:	d009      	beq.n	8009252 <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8009242:	2b82      	cmp	r3, #130	@ 0x82
 8009244:	d005      	beq.n	8009252 <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	89fa      	ldrh	r2, [r7, #14]
 800924a:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800924c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8009250:	e06a      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
                }
                // 成功
                return wDiscloopStatus;
 8009252:	89fb      	ldrh	r3, [r7, #14]
 8009254:	e068      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	4618      	mov	r0, r3
 800925c:	f006 fa6a 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 8009260:	4603      	mov	r3, r0
 8009262:	81fb      	strh	r3, [r7, #14]
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <phacDiscLoop_Sw_Run+0xe2>
 800926a:	89fb      	ldrh	r3, [r7, #14]
 800926c:	e05c      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	8b9b      	ldrh	r3, [r3, #28]
 8009276:	461a      	mov	r2, r3
 8009278:	2100      	movs	r1, #0
 800927a:	f006 fa7f 	bl	800f77c <phhalHw_Pn5180_Wait>
 800927e:	4603      	mov	r3, r0
 8009280:	81fb      	strh	r3, [r7, #14]
 8009282:	89fb      	ldrh	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <phacDiscLoop_Sw_Run+0x100>
 8009288:	89fb      	ldrh	r3, [r7, #14]
 800928a:	e04d      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
        }

        /* 1.2 被动轮询模式 Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	789b      	ldrb	r3, [r3, #2]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d012      	beq.n	80092ba <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 fa5a 	bl	800a74e <phacDiscLoop_Sw_Int_PollMode>
 800929a:	4603      	mov	r3, r0
 800929c:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 800929e:	89fb      	ldrh	r3, [r7, #14]
 80092a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80092a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092a8:	d005      	beq.n	80092b6 <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	89fa      	ldrh	r2, [r7, #14]
 80092ae:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 80092b0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80092b4:	e038      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 80092b6:	89fb      	ldrh	r3, [r7, #14]
 80092b8:	e036      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80092ca:	f244 0384 	movw	r3, #16516	@ 0x4084
 80092ce:	e02b      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
        }

    /* 2. 监听模式 */
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	795b      	ldrb	r3, [r3, #5]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <phacDiscLoop_Sw_Run+0x154>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	799b      	ldrb	r3, [r3, #6]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01e      	beq.n	800931e <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e4:	4618      	mov	r0, r3
 80092e6:	f006 fa25 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 80092ea:	4603      	mov	r3, r0
 80092ec:	81fb      	strh	r3, [r7, #14]
 80092ee:	89fb      	ldrh	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <phacDiscLoop_Sw_Run+0x16c>
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	e017      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 f867 	bl	800a3cc <phacDiscLoop_Sw_Int_ListenMode>
 80092fe:	4603      	mov	r3, r0
 8009300:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8009302:	89fb      	ldrh	r3, [r7, #14]
 8009304:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800930c:	d005      	beq.n	800931a <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	89fa      	ldrh	r2, [r7, #14]
 8009312:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8009314:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8009318:	e006      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 800931a:	89fb      	ldrh	r3, [r7, #14]
 800931c:	e004      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800931e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009322:	e001      	b.n	8009328 <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009324:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	807b      	strh	r3, [r7, #2]
 800933c:	4613      	mov	r3, r2
 800933e:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009340:	2300      	movs	r3, #0
 8009342:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 8009348:	887b      	ldrh	r3, [r7, #2]
 800934a:	2b94      	cmp	r3, #148	@ 0x94
 800934c:	f200 8463 	bhi.w	8009c16 <phacDiscLoop_Sw_SetConfig+0x8e6>
 8009350:	a201      	add	r2, pc, #4	@ (adr r2, 8009358 <phacDiscLoop_Sw_SetConfig+0x28>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	08009615 	.word	0x08009615
 800935c:	0800961d 	.word	0x0800961d
 8009360:	08009625 	.word	0x08009625
 8009364:	0800963d 	.word	0x0800963d
 8009368:	08009655 	.word	0x08009655
 800936c:	0800965d 	.word	0x0800965d
 8009370:	0800968f 	.word	0x0800968f
 8009374:	08009c17 	.word	0x08009c17
 8009378:	08009c17 	.word	0x08009c17
 800937c:	08009c17 	.word	0x08009c17
 8009380:	08009c17 	.word	0x08009c17
 8009384:	08009c17 	.word	0x08009c17
 8009388:	08009c17 	.word	0x08009c17
 800938c:	08009c17 	.word	0x08009c17
 8009390:	08009c17 	.word	0x08009c17
 8009394:	08009c17 	.word	0x08009c17
 8009398:	080097a1 	.word	0x080097a1
 800939c:	08009903 	.word	0x08009903
 80093a0:	08009a1f 	.word	0x08009a1f
 80093a4:	08009aa5 	.word	0x08009aa5
 80093a8:	08009ba9 	.word	0x08009ba9
 80093ac:	08009c17 	.word	0x08009c17
 80093b0:	08009c17 	.word	0x08009c17
 80093b4:	08009c17 	.word	0x08009c17
 80093b8:	08009c17 	.word	0x08009c17
 80093bc:	08009c17 	.word	0x08009c17
 80093c0:	08009c17 	.word	0x08009c17
 80093c4:	08009c17 	.word	0x08009c17
 80093c8:	08009c17 	.word	0x08009c17
 80093cc:	08009c17 	.word	0x08009c17
 80093d0:	08009c17 	.word	0x08009c17
 80093d4:	08009c17 	.word	0x08009c17
 80093d8:	08009c17 	.word	0x08009c17
 80093dc:	08009c17 	.word	0x08009c17
 80093e0:	08009c17 	.word	0x08009c17
 80093e4:	08009c17 	.word	0x08009c17
 80093e8:	08009c17 	.word	0x08009c17
 80093ec:	08009c17 	.word	0x08009c17
 80093f0:	08009c17 	.word	0x08009c17
 80093f4:	08009c17 	.word	0x08009c17
 80093f8:	08009c17 	.word	0x08009c17
 80093fc:	08009c17 	.word	0x08009c17
 8009400:	08009c17 	.word	0x08009c17
 8009404:	08009c17 	.word	0x08009c17
 8009408:	08009c17 	.word	0x08009c17
 800940c:	08009c17 	.word	0x08009c17
 8009410:	08009c17 	.word	0x08009c17
 8009414:	08009c17 	.word	0x08009c17
 8009418:	0800991d 	.word	0x0800991d
 800941c:	08009929 	.word	0x08009929
 8009420:	08009943 	.word	0x08009943
 8009424:	0800995b 	.word	0x0800995b
 8009428:	08009973 	.word	0x08009973
 800942c:	0800997f 	.word	0x0800997f
 8009430:	080099a7 	.word	0x080099a7
 8009434:	08009c17 	.word	0x08009c17
 8009438:	08009c17 	.word	0x08009c17
 800943c:	08009c17 	.word	0x08009c17
 8009440:	08009c17 	.word	0x08009c17
 8009444:	08009c17 	.word	0x08009c17
 8009448:	08009c17 	.word	0x08009c17
 800944c:	08009c17 	.word	0x08009c17
 8009450:	08009c17 	.word	0x08009c17
 8009454:	08009c17 	.word	0x08009c17
 8009458:	080097fd 	.word	0x080097fd
 800945c:	08009815 	.word	0x08009815
 8009460:	0800982d 	.word	0x0800982d
 8009464:	08009839 	.word	0x08009839
 8009468:	08009861 	.word	0x08009861
 800946c:	08009889 	.word	0x08009889
 8009470:	080098a1 	.word	0x080098a1
 8009474:	080098b9 	.word	0x080098b9
 8009478:	080098d3 	.word	0x080098d3
 800947c:	080098eb 	.word	0x080098eb
 8009480:	08009c17 	.word	0x08009c17
 8009484:	08009c17 	.word	0x08009c17
 8009488:	08009c17 	.word	0x08009c17
 800948c:	08009c17 	.word	0x08009c17
 8009490:	08009c17 	.word	0x08009c17
 8009494:	08009c17 	.word	0x08009c17
 8009498:	08009c17 	.word	0x08009c17
 800949c:	08009a39 	.word	0x08009a39
 80094a0:	08009a51 	.word	0x08009a51
 80094a4:	08009a69 	.word	0x08009a69
 80094a8:	08009a75 	.word	0x08009a75
 80094ac:	08009a8d 	.word	0x08009a8d
 80094b0:	08009c17 	.word	0x08009c17
 80094b4:	08009a13 	.word	0x08009a13
 80094b8:	08009c17 	.word	0x08009c17
 80094bc:	08009c17 	.word	0x08009c17
 80094c0:	08009c17 	.word	0x08009c17
 80094c4:	08009c17 	.word	0x08009c17
 80094c8:	08009c17 	.word	0x08009c17
 80094cc:	08009c17 	.word	0x08009c17
 80094d0:	08009c17 	.word	0x08009c17
 80094d4:	08009c17 	.word	0x08009c17
 80094d8:	08009abf 	.word	0x08009abf
 80094dc:	08009aff 	.word	0x08009aff
 80094e0:	08009c17 	.word	0x08009c17
 80094e4:	08009c17 	.word	0x08009c17
 80094e8:	08009c17 	.word	0x08009c17
 80094ec:	08009c17 	.word	0x08009c17
 80094f0:	08009c17 	.word	0x08009c17
 80094f4:	08009c17 	.word	0x08009c17
 80094f8:	08009c17 	.word	0x08009c17
 80094fc:	08009c17 	.word	0x08009c17
 8009500:	08009c17 	.word	0x08009c17
 8009504:	08009c17 	.word	0x08009c17
 8009508:	08009c17 	.word	0x08009c17
 800950c:	08009c17 	.word	0x08009c17
 8009510:	08009c17 	.word	0x08009c17
 8009514:	08009c17 	.word	0x08009c17
 8009518:	08009bc3 	.word	0x08009bc3
 800951c:	08009be1 	.word	0x08009be1
 8009520:	08009c17 	.word	0x08009c17
 8009524:	08009c17 	.word	0x08009c17
 8009528:	08009c17 	.word	0x08009c17
 800952c:	08009c17 	.word	0x08009c17
 8009530:	08009c17 	.word	0x08009c17
 8009534:	08009c17 	.word	0x08009c17
 8009538:	08009c17 	.word	0x08009c17
 800953c:	08009c17 	.word	0x08009c17
 8009540:	08009c17 	.word	0x08009c17
 8009544:	08009c17 	.word	0x08009c17
 8009548:	08009c17 	.word	0x08009c17
 800954c:	08009c17 	.word	0x08009c17
 8009550:	08009c17 	.word	0x08009c17
 8009554:	08009c17 	.word	0x08009c17
 8009558:	08009779 	.word	0x08009779
 800955c:	08009c17 	.word	0x08009c17
 8009560:	080096ad 	.word	0x080096ad
 8009564:	080095cb 	.word	0x080095cb
 8009568:	080095d5 	.word	0x080095d5
 800956c:	08009c17 	.word	0x08009c17
 8009570:	08009697 	.word	0x08009697
 8009574:	08009c17 	.word	0x08009c17
 8009578:	08009609 	.word	0x08009609
 800957c:	080095ad 	.word	0x080095ad
 8009580:	080095b7 	.word	0x080095b7
 8009584:	080095c1 	.word	0x080095c1
 8009588:	080095ff 	.word	0x080095ff
 800958c:	08009c17 	.word	0x08009c17
 8009590:	08009c17 	.word	0x08009c17
 8009594:	08009c17 	.word	0x08009c17
 8009598:	08009bff 	.word	0x08009bff
 800959c:	08009783 	.word	0x08009783
 80095a0:	08009665 	.word	0x08009665
 80095a4:	080097bb 	.word	0x080097bb
 80095a8:	080099cf 	.word	0x080099cf
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 80095ac:	883b      	ldrh	r3, [r7, #0]
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	719a      	strb	r2, [r3, #6]
        break;
 80095b4:	e334      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 80095b6:	883b      	ldrh	r3, [r7, #0]
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	70da      	strb	r2, [r3, #3]
        break;
 80095be:	e32f      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 80095c0:	883b      	ldrh	r3, [r7, #0]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	715a      	strb	r2, [r3, #5]
        break;
 80095c8:	e32a      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 80095ca:	883b      	ldrh	r3, [r7, #0]
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	779a      	strb	r2, [r3, #30]
        break;
 80095d2:	e325      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 80095d4:	883b      	ldrh	r3, [r7, #0]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d00a      	beq.n	80095f2 <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 80095dc:	883b      	ldrh	r3, [r7, #0]
 80095de:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d006      	beq.n	80095f2 <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 80095e4:	883b      	ldrh	r3, [r7, #0]
 80095e6:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d002      	beq.n	80095f2 <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80095ec:	f244 0321 	movw	r3, #16417	@ 0x4021
 80095f0:	e317      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 80095f2:	883b      	ldrh	r3, [r7, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	811a      	strh	r2, [r3, #8]
        break;
 80095fc:	e310      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 80095fe:	883b      	ldrh	r3, [r7, #0]
 8009600:	b2da      	uxtb	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	709a      	strb	r2, [r3, #2]
        break;
 8009606:	e30b      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 8009608:	883b      	ldrh	r3, [r7, #0]
 800960a:	b2da      	uxtb	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 8009612:	e305      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	883a      	ldrh	r2, [r7, #0]
 8009618:	821a      	strh	r2, [r3, #16]
        break;
 800961a:	e301      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	883a      	ldrh	r2, [r7, #0]
 8009620:	825a      	strh	r2, [r3, #18]
        break;
 8009622:	e2fd      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 8009624:	883b      	ldrh	r3, [r7, #0]
 8009626:	f644 72af 	movw	r2, #20399	@ 0x4faf
 800962a:	4293      	cmp	r3, r2
 800962c:	d802      	bhi.n	8009634 <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800962e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009632:	e2f6      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	883a      	ldrh	r2, [r7, #0]
 8009638:	829a      	strh	r2, [r3, #20]
        break;
 800963a:	e2f1      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 800963c:	883b      	ldrh	r3, [r7, #0]
 800963e:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 8009642:	4293      	cmp	r3, r2
 8009644:	d802      	bhi.n	800964c <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009646:	f244 0321 	movw	r3, #16417	@ 0x4021
 800964a:	e2ea      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	883a      	ldrh	r2, [r7, #0]
 8009650:	82da      	strh	r2, [r3, #22]
        break;
 8009652:	e2e5      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	883a      	ldrh	r2, [r7, #0]
 8009658:	831a      	strh	r2, [r3, #24]
        break;
 800965a:	e2e1      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	883a      	ldrh	r2, [r7, #0]
 8009660:	835a      	strh	r2, [r3, #26]
        break;
 8009662:	e2dd      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8009664:	883b      	ldrh	r3, [r7, #0]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d105      	bne.n	800967c <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8009670:	883b      	ldrh	r3, [r7, #0]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 800967c:	f244 0323 	movw	r3, #16419	@ 0x4023
 8009680:	e2cf      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 8009682:	883b      	ldrh	r3, [r7, #0]
 8009684:	b2da      	uxtb	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 800968c:	e2c8      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	883a      	ldrh	r2, [r7, #0]
 8009692:	839a      	strh	r2, [r3, #28]
        break;
 8009694:	e2c4      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 8009696:	883b      	ldrh	r3, [r7, #0]
 8009698:	2b3f      	cmp	r3, #63	@ 0x3f
 800969a:	d902      	bls.n	80096a2 <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800969c:	f244 0321 	movw	r3, #16417	@ 0x4021
 80096a0:	e2bf      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 80096a2:	883b      	ldrh	r3, [r7, #0]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	711a      	strb	r2, [r3, #4]
        break;
 80096aa:	e2b9      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 80096ac:	883b      	ldrh	r3, [r7, #0]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d008      	beq.n	80096c4 <phacDiscLoop_Sw_SetConfig+0x394>
 80096b2:	883b      	ldrh	r3, [r7, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d005      	beq.n	80096c4 <phacDiscLoop_Sw_SetConfig+0x394>
 80096b8:	883b      	ldrh	r3, [r7, #0]
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d002      	beq.n	80096c4 <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80096be:	f244 0321 	movw	r3, #16417	@ 0x4021
 80096c2:	e2ae      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 80096c4:	883b      	ldrh	r3, [r7, #0]
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d2:	883a      	ldrh	r2, [r7, #0]
 80096d4:	215a      	movs	r1, #90	@ 0x5a
 80096d6:	4618      	mov	r0, r3
 80096d8:	f006 f90a 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80096dc:	4603      	mov	r3, r0
 80096de:	81fb      	strh	r3, [r7, #14]
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <phacDiscLoop_Sw_SetConfig+0x3ba>
 80096e6:	89fb      	ldrh	r3, [r7, #14]
 80096e8:	e29b      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ee:	883a      	ldrh	r2, [r7, #0]
 80096f0:	2106      	movs	r1, #6
 80096f2:	4618      	mov	r0, r3
 80096f4:	f00e fd4c 	bl	8018190 <phpalI14443p4_Sw_SetConfig>
 80096f8:	4603      	mov	r3, r0
 80096fa:	81fb      	strh	r3, [r7, #14]
 80096fc:	89fb      	ldrh	r3, [r7, #14]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <phacDiscLoop_Sw_SetConfig+0x3d6>
 8009702:	89fb      	ldrh	r3, [r7, #14]
 8009704:	e28d      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970a:	883a      	ldrh	r2, [r7, #0]
 800970c:	2101      	movs	r1, #1
 800970e:	4618      	mov	r0, r3
 8009710:	f00c fd10 	bl	8016134 <phpalI14443p3b_Sw_SetConfig>
 8009714:	4603      	mov	r3, r0
 8009716:	81fb      	strh	r3, [r7, #14]
 8009718:	89fb      	ldrh	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <phacDiscLoop_Sw_SetConfig+0x3f2>
 800971e:	89fb      	ldrh	r3, [r7, #14]
 8009720:	e27f      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	883a      	ldrh	r2, [r7, #0]
 8009728:	2101      	movs	r1, #1
 800972a:	4618      	mov	r0, r3
 800972c:	f00b fecd 	bl	80154ca <phpalI14443p3a_Sw_SetConfig>
 8009730:	4603      	mov	r3, r0
 8009732:	81fb      	strh	r3, [r7, #14]
 8009734:	89fb      	ldrh	r3, [r7, #14]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <phacDiscLoop_Sw_SetConfig+0x40e>
 800973a:	89fb      	ldrh	r3, [r7, #14]
 800973c:	e271      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009742:	883a      	ldrh	r2, [r7, #0]
 8009744:	2101      	movs	r1, #1
 8009746:	4618      	mov	r0, r3
 8009748:	f00e fdf4 	bl	8018334 <phpalI14443p4a_Sw_SetConfig>
 800974c:	4603      	mov	r3, r0
 800974e:	81fb      	strh	r3, [r7, #14]
 8009750:	89fb      	ldrh	r3, [r7, #14]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <phacDiscLoop_Sw_SetConfig+0x42a>
 8009756:	89fb      	ldrh	r3, [r7, #14]
 8009758:	e263      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975e:	883a      	ldrh	r2, [r7, #0]
 8009760:	210a      	movs	r1, #10
 8009762:	4618      	mov	r0, r3
 8009764:	f010 ff88 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 8009768:	4603      	mov	r3, r0
 800976a:	81fb      	strh	r3, [r7, #14]
 800976c:	89fb      	ldrh	r3, [r7, #14]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 8255 	beq.w	8009c1e <phacDiscLoop_Sw_SetConfig+0x8ee>
 8009774:	89fb      	ldrh	r3, [r7, #14]
 8009776:	e254      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 8009778:	883b      	ldrh	r3, [r7, #0]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	77da      	strb	r2, [r3, #31]
        break;
 8009780:	e24e      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 8009782:	883b      	ldrh	r3, [r7, #0]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d005      	beq.n	8009794 <phacDiscLoop_Sw_SetConfig+0x464>
 8009788:	883b      	ldrh	r3, [r7, #0]
 800978a:	2b08      	cmp	r3, #8
 800978c:	d002      	beq.n	8009794 <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800978e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009792:	e246      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 8009794:	883b      	ldrh	r3, [r7, #0]
 8009796:	b2da      	uxtb	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 800979e:	e23f      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80097a0:	883b      	ldrh	r3, [r7, #0]
 80097a2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80097aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 80097ae:	e238      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 80097b0:	883b      	ldrh	r3, [r7, #0]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	729a      	strb	r2, [r3, #10]
        break;
 80097b8:	e232      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80097ba:	883b      	ldrh	r3, [r7, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d006      	beq.n	80097d0 <phacDiscLoop_Sw_SetConfig+0x4a0>
 80097c2:	883b      	ldrh	r3, [r7, #0]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80097ca:	f244 0321 	movw	r3, #16417	@ 0x4021
 80097ce:	e228      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80097d0:	883b      	ldrh	r3, [r7, #0]
 80097d2:	0a1b      	lsrs	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80097d8:	7b7b      	ldrb	r3, [r7, #13]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80097de:	f244 0321 	movw	r3, #16417	@ 0x4021
 80097e2:	e21e      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80097e4:	7b7a      	ldrb	r2, [r7, #13]
 80097e6:	883b      	ldrh	r3, [r7, #0]
 80097e8:	b2d8      	uxtb	r0, r3
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	4613      	mov	r3, r2
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	440b      	add	r3, r1
 80097f4:	336c      	adds	r3, #108	@ 0x6c
 80097f6:	4602      	mov	r2, r0
 80097f8:	701a      	strb	r2, [r3, #0]
        break;
 80097fa:	e211      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 80097fc:	883b      	ldrh	r3, [r7, #0]
 80097fe:	2b0c      	cmp	r3, #12
 8009800:	d902      	bls.n	8009808 <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009802:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009806:	e20c      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 8009808:	883b      	ldrh	r3, [r7, #0]
 800980a:	b2da      	uxtb	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        break;
 8009812:	e205      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 8009814:	883b      	ldrh	r3, [r7, #0]
 8009816:	2b0e      	cmp	r3, #14
 8009818:	d902      	bls.n	8009820 <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800981a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800981e:	e200      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 8009820:	883b      	ldrh	r3, [r7, #0]
 8009822:	b2da      	uxtb	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        break;
 800982a:	e1f9      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 800982c:	883b      	ldrh	r3, [r7, #0]
 800982e:	b2da      	uxtb	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        break;
 8009836:	e1f3      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8009838:	883b      	ldrh	r3, [r7, #0]
 800983a:	2b03      	cmp	r3, #3
 800983c:	d807      	bhi.n	800984e <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8009844:	2b01      	cmp	r3, #1
 8009846:	d105      	bne.n	8009854 <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8009848:	883b      	ldrh	r3, [r7, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800984e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009852:	e1e6      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 8009854:	883b      	ldrh	r3, [r7, #0]
 8009856:	b2da      	uxtb	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        break;
 800985e:	e1df      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8009860:	883b      	ldrh	r3, [r7, #0]
 8009862:	2b03      	cmp	r3, #3
 8009864:	d807      	bhi.n	8009876 <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800986c:	2b01      	cmp	r3, #1
 800986e:	d105      	bne.n	800987c <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8009870:	883b      	ldrh	r3, [r7, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009876:	f244 0321 	movw	r3, #16417	@ 0x4021
 800987a:	e1d2      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 800987c:	883b      	ldrh	r3, [r7, #0]
 800987e:	b2da      	uxtb	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        break;
 8009886:	e1cb      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 8009888:	883b      	ldrh	r3, [r7, #0]
 800988a:	2b0e      	cmp	r3, #14
 800988c:	d902      	bls.n	8009894 <phacDiscLoop_Sw_SetConfig+0x564>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800988e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009892:	e1c6      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid = (uint8_t)wValue;
 8009894:	883b      	ldrh	r3, [r7, #0]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 800989e:	e1bf      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 80098a0:	883b      	ldrh	r3, [r7, #0]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d902      	bls.n	80098ac <phacDiscLoop_Sw_SetConfig+0x57c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80098a6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80098aa:	e1ba      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri = (uint8_t)wValue;
 80098ac:	883b      	ldrh	r3, [r7, #0]
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 80098b6:	e1b3      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        if (wValue == 0U)
 80098b8:	883b      	ldrh	r3, [r7, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <phacDiscLoop_Sw_SetConfig+0x598>
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_OFF;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        }
        else
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
        }
        break;
 80098c6:	e1ab      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 80098d0:	e1a6      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        if (wValue > 255U)
 80098d2:	883b      	ldrh	r3, [r7, #0]
 80098d4:	2bff      	cmp	r3, #255	@ 0xff
 80098d6:	d902      	bls.n	80098de <phacDiscLoop_Sw_SetConfig+0x5ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80098d8:	f244 0321 	movw	r3, #16417	@ 0x4021
 80098dc:	e1a1      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad = (uint8_t)wValue;
 80098de:	883b      	ldrh	r3, [r7, #0]
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 80098e8:	e19a      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 80098ea:	883b      	ldrh	r3, [r7, #0]
 80098ec:	2b30      	cmp	r3, #48	@ 0x30
 80098ee:	d902      	bls.n	80098f6 <phacDiscLoop_Sw_SetConfig+0x5c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80098f0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80098f4:	e195      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength = (uint8_t)wValue;
 80098f6:	883b      	ldrh	r3, [r7, #0]
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        break;
 8009900:	e18e      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8009902:	883b      	ldrh	r3, [r7, #0]
 8009904:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <phacDiscLoop_Sw_SetConfig+0x5e2>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800990c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009910:	e187      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 8009912:	883b      	ldrh	r3, [r7, #0]
 8009914:	b2da      	uxtb	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	72da      	strb	r2, [r3, #11]
    break;
 800991a:	e181      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 800991c:	883b      	ldrh	r3, [r7, #0]
 800991e:	b2da      	uxtb	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
      break;
 8009926:	e17b      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 8009928:	883b      	ldrh	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d104      	bne.n	8009938 <phacDiscLoop_Sw_SetConfig+0x608>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 8009936:	e173      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      break;
 8009940:	e16e      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 8009942:	883b      	ldrh	r3, [r7, #0]
 8009944:	2b0c      	cmp	r3, #12
 8009946:	d902      	bls.n	800994e <phacDiscLoop_Sw_SetConfig+0x61e>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009948:	f244 0321 	movw	r3, #16417	@ 0x4021
 800994c:	e169      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 800994e:	883b      	ldrh	r3, [r7, #0]
 8009950:	b2da      	uxtb	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
      break;
 8009958:	e162      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 800995a:	883b      	ldrh	r3, [r7, #0]
 800995c:	2b0e      	cmp	r3, #14
 800995e:	d902      	bls.n	8009966 <phacDiscLoop_Sw_SetConfig+0x636>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009960:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009964:	e15d      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 8009966:	883b      	ldrh	r3, [r7, #0]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
      break;
 8009970:	e156      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 8009972:	883b      	ldrh	r3, [r7, #0]
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
        break;
 800997c:	e150      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800997e:	883b      	ldrh	r3, [r7, #0]
 8009980:	2b03      	cmp	r3, #3
 8009982:	d807      	bhi.n	8009994 <phacDiscLoop_Sw_SetConfig+0x664>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800998a:	2b01      	cmp	r3, #1
 800998c:	d105      	bne.n	800999a <phacDiscLoop_Sw_SetConfig+0x66a>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800998e:	883b      	ldrh	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <phacDiscLoop_Sw_SetConfig+0x66a>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009994:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009998:	e143      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 800999a:	883b      	ldrh	r3, [r7, #0]
 800999c:	b2da      	uxtb	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
      break;
 80099a4:	e13c      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80099a6:	883b      	ldrh	r3, [r7, #0]
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d807      	bhi.n	80099bc <phacDiscLoop_Sw_SetConfig+0x68c>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d105      	bne.n	80099c2 <phacDiscLoop_Sw_SetConfig+0x692>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80099b6:	883b      	ldrh	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <phacDiscLoop_Sw_SetConfig+0x692>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80099bc:	f244 0321 	movw	r3, #16417	@ 0x4021
 80099c0:	e12f      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 80099c2:	883b      	ldrh	r3, [r7, #0]
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
      break;
 80099cc:	e128      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80099ce:	883b      	ldrh	r3, [r7, #0]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d006      	beq.n	80099e4 <phacDiscLoop_Sw_SetConfig+0x6b4>
 80099d6:	883b      	ldrh	r3, [r7, #0]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <phacDiscLoop_Sw_SetConfig+0x6b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80099de:	f244 0321 	movw	r3, #16417	@ 0x4021
 80099e2:	e11e      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80099e4:	883b      	ldrh	r3, [r7, #0]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80099ec:	7b7b      	ldrb	r3, [r7, #13]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <phacDiscLoop_Sw_SetConfig+0x6c8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80099f2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80099f6:	e114      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80099f8:	7b7a      	ldrb	r2, [r7, #13]
 80099fa:	883b      	ldrh	r3, [r7, #0]
 80099fc:	b2d8      	uxtb	r0, r3
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	33dc      	adds	r3, #220	@ 0xdc
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	701a      	strb	r2, [r3, #0]
        break;
 8009a10:	e106      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 8009a12:	883b      	ldrh	r3, [r7, #0]
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8009a1c:	e100      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8009a1e:	883b      	ldrh	r3, [r7, #0]
 8009a20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <phacDiscLoop_Sw_SetConfig+0x6fe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009a28:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009a2c:	e0f9      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 8009a2e:	883b      	ldrh	r3, [r7, #0]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	731a      	strb	r2, [r3, #12]
        break;
 8009a36:	e0f3      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 8009a38:	883b      	ldrh	r3, [r7, #0]
 8009a3a:	2b0e      	cmp	r3, #14
 8009a3c:	d902      	bls.n	8009a44 <phacDiscLoop_Sw_SetConfig+0x714>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009a3e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009a42:	e0ee      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid = (uint8_t)wValue;
 8009a44:	883b      	ldrh	r3, [r7, #0]
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
        break;
 8009a4e:	e0e7      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 8009a50:	883b      	ldrh	r3, [r7, #0]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d902      	bls.n	8009a5c <phacDiscLoop_Sw_SetConfig+0x72c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009a56:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009a5a:	e0e2      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri = (uint8_t)wValue;
 8009a5c:	883b      	ldrh	r3, [r7, #0]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
        break;
 8009a66:	e0db      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable = (uint8_t)wValue;
 8009a68:	883b      	ldrh	r3, [r7, #0]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
        break;
 8009a72:	e0d5      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        if (wValue > 255U)
 8009a74:	883b      	ldrh	r3, [r7, #0]
 8009a76:	2bff      	cmp	r3, #255	@ 0xff
 8009a78:	d902      	bls.n	8009a80 <phacDiscLoop_Sw_SetConfig+0x750>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009a7a:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009a7e:	e0d0      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad = (uint8_t)wValue;
 8009a80:	883b      	ldrh	r3, [r7, #0]
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
        break;
 8009a8a:	e0c9      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 8009a8c:	883b      	ldrh	r3, [r7, #0]
 8009a8e:	2b30      	cmp	r3, #48	@ 0x30
 8009a90:	d902      	bls.n	8009a98 <phacDiscLoop_Sw_SetConfig+0x768>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009a92:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009a96:	e0c4      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength = (uint8_t)wValue;
 8009a98:	883b      	ldrh	r3, [r7, #0]
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
        break;
 8009aa2:	e0bd      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 8009aa4:	883b      	ldrh	r3, [r7, #0]
 8009aa6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <phacDiscLoop_Sw_SetConfig+0x784>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009aae:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009ab2:	e0b6      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 8009ab4:	883b      	ldrh	r3, [r7, #0]
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	739a      	strb	r2, [r3, #14]
        break;
 8009abc:	e0b0      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 8009abe:	883b      	ldrh	r3, [r7, #0]
 8009ac0:	2b0d      	cmp	r3, #13
 8009ac2:	d005      	beq.n	8009ad0 <phacDiscLoop_Sw_SetConfig+0x7a0>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 8009ac4:	883b      	ldrh	r3, [r7, #0]
 8009ac6:	2b0c      	cmp	r3, #12
 8009ac8:	d002      	beq.n	8009ad0 <phacDiscLoop_Sw_SetConfig+0x7a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009aca:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009ace:	e0a8      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 8009ad0:	883b      	ldrh	r3, [r7, #0]
 8009ad2:	2b0d      	cmp	r3, #13
 8009ad4:	d109      	bne.n	8009aea <phacDiscLoop_Sw_SetConfig+0x7ba>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8009adc:	f043 0302 	orr.w	r3, r3, #2
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 8009ae8:	e09a      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8009af0:	f023 0302 	bic.w	r3, r3, #2
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        break;
 8009afc:	e090      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 8009afe:	883b      	ldrh	r3, [r7, #0]
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d008      	beq.n	8009b16 <phacDiscLoop_Sw_SetConfig+0x7e6>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 8009b04:	883b      	ldrh	r3, [r7, #0]
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	d005      	beq.n	8009b16 <phacDiscLoop_Sw_SetConfig+0x7e6>
 8009b0a:	883b      	ldrh	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <phacDiscLoop_Sw_SetConfig+0x7e6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009b10:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009b14:	e085      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1a:	f107 020a 	add.w	r2, r7, #10
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f010 ff7f 	bl	801aa24 <phpalSli15693_Sw_GetConfig>
 8009b26:	4603      	mov	r3, r0
 8009b28:	81fb      	strh	r3, [r7, #14]
 8009b2a:	89fb      	ldrh	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <phacDiscLoop_Sw_SetConfig+0x804>
 8009b30:	89fb      	ldrh	r3, [r7, #14]
 8009b32:	e076      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 8009b34:	883b      	ldrh	r3, [r7, #0]
 8009b36:	2b10      	cmp	r3, #16
 8009b38:	d10a      	bne.n	8009b50 <phacDiscLoop_Sw_SetConfig+0x820>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8009b3a:	897b      	ldrh	r3, [r7, #10]
 8009b3c:	f043 0310 	orr.w	r3, r3, #16
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8009b44:	897b      	ldrh	r3, [r7, #10]
 8009b46:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	817b      	strh	r3, [r7, #10]
 8009b4e:	e017      	b.n	8009b80 <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 8009b50:	883b      	ldrh	r3, [r7, #0]
 8009b52:	2b20      	cmp	r3, #32
 8009b54:	d10a      	bne.n	8009b6c <phacDiscLoop_Sw_SetConfig+0x83c>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8009b56:	897b      	ldrh	r3, [r7, #10]
 8009b58:	f043 0320 	orr.w	r3, r3, #32
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8009b60:	897b      	ldrh	r3, [r7, #10]
 8009b62:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	817b      	strh	r3, [r7, #10]
 8009b6a:	e009      	b.n	8009b80 <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8009b6c:	897b      	ldrh	r3, [r7, #10]
 8009b6e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8009b76:	897b      	ldrh	r3, [r7, #10]
 8009b78:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b84:	897a      	ldrh	r2, [r7, #10]
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f010 fd75 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	81fb      	strh	r3, [r7, #14]
 8009b92:	89fb      	ldrh	r3, [r7, #14]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <phacDiscLoop_Sw_SetConfig+0x86c>
 8009b98:	89fb      	ldrh	r3, [r7, #14]
 8009b9a:	e042      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 8009b9c:	883b      	ldrh	r3, [r7, #0]
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
        break;
 8009ba6:	e03b      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 8009ba8:	883b      	ldrh	r3, [r7, #0]
 8009baa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <phacDiscLoop_Sw_SetConfig+0x888>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009bb2:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009bb6:	e034      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 8009bb8:	883b      	ldrh	r3, [r7, #0]
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	73da      	strb	r2, [r3, #15]
        break;
 8009bc0:	e02e      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 8009bc2:	883b      	ldrh	r3, [r7, #0]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d005      	beq.n	8009bd4 <phacDiscLoop_Sw_SetConfig+0x8a4>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 8009bc8:	883b      	ldrh	r3, [r7, #0]
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d002      	beq.n	8009bd4 <phacDiscLoop_Sw_SetConfig+0x8a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009bce:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009bd2:	e026      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 8009bd4:	883b      	ldrh	r3, [r7, #0]
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        break;
 8009bde:	e01f      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 8009be0:	883b      	ldrh	r3, [r7, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d005      	beq.n	8009bf2 <phacDiscLoop_Sw_SetConfig+0x8c2>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 8009be6:	883b      	ldrh	r3, [r7, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d002      	beq.n	8009bf2 <phacDiscLoop_Sw_SetConfig+0x8c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009bec:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009bf0:	e017      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 8009bf2:	883b      	ldrh	r3, [r7, #0]
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        break;
 8009bfc:	e010      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 8009bfe:	883b      	ldrh	r3, [r7, #0]
 8009c00:	2bff      	cmp	r3, #255	@ 0xff
 8009c02:	d902      	bls.n	8009c0a <phacDiscLoop_Sw_SetConfig+0x8da>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009c04:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009c08:	e00b      	b.n	8009c22 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 8009c0a:	883b      	ldrh	r3, [r7, #0]
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
        break;
 8009c14:	e004      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009c16:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009c1a:	81fb      	strh	r3, [r7, #14]
 8009c1c:	e000      	b.n	8009c20 <phacDiscLoop_Sw_SetConfig+0x8f0>
        break;
 8009c1e:	bf00      	nop
    }

    return status;
 8009c20:	89fb      	ldrh	r3, [r7, #14]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop

08009c2c <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	460b      	mov	r3, r1
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 8009c3e:	897b      	ldrh	r3, [r7, #10]
 8009c40:	2b92      	cmp	r3, #146	@ 0x92
 8009c42:	f200 82a4 	bhi.w	800a18e <phacDiscLoop_Sw_GetConfig+0x562>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <phacDiscLoop_Sw_GetConfig+0x20>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009f55 	.word	0x08009f55
 8009c50:	0800a013 	.word	0x0800a013
 8009c54:	0800a061 	.word	0x0800a061
 8009c58:	0800a06b 	.word	0x0800a06b
 8009c5c:	0800a0f1 	.word	0x0800a0f1
 8009c60:	0800a141 	.word	0x0800a141
 8009c64:	08009f2f 	.word	0x08009f2f
 8009c68:	0800a18f 	.word	0x0800a18f
 8009c6c:	0800a18f 	.word	0x0800a18f
 8009c70:	0800a18f 	.word	0x0800a18f
 8009c74:	0800a18f 	.word	0x0800a18f
 8009c78:	0800a18f 	.word	0x0800a18f
 8009c7c:	0800a18f 	.word	0x0800a18f
 8009c80:	0800a18f 	.word	0x0800a18f
 8009c84:	0800a18f 	.word	0x0800a18f
 8009c88:	0800a18f 	.word	0x0800a18f
 8009c8c:	08009f6d 	.word	0x08009f6d
 8009c90:	0800a02b 	.word	0x0800a02b
 8009c94:	0800a083 	.word	0x0800a083
 8009c98:	0800a0fb 	.word	0x0800a0fb
 8009c9c:	0800a14b 	.word	0x0800a14b
 8009ca0:	0800a18f 	.word	0x0800a18f
 8009ca4:	0800a18f 	.word	0x0800a18f
 8009ca8:	0800a18f 	.word	0x0800a18f
 8009cac:	0800a18f 	.word	0x0800a18f
 8009cb0:	0800a18f 	.word	0x0800a18f
 8009cb4:	0800a18f 	.word	0x0800a18f
 8009cb8:	0800a18f 	.word	0x0800a18f
 8009cbc:	0800a18f 	.word	0x0800a18f
 8009cc0:	0800a18f 	.word	0x0800a18f
 8009cc4:	0800a18f 	.word	0x0800a18f
 8009cc8:	0800a18f 	.word	0x0800a18f
 8009ccc:	08009f5f 	.word	0x08009f5f
 8009cd0:	0800a01d 	.word	0x0800a01d
 8009cd4:	0800a075 	.word	0x0800a075
 8009cd8:	0800a107 	.word	0x0800a107
 8009cdc:	0800a157 	.word	0x0800a157
 8009ce0:	0800a037 	.word	0x0800a037
 8009ce4:	0800a18f 	.word	0x0800a18f
 8009ce8:	0800a18f 	.word	0x0800a18f
 8009cec:	0800a18f 	.word	0x0800a18f
 8009cf0:	0800a18f 	.word	0x0800a18f
 8009cf4:	0800a18f 	.word	0x0800a18f
 8009cf8:	0800a18f 	.word	0x0800a18f
 8009cfc:	0800a18f 	.word	0x0800a18f
 8009d00:	0800a18f 	.word	0x0800a18f
 8009d04:	0800a18f 	.word	0x0800a18f
 8009d08:	0800a18f 	.word	0x0800a18f
 8009d0c:	0800a18f 	.word	0x0800a18f
 8009d10:	0800a18f 	.word	0x0800a18f
 8009d14:	0800a18f 	.word	0x0800a18f
 8009d18:	0800a18f 	.word	0x0800a18f
 8009d1c:	0800a18f 	.word	0x0800a18f
 8009d20:	0800a045 	.word	0x0800a045
 8009d24:	0800a053 	.word	0x0800a053
 8009d28:	0800a18f 	.word	0x0800a18f
 8009d2c:	0800a18f 	.word	0x0800a18f
 8009d30:	0800a18f 	.word	0x0800a18f
 8009d34:	0800a18f 	.word	0x0800a18f
 8009d38:	0800a18f 	.word	0x0800a18f
 8009d3c:	0800a18f 	.word	0x0800a18f
 8009d40:	0800a18f 	.word	0x0800a18f
 8009d44:	0800a18f 	.word	0x0800a18f
 8009d48:	0800a18f 	.word	0x0800a18f
 8009d4c:	08009f79 	.word	0x08009f79
 8009d50:	08009f87 	.word	0x08009f87
 8009d54:	08009f95 	.word	0x08009f95
 8009d58:	08009fb1 	.word	0x08009fb1
 8009d5c:	08009fa3 	.word	0x08009fa3
 8009d60:	08009fbf 	.word	0x08009fbf
 8009d64:	08009fcd 	.word	0x08009fcd
 8009d68:	08009fdb 	.word	0x08009fdb
 8009d6c:	08009fe9 	.word	0x08009fe9
 8009d70:	08009ff7 	.word	0x08009ff7
 8009d74:	0800a18f 	.word	0x0800a18f
 8009d78:	0800a18f 	.word	0x0800a18f
 8009d7c:	0800a18f 	.word	0x0800a18f
 8009d80:	0800a18f 	.word	0x0800a18f
 8009d84:	0800a18f 	.word	0x0800a18f
 8009d88:	0800a18f 	.word	0x0800a18f
 8009d8c:	0800a005 	.word	0x0800a005
 8009d90:	0800a09d 	.word	0x0800a09d
 8009d94:	0800a0ab 	.word	0x0800a0ab
 8009d98:	0800a0b9 	.word	0x0800a0b9
 8009d9c:	0800a0c7 	.word	0x0800a0c7
 8009da0:	0800a0d5 	.word	0x0800a0d5
 8009da4:	0800a0e3 	.word	0x0800a0e3
 8009da8:	0800a08f 	.word	0x0800a08f
 8009dac:	0800a18f 	.word	0x0800a18f
 8009db0:	0800a18f 	.word	0x0800a18f
 8009db4:	0800a18f 	.word	0x0800a18f
 8009db8:	0800a18f 	.word	0x0800a18f
 8009dbc:	0800a18f 	.word	0x0800a18f
 8009dc0:	0800a18f 	.word	0x0800a18f
 8009dc4:	0800a18f 	.word	0x0800a18f
 8009dc8:	0800a18f 	.word	0x0800a18f
 8009dcc:	0800a115 	.word	0x0800a115
 8009dd0:	0800a133 	.word	0x0800a133
 8009dd4:	0800a18f 	.word	0x0800a18f
 8009dd8:	0800a18f 	.word	0x0800a18f
 8009ddc:	0800a18f 	.word	0x0800a18f
 8009de0:	0800a18f 	.word	0x0800a18f
 8009de4:	0800a18f 	.word	0x0800a18f
 8009de8:	0800a18f 	.word	0x0800a18f
 8009dec:	0800a18f 	.word	0x0800a18f
 8009df0:	0800a18f 	.word	0x0800a18f
 8009df4:	0800a18f 	.word	0x0800a18f
 8009df8:	0800a18f 	.word	0x0800a18f
 8009dfc:	0800a18f 	.word	0x0800a18f
 8009e00:	0800a18f 	.word	0x0800a18f
 8009e04:	0800a18f 	.word	0x0800a18f
 8009e08:	0800a18f 	.word	0x0800a18f
 8009e0c:	0800a165 	.word	0x0800a165
 8009e10:	0800a173 	.word	0x0800a173
 8009e14:	0800a18f 	.word	0x0800a18f
 8009e18:	0800a18f 	.word	0x0800a18f
 8009e1c:	0800a18f 	.word	0x0800a18f
 8009e20:	0800a18f 	.word	0x0800a18f
 8009e24:	0800a18f 	.word	0x0800a18f
 8009e28:	0800a18f 	.word	0x0800a18f
 8009e2c:	0800a18f 	.word	0x0800a18f
 8009e30:	0800a18f 	.word	0x0800a18f
 8009e34:	0800a18f 	.word	0x0800a18f
 8009e38:	0800a18f 	.word	0x0800a18f
 8009e3c:	0800a18f 	.word	0x0800a18f
 8009e40:	0800a18f 	.word	0x0800a18f
 8009e44:	0800a18f 	.word	0x0800a18f
 8009e48:	0800a18f 	.word	0x0800a18f
 8009e4c:	08009f19 	.word	0x08009f19
 8009e50:	08009ef3 	.word	0x08009ef3
 8009e54:	0800a18f 	.word	0x0800a18f
 8009e58:	08009ebd 	.word	0x08009ebd
 8009e5c:	08009ec9 	.word	0x08009ec9
 8009e60:	08009f25 	.word	0x08009f25
 8009e64:	08009f01 	.word	0x08009f01
 8009e68:	08009ee5 	.word	0x08009ee5
 8009e6c:	08009ed7 	.word	0x08009ed7
 8009e70:	08009ea5 	.word	0x08009ea5
 8009e74:	08009eb1 	.word	0x08009eb1
 8009e78:	08009e99 	.word	0x08009e99
 8009e7c:	08009f0d 	.word	0x08009f0d
 8009e80:	0800a18f 	.word	0x0800a18f
 8009e84:	0800a18f 	.word	0x0800a18f
 8009e88:	0800a18f 	.word	0x0800a18f
 8009e8c:	0800a181 	.word	0x0800a181
 8009e90:	08009f39 	.word	0x08009f39
 8009e94:	08009f47 	.word	0x08009f47
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	795b      	ldrb	r3, [r3, #5]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	801a      	strh	r2, [r3, #0]
        break;
 8009ea2:	e177      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	799b      	ldrb	r3, [r3, #6]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	801a      	strh	r2, [r3, #0]
        break;
 8009eae:	e171      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	78db      	ldrb	r3, [r3, #3]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	801a      	strh	r2, [r3, #0]
        break;
 8009eba:	e16b      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	7f9b      	ldrb	r3, [r3, #30]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	801a      	strh	r2, [r3, #0]
        break;
 8009ec6:	e165      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	891b      	ldrh	r3, [r3, #8]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	801a      	strh	r2, [r3, #0]
        break;
 8009ed4:	e15e      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009edc:	461a      	mov	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	801a      	strh	r2, [r3, #0]
        break;
 8009ee2:	e157      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009eea:	461a      	mov	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	801a      	strh	r2, [r3, #0]
        break;
 8009ef0:	e150      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009ef8:	461a      	mov	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	801a      	strh	r2, [r3, #0]
         break;
 8009efe:	e149      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	791b      	ldrb	r3, [r3, #4]
 8009f04:	461a      	mov	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	801a      	strh	r2, [r3, #0]
        break;
 8009f0a:	e143      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	789b      	ldrb	r3, [r3, #2]
 8009f10:	461a      	mov	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	801a      	strh	r2, [r3, #0]
        break;
 8009f16:	e13d      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	7fdb      	ldrb	r3, [r3, #31]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	801a      	strh	r2, [r3, #0]
        break;
 8009f22:	e137      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	801a      	strh	r2, [r3, #0]
        break;
 8009f2c:	e132      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8b9a      	ldrh	r2, [r3, #28]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	801a      	strh	r2, [r3, #0]
        break;
 8009f36:	e12d      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	801a      	strh	r2, [r3, #0]
        break;
 8009f44:	e126      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	801a      	strh	r2, [r3, #0]
        break;
 8009f52:	e11f      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	8a1a      	ldrh	r2, [r3, #16]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	801a      	strh	r2, [r3, #0]
        break;
 8009f5c:	e11a      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009f64:	461a      	mov	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	801a      	strh	r2, [r3, #0]
        break;
 8009f6a:	e113      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	7a9b      	ldrb	r3, [r3, #10]
 8009f70:	461a      	mov	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	801a      	strh	r2, [r3, #0]
        break;
 8009f76:	e10d      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	801a      	strh	r2, [r3, #0]
        break;
 8009f84:	e106      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	801a      	strh	r2, [r3, #0]
        break;
 8009f92:	e0ff      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	801a      	strh	r2, [r3, #0]
        break;
 8009fa0:	e0f8      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009fa8:	461a      	mov	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	801a      	strh	r2, [r3, #0]
        break;
 8009fae:	e0f1      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	801a      	strh	r2, [r3, #0]
        break;
 8009fbc:	e0ea      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	801a      	strh	r2, [r3, #0]
        break;
 8009fca:	e0e3      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	801a      	strh	r2, [r3, #0]
        break;
 8009fd8:	e0dc      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	801a      	strh	r2, [r3, #0]
        break;
 8009fe6:	e0d5      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8009fee:	461a      	mov	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	801a      	strh	r2, [r3, #0]
        break;
 8009ff4:	e0ce      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	801a      	strh	r2, [r3, #0]
        break;
 800a002:	e0c7      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a00a:	461a      	mov	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	801a      	strh	r2, [r3, #0]
        break;
 800a010:	e0c0      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8a5a      	ldrh	r2, [r3, #18]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	801a      	strh	r2, [r3, #0]
        break;
 800a01a:	e0bb      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a022:	461a      	mov	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	801a      	strh	r2, [r3, #0]
        break;
 800a028:	e0b4      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	7adb      	ldrb	r3, [r3, #11]
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	801a      	strh	r2, [r3, #0]
        break;
 800a034:	e0ae      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800a03c:	461a      	mov	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	801a      	strh	r2, [r3, #0]
        break;
 800a042:	e0a7      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	801a      	strh	r2, [r3, #0]
        break;
 800a050:	e0a0      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800a058:	461a      	mov	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	801a      	strh	r2, [r3, #0]
        break;
 800a05e:	e099      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8a9a      	ldrh	r2, [r3, #20]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	801a      	strh	r2, [r3, #0]
         break;
 800a068:	e094      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8ada      	ldrh	r2, [r3, #22]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	801a      	strh	r2, [r3, #0]
         break;
 800a072:	e08f      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	801a      	strh	r2, [r3, #0]
        break;
 800a080:	e088      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	7b1b      	ldrb	r3, [r3, #12]
 800a086:	461a      	mov	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	801a      	strh	r2, [r3, #0]
        break;
 800a08c:	e082      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a094:	461a      	mov	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	801a      	strh	r2, [r3, #0]
         break;
 800a09a:	e07b      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	801a      	strh	r2, [r3, #0]
        break;
 800a0a8:	e074      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	801a      	strh	r2, [r3, #0]
        break;
 800a0b6:	e06d      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800a0be:	461a      	mov	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	801a      	strh	r2, [r3, #0]
        break;
 800a0c4:	e066      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	801a      	strh	r2, [r3, #0]
        break;
 800a0d2:	e05f      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800a0da:	461a      	mov	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	801a      	strh	r2, [r3, #0]
        break;
 800a0e0:	e058      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	801a      	strh	r2, [r3, #0]
        break;
 800a0ee:	e051      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8b1a      	ldrh	r2, [r3, #24]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	801a      	strh	r2, [r3, #0]
        break;
 800a0f8:	e04c      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	7b9b      	ldrb	r3, [r3, #14]
 800a0fe:	461a      	mov	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	801a      	strh	r2, [r3, #0]
        break;
 800a104:	e046      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800a10c:	461a      	mov	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	801a      	strh	r2, [r3, #0]
        break;
 800a112:	e03f      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <phacDiscLoop_Sw_GetConfig+0x4fe>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	220d      	movs	r2, #13
 800a126:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 800a128:	e034      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	220c      	movs	r2, #12
 800a12e:	801a      	strh	r2, [r3, #0]
        break;
 800a130:	e030      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800a138:	461a      	mov	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	801a      	strh	r2, [r3, #0]
        break;
 800a13e:	e029      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8b5a      	ldrh	r2, [r3, #26]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	801a      	strh	r2, [r3, #0]
        break;
 800a148:	e024      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	7bdb      	ldrb	r3, [r3, #15]
 800a14e:	461a      	mov	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	801a      	strh	r2, [r3, #0]
        break;
 800a154:	e01e      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800a15c:	461a      	mov	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	801a      	strh	r2, [r3, #0]
        break;
 800a162:	e017      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800a16a:	461a      	mov	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	801a      	strh	r2, [r3, #0]
        break;
 800a170:	e010      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 800a178:	461a      	mov	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	801a      	strh	r2, [r3, #0]
        break;
 800a17e:	e009      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800a186:	461a      	mov	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	801a      	strh	r2, [r3, #0]
        break;
 800a18c:	e002      	b.n	800a194 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a18e:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a192:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 800a194:	8afb      	ldrh	r3, [r7, #22]
}
 800a196:	4618      	mov	r0, r3
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop

0800a1a4 <phacDiscLoop_Sw_ActivateCard>:
phStatus_t phacDiscLoop_Sw_ActivateCard(
                                        phacDiscLoop_Sw_DataParams_t * pDataParams,
                                        uint8_t bTechType,
                                        uint8_t bTagIndex
                                        )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	70bb      	strb	r3, [r7, #2]
    return phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, bTechType, bTagIndex);
 800a1b4:	78ba      	ldrb	r2, [r7, #2]
 800a1b6:	78fb      	ldrb	r3, [r7, #3]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 ff40 	bl	800b040 <phacDiscLoop_Sw_Int_ActivateDevice>
 800a1c0:	4603      	mov	r3, r0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800a1dc:	2301      	movs	r3, #1
 800a1de:	737b      	strb	r3, [r7, #13]
 800a1e0:	e0ba      	b.n	800a358 <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1e6:	7b7b      	ldrb	r3, [r7, #13]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 800a1ee:	7b3b      	ldrb	r3, [r7, #12]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	f240 80ae 	bls.w	800a352 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800a1f6:	7b3b      	ldrb	r3, [r7, #12]
 800a1f8:	2b05      	cmp	r3, #5
 800a1fa:	d106      	bne.n	800a20a <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	789b      	ldrb	r3, [r3, #2]
 800a200:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 80a3 	beq.w	800a350 <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800a20a:	7b3b      	ldrb	r3, [r7, #12]
 800a20c:	2b05      	cmp	r3, #5
 800a20e:	d115      	bne.n	800a23c <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800a214:	2b20      	cmp	r3, #32
 800a216:	d111      	bne.n	800a23c <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 800a218:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 800a21c:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 800a21e:	893b      	ldrh	r3, [r7, #8]
 800a220:	461a      	mov	r2, r3
 800a222:	2105      	movs	r1, #5
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff f883 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800a22a:	4603      	mov	r3, r0
 800a22c:	81fb      	strh	r3, [r7, #14]
 800a22e:	89fb      	ldrh	r3, [r7, #14]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 800a234:	89fb      	ldrh	r3, [r7, #14]
 800a236:	e094      	b.n	800a362 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 800a238:	89fb      	ldrh	r3, [r7, #14]
 800a23a:	e092      	b.n	800a362 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 800a23c:	7b7b      	ldrb	r3, [r7, #13]
 800a23e:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3b01      	subs	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	4413      	add	r3, r2
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 800a252:	7b3b      	ldrb	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d105      	bne.n	800a264 <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	789b      	ldrb	r3, [r3, #2]
 800a25c:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 800a260:	2b00      	cmp	r3, #0
 800a262:	d134      	bne.n	800a2ce <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 800a264:	7b3b      	ldrb	r3, [r7, #12]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d105      	bne.n	800a276 <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	789b      	ldrb	r3, [r3, #2]
 800a26e:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 800a272:	2b00      	cmp	r3, #0
 800a274:	d12b      	bne.n	800a2ce <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 800a276:	7b3b      	ldrb	r3, [r7, #12]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d105      	bne.n	800a288 <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	789b      	ldrb	r3, [r3, #2]
 800a280:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 800a284:	2b00      	cmp	r3, #0
 800a286:	d122      	bne.n	800a2ce <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 800a288:	7b3b      	ldrb	r3, [r7, #12]
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d105      	bne.n	800a29a <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 800a296:	2b00      	cmp	r3, #0
 800a298:	d119      	bne.n	800a2ce <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 800a29a:	7b3b      	ldrb	r3, [r7, #12]
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d105      	bne.n	800a2ac <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	789b      	ldrb	r3, [r3, #2]
 800a2a4:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d110      	bne.n	800a2ce <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 800a2ac:	7b3b      	ldrb	r3, [r7, #12]
 800a2ae:	2b05      	cmp	r3, #5
 800a2b0:	d105      	bne.n	800a2be <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	789b      	ldrb	r3, [r3, #2]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d107      	bne.n	800a2ce <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 800a2c4:	2306      	movs	r3, #6
 800a2c6:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 800a2c8:	7afb      	ldrb	r3, [r7, #11]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1b8      	bne.n	800a240 <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 800a2ce:	7b3b      	ldrb	r3, [r7, #12]
 800a2d0:	2b06      	cmp	r3, #6
 800a2d2:	d825      	bhi.n	800a320 <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 800a2d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2dc <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a2f9 	.word	0x0800a2f9
 800a2e0:	0800a301 	.word	0x0800a301
 800a2e4:	0800a309 	.word	0x0800a309
 800a2e8:	0800a309 	.word	0x0800a309
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a321 	.word	0x0800a321
 800a2f4:	0800a319 	.word	0x0800a319
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 800a2f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a2fc:	813b      	strh	r3, [r7, #8]
                break;
 800a2fe:	e013      	b.n	800a328 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 800a300:	f640 63d8 	movw	r3, #3800	@ 0xed8
 800a304:	813b      	strh	r3, [r7, #8]
                break;
 800a306:	e00f      	b.n	800a328 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 800a308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a30c:	813b      	strh	r3, [r7, #8]
                break;
 800a30e:	e00b      	b.n	800a328 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 800a310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a314:	813b      	strh	r3, [r7, #8]
                break;
 800a316:	e007      	b.n	800a328 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 800a318:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 800a31c:	813b      	strh	r3, [r7, #8]
                break;
 800a31e:	e003      	b.n	800a328 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 800a320:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a324:	813b      	strh	r3, [r7, #8]
                break;
 800a326:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a32c:	7b7b      	ldrb	r3, [r7, #13]
 800a32e:	4413      	add	r3, r2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b05      	cmp	r3, #5
 800a334:	d10d      	bne.n	800a352 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 800a336:	893b      	ldrh	r3, [r7, #8]
 800a338:	461a      	mov	r2, r3
 800a33a:	2105      	movs	r1, #5
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7fe fff7 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800a342:	4603      	mov	r3, r0
 800a344:	81fb      	strh	r3, [r7, #14]
 800a346:	89fb      	ldrh	r3, [r7, #14]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 800a34c:	89fb      	ldrh	r3, [r7, #14]
 800a34e:	e008      	b.n	800a362 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 800a350:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800a352:	7b7b      	ldrb	r3, [r7, #13]
 800a354:	3301      	adds	r3, #1
 800a356:	737b      	strb	r3, [r7, #13]
 800a358:	7b7b      	ldrb	r3, [r7, #13]
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	f67f af41 	bls.w	800a1e2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 800a360:	89fb      	ldrh	r3, [r7, #14]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop

0800a36c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a378:	4618      	mov	r0, r3
 800a37a:	f005 f9db 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 800a37e:	4603      	mov	r3, r0
 800a380:	81fb      	strh	r3, [r7, #14]
 800a382:	89fb      	ldrh	r3, [r7, #14]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 800a388:	89fb      	ldrh	r3, [r7, #14]
 800a38a:	e01b      	b.n	800a3c4 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a390:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800a394:	2100      	movs	r1, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f005 f9f0 	bl	800f77c <phhalHw_Pn5180_Wait>
 800a39c:	4603      	mov	r3, r0
 800a39e:	81fb      	strh	r3, [r7, #14]
 800a3a0:	89fb      	ldrh	r3, [r7, #14]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 800a3a6:	89fb      	ldrh	r3, [r7, #14]
 800a3a8:	e00c      	b.n	800a3c4 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f005 f96a 	bl	800f688 <phhalHw_Pn5180_FieldOn>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	81fb      	strh	r3, [r7, #14]
 800a3b8:	89fb      	ldrh	r3, [r7, #14]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 800a3be:	89fb      	ldrh	r3, [r7, #14]
 800a3c0:	e000      	b.n	800a3c4 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 800a3cc:	b590      	push	{r4, r7, lr}
 800a3ce:	b087      	sub	sp, #28
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800a3d4:	237f      	movs	r3, #127	@ 0x7f
 800a3d6:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800a3de:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	799b      	ldrb	r3, [r3, #6]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	799b      	ldrb	r3, [r3, #6]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 800a3fa:	89bb      	ldrh	r3, [r7, #12]
 800a3fc:	f043 0304 	orr.w	r3, r3, #4
 800a400:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 800a402:	89bb      	ldrh	r3, [r7, #12]
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	795b      	ldrb	r3, [r3, #5]
 800a40c:	b21b      	sxth	r3, r3
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	b21a      	sxth	r2, r3
 800a414:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a418:	4313      	orrs	r3, r2
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	795b      	ldrb	r3, [r3, #5]
 800a422:	f003 0308 	and.w	r3, r3, #8
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 800a42a:	89bb      	ldrh	r3, [r7, #12]
 800a42c:	f043 0304 	orr.w	r3, r3, #4
 800a430:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f503 7498 	add.w	r4, r3, #304	@ 0x130
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800a448:	89b9      	ldrh	r1, [r7, #12]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4623      	mov	r3, r4
 800a44e:	f007 fa3b 	bl	80118c8 <phhalHw_Pn5180_Autocoll>
 800a452:	4603      	mov	r3, r0
 800a454:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 800a456:	897b      	ldrh	r3, [r7, #10]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d004      	beq.n	800a468 <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	1e5a      	subs	r2, r3, #1
 800a462:	73fa      	strb	r2, [r7, #15]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e4      	bne.n	800a432 <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 800a468:	897b      	ldrh	r3, [r7, #10]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d102      	bne.n	800a476 <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 800a470:	f244 0383 	movw	r3, #16515	@ 0x4083
 800a474:	e006      	b.n	800a484 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 800a476:	897b      	ldrh	r3, [r7, #10]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 800a47c:	897b      	ldrh	r3, [r7, #10]
 800a47e:	e001      	b.n	800a484 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 800a480:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd90      	pop	{r4, r7, pc}

0800a48c <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	b08c      	sub	sp, #48	@ 0x30
 800a492:	af06      	add	r7, sp, #24
 800a494:	6078      	str	r0, [r7, #4]
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    phStatus_t PH_MEMLOC_REM   status;
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus = PH_OFF;
 800a496:	2300      	movs	r3, #0
 800a498:	827b      	strh	r3, [r7, #18]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	757b      	strb	r3, [r7, #21]
 800a4a6:	e147      	b.n	800a738 <phacDiscLoop_Sw_Int_ActivePollMode+0x2ac>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	78db      	ldrb	r3, [r3, #3]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	7d7b      	ldrb	r3, [r7, #21]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b6:	400b      	ands	r3, r1
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	f000 8097 	beq.w	800a5ec <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	f200 8132 	bhi.w	800a728 <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d003      	beq.n	800a4d0 <phacDiscLoop_Sw_Int_ActivePollMode+0x44>
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	f000 808f 	beq.w	800a5ec <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
                }
#endif
                break;

            default:
                break;
 800a4ce:	e12b      	b.n	800a728 <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
                status = phhalHw_GetConfig(
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d4:	f107 0212 	add.w	r2, r7, #18
 800a4d8:	215f      	movs	r1, #95	@ 0x5f
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f006 fe56 	bl	801118c <phhalHw_Pn5180_GetConfig>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800a4e4:	8afb      	ldrh	r3, [r7, #22]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <phacDiscLoop_Sw_Int_ActivePollMode+0x62>
 800a4ea:	8afb      	ldrh	r3, [r7, #22]
 800a4ec:	e12a      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_ON)
 800a4ee:	8a7b      	ldrh	r3, [r7, #18]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d10e      	bne.n	800a512 <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8b9b      	ldrh	r3, [r3, #28]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	2135      	movs	r1, #53	@ 0x35
 800a500:	f005 f9f6 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800a504:	4603      	mov	r3, r0
 800a506:	82fb      	strh	r3, [r7, #22]
 800a508:	8afb      	ldrh	r3, [r7, #22]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
 800a50e:	8afb      	ldrh	r3, [r7, #22]
 800a510:	e118      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phhalHw_ApplyProtocolSettings(
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a516:	2107      	movs	r1, #7
 800a518:	4618      	mov	r0, r3
 800a51a:	f004 fc6d 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a51e:	4603      	mov	r3, r0
 800a520:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800a522:	8afb      	ldrh	r3, [r7, #22]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <phacDiscLoop_Sw_Int_ActivePollMode+0xa0>
 800a528:	8afb      	ldrh	r3, [r7, #22]
 800a52a:	e10b      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fdef 	bl	800b110 <phacDiscLoop_Sw_Int_FieldOn>
 800a532:	4603      	mov	r3, r0
 800a534:	82fb      	strh	r3, [r7, #22]
 800a536:	8afb      	ldrh	r3, [r7, #22]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <phacDiscLoop_Sw_Int_ActivePollMode+0xb4>
 800a53c:	8afb      	ldrh	r3, [r7, #22]
 800a53e:	e101      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_OFF)
 800a540:	8a7b      	ldrh	r3, [r7, #18]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10e      	bne.n	800a564 <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	8b9b      	ldrh	r3, [r3, #28]
 800a54e:	461a      	mov	r2, r3
 800a550:	2135      	movs	r1, #53	@ 0x35
 800a552:	f005 f9cd 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800a556:	4603      	mov	r3, r0
 800a558:	82fb      	strh	r3, [r7, #22]
 800a55a:	8afb      	ldrh	r3, [r7, #22]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
 800a560:	8afb      	ldrh	r3, [r7, #22]
 800a562:	e0ef      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phpalI18092mPI_Atr(
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f103 0c60 	add.w	ip, r3, #96	@ 0x60
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 800a590:	687c      	ldr	r4, [r7, #4]
 800a592:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800a594:	687d      	ldr	r5, [r7, #4]
 800a596:	3580      	adds	r5, #128	@ 0x80
 800a598:	9505      	str	r5, [sp, #20]
 800a59a:	9404      	str	r4, [sp, #16]
 800a59c:	9003      	str	r0, [sp, #12]
 800a59e:	9102      	str	r1, [sp, #8]
 800a5a0:	9201      	str	r2, [sp, #4]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	4643      	mov	r3, r8
 800a5a6:	4672      	mov	r2, lr
 800a5a8:	4661      	mov	r1, ip
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f00e fea4 	bl	80192f8 <phpalI18092mPI_Sw_Atr>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	82fb      	strh	r3, [r7, #22]
                if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a5b4:	8afb      	ldrh	r3, [r7, #22]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10f      	bne.n	800a5dc <phacDiscLoop_Sw_Int_ActivePollMode+0x150>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a5c2:	7d7b      	ldrb	r3, [r7, #21]
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800a5d6:	f244 038c 	movw	r3, #16524	@ 0x408c
 800a5da:	e0b3      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 800a5dc:	8afb      	ldrh	r3, [r7, #22]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	f040 80a3 	bne.w	800a72c <phacDiscLoop_Sw_Int_ActivePollMode+0x2a0>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a5e6:	f244 0384 	movw	r3, #16516	@ 0x4084
 800a5ea:	e0ab      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f005 f89f 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	82fb      	strh	r3, [r7, #22]
 800a5fa:	8afb      	ldrh	r3, [r7, #22]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <phacDiscLoop_Sw_Int_ActivePollMode+0x178>
 800a600:	8afb      	ldrh	r3, [r7, #22]
 800a602:	e09f      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	8b9b      	ldrh	r3, [r3, #28]
 800a60c:	461a      	mov	r2, r3
 800a60e:	2100      	movs	r1, #0
 800a610:	f005 f8b4 	bl	800f77c <phhalHw_Pn5180_Wait>
 800a614:	4603      	mov	r3, r0
 800a616:	82fb      	strh	r3, [r7, #22]
 800a618:	8afb      	ldrh	r3, [r7, #22]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <phacDiscLoop_Sw_Int_ActivePollMode+0x196>
 800a61e:	8afb      	ldrh	r3, [r7, #22]
 800a620:	e090      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if((PH_ON << bIndex) == PHAC_DISCLOOP_ACT_POS_BIT_MASK_212)
 800a622:	7d7b      	ldrb	r3, [r7, #21]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d108      	bne.n	800a63a <phacDiscLoop_Sw_Int_ActivePollMode+0x1ae>
                    status = phhalHw_ApplyProtocolSettings(
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	2108      	movs	r1, #8
 800a62e:	4618      	mov	r0, r3
 800a630:	f004 fbe2 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a634:	4603      	mov	r3, r0
 800a636:	82fb      	strh	r3, [r7, #22]
 800a638:	e007      	b.n	800a64a <phacDiscLoop_Sw_Int_ActivePollMode+0x1be>
                    status = phhalHw_ApplyProtocolSettings(
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63e:	2109      	movs	r1, #9
 800a640:	4618      	mov	r0, r3
 800a642:	f004 fbd9 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a646:	4603      	mov	r3, r0
 800a648:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800a64a:	8afb      	ldrh	r3, [r7, #22]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <phacDiscLoop_Sw_Int_ActivePollMode+0x1c8>
 800a650:	8afb      	ldrh	r3, [r7, #22]
 800a652:	e077      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fd5b 	bl	800b110 <phacDiscLoop_Sw_Int_FieldOn>
 800a65a:	4603      	mov	r3, r0
 800a65c:	82fb      	strh	r3, [r7, #22]
 800a65e:	8afb      	ldrh	r3, [r7, #22]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <phacDiscLoop_Sw_Int_ActivePollMode+0x1dc>
 800a664:	8afb      	ldrh	r3, [r7, #22]
 800a666:	e06d      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8b9b      	ldrh	r3, [r3, #28]
 800a670:	461a      	mov	r2, r3
 800a672:	2135      	movs	r1, #53	@ 0x35
 800a674:	f005 f93c 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800a678:	4603      	mov	r3, r0
 800a67a:	82fb      	strh	r3, [r7, #22]
 800a67c:	8afb      	ldrh	r3, [r7, #22]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <phacDiscLoop_Sw_Int_ActivePollMode+0x1fa>
 800a682:	8afb      	ldrh	r3, [r7, #22]
 800a684:	e05e      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[0].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 800a68c:	f107 0308 	add.w	r3, r7, #8
 800a690:	2208      	movs	r2, #8
 800a692:	4618      	mov	r0, r3
 800a694:	f017 fb43 	bl	8021d1e <memcpy>
                aNfcId3[8] = 0x00;
 800a698:	2300      	movs	r3, #0
 800a69a:	743b      	strb	r3, [r7, #16]
                aNfcId3[9] = 0x00;
 800a69c:	2300      	movs	r3, #0
 800a69e:	747b      	strb	r3, [r7, #17]
                status = phpalI18092mPI_Atr(
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 800a6bc:	6879      	ldr	r1, [r7, #4]
 800a6be:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800a6c8:	687c      	ldr	r4, [r7, #4]
 800a6ca:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 800a6ce:	687d      	ldr	r5, [r7, #4]
 800a6d0:	35bc      	adds	r5, #188	@ 0xbc
 800a6d2:	f107 0c08 	add.w	ip, r7, #8
 800a6d6:	9505      	str	r5, [sp, #20]
 800a6d8:	9404      	str	r4, [sp, #16]
 800a6da:	9003      	str	r0, [sp, #12]
 800a6dc:	9102      	str	r1, [sp, #8]
 800a6de:	9201      	str	r2, [sp, #4]
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	4643      	mov	r3, r8
 800a6e4:	4672      	mov	r2, lr
 800a6e6:	4661      	mov	r1, ip
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f00e fe05 	bl	80192f8 <phpalI18092mPI_Sw_Atr>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	82fb      	strh	r3, [r7, #22]
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a6f2:	8afb      	ldrh	r3, [r7, #22]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10f      	bne.n	800a71a <phacDiscLoop_Sw_Int_ActivePollMode+0x28e>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a700:	7d7b      	ldrb	r3, [r7, #21]
 800a702:	2101      	movs	r1, #1
 800a704:	fa01 f303 	lsl.w	r3, r1, r3
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	4313      	orrs	r3, r2
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800a714:	f244 038c 	movw	r3, #16524	@ 0x408c
 800a718:	e014      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 800a71a:	8afb      	ldrh	r3, [r7, #22]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d106      	bne.n	800a730 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a4>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a722:	f244 0384 	movw	r3, #16516	@ 0x4084
 800a726:	e00d      	b.n	800a744 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                break;
 800a728:	bf00      	nop
 800a72a:	e002      	b.n	800a732 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 800a72c:	bf00      	nop
 800a72e:	e000      	b.n	800a732 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 800a730:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800a732:	7d7b      	ldrb	r3, [r7, #21]
 800a734:	3301      	adds	r3, #1
 800a736:	757b      	strb	r3, [r7, #21]
 800a738:	7d7b      	ldrb	r3, [r7, #21]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	f67f aeb4 	bls.w	800a4a8 <phacDiscLoop_Sw_Int_ActivePollMode+0x1c>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a740:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a74e <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 800a75a:	2321      	movs	r3, #33	@ 0x21
 800a75c:	81fb      	strh	r3, [r7, #14]

    /* 技术检测阶段 */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	891b      	ldrh	r3, [r3, #8]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d145      	bne.n	800a7f2 <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d004      	beq.n	800a77a <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800a776:	2b03      	cmp	r3, #3
 800a778:	d110      	bne.n	800a79c <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7919      	ldrb	r1, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	789a      	ldrb	r2, [r3, #2]
 800a782:	f107 030b 	add.w	r3, r7, #11
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f976 	bl	800aa78 <phacDiscLoop_Sw_Int_TechDetectActivity>
 800a78c:	4603      	mov	r3, r0
 800a78e:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a790:	89fb      	ldrh	r3, [r7, #14]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b12      	cmp	r3, #18
 800a796:	d116      	bne.n	800a7c6 <phacDiscLoop_Sw_Int_PollMode+0x78>
 800a798:	89fb      	ldrh	r3, [r7, #14]
 800a79a:	e092      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d10f      	bne.n	800a7c6 <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	789b      	ldrb	r3, [r3, #2]
 800a7aa:	f107 020b 	add.w	r2, r7, #11
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fa95 	bl	800ace0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a7ba:	89fb      	ldrh	r3, [r7, #14]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b12      	cmp	r3, #18
 800a7c0:	d101      	bne.n	800a7c6 <phacDiscLoop_Sw_Int_PollMode+0x78>
 800a7c2:	89fb      	ldrh	r3, [r7, #14]
 800a7c4:	e07d      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7fdb      	ldrb	r3, [r3, #31]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d006      	beq.n	800a7e4 <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 800a7d6:	89fb      	ldrh	r3, [r7, #14]
 800a7d8:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 800a7da:	2b84      	cmp	r3, #132	@ 0x84
 800a7dc:	d102      	bne.n	800a7e4 <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a7de:	f244 0386 	movw	r3, #16518	@ 0x4086
 800a7e2:	e06e      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b87      	cmp	r3, #135	@ 0x87
 800a7ea:	d102      	bne.n	800a7f2 <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	811a      	strh	r2, [r3, #8]
        }
    }

    /* 碰撞处理 Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	891b      	ldrh	r3, [r3, #8]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d145      	bne.n	800a886 <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	789b      	ldrb	r3, [r3, #2]
 800a804:	4013      	ands	r3, r2
 800a806:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 800a808:	7b7b      	ldrb	r3, [r7, #13]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 800a80e:	7b7b      	ldrb	r3, [r7, #13]
 800a810:	3b01      	subs	r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	7b7b      	ldrb	r3, [r7, #13]
 800a816:	4013      	ands	r3, r2
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a81e:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a822:	e04e      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a824:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a828:	e04b      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 800a82a:	2300      	movs	r3, #0
 800a82c:	733b      	strb	r3, [r7, #12]
 800a82e:	e005      	b.n	800a83c <phacDiscLoop_Sw_Int_PollMode+0xee>
 800a830:	7b7b      	ldrb	r3, [r7, #13]
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	737b      	strb	r3, [r7, #13]
 800a836:	7b3b      	ldrb	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	733b      	strb	r3, [r7, #12]
 800a83c:	7b7b      	ldrb	r3, [r7, #13]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f6      	bne.n	800a830 <phacDiscLoop_Sw_Int_PollMode+0xe2>
 800a842:	7b3b      	ldrb	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <phacDiscLoop_Sw_Int_PollMode+0xfe>
 800a848:	237f      	movs	r3, #127	@ 0x7f
 800a84a:	e03a      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 800a84c:	7b3b      	ldrb	r3, [r7, #12]
 800a84e:	3b01      	subs	r3, #1
 800a850:	b2db      	uxtb	r3, r3
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fbb7 	bl	800afc8 <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 800a85a:	4603      	mov	r3, r0
 800a85c:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 800a85e:	89fb      	ldrh	r3, [r7, #14]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b89      	cmp	r3, #137	@ 0x89
 800a864:	d109      	bne.n	800a87a <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 800a866:	7b3b      	ldrb	r3, [r7, #12]
 800a868:	3b01      	subs	r3, #1
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2200      	movs	r2, #0
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fbe5 	bl	800b040 <phacDiscLoop_Sw_Int_ActivateDevice>
 800a876:	4603      	mov	r3, r0
 800a878:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 800a87a:	89fb      	ldrh	r3, [r7, #14]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b12      	cmp	r3, #18
 800a880:	d101      	bne.n	800a886 <phacDiscLoop_Sw_Int_PollMode+0x138>
 800a882:	89fb      	ldrh	r3, [r7, #14]
 800a884:	e01d      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
    }

    /* 移除检测 */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	891b      	ldrh	r3, [r3, #8]
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d109      	bne.n	800a8a2 <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a894:	2b01      	cmp	r3, #1
 800a896:	d104      	bne.n	800a8a2 <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f816 	bl	800a8ca <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <phacDiscLoop_Sw_Int_PollMode+0x172>
 800a8a8:	89fb      	ldrh	r3, [r7, #14]
 800a8aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <phacDiscLoop_Sw_Int_PollMode+0x172>
 800a8b2:	89fb      	ldrh	r3, [r7, #14]
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	e000      	b.n	800a8c2 <phacDiscLoop_Sw_Int_PollMode+0x174>
 800a8c0:	89fb      	ldrh	r3, [r7, #14]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af02      	add	r7, sp, #8
 800a8d0:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f004 ff2a 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	81fb      	strh	r3, [r7, #14]
 800a8e4:	89fb      	ldrh	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 800a8ea:	89fb      	ldrh	r3, [r7, #14]
 800a8ec:	e0bf      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f2:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f004 ff3f 	bl	800f77c <phhalHw_Pn5180_Wait>
 800a8fe:	4603      	mov	r3, r0
 800a900:	81fb      	strh	r3, [r7, #14]
 800a902:	89fb      	ldrh	r3, [r7, #14]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 800a908:	89fb      	ldrh	r3, [r7, #14]
 800a90a:	e0b0      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d054      	beq.n	800a9ca <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92c:	2101      	movs	r1, #1
 800a92e:	4618      	mov	r0, r3
 800a930:	f004 fa62 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a934:	4603      	mov	r3, r0
 800a936:	81fb      	strh	r3, [r7, #14]
 800a938:	89fb      	ldrh	r3, [r7, #14]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 800a93e:	89fb      	ldrh	r3, [r7, #14]
 800a940:	e095      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fbba 	bl	800b0bc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800a948:	4603      	mov	r3, r0
 800a94a:	81fb      	strh	r3, [r7, #14]
 800a94c:	89fb      	ldrh	r3, [r7, #14]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d037      	beq.n	800a9c2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 800a952:	89fb      	ldrh	r3, [r7, #14]
 800a954:	e08b      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	8a1b      	ldrh	r3, [r3, #16]
 800a95e:	461a      	mov	r2, r3
 800a960:	2135      	movs	r1, #53	@ 0x35
 800a962:	f004 ffc5 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800a966:	4603      	mov	r3, r0
 800a968:	81fb      	strh	r3, [r7, #14]
 800a96a:	89fb      	ldrh	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 800a970:	89fb      	ldrh	r3, [r7, #14]
 800a972:	e07c      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	335e      	adds	r3, #94	@ 0x5e
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f00a fde5 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 800a984:	4603      	mov	r3, r0
 800a986:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800a988:	89fb      	ldrh	r3, [r7, #14]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d015      	beq.n	800a9bc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 800a990:	89fb      	ldrh	r3, [r7, #14]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b12      	cmp	r3, #18
 800a996:	d101      	bne.n	800a99c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	e068      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f00a fde3 	bl	801556c <phpalI14443p3a_Sw_HaltA>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	81fb      	strh	r3, [r7, #14]
 800a9aa:	89fb      	ldrh	r3, [r7, #14]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b12      	cmp	r3, #18
 800a9b0:	d101      	bne.n	800a9b6 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 800a9b2:	89fb      	ldrh	r3, [r7, #14]
 800a9b4:	e05b      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	737b      	strb	r3, [r7, #13]
 800a9ba:	e002      	b.n	800a9c2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 800a9bc:	7b7b      	ldrb	r3, [r7, #13]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800a9c2:	7b7b      	ldrb	r3, [r7, #13]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d9c6      	bls.n	800a956 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 800a9c8:	e04a      	b.n	800aa60 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d6:	2102      	movs	r1, #2
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f004 fa0d 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	81fb      	strh	r3, [r7, #14]
 800a9e2:	89fb      	ldrh	r3, [r7, #14]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 800a9e8:	89fb      	ldrh	r3, [r7, #14]
 800a9ea:	e040      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fb65 	bl	800b0bc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	81fb      	strh	r3, [r7, #14]
 800a9f6:	89fb      	ldrh	r3, [r7, #14]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d02e      	beq.n	800aa5a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 800a9fc:	89fb      	ldrh	r3, [r7, #14]
 800a9fe:	e036      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8a5b      	ldrh	r3, [r3, #18]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	2135      	movs	r1, #53	@ 0x35
 800aa0c:	f004 ff70 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800aa10:	4603      	mov	r3, r0
 800aa12:	81fb      	strh	r3, [r7, #14]
 800aa14:	89fb      	ldrh	r3, [r7, #14]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 800aa1a:	89fb      	ldrh	r3, [r7, #14]
 800aa1c:	e027      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	33cd      	adds	r3, #205	@ 0xcd
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	32da      	adds	r2, #218	@ 0xda
 800aa2a:	9201      	str	r2, [sp, #4]
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	2200      	movs	r2, #0
 800aa32:	2100      	movs	r1, #0
 800aa34:	f00b fc1d 	bl	8016272 <phpalI14443p3b_Sw_WakeUpB>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800aa3c:	89fb      	ldrh	r3, [r7, #14]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d007      	beq.n	800aa54 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 800aa48:	89fb      	ldrh	r3, [r7, #14]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b12      	cmp	r3, #18
 800aa4e:	d104      	bne.n	800aa5a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 800aa50:	89fb      	ldrh	r3, [r7, #14]
 800aa52:	e00c      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 800aa54:	7b7b      	ldrb	r3, [r7, #13]
 800aa56:	3301      	adds	r3, #1
 800aa58:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800aa5a:	7b7b      	ldrb	r3, [r7, #13]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d9cf      	bls.n	800aa00 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d001      	beq.n	800aa6c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 800aa68:	89fb      	ldrh	r3, [r7, #14]
 800aa6a:	e000      	b.n	800aa6e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 800aa6c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	607b      	str	r3, [r7, #4]
 800aa82:	460b      	mov	r3, r1
 800aa84:	72fb      	strb	r3, [r7, #11]
 800aa86:	4613      	mov	r3, r2
 800aa88:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800aa8a:	2384      	movs	r3, #132	@ 0x84
 800aa8c:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 800aa92:	2300      	movs	r3, #0
 800aa94:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fb90 	bl	800a1cc <phacDiscLoop_Sw_Int_Apply_PTGT>
 800aaac:	4603      	mov	r3, r0
 800aaae:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 800aab0:	8afb      	ldrh	r3, [r7, #22]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 800aab6:	8afb      	ldrh	r3, [r7, #22]
 800aab8:	e109      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800aaba:	2300      	movs	r3, #0
 800aabc:	757b      	strb	r3, [r7, #21]
 800aabe:	e0e6      	b.n	800ac8e <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d106      	bne.n	800aad8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 800aaca:	7d3b      	ldrb	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 800aad0:	7d7b      	ldrb	r3, [r7, #21]
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	f000 80e0 	beq.w	800ac98 <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aadc:	7d7b      	ldrb	r3, [r7, #21]
 800aade:	4413      	add	r3, r2
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 800aae4:	7cbb      	ldrb	r3, [r7, #18]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d002      	beq.n	800aaf0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 800aaea:	7cbb      	ldrb	r3, [r7, #18]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d103      	bne.n	800aaf8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 800aaf0:	7cfb      	ldrb	r3, [r7, #19]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	f000 80c7 	beq.w	800ac86 <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 800aaf8:	7aba      	ldrb	r2, [r7, #10]
 800aafa:	7cbb      	ldrb	r3, [r7, #18]
 800aafc:	fa22 f303 	lsr.w	r3, r2, r3
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80bf 	beq.w	800ac88 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0e:	f107 0210 	add.w	r2, r7, #16
 800ab12:	215f      	movs	r1, #95	@ 0x5f
 800ab14:	4618      	mov	r0, r3
 800ab16:	f006 fb39 	bl	801118c <phhalHw_Pn5180_GetConfig>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 800ab1e:	8afb      	ldrh	r3, [r7, #22]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 800ab24:	8afb      	ldrh	r3, [r7, #22]
 800ab26:	e0d2      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 800ab28:	8a3b      	ldrh	r3, [r7, #16]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d123      	bne.n	800ab76 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 800ab2e:	7cbb      	ldrb	r3, [r7, #18]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d002      	beq.n	800ab3a <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 800ab34:	7cbb      	ldrb	r3, [r7, #18]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d10b      	bne.n	800ab52 <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800ab3a:	7cbb      	ldrb	r3, [r7, #18]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f002 f8f0 	bl	800cd24 <phacDiscLoop_Sw_Int_Config_GTF>
 800ab44:	4603      	mov	r3, r0
 800ab46:	82fb      	strh	r3, [r7, #22]
 800ab48:	8afb      	ldrh	r3, [r7, #22]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d013      	beq.n	800ab76 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 800ab4e:	8afb      	ldrh	r3, [r7, #22]
 800ab50:	e0bd      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ab56:	7cba      	ldrb	r2, [r7, #18]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3208      	adds	r2, #8
 800ab5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ab60:	461a      	mov	r2, r3
 800ab62:	2135      	movs	r1, #53	@ 0x35
 800ab64:	f004 fec4 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	82fb      	strh	r3, [r7, #22]
 800ab6c:	8afb      	ldrh	r3, [r7, #22]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 800ab72:	8afb      	ldrh	r3, [r7, #22]
 800ab74:	e0ab      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab7a:	7cbb      	ldrb	r3, [r7, #18]
 800ab7c:	4956      	ldr	r1, [pc, #344]	@ (800acd8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 800ab7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	4619      	mov	r1, r3
 800ab86:	4610      	mov	r0, r2
 800ab88:	f004 f936 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	82fb      	strh	r3, [r7, #22]
 800ab90:	8afb      	ldrh	r3, [r7, #22]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 800ab96:	8afb      	ldrh	r3, [r7, #22]
 800ab98:	e099      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 fab8 	bl	800b110 <phacDiscLoop_Sw_Int_FieldOn>
 800aba0:	4603      	mov	r3, r0
 800aba2:	82fb      	strh	r3, [r7, #22]
 800aba4:	8afb      	ldrh	r3, [r7, #22]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 800abaa:	8afb      	ldrh	r3, [r7, #22]
 800abac:	e08f      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 800abae:	8a3b      	ldrh	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d123      	bne.n	800abfc <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 800abb4:	7cbb      	ldrb	r3, [r7, #18]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d002      	beq.n	800abc0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 800abba:	7cbb      	ldrb	r3, [r7, #18]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d10b      	bne.n	800abd8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800abc0:	7cbb      	ldrb	r3, [r7, #18]
 800abc2:	4619      	mov	r1, r3
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f002 f8ad 	bl	800cd24 <phacDiscLoop_Sw_Int_Config_GTF>
 800abca:	4603      	mov	r3, r0
 800abcc:	82fb      	strh	r3, [r7, #22]
 800abce:	8afb      	ldrh	r3, [r7, #22]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d013      	beq.n	800abfc <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 800abd4:	8afb      	ldrh	r3, [r7, #22]
 800abd6:	e07a      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800abdc:	7cba      	ldrb	r2, [r7, #18]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3208      	adds	r2, #8
 800abe2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800abe6:	461a      	mov	r2, r3
 800abe8:	2135      	movs	r1, #53	@ 0x35
 800abea:	f004 fe81 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800abee:	4603      	mov	r3, r0
 800abf0:	82fb      	strh	r3, [r7, #22]
 800abf2:	8afb      	ldrh	r3, [r7, #22]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 800abf8:	8afb      	ldrh	r3, [r7, #22]
 800abfa:	e068      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 800abfc:	7cbb      	ldrb	r3, [r7, #18]
 800abfe:	4a37      	ldr	r2, [pc, #220]	@ (800acdc <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 800ac00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	4798      	blx	r3
 800ac08:	4603      	mov	r3, r0
 800ac0a:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800ac0c:	8afb      	ldrh	r3, [r7, #22]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b87      	cmp	r3, #135	@ 0x87
 800ac12:	d123      	bne.n	800ac5c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800ac1a:	7cbb      	ldrb	r3, [r7, #18]
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 800ac2e:	7d3b      	ldrb	r3, [r7, #20]
 800ac30:	3301      	adds	r3, #1
 800ac32:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ac3a:	f003 0304 	and.w	r3, r3, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00b      	beq.n	800ac68 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	7d3a      	ldrb	r2, [r7, #20]
 800ac54:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 800ac56:	2301      	movs	r3, #1
 800ac58:	74fb      	strb	r3, [r7, #19]
 800ac5a:	e005      	b.n	800ac68 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 800ac5c:	8afb      	ldrh	r3, [r7, #22]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b12      	cmp	r3, #18
 800ac62:	d101      	bne.n	800ac68 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 800ac64:	8afb      	ldrh	r3, [r7, #22]
 800ac66:	e032      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 800ac68:	7afa      	ldrb	r2, [r7, #11]
 800ac6a:	7cbb      	ldrb	r3, [r7, #18]
 800ac6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 800ac78:	7d3b      	ldrb	r3, [r7, #20]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d004      	beq.n	800ac88 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7d3a      	ldrb	r2, [r7, #20]
 800ac82:	701a      	strb	r2, [r3, #0]
                break;
 800ac84:	e009      	b.n	800ac9a <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 800ac86:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800ac88:	7d7b      	ldrb	r3, [r7, #21]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	757b      	strb	r3, [r7, #21]
 800ac8e:	7d7b      	ldrb	r3, [r7, #21]
 800ac90:	2b05      	cmp	r3, #5
 800ac92:	f67f af15 	bls.w	800aac0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 800ac96:	e000      	b.n	800ac9a <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 800ac98:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 800ac9a:	7d3b      	ldrb	r3, [r7, #20]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d105      	bne.n	800acac <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7d3a      	ldrb	r2, [r7, #20]
 800aca4:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800aca6:	f244 0387 	movw	r3, #16519	@ 0x4087
 800acaa:	e010      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 800acac:	7d3b      	ldrb	r3, [r7, #20]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d905      	bls.n	800acbe <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7d3a      	ldrb	r2, [r7, #20]
 800acb6:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800acb8:	f244 0388 	movw	r3, #16520	@ 0x4088
 800acbc:	e007      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 800acbe:	8afb      	ldrh	r3, [r7, #22]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d102      	bne.n	800accc <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800acc6:	f244 0384 	movw	r3, #16516	@ 0x4084
 800acca:	e000      	b.n	800acce <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 800accc:	8afb      	ldrh	r3, [r7, #22]
    }
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	080258b4 	.word	0x080258b4
 800acdc:	080258e4 	.word	0x080258e4

0800ace0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	460b      	mov	r3, r1
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800acee:	2384      	movs	r3, #132	@ 0x84
 800acf0:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 800ad02:	2300      	movs	r3, #0
 800ad04:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 800ad06:	2300      	movs	r3, #0
 800ad08:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d105      	bne.n	800ad2c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad24:	3301      	adds	r3, #1
 800ad26:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d002      	beq.n	800ad32 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 800ad2c:	f244 0325 	movw	r3, #16421	@ 0x4025
 800ad30:	e142      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	f107 0212 	add.w	r2, r7, #18
 800ad3a:	215f      	movs	r1, #95	@ 0x5f
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f006 fa25 	bl	801118c <phhalHw_Pn5180_GetConfig>
 800ad42:	4603      	mov	r3, r0
 800ad44:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 800ad46:	8bfb      	ldrh	r3, [r7, #30]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 800ad4c:	8bfb      	ldrh	r3, [r7, #30]
 800ad4e:	e133      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 800ad50:	8a7b      	ldrh	r3, [r7, #18]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f040 8104 	bne.w	800af60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	b2d2      	uxtb	r2, r2
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f004 f848 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	83fb      	strh	r3, [r7, #30]
 800ad6c:	8bfb      	ldrh	r3, [r7, #30]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 800ad72:	8bfb      	ldrh	r3, [r7, #30]
 800ad74:	e120      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 f9a0 	bl	800b0bc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	83fb      	strh	r3, [r7, #30]
 800ad80:	8bfb      	ldrh	r3, [r7, #30]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 800ad86:	8bfb      	ldrh	r3, [r7, #30]
 800ad88:	e116      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8e:	f107 0212 	add.w	r2, r7, #18
 800ad92:	215f      	movs	r1, #95	@ 0x5f
 800ad94:	4618      	mov	r0, r3
 800ad96:	f006 f9f9 	bl	801118c <phhalHw_Pn5180_GetConfig>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 800ad9e:	8bfb      	ldrh	r3, [r7, #30]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 800ada4:	8bfb      	ldrh	r3, [r7, #30]
 800ada6:	e107      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 800ada8:	8a7b      	ldrh	r3, [r7, #18]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	f000 80d8 	beq.w	800af60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 800adb0:	f244 030a 	movw	r3, #16394	@ 0x400a
 800adb4:	e100      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800adb6:	2300      	movs	r3, #0
 800adb8:	773b      	strb	r3, [r7, #28]
 800adba:	e0bf      	b.n	800af3c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adc0:	7f3b      	ldrb	r3, [r7, #28]
 800adc2:	4413      	add	r3, r2
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 800adc8:	7d3b      	ldrb	r3, [r7, #20]
 800adca:	2201      	movs	r2, #1
 800adcc:	fa02 f303 	lsl.w	r3, r2, r3
 800add0:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 800add2:	7afa      	ldrb	r2, [r7, #11]
 800add4:	7d7b      	ldrb	r3, [r7, #21]
 800add6:	4013      	ands	r3, r2
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 80ab 	beq.w	800af36 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 800ade0:	7e7b      	ldrb	r3, [r7, #25]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 80a7 	bne.w	800af36 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800adee:	7d7b      	ldrb	r3, [r7, #21]
 800adf0:	4013      	ands	r3, r2
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f040 809c 	bne.w	800af32 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 800adfa:	7d7b      	ldrb	r3, [r7, #21]
 800adfc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 800ae04:	2301      	movs	r3, #1
 800ae06:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 800ae0e:	7d7b      	ldrb	r3, [r7, #21]
 800ae10:	4013      	ands	r3, r2
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 800ae18:	7ebb      	ldrb	r3, [r7, #26]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d102      	bne.n	800ae24 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff faa4 	bl	800a36c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 800ae24:	7d7b      	ldrb	r3, [r7, #21]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d12c      	bne.n	800ae84 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 800ae38:	7d3a      	ldrb	r2, [r7, #20]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3208      	adds	r2, #8
 800ae3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 800ae42:	f240 424c 	movw	r2, #1100	@ 0x44c
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d908      	bls.n	800ae5c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 800ae4a:	7d3a      	ldrb	r2, [r7, #20]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3208      	adds	r2, #8
 800ae50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ae54:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800ae58:	82fb      	strh	r3, [r7, #22]
 800ae5a:	e005      	b.n	800ae68 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 800ae5c:	7d3a      	ldrb	r2, [r7, #20]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3208      	adds	r2, #8
 800ae62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ae66:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	8afa      	ldrh	r2, [r7, #22]
 800ae6e:	2135      	movs	r1, #53	@ 0x35
 800ae70:	4618      	mov	r0, r3
 800ae72:	f004 fd3d 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800ae76:	4603      	mov	r3, r0
 800ae78:	83fb      	strh	r3, [r7, #30]
 800ae7a:	8bfb      	ldrh	r3, [r7, #30]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d013      	beq.n	800aea8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 800ae80:	8bfb      	ldrh	r3, [r7, #30]
 800ae82:	e099      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ae88:	7d3a      	ldrb	r2, [r7, #20]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3208      	adds	r2, #8
 800ae8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ae92:	461a      	mov	r2, r3
 800ae94:	2135      	movs	r1, #53	@ 0x35
 800ae96:	f004 fd2b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	83fb      	strh	r3, [r7, #30]
 800ae9e:	8bfb      	ldrh	r3, [r7, #30]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 800aea4:	8bfb      	ldrh	r3, [r7, #30]
 800aea6:	e087      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aeac:	7d3b      	ldrb	r3, [r7, #20]
 800aeae:	4944      	ldr	r1, [pc, #272]	@ (800afc0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 800aeb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f003 ff9d 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800aebe:	4603      	mov	r3, r0
 800aec0:	83fb      	strh	r3, [r7, #30]
 800aec2:	8bfb      	ldrh	r3, [r7, #30]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 800aec8:	8bfb      	ldrh	r3, [r7, #30]
 800aeca:	e075      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 800aecc:	7d3b      	ldrb	r3, [r7, #20]
 800aece:	4a3d      	ldr	r2, [pc, #244]	@ (800afc4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 800aed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	4798      	blx	r3
 800aed8:	4603      	mov	r3, r0
 800aeda:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800aedc:	8bfb      	ldrh	r3, [r7, #30]
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b87      	cmp	r3, #135	@ 0x87
 800aee2:	d10c      	bne.n	800aefe <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800aeea:	7d7b      	ldrb	r3, [r7, #21]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 800aef6:	7f7b      	ldrb	r3, [r7, #29]
 800aef8:	3301      	adds	r3, #1
 800aefa:	777b      	strb	r3, [r7, #29]
 800aefc:	e005      	b.n	800af0a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 800aefe:	8bfb      	ldrh	r3, [r7, #30]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b12      	cmp	r3, #18
 800af04:	d101      	bne.n	800af0a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 800af06:	8bfb      	ldrh	r3, [r7, #30]
 800af08:	e056      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 800af10:	7d7b      	ldrb	r3, [r7, #21]
 800af12:	4013      	ands	r3, r2
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d008      	beq.n	800af2c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 800af1a:	7ebb      	ldrb	r3, [r7, #26]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d105      	bne.n	800af2c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f7ff fa23 	bl	800a36c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 800af26:	2301      	movs	r3, #1
 800af28:	76fb      	strb	r3, [r7, #27]
 800af2a:	e004      	b.n	800af36 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 800af2c:	2300      	movs	r3, #0
 800af2e:	76fb      	strb	r3, [r7, #27]
 800af30:	e001      	b.n	800af36 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 800af32:	2301      	movs	r3, #1
 800af34:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800af36:	7f3b      	ldrb	r3, [r7, #28]
 800af38:	3301      	adds	r3, #1
 800af3a:	773b      	strb	r3, [r7, #28]
 800af3c:	7f3b      	ldrb	r3, [r7, #28]
 800af3e:	2b05      	cmp	r3, #5
 800af40:	f67f af3c 	bls.w	800adbc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 800af44:	7f7b      	ldrb	r3, [r7, #29]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 800af4a:	2301      	movs	r3, #1
 800af4c:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 800af4e:	7ebb      	ldrb	r3, [r7, #26]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d105      	bne.n	800af60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 800af54:	7efb      	ldrb	r3, [r7, #27]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fa06 	bl	800a36c <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 800af60:	7e7b      	ldrb	r3, [r7, #25]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f43f af27 	beq.w	800adb6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 800af68:	7f7b      	ldrb	r3, [r7, #29]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d105      	bne.n	800af7a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7f7a      	ldrb	r2, [r7, #29]
 800af72:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 800af74:	2387      	movs	r3, #135	@ 0x87
 800af76:	83fb      	strh	r3, [r7, #30]
 800af78:	e00e      	b.n	800af98 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 800af7a:	7f7b      	ldrb	r3, [r7, #29]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d905      	bls.n	800af8c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	7f7a      	ldrb	r2, [r7, #29]
 800af84:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 800af86:	2388      	movs	r3, #136	@ 0x88
 800af88:	83fb      	strh	r3, [r7, #30]
 800af8a:	e005      	b.n	800af98 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 800af8c:	8bfb      	ldrh	r3, [r7, #30]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800af94:	2384      	movs	r3, #132	@ 0x84
 800af96:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800af98:	8bfb      	ldrh	r3, [r7, #30]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00b      	beq.n	800afb6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 800af9e:	8bfb      	ldrh	r3, [r7, #30]
 800afa0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d106      	bne.n	800afb6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 800afa8:	8bfb      	ldrh	r3, [r7, #30]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	b29b      	uxth	r3, r3
 800afae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	e000      	b.n	800afb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 800afb6:	8bfb      	ldrh	r3, [r7, #30]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3720      	adds	r7, #32
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	080258b4 	.word	0x080258b4
 800afc4:	080258e4 	.word	0x080258e4

0800afc8 <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	4a15      	ldr	r2, [pc, #84]	@ (800b03c <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 800afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800aff4:	89fb      	ldrh	r3, [r7, #14]
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d112      	bne.n	800b022 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	2201      	movs	r2, #1
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	b2da      	uxtb	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b012:	2b01      	cmp	r3, #1
 800b014:	d902      	bls.n	800b01c <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b016:	f244 038a 	movw	r3, #16522	@ 0x408a
 800b01a:	e00a      	b.n	800b032 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b01c:	f244 0389 	movw	r3, #16521	@ 0x4089
 800b020:	e007      	b.n	800b032 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800b022:	89fb      	ldrh	r3, [r7, #14]
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b01      	cmp	r3, #1
 800b028:	d102      	bne.n	800b030 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b02a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b02e:	e000      	b.n	800b032 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 800b030:	89fb      	ldrh	r3, [r7, #14]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	080258cc 	.word	0x080258cc

0800b040 <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
 800b04c:	4613      	mov	r3, r2
 800b04e:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	4a17      	ldr	r2, [pc, #92]	@ (800b0b8 <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 800b05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b060:	78ba      	ldrb	r2, [r7, #2]
 800b062:	4611      	mov	r1, r2
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	4798      	blx	r3
 800b068:	4603      	mov	r3, r0
 800b06a:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b06c:	89fb      	ldrh	r3, [r7, #14]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	2201      	movs	r2, #1
 800b078:	fa02 f303 	lsl.w	r3, r2, r3
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800b084:	f244 038b 	movw	r3, #16523	@ 0x408b
 800b088:	e012      	b.n	800b0b0 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 800b08a:	89fb      	ldrh	r3, [r7, #14]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b8e      	cmp	r3, #142	@ 0x8e
 800b090:	d003      	beq.n	800b09a <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 800b092:	89fb      	ldrh	r3, [r7, #14]
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b8d      	cmp	r3, #141	@ 0x8d
 800b098:	d109      	bne.n	800b0ae <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	2201      	movs	r2, #1
 800b09e:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 800b0aa:	89fb      	ldrh	r3, [r7, #14]
 800b0ac:	e000      	b.n	800b0b0 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 800b0ae:	89fb      	ldrh	r3, [r7, #14]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	080258fc 	.word	0x080258fc

0800b0bc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2156      	movs	r1, #86	@ 0x56
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f004 fc0d 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 800b0da:	89fb      	ldrh	r3, [r7, #14]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b23      	cmp	r3, #35	@ 0x23
 800b0e0:	d005      	beq.n	800b0ee <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 800b0e2:	89fb      	ldrh	r3, [r7, #14]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 800b0ea:	89fb      	ldrh	r3, [r7, #14]
 800b0ec:	e00c      	b.n	800b108 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f004 fac8 	bl	800f688 <phhalHw_Pn5180_FieldOn>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	81fb      	strh	r3, [r7, #14]
 800b0fc:	89fb      	ldrh	r3, [r7, #14]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 800b102:	89fb      	ldrh	r3, [r7, #14]
 800b104:	e000      	b.n	800b108 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 800b106:	89fb      	ldrh	r3, [r7, #14]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b118:	2300      	movs	r3, #0
 800b11a:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b120:	2201      	movs	r2, #1
 800b122:	2156      	movs	r1, #86	@ 0x56
 800b124:	4618      	mov	r0, r3
 800b126:	f004 fbe3 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800b12a:	4603      	mov	r3, r0
 800b12c:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 800b12e:	89fb      	ldrh	r3, [r7, #14]
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b23      	cmp	r3, #35	@ 0x23
 800b134:	d005      	beq.n	800b142 <phacDiscLoop_Sw_Int_FieldOn+0x32>
 800b136:	89fb      	ldrh	r3, [r7, #14]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 800b13e:	89fb      	ldrh	r3, [r7, #14]
 800b140:	e01d      	b.n	800b17e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b146:	4618      	mov	r0, r3
 800b148:	f004 fa9e 	bl	800f688 <phhalHw_Pn5180_FieldOn>
 800b14c:	4603      	mov	r3, r0
 800b14e:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 800b150:	89fb      	ldrh	r3, [r7, #14]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b0a      	cmp	r3, #10
 800b156:	d102      	bne.n	800b15e <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 800b158:	f244 0382 	movw	r3, #16514	@ 0x4082
 800b15c:	e00f      	b.n	800b17e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800b15e:	89fb      	ldrh	r3, [r7, #14]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00b      	beq.n	800b17c <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800b164:	89fb      	ldrh	r3, [r7, #14]
 800b166:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800b16e:	89fb      	ldrh	r3, [r7, #14]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	b29b      	uxth	r3, r3
 800b174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b178:	b29b      	uxth	r3, r3
 800b17a:	e000      	b.n	800b17e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 800b17c:	89fb      	ldrh	r3, [r7, #14]
    }
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	4603      	mov	r3, r0
 800b18e:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00f      	beq.n	800b1b8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800b198:	88fb      	ldrh	r3, [r7, #6]
 800b19a:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d00b      	beq.n	800b1b8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	d007      	beq.n	800b1b8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d003      	beq.n	800b1b8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 800b1b0:	88fb      	ldrh	r3, [r7, #6]
 800b1b2:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800b1b4:	2b06      	cmp	r3, #6
 800b1b6:	d101      	bne.n	800b1bc <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e000      	b.n	800b1be <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 800b1bc:	2300      	movs	r3, #0
    }
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7f9b      	ldrb	r3, [r3, #30]
 800b1de:	f023 0301 	bic.w	r3, r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73fb      	strb	r3, [r7, #15]
 800b1ec:	e014      	b.n	800b218 <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 800b1ee:	7bfa      	ldrb	r2, [r7, #15]
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	1a9b      	subs	r3, r3, r2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	336c      	adds	r3, #108	@ 0x6c
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 800b200:	7bfa      	ldrb	r2, [r7, #15]
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	4613      	mov	r3, r2
 800b206:	011b      	lsls	r3, r3, #4
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	440b      	add	r3, r1
 800b20c:	336a      	adds	r3, #106	@ 0x6a
 800b20e:	2200      	movs	r2, #0
 800b210:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	3301      	adds	r3, #1
 800b216:	73fb      	strb	r3, [r7, #15]
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0e7      	beq.n	800b1ee <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	335e      	adds	r3, #94	@ 0x5e
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f00a f990 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 800b22e:	4603      	mov	r3, r0
 800b230:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800b232:	89bb      	ldrh	r3, [r7, #12]
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff ffa6 	bl	800b186 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d02d      	beq.n	800b29c <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b240:	89bb      	ldrh	r3, [r7, #12]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b03      	cmp	r3, #3
 800b246:	d106      	bne.n	800b256 <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	7f9b      	ldrb	r3, [r3, #30]
 800b24c:	f043 0301 	orr.w	r3, r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b25e:	2107      	movs	r1, #7
 800b260:	4618      	mov	r0, r3
 800b262:	f004 fb45 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800b266:	4603      	mov	r3, r0
 800b268:	81bb      	strh	r3, [r7, #12]
 800b26a:	89bb      	ldrh	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 800b270:	89bb      	ldrh	r3, [r7, #12]
 800b272:	e014      	b.n	800b29e <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b278:	4618      	mov	r0, r3
 800b27a:	f00a f977 	bl	801556c <phpalI14443p3a_Sw_HaltA>
 800b27e:	4603      	mov	r3, r0
 800b280:	81bb      	strh	r3, [r7, #12]
 800b282:	89bb      	ldrh	r3, [r7, #12]
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b12      	cmp	r3, #18
 800b288:	d101      	bne.n	800b28e <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 800b28a:	89bb      	ldrh	r3, [r7, #12]
 800b28c:	e007      	b.n	800b29e <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b296:	f244 0387 	movw	r3, #16519	@ 0x4087
 800b29a:	e000      	b.n	800b29e <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 800b29c:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b08b      	sub	sp, #44	@ 0x2c
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 800b2b4:	f107 030c 	add.w	r3, r7, #12
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	7f9b      	ldrb	r3, [r3, #30]
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7a9b      	ldrb	r3, [r3, #10]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b2ec:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b2f0:	e2d9      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	8a1b      	ldrh	r3, [r3, #16]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	2135      	movs	r1, #53	@ 0x35
 800b2fe:	f004 faf7 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800b302:	4603      	mov	r3, r0
 800b304:	83fb      	strh	r3, [r7, #30]
 800b306:	8bfb      	ldrh	r3, [r7, #30]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 800b30c:	8bfb      	ldrh	r3, [r7, #30]
 800b30e:	e2ca      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b314:	2101      	movs	r1, #1
 800b316:	4618      	mov	r0, r3
 800b318:	f003 fd6e 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b31c:	4603      	mov	r3, r0
 800b31e:	83fb      	strh	r3, [r7, #30]
 800b320:	8bfb      	ldrh	r3, [r7, #30]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 800b326:	8bfb      	ldrh	r3, [r7, #30]
 800b328:	e2bd      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	335e      	adds	r3, #94	@ 0x5e
 800b332:	4619      	mov	r1, r3
 800b334:	4610      	mov	r0, r2
 800b336:	f00a f90a 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 800b33a:	4603      	mov	r3, r0
 800b33c:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b33e:	8bfb      	ldrh	r3, [r7, #30]
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b03      	cmp	r3, #3
 800b344:	d109      	bne.n	800b35a <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d102      	bne.n	800b356 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800b350:	f244 0381 	movw	r3, #16513	@ 0x4081
 800b354:	e2a7      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 800b356:	2301      	movs	r3, #1
 800b358:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b36a:	8bfb      	ldrh	r3, [r7, #30]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d14a      	bne.n	800b408 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f040 809e 	bne.w	800b4ba <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b382:	2201      	movs	r2, #1
 800b384:	2120      	movs	r1, #32
 800b386:	4618      	mov	r0, r3
 800b388:	f004 fab2 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800b38c:	4603      	mov	r3, r0
 800b38e:	83fb      	strh	r3, [r7, #30]
 800b390:	8bfb      	ldrh	r3, [r7, #30]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 800b396:	8bfb      	ldrh	r3, [r7, #30]
 800b398:	e285      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	336a      	adds	r3, #106	@ 0x6a
 800b39e:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3360      	adds	r3, #96	@ 0x60
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	f003 f896 	bl	800e4dc <phalT1T_Sw_ReadUID>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b3b4:	8bfb      	ldrh	r3, [r7, #30]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d115      	bne.n	800b3e8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7f9b      	ldrb	r3, [r3, #30]
 800b3d8:	f023 0301 	bic.w	r3, r3, #1
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 800b3e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b3e6:	e25e      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b3e8:	8bfb      	ldrh	r3, [r7, #30]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d109      	bne.n	800b404 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7f9b      	ldrb	r3, [r3, #30]
 800b3f4:	f043 0301 	orr.w	r3, r3, #1
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800b3fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 800b402:	e250      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 800b404:	8bfb      	ldrh	r3, [r7, #30]
 800b406:	e24e      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800b408:	8bfb      	ldrh	r3, [r7, #30]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d010      	beq.n	800b432 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7a9b      	ldrb	r3, [r3, #10]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10c      	bne.n	800b432 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	7f9b      	ldrb	r3, [r3, #30]
 800b424:	f043 0301 	orr.w	r3, r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	779a      	strb	r2, [r3, #30]
            return status;
 800b42e:	8bfb      	ldrh	r3, [r7, #30]
 800b430:	e239      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d131      	bne.n	800b4a0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800b440:	e01b      	b.n	800b47a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 800b442:	7ebb      	ldrb	r3, [r7, #26]
 800b444:	3301      	adds	r3, #1
 800b446:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b450:	2100      	movs	r1, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f004 f992 	bl	800f77c <phhalHw_Pn5180_Wait>
 800b458:	4603      	mov	r3, r0
 800b45a:	83fb      	strh	r3, [r7, #30]
 800b45c:	8bfb      	ldrh	r3, [r7, #30]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 800b462:	8bfb      	ldrh	r3, [r7, #30]
 800b464:	e21f      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	335e      	adds	r3, #94	@ 0x5e
 800b46e:	4619      	mov	r1, r3
 800b470:	4610      	mov	r0, r2
 800b472:	f00a f86c 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 800b476:	4603      	mov	r3, r0
 800b478:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800b47a:	8bfb      	ldrh	r3, [r7, #30]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d102      	bne.n	800b488 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 800b482:	7ebb      	ldrb	r3, [r7, #26]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d9dc      	bls.n	800b442 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7f9b      	ldrb	r3, [r3, #30]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800b496:	8bfb      	ldrh	r3, [r7, #30]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00e      	beq.n	800b4ba <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 800b49c:	8bfb      	ldrh	r3, [r7, #30]
 800b49e:	e202      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 800b4a0:	8bfb      	ldrh	r3, [r7, #30]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d008      	beq.n	800b4ba <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7f9b      	ldrb	r3, [r3, #30]
 800b4ac:	f023 0301 	bic.w	r3, r3, #1
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	779a      	strb	r2, [r3, #30]
                return status;
 800b4b6:	8bfb      	ldrh	r3, [r7, #30]
 800b4b8:	e1f5      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f040 81d9 	bne.w	800b878 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7f9b      	ldrb	r3, [r3, #30]
 800b4ca:	f043 0301 	orr.w	r3, r3, #1
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800b4d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 800b4d8:	e1e5      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7a9b      	ldrb	r3, [r3, #10]
 800b4de:	7f3a      	ldrb	r2, [r7, #28]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	f200 81c6 	bhi.w	800b872 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	7f9b      	ldrb	r3, [r3, #30]
 800b4ea:	f023 0301 	bic.w	r3, r3, #1
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	76fb      	strb	r3, [r7, #27]
 800b4f8:	e13f      	b.n	800b77a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 800b4fe:	e0a8      	b.n	800b652 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b504:	7efb      	ldrb	r3, [r7, #27]
 800b506:	4a9a      	ldr	r2, [pc, #616]	@ (800b770 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800b508:	5cd1      	ldrb	r1, [r2, r3]
 800b50a:	7cfc      	ldrb	r4, [r7, #19]
 800b50c:	f107 020c 	add.w	r2, r7, #12
 800b510:	f107 0313 	add.w	r3, r7, #19
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	f107 030c 	add.w	r3, r7, #12
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	4623      	mov	r3, r4
 800b51e:	f00a f87c 	bl	801561a <phpalI14443p3a_Sw_Anticollision>
 800b522:	4603      	mov	r3, r0
 800b524:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d12e      	bne.n	800b58e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800b534:	e024      	b.n	800b580 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 800b536:	7ebb      	ldrb	r3, [r7, #26]
 800b538:	3301      	adds	r3, #1
 800b53a:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b540:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
 800b548:	f004 f918 	bl	800f77c <phhalHw_Pn5180_Wait>
 800b54c:	4603      	mov	r3, r0
 800b54e:	83fb      	strh	r3, [r7, #30]
 800b550:	8bfb      	ldrh	r3, [r7, #30]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 800b556:	8bfb      	ldrh	r3, [r7, #30]
 800b558:	e1a5      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b55e:	7efb      	ldrb	r3, [r7, #27]
 800b560:	4a83      	ldr	r2, [pc, #524]	@ (800b770 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800b562:	5cd1      	ldrb	r1, [r2, r3]
 800b564:	7cfc      	ldrb	r4, [r7, #19]
 800b566:	f107 020c 	add.w	r2, r7, #12
 800b56a:	f107 0313 	add.w	r3, r7, #19
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	4623      	mov	r3, r4
 800b578:	f00a f84f 	bl	801561a <phpalI14443p3a_Sw_Anticollision>
 800b57c:	4603      	mov	r3, r0
 800b57e:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800b580:	8bfb      	ldrh	r3, [r7, #30]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b01      	cmp	r3, #1
 800b586:	d102      	bne.n	800b58e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 800b588:	7ebb      	ldrb	r3, [r7, #26]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d9d3      	bls.n	800b536 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b58e:	8bfb      	ldrh	r3, [r7, #30]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b03      	cmp	r3, #3
 800b594:	d158      	bne.n	800b648 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d102      	bne.n	800b5a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800b5a0:	f244 0381 	movw	r3, #16513	@ 0x4081
 800b5a4:	e17f      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7f9b      	ldrb	r3, [r3, #30]
 800b5aa:	f043 0301 	orr.w	r3, r3, #1
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	7a9b      	ldrb	r3, [r3, #10]
 800b5b8:	7f3a      	ldrb	r2, [r7, #28]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d301      	bcc.n	800b5c2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e171      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 800b5c2:	7cfb      	ldrb	r3, [r7, #19]
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	2b06      	cmp	r3, #6
 800b5ca:	dc1d      	bgt.n	800b608 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 800b5cc:	7cfb      	ldrb	r3, [r7, #19]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 800b5d4:	7cfb      	ldrb	r3, [r7, #19]
 800b5d6:	091b      	lsrs	r3, r3, #4
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	3320      	adds	r3, #32
 800b5dc:	443b      	add	r3, r7
 800b5de:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800b5e2:	7cfb      	ldrb	r3, [r7, #19]
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	7cf9      	ldrb	r1, [r7, #19]
 800b5f4:	0909      	lsrs	r1, r1, #4
 800b5f6:	b2c9      	uxtb	r1, r1
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	f101 0320 	add.w	r3, r1, #32
 800b600:	443b      	add	r3, r7
 800b602:	f803 2c14 	strb.w	r2, [r3, #-20]
 800b606:	e024      	b.n	800b652 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 800b608:	7cfb      	ldrb	r3, [r7, #19]
 800b60a:	091b      	lsrs	r3, r3, #4
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	3301      	adds	r3, #1
 800b610:	b2db      	uxtb	r3, r3
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	b2db      	uxtb	r3, r3
 800b616:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 800b618:	7cfb      	ldrb	r3, [r7, #19]
 800b61a:	091b      	lsrs	r3, r3, #4
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	3b01      	subs	r3, #1
 800b620:	b2db      	uxtb	r3, r3
 800b622:	3320      	adds	r3, #32
 800b624:	443b      	add	r3, r7
 800b626:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800b62a:	7cfa      	ldrb	r2, [r7, #19]
 800b62c:	0912      	lsrs	r2, r2, #4
 800b62e:	b2d2      	uxtb	r2, r2
 800b630:	3a01      	subs	r2, #1
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	4611      	mov	r1, r2
 800b636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	f101 0320 	add.w	r3, r1, #32
 800b640:	443b      	add	r3, r7
 800b642:	f803 2c14 	strb.w	r2, [r3, #-20]
 800b646:	e004      	b.n	800b652 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 800b648:	8bfb      	ldrh	r3, [r7, #30]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 800b64e:	8bfb      	ldrh	r3, [r7, #30]
 800b650:	e129      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 800b652:	7cfb      	ldrb	r3, [r7, #19]
 800b654:	2b40      	cmp	r3, #64	@ 0x40
 800b656:	f47f af53 	bne.w	800b500 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 800b65a:	7e7b      	ldrb	r3, [r7, #25]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d12d      	bne.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7f9b      	ldrb	r3, [r3, #30]
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d127      	bne.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 800b66c:	7f3a      	ldrb	r2, [r7, #28]
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	4613      	mov	r3, r2
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	440b      	add	r3, r1
 800b678:	335e      	adds	r3, #94	@ 0x5e
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d104      	bne.n	800b68e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 800b684:	7efb      	ldrb	r3, [r7, #27]
 800b686:	4a3a      	ldr	r2, [pc, #232]	@ (800b770 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800b688:	5cd3      	ldrb	r3, [r2, r3]
 800b68a:	2b93      	cmp	r3, #147	@ 0x93
 800b68c:	d010      	beq.n	800b6b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 800b68e:	7f3a      	ldrb	r2, [r7, #28]
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	4613      	mov	r3, r2
 800b694:	011b      	lsls	r3, r3, #4
 800b696:	1a9b      	subs	r3, r3, r2
 800b698:	440b      	add	r3, r1
 800b69a:	335e      	adds	r3, #94	@ 0x5e
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b6a2:	2b40      	cmp	r3, #64	@ 0x40
 800b6a4:	d10a      	bne.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 800b6a6:	7efb      	ldrb	r3, [r7, #27]
 800b6a8:	4a31      	ldr	r2, [pc, #196]	@ (800b770 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800b6aa:	5cd3      	ldrb	r3, [r2, r3]
 800b6ac:	2b95      	cmp	r3, #149	@ 0x95
 800b6ae:	d105      	bne.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 800b6b0:	7b3b      	ldrb	r3, [r7, #12]
 800b6b2:	2b88      	cmp	r3, #136	@ 0x88
 800b6b4:	d102      	bne.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 800b6b6:	f244 0306 	movw	r3, #16390	@ 0x4006
 800b6ba:	e0f4      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b6c0:	7efb      	ldrb	r3, [r7, #27]
 800b6c2:	4a2b      	ldr	r2, [pc, #172]	@ (800b770 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800b6c4:	5cd1      	ldrb	r1, [r2, r3]
 800b6c6:	7f3a      	ldrb	r2, [r7, #28]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	1a9b      	subs	r3, r3, r2
 800b6ce:	3360      	adds	r3, #96	@ 0x60
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	330b      	adds	r3, #11
 800b6d6:	f107 020c 	add.w	r2, r7, #12
 800b6da:	f00a f9d5 	bl	8015a88 <phpalI14443p3a_Sw_Select>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d12e      	bne.n	800b74a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800b6f0:	e024      	b.n	800b73c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 800b6f2:	7ebb      	ldrb	r3, [r7, #26]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b700:	2100      	movs	r1, #0
 800b702:	4618      	mov	r0, r3
 800b704:	f004 f83a 	bl	800f77c <phhalHw_Pn5180_Wait>
 800b708:	4603      	mov	r3, r0
 800b70a:	83fb      	strh	r3, [r7, #30]
 800b70c:	8bfb      	ldrh	r3, [r7, #30]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 800b712:	8bfb      	ldrh	r3, [r7, #30]
 800b714:	e0c7      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b71a:	7efb      	ldrb	r3, [r7, #27]
 800b71c:	4a14      	ldr	r2, [pc, #80]	@ (800b770 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800b71e:	5cd1      	ldrb	r1, [r2, r3]
 800b720:	7f3a      	ldrb	r2, [r7, #28]
 800b722:	4613      	mov	r3, r2
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	3360      	adds	r3, #96	@ 0x60
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	330b      	adds	r3, #11
 800b730:	f107 020c 	add.w	r2, r7, #12
 800b734:	f00a f9a8 	bl	8015a88 <phpalI14443p3a_Sw_Select>
 800b738:	4603      	mov	r3, r0
 800b73a:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800b73c:	8bfb      	ldrh	r3, [r7, #30]
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b01      	cmp	r3, #1
 800b742:	d102      	bne.n	800b74a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 800b744:	7ebb      	ldrb	r3, [r7, #26]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d9d3      	bls.n	800b6f2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b74a:	8bfb      	ldrh	r3, [r7, #30]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10c      	bne.n	800b76c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 800b752:	7f3a      	ldrb	r2, [r7, #28]
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	4613      	mov	r3, r2
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	440b      	add	r3, r1
 800b75e:	336b      	adds	r3, #107	@ 0x6b
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	f003 0304 	and.w	r3, r3, #4
 800b766:	2b00      	cmp	r3, #0
 800b768:	d104      	bne.n	800b774 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 800b76a:	e00a      	b.n	800b782 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 800b76c:	8bfb      	ldrh	r3, [r7, #30]
 800b76e:	e09a      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 800b770:	08025914 	.word	0x08025914
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800b774:	7efb      	ldrb	r3, [r7, #27]
 800b776:	3301      	adds	r3, #1
 800b778:	76fb      	strb	r3, [r7, #27]
 800b77a:	7efb      	ldrb	r3, [r7, #27]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	f67f aebc 	bls.w	800b4fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 800b782:	8bfb      	ldrh	r3, [r7, #30]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d174      	bne.n	800b872 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b78c:	7f3a      	ldrb	r2, [r7, #28]
 800b78e:	4613      	mov	r3, r2
 800b790:	011b      	lsls	r3, r3, #4
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	3358      	adds	r3, #88	@ 0x58
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	4413      	add	r3, r2
 800b79a:	f103 0108 	add.w	r1, r3, #8
 800b79e:	7f3a      	ldrb	r2, [r7, #28]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	3360      	adds	r3, #96	@ 0x60
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	330a      	adds	r3, #10
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f00a fc3b 	bl	801602a <phpalI14443p3a_Sw_GetSerialNo>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 800b7b8:	8bfb      	ldrh	r3, [r7, #30]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 800b7be:	8bfb      	ldrh	r3, [r7, #30]
 800b7c0:	e071      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 800b7c2:	7f3b      	ldrb	r3, [r7, #28]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7f9b      	ldrb	r3, [r3, #30]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d057      	beq.n	800b884 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7a9b      	ldrb	r3, [r3, #10]
 800b7d8:	7f3a      	ldrb	r2, [r7, #28]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d252      	bcs.n	800b884 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f009 fec2 	bl	801556c <phpalI14443p3a_Sw_HaltA>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 800b7ec:	8bfb      	ldrh	r3, [r7, #30]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 800b7f2:	8bfb      	ldrh	r3, [r7, #30]
 800b7f4:	e057      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 800b7f6:	7f3b      	ldrb	r3, [r7, #28]
 800b7f8:	1e5a      	subs	r2, r3, #1
 800b7fa:	6879      	ldr	r1, [r7, #4]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	1a9b      	subs	r3, r3, r2
 800b802:	440b      	add	r3, r1
 800b804:	336c      	adds	r3, #108	@ 0x6c
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b80e:	7f3a      	ldrb	r2, [r7, #28]
 800b810:	4613      	mov	r3, r2
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	3358      	adds	r3, #88	@ 0x58
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	4413      	add	r3, r2
 800b81c:	3306      	adds	r3, #6
 800b81e:	4619      	mov	r1, r3
 800b820:	f009 fe86 	bl	8015530 <phpalI14443p3a_Sw_RequestA>
 800b824:	4603      	mov	r3, r0
 800b826:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b828:	8bfb      	ldrh	r3, [r7, #30]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d112      	bne.n	800b856 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 800b830:	7f3a      	ldrb	r2, [r7, #28]
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	4613      	mov	r3, r2
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	1a9b      	subs	r3, r3, r2
 800b83a:	440b      	add	r3, r1
 800b83c:	335e      	adds	r3, #94	@ 0x5e
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d116      	bne.n	800b872 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	7f9b      	ldrb	r3, [r3, #30]
 800b848:	f043 0301 	orr.w	r3, r3, #1
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 800b852:	2300      	movs	r3, #0
 800b854:	e027      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b856:	8bfb      	ldrh	r3, [r7, #30]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d107      	bne.n	800b86e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	7f9b      	ldrb	r3, [r3, #30]
 800b862:	f043 0301 	orr.w	r3, r3, #1
 800b866:	b2da      	uxtb	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	779a      	strb	r2, [r3, #30]
 800b86c:	e001      	b.n	800b872 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 800b86e:	8bfb      	ldrh	r3, [r7, #30]
 800b870:	e019      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 800b872:	7f7b      	ldrb	r3, [r7, #29]
 800b874:	3301      	adds	r3, #1
 800b876:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	7a9b      	ldrb	r3, [r3, #10]
 800b87c:	7f7a      	ldrb	r2, [r7, #29]
 800b87e:	429a      	cmp	r2, r3
 800b880:	f67f ae2b 	bls.w	800b4da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7f3a      	ldrb	r2, [r7, #28]
 800b888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7f3a      	ldrb	r2, [r7, #28]
 800b890:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d102      	bne.n	800b8a4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b89e:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b8a2:	e000      	b.n	800b8a6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 800b8a4:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3724      	adds	r7, #36	@ 0x24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd90      	pop	{r4, r7, pc}
 800b8ae:	bf00      	nop

0800b8b0 <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 800b8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	b090      	sub	sp, #64	@ 0x40
 800b8b6:	af06      	add	r7, sp, #24
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b8ce:	78fa      	ldrb	r2, [r7, #3]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d202      	bcs.n	800b8da <phacDiscLoop_Sw_Int_ActivateA+0x2a>
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <phacDiscLoop_Sw_Int_ActivateA+0x30>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800b8da:	f244 0321 	movw	r3, #16417	@ 0x4021
 800b8de:	e206      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d902      	bls.n	800b8f0 <phacDiscLoop_Sw_Int_ActivateA+0x40>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800b8ea:	f244 037f 	movw	r3, #16511	@ 0x407f
 800b8ee:	e1fe      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 800b8f0:	78fa      	ldrb	r2, [r7, #3]
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	011b      	lsls	r3, r3, #4
 800b8f8:	1a9b      	subs	r3, r3, r2
 800b8fa:	440b      	add	r3, r1
 800b8fc:	336c      	adds	r3, #108	@ 0x6c
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d175      	bne.n	800b9f0 <phacDiscLoop_Sw_Int_ActivateA+0x140>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800b904:	2300      	movs	r3, #0
 800b906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b90a:	e021      	b.n	800b950 <phacDiscLoop_Sw_Int_ActivateA+0xa0>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 800b90c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	011b      	lsls	r3, r3, #4
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	440b      	add	r3, r1
 800b91a:	336c      	adds	r3, #108	@ 0x6c
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d111      	bne.n	800b946 <phacDiscLoop_Sw_Int_ActivateA+0x96>
 800b922:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d00c      	beq.n	800b946 <phacDiscLoop_Sw_Int_ActivateA+0x96>
            {
                bActiveDevice = 1;
 800b92c:	2301      	movs	r3, #1
 800b92e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 800b932:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	4613      	mov	r3, r2
 800b93a:	011b      	lsls	r3, r3, #4
 800b93c:	1a9b      	subs	r3, r3, r2
 800b93e:	440b      	add	r3, r1
 800b940:	336c      	adds	r3, #108	@ 0x6c
 800b942:	2201      	movs	r2, #1
 800b944:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800b946:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b94a:	3301      	adds	r3, #1
 800b94c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b956:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d3d6      	bcc.n	800b90c <phacDiscLoop_Sw_Int_ActivateA+0x5c>
            }
        }
        if (bActiveDevice != 0U)
 800b95e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00b      	beq.n	800b97e <phacDiscLoop_Sw_Int_ActivateA+0xce>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96a:	4618      	mov	r0, r3
 800b96c:	f009 fdfe 	bl	801556c <phpalI14443p3a_Sw_HaltA>
 800b970:	4603      	mov	r3, r0
 800b972:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 800b974:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <phacDiscLoop_Sw_Int_ActivateA+0xce>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 800b97a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b97c:	e1b7      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b982:	78fa      	ldrb	r2, [r7, #3]
 800b984:	4613      	mov	r3, r2
 800b986:	011b      	lsls	r3, r3, #4
 800b988:	1a9b      	subs	r3, r3, r2
 800b98a:	3358      	adds	r3, #88	@ 0x58
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	4413      	add	r3, r2
 800b990:	f103 0408 	add.w	r4, r3, #8
 800b994:	78fa      	ldrb	r2, [r7, #3]
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	4613      	mov	r3, r2
 800b99a:	011b      	lsls	r3, r3, #4
 800b99c:	1a9b      	subs	r3, r3, r2
 800b99e:	440b      	add	r3, r1
 800b9a0:	336a      	adds	r3, #106	@ 0x6a
 800b9a2:	7819      	ldrb	r1, [r3, #0]
 800b9a4:	78fa      	ldrb	r2, [r7, #3]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	011b      	lsls	r3, r3, #4
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	3360      	adds	r3, #96	@ 0x60
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	330b      	adds	r3, #11
 800b9b4:	f107 0518 	add.w	r5, r7, #24
 800b9b8:	f107 0216 	add.w	r2, r7, #22
 800b9bc:	9202      	str	r2, [sp, #8]
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	f107 0317 	add.w	r3, r7, #23
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	460a      	mov	r2, r1
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	f00a f874 	bl	8015ab8 <phpalI14443p3a_Sw_ActivateCard>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b9d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <phacDiscLoop_Sw_Int_ActivateA+0x12e>
 800b9da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9dc:	e187      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 800b9de:	78fa      	ldrb	r2, [r7, #3]
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	1a9b      	subs	r3, r3, r2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	336c      	adds	r3, #108	@ 0x6c
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	6879      	ldr	r1, [r7, #4]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	011b      	lsls	r3, r3, #4
 800b9f8:	1a9b      	subs	r3, r3, r2
 800b9fa:	440b      	add	r3, r1
 800b9fc:	336b      	adds	r3, #107	@ 0x6b
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 800ba08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba0c:	095b      	lsrs	r3, r3, #5
 800ba0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 800ba12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	f040 80a0 	bne.w	800bb5c <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba20:	2201      	movs	r2, #1
 800ba22:	215e      	movs	r1, #94	@ 0x5e
 800ba24:	4618      	mov	r0, r3
 800ba26:	f003 ff63 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ba2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <phacDiscLoop_Sw_Int_ActivateA+0x188>
 800ba34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba36:	e15a      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800ba5a:	9201      	str	r2, [sp, #4]
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	462b      	mov	r3, r5
 800ba60:	4622      	mov	r2, r4
 800ba62:	f00d f875 	bl	8018b50 <phpalI14443p4a_Sw_ActivateCard>
 800ba66:	4603      	mov	r3, r0
 800ba68:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ba6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <phacDiscLoop_Sw_Int_ActivateA+0x1c4>
 800ba70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba72:	e13c      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d027      	beq.n	800bace <phacDiscLoop_Sw_Int_ActivateA+0x21e>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba82:	f107 020e 	add.w	r2, r7, #14
 800ba86:	2103      	movs	r1, #3
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f00c fc81 	bl	8018390 <phpalI14443p4a_Sw_GetConfig>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ba92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <phacDiscLoop_Sw_Int_ActivateA+0x1ec>
 800ba98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba9a:	e128      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 800ba9c:	89fb      	ldrh	r3, [r7, #14]
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baaa:	f107 020e 	add.w	r2, r7, #14
 800baae:	2104      	movs	r1, #4
 800bab0:	4618      	mov	r0, r3
 800bab2:	f00c fc6d 	bl	8018390 <phpalI14443p4a_Sw_GetConfig>
 800bab6:	4603      	mov	r3, r0
 800bab8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800baba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <phacDiscLoop_Sw_Int_ActivateA+0x214>
 800bac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bac2:	e114      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 800bac4:	89fb      	ldrh	r3, [r7, #14]
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bad2:	f107 0413 	add.w	r4, r7, #19
 800bad6:	f107 0214 	add.w	r2, r7, #20
 800bada:	f107 0115 	add.w	r1, r7, #21
 800bade:	f107 0310 	add.w	r3, r7, #16
 800bae2:	9302      	str	r3, [sp, #8]
 800bae4:	f107 0311 	add.w	r3, r7, #17
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	f107 0312 	add.w	r3, r7, #18
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	4623      	mov	r3, r4
 800baf2:	f00d f8e5 	bl	8018cc0 <phpalI14443p4a_Sw_GetProtocolParams>
 800baf6:	4603      	mov	r3, r0
 800baf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bafa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <phacDiscLoop_Sw_Int_ActivateA+0x254>
 800bb00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb02:	e0f4      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d109      	bne.n	800bb22 <phacDiscLoop_Sw_Int_ActivateA+0x272>
        {
            if (bFsci > pDataParams->bFsciMax)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800bb14:	7c3b      	ldrb	r3, [r7, #16]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d203      	bcs.n	800bb22 <phacDiscLoop_Sw_Int_ActivateA+0x272>
            {
                bFsci = pDataParams->bFsciMax;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bb20:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800bb26:	7d7d      	ldrb	r5, [r7, #21]
 800bb28:	7d3e      	ldrb	r6, [r7, #20]
 800bb2a:	f897 c013 	ldrb.w	ip, [r7, #19]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800bb34:	7cba      	ldrb	r2, [r7, #18]
 800bb36:	7c79      	ldrb	r1, [r7, #17]
 800bb38:	7c38      	ldrb	r0, [r7, #16]
 800bb3a:	9003      	str	r0, [sp, #12]
 800bb3c:	9102      	str	r1, [sp, #8]
 800bb3e:	9201      	str	r2, [sp, #4]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	4663      	mov	r3, ip
 800bb44:	4632      	mov	r2, r6
 800bb46:	4629      	mov	r1, r5
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f00b f92a 	bl	8016da2 <phpalI14443p4_Sw_SetProtocol>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bb52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
 800bb58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb5a:	e0c8      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 800bb5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d13d      	bne.n	800bbe0 <phacDiscLoop_Sw_Int_ActivateA+0x330>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d102      	bne.n	800bb74 <phacDiscLoop_Sw_Int_ActivateA+0x2c4>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800bb6e:	f244 0385 	movw	r3, #16517	@ 0x4085
 800bb72:	e0bc      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS
        /* Send ATR_REQ and PSL_REQ */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	011b      	lsls	r3, r3, #4
 800bb7e:	1a9b      	subs	r3, r3, r2
 800bb80:	3358      	adds	r3, #88	@ 0x58
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	4413      	add	r3, r2
 800bb86:	f103 0c08 	add.w	ip, r3, #8
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800bba2:	6879      	ldr	r1, [r7, #4]
 800bba4:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 800bbac:	687c      	ldr	r4, [r7, #4]
 800bbae:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800bbb0:	687d      	ldr	r5, [r7, #4]
 800bbb2:	3580      	adds	r5, #128	@ 0x80
 800bbb4:	9505      	str	r5, [sp, #20]
 800bbb6:	9404      	str	r4, [sp, #16]
 800bbb8:	9003      	str	r0, [sp, #12]
 800bbba:	9102      	str	r1, [sp, #8]
 800bbbc:	9201      	str	r2, [sp, #4]
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	4643      	mov	r3, r8
 800bbc2:	4672      	mov	r2, lr
 800bbc4:	4661      	mov	r1, ip
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f00d fb96 	bl	80192f8 <phpalI18092mPI_Sw_Atr>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bbd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <phacDiscLoop_Sw_Int_ActivateA+0x32a>
 800bbd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbd8:	e089      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pGi,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800bbda:	f244 038d 	movw	r3, #16525	@ 0x408d
 800bbde:	e086      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 800bbe0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d175      	bne.n	800bcd4 <phacDiscLoop_Sw_Int_ActivateA+0x424>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d16d      	bne.n	800bcce <phacDiscLoop_Sw_Int_ActivateA+0x41e>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	215e      	movs	r1, #94	@ 0x5e
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f003 fe78 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800bc00:	4603      	mov	r3, r0
 800bc02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bc04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <phacDiscLoop_Sw_Int_ActivateA+0x35e>
 800bc0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc0c:	e06f      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	462b      	mov	r3, r5
 800bc36:	4622      	mov	r2, r4
 800bc38:	f00c ff8a 	bl	8018b50 <phpalI14443p4a_Sw_ActivateCard>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bc40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <phacDiscLoop_Sw_Int_ActivateA+0x39a>
 800bc46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc48:	e051      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bc4e:	f107 0413 	add.w	r4, r7, #19
 800bc52:	f107 0214 	add.w	r2, r7, #20
 800bc56:	f107 0115 	add.w	r1, r7, #21
 800bc5a:	f107 0310 	add.w	r3, r7, #16
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	f107 0311 	add.w	r3, r7, #17
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	f107 0312 	add.w	r3, r7, #18
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	4623      	mov	r3, r4
 800bc6e:	f00d f827 	bl	8018cc0 <phpalI14443p4a_Sw_GetProtocolParams>
 800bc72:	4603      	mov	r3, r0
 800bc74:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bc76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 800bc7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc7e:	e036      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800bc86:	7c3b      	ldrb	r3, [r7, #16]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d203      	bcs.n	800bc94 <phacDiscLoop_Sw_Int_ActivateA+0x3e4>
            {
                bFsci = pDataParams->bFsciMax;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bc92:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800bc98:	7d7d      	ldrb	r5, [r7, #21]
 800bc9a:	7d3e      	ldrb	r6, [r7, #20]
 800bc9c:	f897 c013 	ldrb.w	ip, [r7, #19]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800bca6:	7cba      	ldrb	r2, [r7, #18]
 800bca8:	7c79      	ldrb	r1, [r7, #17]
 800bcaa:	7c38      	ldrb	r0, [r7, #16]
 800bcac:	9003      	str	r0, [sp, #12]
 800bcae:	9102      	str	r1, [sp, #8]
 800bcb0:	9201      	str	r2, [sp, #4]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	4663      	mov	r3, ip
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f00b f871 	bl	8016da2 <phpalI14443p4_Sw_SetProtocol>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bcc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d004      	beq.n	800bcd4 <phacDiscLoop_Sw_Int_ActivateA+0x424>
 800bcca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bccc:	e00f      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 800bcce:	f244 038e 	movw	r3, #16526	@ 0x408e
 800bcd2:	e00c      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 800bcd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d107      	bne.n	800bcec <phacDiscLoop_Sw_Int_ActivateA+0x43c>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d102      	bne.n	800bcec <phacDiscLoop_Sw_Int_ActivateA+0x43c>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800bce6:	f244 0385 	movw	r3, #16517	@ 0x4085
 800bcea:	e000      	b.n	800bcee <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    return PH_ERR_SUCCESS;
 800bcec:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3728      	adds	r7, #40	@ 0x28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bcf8 <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800bcf8:	b590      	push	{r4, r7, lr}
 800bcfa:	b087      	sub	sp, #28
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7f9b      	ldrb	r3, [r3, #30]
 800bd14:	f023 0302 	bic.w	r3, r3, #2
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
 800bd22:	e00c      	b.n	800bd3e <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 800bd24:	7bfa      	ldrb	r2, [r7, #15]
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	440b      	add	r3, r1
 800bd32:	33dc      	adds	r3, #220	@ 0xdc
 800bd34:	2200      	movs	r2, #0
 800bd36:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	73fb      	strb	r3, [r7, #15]
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d0ef      	beq.n	800bd24 <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 10c1 	ldrb.w	r1, [r3, #193]	@ 0xc1
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 40c2 	ldrb.w	r4, [r3, #194]	@ 0xc2
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	33cd      	adds	r3, #205	@ 0xcd
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	32da      	adds	r2, #218	@ 0xda
 800bd5c:	9201      	str	r2, [sp, #4]
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	4623      	mov	r3, r4
 800bd62:	460a      	mov	r2, r1
 800bd64:	2100      	movs	r1, #0
 800bd66:	f00a fa84 	bl	8016272 <phpalI14443p3b_Sw_WakeUpB>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800bd6e:	89bb      	ldrh	r3, [r7, #12]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fa08 	bl	800b186 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d015      	beq.n	800bda8 <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800bd7c:	89bb      	ldrh	r3, [r7, #12]
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d006      	beq.n	800bd92 <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	7f9b      	ldrb	r3, [r3, #30]
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800bd98:	3301      	adds	r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800bda2:	f244 0387 	movw	r3, #16519	@ 0x4087
 800bda6:	e000      	b.n	800bdaa <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 800bda8:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd90      	pop	{r4, r7, pc}

0800bdb2 <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800bdb2:	b5b0      	push	{r4, r5, r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af02      	add	r7, sp, #8
 800bdb8:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	7f9b      	ldrb	r3, [r3, #30]
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	7adb      	ldrb	r3, [r3, #11]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800bdda:	f244 0385 	movw	r3, #16517	@ 0x4085
 800bdde:	e1e1      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    bRetryCount = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	8a5b      	ldrh	r3, [r3, #18]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	2135      	movs	r1, #53	@ 0x35
 800bdf4:	f003 fd7c 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	81fb      	strh	r3, [r7, #14]
 800bdfc:	89fb      	ldrh	r3, [r7, #14]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 800be02:	89fb      	ldrh	r3, [r7, #14]
 800be04:	e1ce      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0a:	2102      	movs	r1, #2
 800be0c:	4618      	mov	r0, r3
 800be0e:	f002 fff3 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800be12:	4603      	mov	r3, r0
 800be14:	81fb      	strh	r3, [r7, #14]
 800be16:	89fb      	ldrh	r3, [r7, #14]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 800be1c:	89fb      	ldrh	r3, [r7, #14]
 800be1e:	e1c1      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	33cd      	adds	r3, #205	@ 0xcd
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	32da      	adds	r2, #218	@ 0xda
 800be38:	7ab9      	ldrb	r1, [r7, #10]
 800be3a:	9201      	str	r2, [sp, #4]
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	462b      	mov	r3, r5
 800be40:	4622      	mov	r2, r4
 800be42:	f00a fa16 	bl	8016272 <phpalI14443p3b_Sw_WakeUpB>
 800be46:	4603      	mov	r3, r0
 800be48:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 800be4a:	89fb      	ldrh	r3, [r7, #14]
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 8195 	beq.w	800c17e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d148      	bne.n	800bef0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800be5e:	89fb      	ldrh	r3, [r7, #14]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b03      	cmp	r3, #3
 800be64:	d130      	bne.n	800bec8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	7f9b      	ldrb	r3, [r3, #30]
 800be6a:	f023 0302 	bic.w	r3, r3, #2
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800be74:	f244 0381 	movw	r3, #16513	@ 0x4081
 800be78:	e194      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 800be7a:	7a7b      	ldrb	r3, [r7, #9]
 800be7c:	3301      	adds	r3, #1
 800be7e:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be84:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800be88:	2100      	movs	r1, #0
 800be8a:	4618      	mov	r0, r3
 800be8c:	f003 fc76 	bl	800f77c <phhalHw_Pn5180_Wait>
 800be90:	4603      	mov	r3, r0
 800be92:	81fb      	strh	r3, [r7, #14]
 800be94:	89fb      	ldrh	r3, [r7, #14]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	e182      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	33cd      	adds	r3, #205	@ 0xcd
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	32da      	adds	r2, #218	@ 0xda
 800beb6:	7ab9      	ldrb	r1, [r7, #10]
 800beb8:	9201      	str	r2, [sp, #4]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	462b      	mov	r3, r5
 800bebe:	4622      	mov	r2, r4
 800bec0:	f00a f9d7 	bl	8016272 <phpalI14443p3b_Sw_WakeUpB>
 800bec4:	4603      	mov	r3, r0
 800bec6:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800bec8:	89fb      	ldrh	r3, [r7, #14]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b01      	cmp	r3, #1
 800bece:	d102      	bne.n	800bed6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 800bed0:	7a7b      	ldrb	r3, [r7, #9]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d9d1      	bls.n	800be7a <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7f9b      	ldrb	r3, [r3, #30]
 800beda:	f023 0302 	bic.w	r3, r3, #2
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800bee4:	89fb      	ldrh	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f000 8149 	beq.w	800c17e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
 800beec:	89fb      	ldrh	r3, [r7, #14]
 800beee:	e159      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800bef0:	89fb      	ldrh	r3, [r7, #14]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d101      	bne.n	800befc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 800bef8:	89fb      	ldrh	r3, [r7, #14]
 800befa:	e153      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7adb      	ldrb	r3, [r3, #11]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f040 813c 	bne.w	800c17e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7f9b      	ldrb	r3, [r3, #30]
 800bf12:	f043 0302 	orr.w	r3, r3, #2
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	779a      	strb	r2, [r3, #30]
                    return status;
 800bf1c:	89fb      	ldrh	r3, [r7, #14]
 800bf1e:	e141      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7f9b      	ldrb	r3, [r3, #30]
 800bf38:	f023 0302 	bic.w	r3, r3, #2
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 800bf42:	e118      	b.n	800c176 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800bf44:	89fb      	ldrh	r3, [r7, #14]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d060      	beq.n	800c00e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 800bf4c:	89fb      	ldrh	r3, [r7, #14]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d156      	bne.n	800c000 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 800bf52:	7b3b      	ldrb	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01f      	beq.n	800bf98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800bf62:	1e5a      	subs	r2, r3, #1
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	33c8      	adds	r3, #200	@ 0xc8
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	3301      	adds	r3, #1
 800bf74:	4619      	mov	r1, r3
 800bf76:	f00a fed7 	bl	8016d28 <phpalI14443p3b_Sw_SetSerialNo>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf82:	4618      	mov	r0, r3
 800bf84:	f00a f9d4 	bl	8016330 <phpalI14443p3b_Sw_HaltB>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	81fb      	strh	r3, [r7, #14]
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b12      	cmp	r3, #18
 800bf92:	d101      	bne.n	800bf98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 800bf94:	89fb      	ldrh	r3, [r7, #14]
 800bf96:	e105      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	33c8      	adds	r3, #200	@ 0xc8
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	1c5a      	adds	r2, r3, #1
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	460b      	mov	r3, r1
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	440b      	add	r3, r1
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	33c9      	adds	r3, #201	@ 0xc9
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	440b      	add	r3, r1
 800bfc6:	3305      	adds	r3, #5
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    bCurrentDeviceCount++;
 800bfdc:	7b3b      	ldrb	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	7adb      	ldrb	r3, [r3, #11]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d30e      	bcc.n	800c00e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 800bffc:	2300      	movs	r3, #0
 800bffe:	e0d1      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7f9b      	ldrb	r3, [r3, #30]
 800c004:	f043 0302 	orr.w	r3, r3, #2
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 800c00e:	7b7b      	ldrb	r3, [r7, #13]
 800c010:	3301      	adds	r3, #1
 800c012:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 800c014:	7b7a      	ldrb	r2, [r7, #13]
 800c016:	7abb      	ldrb	r3, [r7, #10]
 800c018:	2101      	movs	r1, #1
 800c01a:	fa01 f303 	lsl.w	r3, r1, r3
 800c01e:	429a      	cmp	r2, r3
 800c020:	da28      	bge.n	800c074 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c2>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c026:	7b7b      	ldrb	r3, [r7, #13]
 800c028:	3301      	adds	r3, #1
 800c02a:	b2d9      	uxtb	r1, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c032:	461a      	mov	r2, r3
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	33c8      	adds	r3, #200	@ 0xc8
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	4413      	add	r3, r2
 800c042:	1d5c      	adds	r4, r3, #5
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c04a:	461a      	mov	r2, r3
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	33d8      	adds	r3, #216	@ 0xd8
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	4413      	add	r3, r2
 800c05a:	3302      	adds	r3, #2
 800c05c:	4622      	mov	r2, r4
 800c05e:	f00a f927 	bl	80162b0 <phpalI14443p3b_Sw_SlotMarker>
 800c062:	4603      	mov	r3, r0
 800c064:	81fb      	strh	r3, [r7, #14]
 800c066:	89fb      	ldrh	r3, [r7, #14]
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b12      	cmp	r3, #18
 800c06c:	f040 8083 	bne.w	800c176 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800c070:	89fb      	ldrh	r3, [r7, #14]
 800c072:	e097      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 800c074:	2301      	movs	r3, #1
 800c076:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7f9b      	ldrb	r3, [r3, #30]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d068      	beq.n	800c156 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a4>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00e      	beq.n	800c0ac <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fa>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	7adb      	ldrb	r3, [r3, #11]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d31d      	bcc.n	800c0d8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x326>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e07b      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800c0ac:	7abb      	ldrb	r3, [r7, #10]
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d10f      	bne.n	800c0d2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x320>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31c>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c0c8:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c0cc:	e06a      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                            }

                            return PH_ERR_SUCCESS;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e068      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 800c0d2:	7abb      	ldrb	r3, [r7, #10]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 800c0d8:	7b3b      	ldrb	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00c      	beq.n	800c0f8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f00a f924 	bl	8016330 <phpalI14443p3b_Sw_HaltB>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	81fb      	strh	r3, [r7, #14]
 800c0ec:	89fb      	ldrh	r3, [r7, #14]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b12      	cmp	r3, #18
 800c0f2:	d101      	bne.n	800c0f8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
 800c0f4:	89fb      	ldrh	r3, [r7, #14]
 800c0f6:	e055      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c10e:	461a      	mov	r2, r3
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	33c8      	adds	r3, #200	@ 0xc8
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	1d5a      	adds	r2, r3, #5
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c126:	4619      	mov	r1, r3
 800c128:	460b      	mov	r3, r1
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	440b      	add	r3, r1
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	33d8      	adds	r3, #216	@ 0xd8
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	440b      	add	r3, r1
 800c136:	3302      	adds	r3, #2
 800c138:	7ab9      	ldrb	r1, [r7, #10]
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	9200      	str	r2, [sp, #0]
 800c13e:	462b      	mov	r3, r5
 800c140:	4622      	mov	r2, r4
 800c142:	f00a f877 	bl	8016234 <phpalI14443p3b_Sw_RequestB>
 800c146:	4603      	mov	r3, r0
 800c148:	81fb      	strh	r3, [r7, #14]
 800c14a:	89fb      	ldrh	r3, [r7, #14]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b12      	cmp	r3, #18
 800c150:	d111      	bne.n	800c176 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800c152:	89fb      	ldrh	r3, [r7, #14]
 800c154:	e026      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c0>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800c16c:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c170:	e018      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                    return PH_ERR_SUCCESS;
 800c172:	2300      	movs	r3, #0
 800c174:	e016      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        while(0U == bLastSlotReached)
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f43f aee3 	beq.w	800bf44 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800c17e:	7abb      	ldrb	r3, [r7, #10]
 800c180:	2b04      	cmp	r3, #4
 800c182:	f67f aecd 	bls.w	800bf20 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d102      	bne.n	800c1a2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f0>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800c19c:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c1a0:	e000      	b.n	800c1a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    return PH_ERR_SUCCESS;
 800c1a2:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bdb0      	pop	{r4, r5, r7, pc}

0800c1ac <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 800c1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ae:	b08f      	sub	sp, #60	@ 0x3c
 800c1b0:	af04      	add	r7, sp, #16
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c1c2:	78fa      	ldrb	r2, [r7, #3]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d302      	bcc.n	800c1ce <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800c1c8:	f244 0321 	movw	r3, #16417	@ 0x4021
 800c1cc:	e1ba      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	db0a      	blt.n	800c1f2 <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 800c1dc:	78fa      	ldrb	r2, [r7, #3]
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	440b      	add	r3, r1
 800c1ea:	33dc      	adds	r3, #220	@ 0xdc
 800c1ec:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d119      	bne.n	800c226 <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800c202:	f107 0320 	add.w	r3, r7, #32
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	f107 0310 	add.w	r3, r7, #16
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	460b      	mov	r3, r1
 800c210:	2100      	movs	r1, #0
 800c212:	f00a f82e 	bl	8016272 <phpalI14443p3b_Sw_WakeUpB>
 800c216:	4603      	mov	r3, r0
 800c218:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c21a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b12      	cmp	r3, #18
 800c220:	d101      	bne.n	800c226 <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 800c222:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c224:	e18e      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22a:	2201      	movs	r2, #1
 800c22c:	215e      	movs	r1, #94	@ 0x5e
 800c22e:	4618      	mov	r0, r3
 800c230:	f003 fb5e 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800c234:	4603      	mov	r3, r0
 800c236:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c238:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <phacDiscLoop_Sw_Int_ActivateB+0x96>
 800c23e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c240:	e180      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 800c242:	78fa      	ldrb	r2, [r7, #3]
 800c244:	6879      	ldr	r1, [r7, #4]
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	440b      	add	r3, r1
 800c250:	33db      	adds	r3, #219	@ 0xdb
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 800c256:	78fa      	ldrb	r2, [r7, #3]
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	33d7      	adds	r3, #215	@ 0xd7
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d009      	beq.n	800c284 <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 800c270:	78fa      	ldrb	r2, [r7, #3]
 800c272:	6879      	ldr	r1, [r7, #4]
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	440b      	add	r3, r1
 800c27e:	33db      	adds	r3, #219	@ 0xdb
 800c280:	2201      	movs	r2, #1
 800c282:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d004      	beq.n	800c298 <phacDiscLoop_Sw_Int_ActivateB+0xec>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c294:	2b02      	cmp	r3, #2
 800c296:	d10c      	bne.n	800c2b2 <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 800c298:	78fa      	ldrb	r2, [r7, #3]
 800c29a:	6879      	ldr	r1, [r7, #4]
 800c29c:	4613      	mov	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	440b      	add	r3, r1
 800c2a6:	33db      	adds	r3, #219	@ 0xdb
 800c2a8:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e148      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 800c2b2:	78fa      	ldrb	r2, [r7, #3]
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	440b      	add	r3, r1
 800c2c0:	33d6      	adds	r3, #214	@ 0xd6
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800c2ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800c2d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800c2dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d104      	bne.n	800c2ee <phacDiscLoop_Sw_Int_ActivateB+0x142>
 800c2e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 8081 	beq.w	800c3f0 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 800c2ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c2f2:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d17a      	bne.n	800c3f0 <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 800c2fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 800c306:	2303      	movs	r3, #3
 800c308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c30c:	e016      	b.n	800c33c <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 800c30e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c312:	f003 0320 	and.w	r3, r3, #32
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 800c31a:	2302      	movs	r3, #2
 800c31c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c320:	e00c      	b.n	800c33c <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 800c322:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c326:	f003 0310 	and.w	r3, r3, #16
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 800c32e:	2301      	movs	r3, #1
 800c330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c334:	e002      	b.n	800c33c <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 800c336:	2300      	movs	r3, #0
 800c338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 800c33c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c340:	f003 0304 	and.w	r3, r3, #4
 800c344:	2b00      	cmp	r3, #0
 800c346:	d003      	beq.n	800c350 <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 800c348:	2303      	movs	r3, #3
 800c34a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c34e:	e016      	b.n	800c37e <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 800c350:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c354:	f003 0302 	and.w	r3, r3, #2
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 800c35c:	2302      	movs	r3, #2
 800c35e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c362:	e00c      	b.n	800c37e <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 800c364:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 800c370:	2301      	movs	r3, #1
 800c372:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c376:	e002      	b.n	800c37e <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 800c378:	2300      	movs	r3, #0
 800c37a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 800c37e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800c382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c386:	429a      	cmp	r2, r3
 800c388:	d009      	beq.n	800c39e <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 800c38a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800c38e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c392:	429a      	cmp	r2, r3
 800c394:	d903      	bls.n	800c39e <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 800c396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c39a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 800c39e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800c3a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d009      	beq.n	800c3be <phacDiscLoop_Sw_Int_ActivateB+0x212>
 800c3aa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800c3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d903      	bls.n	800c3be <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 800c3b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c3ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 800c3be:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	da14      	bge.n	800c3f0 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 800c3c6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800c3ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d00e      	beq.n	800c3f0 <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 800c3d2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800c3d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d204      	bcs.n	800c3e8 <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 800c3de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c3e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800c3e6:	e003      	b.n	800c3f0 <phacDiscLoop_Sw_Int_ActivateB+0x244>
 800c3e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c3ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c3f4:	78fa      	ldrb	r2, [r7, #3]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	33c8      	adds	r3, #200	@ 0xc8
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	4413      	add	r3, r2
 800c404:	1d5c      	adds	r4, r3, #5
 800c406:	78fa      	ldrb	r2, [r7, #3]
 800c408:	6879      	ldr	r1, [r7, #4]
 800c40a:	4613      	mov	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	440b      	add	r3, r1
 800c414:	33da      	adds	r3, #218	@ 0xda
 800c416:	7819      	ldrb	r1, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 50c4 	ldrb.w	r5, [r3, #196]	@ 0xc4
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	32dd      	adds	r2, #221	@ 0xdd
 800c428:	9203      	str	r2, [sp, #12]
 800c42a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800c42e:	9202      	str	r2, [sp, #8]
 800c430:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800c434:	9201      	str	r2, [sp, #4]
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	462b      	mov	r3, r5
 800c43a:	460a      	mov	r2, r1
 800c43c:	4621      	mov	r1, r4
 800c43e:	f009 ffbf 	bl	80163c0 <phpalI14443p3b_Sw_Attrib>
 800c442:	4603      	mov	r3, r0
 800c444:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c446:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <phacDiscLoop_Sw_Int_ActivateB+0x2a4>
 800c44c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c44e:	e079      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c456:	2b01      	cmp	r3, #1
 800c458:	d027      	beq.n	800c4aa <phacDiscLoop_Sw_Int_ActivateB+0x2fe>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c45e:	f107 0208 	add.w	r2, r7, #8
 800c462:	2104      	movs	r1, #4
 800c464:	4618      	mov	r0, r3
 800c466:	f009 fea7 	bl	80161b8 <phpalI14443p3b_Sw_GetConfig>
 800c46a:	4603      	mov	r3, r0
 800c46c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c46e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c470:	2b00      	cmp	r3, #0
 800c472:	d001      	beq.n	800c478 <phacDiscLoop_Sw_Int_ActivateB+0x2cc>
 800c474:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c476:	e065      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 800c478:	893b      	ldrh	r3, [r7, #8]
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c486:	f107 0208 	add.w	r2, r7, #8
 800c48a:	2105      	movs	r1, #5
 800c48c:	4618      	mov	r0, r3
 800c48e:	f009 fe93 	bl	80161b8 <phpalI14443p3b_Sw_GetConfig>
 800c492:	4603      	mov	r3, r0
 800c494:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c496:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <phacDiscLoop_Sw_Int_ActivateB+0x2f4>
 800c49c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c49e:	e051      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 800c4a0:	893b      	ldrh	r3, [r7, #8]
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c4ae:	f107 040d 	add.w	r4, r7, #13
 800c4b2:	f107 020e 	add.w	r2, r7, #14
 800c4b6:	f107 010f 	add.w	r1, r7, #15
 800c4ba:	f107 030a 	add.w	r3, r7, #10
 800c4be:	9302      	str	r3, [sp, #8]
 800c4c0:	f107 030b 	add.w	r3, r7, #11
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	f00a fa35 	bl	801693c <phpalI14443p3b_Sw_GetProtocolParams>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c4d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <phacDiscLoop_Sw_Int_ActivateB+0x334>
 800c4dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4de:	e031      	b.n	800c544 <phacDiscLoop_Sw_Int_ActivateB+0x398>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d109      	bne.n	800c4fe <phacDiscLoop_Sw_Int_ActivateB+0x352>
    {
        if (bFsci > pDataParams->bFsciMax)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800c4f0:	7abb      	ldrb	r3, [r7, #10]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d203      	bcs.n	800c4fe <phacDiscLoop_Sw_Int_ActivateB+0x352>
        {
            bFsci = pDataParams->bFsciMax;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c4fc:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800c502:	7bfd      	ldrb	r5, [r7, #15]
 800c504:	7bbe      	ldrb	r6, [r7, #14]
 800c506:	f897 c00d 	ldrb.w	ip, [r7, #13]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 800c510:	7b3a      	ldrb	r2, [r7, #12]
 800c512:	7af9      	ldrb	r1, [r7, #11]
 800c514:	7ab8      	ldrb	r0, [r7, #10]
 800c516:	9003      	str	r0, [sp, #12]
 800c518:	9102      	str	r1, [sp, #8]
 800c51a:	9201      	str	r2, [sp, #4]
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	4663      	mov	r3, ip
 800c520:	4632      	mov	r2, r6
 800c522:	4629      	mov	r1, r5
 800c524:	4620      	mov	r0, r4
 800c526:	f00a fc3c 	bl	8016da2 <phpalI14443p4_Sw_SetProtocol>
 800c52a:	4603      	mov	r3, r0
 800c52c:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 800c52e:	78fa      	ldrb	r2, [r7, #3]
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	4613      	mov	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	440b      	add	r3, r1
 800c53c:	33dc      	adds	r3, #220	@ 0xdc
 800c53e:	2200      	movs	r2, #0
 800c540:	701a      	strb	r2, [r3, #0]
    return status;
 800c542:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800c544:	4618      	mov	r0, r3
 800c546:	372c      	adds	r7, #44	@ 0x2c
 800c548:	46bd      	mov	sp, r7
 800c54a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c54c <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 800c558:	2300      	movs	r3, #0
 800c55a:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800c562:	2300      	movs	r3, #0
 800c564:	75fb      	strb	r3, [r7, #23]
 800c566:	e019      	b.n	800c59c <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 800c568:	7dfa      	ldrb	r2, [r7, #23]
 800c56a:	4613      	mov	r3, r2
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	4413      	add	r3, r2
 800c570:	00da      	lsls	r2, r3, #3
 800c572:	1ad2      	subs	r2, r2, r3
 800c574:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	3304      	adds	r3, #4
 800c57e:	2210      	movs	r2, #16
 800c580:	4619      	mov	r1, r3
 800c582:	68b8      	ldr	r0, [r7, #8]
 800c584:	f015 fb0c 	bl	8021ba0 <memcmp>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d103      	bne.n	800c596 <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 800c594:	e008      	b.n	800c5a8 <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	3301      	adds	r3, #1
 800c59a:	75fb      	strb	r3, [r7, #23]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c5a2:	7dfa      	ldrb	r2, [r7, #23]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d3df      	bcc.n	800c568 <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b086      	sub	sp, #24
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	4611      	mov	r1, r2
 800c5be:	461a      	mov	r2, r3
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	71fb      	strb	r3, [r7, #7]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 800c5d0:	f107 0313 	add.w	r3, r7, #19
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff ffb7 	bl	800c54c <phacDiscLoop_Sw_Int_CheckForDuplication>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	82bb      	strh	r3, [r7, #20]
 800c5e2:	8abb      	ldrh	r3, [r7, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 800c5e8:	8abb      	ldrh	r3, [r7, #20]
 800c5ea:	e086      	b.n	800c6fa <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 800c5ec:	7cfb      	ldrb	r3, [r7, #19]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d179      	bne.n	800c6e6 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5f6:	f107 0210 	add.w	r2, r7, #16
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f008 fef6 	bl	80153ee <phpalFelica_Sw_GetConfig>
 800c602:	4603      	mov	r3, r0
 800c604:	82bb      	strh	r3, [r7, #20]
 800c606:	8abb      	ldrh	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 800c60c:	8abb      	ldrh	r3, [r7, #20]
 800c60e:	e074      	b.n	800c6fa <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c616:	461a      	mov	r2, r3
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	441a      	add	r2, r3
 800c61c:	68f9      	ldr	r1, [r7, #12]
 800c61e:	4613      	mov	r3, r2
 800c620:	005b      	lsls	r3, r3, #1
 800c622:	4413      	add	r3, r2
 800c624:	00da      	lsls	r2, r3, #3
 800c626:	1ad2      	subs	r2, r2, r3
 800c628:	188b      	adds	r3, r1, r2
 800c62a:	33a8      	adds	r3, #168	@ 0xa8
 800c62c:	79fa      	ldrb	r2, [r7, #7]
 800c62e:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 800c630:	8a3b      	ldrh	r3, [r7, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d018      	beq.n	800c668 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	2b10      	cmp	r3, #16
 800c63a:	d915      	bls.n	800c668 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c642:	461a      	mov	r2, r3
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	441a      	add	r2, r3
 800c648:	4613      	mov	r3, r2
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	4413      	add	r3, r2
 800c64e:	00da      	lsls	r2, r3, #3
 800c650:	1ad2      	subs	r2, r2, r3
 800c652:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	4413      	add	r3, r2
 800c65a:	3304      	adds	r3, #4
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	3210      	adds	r2, #16
 800c660:	8812      	ldrh	r2, [r2, #0]
 800c662:	b292      	uxth	r2, r2
 800c664:	801a      	strh	r2, [r3, #0]
 800c666:	e014      	b.n	800c692 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c66e:	461a      	mov	r2, r3
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	441a      	add	r2, r3
 800c674:	4613      	mov	r3, r2
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	4413      	add	r3, r2
 800c67a:	00da      	lsls	r2, r3, #3
 800c67c:	1ad2      	subs	r2, r2, r3
 800c67e:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	4413      	add	r3, r2
 800c686:	3304      	adds	r3, #4
 800c688:	2202      	movs	r2, #2
 800c68a:	2100      	movs	r1, #0
 800c68c:	4618      	mov	r0, r3
 800c68e:	f015 fab1 	bl	8021bf4 <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c698:	461a      	mov	r2, r3
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	441a      	add	r2, r3
 800c69e:	4613      	mov	r3, r2
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	4413      	add	r3, r2
 800c6a4:	00da      	lsls	r2, r3, #3
 800c6a6:	1ad2      	subs	r2, r2, r3
 800c6a8:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	2210      	movs	r2, #16
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f015 fb31 	bl	8021d1e <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	7dfb      	ldrb	r3, [r7, #23]
 800c6c6:	441a      	add	r2, r3
 800c6c8:	88bb      	ldrh	r3, [r7, #4]
 800c6ca:	b2d8      	uxtb	r0, r3
 800c6cc:	68f9      	ldr	r1, [r7, #12]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	00da      	lsls	r2, r3, #3
 800c6d6:	1ad2      	subs	r2, r2, r3
 800c6d8:	188b      	adds	r3, r1, r2
 800c6da:	33a6      	adds	r3, #166	@ 0xa6
 800c6dc:	4602      	mov	r2, r0
 800c6de:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return PH_ERR_SUCCESS;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800c702:	b590      	push	{r4, r7, lr}
 800c704:	b08b      	sub	sp, #44	@ 0x2c
 800c706:	af02      	add	r7, sp, #8
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
 800c70e:	4613      	mov	r3, r2
 800c710:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800c712:	237f      	movs	r3, #127	@ 0x7f
 800c714:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800c716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c71a:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800c720:	2300      	movs	r3, #0
 800c722:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800c724:	2300      	movs	r3, #0
 800c726:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c72c:	f107 0410 	add.w	r4, r7, #16
 800c730:	78fa      	ldrb	r2, [r7, #3]
 800c732:	f107 011c 	add.w	r1, r7, #28
 800c736:	f107 031a 	add.w	r3, r7, #26
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	4623      	mov	r3, r4
 800c73e:	f008 fc6b 	bl	8015018 <phpalFelica_Sw_ReqC>
 800c742:	4603      	mov	r3, r0
 800c744:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c746:	8bfb      	ldrh	r3, [r7, #30]
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d164      	bne.n	800c818 <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 800c74e:	78fb      	ldrb	r3, [r7, #3]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d048      	beq.n	800c7e6 <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c758:	f107 021a 	add.w	r2, r7, #26
 800c75c:	2101      	movs	r1, #1
 800c75e:	4618      	mov	r0, r3
 800c760:	f008 fe45 	bl	80153ee <phpalFelica_Sw_GetConfig>
 800c764:	4603      	mov	r3, r0
 800c766:	83fb      	strh	r3, [r7, #30]
 800c768:	8bfb      	ldrh	r3, [r7, #30]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d037      	beq.n	800c7de <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 800c76e:	8bfb      	ldrh	r3, [r7, #30]
 800c770:	e053      	b.n	800c81a <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 800c776:	2300      	movs	r3, #0
 800c778:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c77e:	8b7b      	ldrh	r3, [r7, #26]
 800c780:	b2d9      	uxtb	r1, r3
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	f107 040c 	add.w	r4, r7, #12
 800c788:	f107 030f 	add.w	r3, r7, #15
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	f107 0314 	add.w	r3, r7, #20
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	4623      	mov	r3, r4
 800c796:	f008 fd55 	bl	8015244 <phpalFelica_Sw_GetFrameInfo>
 800c79a:	4603      	mov	r3, r0
 800c79c:	83fb      	strh	r3, [r7, #30]
 800c79e:	8bfb      	ldrh	r3, [r7, #30]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 800c7a4:	8bfb      	ldrh	r3, [r7, #30]
 800c7a6:	e038      	b.n	800c81a <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 800c7a8:	89bb      	ldrh	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10c      	bne.n	800c7c8 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 800c7ae:	6979      	ldr	r1, [r7, #20]
 800c7b0:	7bfa      	ldrb	r2, [r7, #15]
 800c7b2:	883b      	ldrh	r3, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff fefc 	bl	800c5b2 <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	83fb      	strh	r3, [r7, #30]
 800c7be:	8bfb      	ldrh	r3, [r7, #30]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 800c7c4:	8bfb      	ldrh	r3, [r7, #30]
 800c7c6:	e028      	b.n	800c81a <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 800c7c8:	8b7b      	ldrh	r3, [r7, #26]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	7b1b      	ldrb	r3, [r3, #12]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d211      	bcs.n	800c802 <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 800c7de:	8b7b      	ldrh	r3, [r7, #26]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1c6      	bne.n	800c772 <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 800c7e4:	e00e      	b.n	800c804 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 800c7e6:	6939      	ldr	r1, [r7, #16]
 800c7e8:	8b7b      	ldrh	r3, [r7, #26]
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	883b      	ldrh	r3, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff fedf 	bl	800c5b2 <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	83fb      	strh	r3, [r7, #30]
 800c7f8:	8bfb      	ldrh	r3, [r7, #30]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 800c7fe:	8bfb      	ldrh	r3, [r7, #30]
 800c800:	e00b      	b.n	800c81a <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 800c802:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800c80e:	f244 037f 	movw	r3, #16511	@ 0x407f
 800c812:	e002      	b.n	800c81a <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 800c814:	2300      	movs	r3, #0
 800c816:	e000      	b.n	800c81a <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 800c818:	8bfb      	ldrh	r3, [r7, #30]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3724      	adds	r7, #36	@ 0x24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd90      	pop	{r4, r7, pc}

0800c822 <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800c82a:	237f      	movs	r3, #127	@ 0x7f
 800c82c:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	4618      	mov	r0, r3
 800c838:	f008 fda1 	bl	801537e <phpalFelica_Sw_SetConfig>
 800c83c:	4603      	mov	r3, r0
 800c83e:	81fb      	strh	r3, [r7, #14]
 800c840:	89fb      	ldrh	r3, [r7, #14]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <phacDiscLoop_Sw_DetTechTypeF+0x28>
 800c846:	89fb      	ldrh	r3, [r7, #14]
 800c848:	e042      	b.n	800c8d0 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800c84a:	f107 030c 	add.w	r3, r7, #12
 800c84e:	461a      	mov	r2, r3
 800c850:	2157      	movs	r1, #87	@ 0x57
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fd f9ea 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 800c858:	4603      	mov	r3, r0
 800c85a:	81fb      	strh	r3, [r7, #14]
 800c85c:	89fb      	ldrh	r3, [r7, #14]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <phacDiscLoop_Sw_DetTechTypeF+0x44>
 800c862:	89fb      	ldrh	r3, [r7, #14]
 800c864:	e034      	b.n	800c8d0 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c86c:	f003 030c 	and.w	r3, r3, #12
 800c870:	2b00      	cmp	r3, #0
 800c872:	d103      	bne.n	800c87c <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	7f9a      	ldrb	r2, [r3, #30]
 800c880:	89bb      	ldrh	r3, [r7, #12]
 800c882:	b2db      	uxtb	r3, r3
 800c884:	43db      	mvns	r3, r3
 800c886:	b2db      	uxtb	r3, r3
 800c888:	4013      	ands	r3, r2
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 800c890:	89bb      	ldrh	r3, [r7, #12]
 800c892:	461a      	mov	r2, r3
 800c894:	2103      	movs	r1, #3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7ff ff33 	bl	800c702 <phacDiscLoop_Sw_Int_SendSensFReq>
 800c89c:	4603      	mov	r3, r0
 800c89e:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800c8a0:	89fb      	ldrh	r3, [r7, #14]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fc6f 	bl	800b186 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00c      	beq.n	800c8c8 <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c8ae:	89fb      	ldrh	r3, [r7, #14]
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d10a      	bne.n	800c8cc <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	7f9a      	ldrb	r2, [r3, #30]
 800c8ba:	89bb      	ldrh	r3, [r7, #12]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	779a      	strb	r2, [r3, #30]
 800c8c6:	e001      	b.n	800c8cc <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 800c8c8:	89fb      	ldrh	r3, [r7, #14]
 800c8ca:	e001      	b.n	800c8d0 <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800c8cc:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800c8e4:	f107 030a 	add.w	r3, r7, #10
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	2157      	movs	r1, #87	@ 0x57
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fd f99d 	bl	8009c2c <phacDiscLoop_Sw_GetConfig>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	81bb      	strh	r3, [r7, #12]
 800c8f6:	89bb      	ldrh	r3, [r7, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 800c8fc:	89bb      	ldrh	r3, [r7, #12]
 800c8fe:	e0e3      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	7f9b      	ldrb	r3, [r3, #30]
 800c904:	461a      	mov	r2, r3
 800c906:	897b      	ldrh	r3, [r7, #10]
 800c908:	4013      	ands	r3, r2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7b1b      	ldrb	r3, [r3, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c91e:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c922:	e0d1      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800c924:	2300      	movs	r3, #0
 800c926:	73bb      	strb	r3, [r7, #14]
 800c928:	e00d      	b.n	800c946 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 800c92a:	7bba      	ldrb	r2, [r7, #14]
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	4613      	mov	r3, r2
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	4413      	add	r3, r2
 800c934:	00da      	lsls	r2, r3, #3
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	188b      	adds	r3, r1, r2
 800c93a:	33a7      	adds	r3, #167	@ 0xa7
 800c93c:	2200      	movs	r2, #0
 800c93e:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	3301      	adds	r3, #1
 800c944:	73bb      	strb	r3, [r7, #14]
 800c946:	7bbb      	ldrb	r3, [r7, #14]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0ee      	beq.n	800c92a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7b1b      	ldrb	r3, [r3, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d324      	bcc.n	800c9a4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800c95a:	897b      	ldrh	r3, [r7, #10]
 800c95c:	2b04      	cmp	r3, #4
 800c95e:	d10c      	bne.n	800c97a <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c964:	2103      	movs	r1, #3
 800c966:	4618      	mov	r0, r3
 800c968:	f002 fa46 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800c96c:	4603      	mov	r3, r0
 800c96e:	81bb      	strh	r3, [r7, #12]
 800c970:	89bb      	ldrh	r3, [r7, #12]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00e      	beq.n	800c994 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800c976:	89bb      	ldrh	r3, [r7, #12]
 800c978:	e0a6      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c97e:	210a      	movs	r1, #10
 800c980:	4618      	mov	r0, r3
 800c982:	f002 fa39 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800c986:	4603      	mov	r3, r0
 800c988:	81bb      	strh	r3, [r7, #12]
 800c98a:	89bb      	ldrh	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800c990:	89bb      	ldrh	r3, [r7, #12]
 800c992:	e099      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	e091      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	7f9a      	ldrb	r2, [r3, #30]
 800c9a8:	897b      	ldrh	r3, [r7, #10]
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	43db      	mvns	r3, r3
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9bc:	2200      	movs	r2, #0
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f008 fcdc 	bl	801537e <phpalFelica_Sw_SetConfig>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800c9ca:	89bb      	ldrh	r3, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 800c9d0:	89bb      	ldrh	r3, [r7, #12]
 800c9d2:	e079      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	8a9b      	ldrh	r3, [r3, #20]
 800c9dc:	461a      	mov	r2, r3
 800c9de:	2135      	movs	r1, #53	@ 0x35
 800c9e0:	f002 ff86 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	81bb      	strh	r3, [r7, #12]
 800c9e8:	89bb      	ldrh	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 800c9ee:	89bb      	ldrh	r3, [r7, #12]
 800c9f0:	e06a      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800c9f2:	897b      	ldrh	r3, [r7, #10]
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d10c      	bne.n	800ca12 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9fc:	2103      	movs	r1, #3
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f002 f9fa 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800ca04:	4603      	mov	r3, r0
 800ca06:	81bb      	strh	r3, [r7, #12]
 800ca08:	89bb      	ldrh	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00e      	beq.n	800ca2c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800ca0e:	89bb      	ldrh	r3, [r7, #12]
 800ca10:	e05a      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca16:	210a      	movs	r1, #10
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f002 f9ed 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	81bb      	strh	r3, [r7, #12]
 800ca22:	89bb      	ldrh	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800ca28:	89bb      	ldrh	r3, [r7, #12]
 800ca2a:	e04d      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800ca2c:	897b      	ldrh	r3, [r7, #10]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	210f      	movs	r1, #15
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7ff fe65 	bl	800c702 <phacDiscLoop_Sw_Int_SendSensFReq>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800ca3c:	89bb      	ldrh	r3, [r7, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 800ca42:	89bb      	ldrh	r3, [r7, #12]
 800ca44:	e040      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800ca4a:	e030      	b.n	800caae <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800ca4c:	7bfa      	ldrb	r2, [r7, #15]
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	4413      	add	r3, r2
 800ca56:	00da      	lsls	r2, r3, #3
 800ca58:	1ad2      	subs	r2, r2, r3
 800ca5a:	188b      	adds	r3, r1, r2
 800ca5c:	3394      	adds	r3, #148	@ 0x94
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d121      	bne.n	800caa8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 800ca64:	7bfa      	ldrb	r2, [r7, #15]
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	4413      	add	r3, r2
 800ca6e:	00da      	lsls	r2, r3, #3
 800ca70:	1ad2      	subs	r2, r2, r3
 800ca72:	188b      	adds	r3, r1, r2
 800ca74:	3395      	adds	r3, #149	@ 0x95
 800ca76:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800ca78:	2bfe      	cmp	r3, #254	@ 0xfe
 800ca7a:	d115      	bne.n	800caa8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca80:	2201      	movs	r2, #1
 800ca82:	2100      	movs	r1, #0
 800ca84:	4618      	mov	r0, r3
 800ca86:	f008 fc7a 	bl	801537e <phpalFelica_Sw_SetConfig>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 800ca8e:	89bb      	ldrh	r3, [r7, #12]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 800ca94:	89bb      	ldrh	r3, [r7, #12]
 800ca96:	e017      	b.n	800cac8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800ca98:	897b      	ldrh	r3, [r7, #10]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	210f      	movs	r1, #15
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff fe2f 	bl	800c702 <phacDiscLoop_Sw_Int_SendSensFReq>
 800caa4:	4603      	mov	r3, r0
 800caa6:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	3301      	adds	r3, #1
 800caac:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cab4:	7bfa      	ldrb	r2, [r7, #15]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d3c8      	bcc.n	800ca4c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 800cac6:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 800cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad4:	b092      	sub	sp, #72	@ 0x48
 800cad6:	af06      	add	r7, sp, #24
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800cade:	2300      	movs	r3, #0
 800cae0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 800cae2:	2300      	movs	r3, #0
 800cae4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800cae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800caec:	853b      	strh	r3, [r7, #40]	@ 0x28
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800caee:	2300      	movs	r3, #0
 800caf0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	623b      	str	r3, [r7, #32]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cafc:	78fa      	ldrb	r2, [r7, #3]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d202      	bcs.n	800cb08 <phacDiscLoop_Sw_Int_ActivateF+0x38>
 800cb02:	78fb      	ldrb	r3, [r7, #3]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <phacDiscLoop_Sw_Int_ActivateF+0x3e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800cb08:	f244 0321 	movw	r3, #16417	@ 0x4021
 800cb0c:	e105      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	4613      	mov	r3, r2
 800cb16:	005b      	lsls	r3, r3, #1
 800cb18:	4413      	add	r3, r2
 800cb1a:	00da      	lsls	r2, r3, #3
 800cb1c:	1ad2      	subs	r2, r2, r3
 800cb1e:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	4413      	add	r3, r2
 800cb26:	3304      	adds	r3, #4
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f008 fc14 	bl	8015356 <phpalFelica_Sw_SetSerialNo>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cb32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <phacDiscLoop_Sw_Int_ActivateF+0x6c>
 800cb38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb3a:	e0ee      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	4613      	mov	r3, r2
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	4413      	add	r3, r2
 800cb46:	00da      	lsls	r2, r3, #3
 800cb48:	1ad2      	subs	r2, r2, r3
 800cb4a:	188b      	adds	r3, r1, r2
 800cb4c:	3394      	adds	r3, #148	@ 0x94
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	f040 80d6 	bne.w	800cd02 <phacDiscLoop_Sw_Int_ActivateF+0x232>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800cb56:	78fa      	ldrb	r2, [r7, #3]
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	4413      	add	r3, r2
 800cb60:	00da      	lsls	r2, r3, #3
 800cb62:	1ad2      	subs	r2, r2, r3
 800cb64:	188b      	adds	r3, r1, r2
 800cb66:	3395      	adds	r3, #149	@ 0x95
 800cb68:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800cb6a:	2bfe      	cmp	r3, #254	@ 0xfe
 800cb6c:	f040 80c9 	bne.w	800cd02 <phacDiscLoop_Sw_Int_ActivateF+0x232>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800cb70:	78fa      	ldrb	r2, [r7, #3]
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	00da      	lsls	r2, r3, #3
 800cb7c:	1ad2      	subs	r2, r2, r3
 800cb7e:	188b      	adds	r3, r1, r2
 800cb80:	33a7      	adds	r3, #167	@ 0xa7
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d076      	beq.n	800cc76 <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2100      	movs	r1, #0
 800cb90:	4618      	mov	r0, r3
 800cb92:	f008 fbf4 	bl	801537e <phpalFelica_Sw_SetConfig>
 800cb96:	4603      	mov	r3, r0
 800cb98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800cb9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <phacDiscLoop_Sw_Int_ActivateF+0xd4>
 800cba0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cba2:	e0ba      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cba8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cbac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800cbb0:	f107 031e 	add.w	r3, r7, #30
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	2203      	movs	r2, #3
 800cbba:	f008 fa2d 	bl	8015018 <phpalFelica_Sw_ReqC>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800cbc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <phacDiscLoop_Sw_Int_ActivateF+0xfc>
 800cbc8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbca:	e0a6      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800cbcc:	78fa      	ldrb	r2, [r7, #3]
 800cbce:	6879      	ldr	r1, [r7, #4]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	4413      	add	r3, r2
 800cbd6:	00da      	lsls	r2, r3, #3
 800cbd8:	1ad2      	subs	r2, r2, r3
 800cbda:	188b      	adds	r3, r1, r2
 800cbdc:	33a7      	adds	r3, #167	@ 0xa7
 800cbde:	2200      	movs	r2, #0
 800cbe0:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe6:	f107 021c 	add.w	r2, r7, #28
 800cbea:	2101      	movs	r1, #1
 800cbec:	4618      	mov	r0, r3
 800cbee:	f008 fbfe 	bl	80153ee <phpalFelica_Sw_GetConfig>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cbf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d02e      	beq.n	800cc5a <phacDiscLoop_Sw_Int_ActivateF+0x18a>
 800cbfc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbfe:	e08c      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800cc00:	2300      	movs	r3, #0
 800cc02:	76fb      	strb	r3, [r7, #27]
                    wFrameStatus = 0x00;
 800cc04:	2300      	movs	r3, #0
 800cc06:	833b      	strh	r3, [r7, #24]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc0c:	8bbb      	ldrh	r3, [r7, #28]
 800cc0e:	b2d9      	uxtb	r1, r3
 800cc10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc12:	f107 0418 	add.w	r4, r7, #24
 800cc16:	f107 031b 	add.w	r3, r7, #27
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	f107 0320 	add.w	r3, r7, #32
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	4623      	mov	r3, r4
 800cc24:	f008 fb0e 	bl	8015244 <phpalFelica_Sw_GetFrameInfo>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cc2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <phacDiscLoop_Sw_Int_ActivateF+0x166>
 800cc32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc34:	e071      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	f107 022d 	add.w	r2, r7, #45	@ 0x2d
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff fc84 	bl	800c54c <phacDiscLoop_Sw_Int_CheckForDuplication>
 800cc44:	4603      	mov	r3, r0
 800cc46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cc48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <phacDiscLoop_Sw_Int_ActivateF+0x182>
 800cc4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc50:	e063      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800cc52:	8bbb      	ldrh	r3, [r7, #28]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	83bb      	strh	r3, [r7, #28]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800cc5a:	8bbb      	ldrh	r3, [r7, #28]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d003      	beq.n	800cc68 <phacDiscLoop_Sw_Int_ActivateF+0x198>
 800cc60:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0cb      	beq.n	800cc00 <phacDiscLoop_Sw_Int_ActivateF+0x130>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800cc68:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d102      	bne.n	800cc76 <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800cc70:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800cc74:	e051      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            }
        }
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
        /* Symbol 4 */
        (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800cc76:	78fa      	ldrb	r2, [r7, #3]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	4413      	add	r3, r2
 800cc7e:	00da      	lsls	r2, r3, #3
 800cc80:	1ad2      	subs	r2, r2, r3
 800cc82:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	4413      	add	r3, r2
 800cc8a:	1d19      	adds	r1, r3, #4
 800cc8c:	f107 030c 	add.w	r3, r7, #12
 800cc90:	2208      	movs	r2, #8
 800cc92:	4618      	mov	r0, r3
 800cc94:	f015 f843 	bl	8021d1e <memcpy>

        aNfcId3[8] = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	753b      	strb	r3, [r7, #20]
        aNfcId3[9] = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	757b      	strb	r3, [r7, #21]

        /* Activate the P2P capable FeliCa card */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800ccc8:	687c      	ldr	r4, [r7, #4]
 800ccca:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 800ccce:	687d      	ldr	r5, [r7, #4]
 800ccd0:	35bc      	adds	r5, #188	@ 0xbc
 800ccd2:	f107 0c0c 	add.w	ip, r7, #12
 800ccd6:	9505      	str	r5, [sp, #20]
 800ccd8:	9404      	str	r4, [sp, #16]
 800ccda:	9003      	str	r0, [sp, #12]
 800ccdc:	9102      	str	r1, [sp, #8]
 800ccde:	9201      	str	r2, [sp, #4]
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	4643      	mov	r3, r8
 800cce4:	4672      	mov	r2, lr
 800cce6:	4661      	mov	r1, ip
 800cce8:	4630      	mov	r0, r6
 800ccea:	f00c fb05 	bl	80192f8 <phpalI18092mPI_Sw_Atr>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ccf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <phacDiscLoop_Sw_Int_ActivateF+0x22c>
 800ccf8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ccfa:	e00e      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pGi,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pAtrRes,
            &(pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800ccfc:	f244 038d 	movw	r3, #16525	@ 0x408d
 800cd00:	e00b      	b.n	800cd1a <phacDiscLoop_Sw_Int_ActivateF+0x24a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	00da      	lsls	r2, r3, #3
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	188b      	adds	r3, r1, r2
 800cd12:	33a7      	adds	r3, #167	@ 0xa7
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
    }
    return PH_ERR_SUCCESS;
 800cd18:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3730      	adds	r7, #48	@ 0x30
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cd24 <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800cd30:	237f      	movs	r3, #127	@ 0x7f
 800cd32:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	789b      	ldrb	r3, [r3, #2]
 800cd38:	f003 0302 	and.w	r3, r3, #2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01e      	beq.n	800cd7e <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800cd46:	2b04      	cmp	r3, #4
 800cd48:	d00a      	beq.n	800cd60 <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800cd50:	2b08      	cmp	r3, #8
 800cd52:	d114      	bne.n	800cd7e <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	789b      	ldrb	r3, [r3, #2]
 800cd58:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10e      	bne.n	800cd7e <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	8adb      	ldrh	r3, [r3, #22]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	2135      	movs	r1, #53	@ 0x35
 800cd6c:	f002 fdc0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800cd70:	4603      	mov	r3, r0
 800cd72:	81fb      	strh	r3, [r7, #14]
 800cd74:	89fb      	ldrh	r3, [r7, #14]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d010      	beq.n	800cd9c <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800cd7a:	89fb      	ldrh	r3, [r7, #14]
 800cd7c:	e02a      	b.n	800cdd4 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	8a9b      	ldrh	r3, [r3, #20]
 800cd86:	461a      	mov	r2, r3
 800cd88:	2135      	movs	r1, #53	@ 0x35
 800cd8a:	f002 fdb1 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	81fb      	strh	r3, [r7, #14]
 800cd92:	89fb      	ldrh	r3, [r7, #14]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800cd98:	89fb      	ldrh	r3, [r7, #14]
 800cd9a:	e01b      	b.n	800cdd4 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	2b03      	cmp	r3, #3
 800cda0:	d10b      	bne.n	800cdba <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800cda2:	2208      	movs	r2, #8
 800cda4:	2157      	movs	r1, #87	@ 0x57
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7fc fac2 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800cdac:	4603      	mov	r3, r0
 800cdae:	81fb      	strh	r3, [r7, #14]
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00d      	beq.n	800cdd2 <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800cdb6:	89fb      	ldrh	r3, [r7, #14]
 800cdb8:	e00c      	b.n	800cdd4 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800cdba:	2204      	movs	r2, #4
 800cdbc:	2157      	movs	r1, #87	@ 0x57
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7fc fab6 	bl	8009330 <phacDiscLoop_Sw_SetConfig>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	81fb      	strh	r3, [r7, #14]
 800cdc8:	89fb      	ldrh	r3, [r7, #14]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800cdce:	89fb      	ldrh	r3, [r7, #14]
 800cdd0:	e000      	b.n	800cdd4 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800cddc:	b590      	push	{r4, r7, lr}
 800cdde:	b09b      	sub	sp, #108	@ 0x6c
 800cde0:	af08      	add	r7, sp, #32
 800cde2:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800cde4:	f107 031c 	add.w	r3, r7, #28
 800cde8:	2227      	movs	r2, #39	@ 0x27
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f014 ff01 	bl	8021bf4 <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800cdf2:	f107 0314 	add.w	r3, r7, #20
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	460a      	mov	r2, r1
 800cdfa:	801a      	strh	r2, [r3, #0]
 800cdfc:	460a      	mov	r2, r1
 800cdfe:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800ce10:	f107 031a 	add.w	r3, r7, #26
 800ce14:	9307      	str	r3, [sp, #28]
 800ce16:	f107 031b 	add.w	r3, r7, #27
 800ce1a:	9306      	str	r3, [sp, #24]
 800ce1c:	f107 031c 	add.w	r3, r7, #28
 800ce20:	9305      	str	r3, [sp, #20]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	2300      	movs	r3, #0
 800ce28:	9303      	str	r3, [sp, #12]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9302      	str	r3, [sp, #8]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	f107 0313 	add.w	r3, r7, #19
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	2301      	movs	r3, #1
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	f00c f837 	bl	8018eb0 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ce48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800ce50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce54:	e043      	b.n	800cede <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800ce66:	f107 0314 	add.w	r3, r7, #20
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9303      	str	r3, [sp, #12]
 800ce70:	2300      	movs	r3, #0
 800ce72:	9302      	str	r3, [sp, #8]
 800ce74:	2300      	movs	r3, #0
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f00c f930 	bl	80190e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800ce82:	4603      	mov	r3, r0
 800ce84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ce88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800ce90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce94:	e023      	b.n	800cede <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ce9a:	7efa      	ldrb	r2, [r7, #27]
 800ce9c:	7ebc      	ldrb	r4, [r7, #26]
 800ce9e:	f107 011c 	add.w	r1, r7, #28
 800cea2:	f107 030a 	add.w	r3, r7, #10
 800cea6:	9303      	str	r3, [sp, #12]
 800cea8:	f107 030c 	add.w	r3, r7, #12
 800ceac:	9302      	str	r3, [sp, #8]
 800ceae:	2301      	movs	r3, #1
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	f107 0314 	add.w	r3, r7, #20
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	4623      	mov	r3, r4
 800ceba:	f005 f8bd 	bl	8012038 <phhalHw_Pn5180_I18000p3m3Inventory>
 800cebe:	4603      	mov	r3, r0
 800cec0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800cec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe f95c 	bl	800b186 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800ced4:	f244 0387 	movw	r3, #16519	@ 0x4087
 800ced8:	e001      	b.n	800cede <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800ceda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800cede:	4618      	mov	r0, r3
 800cee0:	374c      	adds	r7, #76	@ 0x4c
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd90      	pop	{r4, r7, pc}

0800cee6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800cee6:	b590      	push	{r4, r7, lr}
 800cee8:	b09b      	sub	sp, #108	@ 0x6c
 800ceea:	af08      	add	r7, sp, #32
 800ceec:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800ceee:	2304      	movs	r3, #4
 800cef0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800cef4:	f107 0318 	add.w	r3, r7, #24
 800cef8:	2227      	movs	r2, #39	@ 0x27
 800cefa:	2100      	movs	r1, #0
 800cefc:	4618      	mov	r0, r3
 800cefe:	f014 fe79 	bl	8021bf4 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800cf02:	f107 0310 	add.w	r3, r7, #16
 800cf06:	2100      	movs	r1, #0
 800cf08:	460a      	mov	r2, r1
 800cf0a:	801a      	strh	r2, [r3, #0]
 800cf0c:	460a      	mov	r2, r1
 800cf0e:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7f9b      	ldrb	r3, [r3, #30]
 800cf24:	f023 0320 	bic.w	r3, r3, #32
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	8b5b      	ldrh	r3, [r3, #26]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	2135      	movs	r1, #53	@ 0x35
 800cf50:	f002 fcce 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800cf54:	4603      	mov	r3, r0
 800cf56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cf5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800cf62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cf66:	e1c5      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf6c:	2106      	movs	r1, #6
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f001 ff42 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800cf74:	4603      	mov	r3, r0
 800cf76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cf7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800cf82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cf86:	e1b5      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800cf9c:	f107 0316 	add.w	r3, r7, #22
 800cfa0:	9307      	str	r3, [sp, #28]
 800cfa2:	f107 0317 	add.w	r3, r7, #23
 800cfa6:	9306      	str	r3, [sp, #24]
 800cfa8:	f107 0318 	add.w	r3, r7, #24
 800cfac:	9305      	str	r3, [sp, #20]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	9303      	str	r3, [sp, #12]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	9302      	str	r3, [sp, #8]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	f107 0309 	add.w	r3, r7, #9
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2100      	movs	r1, #0
 800cfca:	f00b ff71 	bl	8018eb0 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cfd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800cfdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cfe0:	e188      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800cfe2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b71      	cmp	r3, #113	@ 0x71
 800cfea:	d113      	bne.n	800d014 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff0:	f107 020a 	add.w	r2, r7, #10
 800cff4:	f107 010c 	add.w	r1, r7, #12
 800cff8:	4618      	mov	r0, r3
 800cffa:	f005 f9b5 	bl	8012368 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800cffe:	4603      	mov	r3, r0
 800d000:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800d004:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b12      	cmp	r3, #18
 800d00c:	d150      	bne.n	800d0b0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800d00e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d012:	e16f      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 40ed 	ldrb.w	r4, [r3, #237]	@ 0xed
 800d024:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800d02e:	f107 0210 	add.w	r2, r7, #16
 800d032:	9204      	str	r2, [sp, #16]
 800d034:	9303      	str	r3, [sp, #12]
 800d036:	2300      	movs	r3, #0
 800d038:	9302      	str	r3, [sp, #8]
 800d03a:	2300      	movs	r3, #0
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	2300      	movs	r3, #0
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	2300      	movs	r3, #0
 800d044:	4622      	mov	r2, r4
 800d046:	f00c f84c 	bl	80190e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800d04a:	4603      	mov	r3, r0
 800d04c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d050:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800d058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d05c:	e14a      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d062:	7dfa      	ldrb	r2, [r7, #23]
 800d064:	7dbc      	ldrb	r4, [r7, #22]
 800d066:	f107 0118 	add.w	r1, r7, #24
 800d06a:	f107 030a 	add.w	r3, r7, #10
 800d06e:	9303      	str	r3, [sp, #12]
 800d070:	f107 030c 	add.w	r3, r7, #12
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	2300      	movs	r3, #0
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	f107 0310 	add.w	r3, r7, #16
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	4623      	mov	r3, r4
 800d082:	f004 ffd9 	bl	8012038 <phhalHw_Pn5180_I18000p3m3Inventory>
 800d086:	4603      	mov	r3, r0
 800d088:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800d08c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b12      	cmp	r3, #18
 800d094:	d102      	bne.n	800d09c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800d096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d09a:	e12b      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800d09c:	2300      	movs	r3, #0
 800d09e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7f9b      	ldrb	r3, [r3, #30]
 800d0a6:	f023 0320 	bic.w	r3, r3, #32
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800d0b6:	e0ff      	b.n	800d2b8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
        {
            if(pRxBuffer[wIndex] == 0U)
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d0be:	4413      	add	r3, r2
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 80cb 	bne.w	800d25e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x378>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d0ce:	3302      	adds	r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d002      	beq.n	800d0de <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800d0d8:	f244 037f 	movw	r3, #16511	@ 0x407f
 800d0dc:	e10a      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800d0de:	2302      	movs	r3, #2
 800d0e0:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d0f0:	3303      	adds	r3, #3
 800d0f2:	4413      	add	r3, r2
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d015      	beq.n	800d12a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800d0fe:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800d102:	3302      	adds	r3, #2
 800d104:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800d108:	2302      	movs	r3, #2
 800d10a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d114:	3305      	adds	r3, #5
 800d116:	4413      	add	r3, r2
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	b25b      	sxtb	r3, r3
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	da04      	bge.n	800d12a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800d120:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800d124:	3302      	adds	r3, #2
 800d126:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d130:	3301      	adds	r3, #1
 800d132:	4413      	add	r3, r2
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	4619      	mov	r1, r3
 800d138:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800d13c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800d140:	4413      	add	r3, r2
 800d142:	4299      	cmp	r1, r3
 800d144:	dd55      	ble.n	800d1f2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x30c>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d14c:	3301      	adds	r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	4619      	mov	r1, r3
 800d154:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800d158:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800d15c:	4413      	add	r3, r2
 800d15e:	1acb      	subs	r3, r1, r3
 800d160:	2b3a      	cmp	r3, #58	@ 0x3a
 800d162:	dc43      	bgt.n	800d1ec <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x306>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d16a:	461a      	mov	r2, r3
 800d16c:	4613      	mov	r3, r2
 800d16e:	011b      	lsls	r3, r3, #4
 800d170:	1a9b      	subs	r3, r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	33e8      	adds	r3, #232	@ 0xe8
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	4413      	add	r3, r2
 800d17a:	f103 0008 	add.w	r0, r3, #8
                        (void)memcpy(
 800d17e:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800d180:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800d184:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800d188:	440b      	add	r3, r1
 800d18a:	3303      	adds	r3, #3
 800d18c:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d194:	3301      	adds	r3, #1
 800d196:	4413      	add	r3, r2
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	461c      	mov	r4, r3
 800d19c:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800d1a0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800d1a4:	4413      	add	r3, r2
                        (void)memcpy(
 800d1a6:	1ae3      	subs	r3, r4, r3
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f014 fdb8 	bl	8021d1e <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800d1c0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800d1c4:	4413      	add	r3, r2
 800d1c6:	1acb      	subs	r3, r1, r3
 800d1c8:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800d1d0:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	011b      	lsls	r3, r3, #4
 800d1dc:	1a5b      	subs	r3, r3, r1
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	801a      	strh	r2, [r3, #0]
 800d1ea:	e010      	b.n	800d20e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x328>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800d1ec:	f244 037f 	movw	r3, #16511	@ 0x407f
 800d1f0:	e080      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	1a5b      	subs	r3, r3, r1
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800d20a:	2200      	movs	r2, #0
 800d20c:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d214:	3301      	adds	r3, #1
 800d216:	b2da      	uxtb	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                pDataParams->bNumOfCards++;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d224:	3301      	adds	r3, #1
 800d226:	b2da      	uxtb	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 20ec 	ldrb.w	r2, [r3, #236]	@ 0xec
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800d238:	429a      	cmp	r2, r3
 800d23a:	d301      	bcc.n	800d240 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x35a>
                {
                    return PH_ERR_SUCCESS;
 800d23c:	2300      	movs	r3, #0
 800d23e:	e059      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d246:	3301      	adds	r3, #1
 800d248:	4413      	add	r3, r2
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	461a      	mov	r2, r3
 800d24e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d252:	4413      	add	r3, r2
 800d254:	b29b      	uxth	r3, r3
 800d256:	3303      	adds	r3, #3
 800d258:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d25c:	e02c      	b.n	800d2b8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d264:	4413      	add	r3, r2
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d102      	bne.n	800d272 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x38c>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800d26c:	f244 037f 	movw	r3, #16511	@ 0x407f
 800d270:	e040      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d278:	4413      	add	r3, r2
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d105      	bne.n	800d28c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a6>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800d280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d284:	3303      	adds	r3, #3
 800d286:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d28a:	e015      	b.n	800d2b8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800d28c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d290:	3303      	adds	r3, #3
 800d292:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800d296:	2301      	movs	r3, #1
 800d298:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7f9b      	ldrb	r3, [r3, #30]
 800d2a0:	f043 0320 	orr.w	r3, r3, #32
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	7bdb      	ldrb	r3, [r3, #15]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d102      	bne.n	800d2b8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800d2b2:	f244 0381 	movw	r3, #16513	@ 0x4081
 800d2b6:	e01d      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        while(wIndex < wRxBufferLen)
 800d2b8:	897b      	ldrh	r3, [r7, #10]
 800d2ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	f4ff aefa 	bcc.w	800d0b8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800d2c4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d004      	beq.n	800d2d6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3f0>
 800d2cc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800d2d0:	2b0f      	cmp	r3, #15
 800d2d2:	f67f ae86 	bls.w	800cfe2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800d2d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b71      	cmp	r3, #113	@ 0x71
 800d2de:	f43f ae80 	beq.w	800cfe2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40a>
    {
        return PH_ERR_SUCCESS;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	e001      	b.n	800d2f4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800d2f0:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	374c      	adds	r7, #76	@ 0x4c
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd90      	pop	{r4, r7, pc}

0800d2fc <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b09b      	sub	sp, #108	@ 0x6c
 800d300:	af08      	add	r7, sp, #32
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800d308:	f107 031c 	add.w	r3, r7, #28
 800d30c:	2227      	movs	r2, #39	@ 0x27
 800d30e:	2100      	movs	r1, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f014 fc6f 	bl	8021bf4 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800d316:	f107 0314 	add.w	r3, r7, #20
 800d31a:	2100      	movs	r1, #0
 800d31c:	460a      	mov	r2, r1
 800d31e:	801a      	strh	r2, [r3, #0]
 800d320:	460a      	mov	r2, r1
 800d322:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800d324:	2300      	movs	r3, #0
 800d326:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800d32c:	2320      	movs	r3, #32
 800d32e:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d336:	78fa      	ldrb	r2, [r7, #3]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d202      	bcs.n	800d342 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800d33c:	78fb      	ldrb	r3, [r7, #3]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800d342:	f244 0321 	movw	r3, #16417	@ 0x4021
 800d346:	e09b      	b.n	800d480 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800d348:	78fa      	ldrb	r2, [r7, #3]
 800d34a:	6879      	ldr	r1, [r7, #4]
 800d34c:	4613      	mov	r3, r2
 800d34e:	011b      	lsls	r3, r3, #4
 800d350:	1a9b      	subs	r3, r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	440b      	add	r3, r1
 800d356:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	2bff      	cmp	r3, #255	@ 0xff
 800d35e:	d903      	bls.n	800d368 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6c>
    {
        bMaskLength = 255;
 800d360:	23ff      	movs	r3, #255	@ 0xff
 800d362:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d366:	e00b      	b.n	800d380 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x84>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800d368:	78fa      	ldrb	r2, [r7, #3]
 800d36a:	6879      	ldr	r1, [r7, #4]
 800d36c:	4613      	mov	r3, r2
 800d36e:	011b      	lsls	r3, r3, #4
 800d370:	1a9b      	subs	r3, r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	440b      	add	r3, r1
 800d376:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d384:	78fa      	ldrb	r2, [r7, #3]
 800d386:	4613      	mov	r3, r2
 800d388:	011b      	lsls	r3, r3, #4
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	33e8      	adds	r3, #232	@ 0xe8
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	4413      	add	r3, r2
 800d394:	3308      	adds	r3, #8
 800d396:	f107 021a 	add.w	r2, r7, #26
 800d39a:	9207      	str	r2, [sp, #28]
 800d39c:	f107 021b 	add.w	r2, r7, #27
 800d3a0:	9206      	str	r2, [sp, #24]
 800d3a2:	f107 021c 	add.w	r2, r7, #28
 800d3a6:	9205      	str	r2, [sp, #20]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	9204      	str	r2, [sp, #16]
 800d3ac:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800d3b0:	9203      	str	r2, [sp, #12]
 800d3b2:	9302      	str	r3, [sp, #8]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	f107 030d 	add.w	r3, r7, #13
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	2301      	movs	r3, #1
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	f00b fd74 	bl	8018eb0 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d3ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xe0>
 800d3d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d3da:	e051      	b.n	800d480 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800d3ec:	f107 0314 	add.w	r3, r7, #20
 800d3f0:	9304      	str	r3, [sp, #16]
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9303      	str	r3, [sp, #12]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9302      	str	r3, [sp, #8]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	2300      	movs	r3, #0
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	2300      	movs	r3, #0
 800d404:	f00b fe6d 	bl	80190e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800d408:	4603      	mov	r3, r0
 800d40a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d40e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x120>
 800d416:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d41a:	e031      	b.n	800d480 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d420:	7efa      	ldrb	r2, [r7, #27]
 800d422:	7ebc      	ldrb	r4, [r7, #26]
 800d424:	f107 011c 	add.w	r1, r7, #28
 800d428:	f107 030e 	add.w	r3, r7, #14
 800d42c:	9303      	str	r3, [sp, #12]
 800d42e:	f107 0310 	add.w	r3, r7, #16
 800d432:	9302      	str	r3, [sp, #8]
 800d434:	2302      	movs	r3, #2
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	4623      	mov	r3, r4
 800d440:	f004 fdfa 	bl	8012038 <phhalHw_Pn5180_I18000p3m3Inventory>
 800d444:	4603      	mov	r3, r0
 800d446:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d44a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x15c>
 800d452:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d456:	e013      	b.n	800d480 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	89fb      	ldrh	r3, [r7, #14]
 800d460:	3b02      	subs	r3, #2
 800d462:	4413      	add	r3, r2
 800d464:	4619      	mov	r1, r3
 800d466:	f000 fbd7 	bl	800dc18 <phalI18000p3m3_Sw_SetHandle>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d470:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x182>
 800d478:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d47c:	e000      	b.n	800d480 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800d47e:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800d480:	4618      	mov	r0, r3
 800d482:	374c      	adds	r7, #76	@ 0x4c
 800d484:	46bd      	mov	sp, r7
 800d486:	bd90      	pop	{r4, r7, pc}

0800d488 <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af04      	add	r7, sp, #16
 800d48e:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800d490:	237f      	movs	r3, #127	@ 0x7f
 800d492:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800d49e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800d4a2:	b2d9      	uxtb	r1, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	33e2      	adds	r3, #226	@ 0xe2
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	32e3      	adds	r2, #227	@ 0xe3
 800d4ac:	9202      	str	r2, [sp, #8]
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f00c fd58 	bl	8019f6c <phpalSli15693_Sw_Inventory>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800d4c0:	89fb      	ldrh	r3, [r7, #14]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fd fe5f 	bl	800b186 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800d4ce:	f244 0387 	movw	r3, #16519	@ 0x4087
 800d4d2:	e000      	b.n	800d4d6 <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800d4d4:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800d4de:	b590      	push	{r4, r7, lr}
 800d4e0:	b09b      	sub	sp, #108	@ 0x6c
 800d4e2:	af04      	add	r7, sp, #16
 800d4e4:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800d4e6:	237f      	movs	r3, #127	@ 0x7f
 800d4e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800d510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	605a      	str	r2, [r3, #4]
 800d51a:	609a      	str	r2, [r3, #8]
 800d51c:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800d51e:	f107 030c 	add.w	r3, r7, #12
 800d522:	2220      	movs	r2, #32
 800d524:	2100      	movs	r1, #0
 800d526:	4618      	mov	r0, r3
 800d528:	f014 fb64 	bl	8021bf4 <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	7f9b      	ldrb	r3, [r3, #30]
 800d538:	f023 0310 	bic.w	r3, r3, #16
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	8b1b      	ldrh	r3, [r3, #24]
 800d54a:	461a      	mov	r2, r3
 800d54c:	2135      	movs	r1, #53	@ 0x35
 800d54e:	f002 f9cf 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800d552:	4603      	mov	r3, r0
 800d554:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d558:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800d560:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d564:	e2bf      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d56a:	2104      	movs	r1, #4
 800d56c:	4618      	mov	r0, r3
 800d56e:	f001 fc43 	bl	800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>
 800d572:	4603      	mov	r3, r0
 800d574:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d578:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800d580:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d584:	e2af      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800d590:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800d594:	b2d9      	uxtb	r1, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	33e2      	adds	r3, #226	@ 0xe2
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	32e3      	adds	r2, #227	@ 0xe3
 800d59e:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800d5a2:	9202      	str	r2, [sp, #8]
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	4623      	mov	r3, r4
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f00c fcdc 	bl	8019f6c <phpalSli15693_Sw_Inventory>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800d5ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d102      	bne.n	800d5ca <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800d5c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d5c8:	e28d      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800d5ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d111      	bne.n	800d5f8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800d5da:	3301      	adds	r3, #1
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
            pDataParams->bNumOfCards++;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e276      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800d5f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b03      	cmp	r3, #3
 800d600:	d005      	beq.n	800d60e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800d602:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b02      	cmp	r3, #2
 800d60a:	f040 8260 	bne.w	800dace <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f0>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	7f9b      	ldrb	r3, [r3, #30]
 800d612:	f043 0310 	orr.w	r3, r3, #16
 800d616:	b2da      	uxtb	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7b9b      	ldrb	r3, [r3, #14]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f040 8245 	bne.w	800dab0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800d626:	f244 0381 	movw	r3, #16513	@ 0x4081
 800d62a:	e25c      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	7f9b      	ldrb	r3, [r3, #30]
 800d636:	f023 0310 	bic.w	r3, r3, #16
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800d64a:	f043 0304 	orr.w	r3, r3, #4
 800d64e:	b2dc      	uxtb	r4, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800d656:	461a      	mov	r2, r3
 800d658:	4613      	mov	r3, r2
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	4413      	add	r3, r2
 800d65e:	33d8      	adds	r3, #216	@ 0xd8
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	4413      	add	r3, r2
 800d664:	f103 020a 	add.w	r2, r3, #10
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800d66e:	4619      	mov	r1, r3
 800d670:	460b      	mov	r3, r1
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	440b      	add	r3, r1
 800d676:	33d8      	adds	r3, #216	@ 0xd8
 800d678:	6879      	ldr	r1, [r7, #4]
 800d67a:	440b      	add	r3, r1
 800d67c:	330b      	adds	r3, #11
 800d67e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800d682:	9302      	str	r3, [sp, #8]
 800d684:	9201      	str	r2, [sp, #4]
 800d686:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	460b      	mov	r3, r1
 800d68e:	2200      	movs	r2, #0
 800d690:	4621      	mov	r1, r4
 800d692:	f00c fc6b 	bl	8019f6c <phpalSli15693_Sw_Inventory>
 800d696:	4603      	mov	r3, r0
 800d698:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800d69c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d04f      	beq.n	800d746 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800d6a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b06      	cmp	r3, #6
 800d6ae:	d04a      	beq.n	800d746 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800d6b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	d004      	beq.n	800d6c4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e6>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800d6ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d11f      	bne.n	800d704 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x226>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7f9b      	ldrb	r3, [r3, #30]
 800d6c8:	f043 0310 	orr.w	r3, r3, #16
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800d6d2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	3358      	adds	r3, #88	@ 0x58
 800d6da:	443b      	add	r3, r7
 800d6dc:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800d6e0:	b21a      	sxth	r2, r3
 800d6e2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ec:	b21b      	sxth	r3, r3
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	b21a      	sxth	r2, r3
 800d6f2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d6f6:	b292      	uxth	r2, r2
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	3358      	adds	r3, #88	@ 0x58
 800d6fc:	443b      	add	r3, r7
 800d6fe:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800d702:	e020      	b.n	800d746 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800d704:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d118      	bne.n	800d740 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x262>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800d714:	3301      	adds	r3, #1
 800d716:	b2da      	uxtb	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
                            pDataParams->bNumOfCards++;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d724:	3301      	adds	r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	7b9b      	ldrb	r3, [r3, #14]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d304      	bcc.n	800d746 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            {
                                return PH_ERR_SUCCESS;
 800d73c:	2300      	movs	r3, #0
 800d73e:	e1d2      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800d740:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d744:	e1cf      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800d746:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d74a:	3301      	adds	r3, #1
 800d74c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800d750:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d754:	2b10      	cmp	r3, #16
 800d756:	d102      	bne.n	800d75e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x280>
                        {
                            bNextSlot = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800d75e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800d762:	2b00      	cmp	r3, #0
 800d764:	d032      	beq.n	800d7cc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800d770:	461a      	mov	r2, r3
 800d772:	4613      	mov	r3, r2
 800d774:	00db      	lsls	r3, r3, #3
 800d776:	4413      	add	r3, r2
 800d778:	33d8      	adds	r3, #216	@ 0xd8
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	f103 010a 	add.w	r1, r3, #10
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800d788:	461a      	mov	r2, r3
 800d78a:	4613      	mov	r3, r2
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	4413      	add	r3, r2
 800d790:	33d8      	adds	r3, #216	@ 0xd8
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	4413      	add	r3, r2
 800d796:	f103 020b 	add.w	r2, r3, #11
 800d79a:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800d79e:	9302      	str	r3, [sp, #8]
 800d7a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	460a      	mov	r2, r1
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	f00c fc05 	bl	8019fc0 <phpalSli15693_Sw_SendEof>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800d7bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	2b12      	cmp	r3, #18
 800d7c4:	d102      	bne.n	800d7cc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
 800d7c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d7ca:	e18c      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }
                    }
                    while(0U != bNextSlot);
 800d7cc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f47f af63 	bne.w	800d69c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1be>
                    bNextSlot = 1;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800d7e2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	3358      	adds	r3, #88	@ 0x58
 800d7ea:	443b      	add	r3, r7
 800d7ec:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 8120 	beq.w	800da36 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x558>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800d7f6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d7fa:	3358      	adds	r3, #88	@ 0x58
 800d7fc:	443b      	add	r3, r7
 800d7fe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d802:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800d806:	e110      	b.n	800da2a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x54c>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800d808:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d80c:	005b      	lsls	r3, r3, #1
 800d80e:	3358      	adds	r3, #88	@ 0x58
 800d810:	443b      	add	r3, r7
 800d812:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800d816:	461a      	mov	r2, r3
 800d818:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800d81c:	fa42 f303 	asr.w	r3, r2, r3
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80c8 	beq.w	800d9ba <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4dc>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800d82a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d82e:	f003 0307 	and.w	r3, r3, #7
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800d838:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10a      	bne.n	800d856 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x378>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800d840:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d844:	08db      	lsrs	r3, r3, #3
 800d846:	b2db      	uxtb	r3, r3
 800d848:	3358      	adds	r3, #88	@ 0x58
 800d84a:	443b      	add	r3, r7
 800d84c:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800d850:	f803 2c14 	strb.w	r2, [r3, #-20]
 800d854:	e047      	b.n	800d8e6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800d856:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d85a:	08db      	lsrs	r3, r3, #3
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	3358      	adds	r3, #88	@ 0x58
 800d860:	443b      	add	r3, r7
 800d862:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800d866:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d86a:	f1c3 0308 	rsb	r3, r3, #8
 800d86e:	21ff      	movs	r1, #255	@ 0xff
 800d870:	fa41 f303 	asr.w	r3, r1, r3
 800d874:	b2db      	uxtb	r3, r3
 800d876:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800d87a:	08c9      	lsrs	r1, r1, #3
 800d87c:	b2c9      	uxtb	r1, r1
 800d87e:	4013      	ands	r3, r2
 800d880:	b2da      	uxtb	r2, r3
 800d882:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800d886:	443b      	add	r3, r7
 800d888:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800d88c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d890:	08db      	lsrs	r3, r3, #3
 800d892:	b2db      	uxtb	r3, r3
 800d894:	3358      	adds	r3, #88	@ 0x58
 800d896:	443b      	add	r3, r7
 800d898:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800d89c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800d8a0:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800d8a4:	408b      	lsls	r3, r1
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800d8ac:	08c9      	lsrs	r1, r1, #3
 800d8ae:	b2c9      	uxtb	r1, r1
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800d8b8:	443b      	add	r3, r7
 800d8ba:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800d8be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	d90f      	bls.n	800d8e6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800d8c6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800d8ca:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d8ce:	fa43 f202 	asr.w	r2, r3, r2
 800d8d2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d8d6:	08db      	lsrs	r3, r3, #3
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	3301      	adds	r3, #1
 800d8dc:	b2d2      	uxtb	r2, r2
 800d8de:	3358      	adds	r3, #88	@ 0x58
 800d8e0:	443b      	add	r3, r7
 800d8e2:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800d8e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7f9b      	ldrb	r3, [r3, #30]
 800d8f4:	f043 0310 	orr.w	r3, r3, #16
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800d8fe:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	3358      	adds	r3, #88	@ 0x58
 800d906:	443b      	add	r3, r7
 800d908:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800d90c:	b21a      	sxth	r2, r3
 800d90e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800d912:	2101      	movs	r1, #1
 800d914:	fa01 f303 	lsl.w	r3, r1, r3
 800d918:	b21b      	sxth	r3, r3
 800d91a:	43db      	mvns	r3, r3
 800d91c:	b21b      	sxth	r3, r3
 800d91e:	4013      	ands	r3, r2
 800d920:	b21a      	sxth	r2, r3
 800d922:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d926:	b292      	uxth	r2, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	3358      	adds	r3, #88	@ 0x58
 800d92c:	443b      	add	r3, r7
 800d92e:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800d932:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800d936:	2b0f      	cmp	r3, #15
 800d938:	d124      	bne.n	800d984 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a6>
                                    {
                                        bCount[bLevel] = 0U;
 800d93a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d93e:	3358      	adds	r3, #88	@ 0x58
 800d940:	443b      	add	r3, r7
 800d942:	2200      	movs	r2, #0
 800d944:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800d948:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	3358      	adds	r3, #88	@ 0x58
 800d950:	443b      	add	r3, r7
 800d952:	2200      	movs	r2, #0
 800d954:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800d958:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d103      	bne.n	800d968 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x48a>
                                        {
                                            bEnd = 1;
 800d960:	2301      	movs	r3, #1
 800d962:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800d966:	e098      	b.n	800da9a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                            bCount[bLevel] = bSlotCount;
 800d968:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d96c:	3358      	adds	r3, #88	@ 0x58
 800d96e:	443b      	add	r3, r7
 800d970:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800d974:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800d978:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d97c:	3301      	adds	r3, #1
 800d97e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800d982:	e08a      	b.n	800da9a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                        bCount[bLevel] = bSlotCount;
 800d984:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d988:	3358      	adds	r3, #88	@ 0x58
 800d98a:	443b      	add	r3, r7
 800d98c:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800d990:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800d994:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d998:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800d99c:	443a      	add	r2, r7
 800d99e:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	b2d2      	uxtb	r2, r2
 800d9a6:	3358      	adds	r3, #88	@ 0x58
 800d9a8:	443b      	add	r3, r7
 800d9aa:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800d9ae:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800d9b8:	e06f      	b.n	800da9a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800d9ba:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800d9be:	2b0f      	cmp	r3, #15
 800d9c0:	d12e      	bne.n	800da20 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                    {
                                        if(bLevel == 0U)
 800d9c2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10a      	bne.n	800d9e0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x502>
                                        {
                                            bEnd = 1;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7f9b      	ldrb	r3, [r3, #30]
 800d9d4:	f023 0310 	bic.w	r3, r3, #16
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	779a      	strb	r2, [r3, #30]
 800d9de:	e01f      	b.n	800da20 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7f9b      	ldrb	r3, [r3, #30]
 800d9e4:	f023 0310 	bic.w	r3, r3, #16
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800d9ee:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800d9f2:	3b04      	subs	r3, #4
 800d9f4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800d9f8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	3358      	adds	r3, #88	@ 0x58
 800da00:	443b      	add	r3, r7
 800da02:	2200      	movs	r2, #0
 800da04:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800da08:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800da0c:	3358      	adds	r3, #88	@ 0x58
 800da0e:	443b      	add	r3, r7
 800da10:	2200      	movs	r2, #0
 800da12:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800da16:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800da1a:	3b01      	subs	r3, #1
 800da1c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800da20:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800da24:	3301      	adds	r3, #1
 800da26:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800da2a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800da2e:	2b0f      	cmp	r3, #15
 800da30:	f67f aeea 	bls.w	800d808 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x32a>
 800da34:	e031      	b.n	800da9a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800da36:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10a      	bne.n	800da54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x576>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7f9b      	ldrb	r3, [r3, #30]
 800da42:	f023 0310 	bic.w	r3, r3, #16
 800da46:	b2da      	uxtb	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800da4c:	2301      	movs	r3, #1
 800da4e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800da52:	e022      	b.n	800da9a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	7f9b      	ldrb	r3, [r3, #30]
 800da58:	f023 0310 	bic.w	r3, r3, #16
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800da62:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800da66:	3b04      	subs	r3, #4
 800da68:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800da6c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800da70:	005b      	lsls	r3, r3, #1
 800da72:	3358      	adds	r3, #88	@ 0x58
 800da74:	443b      	add	r3, r7
 800da76:	2200      	movs	r2, #0
 800da78:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800da7c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800da80:	3358      	adds	r3, #88	@ 0x58
 800da82:	443b      	add	r3, r7
 800da84:	2200      	movs	r2, #0
 800da86:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800da8a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800da8e:	3b01      	subs	r3, #1
 800da90:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800da94:	2301      	movs	r3, #1
 800da96:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800da9a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f47f ae9c 	bne.w	800d7dc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fe>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	7f9b      	ldrb	r3, [r3, #30]
 800daa8:	f003 0310 	and.w	r3, r3, #16
 800daac:	2b00      	cmp	r3, #0
 800daae:	d008      	beq.n	800dac2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e4>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	7b9b      	ldrb	r3, [r3, #14]
 800daba:	429a      	cmp	r2, r3
 800dabc:	f4ff adb6 	bcc.w	800d62c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800dac0:	e000      	b.n	800dac4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e6>
                    {
                        break;
 800dac2:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800dac4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d0f1      	beq.n	800dab0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800dacc:	e002      	b.n	800dad4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f6>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800dace:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dad2:	e008      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d001      	beq.n	800dae2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    {
        return PH_ERR_SUCCESS;
 800dade:	2300      	movs	r3, #0
 800dae0:	e001      	b.n	800dae6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800dae2:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	375c      	adds	r7, #92	@ 0x5c
 800daea:	46bd      	mov	sp, r7
 800daec:	bd90      	pop	{r4, r7, pc}

0800daee <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	460b      	mov	r3, r1
 800daf8:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800dafa:	237f      	movs	r3, #127	@ 0x7f
 800dafc:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800db04:	78fa      	ldrb	r2, [r7, #3]
 800db06:	429a      	cmp	r2, r3
 800db08:	d202      	bcs.n	800db10 <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800db0a:	78fb      	ldrb	r3, [r7, #3]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800db10:	f244 0321 	movw	r3, #16417	@ 0x4021
 800db14:	e026      	b.n	800db64 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800db1a:	78fa      	ldrb	r2, [r7, #3]
 800db1c:	4613      	mov	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	4413      	add	r3, r2
 800db22:	33d8      	adds	r3, #216	@ 0xd8
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	4413      	add	r3, r2
 800db28:	330b      	adds	r3, #11
 800db2a:	2208      	movs	r2, #8
 800db2c:	4619      	mov	r1, r3
 800db2e:	f00c fd87 	bl	801a640 <phpalSli15693_Sw_SetSerialNo>
 800db32:	4603      	mov	r3, r0
 800db34:	81fb      	strh	r3, [r7, #14]
 800db36:	89fb      	ldrh	r3, [r7, #14]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800db3c:	89fb      	ldrh	r3, [r7, #14]
 800db3e:	e011      	b.n	800db64 <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800db46:	2b10      	cmp	r3, #16
 800db48:	d10b      	bne.n	800db62 <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db4e:	4618      	mov	r0, r3
 800db50:	f00c fc0e 	bl	801a370 <phpalSli15693_Sw_Select>
 800db54:	4603      	mov	r3, r0
 800db56:	81fb      	strh	r3, [r7, #14]
 800db58:	89fb      	ldrh	r3, [r7, #14]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800db5e:	89fb      	ldrh	r3, [r7, #14]
 800db60:	e000      	b.n	800db64 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800db62:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	460b      	mov	r3, r1
 800db76:	607a      	str	r2, [r7, #4]
 800db78:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800db7a:	897b      	ldrh	r3, [r7, #10]
 800db7c:	2b0c      	cmp	r3, #12
 800db7e:	d002      	beq.n	800db86 <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800db80:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800db84:	e014      	b.n	800dbb0 <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <phalFelica_Sw_Init+0x24>
 800db8c:	2321      	movs	r3, #33	@ 0x21
 800db8e:	e00f      	b.n	800dbb0 <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <phalFelica_Sw_Init+0x2e>
 800db96:	2321      	movs	r3, #33	@ 0x21
 800db98:	e00a      	b.n	800dbb0 <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f241 4201 	movw	r2, #5121	@ 0x1401
 800dba0:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800dbca:	897b      	ldrh	r3, [r7, #10]
 800dbcc:	2b0c      	cmp	r3, #12
 800dbce:	d002      	beq.n	800dbd6 <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800dbd0:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800dbd4:	e01a      	b.n	800dc0c <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d101      	bne.n	800dbe0 <phalI18000p3m3_Sw_Init+0x24>
 800dbdc:	2321      	movs	r3, #33	@ 0x21
 800dbde:	e015      	b.n	800dc0c <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <phalI18000p3m3_Sw_Init+0x2e>
 800dbe6:	2321      	movs	r3, #33	@ 0x21
 800dbe8:	e010      	b.n	800dc0c <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f641 0201 	movw	r2, #6145	@ 0x1801
 800dbf0:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	3308      	adds	r3, #8
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	8812      	ldrh	r2, [r2, #0]
 800dc2a:	b292      	uxth	r2, r2
 800dc2c:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2201      	movs	r2, #1
 800dc32:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <phalICode_Sw_Init+0x1c>
 800dc58:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800dc5c:	e026      	b.n	800dcac <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <phalICode_Sw_Init+0x28>
 800dc64:	f241 5321 	movw	r3, #5409	@ 0x1521
 800dc68:	e020      	b.n	800dcac <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800dc6a:	897b      	ldrh	r3, [r7, #10]
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	d002      	beq.n	800dc76 <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800dc70:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800dc74:	e01a      	b.n	800dcac <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f241 5201 	movw	r2, #5377	@ 0x1501
 800dc7c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	69fa      	ldr	r2, [r7, #28]
 800dc94:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3314      	adds	r3, #20
 800dca0:	220a      	movs	r2, #10
 800dca2:	2100      	movs	r1, #0
 800dca4:	4618      	mov	r0, r3
 800dca6:	f013 ffa5 	bl	8021bf4 <memset>

    return PH_ERR_SUCCESS;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	607a      	str	r2, [r7, #4]
 800dcbe:	603b      	str	r3, [r7, #0]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800dcc4:	897b      	ldrh	r3, [r7, #10]
 800dcc6:	2ba8      	cmp	r3, #168	@ 0xa8
 800dcc8:	d002      	beq.n	800dcd0 <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800dcca:	f242 6320 	movw	r3, #9760	@ 0x2620
 800dcce:	e0a1      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <phalMfNtag42XDna_Sw_Init+0x28>
 800dcd6:	f242 6320 	movw	r3, #9760	@ 0x2620
 800dcda:	e09b      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d102      	bne.n	800dce8 <phalMfNtag42XDna_Sw_Init+0x34>
 800dce2:	f242 6321 	movw	r3, #9761	@ 0x2621
 800dce6:	e095      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d102      	bne.n	800dcf4 <phalMfNtag42XDna_Sw_Init+0x40>
 800dcee:	f242 6321 	movw	r3, #9761	@ 0x2621
 800dcf2:	e08f      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d102      	bne.n	800dd00 <phalMfNtag42XDna_Sw_Init+0x4c>
 800dcfa:	f242 6321 	movw	r3, #9761	@ 0x2621
 800dcfe:	e089      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d102      	bne.n	800dd0c <phalMfNtag42XDna_Sw_Init+0x58>
 800dd06:	f242 6321 	movw	r3, #9761	@ 0x2621
 800dd0a:	e083      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d102      	bne.n	800dd18 <phalMfNtag42XDna_Sw_Init+0x64>
 800dd12:	f242 6321 	movw	r3, #9761	@ 0x2621
 800dd16:	e07d      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800dd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d102      	bne.n	800dd24 <phalMfNtag42XDna_Sw_Init+0x70>
 800dd1e:	f242 6321 	movw	r3, #9761	@ 0x2621
 800dd22:	e077      	b.n	800de14 <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f242 6201 	movw	r2, #9729	@ 0x2601
 800dd2a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	69ba      	ldr	r2, [r7, #24]
 800dd3c:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	69fa      	ldr	r2, [r7, #28]
 800dd42:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6a3a      	ldr	r2, [r7, #32]
 800dd48:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd4e:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f246 3263 	movw	r2, #25443	@ 0x6363
 800dd56:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd60:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	331c      	adds	r3, #28
 800dd66:	2218      	movs	r2, #24
 800dd68:	2100      	movs	r1, #0
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f013 ff42 	bl	8021bf4 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	22ff      	movs	r2, #255	@ 0xff
 800dd74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	3335      	adds	r3, #53	@ 0x35
 800dd7c:	2210      	movs	r2, #16
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f013 ff37 	bl	8021bf4 <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3346      	adds	r3, #70	@ 0x46
 800dd8a:	2203      	movs	r2, #3
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f013 ff30 	bl	8021bf4 <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	22ff      	movs	r2, #255	@ 0xff
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	22ff      	movs	r2, #255	@ 0xff
 800dda8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	335e      	adds	r3, #94	@ 0x5e
 800ddce:	2204      	movs	r2, #4
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f013 ff0e 	bl	8021bf4 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3362      	adds	r3, #98	@ 0x62
 800dddc:	2210      	movs	r2, #16
 800ddde:	2100      	movs	r1, #0
 800dde0:	4618      	mov	r0, r3
 800dde2:	f013 ff07 	bl	8021bf4 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3382      	adds	r3, #130	@ 0x82
 800ddea:	2210      	movs	r2, #16
 800ddec:	2100      	movs	r1, #0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f013 ff00 	bl	8021bf4 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	3393      	adds	r3, #147	@ 0x93
 800de00:	2210      	movs	r2, #16
 800de02:	2100      	movs	r1, #0
 800de04:	4618      	mov	r0, r3
 800de06:	f013 fef5 	bl	8021bf4 <memset>
    pDataParams->bLastBlockIndex = 0;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	607a      	str	r2, [r7, #4]
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	460b      	mov	r3, r1
 800de2a:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800de2c:	897b      	ldrh	r3, [r7, #10]
 800de2e:	2b0c      	cmp	r3, #12
 800de30:	d002      	beq.n	800de38 <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800de32:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800de36:	e014      	b.n	800de62 <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <phalMfc_Sw_Init+0x26>
 800de3e:	2321      	movs	r3, #33	@ 0x21
 800de40:	e00f      	b.n	800de62 <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <phalMfc_Sw_Init+0x30>
 800de48:	2321      	movs	r3, #33	@ 0x21
 800de4a:	e00a      	b.n	800de62 <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f241 0201 	movw	r2, #4097	@ 0x1001
 800de52:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b084      	sub	sp, #16
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	607a      	str	r2, [r7, #4]
 800de78:	603b      	str	r3, [r7, #0]
 800de7a:	460b      	mov	r3, r1
 800de7c:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800de7e:	897b      	ldrh	r3, [r7, #10]
 800de80:	2b68      	cmp	r3, #104	@ 0x68
 800de82:	d002      	beq.n	800de8a <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800de84:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800de88:	e057      	b.n	800df3a <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <phalMfdf_Sw_Init+0x26>
 800de90:	2321      	movs	r3, #33	@ 0x21
 800de92:	e052      	b.n	800df3a <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <phalMfdf_Sw_Init+0x30>
 800de9a:	2321      	movs	r3, #33	@ 0x21
 800de9c:	e04d      	b.n	800df3a <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f641 1201 	movw	r2, #6401	@ 0x1901
 800dea4:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	69ba      	ldr	r2, [r7, #24]
 800deb6:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	69fa      	ldr	r2, [r7, #28]
 800debc:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6a3a      	ldr	r2, [r7, #32]
 800deca:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f246 3263 	movw	r2, #25443	@ 0x6363
 800ded2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f04f 32ff 	mov.w	r2, #4294967295
 800dedc:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3318      	adds	r3, #24
 800dee2:	2218      	movs	r2, #24
 800dee4:	2100      	movs	r1, #0
 800dee6:	4618      	mov	r0, r3
 800dee8:	f013 fe84 	bl	8021bf4 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	22ff      	movs	r2, #255	@ 0xff
 800def0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3331      	adds	r3, #49	@ 0x31
 800def8:	2210      	movs	r2, #16
 800defa:	2100      	movs	r1, #0
 800defc:	4618      	mov	r0, r3
 800defe:	f013 fe79 	bl	8021bf4 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3342      	adds	r3, #66	@ 0x42
 800df06:	2203      	movs	r2, #3
 800df08:	2100      	movs	r1, #0
 800df0a:	4618      	mov	r0, r3
 800df0c:	f013 fe72 	bl	8021bf4 <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	22ff      	movs	r2, #255	@ 0xff
 800df14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	22ff      	movs	r2, #255	@ 0xff
 800df24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	60f8      	str	r0, [r7, #12]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
 800df4e:	460b      	mov	r3, r1
 800df50:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800df52:	897b      	ldrh	r3, [r7, #10]
 800df54:	2bb4      	cmp	r3, #180	@ 0xb4
 800df56:	d002      	beq.n	800df5e <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800df58:	f242 0320 	movw	r3, #8224	@ 0x2020
 800df5c:	e09f      	b.n	800e09e <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d102      	bne.n	800df6a <phalMfdfEVx_Sw_Init+0x28>
 800df64:	f242 0320 	movw	r3, #8224	@ 0x2020
 800df68:	e099      	b.n	800e09e <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d102      	bne.n	800df76 <phalMfdfEVx_Sw_Init+0x34>
 800df70:	f242 0321 	movw	r3, #8225	@ 0x2021
 800df74:	e093      	b.n	800e09e <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800df76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d102      	bne.n	800df82 <phalMfdfEVx_Sw_Init+0x40>
 800df7c:	f242 0321 	movw	r3, #8225	@ 0x2021
 800df80:	e08d      	b.n	800e09e <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800df82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df84:	2b00      	cmp	r3, #0
 800df86:	d102      	bne.n	800df8e <phalMfdfEVx_Sw_Init+0x4c>
 800df88:	f242 0321 	movw	r3, #8225	@ 0x2021
 800df8c:	e087      	b.n	800e09e <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f242 0201 	movw	r2, #8193	@ 0x2001
 800df94:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	69ba      	ldr	r2, [r7, #24]
 800dfa6:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	69fa      	ldr	r2, [r7, #28]
 800dfac:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6a3a      	ldr	r2, [r7, #32]
 800dfb2:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfc8:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f246 3263 	movw	r2, #25443	@ 0x6363
 800dfd0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfda:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	331c      	adds	r3, #28
 800dfe0:	2218      	movs	r2, #24
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f013 fe05 	bl	8021bf4 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	22ff      	movs	r2, #255	@ 0xff
 800dfee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3335      	adds	r3, #53	@ 0x35
 800dff6:	2210      	movs	r2, #16
 800dff8:	2100      	movs	r1, #0
 800dffa:	4618      	mov	r0, r3
 800dffc:	f013 fdfa 	bl	8021bf4 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	3347      	adds	r3, #71	@ 0x47
 800e004:	2203      	movs	r2, #3
 800e006:	2100      	movs	r1, #0
 800e008:	4618      	mov	r0, r3
 800e00a:	f013 fdf3 	bl	8021bf4 <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	22ff      	movs	r2, #255	@ 0xff
 800e012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	22ff      	movs	r2, #255	@ 0xff
 800e022:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	335e      	adds	r3, #94	@ 0x5e
 800e048:	2204      	movs	r2, #4
 800e04a:	2100      	movs	r1, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f013 fdd1 	bl	8021bf4 <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3362      	adds	r3, #98	@ 0x62
 800e056:	2210      	movs	r2, #16
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f013 fdca 	bl	8021bf4 <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3372      	adds	r3, #114	@ 0x72
 800e064:	2210      	movs	r2, #16
 800e066:	2100      	movs	r1, #0
 800e068:	4618      	mov	r0, r3
 800e06a:	f013 fdc3 	bl	8021bf4 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	3383      	adds	r3, #131	@ 0x83
 800e07a:	2210      	movs	r2, #16
 800e07c:	2100      	movs	r1, #0
 800e07e:	4618      	mov	r0, r3
 800e080:	f013 fdb8 	bl	8021bf4 <memset>
    pDataParams->bLastBlockIndex = 0;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	22ff      	movs	r2, #255	@ 0xff
 800e090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b084      	sub	sp, #16
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	60f8      	str	r0, [r7, #12]
 800e0ae:	607a      	str	r2, [r7, #4]
 800e0b0:	603b      	str	r3, [r7, #0]
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800e0b6:	897b      	ldrh	r3, [r7, #10]
 800e0b8:	2bac      	cmp	r3, #172	@ 0xac
 800e0ba:	d002      	beq.n	800e0c2 <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800e0bc:	f242 3320 	movw	r3, #8992	@ 0x2320
 800e0c0:	e0ab      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <phalMfdfLight_Sw_Init+0x28>
 800e0c8:	f242 3320 	movw	r3, #8992	@ 0x2320
 800e0cc:	e0a5      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <phalMfdfLight_Sw_Init+0x34>
 800e0d4:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e0d8:	e09f      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d102      	bne.n	800e0e6 <phalMfdfLight_Sw_Init+0x40>
 800e0e0:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e0e4:	e099      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <phalMfdfLight_Sw_Init+0x4c>
 800e0ec:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e0f0:	e093      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <phalMfdfLight_Sw_Init+0x58>
 800e0f8:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e0fc:	e08d      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800e0fe:	6a3b      	ldr	r3, [r7, #32]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <phalMfdfLight_Sw_Init+0x64>
 800e104:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e108:	e087      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <phalMfdfLight_Sw_Init+0x70>
 800e110:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e114:	e081      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800e116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d102      	bne.n	800e122 <phalMfdfLight_Sw_Init+0x7c>
 800e11c:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e120:	e07b      	b.n	800e21a <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f242 3201 	movw	r2, #8961	@ 0x2301
 800e128:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	69fa      	ldr	r2, [r7, #28]
 800e140:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6a3a      	ldr	r2, [r7, #32]
 800e146:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e14c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e154:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f246 3263 	movw	r2, #25443	@ 0x6363
 800e15c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f04f 32ff 	mov.w	r2, #4294967295
 800e166:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	331c      	adds	r3, #28
 800e16c:	2218      	movs	r2, #24
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f013 fd3f 	bl	8021bf4 <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	22ff      	movs	r2, #255	@ 0xff
 800e17a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	3335      	adds	r3, #53	@ 0x35
 800e182:	2210      	movs	r2, #16
 800e184:	2100      	movs	r1, #0
 800e186:	4618      	mov	r0, r3
 800e188:	f013 fd34 	bl	8021bf4 <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3346      	adds	r3, #70	@ 0x46
 800e190:	2203      	movs	r2, #3
 800e192:	2100      	movs	r1, #0
 800e194:	4618      	mov	r0, r3
 800e196:	f013 fd2d 	bl	8021bf4 <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	22ff      	movs	r2, #255	@ 0xff
 800e19e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	22ff      	movs	r2, #255	@ 0xff
 800e1ae:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	335e      	adds	r3, #94	@ 0x5e
 800e1d4:	2204      	movs	r2, #4
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f013 fd0b 	bl	8021bf4 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	3362      	adds	r3, #98	@ 0x62
 800e1e2:	2210      	movs	r2, #16
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f013 fd04 	bl	8021bf4 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	3382      	adds	r3, #130	@ 0x82
 800e1f0:	2210      	movs	r2, #16
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f013 fcfd 	bl	8021bf4 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3393      	adds	r3, #147	@ 0x93
 800e206:	2210      	movs	r2, #16
 800e208:	2100      	movs	r1, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f013 fcf2 	bl	8021bf4 <memset>
    pDataParams->bLastBlockIndex = 0;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b086      	sub	sp, #24
 800e226:	af00      	add	r7, sp, #0
 800e228:	60f8      	str	r0, [r7, #12]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
 800e22e:	460b      	mov	r3, r1
 800e230:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800e236:	897b      	ldrh	r3, [r7, #10]
 800e238:	2b84      	cmp	r3, #132	@ 0x84
 800e23a:	d002      	beq.n	800e242 <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800e23c:	f242 1320 	movw	r3, #8480	@ 0x2120
 800e240:	e063      	b.n	800e30a <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <phalMfpEVx_Sw_Init+0x2c>
 800e248:	f242 1320 	movw	r3, #8480	@ 0x2120
 800e24c:	e05d      	b.n	800e30a <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d102      	bne.n	800e25a <phalMfpEVx_Sw_Init+0x38>
 800e254:	f242 1321 	movw	r3, #8481	@ 0x2121
 800e258:	e057      	b.n	800e30a <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d102      	bne.n	800e266 <phalMfpEVx_Sw_Init+0x44>
 800e260:	f242 1321 	movw	r3, #8481	@ 0x2121
 800e264:	e051      	b.n	800e30a <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800e266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d102      	bne.n	800e272 <phalMfpEVx_Sw_Init+0x50>
 800e26c:	f242 1321 	movw	r3, #8481	@ 0x2121
 800e270:	e04b      	b.n	800e30a <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f242 1201 	movw	r2, #8449	@ 0x2101
 800e278:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6a3a      	ldr	r2, [r7, #32]
 800e28a:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e290:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e296:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e29c:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2a2:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2b8:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	3360      	adds	r3, #96	@ 0x60
 800e2ce:	2210      	movs	r2, #16
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f013 fc8e 	bl	8021bf4 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3370      	adds	r3, #112	@ 0x70
 800e2dc:	2210      	movs	r2, #16
 800e2de:	2100      	movs	r1, #0
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f013 fc87 	bl	8021bf4 <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	3350      	adds	r3, #80	@ 0x50
 800e2ea:	2210      	movs	r2, #16
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f013 fc80 	bl	8021bf4 <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f000 f80c 	bl	800e312 <phalMfpEVx_Sw_ResetSecMsgState>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	82fb      	strh	r3, [r7, #22]
 800e2fe:	8afb      	ldrh	r3, [r7, #22]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <phalMfpEVx_Sw_Init+0xe6>
 800e304:	8afb      	ldrh	r3, [r7, #22]
 800e306:	e000      	b.n	800e30a <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e348:	2b03      	cmp	r3, #3
 800e34a:	d009      	beq.n	800e360 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800e352:	2b02      	cmp	r3, #2
 800e354:	d004      	beq.n	800e360 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800e35c:	2b05      	cmp	r3, #5
 800e35e:	d104      	bne.n	800e36a <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2205      	movs	r2, #5
 800e364:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800e368:	e012      	b.n	800e390 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e370:	2b04      	cmp	r3, #4
 800e372:	d004      	beq.n	800e37e <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d104      	bne.n	800e388 <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2204      	movs	r2, #4
 800e382:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800e386:	e003      	b.n	800e390 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3350      	adds	r3, #80	@ 0x50
 800e394:	2210      	movs	r2, #16
 800e396:	2100      	movs	r1, #0
 800e398:	4618      	mov	r0, r3
 800e39a:	f013 fc2b 	bl	8021bf4 <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3360      	adds	r3, #96	@ 0x60
 800e3a2:	2210      	movs	r2, #16
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f013 fc24 	bl	8021bf4 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3370      	adds	r3, #112	@ 0x70
 800e3b0:	2210      	movs	r2, #16
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f013 fc1d 	bl	8021bf4 <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	332a      	adds	r3, #42	@ 0x2a
 800e3be:	2204      	movs	r2, #4
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f013 fc16 	bl	8021bf4 <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	2104      	movs	r1, #4
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fa fb48 	bl	8008a64 <phTMIUtils_ActivateTMICollection>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a1b      	ldr	r3, [r3, #32]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d009      	beq.n	800e3f4 <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a18      	ldr	r0, [r3, #32]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	3370      	adds	r3, #112	@ 0x70
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	f000 fa8b 	bl	800e906 <phalVca_SetSessionKeyUtility>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800e3f4:	89fb      	ldrh	r3, [r7, #14]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00b      	beq.n	800e412 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800e3fa:	89fb      	ldrh	r3, [r7, #14]
 800e3fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e400:	2b00      	cmp	r3, #0
 800e402:	d106      	bne.n	800e412 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800e404:	89fb      	ldrh	r3, [r7, #14]
 800e406:	b2db      	uxtb	r3, r3
 800e408:	b29b      	uxth	r3, r3
 800e40a:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800e40e:	b29b      	uxth	r3, r3
 800e410:	e000      	b.n	800e414 <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800e412:	89fb      	ldrh	r3, [r7, #14]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	607a      	str	r2, [r7, #4]
 800e426:	603b      	str	r3, [r7, #0]
 800e428:	460b      	mov	r3, r1
 800e42a:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800e42c:	897b      	ldrh	r3, [r7, #10]
 800e42e:	2b1c      	cmp	r3, #28
 800e430:	d002      	beq.n	800e438 <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800e432:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800e436:	e026      	b.n	800e486 <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <phalMful_Sw_Init+0x26>
 800e43e:	2321      	movs	r3, #33	@ 0x21
 800e440:	e021      	b.n	800e486 <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d101      	bne.n	800e44c <phalMful_Sw_Init+0x30>
 800e448:	2321      	movs	r3, #33	@ 0x21
 800e44a:	e01c      	b.n	800e486 <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f241 1201 	movw	r2, #4353	@ 0x1101
 800e452:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	69fa      	ldr	r2, [r7, #28]
 800e46a:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	22ff      	movs	r2, #255	@ 0xff
 800e470:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2200      	movs	r2, #0
 800e482:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3714      	adds	r7, #20
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800e492:	b480      	push	{r7}
 800e494:	b085      	sub	sp, #20
 800e496:	af00      	add	r7, sp, #0
 800e498:	60f8      	str	r0, [r7, #12]
 800e49a:	460b      	mov	r3, r1
 800e49c:	607a      	str	r2, [r7, #4]
 800e49e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800e4a0:	897b      	ldrh	r3, [r7, #10]
 800e4a2:	2b10      	cmp	r3, #16
 800e4a4:	d002      	beq.n	800e4ac <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800e4a6:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800e4aa:	e011      	b.n	800e4d0 <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <phalT1T_Sw_Init+0x24>
 800e4b2:	2321      	movs	r3, #33	@ 0x21
 800e4b4:	e00c      	b.n	800e4d0 <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <phalT1T_Sw_Init+0x2e>
 800e4bc:	2321      	movs	r3, #33	@ 0x21
 800e4be:	e007      	b.n	800e4d0 <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800e4c6:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3714      	adds	r7, #20
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08c      	sub	sp, #48	@ 0x30
 800e4e0:	af02      	add	r7, sp, #8
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800e4ec:	2307      	movs	r3, #7
 800e4ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800e4f4:	2378      	movs	r3, #120	@ 0x78
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	f107 0318 	add.w	r3, r7, #24
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	460a      	mov	r2, r1
 800e500:	801a      	strh	r2, [r3, #0]
 800e502:	460a      	mov	r2, r1
 800e504:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	f240 1223 	movw	r2, #291	@ 0x123
 800e50e:	2103      	movs	r1, #3
 800e510:	4618      	mov	r0, r3
 800e512:	f006 ffda 	bl	80154ca <phpalI14443p3a_Sw_SetConfig>
 800e516:	4603      	mov	r3, r0
 800e518:	843b      	strh	r3, [r7, #32]
 800e51a:	8c3b      	ldrh	r3, [r7, #32]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <phalT1T_Sw_ReadUID+0x48>
 800e520:	8c3b      	ldrh	r3, [r7, #32]
 800e522:	e05c      	b.n	800e5de <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6858      	ldr	r0, [r3, #4]
 800e528:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800e52a:	f107 0214 	add.w	r2, r7, #20
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	f107 031c 	add.w	r3, r7, #28
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	460b      	mov	r3, r1
 800e53a:	2100      	movs	r1, #0
 800e53c:	f007 fc70 	bl	8015e20 <phpalI14443p3a_Sw_Exchange>
 800e540:	4603      	mov	r3, r0
 800e542:	843b      	strh	r3, [r7, #32]
 800e544:	8c3b      	ldrh	r3, [r7, #32]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <phalT1T_Sw_ReadUID+0x72>
 800e54a:	8c3b      	ldrh	r3, [r7, #32]
 800e54c:	e047      	b.n	800e5de <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	7d1b      	ldrb	r3, [r3, #20]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d10c      	bne.n	800e572 <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	881b      	ldrh	r3, [r3, #0]
 800e55c:	2b06      	cmp	r3, #6
 800e55e:	d105      	bne.n	800e56c <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d109      	bne.n	800e580 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800e56c:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800e570:	e035      	b.n	800e5de <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	2b06      	cmp	r3, #6
 800e578:	d002      	beq.n	800e580 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800e57a:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800e57e:	e02e      	b.n	800e5de <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	781a      	ldrb	r2, [r3, #0]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	785a      	ldrb	r2, [r3, #1]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800e590:	2300      	movs	r3, #0
 800e592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e596:	e01a      	b.n	800e5ce <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800e598:	69fa      	ldr	r2, [r7, #28]
 800e59a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e59e:	3302      	adds	r3, #2
 800e5a0:	441a      	add	r2, r3
 800e5a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5a6:	7811      	ldrb	r1, [r2, #0]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	460a      	mov	r2, r1
 800e5ae:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800e5b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5b8:	68b9      	ldr	r1, [r7, #8]
 800e5ba:	440b      	add	r3, r1
 800e5bc:	68f9      	ldr	r1, [r7, #12]
 800e5be:	440a      	add	r2, r1
 800e5c0:	7a92      	ldrb	r2, [r2, #10]
 800e5c2:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800e5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5d2:	2b03      	cmp	r3, #3
 800e5d4:	d9e0      	bls.n	800e598 <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e5da:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3728      	adds	r7, #40	@ 0x28
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	60f8      	str	r0, [r7, #12]
 800e5ee:	607a      	str	r2, [r7, #4]
 800e5f0:	603b      	str	r3, [r7, #0]
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800e5f6:	897b      	ldrh	r3, [r7, #10]
 800e5f8:	2b80      	cmp	r3, #128	@ 0x80
 800e5fa:	d002      	beq.n	800e602 <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800e5fc:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800e600:	e01e      	b.n	800e640 <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <phalTop_Sw_Init+0x26>
 800e608:	2321      	movs	r3, #33	@ 0x21
 800e60a:	e019      	b.n	800e640 <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800e612:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	69fa      	ldr	r2, [r7, #28]
 800e62a:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6a3a      	ldr	r2, [r7, #32]
 800e630:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e636:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 f805 	bl	800e648 <phalTop_Sw_Reset>
 800e63e:	4603      	mov	r3, r0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	3328      	adds	r3, #40	@ 0x28
 800e672:	2258      	movs	r2, #88	@ 0x58
 800e674:	2100      	movs	r1, #0
 800e676:	4618      	mov	r0, r3
 800e678:	f013 fabc 	bl	8021bf4 <memset>

    return PH_ERR_SUCCESS;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800e686:	b480      	push	{r7}
 800e688:	b085      	sub	sp, #20
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	603b      	str	r3, [r7, #0]
 800e692:	460b      	mov	r3, r1
 800e694:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800e696:	897b      	ldrh	r3, [r7, #10]
 800e698:	2b54      	cmp	r3, #84	@ 0x54
 800e69a:	d002      	beq.n	800e6a2 <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800e69c:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e6a0:	e06d      	b.n	800e77e <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d102      	bne.n	800e6ae <phalVca_Sw_Init+0x28>
 800e6a8:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e6ac:	e067      	b.n	800e77e <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d102      	bne.n	800e6ba <phalVca_Sw_Init+0x34>
 800e6b4:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e6b8:	e061      	b.n	800e77e <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d102      	bne.n	800e6c6 <phalVca_Sw_Init+0x40>
 800e6c0:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e6c4:	e05b      	b.n	800e77e <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <phalVca_Sw_Init+0x4c>
 800e6cc:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e6d0:	e055      	b.n	800e77e <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d102      	bne.n	800e6de <phalVca_Sw_Init+0x58>
 800e6d8:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e6dc:	e04f      	b.n	800e77e <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800e6de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d005      	beq.n	800e6f0 <phalVca_Sw_Init+0x6a>
 800e6e4:	6a3b      	ldr	r3, [r7, #32]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d102      	bne.n	800e6f0 <phalVca_Sw_Init+0x6a>
 800e6ea:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e6ee:	e046      	b.n	800e77e <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800e6f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d005      	beq.n	800e702 <phalVca_Sw_Init+0x7c>
 800e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d102      	bne.n	800e702 <phalVca_Sw_Init+0x7c>
 800e6fc:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e700:	e03d      	b.n	800e77e <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f241 3201 	movw	r2, #4865	@ 0x1301
 800e708:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e726:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800e72c:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6a3a      	ldr	r2, [r7, #32]
 800e732:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e73e:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	69fa      	ldr	r2, [r7, #28]
 800e744:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr
	...

0800e78c <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	4613      	mov	r3, r2
 800e798:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	2bff      	cmp	r3, #255	@ 0xff
 800e79e:	d07d      	beq.n	800e89c <phalVca_Sw_SetSessionKeyUtility+0x110>
 800e7a0:	2bff      	cmp	r3, #255	@ 0xff
 800e7a2:	f300 808c 	bgt.w	800e8be <phalVca_Sw_SetSessionKeyUtility+0x132>
 800e7a6:	2baa      	cmp	r3, #170	@ 0xaa
 800e7a8:	d04f      	beq.n	800e84a <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800e7aa:	2baa      	cmp	r3, #170	@ 0xaa
 800e7ac:	f300 8087 	bgt.w	800e8be <phalVca_Sw_SetSessionKeyUtility+0x132>
 800e7b0:	2b1a      	cmp	r3, #26
 800e7b2:	dc3d      	bgt.n	800e830 <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f2c0 8082 	blt.w	800e8be <phalVca_Sw_SetSessionKeyUtility+0x132>
 800e7ba:	2b1a      	cmp	r3, #26
 800e7bc:	d87f      	bhi.n	800e8be <phalVca_Sw_SetSessionKeyUtility+0x132>
 800e7be:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c4 <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800e7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c4:	0800e893 	.word	0x0800e893
 800e7c8:	0800e8bf 	.word	0x0800e8bf
 800e7cc:	0800e863 	.word	0x0800e863
 800e7d0:	0800e87b 	.word	0x0800e87b
 800e7d4:	0800e893 	.word	0x0800e893
 800e7d8:	0800e893 	.word	0x0800e893
 800e7dc:	0800e8bf 	.word	0x0800e8bf
 800e7e0:	0800e8bf 	.word	0x0800e8bf
 800e7e4:	0800e8bf 	.word	0x0800e8bf
 800e7e8:	0800e8bf 	.word	0x0800e8bf
 800e7ec:	0800e837 	.word	0x0800e837
 800e7f0:	0800e8bf 	.word	0x0800e8bf
 800e7f4:	0800e8bf 	.word	0x0800e8bf
 800e7f8:	0800e8bf 	.word	0x0800e8bf
 800e7fc:	0800e8bf 	.word	0x0800e8bf
 800e800:	0800e8bf 	.word	0x0800e8bf
 800e804:	0800e8bf 	.word	0x0800e8bf
 800e808:	0800e8bf 	.word	0x0800e8bf
 800e80c:	0800e8bf 	.word	0x0800e8bf
 800e810:	0800e8bf 	.word	0x0800e8bf
 800e814:	0800e8bf 	.word	0x0800e8bf
 800e818:	0800e8bf 	.word	0x0800e8bf
 800e81c:	0800e8bf 	.word	0x0800e8bf
 800e820:	0800e8bf 	.word	0x0800e8bf
 800e824:	0800e8bf 	.word	0x0800e8bf
 800e828:	0800e8bf 	.word	0x0800e8bf
 800e82c:	0800e841 	.word	0x0800e841
 800e830:	2b71      	cmp	r3, #113	@ 0x71
 800e832:	d038      	beq.n	800e8a6 <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800e834:	e043      	b.n	800e8be <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2204      	movs	r2, #4
 800e83a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800e83e:	e043      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2205      	movs	r2, #5
 800e844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800e848:	e03e      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2207      	movs	r2, #7
 800e84e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3328      	adds	r3, #40	@ 0x28
 800e856:	2220      	movs	r2, #32
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f013 fa5f 	bl	8021d1e <memcpy>
        break;
 800e860:	e032      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2208      	movs	r2, #8
 800e866:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	3328      	adds	r3, #40	@ 0x28
 800e86e:	2220      	movs	r2, #32
 800e870:	68b9      	ldr	r1, [r7, #8]
 800e872:	4618      	mov	r0, r3
 800e874:	f013 fa53 	bl	8021d1e <memcpy>
        break;
 800e878:	e026      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2209      	movs	r2, #9
 800e87e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	3328      	adds	r3, #40	@ 0x28
 800e886:	2220      	movs	r2, #32
 800e888:	68b9      	ldr	r1, [r7, #8]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f013 fa47 	bl	8021d1e <memcpy>
        break;
 800e890:	e01a      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2203      	movs	r2, #3
 800e896:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800e89a:	e015      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2203      	movs	r2, #3
 800e8a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800e8a4:	e010      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2206      	movs	r2, #6
 800e8aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3328      	adds	r3, #40	@ 0x28
 800e8b2:	2220      	movs	r2, #32
 800e8b4:	68b9      	ldr	r1, [r7, #8]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f013 fa31 	bl	8021d1e <memcpy>
        break;
 800e8bc:	e004      	b.n	800e8c8 <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800e8c6:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop

0800e8d4 <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <phalVca_Sw_SetApplicationType+0x14>
 800e8e4:	2321      	movs	r3, #33	@ 0x21
 800e8e6:	e008      	b.n	800e8fa <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d101      	bne.n	800e8f2 <phalVca_Sw_SetApplicationType+0x1e>
 800e8ee:	2321      	movs	r3, #33	@ 0x21
 800e8f0:	e003      	b.n	800e8fa <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800e8f8:	2300      	movs	r3, #0
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b086      	sub	sp, #24
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	4613      	mov	r3, r2
 800e912:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d102      	bne.n	800e920 <phalVca_SetSessionKeyUtility+0x1a>
 800e91a:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e91e:	e024      	b.n	800e96a <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d102      	bne.n	800e92c <phalVca_SetSessionKeyUtility+0x26>
 800e926:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e92a:	e01e      	b.n	800e96a <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e934:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800e938:	d004      	beq.n	800e944 <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800e93a:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e93e:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800e940:	8afb      	ldrh	r3, [r7, #22]
 800e942:	e012      	b.n	800e96a <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d108      	bne.n	800e960 <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800e94e:	79fb      	ldrb	r3, [r7, #7]
 800e950:	461a      	mov	r2, r3
 800e952:	68b9      	ldr	r1, [r7, #8]
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f7ff ff19 	bl	800e78c <phalVca_Sw_SetSessionKeyUtility>
 800e95a:	4603      	mov	r3, r0
 800e95c:	82fb      	strh	r3, [r7, #22]
            break;
 800e95e:	e003      	b.n	800e968 <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800e960:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e964:	82fb      	strh	r3, [r7, #22]
            break;
 800e966:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800e968:	8afb      	ldrh	r3, [r7, #22]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}

0800e972 <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <phalVca_SetApplicationType+0x16>
 800e982:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e986:	e022      	b.n	800e9ce <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <phalVca_SetApplicationType+0x22>
 800e98e:	f241 3321 	movw	r3, #4897	@ 0x1321
 800e992:	e01c      	b.n	800e9ce <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e99c:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800e9a0:	d004      	beq.n	800e9ac <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800e9a2:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e9a6:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800e9a8:	89fb      	ldrh	r3, [r7, #14]
 800e9aa:	e010      	b.n	800e9ce <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d106      	bne.n	800e9c4 <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7ff ff8b 	bl	800e8d4 <phalVca_Sw_SetApplicationType>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	81fb      	strh	r3, [r7, #14]
            break;
 800e9c2:	e003      	b.n	800e9cc <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800e9c4:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800e9c8:	81fb      	strh	r3, [r7, #14]
            break;
 800e9ca:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800e9cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b084      	sub	sp, #16
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	2108      	movs	r1, #8
 800e9f2:	f00c ff4f 	bl	801b894 <phOsal_EventPost>
}
 800e9f6:	bf00      	nop
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
	...

0800ea00 <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800ea04:	4807      	ldr	r0, [pc, #28]	@ (800ea24 <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800ea06:	f012 ffc9 	bl	802199c <puts>
    if(xEventHandle != NULL)
 800ea0a:	4b07      	ldr	r3, [pc, #28]	@ (800ea28 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d005      	beq.n	800ea1e <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800ea12:	2300      	movs	r3, #0
 800ea14:	2202      	movs	r2, #2
 800ea16:	2108      	movs	r1, #8
 800ea18:	4803      	ldr	r0, [pc, #12]	@ (800ea28 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800ea1a:	f00c ff3b 	bl	801b894 <phOsal_EventPost>
    }
}
 800ea1e:	bf00      	nop
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	0802505c 	.word	0x0802505c
 800ea28:	20001be0 	.word	0x20001be0

0800ea2c <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b088      	sub	sp, #32
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	607a      	str	r2, [r7, #4]
 800ea36:	603b      	str	r3, [r7, #0]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bFirmwareVer[2];
//    uint8_t    PH_MEMLOC_REM bPowerStatus[16];
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
    uint8_t    InitGearSize = 0x01;  // 1
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	76bb      	strb	r3, [r7, #26]
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800ea40:	897b      	ldrh	r3, [r7, #10]
 800ea42:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800ea46:	d002      	beq.n	800ea4e <phhalHw_Pn5180_Init+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800ea48:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800ea4c:	e1a2      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800ea4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d002      	beq.n	800ea5a <phhalHw_Pn5180_Init+0x2e>
 800ea54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d102      	bne.n	800ea60 <phhalHw_Pn5180_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800ea5a:	f240 2321 	movw	r3, #545	@ 0x221
 800ea5e:	e199      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d101      	bne.n	800ea6a <phhalHw_Pn5180_Init+0x3e>
 800ea66:	2321      	movs	r3, #33	@ 0x21
 800ea68:	e194      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pBalDataParams);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <phhalHw_Pn5180_Init+0x48>
 800ea70:	2321      	movs	r3, #33	@ 0x21
 800ea72:	e18f      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pTxBuffer);
 800ea74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <phhalHw_Pn5180_Init+0x52>
 800ea7a:	2321      	movs	r3, #33	@ 0x21
 800ea7c:	e18a      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pRxBuffer);
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d101      	bne.n	800ea88 <phhalHw_Pn5180_Init+0x5c>
 800ea84:	2321      	movs	r3, #33	@ 0x21
 800ea86:	e185      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800ea88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800ea90:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ea92:	3b01      	subs	r3, #1
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9c:	1c9a      	adds	r2, r3, #2
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800eaa2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800eaa4:	3b02      	subs	r3, #2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f240 220e 	movw	r2, #526	@ 0x20e
 800eab2:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2205      	movs	r2, #5
 800eb00:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2205      	movs	r2, #5
 800eb06:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2202      	movs	r2, #2
 800eb2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2203      	movs	r2, #3
 800eb58:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	4a81      	ldr	r2, [pc, #516]	@ (800ed9c <phhalHw_Pn5180_Init+0x370>)
 800eb96:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	4a81      	ldr	r2, [pc, #516]	@ (800eda0 <phhalHw_Pn5180_Init+0x374>)
 800eb9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
    }
#endif
    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800ebae:	f003 fc99 	bl	80124e4 <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	789b      	ldrb	r3, [r3, #2]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d11a      	bne.n	800ebf0 <phhalHw_Pn5180_Init+0x1c4>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800ebba:	2100      	movs	r1, #0
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f003 fcb9 	bl	8012534 <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	2102      	movs	r1, #2
 800ebc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ebca:	f00c fc75 	bl	801b4b8 <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	2102      	movs	r1, #2
 800ebd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ebd6:	f00c fc4b 	bl	801b470 <phDriver_PinRead>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d103      	bne.n	800ebe8 <phhalHw_Pn5180_Init+0x1bc>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800ebe8:	2101      	movs	r1, #1
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f003 fca2 	bl	8012534 <phhalHw_Pn5180_WriteSSEL>
    }

#endif
    HAL_Delay(1000);
 800ebf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ebf4:	f00c ff6e 	bl	801bad4 <HAL_Delay>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800ebf8:	f107 021c 	add.w	r2, r7, #28
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	2112      	movs	r1, #18
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f004 f877 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800ec06:	4603      	mov	r3, r0
 800ec08:	83fb      	strh	r3, [r7, #30]
 800ec0a:	8bfb      	ldrh	r3, [r7, #30]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <phhalHw_Pn5180_Init+0x1e8>
 800ec10:	8bfb      	ldrh	r3, [r7, #30]
 800ec12:	e0bf      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    printf("PN-Firmware = %02X %02X\n", bFirmwareVer[1], bFirmwareVer[0]);	// PN-Firmware = 04 00
 800ec14:	7f7b      	ldrb	r3, [r7, #29]
 800ec16:	4619      	mov	r1, r3
 800ec18:	7f3b      	ldrb	r3, [r7, #28]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4861      	ldr	r0, [pc, #388]	@ (800eda4 <phhalHw_Pn5180_Init+0x378>)
 800ec1e:	f012 fe4d 	bl	80218bc <iprintf>
    HAL_Delay(1000);
 800ec22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ec26:	f00c ff55 	bl	801bad4 <HAL_Delay>
    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800ec2a:	7f3b      	ldrb	r3, [r7, #28]
 800ec2c:	2bff      	cmp	r3, #255	@ 0xff
 800ec2e:	d105      	bne.n	800ec3c <phhalHw_Pn5180_Init+0x210>
 800ec30:	7f7b      	ldrb	r3, [r7, #29]
 800ec32:	2bff      	cmp	r3, #255	@ 0xff
 800ec34:	d102      	bne.n	800ec3c <phhalHw_Pn5180_Init+0x210>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800ec36:	f240 1301 	movw	r3, #257	@ 0x101
 800ec3a:	e0ab      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800ec42:	2301      	movs	r3, #1
 800ec44:	2117      	movs	r1, #23
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f004 f854 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	83fb      	strh	r3, [r7, #30]
 800ec50:	8bfb      	ldrh	r3, [r7, #30]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <phhalHw_Pn5180_Init+0x22e>
 800ec56:	8bfb      	ldrh	r3, [r7, #30]
 800ec58:	e09c      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800ec60:	b25b      	sxtb	r3, r3
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	da04      	bge.n	800ec70 <phhalHw_Pn5180_Init+0x244>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800ec6e:	e003      	b.n	800ec78 <phhalHw_Pn5180_Init+0x24c>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* add func ：Set Power Gear Size*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, 0x81, &InitGearSize, 1U));
 800ec78:	f107 021a 	add.w	r2, r7, #26
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	2181      	movs	r1, #129	@ 0x81
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f003 ffbf 	bl	8012c04 <phhalHw_Pn5180_Instr_WriteE2Prom>
 800ec86:	4603      	mov	r3, r0
 800ec88:	83fb      	strh	r3, [r7, #30]
 800ec8a:	8bfb      	ldrh	r3, [r7, #30]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <phhalHw_Pn5180_Init+0x268>
 800ec90:	8bfb      	ldrh	r3, [r7, #30]
 800ec92:	e07f      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800ec94:	f06f 0204 	mvn.w	r2, #4
 800ec98:	2101      	movs	r1, #1
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f003 fd82 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800eca0:	4603      	mov	r3, r0
 800eca2:	83fb      	strh	r3, [r7, #30]
 800eca4:	8bfb      	ldrh	r3, [r7, #30]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d001      	beq.n	800ecae <phhalHw_Pn5180_Init+0x282>
 800ecaa:	8bfb      	ldrh	r3, [r7, #30]
 800ecac:	e072      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800ecae:	4a3e      	ldr	r2, [pc, #248]	@ (800eda8 <phhalHw_Pn5180_Init+0x37c>)
 800ecb0:	2103      	movs	r1, #3
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f003 fc8a 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	83fb      	strh	r3, [r7, #30]
 800ecbc:	8bfb      	ldrh	r3, [r7, #30]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d001      	beq.n	800ecc6 <phhalHw_Pn5180_Init+0x29a>
 800ecc2:	8bfb      	ldrh	r3, [r7, #30]
 800ecc4:	e066      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>

    /* Create the event. */
//    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;  // 1
    pDataParams->HwEventObj.intialValue = 0U;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4610      	mov	r0, r2
 800ecde:	f00c fd43 	bl	801b768 <phOsal_EventCreate>
 800ece2:	4603      	mov	r3, r0
 800ece4:	83fb      	strh	r3, [r7, #30]
 800ece6:	8bfb      	ldrh	r3, [r7, #30]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d001      	beq.n	800ecf0 <phhalHw_Pn5180_Init+0x2c4>
 800ecec:	8bfb      	ldrh	r3, [r7, #30]
 800ecee:	e051      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	f00c fe02 	bl	801b904 <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800ed06:	4a29      	ldr	r2, [pc, #164]	@ (800edac <phhalHw_Pn5180_Init+0x380>)
 800ed08:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800ed0a:	7f7b      	ldrb	r3, [r7, #29]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800ed1a:	b21b      	sxth	r3, r3
 800ed1c:	021b      	lsls	r3, r3, #8
 800ed1e:	b21a      	sxth	r2, r3
 800ed20:	7f3b      	ldrb	r3, [r7, #28]
 800ed22:	b21b      	sxth	r3, r3
 800ed24:	4313      	orrs	r3, r2
 800ed26:	b21b      	sxth	r3, r3
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800ed36:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800ed3a:	d202      	bcs.n	800ed42 <phhalHw_Pn5180_Init+0x316>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800ed3c:	f240 230b 	movw	r3, #523	@ 0x20b
 800ed40:	e028      	b.n	800ed94 <phhalHw_Pn5180_Init+0x368>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800ed48:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800ed4c:	d321      	bcc.n	800ed92 <phhalHw_Pn5180_Init+0x366>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800ed4e:	f107 021b 	add.w	r2, r7, #27
 800ed52:	2301      	movs	r3, #1
 800ed54:	21e8      	movs	r1, #232	@ 0xe8
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f003 ffcc 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800ed5c:	7efb      	ldrb	r3, [r7, #27]
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d004      	beq.n	800ed70 <phhalHw_Pn5180_Init+0x344>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800ed66:	7efb      	ldrb	r3, [r7, #27]
 800ed68:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	d010      	beq.n	800ed92 <phhalHw_Pn5180_Init+0x366>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800ed70:	7efb      	ldrb	r3, [r7, #27]
 800ed72:	f023 0306 	bic.w	r3, r3, #6
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	76fb      	strb	r3, [r7, #27]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800ed7a:	7efb      	ldrb	r3, [r7, #27]
 800ed7c:	f043 0303 	orr.w	r3, r3, #3
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	76fb      	strb	r3, [r7, #27]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800ed84:	f107 021b 	add.w	r2, r7, #27
 800ed88:	2301      	movs	r3, #1
 800ed8a:	21e8      	movs	r1, #232	@ 0xe8
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f003 ff39 	bl	8012c04 <phhalHw_Pn5180_Instr_WriteE2Prom>
                    &bDigitalDelayCfg,
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }
    return PH_ERR_SUCCESS;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3720      	adds	r7, #32
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	0800e9d7 	.word	0x0800e9d7
 800eda0:	0800ea01 	.word	0x0800ea01
 800eda4:	0802506c 	.word	0x0802506c
 800eda8:	000fffff 	.word	0x000fffff
 800edac:	20001be0 	.word	0x20001be0

0800edb0 <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	460b      	mov	r3, r1
 800edba:	607a      	str	r2, [r7, #4]
 800edbc:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800edbe:	7afb      	ldrb	r3, [r7, #11]
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	4619      	mov	r1, r3
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f003 fc01 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800edca:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	460b      	mov	r3, r1
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800ede2:	7afb      	ldrb	r3, [r7, #11]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	4619      	mov	r1, r3
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f003 fe03 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 800edee:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	460b      	mov	r3, r1
 800ee02:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800ee04:	2200      	movs	r2, #0
 800ee06:	215e      	movs	r1, #94	@ 0x5e
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fd71 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	823b      	strh	r3, [r7, #16]
 800ee12:	8a3b      	ldrh	r3, [r7, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800ee18:	8a3b      	ldrh	r3, [r7, #16]
 800ee1a:	e1af      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800ee1c:	78fb      	ldrb	r3, [r7, #3]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00a      	beq.n	800ee38 <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	78fa      	ldrb	r2, [r7, #3]
 800ee26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800ee32:	2301      	movs	r3, #1
 800ee34:	767b      	strb	r3, [r7, #25]
 800ee36:	e001      	b.n	800ee3c <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	2b09      	cmp	r3, #9
 800ee6c:	f200 8104 	bhi.w	800f078 <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800ee70:	a201      	add	r2, pc, #4	@ (adr r2, 800ee78 <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800ee72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee76:	bf00      	nop
 800ee78:	0800eea1 	.word	0x0800eea1
 800ee7c:	0800eecb 	.word	0x0800eecb
 800ee80:	0800eef5 	.word	0x0800eef5
 800ee84:	0800f00f 	.word	0x0800f00f
 800ee88:	0800f079 	.word	0x0800f079
 800ee8c:	0800f039 	.word	0x0800f039
 800ee90:	0800ef71 	.word	0x0800ef71
 800ee94:	0800efab 	.word	0x0800efab
 800ee98:	0800efdd 	.word	0x0800efdd
 800ee9c:	0800ef33 	.word	0x0800ef33
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800eea0:	2280      	movs	r2, #128	@ 0x80
 800eea2:	2100      	movs	r1, #0
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f004 fa8b 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	823b      	strh	r3, [r7, #16]
 800eeae:	8a3b      	ldrh	r3, [r7, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800eeb4:	8a3b      	ldrh	r3, [r7, #16]
 800eeb6:	e161      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800eeb8:	4b99      	ldr	r3, [pc, #612]	@ (800f120 <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800eeba:	61fb      	str	r3, [r7, #28]
 800eebc:	230a      	movs	r3, #10
 800eebe:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800eec0:	2300      	movs	r3, #0
 800eec2:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800eec4:	2300      	movs	r3, #0
 800eec6:	827b      	strh	r3, [r7, #18]
        break;
 800eec8:	e0de      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800eeca:	2284      	movs	r2, #132	@ 0x84
 800eecc:	2104      	movs	r1, #4
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f004 fa76 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800eed4:	4603      	mov	r3, r0
 800eed6:	823b      	strh	r3, [r7, #16]
 800eed8:	8a3b      	ldrh	r3, [r7, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d001      	beq.n	800eee2 <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800eede:	8a3b      	ldrh	r3, [r7, #16]
 800eee0:	e14c      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800eee2:	4b90      	ldr	r3, [pc, #576]	@ (800f124 <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800eee4:	61fb      	str	r3, [r7, #28]
 800eee6:	230b      	movs	r3, #11
 800eee8:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800eeea:	2300      	movs	r3, #0
 800eeec:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800eeee:	2300      	movs	r3, #0
 800eef0:	827b      	strh	r3, [r7, #18]
        break;
 800eef2:	e0c9      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800eef4:	2288      	movs	r2, #136	@ 0x88
 800eef6:	2108      	movs	r1, #8
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f004 fa61 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800eefe:	4603      	mov	r3, r0
 800ef00:	823b      	strh	r3, [r7, #16]
 800ef02:	8a3b      	ldrh	r3, [r7, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d001      	beq.n	800ef0c <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800ef08:	8a3b      	ldrh	r3, [r7, #16]
 800ef0a:	e137      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800ef0c:	4b86      	ldr	r3, [pc, #536]	@ (800f128 <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800ef0e:	61fb      	str	r3, [r7, #28]
 800ef10:	230b      	movs	r3, #11
 800ef12:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ef14:	2301      	movs	r3, #1
 800ef16:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f004 fef1 	bl	8013d04 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800ef22:	4603      	mov	r3, r0
 800ef24:	823b      	strh	r3, [r7, #16]
 800ef26:	8a3b      	ldrh	r3, [r7, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 80a8 	beq.w	800f07e <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800ef2e:	8a3b      	ldrh	r3, [r7, #16]
 800ef30:	e124      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800ef32:	2289      	movs	r2, #137	@ 0x89
 800ef34:	2109      	movs	r1, #9
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f004 fa42 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	823b      	strh	r3, [r7, #16]
 800ef40:	8a3b      	ldrh	r3, [r7, #16]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800ef46:	8a3b      	ldrh	r3, [r7, #16]
 800ef48:	e118      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800ef4a:	4b78      	ldr	r3, [pc, #480]	@ (800f12c <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800ef4c:	61fb      	str	r3, [r7, #28]
 800ef4e:	230b      	movs	r3, #11
 800ef50:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ef52:	2302      	movs	r3, #2
 800ef54:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ef56:	2302      	movs	r3, #2
 800ef58:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f004 fed2 	bl	8013d04 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800ef60:	4603      	mov	r3, r0
 800ef62:	823b      	strh	r3, [r7, #16]
 800ef64:	8a3b      	ldrh	r3, [r7, #16]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f000 808b 	beq.w	800f082 <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800ef6c:	8a3b      	ldrh	r3, [r7, #16]
 800ef6e:	e105      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800ef70:	228a      	movs	r2, #138	@ 0x8a
 800ef72:	210a      	movs	r1, #10
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f004 fa23 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	823b      	strh	r3, [r7, #16]
 800ef7e:	8a3b      	ldrh	r3, [r7, #16]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d001      	beq.n	800ef88 <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800ef84:	8a3b      	ldrh	r3, [r7, #16]
 800ef86:	e0f9      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800ef88:	4b69      	ldr	r3, [pc, #420]	@ (800f130 <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800ef8a:	61fb      	str	r3, [r7, #28]
 800ef8c:	230b      	movs	r3, #11
 800ef8e:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800ef90:	2300      	movs	r3, #0
 800ef92:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800ef94:	2300      	movs	r3, #0
 800ef96:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2201      	movs	r2, #1
 800efa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800efa8:	e06e      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800efaa:	228b      	movs	r2, #139	@ 0x8b
 800efac:	210b      	movs	r1, #11
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f004 fa06 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800efb4:	4603      	mov	r3, r0
 800efb6:	823b      	strh	r3, [r7, #16]
 800efb8:	8a3b      	ldrh	r3, [r7, #16]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d001      	beq.n	800efc2 <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800efbe:	8a3b      	ldrh	r3, [r7, #16]
 800efc0:	e0dc      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800efc2:	4b5c      	ldr	r3, [pc, #368]	@ (800f134 <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800efc4:	61fb      	str	r3, [r7, #28]
 800efc6:	230b      	movs	r3, #11
 800efc8:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800efca:	2301      	movs	r3, #1
 800efcc:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800efce:	2301      	movs	r3, #1
 800efd0:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2201      	movs	r2, #1
 800efd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800efda:	e055      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800efdc:	228c      	movs	r2, #140	@ 0x8c
 800efde:	210c      	movs	r1, #12
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f004 f9ed 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800efe6:	4603      	mov	r3, r0
 800efe8:	823b      	strh	r3, [r7, #16]
 800efea:	8a3b      	ldrh	r3, [r7, #16]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800eff0:	8a3b      	ldrh	r3, [r7, #16]
 800eff2:	e0c3      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800eff4:	4b50      	ldr	r3, [pc, #320]	@ (800f138 <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800eff6:	61fb      	str	r3, [r7, #28]
 800eff8:	230b      	movs	r3, #11
 800effa:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800effc:	2302      	movs	r3, #2
 800effe:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800f000:	2302      	movs	r3, #2
 800f002:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800f00c:	e03c      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800f00e:	228d      	movs	r2, #141	@ 0x8d
 800f010:	210d      	movs	r1, #13
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f004 f9d4 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f018:	4603      	mov	r3, r0
 800f01a:	823b      	strh	r3, [r7, #16]
 800f01c:	8a3b      	ldrh	r3, [r7, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800f022:	8a3b      	ldrh	r3, [r7, #16]
 800f024:	e0aa      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800f026:	4b45      	ldr	r3, [pc, #276]	@ (800f13c <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800f028:	61fb      	str	r3, [r7, #28]
 800f02a:	230c      	movs	r3, #12
 800f02c:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800f02e:	230b      	movs	r3, #11
 800f030:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800f032:	230d      	movs	r3, #13
 800f034:	827b      	strh	r3, [r7, #18]

        break;
 800f036:	e027      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800f038:	2290      	movs	r2, #144	@ 0x90
 800f03a:	2110      	movs	r1, #16
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f004 f9bf 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f042:	4603      	mov	r3, r0
 800f044:	823b      	strh	r3, [r7, #16]
 800f046:	8a3b      	ldrh	r3, [r7, #16]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d001      	beq.n	800f050 <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800f04c:	8a3b      	ldrh	r3, [r7, #16]
 800f04e:	e095      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800f050:	4b3b      	ldr	r3, [pc, #236]	@ (800f140 <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800f052:	61fb      	str	r3, [r7, #28]
 800f054:	230c      	movs	r3, #12
 800f056:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800f058:	2311      	movs	r3, #17
 800f05a:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800f05c:	2313      	movs	r3, #19
 800f05e:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800f060:	2205      	movs	r2, #5
 800f062:	210e      	movs	r1, #14
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fc43 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f06a:	4603      	mov	r3, r0
 800f06c:	823b      	strh	r3, [r7, #16]
 800f06e:	8a3b      	ldrh	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d008      	beq.n	800f086 <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800f074:	8a3b      	ldrh	r3, [r7, #16]
 800f076:	e081      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f078:	f240 2321 	movw	r3, #545	@ 0x221
 800f07c:	e07e      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800f07e:	bf00      	nop
 800f080:	e002      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800f082:	bf00      	nop
 800f084:	e000      	b.n	800f088 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800f086:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800f088:	7e7b      	ldrb	r3, [r7, #25]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d069      	beq.n	800f162 <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d102      	bne.n	800f09a <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800f094:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800f098:	e070      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3358      	adds	r3, #88	@ 0x58
 800f09e:	2220      	movs	r2, #32
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f012 fda6 	bl	8021bf4 <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	82fb      	strh	r3, [r7, #22]
 800f0ac:	e04d      	b.n	800f14a <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800f0ae:	8afb      	ldrh	r3, [r7, #22]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	69fa      	ldr	r2, [r7, #28]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800f0ba:	8afb      	ldrh	r3, [r7, #22]
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	3302      	adds	r3, #2
 800f0c0:	69fa      	ldr	r2, [r7, #28]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	89fa      	ldrh	r2, [r7, #14]
 800f0c6:	8819      	ldrh	r1, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	322c      	adds	r2, #44	@ 0x2c
 800f0cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800f0d0:	89fb      	ldrh	r3, [r7, #14]
 800f0d2:	2b07      	cmp	r3, #7
 800f0d4:	d136      	bne.n	800f144 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d109      	bne.n	800f0f4 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d004      	beq.n	800f0f4 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0f0:	2b0a      	cmp	r3, #10
 800f0f2:	d127      	bne.n	800f144 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d123      	bne.n	800f144 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800f0fc:	89fa      	ldrh	r2, [r7, #14]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	322c      	adds	r2, #44	@ 0x2c
 800f102:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f106:	89fb      	ldrh	r3, [r7, #14]
 800f108:	4619      	mov	r1, r3
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fbf0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f110:	4603      	mov	r3, r0
 800f112:	823b      	strh	r3, [r7, #16]
 800f114:	8a3b      	ldrh	r3, [r7, #16]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d014      	beq.n	800f144 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800f11a:	8a3b      	ldrh	r3, [r7, #16]
 800f11c:	e02e      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800f11e:	bf00      	nop
 800f120:	08025918 	.word	0x08025918
 800f124:	08025940 	.word	0x08025940
 800f128:	0802596c 	.word	0x0802596c
 800f12c:	08025998 	.word	0x08025998
 800f130:	08025a24 	.word	0x08025a24
 800f134:	08025a50 	.word	0x08025a50
 800f138:	08025a7c 	.word	0x08025a7c
 800f13c:	080259c4 	.word	0x080259c4
 800f140:	080259f4 	.word	0x080259f4
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800f144:	8afb      	ldrh	r3, [r7, #22]
 800f146:	3301      	adds	r3, #1
 800f148:	82fb      	strh	r3, [r7, #22]
 800f14a:	8afa      	ldrh	r2, [r7, #22]
 800f14c:	8b7b      	ldrh	r3, [r7, #26]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d3ad      	bcc.n	800f0ae <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	8aba      	ldrh	r2, [r7, #20]
 800f156:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8a7a      	ldrh	r2, [r7, #18]
 800f15e:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800f162:	2201      	movs	r2, #1
 800f164:	212e      	movs	r1, #46	@ 0x2e
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fbc2 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f16c:	4603      	mov	r3, r0
 800f16e:	823b      	strh	r3, [r7, #16]
 800f170:	8a3b      	ldrh	r3, [r7, #16]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d001      	beq.n	800f17a <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800f176:	8a3b      	ldrh	r3, [r7, #16]
 800f178:	e000      	b.n	800f17c <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3720      	adds	r7, #32
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b090      	sub	sp, #64	@ 0x40
 800f188:	af02      	add	r7, sp, #8
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	607a      	str	r2, [r7, #4]
 800f18e:	461a      	mov	r2, r3
 800f190:	460b      	mov	r3, r1
 800f192:	817b      	strh	r3, [r7, #10]
 800f194:	4613      	mov	r3, r2
 800f196:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800f198:	2300      	movs	r3, #0
 800f19a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800f19c:	2300      	movs	r3, #0
 800f19e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800f1b4:	893b      	ldrh	r3, [r7, #8]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d005      	beq.n	800f1c6 <phhalHw_Pn5180_Exchange+0x42>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d102      	bne.n	800f1c6 <phhalHw_Pn5180_Exchange+0x42>
 800f1c0:	f240 2321 	movw	r3, #545	@ 0x221
 800f1c4:	e253      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d003      	beq.n	800f1de <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800f1d6:	f240 2325 	movw	r3, #549	@ 0x225
 800f1da:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800f1dc:	e1cf      	b.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800f1de:	897b      	ldrh	r3, [r7, #10]
 800f1e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800f1e8:	f240 2321 	movw	r3, #545	@ 0x221
 800f1ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800f1ee:	e1c6      	b.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800f1f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <phhalHw_Pn5180_Exchange+0x78>
 800f1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d107      	bne.n	800f20c <phhalHw_Pn5180_Exchange+0x88>
 800f1fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f200:	2b00      	cmp	r3, #0
 800f202:	db03      	blt.n	800f20c <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800f204:	f240 2321 	movw	r3, #545	@ 0x221
 800f208:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800f20a:	e1b8      	b.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f212:	2b00      	cmp	r3, #0
 800f214:	d115      	bne.n	800f242 <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800f216:	f107 0310 	add.w	r3, r7, #16
 800f21a:	461a      	mov	r2, r3
 800f21c:	211d      	movs	r1, #29
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f003 fbe8 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 800f224:	4603      	mov	r3, r0
 800f226:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f228:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <phhalHw_Pn5180_Exchange+0xae>
 800f22e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f230:	e21d      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800f23c:	f240 230a 	movw	r3, #522	@ 0x20a
 800f240:	e215      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800f242:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800f246:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f24a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	460b      	mov	r3, r1
 800f252:	2101      	movs	r1, #1
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f004 f98a 	bl	801356e <phhalHw_Pn5180_GetTxBuffer>
 800f25a:	4603      	mov	r3, r0
 800f25c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f25e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f260:	2b00      	cmp	r3, #0
 800f262:	f040 818c 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800f266:	897b      	ldrh	r3, [r7, #10]
 800f268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d105      	bne.n	800f27c <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2200      	movs	r2, #0
 800f274:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2200      	movs	r2, #0
 800f27a:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800f27c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800f282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f284:	2200      	movs	r2, #0
 800f286:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d150      	bne.n	800f334 <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800f292:	2300      	movs	r3, #0
 800f294:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800f296:	893b      	ldrh	r3, [r7, #8]
 800f298:	f107 0218 	add.w	r2, r7, #24
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7f9 fda3 	bl	8008dea <phTools_ComputeCrc_B>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f2a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f040 8167 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f000 fb1b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f2be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f040 815c 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f000 fb10 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f2d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f040 8151 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800f2dc:	2200      	movs	r2, #0
 800f2de:	2102      	movs	r1, #2
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f000 fb05 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f2ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f040 8146 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800f2f2:	2207      	movs	r2, #7
 800f2f4:	2103      	movs	r1, #3
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f000 fafa 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f302:	2b00      	cmp	r3, #0
 800f304:	f040 813b 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800f308:	2204      	movs	r2, #4
 800f30a:	2104      	movs	r1, #4
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f003 f9d3 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800f312:	4603      	mov	r3, r0
 800f314:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f316:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f040 8130 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800f31e:	221d      	movs	r2, #29
 800f320:	2107      	movs	r1, #7
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f000 fae4 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f328:	4603      	mov	r3, r0
 800f32a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f32c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f040 8125 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	8b9b      	ldrh	r3, [r3, #28]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d122      	bne.n	800f382 <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800f33c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	8b9b      	ldrh	r3, [r3, #28]
 800f342:	1c59      	adds	r1, r3, #1
 800f344:	b288      	uxth	r0, r1
 800f346:	68f9      	ldr	r1, [r7, #12]
 800f348:	8388      	strh	r0, [r1, #28]
 800f34a:	4413      	add	r3, r2
 800f34c:	2209      	movs	r2, #9
 800f34e:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800f350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	8b9b      	ldrh	r3, [r3, #28]
 800f356:	1c59      	adds	r1, r3, #1
 800f358:	b288      	uxth	r0, r1
 800f35a:	68f9      	ldr	r1, [r7, #12]
 800f35c:	8388      	strh	r0, [r1, #28]
 800f35e:	4413      	add	r3, r2
 800f360:	2200      	movs	r2, #0
 800f362:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d109      	bne.n	800f382 <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800f36e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	8b9b      	ldrh	r3, [r3, #28]
 800f374:	1c59      	adds	r1, r3, #1
 800f376:	b288      	uxth	r0, r1
 800f378:	68f9      	ldr	r1, [r7, #12]
 800f37a:	8388      	strh	r0, [r1, #28]
 800f37c:	4413      	add	r3, r2
 800f37e:	22f0      	movs	r2, #240	@ 0xf0
 800f380:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800f382:	893b      	ldrh	r3, [r7, #8]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d03d      	beq.n	800f404 <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800f388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f38a:	4619      	mov	r1, r3
 800f38c:	893b      	ldrh	r3, [r7, #8]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	8a52      	ldrh	r2, [r2, #18]
 800f392:	4413      	add	r3, r2
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	8b92      	ldrh	r2, [r2, #28]
 800f398:	4413      	add	r3, r2
 800f39a:	4299      	cmp	r1, r3
 800f39c:	da09      	bge.n	800f3b2 <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800f3aa:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f3ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800f3b0:	e0e5      	b.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800f3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	8b92      	ldrh	r2, [r2, #28]
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	8a52      	ldrh	r2, [r2, #18]
 800f3be:	440a      	add	r2, r1
 800f3c0:	4413      	add	r3, r2
 800f3c2:	893a      	ldrh	r2, [r7, #8]
 800f3c4:	6879      	ldr	r1, [r7, #4]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f012 fca9 	bl	8021d1e <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	8a5a      	ldrh	r2, [r3, #18]
 800f3d0:	893b      	ldrh	r3, [r7, #8]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d10f      	bne.n	800f404 <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800f3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	8b92      	ldrh	r2, [r2, #28]
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	8a52      	ldrh	r2, [r2, #18]
 800f3f0:	440a      	add	r2, r1
 800f3f2:	4413      	add	r3, r2
 800f3f4:	8b3a      	ldrh	r2, [r7, #24]
 800f3f6:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	8a5b      	ldrh	r3, [r3, #18]
 800f3fc:	3302      	adds	r3, #2
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800f404:	2300      	movs	r3, #0
 800f406:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800f408:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	da01      	bge.n	800f414 <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800f410:	2300      	movs	r3, #0
 800f412:	e12c      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	8a5a      	ldrh	r2, [r3, #18]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	8b9b      	ldrh	r3, [r3, #28]
 800f41c:	4413      	add	r3, r2
 800f41e:	b29a      	uxth	r2, r3
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	8a5b      	ldrh	r3, [r3, #18]
 800f428:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800f42c:	d903      	bls.n	800f436 <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800f42e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f432:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800f434:	e0a3      	b.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800f436:	2103      	movs	r1, #3
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f005 fccd 	bl	8014dd8 <phhalHw_Pn5180_Int_LoadCommand>
 800f43e:	4603      	mov	r3, r0
 800f440:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f442:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f444:	2b00      	cmp	r3, #0
 800f446:	f040 809a 	bne.w	800f57e <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f450:	2b01      	cmp	r3, #1
 800f452:	d103      	bne.n	800f45c <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800f454:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800f458:	633b      	str	r3, [r7, #48]	@ 0x30
 800f45a:	e001      	b.n	800f460 <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800f45c:	4b86      	ldr	r3, [pc, #536]	@ (800f678 <phhalHw_Pn5180_Exchange+0x4f4>)
 800f45e:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f466:	2b01      	cmp	r3, #1
 800f468:	d103      	bne.n	800f472 <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800f46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46c:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800f470:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800f472:	4a82      	ldr	r2, [pc, #520]	@ (800f67c <phhalHw_Pn5180_Exchange+0x4f8>)
 800f474:	2103      	movs	r1, #3
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f003 f8a8 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800f47c:	4603      	mov	r3, r0
 800f47e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f480:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f482:	2b00      	cmp	r3, #0
 800f484:	d17b      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f48c:	2300      	movs	r3, #0
 800f48e:	2201      	movs	r2, #1
 800f490:	2100      	movs	r1, #0
 800f492:	f00c fa37 	bl	801b904 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800f496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f498:	2101      	movs	r1, #1
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f003 f896 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f4a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d169      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d116      	bne.n	800f4e2 <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800f4b4:	f640 0301 	movw	r3, #2049	@ 0x801
 800f4b8:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d103      	bne.n	800f4cc <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
 800f4c6:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800f4ca:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	210f      	movs	r1, #15
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f003 f87a 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f4dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d14d      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d01a      	beq.n	800f522 <phhalHw_Pn5180_Exchange+0x39e>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d115      	bne.n	800f522 <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800f4f6:	4b62      	ldr	r3, [pc, #392]	@ (800f680 <phhalHw_Pn5180_Exchange+0x4fc>)
 800f4f8:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f500:	2b01      	cmp	r3, #1
 800f502:	d103      	bne.n	800f50c <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800f50a:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800f50c:	6a3b      	ldr	r3, [r7, #32]
 800f50e:	461a      	mov	r2, r3
 800f510:	210f      	movs	r1, #15
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f003 f85a 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800f518:	4603      	mov	r3, r0
 800f51a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f51c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d12d      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800f528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f52a:	3301      	adds	r3, #1
 800f52c:	b2d2      	uxtb	r2, r2
 800f52e:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800f530:	2300      	movs	r3, #0
 800f532:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d01f      	beq.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800f53e:	f107 0320 	add.w	r3, r7, #32
 800f542:	461a      	mov	r2, r3
 800f544:	211d      	movs	r1, #29
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f003 fa54 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 800f54c:	4603      	mov	r3, r0
 800f54e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f550:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f552:	2b00      	cmp	r3, #0
 800f554:	d113      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d10e      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 f8e7 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 800f566:	4603      	mov	r3, r0
 800f568:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f56a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d106      	bne.n	800f57e <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f000 f889 	bl	800f688 <phhalHw_Pn5180_FieldOn>
 800f576:	4603      	mov	r3, r0
 800f578:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f57a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f57c:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f584:	2b01      	cmp	r3, #1
 800f586:	d120      	bne.n	800f5ca <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800f590:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f592:	2b00      	cmp	r3, #0
 800f594:	d110      	bne.n	800f5b8 <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800f596:	f107 0314 	add.w	r3, r7, #20
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	2322      	movs	r3, #34	@ 0x22
 800f59e:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a2:	2105      	movs	r1, #5
 800f5a4:	4837      	ldr	r0, [pc, #220]	@ (800f684 <phhalHw_Pn5180_Exchange+0x500>)
 800f5a6:	f00c f92b 	bl	801b800 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	f003 0320 	and.w	r3, r3, #32
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800f5b4:	2312      	movs	r3, #18
 800f5b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800f5b8:	f00b ffc8 	bl	801b54c <phDriver_TimerStop>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800f5c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <phhalHw_Pn5180_Exchange+0x446>
 800f5c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f5c8:	e051      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800f5ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d001      	beq.n	800f5d4 <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800f5d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5d2:	e04c      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800f5d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	8a5a      	ldrh	r2, [r3, #18]
 800f5da:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800f5dc:	f107 031a 	add.w	r3, r7, #26
 800f5e0:	9301      	str	r3, [sp, #4]
 800f5e2:	f107 031c 	add.w	r3, r7, #28
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f002 f8d0 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f5f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <phhalHw_Pn5180_Exchange+0x47a>
 800f5fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5fc:	e037      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00b      	beq.n	800f62c <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800f614:	2200      	movs	r2, #0
 800f616:	2103      	movs	r1, #3
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f000 f969 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f61e:	4603      	mov	r3, r0
 800f620:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f622:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <phhalHw_Pn5180_Exchange+0x4a8>
 800f628:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f62a:	e020      	b.n	800f66e <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800f62c:	2301      	movs	r3, #1
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f634:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f005 f94c 	bl	80148d4 <phhalHw_Pn5180_Receive_Int>
 800f63c:	4603      	mov	r3, r0
 800f63e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800f640:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b00      	cmp	r3, #0
 800f646:	d004      	beq.n	800f652 <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f005 fba3 	bl	8014d94 <phhalHw_Pn5180_Int_IdleCommand>
 800f64e:	4603      	mov	r3, r0
 800f650:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d007      	beq.n	800f66c <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800f65c:	f06f 0201 	mvn.w	r2, #1
 800f660:	210f      	movs	r1, #15
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f003 f89e 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f668:	4603      	mov	r3, r0
 800f66a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800f66c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3738      	adds	r7, #56	@ 0x38
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	00021001 	.word	0x00021001
 800f67c:	000fffff 	.word	0x000fffff
 800f680:	00100801 	.word	0x00100801
 800f684:	20001be0 	.word	0x20001be0

0800f688 <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800f690:	2300      	movs	r3, #0
 800f692:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	78db      	ldrb	r3, [r3, #3]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800f69c:	7bfb      	ldrb	r3, [r7, #15]
 800f69e:	f043 0301 	orr.w	r3, r3, #1
 800f6a2:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d103      	bne.n	800f6b6 <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	f043 0302 	orr.w	r3, r3, #2
 800f6b4:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800f6b6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800f6ba:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	461a      	mov	r2, r3
 800f6c0:	2103      	movs	r1, #3
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f002 fff8 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	81bb      	strh	r3, [r7, #12]
 800f6cc:	89bb      	ldrh	r3, [r7, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <phhalHw_Pn5180_FieldOn+0x4e>
 800f6d2:	89bb      	ldrh	r3, [r7, #12]
 800f6d4:	e02a      	b.n	800f72c <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800f6d6:	7bfb      	ldrb	r3, [r7, #15]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f003 fece 	bl	801347c <phhalHw_Pn5180_Instr_RfOn>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	81bb      	strh	r3, [r7, #12]
 800f6e4:	89bb      	ldrh	r3, [r7, #12]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d001      	beq.n	800f6ee <phhalHw_Pn5180_FieldOn+0x66>
 800f6ea:	89bb      	ldrh	r3, [r7, #12]
 800f6ec:	e01e      	b.n	800f72c <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800f6ee:	f107 0308 	add.w	r3, r7, #8
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	211d      	movs	r1, #29
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f003 f97c 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	81bb      	strh	r3, [r7, #12]
 800f700:	89bb      	ldrh	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d001      	beq.n	800f70a <phhalHw_Pn5180_FieldOn+0x82>
 800f706:	89bb      	ldrh	r3, [r7, #12]
 800f708:	e010      	b.n	800f72c <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10a      	bne.n	800f72a <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d002      	beq.n	800f724 <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800f71e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800f722:	e003      	b.n	800f72c <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800f724:	f240 230a 	movw	r3, #522	@ 0x20a
 800f728:	e000      	b.n	800f72c <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800f744:	2200      	movs	r2, #0
 800f746:	215e      	movs	r1, #94	@ 0x5e
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 f8d1 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 800f74e:	4603      	mov	r3, r0
 800f750:	81fb      	strh	r3, [r7, #14]
 800f752:	89fb      	ldrh	r3, [r7, #14]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <phhalHw_Pn5180_FieldOff+0x28>
 800f758:	89fb      	ldrh	r3, [r7, #14]
 800f75a:	e00a      	b.n	800f772 <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f003 fecc 	bl	80134fa <phhalHw_Pn5180_Instr_RfOff>
 800f762:	4603      	mov	r3, r0
 800f764:	81fb      	strh	r3, [r7, #14]
 800f766:	89fb      	ldrh	r3, [r7, #14]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <phhalHw_Pn5180_FieldOff+0x3c>
 800f76c:	89fb      	ldrh	r3, [r7, #14]
 800f76e:	e000      	b.n	800f772 <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
	...

0800f77c <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b086      	sub	sp, #24
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	460b      	mov	r3, r1
 800f786:	70fb      	strb	r3, [r7, #3]
 800f788:	4613      	mov	r3, r2
 800f78a:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwLoadValue;	// 定时器加载值
    uint32_t    PH_MEMLOC_REM wPrescaler;	// 预分频值
    uint32_t    PH_MEMLOC_REM wFreq;		// 频率值

    /* Parameter check: only ms or us is accepted */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 800f78c:	78fb      	ldrb	r3, [r7, #3]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d005      	beq.n	800f79e <phhalHw_Pn5180_Wait+0x22>
 800f792:	78fb      	ldrb	r3, [r7, #3]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d002      	beq.n	800f79e <phhalHw_Pn5180_Wait+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f798:	f240 2321 	movw	r3, #545	@ 0x221
 800f79c:	e062      	b.n	800f864 <phhalHw_Pn5180_Wait+0xe8>
    }

    /* When time-out value is zero, there is no wait needed */
    if (wTimeout == 0U)
 800f79e:	883b      	ldrh	r3, [r7, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d101      	bne.n	800f7a8 <phhalHw_Pn5180_Wait+0x2c>
    {
        return PH_ERR_SUCCESS;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e05d      	b.n	800f864 <phhalHw_Pn5180_Wait+0xe8>
    }

    /* Setting the Prescaler frequency according to wTimeout */
    if (bUnit == PHHAL_HW_TIME_MILLISECONDS)
 800f7a8:	78fb      	ldrb	r3, [r7, #3]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d13a      	bne.n	800f824 <phhalHw_Pn5180_Wait+0xa8>
    {
        wFreq = PHHAL_HW_PN5180_MIN_FREQ;			// 最小频率：53000U
 800f7ae:	f64c 7308 	movw	r3, #53000	@ 0xcf08
 800f7b2:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x3CU;							// 设置预分频器为60
 800f7b4:	233c      	movs	r3, #60	@ 0x3c
 800f7b6:	613b      	str	r3, [r7, #16]

        /* 处理长时间等待 - 如果超过最大延时，分段执行 */
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800f7b8:	e01a      	b.n	800f7f0 <phhalHw_Pn5180_Wait+0x74>
        {
            wTimeout -= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS;
 800f7ba:	883b      	ldrh	r3, [r7, #0]
 800f7bc:	f5a3 439a 	sub.w	r3, r3, #19712	@ 0x4d00
 800f7c0:	3b48      	subs	r3, #72	@ 0x48
 800f7c2:	803b      	strh	r3, [r7, #0]
            /* Calculating the load value */
            dwLoadValue =(uint32_t) (  PHHAL_HW_PN5180_MAX_TIME_DELAY_MS * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	4a29      	ldr	r2, [pc, #164]	@ (800f86c <phhalHw_Pn5180_Wait+0xf0>)
 800f7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f7cc:	099b      	lsrs	r3, r3, #6
 800f7ce:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800f7d2:	fb02 f303 	mul.w	r3, r2, r3
 800f7d6:	60fb      	str	r3, [r7, #12]
            /* 执行内部等待函数 */
            PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800f7d8:	693a      	ldr	r2, [r7, #16]
 800f7da:	68f9      	ldr	r1, [r7, #12]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f004 fead 	bl	801453c <phhalHw_Pn5180_Int_Wait>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	817b      	strh	r3, [r7, #10]
 800f7e6:	897b      	ldrh	r3, [r7, #10]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <phhalHw_Pn5180_Wait+0x74>
 800f7ec:	897b      	ldrh	r3, [r7, #10]
 800f7ee:	e039      	b.n	800f864 <phhalHw_Pn5180_Wait+0xe8>
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800f7f0:	883b      	ldrh	r3, [r7, #0]
 800f7f2:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d8df      	bhi.n	800f7ba <phhalHw_Pn5180_Wait+0x3e>
        }

        dwLoadValue =(uint32_t) (  wTimeout * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800f7fa:	883b      	ldrh	r3, [r7, #0]
 800f7fc:	697a      	ldr	r2, [r7, #20]
 800f7fe:	491b      	ldr	r1, [pc, #108]	@ (800f86c <phhalHw_Pn5180_Wait+0xf0>)
 800f800:	fba1 1202 	umull	r1, r2, r1, r2
 800f804:	0992      	lsrs	r2, r2, #6
 800f806:	fb02 f303 	mul.w	r3, r2, r3
 800f80a:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800f80c:	693a      	ldr	r2, [r7, #16]
 800f80e:	68f9      	ldr	r1, [r7, #12]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f004 fe93 	bl	801453c <phhalHw_Pn5180_Int_Wait>
 800f816:	4603      	mov	r3, r0
 800f818:	817b      	strh	r3, [r7, #10]
 800f81a:	897b      	ldrh	r3, [r7, #10]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d020      	beq.n	800f862 <phhalHw_Pn5180_Wait+0xe6>
 800f820:	897b      	ldrh	r3, [r7, #10]
 800f822:	e01f      	b.n	800f864 <phhalHw_Pn5180_Wait+0xe8>
    }
    else
    {
        /* here wTimeout will be in uS and not be Zero */
        wFreq = PHHAL_HW_PN5180_MAX_FREQ;
 800f824:	4b12      	ldr	r3, [pc, #72]	@ (800f870 <phhalHw_Pn5180_Wait+0xf4>)
 800f826:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x00U;
 800f828:	2300      	movs	r3, #0
 800f82a:	613b      	str	r3, [r7, #16]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( wFreq / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	4a11      	ldr	r2, [pc, #68]	@ (800f874 <phhalHw_Pn5180_Wait+0xf8>)
 800f830:	fba2 2303 	umull	r2, r3, r2, r3
 800f834:	0b5b      	lsrs	r3, r3, #13
 800f836:	60fb      	str	r3, [r7, #12]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) ((wTimeout * dwLoadValue)/100);
 800f838:	883b      	ldrh	r3, [r7, #0]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	fb02 f303 	mul.w	r3, r2, r3
 800f840:	4a0d      	ldr	r2, [pc, #52]	@ (800f878 <phhalHw_Pn5180_Wait+0xfc>)
 800f842:	fba2 2303 	umull	r2, r3, r2, r3
 800f846:	095b      	lsrs	r3, r3, #5
 800f848:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	68f9      	ldr	r1, [r7, #12]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f004 fe74 	bl	801453c <phhalHw_Pn5180_Int_Wait>
 800f854:	4603      	mov	r3, r0
 800f856:	817b      	strh	r3, [r7, #10]
 800f858:	897b      	ldrh	r3, [r7, #10]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <phhalHw_Pn5180_Wait+0xe6>
 800f85e:	897b      	ldrh	r3, [r7, #10]
 800f860:	e000      	b.n	800f864 <phhalHw_Pn5180_Wait+0xe8>
    }

    return PH_ERR_SUCCESS;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	10624dd3 	.word	0x10624dd3
 800f870:	00cee8c0 	.word	0x00cee8c0
 800f874:	d1b71759 	.word	0xd1b71759
 800f878:	51eb851f 	.word	0x51eb851f

0800f87c <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff ff55 	bl	800f734 <phhalHw_Pn5180_FieldOff>
 800f88a:	4603      	mov	r3, r0
 800f88c:	81fb      	strh	r3, [r7, #14]
 800f88e:	89fb      	ldrh	r3, [r7, #14]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d001      	beq.n	800f898 <phhalHw_Pn5180_FieldReset+0x1c>
 800f894:	89fb      	ldrh	r3, [r7, #14]
 800f896:	e026      	b.n	800f8e6 <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f89c:	461a      	mov	r2, r3
 800f89e:	2101      	movs	r1, #1
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f7ff ff6b 	bl	800f77c <phhalHw_Pn5180_Wait>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	81fb      	strh	r3, [r7, #14]
 800f8aa:	89fb      	ldrh	r3, [r7, #14]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <phhalHw_Pn5180_FieldReset+0x38>
 800f8b0:	89fb      	ldrh	r3, [r7, #14]
 800f8b2:	e018      	b.n	800f8e6 <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff fee7 	bl	800f688 <phhalHw_Pn5180_FieldOn>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	81fb      	strh	r3, [r7, #14]
 800f8be:	89fb      	ldrh	r3, [r7, #14]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d001      	beq.n	800f8c8 <phhalHw_Pn5180_FieldReset+0x4c>
 800f8c4:	89fb      	ldrh	r3, [r7, #14]
 800f8c6:	e00e      	b.n	800f8e6 <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff ff53 	bl	800f77c <phhalHw_Pn5180_Wait>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	81fb      	strh	r3, [r7, #14]
 800f8da:	89fb      	ldrh	r3, [r7, #14]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <phhalHw_Pn5180_FieldReset+0x68>
 800f8e0:	89fb      	ldrh	r3, [r7, #14]
 800f8e2:	e000      	b.n	800f8e6 <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
	...

0800f8f0 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 800f8f0:	b5b0      	push	{r4, r5, r7, lr}
 800f8f2:	b090      	sub	sp, #64	@ 0x40
 800f8f4:	af02      	add	r7, sp, #8
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	807b      	strh	r3, [r7, #2]
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800f900:	2300      	movs	r3, #0
 800f902:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 800f904:	2300      	movs	r3, #0
 800f906:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 800f908:	f04f 0300 	mov.w	r3, #0
 800f90c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 800f90e:	23ff      	movs	r3, #255	@ 0xff
 800f910:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 800f912:	887b      	ldrh	r3, [r7, #2]
 800f914:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800f918:	3b25      	subs	r3, #37	@ 0x25
 800f91a:	2b07      	cmp	r3, #7
 800f91c:	d809      	bhi.n	800f932 <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800f924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f928:	d805      	bhi.n	800f936 <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800f92a:	f240 2325 	movw	r3, #549	@ 0x225
 800f92e:	f001 bc22 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 800f932:	bf00      	nop
 800f934:	e000      	b.n	800f938 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 800f936:	bf00      	nop
    }

    switch(wConfig)
 800f938:	887b      	ldrh	r3, [r7, #2]
 800f93a:	2b5e      	cmp	r3, #94	@ 0x5e
 800f93c:	f300 8154 	bgt.w	800fbe8 <phhalHw_Pn5180_SetConfig+0x2f8>
 800f940:	2b00      	cmp	r3, #0
 800f942:	f280 808d 	bge.w	800fa60 <phhalHw_Pn5180_SetConfig+0x170>
 800f946:	f001 bbd3 	b.w	80110f0 <phhalHw_Pn5180_SetConfig+0x1800>
 800f94a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800f94e:	3b10      	subs	r3, #16
 800f950:	2b40      	cmp	r3, #64	@ 0x40
 800f952:	f201 83cd 	bhi.w	80110f0 <phhalHw_Pn5180_SetConfig+0x1800>
 800f956:	a201      	add	r2, pc, #4	@ (adr r2, 800f95c <phhalHw_Pn5180_SetConfig+0x6c>)
 800f958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95c:	080107e1 	.word	0x080107e1
 800f960:	080110f1 	.word	0x080110f1
 800f964:	080110f1 	.word	0x080110f1
 800f968:	080110f1 	.word	0x080110f1
 800f96c:	080110f1 	.word	0x080110f1
 800f970:	080110f1 	.word	0x080110f1
 800f974:	080110f1 	.word	0x080110f1
 800f978:	080110f1 	.word	0x080110f1
 800f97c:	080110f1 	.word	0x080110f1
 800f980:	080110f1 	.word	0x080110f1
 800f984:	080110f1 	.word	0x080110f1
 800f988:	080110f1 	.word	0x080110f1
 800f98c:	080110f1 	.word	0x080110f1
 800f990:	080110f1 	.word	0x080110f1
 800f994:	080110f1 	.word	0x080110f1
 800f998:	080110f1 	.word	0x080110f1
 800f99c:	080110f1 	.word	0x080110f1
 800f9a0:	080110f1 	.word	0x080110f1
 800f9a4:	080110f1 	.word	0x080110f1
 800f9a8:	080110f1 	.word	0x080110f1
 800f9ac:	080110f1 	.word	0x080110f1
 800f9b0:	08011001 	.word	0x08011001
 800f9b4:	08011033 	.word	0x08011033
 800f9b8:	0801104f 	.word	0x0801104f
 800f9bc:	08011069 	.word	0x08011069
 800f9c0:	08011083 	.word	0x08011083
 800f9c4:	0801109d 	.word	0x0801109d
 800f9c8:	080110b9 	.word	0x080110b9
 800f9cc:	080110d5 	.word	0x080110d5
 800f9d0:	080110f1 	.word	0x080110f1
 800f9d4:	080110f1 	.word	0x080110f1
 800f9d8:	080110f1 	.word	0x080110f1
 800f9dc:	080110f1 	.word	0x080110f1
 800f9e0:	080110f1 	.word	0x080110f1
 800f9e4:	080110f1 	.word	0x080110f1
 800f9e8:	080110f1 	.word	0x080110f1
 800f9ec:	080110f1 	.word	0x080110f1
 800f9f0:	080110f1 	.word	0x080110f1
 800f9f4:	080110f1 	.word	0x080110f1
 800f9f8:	080110f1 	.word	0x080110f1
 800f9fc:	080110f1 	.word	0x080110f1
 800fa00:	080110f1 	.word	0x080110f1
 800fa04:	080110f1 	.word	0x080110f1
 800fa08:	080110f1 	.word	0x080110f1
 800fa0c:	080110f1 	.word	0x080110f1
 800fa10:	080110f1 	.word	0x080110f1
 800fa14:	080110f1 	.word	0x080110f1
 800fa18:	080110f1 	.word	0x080110f1
 800fa1c:	080110f1 	.word	0x080110f1
 800fa20:	080110f1 	.word	0x080110f1
 800fa24:	080110f1 	.word	0x080110f1
 800fa28:	080110f1 	.word	0x080110f1
 800fa2c:	080110f1 	.word	0x080110f1
 800fa30:	080110f1 	.word	0x080110f1
 800fa34:	080110f1 	.word	0x080110f1
 800fa38:	080110f1 	.word	0x080110f1
 800fa3c:	080110f1 	.word	0x080110f1
 800fa40:	080110f1 	.word	0x080110f1
 800fa44:	080110f1 	.word	0x080110f1
 800fa48:	080110f1 	.word	0x080110f1
 800fa4c:	080110f1 	.word	0x080110f1
 800fa50:	080110f1 	.word	0x080110f1
 800fa54:	080110f1 	.word	0x080110f1
 800fa58:	080110f1 	.word	0x080110f1
 800fa5c:	08010883 	.word	0x08010883
 800fa60:	2b5e      	cmp	r3, #94	@ 0x5e
 800fa62:	f201 8345 	bhi.w	80110f0 <phhalHw_Pn5180_SetConfig+0x1800>
 800fa66:	a201      	add	r2, pc, #4	@ (adr r2, 800fa6c <phhalHw_Pn5180_SetConfig+0x17c>)
 800fa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6c:	0800fc01 	.word	0x0800fc01
 800fa70:	0800fc79 	.word	0x0800fc79
 800fa74:	0800fc79 	.word	0x0800fc79
 800fa78:	0800fc3f 	.word	0x0800fc3f
 800fa7c:	080110f1 	.word	0x080110f1
 800fa80:	0800fcc1 	.word	0x0800fcc1
 800fa84:	0800ff41 	.word	0x0800ff41
 800fa88:	0801001b 	.word	0x0801001b
 800fa8c:	0800fe09 	.word	0x0800fe09
 800fa90:	0801037b 	.word	0x0801037b
 800fa94:	0801055b 	.word	0x0801055b
 800fa98:	080100fb 	.word	0x080100fb
 800fa9c:	0800fc01 	.word	0x0800fc01
 800faa0:	080106ad 	.word	0x080106ad
 800faa4:	08010707 	.word	0x08010707
 800faa8:	08010761 	.word	0x08010761
 800faac:	080110f1 	.word	0x080110f1
 800fab0:	080110f1 	.word	0x080110f1
 800fab4:	080110f1 	.word	0x080110f1
 800fab8:	08010831 	.word	0x08010831
 800fabc:	08010849 	.word	0x08010849
 800fac0:	08010a73 	.word	0x08010a73
 800fac4:	08010c85 	.word	0x08010c85
 800fac8:	08010dbd 	.word	0x08010dbd
 800facc:	0800fe69 	.word	0x0800fe69
 800fad0:	080110f1 	.word	0x080110f1
 800fad4:	080110f1 	.word	0x080110f1
 800fad8:	080110f1 	.word	0x080110f1
 800fadc:	080110f1 	.word	0x080110f1
 800fae0:	080110f1 	.word	0x080110f1
 800fae4:	080110f1 	.word	0x080110f1
 800fae8:	080110f1 	.word	0x080110f1
 800faec:	08010853 	.word	0x08010853
 800faf0:	080110f1 	.word	0x080110f1
 800faf4:	080110f1 	.word	0x080110f1
 800faf8:	080110f1 	.word	0x080110f1
 800fafc:	080110f1 	.word	0x080110f1
 800fb00:	080110f1 	.word	0x080110f1
 800fb04:	080110f1 	.word	0x080110f1
 800fb08:	080110f1 	.word	0x080110f1
 800fb0c:	080110f1 	.word	0x080110f1
 800fb10:	080110f1 	.word	0x080110f1
 800fb14:	080110f1 	.word	0x080110f1
 800fb18:	080110f1 	.word	0x080110f1
 800fb1c:	080110f1 	.word	0x080110f1
 800fb20:	080110f1 	.word	0x080110f1
 800fb24:	08010243 	.word	0x08010243
 800fb28:	0801027f 	.word	0x0801027f
 800fb2c:	080102a5 	.word	0x080102a5
 800fb30:	080110f1 	.word	0x080110f1
 800fb34:	080110f1 	.word	0x080110f1
 800fb38:	080102e9 	.word	0x080102e9
 800fb3c:	0801032d 	.word	0x0801032d
 800fb40:	08010fc7 	.word	0x08010fc7
 800fb44:	080110f1 	.word	0x080110f1
 800fb48:	080110f1 	.word	0x080110f1
 800fb4c:	080110f1 	.word	0x080110f1
 800fb50:	080110f1 	.word	0x080110f1
 800fb54:	080110f1 	.word	0x080110f1
 800fb58:	080110f1 	.word	0x080110f1
 800fb5c:	080110f1 	.word	0x080110f1
 800fb60:	080110f1 	.word	0x080110f1
 800fb64:	080110f1 	.word	0x080110f1
 800fb68:	080110f1 	.word	0x080110f1
 800fb6c:	080110f1 	.word	0x080110f1
 800fb70:	080110f1 	.word	0x080110f1
 800fb74:	080110f1 	.word	0x080110f1
 800fb78:	080110f1 	.word	0x080110f1
 800fb7c:	080110f1 	.word	0x080110f1
 800fb80:	080110f1 	.word	0x080110f1
 800fb84:	080110f1 	.word	0x080110f1
 800fb88:	080110f1 	.word	0x080110f1
 800fb8c:	080110f1 	.word	0x080110f1
 800fb90:	080110f1 	.word	0x080110f1
 800fb94:	080110f1 	.word	0x080110f1
 800fb98:	080110f1 	.word	0x080110f1
 800fb9c:	080110f1 	.word	0x080110f1
 800fba0:	080110f1 	.word	0x080110f1
 800fba4:	080110f1 	.word	0x080110f1
 800fba8:	080110f1 	.word	0x080110f1
 800fbac:	080110f1 	.word	0x080110f1
 800fbb0:	08010923 	.word	0x08010923
 800fbb4:	080110f1 	.word	0x080110f1
 800fbb8:	0801093f 	.word	0x0801093f
 800fbbc:	080110f1 	.word	0x080110f1
 800fbc0:	08010f67 	.word	0x08010f67
 800fbc4:	0801098d 	.word	0x0801098d
 800fbc8:	080109a9 	.word	0x080109a9
 800fbcc:	080110f1 	.word	0x080110f1
 800fbd0:	080110f1 	.word	0x080110f1
 800fbd4:	080108a1 	.word	0x080108a1
 800fbd8:	080110f1 	.word	0x080110f1
 800fbdc:	08010a05 	.word	0x08010a05
 800fbe0:	08010a23 	.word	0x08010a23
 800fbe4:	080108af 	.word	0x080108af
 800fbe8:	f248 0250 	movw	r2, #32848	@ 0x8050
 800fbec:	4293      	cmp	r3, r2
 800fbee:	f301 827f 	bgt.w	80110f0 <phhalHw_Pn5180_SetConfig+0x1800>
 800fbf2:	f248 0210 	movw	r2, #32784	@ 0x8010
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	f6bf aea7 	bge.w	800f94a <phhalHw_Pn5180_SetConfig+0x5a>
 800fbfc:	f001 ba78 	b.w	80110f0 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 800fc00:	887a      	ldrh	r2, [r7, #2]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	322c      	adds	r2, #44	@ 0x2c
 800fc06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fc0a:	883a      	ldrh	r2, [r7, #0]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	f001 8272 	beq.w	80110f6 <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800fc12:	883a      	ldrh	r2, [r7, #0]
 800fc14:	887b      	ldrh	r3, [r7, #2]
 800fc16:	4619      	mov	r1, r3
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f003 feab 	bl	8013974 <phhalHw_Pn5180_SetConfig_Int>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d002      	beq.n	800fc2e <phhalHw_Pn5180_SetConfig+0x33e>
 800fc28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc2a:	f001 baa4 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800fc2e:	887a      	ldrh	r2, [r7, #2]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	322c      	adds	r2, #44	@ 0x2c
 800fc34:	8839      	ldrh	r1, [r7, #0]
 800fc36:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800fc3a:	f001 ba5c 	b.w	80110f6 <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800fc3e:	887a      	ldrh	r2, [r7, #2]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	322c      	adds	r2, #44	@ 0x2c
 800fc44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fc48:	883a      	ldrh	r2, [r7, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d105      	bne.n	800fc5a <phhalHw_Pn5180_SetConfig+0x36a>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	f001 8250 	beq.w	80110fa <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 800fc5a:	883b      	ldrh	r3, [r7, #0]
 800fc5c:	2b07      	cmp	r3, #7
 800fc5e:	d903      	bls.n	800fc68 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fc60:	f240 2321 	movw	r3, #545	@ 0x221
 800fc64:	f001 ba87 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800fc68:	887a      	ldrh	r2, [r7, #2]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	322c      	adds	r2, #44	@ 0x2c
 800fc6e:	8839      	ldrh	r1, [r7, #0]
 800fc70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800fc74:	f001 ba41 	b.w	80110fa <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800fc78:	887a      	ldrh	r2, [r7, #2]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	322c      	adds	r2, #44	@ 0x2c
 800fc7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fc82:	883a      	ldrh	r2, [r7, #0]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d105      	bne.n	800fc94 <phhalHw_Pn5180_SetConfig+0x3a4>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	f001 8235 	beq.w	80110fe <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800fc94:	883a      	ldrh	r2, [r7, #0]
 800fc96:	887b      	ldrh	r3, [r7, #2]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f003 fe6a 	bl	8013974 <phhalHw_Pn5180_SetConfig_Int>
 800fca0:	4603      	mov	r3, r0
 800fca2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fca4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <phhalHw_Pn5180_SetConfig+0x3c0>
 800fcaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fcac:	f001 ba63 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800fcb0:	887a      	ldrh	r2, [r7, #2]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	322c      	adds	r2, #44	@ 0x2c
 800fcb6:	8839      	ldrh	r1, [r7, #0]
 800fcb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 800fcbc:	f001 ba1f 	b.w	80110fe <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800fcc0:	887a      	ldrh	r2, [r7, #2]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	322c      	adds	r2, #44	@ 0x2c
 800fcc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fcca:	883a      	ldrh	r2, [r7, #0]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d105      	bne.n	800fcdc <phhalHw_Pn5180_SetConfig+0x3ec>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	f001 8213 	beq.w	8011102 <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 800fcdc:	883b      	ldrh	r3, [r7, #0]
 800fcde:	2b07      	cmp	r3, #7
 800fce0:	d903      	bls.n	800fcea <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fce2:	f240 2321 	movw	r3, #545	@ 0x221
 800fce6:	f001 ba46 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800fcea:	2300      	movs	r3, #0
 800fcec:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 800fcee:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 800fcf2:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800fcf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fcf6:	1c5a      	adds	r2, r3, #1
 800fcf8:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fcfa:	3338      	adds	r3, #56	@ 0x38
 800fcfc:	443b      	add	r3, r7
 800fcfe:	2212      	movs	r2, #18
 800fd00:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800fd04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd06:	1c5a      	adds	r2, r3, #1
 800fd08:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd0a:	3338      	adds	r3, #56	@ 0x38
 800fd0c:	443b      	add	r3, r7
 800fd0e:	2203      	movs	r2, #3
 800fd10:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd18:	1c59      	adds	r1, r3, #1
 800fd1a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd1c:	b2d2      	uxtb	r2, r2
 800fd1e:	3338      	adds	r3, #56	@ 0x38
 800fd20:	443b      	add	r3, r7
 800fd22:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	0a1a      	lsrs	r2, r3, #8
 800fd2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd2c:	1c59      	adds	r1, r3, #1
 800fd2e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd30:	b2d2      	uxtb	r2, r2
 800fd32:	3338      	adds	r3, #56	@ 0x38
 800fd34:	443b      	add	r3, r7
 800fd36:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	0c1a      	lsrs	r2, r3, #16
 800fd3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd40:	1c59      	adds	r1, r3, #1
 800fd42:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd44:	b2d2      	uxtb	r2, r2
 800fd46:	3338      	adds	r3, #56	@ 0x38
 800fd48:	443b      	add	r3, r7
 800fd4a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	0e1a      	lsrs	r2, r3, #24
 800fd52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd54:	1c59      	adds	r1, r3, #1
 800fd56:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd58:	b2d2      	uxtb	r2, r2
 800fd5a:	3338      	adds	r3, #56	@ 0x38
 800fd5c:	443b      	add	r3, r7
 800fd5e:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 800fd62:	883b      	ldrh	r3, [r7, #0]
 800fd64:	019b      	lsls	r3, r3, #6
 800fd66:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800fd6a:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800fd6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd6e:	1c5a      	adds	r2, r3, #1
 800fd70:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd72:	3338      	adds	r3, #56	@ 0x38
 800fd74:	443b      	add	r3, r7
 800fd76:	2212      	movs	r2, #18
 800fd78:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800fd7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fd82:	3338      	adds	r3, #56	@ 0x38
 800fd84:	443b      	add	r3, r7
 800fd86:	2202      	movs	r2, #2
 800fd88:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd90:	1c59      	adds	r1, r3, #1
 800fd92:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fd94:	b2d2      	uxtb	r2, r2
 800fd96:	3338      	adds	r3, #56	@ 0x38
 800fd98:	443b      	add	r3, r7
 800fd9a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	0a1a      	lsrs	r2, r3, #8
 800fda2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fda4:	1c59      	adds	r1, r3, #1
 800fda6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fda8:	b2d2      	uxtb	r2, r2
 800fdaa:	3338      	adds	r3, #56	@ 0x38
 800fdac:	443b      	add	r3, r7
 800fdae:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	0c1a      	lsrs	r2, r3, #16
 800fdb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdb8:	1c59      	adds	r1, r3, #1
 800fdba:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fdbc:	b2d2      	uxtb	r2, r2
 800fdbe:	3338      	adds	r3, #56	@ 0x38
 800fdc0:	443b      	add	r3, r7
 800fdc2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	0e1a      	lsrs	r2, r3, #24
 800fdca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdcc:	1c59      	adds	r1, r3, #1
 800fdce:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fdd0:	b2d2      	uxtb	r2, r2
 800fdd2:	3338      	adds	r3, #56	@ 0x38
 800fdd4:	443b      	add	r3, r7
 800fdd6:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800fdda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fddc:	f107 030c 	add.w	r3, r7, #12
 800fde0:	4619      	mov	r1, r3
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f002 fd54 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800fde8:	4603      	mov	r3, r0
 800fdea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fdec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <phhalHw_Pn5180_SetConfig+0x508>
 800fdf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fdf4:	f001 b9bf 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800fdf8:	887a      	ldrh	r2, [r7, #2]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	322c      	adds	r2, #44	@ 0x2c
 800fdfe:	8839      	ldrh	r1, [r7, #0]
 800fe00:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800fe04:	f001 b97d 	b.w	8011102 <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 800fe08:	887a      	ldrh	r2, [r7, #2]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	322c      	adds	r2, #44	@ 0x2c
 800fe0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fe12:	883a      	ldrh	r2, [r7, #0]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	f001 8176 	beq.w	8011106 <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 800fe1a:	883b      	ldrh	r3, [r7, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d10d      	bne.n	800fe3c <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 800fe20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe24:	2112      	movs	r1, #18
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f002 fc46 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fe30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d010      	beq.n	800fe58 <phhalHw_Pn5180_SetConfig+0x568>
 800fe36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe38:	f001 b99d 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 800fe3c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800fe40:	2112      	movs	r1, #18
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f002 fcae 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fe4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <phhalHw_Pn5180_SetConfig+0x568>
 800fe52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fe54:	f001 b98f 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 800fe58:	887a      	ldrh	r2, [r7, #2]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	322c      	adds	r2, #44	@ 0x2c
 800fe5e:	8839      	ldrh	r1, [r7, #0]
 800fe60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800fe64:	f001 b94f 	b.w	8011106 <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 800fe68:	883b      	ldrh	r3, [r7, #0]
 800fe6a:	f240 228a 	movw	r2, #650	@ 0x28a
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d903      	bls.n	800fe7a <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fe72:	f240 2321 	movw	r3, #545	@ 0x221
 800fe76:	f001 b97e 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 800fe7a:	883a      	ldrh	r2, [r7, #0]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 800fe80:	f04f 0300 	mov.w	r3, #0
 800fe84:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800fe86:	237f      	movs	r3, #127	@ 0x7f
 800fe88:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 800fe8a:	883b      	ldrh	r3, [r7, #0]
 800fe8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fe90:	fb02 f303 	mul.w	r3, r2, r3
 800fe94:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d043      	beq.n	800ff24 <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	ee07 3a90 	vmov	s15, r3
 800fea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fea6:	ee17 0a90 	vmov	r0, s15
 800feaa:	f7f0 fb4d 	bl	8000548 <__aeabi_f2d>
 800feae:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	f7f0 fb9f 	bl	80005f8 <__aeabi_dmul>
 800feba:	4602      	mov	r2, r0
 800febc:	460b      	mov	r3, r1
 800febe:	4614      	mov	r4, r2
 800fec0:	461d      	mov	r5, r3
 800fec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec4:	ee07 3a90 	vmov	s15, r3
 800fec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fecc:	ee17 0a90 	vmov	r0, s15
 800fed0:	f7f0 fb3a 	bl	8000548 <__aeabi_f2d>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	4620      	mov	r0, r4
 800feda:	4629      	mov	r1, r5
 800fedc:	f7f0 fcb6 	bl	800084c <__aeabi_ddiv>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	4610      	mov	r0, r2
 800fee6:	4619      	mov	r1, r3
 800fee8:	f7f0 fe5e 	bl	8000ba8 <__aeabi_d2f>
 800feec:	4603      	mov	r3, r0
 800feee:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 800fef0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800fef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fef8:	ee17 3a90 	vmov	r3, s15
 800fefc:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	021b      	lsls	r3, r3, #8
 800ff02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff04:	4313      	orrs	r3, r2
 800ff06:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800ff08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff0a:	2117      	movs	r1, #23
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7fe ff4f 	bl	800edb0 <phhalHw_Pn5180_WriteRegister>
 800ff12:	4603      	mov	r3, r0
 800ff14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f001 80f6 	beq.w	801110a <phhalHw_Pn5180_SetConfig+0x181a>
 800ff1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff20:	f001 b929 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800ff24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff26:	2117      	movs	r1, #23
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7fe ff41 	bl	800edb0 <phhalHw_Pn5180_WriteRegister>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ff32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f001 80e8 	beq.w	801110a <phhalHw_Pn5180_SetConfig+0x181a>
 800ff3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff3c:	f001 b91b 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800ff40:	887a      	ldrh	r2, [r7, #2]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	322c      	adds	r2, #44	@ 0x2c
 800ff46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ff4a:	883a      	ldrh	r2, [r7, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d105      	bne.n	800ff5c <phhalHw_Pn5180_SetConfig+0x66c>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	f001 80d9 	beq.w	801110e <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ff5c:	887a      	ldrh	r2, [r7, #2]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	322c      	adds	r2, #44	@ 0x2c
 800ff62:	8839      	ldrh	r1, [r7, #0]
 800ff64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800ff68:	237f      	movs	r3, #127	@ 0x7f
 800ff6a:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800ff6c:	883b      	ldrh	r3, [r7, #0]
 800ff6e:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d043      	beq.n	800fffe <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	ee07 3a90 	vmov	s15, r3
 800ff7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff80:	ee17 0a90 	vmov	r0, s15
 800ff84:	f7f0 fae0 	bl	8000548 <__aeabi_f2d>
 800ff88:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 fb32 	bl	80005f8 <__aeabi_dmul>
 800ff94:	4602      	mov	r2, r0
 800ff96:	460b      	mov	r3, r1
 800ff98:	4614      	mov	r4, r2
 800ff9a:	461d      	mov	r5, r3
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff9e:	ee07 3a90 	vmov	s15, r3
 800ffa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffa6:	ee17 0a90 	vmov	r0, s15
 800ffaa:	f7f0 facd 	bl	8000548 <__aeabi_f2d>
 800ffae:	4602      	mov	r2, r0
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	f7f0 fc49 	bl	800084c <__aeabi_ddiv>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	4610      	mov	r0, r2
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	f7f0 fdf1 	bl	8000ba8 <__aeabi_d2f>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800ffca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ffce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffd2:	ee17 3a90 	vmov	r3, s15
 800ffd6:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	021b      	lsls	r3, r3, #8
 800ffdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800ffe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffe4:	2111      	movs	r1, #17
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f002 faf0 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 800ffec:	4603      	mov	r3, r0
 800ffee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fff0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f001 808b 	beq.w	801110e <phhalHw_Pn5180_SetConfig+0x181e>
 800fff8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fffa:	f001 b8bc 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800fffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010000:	2111      	movs	r1, #17
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f002 fae2 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8010008:	4603      	mov	r3, r0
 801000a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801000c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801000e:	2b00      	cmp	r3, #0
 8010010:	f001 807d 	beq.w	801110e <phhalHw_Pn5180_SetConfig+0x181e>
 8010014:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010016:	f001 b8ae 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 801001a:	887a      	ldrh	r2, [r7, #2]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	322c      	adds	r2, #44	@ 0x2c
 8010020:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010024:	883a      	ldrh	r2, [r7, #0]
 8010026:	429a      	cmp	r2, r3
 8010028:	d105      	bne.n	8010036 <phhalHw_Pn5180_SetConfig+0x746>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010030:	2b01      	cmp	r3, #1
 8010032:	f001 806e 	beq.w	8011112 <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010036:	887a      	ldrh	r2, [r7, #2]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	322c      	adds	r2, #44	@ 0x2c
 801003c:	8839      	ldrh	r1, [r7, #0]
 801003e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 8010042:	f04f 0300 	mov.w	r3, #0
 8010046:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 8010048:	237f      	movs	r3, #127	@ 0x7f
 801004a:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 801004c:	883b      	ldrh	r3, [r7, #0]
 801004e:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d043      	beq.n	80100de <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	ee07 3a90 	vmov	s15, r3
 801005c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010060:	ee17 0a90 	vmov	r0, s15
 8010064:	f7f0 fa70 	bl	8000548 <__aeabi_f2d>
 8010068:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 801006c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010070:	f7f0 fac2 	bl	80005f8 <__aeabi_dmul>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	4614      	mov	r4, r2
 801007a:	461d      	mov	r5, r3
 801007c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007e:	ee07 3a90 	vmov	s15, r3
 8010082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010086:	ee17 0a90 	vmov	r0, s15
 801008a:	f7f0 fa5d 	bl	8000548 <__aeabi_f2d>
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	4620      	mov	r0, r4
 8010094:	4629      	mov	r1, r5
 8010096:	f7f0 fbd9 	bl	800084c <__aeabi_ddiv>
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	4610      	mov	r0, r2
 80100a0:	4619      	mov	r1, r3
 80100a2:	f7f0 fd81 	bl	8000ba8 <__aeabi_d2f>
 80100a6:	4603      	mov	r3, r0
 80100a8:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 80100aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80100ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100b2:	ee17 3a90 	vmov	r3, s15
 80100b6:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	021b      	lsls	r3, r3, #8
 80100bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100be:	4313      	orrs	r3, r2
 80100c0:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 80100c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100c4:	2117      	movs	r1, #23
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f7fe fe72 	bl	800edb0 <phhalHw_Pn5180_WriteRegister>
 80100cc:	4603      	mov	r3, r0
 80100ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80100d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f001 801d 	beq.w	8011112 <phhalHw_Pn5180_SetConfig+0x1822>
 80100d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100da:	f001 b84c 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 80100de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100e0:	2117      	movs	r1, #23
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7fe fe64 	bl	800edb0 <phhalHw_Pn5180_WriteRegister>
 80100e8:	4603      	mov	r3, r0
 80100ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80100ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	f001 800f 	beq.w	8011112 <phhalHw_Pn5180_SetConfig+0x1822>
 80100f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100f6:	f001 b83e 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 80100fa:	887a      	ldrh	r2, [r7, #2]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	322c      	adds	r2, #44	@ 0x2c
 8010100:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010104:	883a      	ldrh	r2, [r7, #0]
 8010106:	429a      	cmp	r2, r3
 8010108:	d105      	bne.n	8010116 <phhalHw_Pn5180_SetConfig+0x826>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010110:	2b01      	cmp	r3, #1
 8010112:	f001 8000 	beq.w	8011116 <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 8010116:	883b      	ldrh	r3, [r7, #0]
 8010118:	2b1f      	cmp	r3, #31
 801011a:	d903      	bls.n	8010124 <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801011c:	f240 2321 	movw	r3, #545	@ 0x221
 8010120:	f001 b829 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 8010124:	2300      	movs	r3, #0
 8010126:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 8010128:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 801012c:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 801012e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010130:	1c5a      	adds	r2, r3, #1
 8010132:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010134:	3338      	adds	r3, #56	@ 0x38
 8010136:	443b      	add	r3, r7
 8010138:	2220      	movs	r2, #32
 801013a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 801013e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010140:	1c5a      	adds	r2, r3, #1
 8010142:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010144:	3338      	adds	r3, #56	@ 0x38
 8010146:	443b      	add	r3, r7
 8010148:	2203      	movs	r2, #3
 801014a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010152:	1c59      	adds	r1, r3, #1
 8010154:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010156:	b2d2      	uxtb	r2, r2
 8010158:	3338      	adds	r3, #56	@ 0x38
 801015a:	443b      	add	r3, r7
 801015c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	0a1a      	lsrs	r2, r3, #8
 8010164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010166:	1c59      	adds	r1, r3, #1
 8010168:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801016a:	b2d2      	uxtb	r2, r2
 801016c:	3338      	adds	r3, #56	@ 0x38
 801016e:	443b      	add	r3, r7
 8010170:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	0c1a      	lsrs	r2, r3, #16
 8010178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801017a:	1c59      	adds	r1, r3, #1
 801017c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801017e:	b2d2      	uxtb	r2, r2
 8010180:	3338      	adds	r3, #56	@ 0x38
 8010182:	443b      	add	r3, r7
 8010184:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	0e1a      	lsrs	r2, r3, #24
 801018c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801018e:	1c59      	adds	r1, r3, #1
 8010190:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010192:	b2d2      	uxtb	r2, r2
 8010194:	3338      	adds	r3, #56	@ 0x38
 8010196:	443b      	add	r3, r7
 8010198:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 801019c:	883b      	ldrh	r3, [r7, #0]
 801019e:	035b      	lsls	r3, r3, #13
 80101a0:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 80101a4:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 80101a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101a8:	1c5a      	adds	r2, r3, #1
 80101aa:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80101ac:	3338      	adds	r3, #56	@ 0x38
 80101ae:	443b      	add	r3, r7
 80101b0:	2220      	movs	r2, #32
 80101b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80101b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101b8:	1c5a      	adds	r2, r3, #1
 80101ba:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80101bc:	3338      	adds	r3, #56	@ 0x38
 80101be:	443b      	add	r3, r7
 80101c0:	2202      	movs	r2, #2
 80101c2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101ca:	1c59      	adds	r1, r3, #1
 80101cc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80101ce:	b2d2      	uxtb	r2, r2
 80101d0:	3338      	adds	r3, #56	@ 0x38
 80101d2:	443b      	add	r3, r7
 80101d4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	0a1a      	lsrs	r2, r3, #8
 80101dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101de:	1c59      	adds	r1, r3, #1
 80101e0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80101e2:	b2d2      	uxtb	r2, r2
 80101e4:	3338      	adds	r3, #56	@ 0x38
 80101e6:	443b      	add	r3, r7
 80101e8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	0c1a      	lsrs	r2, r3, #16
 80101f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101f2:	1c59      	adds	r1, r3, #1
 80101f4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80101f6:	b2d2      	uxtb	r2, r2
 80101f8:	3338      	adds	r3, #56	@ 0x38
 80101fa:	443b      	add	r3, r7
 80101fc:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	0e1a      	lsrs	r2, r3, #24
 8010204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010206:	1c59      	adds	r1, r3, #1
 8010208:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801020a:	b2d2      	uxtb	r2, r2
 801020c:	3338      	adds	r3, #56	@ 0x38
 801020e:	443b      	add	r3, r7
 8010210:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8010214:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010216:	f107 030c 	add.w	r3, r7, #12
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f002 fb37 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8010222:	4603      	mov	r3, r0
 8010224:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010226:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <phhalHw_Pn5180_SetConfig+0x942>
 801022c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801022e:	f000 bfa2 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010232:	887a      	ldrh	r2, [r7, #2]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	322c      	adds	r2, #44	@ 0x2c
 8010238:	8839      	ldrh	r1, [r7, #0]
 801023a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 801023e:	f000 bf6a 	b.w	8011116 <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 8010242:	883b      	ldrh	r3, [r7, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 8768 	beq.w	801111a <phhalHw_Pn5180_SetConfig+0x182a>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010250:	2b01      	cmp	r3, #1
 8010252:	f040 8762 	bne.w	801111a <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 8010256:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801025a:	2100      	movs	r1, #0
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f002 faa1 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8010262:	4603      	mov	r3, r0
 8010264:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010266:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010268:	2b00      	cmp	r3, #0
 801026a:	d002      	beq.n	8010272 <phhalHw_Pn5180_SetConfig+0x982>
 801026c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801026e:	f000 bf82 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 801027a:	f000 bf4e 	b.w	801111a <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 801027e:	883b      	ldrh	r3, [r7, #0]
 8010280:	3302      	adds	r3, #2
 8010282:	b29a      	uxth	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801028e:	2b01      	cmp	r3, #1
 8010290:	f040 8745 	bne.w	801111e <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8010298:	3301      	adds	r3, #1
 801029a:	b29a      	uxth	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 80102a0:	f000 bf3d 	b.w	801111e <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80102a4:	f107 0118 	add.w	r1, r7, #24
 80102a8:	f107 021c 	add.w	r2, r7, #28
 80102ac:	f107 031a 	add.w	r3, r7, #26
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	460b      	mov	r3, r1
 80102b4:	2101      	movs	r1, #1
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f003 f995 	bl	80135e6 <phhalHw_Pn5180_GetRxBuffer>
 80102bc:	4603      	mov	r3, r0
 80102be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80102c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d002      	beq.n	80102cc <phhalHw_Pn5180_SetConfig+0x9dc>
 80102c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80102c8:	f000 bf55 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8b1b      	ldrh	r3, [r3, #24]
 80102d0:	883a      	ldrh	r2, [r7, #0]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d303      	bcc.n	80102de <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80102d6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80102da:	f000 bf4c 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	883a      	ldrh	r2, [r7, #0]
 80102e2:	83da      	strh	r2, [r3, #30]
        break;
 80102e4:	f000 bf46 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80102e8:	f107 0118 	add.w	r1, r7, #24
 80102ec:	f107 021c 	add.w	r2, r7, #28
 80102f0:	f107 031a 	add.w	r3, r7, #26
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	460b      	mov	r3, r1
 80102f8:	2101      	movs	r1, #1
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f003 f937 	bl	801356e <phhalHw_Pn5180_GetTxBuffer>
 8010300:	4603      	mov	r3, r0
 8010302:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010304:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010306:	2b00      	cmp	r3, #0
 8010308:	d002      	beq.n	8010310 <phhalHw_Pn5180_SetConfig+0xa20>
 801030a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801030c:	f000 bf33 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	8a1b      	ldrh	r3, [r3, #16]
 8010314:	883a      	ldrh	r2, [r7, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	d903      	bls.n	8010322 <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801031a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 801031e:	f000 bf2a 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	883a      	ldrh	r2, [r7, #0]
 8010326:	825a      	strh	r2, [r3, #18]
        break;
 8010328:	f000 bf24 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 801032c:	f107 0118 	add.w	r1, r7, #24
 8010330:	f107 021c 	add.w	r2, r7, #28
 8010334:	f107 031a 	add.w	r3, r7, #26
 8010338:	9300      	str	r3, [sp, #0]
 801033a:	460b      	mov	r3, r1
 801033c:	2101      	movs	r1, #1
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f003 f915 	bl	801356e <phhalHw_Pn5180_GetTxBuffer>
 8010344:	4603      	mov	r3, r0
 8010346:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010348:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <phhalHw_Pn5180_SetConfig+0xa64>
 801034e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010350:	f000 bf11 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	8a1b      	ldrh	r3, [r3, #16]
 801035c:	429a      	cmp	r2, r3
 801035e:	d303      	bcc.n	8010368 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010360:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010364:	f000 bf07 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 801036e:	4413      	add	r3, r2
 8010370:	883a      	ldrh	r2, [r7, #0]
 8010372:	b2d2      	uxtb	r2, r2
 8010374:	701a      	strb	r2, [r3, #0]
        break;
 8010376:	f000 befd 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 801037a:	887a      	ldrh	r2, [r7, #2]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	322c      	adds	r2, #44	@ 0x2c
 8010380:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010384:	883a      	ldrh	r2, [r7, #0]
 8010386:	429a      	cmp	r2, r3
 8010388:	d105      	bne.n	8010396 <phhalHw_Pn5180_SetConfig+0xaa6>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010390:	2b01      	cmp	r3, #1
 8010392:	f000 86c6 	beq.w	8011122 <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 8010396:	883b      	ldrh	r3, [r7, #0]
 8010398:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801039c:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 801039e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103a0:	0a1b      	lsrs	r3, r3, #8
 80103a2:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 80103a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d011      	beq.n	80103ce <phhalHw_Pn5180_SetConfig+0xade>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80103b0:	461a      	mov	r2, r3
 80103b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d00a      	beq.n	80103ce <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 80103b8:	883b      	ldrh	r3, [r7, #0]
 80103ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80103be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103c2:	d004      	beq.n	80103ce <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 80103c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103c6:	b2da      	uxtb	r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 80103ce:	883b      	ldrh	r3, [r7, #0]
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d104      	bne.n	80103e8 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 80103de:	883b      	ldrh	r3, [r7, #0]
 80103e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 80103e2:	230b      	movs	r3, #11
 80103e4:	803b      	strh	r3, [r7, #0]
 80103e6:	e00f      	b.n	8010408 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80103ee:	8839      	ldrh	r1, [r7, #0]
 80103f0:	22ff      	movs	r2, #255	@ 0xff
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f003 fd40 	bl	8013e78 <phhalHw_Pn5180_SetCardMode>
 80103f8:	4603      	mov	r3, r0
 80103fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80103fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <phhalHw_Pn5180_SetConfig+0xb18>
 8010402:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010404:	f000 beb7 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010408:	887a      	ldrh	r2, [r7, #2]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	322c      	adds	r2, #44	@ 0x2c
 801040e:	8839      	ldrh	r1, [r7, #0]
 8010410:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801041a:	2b04      	cmp	r3, #4
 801041c:	d11d      	bne.n	801045a <phhalHw_Pn5180_SetConfig+0xb6a>
 801041e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010420:	2b0b      	cmp	r3, #11
 8010422:	d11a      	bne.n	801045a <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 8010424:	2204      	movs	r2, #4
 8010426:	2142      	movs	r1, #66	@ 0x42
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f002 f8cf 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 801042e:	4603      	mov	r3, r0
 8010430:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010432:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010434:	2b00      	cmp	r3, #0
 8010436:	d002      	beq.n	801043e <phhalHw_Pn5180_SetConfig+0xb4e>
 8010438:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801043a:	f000 be9c 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 801043e:	2243      	movs	r2, #67	@ 0x43
 8010440:	213b      	movs	r1, #59	@ 0x3b
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f002 f8c2 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8010448:	4603      	mov	r3, r0
 801044a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801044c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801044e:	2b00      	cmp	r3, #0
 8010450:	f000 8081 	beq.w	8010556 <phhalHw_Pn5180_SetConfig+0xc66>
 8010454:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010456:	f000 be8e 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010460:	2b04      	cmp	r3, #4
 8010462:	d123      	bne.n	80104ac <phhalHw_Pn5180_SetConfig+0xbbc>
 8010464:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010466:	2b1b      	cmp	r3, #27
 8010468:	d120      	bne.n	80104ac <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 801046a:	2205      	movs	r2, #5
 801046c:	2142      	movs	r1, #66	@ 0x42
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f002 f8ac 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8010474:	4603      	mov	r3, r0
 8010476:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010478:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801047a:	2b00      	cmp	r3, #0
 801047c:	d002      	beq.n	8010484 <phhalHw_Pn5180_SetConfig+0xb94>
 801047e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010480:	f000 be79 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 8010484:	2244      	movs	r2, #68	@ 0x44
 8010486:	213b      	movs	r1, #59	@ 0x3b
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f002 f89f 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 801048e:	4603      	mov	r3, r0
 8010490:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010494:	2b00      	cmp	r3, #0
 8010496:	d002      	beq.n	801049e <phhalHw_Pn5180_SetConfig+0xbae>
 8010498:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801049a:	f000 be6c 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 801049e:	887a      	ldrh	r2, [r7, #2]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	322c      	adds	r2, #44	@ 0x2c
 80104a4:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80104a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80104aa:	e054      	b.n	8010556 <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80104b2:	2b04      	cmp	r3, #4
 80104b4:	d123      	bne.n	80104fe <phhalHw_Pn5180_SetConfig+0xc0e>
 80104b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d120      	bne.n	80104fe <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 80104bc:	2206      	movs	r2, #6
 80104be:	2142      	movs	r1, #66	@ 0x42
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f002 f883 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 80104c6:	4603      	mov	r3, r0
 80104c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80104ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <phhalHw_Pn5180_SetConfig+0xbe6>
 80104d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80104d2:	f000 be50 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 80104d6:	2245      	movs	r2, #69	@ 0x45
 80104d8:	213b      	movs	r1, #59	@ 0x3b
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f002 f876 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 80104e0:	4603      	mov	r3, r0
 80104e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80104e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <phhalHw_Pn5180_SetConfig+0xc00>
 80104ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80104ec:	f000 be43 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 80104f0:	887a      	ldrh	r2, [r7, #2]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	322c      	adds	r2, #44	@ 0x2c
 80104f6:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80104f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80104fc:	e02b      	b.n	8010556 <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010504:	2b04      	cmp	r3, #4
 8010506:	f040 860c 	bne.w	8011122 <phhalHw_Pn5180_SetConfig+0x1832>
 801050a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801050c:	2b01      	cmp	r3, #1
 801050e:	f040 8608 	bne.w	8011122 <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 8010512:	2207      	movs	r2, #7
 8010514:	2142      	movs	r1, #66	@ 0x42
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f002 f858 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 801051c:	4603      	mov	r3, r0
 801051e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010522:	2b00      	cmp	r3, #0
 8010524:	d002      	beq.n	801052c <phhalHw_Pn5180_SetConfig+0xc3c>
 8010526:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010528:	f000 be25 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 801052c:	2246      	movs	r2, #70	@ 0x46
 801052e:	213b      	movs	r1, #59	@ 0x3b
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f002 f84b 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8010536:	4603      	mov	r3, r0
 8010538:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801053a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <phhalHw_Pn5180_SetConfig+0xc56>
 8010540:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010542:	f000 be18 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 8010546:	887a      	ldrh	r2, [r7, #2]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	322c      	adds	r2, #44	@ 0x2c
 801054c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 801054e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 8010552:	f000 bde6 	b.w	8011122 <phhalHw_Pn5180_SetConfig+0x1832>
 8010556:	f000 bde4 	b.w	8011122 <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 801055a:	887a      	ldrh	r2, [r7, #2]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	322c      	adds	r2, #44	@ 0x2c
 8010560:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010564:	883a      	ldrh	r2, [r7, #0]
 8010566:	429a      	cmp	r2, r3
 8010568:	d105      	bne.n	8010576 <phhalHw_Pn5180_SetConfig+0xc86>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010570:	2b01      	cmp	r3, #1
 8010572:	f000 85d8 	beq.w	8011126 <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 8010576:	883b      	ldrh	r3, [r7, #0]
 8010578:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801057c:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 801057e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010580:	0a1b      	lsrs	r3, r3, #8
 8010582:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 8010584:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010586:	2b00      	cmp	r3, #0
 8010588:	d011      	beq.n	80105ae <phhalHw_Pn5180_SetConfig+0xcbe>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010590:	461a      	mov	r2, r3
 8010592:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010594:	4293      	cmp	r3, r2
 8010596:	d00a      	beq.n	80105ae <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 8010598:	883b      	ldrh	r3, [r7, #0]
 801059a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801059e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105a2:	d004      	beq.n	80105ae <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 80105a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80105a6:	b2da      	uxtb	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 80105ae:	883b      	ldrh	r3, [r7, #0]
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80105ba:	2b04      	cmp	r3, #4
 80105bc:	d106      	bne.n	80105cc <phhalHw_Pn5180_SetConfig+0xcdc>
 80105be:	883b      	ldrh	r3, [r7, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d103      	bne.n	80105cc <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 80105c4:	883b      	ldrh	r3, [r7, #0]
 80105c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 80105c8:	230f      	movs	r3, #15
 80105ca:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80105d2:	883a      	ldrh	r2, [r7, #0]
 80105d4:	21ff      	movs	r1, #255	@ 0xff
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f003 fc4e 	bl	8013e78 <phhalHw_Pn5180_SetCardMode>
 80105dc:	4603      	mov	r3, r0
 80105de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80105e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d002      	beq.n	80105ec <phhalHw_Pn5180_SetConfig+0xcfc>
 80105e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80105e8:	f000 bdc5 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 80105ec:	887a      	ldrh	r2, [r7, #2]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	322c      	adds	r2, #44	@ 0x2c
 80105f2:	8839      	ldrh	r1, [r7, #0]
 80105f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80105fe:	2b04      	cmp	r3, #4
 8010600:	f040 8591 	bne.w	8011126 <phhalHw_Pn5180_SetConfig+0x1836>
 8010604:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010606:	2b00      	cmp	r3, #0
 8010608:	f040 858d 	bne.w	8011126 <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 801060c:	f107 0308 	add.w	r3, r7, #8
 8010610:	461a      	mov	r2, r3
 8010612:	211a      	movs	r1, #26
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f002 f9ed 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 801061a:	4603      	mov	r3, r0
 801061c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801061e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <phhalHw_Pn5180_SetConfig+0xd3a>
 8010624:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010626:	f000 bda6 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8010630:	4013      	ands	r3, r2
 8010632:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	f043 0304 	orr.w	r3, r3, #4
 801063a:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	461a      	mov	r2, r3
 8010640:	211a      	movs	r1, #26
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f001 ffc2 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8010648:	4603      	mov	r3, r0
 801064a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801064c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801064e:	2b00      	cmp	r3, #0
 8010650:	d002      	beq.n	8010658 <phhalHw_Pn5180_SetConfig+0xd68>
 8010652:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010654:	f000 bd8f 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 8010658:	f107 0308 	add.w	r3, r7, #8
 801065c:	461a      	mov	r2, r3
 801065e:	211c      	movs	r1, #28
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f002 f9c7 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 8010666:	4603      	mov	r3, r0
 8010668:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801066a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <phhalHw_Pn5180_SetConfig+0xd86>
 8010670:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010672:	f000 bd80 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 8010676:	68ba      	ldr	r2, [r7, #8]
 8010678:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 801067c:	4013      	ands	r3, r2
 801067e:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	461a      	mov	r2, r3
 8010684:	211c      	movs	r1, #28
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f001 ffa0 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 801068c:	4603      	mov	r3, r0
 801068e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010690:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010692:	2b00      	cmp	r3, #0
 8010694:	d002      	beq.n	801069c <phhalHw_Pn5180_SetConfig+0xdac>
 8010696:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010698:	f000 bd6d 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 801069c:	887a      	ldrh	r2, [r7, #2]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	322c      	adds	r2, #44	@ 0x2c
 80106a2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80106a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 80106a8:	f000 bd3d 	b.w	8011126 <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 80106ac:	887a      	ldrh	r2, [r7, #2]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	322c      	adds	r2, #44	@ 0x2c
 80106b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80106b6:	883a      	ldrh	r2, [r7, #0]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d10a      	bne.n	80106d2 <phhalHw_Pn5180_SetConfig+0xde2>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d105      	bne.n	80106d2 <phhalHw_Pn5180_SetConfig+0xde2>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	f000 852c 	beq.w	801112a <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 80106d2:	883b      	ldrh	r3, [r7, #0]
 80106d4:	2200      	movs	r2, #0
 80106d6:	4619      	mov	r1, r3
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f003 fec3 	bl	8014464 <phhalHw_Pn5180_SetTmo>
 80106de:	4603      	mov	r3, r0
 80106e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80106e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d002      	beq.n	80106ee <phhalHw_Pn5180_SetConfig+0xdfe>
 80106e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80106ea:	f000 bd44 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 80106ee:	887a      	ldrh	r2, [r7, #2]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	322c      	adds	r2, #44	@ 0x2c
 80106f4:	8839      	ldrh	r1, [r7, #0]
 80106f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 8010702:	f000 bd12 	b.w	801112a <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010706:	887a      	ldrh	r2, [r7, #2]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	322c      	adds	r2, #44	@ 0x2c
 801070c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010710:	883a      	ldrh	r2, [r7, #0]
 8010712:	429a      	cmp	r2, r3
 8010714:	d10a      	bne.n	801072c <phhalHw_Pn5180_SetConfig+0xe3c>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801071c:	2b01      	cmp	r3, #1
 801071e:	d105      	bne.n	801072c <phhalHw_Pn5180_SetConfig+0xe3c>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010726:	2b01      	cmp	r3, #1
 8010728:	f000 8501 	beq.w	801112e <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 801072c:	883b      	ldrh	r3, [r7, #0]
 801072e:	2201      	movs	r2, #1
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f003 fe96 	bl	8014464 <phhalHw_Pn5180_SetTmo>
 8010738:	4603      	mov	r3, r0
 801073a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801073c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <phhalHw_Pn5180_SetConfig+0xe58>
 8010742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010744:	f000 bd17 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010748:	887a      	ldrh	r2, [r7, #2]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	322c      	adds	r2, #44	@ 0x2c
 801074e:	8839      	ldrh	r1, [r7, #0]
 8010750:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 801075c:	f000 bce7 	b.w	801112e <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010760:	887a      	ldrh	r2, [r7, #2]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	322c      	adds	r2, #44	@ 0x2c
 8010766:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801076a:	883a      	ldrh	r2, [r7, #0]
 801076c:	429a      	cmp	r2, r3
 801076e:	d105      	bne.n	801077c <phhalHw_Pn5180_SetConfig+0xe8c>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010776:	2b01      	cmp	r3, #1
 8010778:	f000 84db 	beq.w	8011132 <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010782:	2b04      	cmp	r3, #4
 8010784:	d008      	beq.n	8010798 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 801078c:	2b06      	cmp	r3, #6
 801078e:	d003      	beq.n	8010798 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 8010790:	f240 2325 	movw	r3, #549	@ 0x225
 8010794:	f000 bcef 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801079e:	2b04      	cmp	r3, #4
 80107a0:	d106      	bne.n	80107b0 <phhalHw_Pn5180_SetConfig+0xec0>
 80107a2:	883b      	ldrh	r3, [r7, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d003      	beq.n	80107b0 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80107a8:	f240 2323 	movw	r3, #547	@ 0x223
 80107ac:	f000 bce3 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 80107bc:	883b      	ldrh	r3, [r7, #0]
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f003 fb5a 	bl	8013e78 <phhalHw_Pn5180_SetCardMode>
 80107c4:	4603      	mov	r3, r0
 80107c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80107c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d002      	beq.n	80107d4 <phhalHw_Pn5180_SetConfig+0xee4>
 80107ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80107d0:	f000 bcd1 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	883a      	ldrh	r2, [r7, #0]
 80107d8:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 80107dc:	f000 bca9 	b.w	8011132 <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 80107e0:	883b      	ldrh	r3, [r7, #0]
 80107e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d006      	beq.n	80107f8 <phhalHw_Pn5180_SetConfig+0xf08>
 80107ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107ee:	d003      	beq.n	80107f8 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80107f0:	f240 2321 	movw	r3, #545	@ 0x221
 80107f4:	f000 bcbf 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 80107f8:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 80107fa:	883b      	ldrh	r3, [r7, #0]
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b01      	cmp	r3, #1
 8010800:	dc02      	bgt.n	8010808 <phhalHw_Pn5180_SetConfig+0xf18>
 8010802:	2b00      	cmp	r3, #0
 8010804:	da03      	bge.n	801080e <phhalHw_Pn5180_SetConfig+0xf1e>
 8010806:	e00f      	b.n	8010828 <phhalHw_Pn5180_SetConfig+0xf38>
 8010808:	2b02      	cmp	r3, #2
 801080a:	d009      	beq.n	8010820 <phhalHw_Pn5180_SetConfig+0xf30>
 801080c:	e00c      	b.n	8010828 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	883a      	ldrh	r2, [r7, #0]
 8010818:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 801081a:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 801081c:	f000 bcaa 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8010820:	f240 2323 	movw	r3, #547	@ 0x223
 8010824:	f000 bca7 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010828:	f240 2321 	movw	r3, #545	@ 0x221
 801082c:	f000 bca3 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 8010830:	883b      	ldrh	r3, [r7, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d103      	bne.n	801083e <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010836:	f240 2321 	movw	r3, #545	@ 0x221
 801083a:	f000 bc9c 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	883a      	ldrh	r2, [r7, #0]
 8010842:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 8010844:	f000 bc96 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	883a      	ldrh	r2, [r7, #0]
 801084c:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 801084e:	f000 bc91 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 8010852:	883b      	ldrh	r3, [r7, #0]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d106      	bne.n	8010866 <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 8010858:	883b      	ldrh	r3, [r7, #0]
 801085a:	b2da      	uxtb	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 8010862:	f000 bc87 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 8010866:	883b      	ldrh	r3, [r7, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d106      	bne.n	801087a <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 801086c:	883b      	ldrh	r3, [r7, #0]
 801086e:	b2da      	uxtb	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 8010876:	f000 bc7d 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801087a:	f240 2321 	movw	r3, #545	@ 0x221
 801087e:	f000 bc7a 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 8010882:	883b      	ldrh	r3, [r7, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d105      	bne.n	8010894 <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 8010890:	f000 bc70 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 801089c:	f000 bc6a 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 80108a0:	883b      	ldrh	r3, [r7, #0]
 80108a2:	b2da      	uxtb	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 80108aa:	f000 bc63 	b.w	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 80108ae:	883b      	ldrh	r3, [r7, #0]
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 80108b8:	883b      	ldrh	r3, [r7, #0]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d122      	bne.n	8010904 <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80108c4:	2b03      	cmp	r3, #3
 80108c6:	d00e      	beq.n	80108e6 <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 80108c8:	f240 1207 	movw	r2, #263	@ 0x107
 80108cc:	2128      	movs	r1, #40	@ 0x28
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7fe fa6e 	bl	800edb0 <phhalHw_Pn5180_WriteRegister>
 80108d4:	4603      	mov	r3, r0
 80108d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80108d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 842b 	beq.w	8011136 <phhalHw_Pn5180_SetConfig+0x1846>
 80108e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108e2:	f000 bc48 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 80108e6:	f240 1203 	movw	r2, #259	@ 0x103
 80108ea:	2128      	movs	r1, #40	@ 0x28
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7fe fa5f 	bl	800edb0 <phhalHw_Pn5180_WriteRegister>
 80108f2:	4603      	mov	r3, r0
 80108f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80108f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f000 841c 	beq.w	8011136 <phhalHw_Pn5180_SetConfig+0x1846>
 80108fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010900:	f000 bc39 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 8010904:	f06f 0201 	mvn.w	r2, #1
 8010908:	2128      	movs	r1, #40	@ 0x28
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f001 ff4a 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8010910:	4603      	mov	r3, r0
 8010912:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010914:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 840d 	beq.w	8011136 <phhalHw_Pn5180_SetConfig+0x1846>
 801091c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801091e:	f000 bc2a 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 8010922:	883b      	ldrh	r3, [r7, #0]
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fec6 	bl	80116b8 <phhalHw_Pn5180_SetMinFDT>
 801092c:	4603      	mov	r3, r0
 801092e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010930:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 8401 	beq.w	801113a <phhalHw_Pn5180_SetConfig+0x184a>
 8010938:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801093a:	f000 bc1c 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 801093e:	883b      	ldrh	r3, [r7, #0]
 8010940:	2b01      	cmp	r3, #1
 8010942:	d111      	bne.n	8010968 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2201      	movs	r2, #1
 8010948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 801094c:	2202      	movs	r2, #2
 801094e:	2104      	movs	r1, #4
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f001 feb1 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8010956:	4603      	mov	r3, r0
 8010958:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801095a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801095c:	2b00      	cmp	r3, #0
 801095e:	f000 83ee 	beq.w	801113e <phhalHw_Pn5180_SetConfig+0x184e>
 8010962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010964:	f000 bc07 	b.w	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 8010970:	f06f 0202 	mvn.w	r2, #2
 8010974:	2104      	movs	r1, #4
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f001 ff14 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801097c:	4603      	mov	r3, r0
 801097e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010980:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 83db 	beq.w	801113e <phhalHw_Pn5180_SetConfig+0x184e>
 8010988:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801098a:	e3f4      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 801098c:	883b      	ldrh	r3, [r7, #0]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d005      	beq.n	801099e <phhalHw_Pn5180_SetConfig+0x10ae>
 8010992:	883b      	ldrh	r3, [r7, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d002      	beq.n	801099e <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010998:	f240 2321 	movw	r3, #545	@ 0x221
 801099c:	e3eb      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 801099e:	883b      	ldrh	r3, [r7, #0]
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	70da      	strb	r2, [r3, #3]
        break;
 80109a6:	e3e5      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 80109a8:	883b      	ldrh	r3, [r7, #0]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d00c      	beq.n	80109c8 <phhalHw_Pn5180_SetConfig+0x10d8>
 80109ae:	883b      	ldrh	r3, [r7, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d009      	beq.n	80109c8 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80109b4:	f240 2321 	movw	r3, #545	@ 0x221
 80109b8:	e3dd      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
 80109ba:	bf00      	nop
 80109bc:	f3af 8000 	nop.w
 80109c0:	51eb851f 	.word	0x51eb851f
 80109c4:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 80109c8:	883b      	ldrh	r3, [r7, #0]
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d10c      	bne.n	80109e8 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 80109ce:	2280      	movs	r2, #128	@ 0x80
 80109d0:	2101      	movs	r1, #1
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f001 fdfa 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 80109d8:	4603      	mov	r3, r0
 80109da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80109dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f000 83af 	beq.w	8011142 <phhalHw_Pn5180_SetConfig+0x1852>
 80109e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109e6:	e3c6      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 80109e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80109ec:	2101      	movs	r1, #1
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f001 fed8 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80109f4:	4603      	mov	r3, r0
 80109f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80109f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 83a1 	beq.w	8011142 <phhalHw_Pn5180_SetConfig+0x1852>
 8010a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a02:	e3b8      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 8010a04:	883b      	ldrh	r3, [r7, #0]
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d005      	beq.n	8010a16 <phhalHw_Pn5180_SetConfig+0x1126>
 8010a0a:	883b      	ldrh	r3, [r7, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d002      	beq.n	8010a16 <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a10:	f240 2321 	movw	r3, #545	@ 0x221
 8010a14:	e3af      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 8010a16:	883b      	ldrh	r3, [r7, #0]
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 8010a20:	e3a8      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 8010a22:	883b      	ldrh	r3, [r7, #0]
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d005      	beq.n	8010a34 <phhalHw_Pn5180_SetConfig+0x1144>
 8010a28:	883b      	ldrh	r3, [r7, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d002      	beq.n	8010a34 <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a2e:	f240 2321 	movw	r3, #545	@ 0x221
 8010a32:	e3a0      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 8010a34:	883b      	ldrh	r3, [r7, #0]
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d10d      	bne.n	8010a56 <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 8010a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010a3e:	2118      	movs	r1, #24
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f001 feaf 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8010a46:	4603      	mov	r3, r0
 8010a48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010a4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f000 837a 	beq.w	8011146 <phhalHw_Pn5180_SetConfig+0x1856>
 8010a52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a54:	e38f      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 8010a56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010a5a:	2118      	movs	r1, #24
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f001 fe2b 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8010a62:	4603      	mov	r3, r0
 8010a64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f000 836c 	beq.w	8011146 <phhalHw_Pn5180_SetConfig+0x1856>
 8010a6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a70:	e381      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010a78:	2b05      	cmp	r3, #5
 8010a7a:	d00c      	beq.n	8010a96 <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 8010a82:	2b04      	cmp	r3, #4
 8010a84:	d007      	beq.n	8010a96 <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 8010a8c:	2b06      	cmp	r3, #6
 8010a8e:	d002      	beq.n	8010a96 <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 8010a90:	f240 2325 	movw	r3, #549	@ 0x225
 8010a94:	e36f      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 8010a96:	883b      	ldrh	r3, [r7, #0]
 8010a98:	2b07      	cmp	r3, #7
 8010a9a:	d82b      	bhi.n	8010af4 <phhalHw_Pn5180_SetConfig+0x1204>
 8010a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8010aa4 <phhalHw_Pn5180_SetConfig+0x11b4>)
 8010a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa2:	bf00      	nop
 8010aa4:	08010afb 	.word	0x08010afb
 8010aa8:	08010ac5 	.word	0x08010ac5
 8010aac:	08010ac5 	.word	0x08010ac5
 8010ab0:	08010af5 	.word	0x08010af5
 8010ab4:	08010ac5 	.word	0x08010ac5
 8010ab8:	08010ad5 	.word	0x08010ad5
 8010abc:	08010ae5 	.word	0x08010ae5
 8010ac0:	08010ae5 	.word	0x08010ae5
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010aca:	2b05      	cmp	r3, #5
 8010acc:	d017      	beq.n	8010afe <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010ace:	f240 2321 	movw	r3, #545	@ 0x221
 8010ad2:	e350      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ada:	2b04      	cmp	r3, #4
 8010adc:	d011      	beq.n	8010b02 <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010ade:	f240 2321 	movw	r3, #545	@ 0x221
 8010ae2:	e348      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010aea:	2b06      	cmp	r3, #6
 8010aec:	d00b      	beq.n	8010b06 <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010aee:	f240 2321 	movw	r3, #545	@ 0x221
 8010af2:	e340      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8010af4:	f240 2323 	movw	r3, #547	@ 0x223
 8010af8:	e33d      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 8010afa:	bf00      	nop
 8010afc:	e004      	b.n	8010b08 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 8010afe:	bf00      	nop
 8010b00:	e002      	b.n	8010b08 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 8010b02:	bf00      	nop
 8010b04:	e000      	b.n	8010b08 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 8010b06:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 8010b0c:	883b      	ldrh	r3, [r7, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d103      	bne.n	8010b1a <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 8010b12:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 8010b16:	60bb      	str	r3, [r7, #8]
 8010b18:	e002      	b.n	8010b20 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 8010b1a:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 8010b1e:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 8010b20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010b26:	3338      	adds	r3, #56	@ 0x38
 8010b28:	443b      	add	r3, r7
 8010b2a:	2218      	movs	r2, #24
 8010b2c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8010b30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b32:	1c5a      	adds	r2, r3, #1
 8010b34:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010b36:	3338      	adds	r3, #56	@ 0x38
 8010b38:	443b      	add	r3, r7
 8010b3a:	2203      	movs	r2, #3
 8010b3c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b44:	1c59      	adds	r1, r3, #1
 8010b46:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010b48:	b2d2      	uxtb	r2, r2
 8010b4a:	3338      	adds	r3, #56	@ 0x38
 8010b4c:	443b      	add	r3, r7
 8010b4e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	0a1a      	lsrs	r2, r3, #8
 8010b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b58:	1c59      	adds	r1, r3, #1
 8010b5a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010b5c:	b2d2      	uxtb	r2, r2
 8010b5e:	3338      	adds	r3, #56	@ 0x38
 8010b60:	443b      	add	r3, r7
 8010b62:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	0c1a      	lsrs	r2, r3, #16
 8010b6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b6c:	1c59      	adds	r1, r3, #1
 8010b6e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010b70:	b2d2      	uxtb	r2, r2
 8010b72:	3338      	adds	r3, #56	@ 0x38
 8010b74:	443b      	add	r3, r7
 8010b76:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	0e1a      	lsrs	r2, r3, #24
 8010b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b80:	1c59      	adds	r1, r3, #1
 8010b82:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010b84:	b2d2      	uxtb	r2, r2
 8010b86:	3338      	adds	r3, #56	@ 0x38
 8010b88:	443b      	add	r3, r7
 8010b8a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 8010b92:	883b      	ldrh	r3, [r7, #0]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	2b06      	cmp	r3, #6
 8010b98:	d822      	bhi.n	8010be0 <phhalHw_Pn5180_SetConfig+0x12f0>
 8010b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8010ba0 <phhalHw_Pn5180_SetConfig+0x12b0>)
 8010b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba0:	08010bbd 	.word	0x08010bbd
 8010ba4:	08010bc3 	.word	0x08010bc3
 8010ba8:	08010be1 	.word	0x08010be1
 8010bac:	08010bc9 	.word	0x08010bc9
 8010bb0:	08010bcf 	.word	0x08010bcf
 8010bb4:	08010bd5 	.word	0x08010bd5
 8010bb8:	08010bdb 	.word	0x08010bdb
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 8010bbc:	2303      	movs	r3, #3
 8010bbe:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8010bc0:	e00f      	b.n	8010be2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8010bc6:	e00c      	b.n	8010be2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 8010bc8:	2302      	movs	r3, #2
 8010bca:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8010bcc:	e009      	b.n	8010be2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 8010bce:	2303      	movs	r3, #3
 8010bd0:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8010bd2:	e006      	b.n	8010be2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8010bd8:	e003      	b.n	8010be2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 8010bda:	2302      	movs	r3, #2
 8010bdc:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8010bde:	e000      	b.n	8010be2 <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 8010be0:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 8010be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be4:	019b      	lsls	r3, r3, #6
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 8010bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bec:	029b      	lsls	r3, r3, #10
 8010bee:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 8010bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010bfa:	1c5a      	adds	r2, r3, #1
 8010bfc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010bfe:	3338      	adds	r3, #56	@ 0x38
 8010c00:	443b      	add	r3, r7
 8010c02:	2218      	movs	r2, #24
 8010c04:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8010c08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c0a:	1c5a      	adds	r2, r3, #1
 8010c0c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010c0e:	3338      	adds	r3, #56	@ 0x38
 8010c10:	443b      	add	r3, r7
 8010c12:	2202      	movs	r2, #2
 8010c14:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010c18:	68ba      	ldr	r2, [r7, #8]
 8010c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c1c:	1c59      	adds	r1, r3, #1
 8010c1e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010c20:	b2d2      	uxtb	r2, r2
 8010c22:	3338      	adds	r3, #56	@ 0x38
 8010c24:	443b      	add	r3, r7
 8010c26:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	0a1a      	lsrs	r2, r3, #8
 8010c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c30:	1c59      	adds	r1, r3, #1
 8010c32:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010c34:	b2d2      	uxtb	r2, r2
 8010c36:	3338      	adds	r3, #56	@ 0x38
 8010c38:	443b      	add	r3, r7
 8010c3a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	0c1a      	lsrs	r2, r3, #16
 8010c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c44:	1c59      	adds	r1, r3, #1
 8010c46:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010c48:	b2d2      	uxtb	r2, r2
 8010c4a:	3338      	adds	r3, #56	@ 0x38
 8010c4c:	443b      	add	r3, r7
 8010c4e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	0e1a      	lsrs	r2, r3, #24
 8010c56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c58:	1c59      	adds	r1, r3, #1
 8010c5a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010c5c:	b2d2      	uxtb	r2, r2
 8010c5e:	3338      	adds	r3, #56	@ 0x38
 8010c60:	443b      	add	r3, r7
 8010c62:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8010c66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010c68:	f107 030c 	add.w	r3, r7, #12
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f001 fe0e 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8010c74:	4603      	mov	r3, r0
 8010c76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010c78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f000 8265 	beq.w	801114a <phhalHw_Pn5180_SetConfig+0x185a>
 8010c80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c82:	e278      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c8a:	2b05      	cmp	r3, #5
 8010c8c:	d002      	beq.n	8010c94 <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 8010c8e:	f240 2325 	movw	r3, #549	@ 0x225
 8010c92:	e270      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 8010c94:	883b      	ldrh	r3, [r7, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d004      	beq.n	8010ca4 <phhalHw_Pn5180_SetConfig+0x13b4>
 8010c9a:	2b03      	cmp	r3, #3
 8010c9c:	d002      	beq.n	8010ca4 <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010c9e:	f240 2321 	movw	r3, #545	@ 0x221
 8010ca2:	e268      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 8010ca4:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 8010ca6:	883b      	ldrh	r3, [r7, #0]
 8010ca8:	2b03      	cmp	r3, #3
 8010caa:	f040 8083 	bne.w	8010db4 <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 8010cb2:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 8010cb6:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 8010cb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010cbe:	3338      	adds	r3, #56	@ 0x38
 8010cc0:	443b      	add	r3, r7
 8010cc2:	2218      	movs	r2, #24
 8010cc4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8010cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010cce:	3338      	adds	r3, #56	@ 0x38
 8010cd0:	443b      	add	r3, r7
 8010cd2:	2203      	movs	r2, #3
 8010cd4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cdc:	1c59      	adds	r1, r3, #1
 8010cde:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010ce0:	b2d2      	uxtb	r2, r2
 8010ce2:	3338      	adds	r3, #56	@ 0x38
 8010ce4:	443b      	add	r3, r7
 8010ce6:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	0a1a      	lsrs	r2, r3, #8
 8010cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cf0:	1c59      	adds	r1, r3, #1
 8010cf2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010cf4:	b2d2      	uxtb	r2, r2
 8010cf6:	3338      	adds	r3, #56	@ 0x38
 8010cf8:	443b      	add	r3, r7
 8010cfa:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	0c1a      	lsrs	r2, r3, #16
 8010d02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d04:	1c59      	adds	r1, r3, #1
 8010d06:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010d08:	b2d2      	uxtb	r2, r2
 8010d0a:	3338      	adds	r3, #56	@ 0x38
 8010d0c:	443b      	add	r3, r7
 8010d0e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	0e1a      	lsrs	r2, r3, #24
 8010d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d18:	1c59      	adds	r1, r3, #1
 8010d1a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010d1c:	b2d2      	uxtb	r2, r2
 8010d1e:	3338      	adds	r3, #56	@ 0x38
 8010d20:	443b      	add	r3, r7
 8010d22:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 8010d26:	2300      	movs	r3, #0
 8010d28:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 8010d2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d2c:	1c5a      	adds	r2, r3, #1
 8010d2e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010d30:	3338      	adds	r3, #56	@ 0x38
 8010d32:	443b      	add	r3, r7
 8010d34:	2218      	movs	r2, #24
 8010d36:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8010d3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d3c:	1c5a      	adds	r2, r3, #1
 8010d3e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010d40:	3338      	adds	r3, #56	@ 0x38
 8010d42:	443b      	add	r3, r7
 8010d44:	2202      	movs	r2, #2
 8010d46:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d4e:	1c59      	adds	r1, r3, #1
 8010d50:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010d52:	b2d2      	uxtb	r2, r2
 8010d54:	3338      	adds	r3, #56	@ 0x38
 8010d56:	443b      	add	r3, r7
 8010d58:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	0a1a      	lsrs	r2, r3, #8
 8010d60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d62:	1c59      	adds	r1, r3, #1
 8010d64:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010d66:	b2d2      	uxtb	r2, r2
 8010d68:	3338      	adds	r3, #56	@ 0x38
 8010d6a:	443b      	add	r3, r7
 8010d6c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	0c1a      	lsrs	r2, r3, #16
 8010d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d76:	1c59      	adds	r1, r3, #1
 8010d78:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010d7a:	b2d2      	uxtb	r2, r2
 8010d7c:	3338      	adds	r3, #56	@ 0x38
 8010d7e:	443b      	add	r3, r7
 8010d80:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	0e1a      	lsrs	r2, r3, #24
 8010d88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d8a:	1c59      	adds	r1, r3, #1
 8010d8c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010d8e:	b2d2      	uxtb	r2, r2
 8010d90:	3338      	adds	r3, #56	@ 0x38
 8010d92:	443b      	add	r3, r7
 8010d94:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8010d98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d9a:	f107 030c 	add.w	r3, r7, #12
 8010d9e:	4619      	mov	r1, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f001 fd75 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8010da6:	4603      	mov	r3, r0
 8010da8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010daa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d003      	beq.n	8010db8 <phhalHw_Pn5180_SetConfig+0x14c8>
 8010db0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010db2:	e1e0      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 8010db4:	bf00      	nop
 8010db6:	e1dd      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 8010db8:	bf00      	nop
        }

        break;
 8010dba:	e1db      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 8010dbc:	883a      	ldrh	r2, [r7, #0]
 8010dbe:	f240 1303 	movw	r3, #259	@ 0x103
 8010dc2:	4013      	ands	r3, r2
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010dc8:	f240 2321 	movw	r3, #545	@ 0x221
 8010dcc:	e1d3      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 8010dd6:	883b      	ldrh	r3, [r7, #0]
 8010dd8:	f003 0301 	and.w	r3, r3, #1
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d015      	beq.n	8010e0c <phhalHw_Pn5180_SetConfig+0x151c>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010de6:	2b06      	cmp	r3, #6
 8010de8:	d110      	bne.n	8010e0c <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 8010dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dec:	f043 0304 	orr.w	r3, r3, #4
 8010df0:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 8010df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010df4:	f043 0302 	orr.w	r3, r3, #2
 8010df8:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 8010dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dfc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8010e00:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 8010e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e04:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8010e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e0a:	e008      	b.n	8010e1e <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 8010e0c:	883b      	ldrh	r3, [r7, #0]
 8010e0e:	f003 0302 	and.w	r3, r3, #2
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d003      	beq.n	8010e1e <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 8010e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e18:	f043 0304 	orr.w	r3, r3, #4
 8010e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 8010e1e:	883b      	ldrh	r3, [r7, #0]
 8010e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d004      	beq.n	8010e32 <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 8010e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2a:	f043 0302 	orr.w	r3, r3, #2
 8010e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e30:	e003      	b.n	8010e3a <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 8010e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e34:	f043 0302 	orr.w	r3, r3, #2
 8010e38:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e40:	2b06      	cmp	r3, #6
 8010e42:	d10c      	bne.n	8010e5e <phhalHw_Pn5180_SetConfig+0x156e>
 8010e44:	883b      	ldrh	r3, [r7, #0]
 8010e46:	f003 0302 	and.w	r3, r3, #2
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d007      	beq.n	8010e5e <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 8010e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e50:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8010e54:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 8010e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e58:	f043 0318 	orr.w	r3, r3, #24
 8010e5c:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 8010e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e64:	43db      	mvns	r3, r3
 8010e66:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8010e68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e6a:	1c5a      	adds	r2, r3, #1
 8010e6c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010e6e:	3338      	adds	r3, #56	@ 0x38
 8010e70:	443b      	add	r3, r7
 8010e72:	2219      	movs	r2, #25
 8010e74:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8010e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e7a:	1c5a      	adds	r2, r3, #1
 8010e7c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010e7e:	3338      	adds	r3, #56	@ 0x38
 8010e80:	443b      	add	r3, r7
 8010e82:	2203      	movs	r2, #3
 8010e84:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e8c:	1c59      	adds	r1, r3, #1
 8010e8e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010e90:	b2d2      	uxtb	r2, r2
 8010e92:	3338      	adds	r3, #56	@ 0x38
 8010e94:	443b      	add	r3, r7
 8010e96:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	0a1a      	lsrs	r2, r3, #8
 8010e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ea0:	1c59      	adds	r1, r3, #1
 8010ea2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010ea4:	b2d2      	uxtb	r2, r2
 8010ea6:	3338      	adds	r3, #56	@ 0x38
 8010ea8:	443b      	add	r3, r7
 8010eaa:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	0c1a      	lsrs	r2, r3, #16
 8010eb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010eb4:	1c59      	adds	r1, r3, #1
 8010eb6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010eb8:	b2d2      	uxtb	r2, r2
 8010eba:	3338      	adds	r3, #56	@ 0x38
 8010ebc:	443b      	add	r3, r7
 8010ebe:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	0e1a      	lsrs	r2, r3, #24
 8010ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ec8:	1c59      	adds	r1, r3, #1
 8010eca:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010ecc:	b2d2      	uxtb	r2, r2
 8010ece:	3338      	adds	r3, #56	@ 0x38
 8010ed0:	443b      	add	r3, r7
 8010ed2:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 8010ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed8:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8010eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010ee0:	3338      	adds	r3, #56	@ 0x38
 8010ee2:	443b      	add	r3, r7
 8010ee4:	2219      	movs	r2, #25
 8010ee6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8010eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010eec:	1c5a      	adds	r2, r3, #1
 8010eee:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010ef0:	3338      	adds	r3, #56	@ 0x38
 8010ef2:	443b      	add	r3, r7
 8010ef4:	2202      	movs	r2, #2
 8010ef6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010efa:	68ba      	ldr	r2, [r7, #8]
 8010efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010efe:	1c59      	adds	r1, r3, #1
 8010f00:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010f02:	b2d2      	uxtb	r2, r2
 8010f04:	3338      	adds	r3, #56	@ 0x38
 8010f06:	443b      	add	r3, r7
 8010f08:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	0a1a      	lsrs	r2, r3, #8
 8010f10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f12:	1c59      	adds	r1, r3, #1
 8010f14:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010f16:	b2d2      	uxtb	r2, r2
 8010f18:	3338      	adds	r3, #56	@ 0x38
 8010f1a:	443b      	add	r3, r7
 8010f1c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	0c1a      	lsrs	r2, r3, #16
 8010f24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f26:	1c59      	adds	r1, r3, #1
 8010f28:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010f2a:	b2d2      	uxtb	r2, r2
 8010f2c:	3338      	adds	r3, #56	@ 0x38
 8010f2e:	443b      	add	r3, r7
 8010f30:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	0e1a      	lsrs	r2, r3, #24
 8010f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f3a:	1c59      	adds	r1, r3, #1
 8010f3c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010f3e:	b2d2      	uxtb	r2, r2
 8010f40:	3338      	adds	r3, #56	@ 0x38
 8010f42:	443b      	add	r3, r7
 8010f44:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8010f48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010f4a:	f107 030c 	add.w	r3, r7, #12
 8010f4e:	4619      	mov	r1, r3
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f001 fc9d 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8010f56:	4603      	mov	r3, r0
 8010f58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010f5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 80f6 	beq.w	801114e <phhalHw_Pn5180_SetConfig+0x185e>
 8010f62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f64:	e107      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 8010f66:	883b      	ldrh	r3, [r7, #0]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d005      	beq.n	8010f78 <phhalHw_Pn5180_SetConfig+0x1688>
 8010f6c:	883b      	ldrh	r3, [r7, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d002      	beq.n	8010f78 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010f72:	f240 2321 	movw	r3, #545	@ 0x221
 8010f76:	e0fe      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 8010f78:	883b      	ldrh	r3, [r7, #0]
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d111      	bne.n	8010fa2 <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8010f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f82:	2100      	movs	r1, #0
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f001 fb97 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010f8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d001      	beq.n	8010f98 <phhalHw_Pn5180_SetConfig+0x16a8>
 8010f94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f96:	e0ee      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 8010fa0:	e0e8      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8010fa2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f001 fbfb 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010fb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d001      	beq.n	8010fbc <phhalHw_Pn5180_SetConfig+0x16cc>
 8010fb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fba:	e0dc      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 8010fc4:	e0d6      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 8010fc6:	883b      	ldrh	r3, [r7, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d101      	bne.n	8010fd0 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	e0d2      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 8010fd8:	2300      	movs	r3, #0
 8010fda:	2202      	movs	r2, #2
 8010fdc:	2100      	movs	r1, #0
 8010fde:	4868      	ldr	r0, [pc, #416]	@ (8011180 <phhalHw_Pn5180_SetConfig+0x1890>)
 8010fe0:	f00a fc90 	bl	801b904 <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 8010fe4:	883b      	ldrh	r3, [r7, #0]
 8010fe6:	4a67      	ldr	r2, [pc, #412]	@ (8011184 <phhalHw_Pn5180_SetConfig+0x1894>)
 8010fe8:	4619      	mov	r1, r3
 8010fea:	4867      	ldr	r0, [pc, #412]	@ (8011188 <phhalHw_Pn5180_SetConfig+0x1898>)
 8010fec:	f00a fa64 	bl	801b4b8 <phDriver_TimerStart>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010ff4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f000 80ab 	beq.w	8011152 <phhalHw_Pn5180_SetConfig+0x1862>
 8010ffc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ffe:	e0ba      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 8011000:	883b      	ldrh	r3, [r7, #0]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d107      	bne.n	8011016 <phhalHw_Pn5180_SetConfig+0x1726>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801100c:	2b04      	cmp	r3, #4
 801100e:	d002      	beq.n	8011016 <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 8011010:	f240 2325 	movw	r3, #549	@ 0x225
 8011014:	e0af      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011016:	883b      	ldrh	r3, [r7, #0]
 8011018:	2201      	movs	r2, #1
 801101a:	4619      	mov	r1, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f002 fea1 	bl	8013d64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 8011022:	4603      	mov	r3, r0
 8011024:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011028:	2b00      	cmp	r3, #0
 801102a:	f000 8094 	beq.w	8011156 <phhalHw_Pn5180_SetConfig+0x1866>
 801102e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011030:	e0a1      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011032:	883b      	ldrh	r3, [r7, #0]
 8011034:	2202      	movs	r2, #2
 8011036:	4619      	mov	r1, r3
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f002 fe93 	bl	8013d64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 801103e:	4603      	mov	r3, r0
 8011040:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011042:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 8088 	beq.w	801115a <phhalHw_Pn5180_SetConfig+0x186a>
 801104a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801104c:	e093      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 801104e:	883b      	ldrh	r3, [r7, #0]
 8011050:	2204      	movs	r2, #4
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f002 fe85 	bl	8013d64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 801105a:	4603      	mov	r3, r0
 801105c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801105e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011060:	2b00      	cmp	r3, #0
 8011062:	d07c      	beq.n	801115e <phhalHw_Pn5180_SetConfig+0x186e>
 8011064:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011066:	e086      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011068:	883b      	ldrh	r3, [r7, #0]
 801106a:	2208      	movs	r2, #8
 801106c:	4619      	mov	r1, r3
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f002 fe78 	bl	8013d64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 8011074:	4603      	mov	r3, r0
 8011076:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011078:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801107a:	2b00      	cmp	r3, #0
 801107c:	d071      	beq.n	8011162 <phhalHw_Pn5180_SetConfig+0x1872>
 801107e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011080:	e079      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011082:	883b      	ldrh	r3, [r7, #0]
 8011084:	2210      	movs	r2, #16
 8011086:	4619      	mov	r1, r3
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f002 fe6b 	bl	8013d64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 801108e:	4603      	mov	r3, r0
 8011090:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011094:	2b00      	cmp	r3, #0
 8011096:	d066      	beq.n	8011166 <phhalHw_Pn5180_SetConfig+0x1876>
 8011098:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801109a:	e06c      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 801109c:	8839      	ldrh	r1, [r7, #0]
 801109e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80110a2:	2208      	movs	r2, #8
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f002 fea9 	bl	8013dfc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 80110aa:	4603      	mov	r3, r0
 80110ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80110ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d05a      	beq.n	801116a <phhalHw_Pn5180_SetConfig+0x187a>
 80110b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110b6:	e05e      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80110b8:	8839      	ldrh	r1, [r7, #0]
 80110ba:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 80110be:	2210      	movs	r2, #16
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f002 fe9b 	bl	8013dfc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 80110c6:	4603      	mov	r3, r0
 80110c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80110ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d04e      	beq.n	801116e <phhalHw_Pn5180_SetConfig+0x187e>
 80110d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110d2:	e050      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80110d4:	8839      	ldrh	r1, [r7, #0]
 80110d6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80110da:	2218      	movs	r2, #24
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f002 fe8d 	bl	8013dfc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 80110e2:	4603      	mov	r3, r0
 80110e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80110e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d042      	beq.n	8011172 <phhalHw_Pn5180_SetConfig+0x1882>
 80110ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110ee:	e042      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80110f0:	f240 2323 	movw	r3, #547	@ 0x223
 80110f4:	e03f      	b.n	8011176 <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 80110f6:	bf00      	nop
 80110f8:	e03c      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80110fa:	bf00      	nop
 80110fc:	e03a      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80110fe:	bf00      	nop
 8011100:	e038      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011102:	bf00      	nop
 8011104:	e036      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011106:	bf00      	nop
 8011108:	e034      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801110a:	bf00      	nop
 801110c:	e032      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801110e:	bf00      	nop
 8011110:	e030      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011112:	bf00      	nop
 8011114:	e02e      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011116:	bf00      	nop
 8011118:	e02c      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801111a:	bf00      	nop
 801111c:	e02a      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801111e:	bf00      	nop
 8011120:	e028      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011122:	bf00      	nop
 8011124:	e026      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011126:	bf00      	nop
 8011128:	e024      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801112a:	bf00      	nop
 801112c:	e022      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801112e:	bf00      	nop
 8011130:	e020      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011132:	bf00      	nop
 8011134:	e01e      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011136:	bf00      	nop
 8011138:	e01c      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801113a:	bf00      	nop
 801113c:	e01a      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801113e:	bf00      	nop
 8011140:	e018      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011142:	bf00      	nop
 8011144:	e016      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011146:	bf00      	nop
 8011148:	e014      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801114a:	bf00      	nop
 801114c:	e012      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801114e:	bf00      	nop
 8011150:	e010      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011152:	bf00      	nop
 8011154:	e00e      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011156:	bf00      	nop
 8011158:	e00c      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801115a:	bf00      	nop
 801115c:	e00a      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801115e:	bf00      	nop
 8011160:	e008      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011162:	bf00      	nop
 8011164:	e006      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011166:	bf00      	nop
 8011168:	e004      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801116a:	bf00      	nop
 801116c:	e002      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 801116e:	bf00      	nop
 8011170:	e000      	b.n	8011174 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011172:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8011174:	2300      	movs	r3, #0
}
 8011176:	4618      	mov	r0, r3
 8011178:	3738      	adds	r7, #56	@ 0x38
 801117a:	46bd      	mov	sp, r7
 801117c:	bdb0      	pop	{r4, r5, r7, pc}
 801117e:	bf00      	nop
 8011180:	20001be0 	.word	0x20001be0
 8011184:	0800ea01 	.word	0x0800ea01
 8011188:	000f4240 	.word	0x000f4240

0801118c <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08a      	sub	sp, #40	@ 0x28
 8011190:	af02      	add	r7, sp, #8
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	460b      	mov	r3, r1
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 801119a:	2300      	movs	r3, #0
 801119c:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d101      	bne.n	80111ac <phhalHw_Pn5180_GetConfig+0x20>
 80111a8:	2321      	movs	r3, #33	@ 0x21
 80111aa:	e281      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 80111ac:	897b      	ldrh	r3, [r7, #10]
 80111ae:	f248 0250 	movw	r2, #32848	@ 0x8050
 80111b2:	4293      	cmp	r3, r2
 80111b4:	f000 817f 	beq.w	80114b6 <phhalHw_Pn5180_GetConfig+0x32a>
 80111b8:	f248 0250 	movw	r2, #32848	@ 0x8050
 80111bc:	4293      	cmp	r3, r2
 80111be:	f300 8273 	bgt.w	80116a8 <phhalHw_Pn5180_GetConfig+0x51c>
 80111c2:	f248 0212 	movw	r2, #32786	@ 0x8012
 80111c6:	4293      	cmp	r3, r2
 80111c8:	f000 814c 	beq.w	8011464 <phhalHw_Pn5180_GetConfig+0x2d8>
 80111cc:	f248 0212 	movw	r2, #32786	@ 0x8012
 80111d0:	4293      	cmp	r3, r2
 80111d2:	f300 8269 	bgt.w	80116a8 <phhalHw_Pn5180_GetConfig+0x51c>
 80111d6:	f248 0211 	movw	r2, #32785	@ 0x8011
 80111da:	4293      	cmp	r3, r2
 80111dc:	f000 8131 	beq.w	8011442 <phhalHw_Pn5180_GetConfig+0x2b6>
 80111e0:	f248 0211 	movw	r2, #32785	@ 0x8011
 80111e4:	4293      	cmp	r3, r2
 80111e6:	f300 825f 	bgt.w	80116a8 <phhalHw_Pn5180_GetConfig+0x51c>
 80111ea:	2b5f      	cmp	r3, #95	@ 0x5f
 80111ec:	f300 80ca 	bgt.w	8011384 <phhalHw_Pn5180_GetConfig+0x1f8>
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f2c0 8259 	blt.w	80116a8 <phhalHw_Pn5180_GetConfig+0x51c>
 80111f6:	2b5f      	cmp	r3, #95	@ 0x5f
 80111f8:	f200 8256 	bhi.w	80116a8 <phhalHw_Pn5180_GetConfig+0x51c>
 80111fc:	a201      	add	r2, pc, #4	@ (adr r2, 8011204 <phhalHw_Pn5180_GetConfig+0x78>)
 80111fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011202:	bf00      	nop
 8011204:	080113ab 	.word	0x080113ab
 8011208:	080113ab 	.word	0x080113ab
 801120c:	080113ab 	.word	0x080113ab
 8011210:	080113ab 	.word	0x080113ab
 8011214:	080113bb 	.word	0x080113bb
 8011218:	080116a9 	.word	0x080116a9
 801121c:	080113ab 	.word	0x080113ab
 8011220:	080113ab 	.word	0x080113ab
 8011224:	080113ab 	.word	0x080113ab
 8011228:	080113ab 	.word	0x080113ab
 801122c:	080113ab 	.word	0x080113ab
 8011230:	080113ab 	.word	0x080113ab
 8011234:	080113ab 	.word	0x080113ab
 8011238:	080113c5 	.word	0x080113c5
 801123c:	08011409 	.word	0x08011409
 8011240:	080113ab 	.word	0x080113ab
 8011244:	080116a9 	.word	0x080116a9
 8011248:	080116a9 	.word	0x080116a9
 801124c:	080116a9 	.word	0x080116a9
 8011250:	08011495 	.word	0x08011495
 8011254:	0801149f 	.word	0x0801149f
 8011258:	080116a9 	.word	0x080116a9
 801125c:	080116a9 	.word	0x080116a9
 8011260:	080116a9 	.word	0x080116a9
 8011264:	080116a9 	.word	0x080116a9
 8011268:	080116a9 	.word	0x080116a9
 801126c:	080116a9 	.word	0x080116a9
 8011270:	080116a9 	.word	0x080116a9
 8011274:	080116a9 	.word	0x080116a9
 8011278:	080116a9 	.word	0x080116a9
 801127c:	080116a9 	.word	0x080116a9
 8011280:	080116a9 	.word	0x080116a9
 8011284:	080114a9 	.word	0x080114a9
 8011288:	0801165d 	.word	0x0801165d
 801128c:	080116a9 	.word	0x080116a9
 8011290:	080116a9 	.word	0x080116a9
 8011294:	080116a9 	.word	0x080116a9
 8011298:	080116a9 	.word	0x080116a9
 801129c:	080116a9 	.word	0x080116a9
 80112a0:	080116a9 	.word	0x080116a9
 80112a4:	080116a9 	.word	0x080116a9
 80112a8:	080116a9 	.word	0x080116a9
 80112ac:	080116a9 	.word	0x080116a9
 80112b0:	080116a9 	.word	0x080116a9
 80112b4:	080116a9 	.word	0x080116a9
 80112b8:	080116a9 	.word	0x080116a9
 80112bc:	080114c5 	.word	0x080114c5
 80112c0:	080113bb 	.word	0x080113bb
 80112c4:	080114df 	.word	0x080114df
 80112c8:	080114e9 	.word	0x080114e9
 80112cc:	08011517 	.word	0x08011517
 80112d0:	08011545 	.word	0x08011545
 80112d4:	08011573 	.word	0x08011573
 80112d8:	080116a9 	.word	0x080116a9
 80112dc:	080116a9 	.word	0x080116a9
 80112e0:	080116a9 	.word	0x080116a9
 80112e4:	080116a9 	.word	0x080116a9
 80112e8:	080116a9 	.word	0x080116a9
 80112ec:	080116a9 	.word	0x080116a9
 80112f0:	080116a9 	.word	0x080116a9
 80112f4:	080116a9 	.word	0x080116a9
 80112f8:	080116a9 	.word	0x080116a9
 80112fc:	080116a9 	.word	0x080116a9
 8011300:	080116a9 	.word	0x080116a9
 8011304:	080116a9 	.word	0x080116a9
 8011308:	080116a9 	.word	0x080116a9
 801130c:	080116a9 	.word	0x080116a9
 8011310:	080116a9 	.word	0x080116a9
 8011314:	080116a9 	.word	0x080116a9
 8011318:	080116a9 	.word	0x080116a9
 801131c:	080116a9 	.word	0x080116a9
 8011320:	080116a9 	.word	0x080116a9
 8011324:	080116a9 	.word	0x080116a9
 8011328:	080116a9 	.word	0x080116a9
 801132c:	080116a9 	.word	0x080116a9
 8011330:	080116a9 	.word	0x080116a9
 8011334:	080116a9 	.word	0x080116a9
 8011338:	080116a9 	.word	0x080116a9
 801133c:	080116a9 	.word	0x080116a9
 8011340:	080116a9 	.word	0x080116a9
 8011344:	080116a9 	.word	0x080116a9
 8011348:	080116a9 	.word	0x080116a9
 801134c:	080115f1 	.word	0x080115f1
 8011350:	080115bd 	.word	0x080115bd
 8011354:	080115e3 	.word	0x080115e3
 8011358:	08011627 	.word	0x08011627
 801135c:	080116a9 	.word	0x080116a9
 8011360:	080116a9 	.word	0x080116a9
 8011364:	080116a9 	.word	0x080116a9
 8011368:	080115d9 	.word	0x080115d9
 801136c:	0801138f 	.word	0x0801138f
 8011370:	080116a9 	.word	0x080116a9
 8011374:	080115cb 	.word	0x080115cb
 8011378:	080116a9 	.word	0x080116a9
 801137c:	0801139d 	.word	0x0801139d
 8011380:	0801166b 	.word	0x0801166b
 8011384:	f248 0210 	movw	r2, #32784	@ 0x8010
 8011388:	4293      	cmp	r3, r2
 801138a:	d055      	beq.n	8011438 <phhalHw_Pn5180_GetConfig+0x2ac>
 801138c:	e18c      	b.n	80116a8 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011394:	461a      	mov	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	801a      	strh	r2, [r3, #0]
        break;
 801139a:	e188      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80113a2:	461a      	mov	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	801a      	strh	r2, [r3, #0]
        break;
 80113a8:	e181      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 80113aa:	897a      	ldrh	r2, [r7, #10]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	322c      	adds	r2, #44	@ 0x2c
 80113b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	801a      	strh	r2, [r3, #0]
        break;
 80113b8:	e179      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	801a      	strh	r2, [r3, #0]
        break;
 80113c2:	e174      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d107      	bne.n	80113de <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 80113ce:	897a      	ldrh	r2, [r7, #10]
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	322c      	adds	r2, #44	@ 0x2c
 80113d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 80113dc:	e167      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80113e4:	2b41      	cmp	r3, #65	@ 0x41
 80113e6:	d902      	bls.n	80113ee <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80113e8:	f240 2322 	movw	r3, #546	@ 0x222
 80113ec:	e160      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80113f4:	461a      	mov	r2, r3
 80113f6:	0152      	lsls	r2, r2, #5
 80113f8:	1ad2      	subs	r2, r2, r3
 80113fa:	0092      	lsls	r2, r2, #2
 80113fc:	4413      	add	r3, r2
 80113fe:	00db      	lsls	r3, r3, #3
 8011400:	b29a      	uxth	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	801a      	strh	r2, [r3, #0]
        break;
 8011406:	e152      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801140e:	2b01      	cmp	r3, #1
 8011410:	d107      	bne.n	8011422 <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 8011412:	897a      	ldrh	r2, [r7, #10]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	322c      	adds	r2, #44	@ 0x2c
 8011418:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 8011420:	e145      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011428:	4a9b      	ldr	r2, [pc, #620]	@ (8011698 <phhalHw_Pn5180_GetConfig+0x50c>)
 801142a:	fba2 2303 	umull	r2, r3, r2, r3
 801142e:	099b      	lsrs	r3, r3, #6
 8011430:	b29a      	uxth	r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	801a      	strh	r2, [r3, #0]
        break;
 8011436:	e13a      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	801a      	strh	r2, [r3, #0]
        break;
 8011440:	e135      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6a1b      	ldr	r3, [r3, #32]
 8011446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801144a:	d302      	bcc.n	8011452 <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801144c:	f240 2322 	movw	r3, #546	@ 0x222
 8011450:	e12e      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6a1b      	ldr	r3, [r3, #32]
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2200      	movs	r2, #0
 8011460:	621a      	str	r2, [r3, #32]
        break;
 8011462:	e124      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6a1b      	ldr	r3, [r3, #32]
 8011468:	4a8c      	ldr	r2, [pc, #560]	@ (801169c <phhalHw_Pn5180_GetConfig+0x510>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d905      	bls.n	801147a <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2200      	movs	r2, #0
 8011472:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011474:	f240 2322 	movw	r3, #546	@ 0x222
 8011478:	e11a      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	4a86      	ldr	r2, [pc, #536]	@ (8011698 <phhalHw_Pn5180_GetConfig+0x50c>)
 8011480:	fba2 2303 	umull	r2, r3, r2, r3
 8011484:	099b      	lsrs	r3, r3, #6
 8011486:	b29a      	uxth	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	621a      	str	r2, [r3, #32]
        break;
 8011492:	e10c      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	801a      	strh	r2, [r3, #0]
        break;
 801149c:	e107      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	801a      	strh	r2, [r3, #0]
        break;
 80114a6:	e102      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80114ae:	461a      	mov	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	801a      	strh	r2, [r3, #0]
        break;
 80114b4:	e0fb      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80114bc:	461a      	mov	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	801a      	strh	r2, [r3, #0]
        break;
 80114c2:	e0f4      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d103      	bne.n	80114d6 <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 80114d4:	e0eb      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2201      	movs	r2, #1
 80114da:	801a      	strh	r2, [r3, #0]
        break;
 80114dc:	e0e7      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	8bda      	ldrh	r2, [r3, #30]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	801a      	strh	r2, [r3, #0]
        break;
 80114e6:	e0e2      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80114e8:	f107 0116 	add.w	r1, r7, #22
 80114ec:	f107 0218 	add.w	r2, r7, #24
 80114f0:	f107 0314 	add.w	r3, r7, #20
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	460b      	mov	r3, r1
 80114f8:	2101      	movs	r1, #1
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f002 f873 	bl	80135e6 <phhalHw_Pn5180_GetRxBuffer>
 8011500:	4603      	mov	r3, r0
 8011502:	83fb      	strh	r3, [r7, #30]
 8011504:	8bfb      	ldrh	r3, [r7, #30]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <phhalHw_Pn5180_GetConfig+0x382>
 801150a:	8bfb      	ldrh	r3, [r7, #30]
 801150c:	e0d0      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 801150e:	8aba      	ldrh	r2, [r7, #20]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	801a      	strh	r2, [r3, #0]
        break;
 8011514:	e0cb      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011516:	f107 0116 	add.w	r1, r7, #22
 801151a:	f107 0218 	add.w	r2, r7, #24
 801151e:	f107 0314 	add.w	r3, r7, #20
 8011522:	9300      	str	r3, [sp, #0]
 8011524:	460b      	mov	r3, r1
 8011526:	2101      	movs	r1, #1
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f002 f820 	bl	801356e <phhalHw_Pn5180_GetTxBuffer>
 801152e:	4603      	mov	r3, r0
 8011530:	83fb      	strh	r3, [r7, #30]
 8011532:	8bfb      	ldrh	r3, [r7, #30]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <phhalHw_Pn5180_GetConfig+0x3b0>
 8011538:	8bfb      	ldrh	r3, [r7, #30]
 801153a:	e0b9      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 801153c:	8aba      	ldrh	r2, [r7, #20]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	801a      	strh	r2, [r3, #0]
        break;
 8011542:	e0b4      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011544:	f107 0116 	add.w	r1, r7, #22
 8011548:	f107 0218 	add.w	r2, r7, #24
 801154c:	f107 0314 	add.w	r3, r7, #20
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	460b      	mov	r3, r1
 8011554:	2101      	movs	r1, #1
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f002 f809 	bl	801356e <phhalHw_Pn5180_GetTxBuffer>
 801155c:	4603      	mov	r3, r0
 801155e:	83fb      	strh	r3, [r7, #30]
 8011560:	8bfb      	ldrh	r3, [r7, #30]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d001      	beq.n	801156a <phhalHw_Pn5180_GetConfig+0x3de>
 8011566:	8bfb      	ldrh	r3, [r7, #30]
 8011568:	e0a2      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 801156a:	8afa      	ldrh	r2, [r7, #22]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	801a      	strh	r2, [r3, #0]
        break;
 8011570:	e09d      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011572:	f107 0116 	add.w	r1, r7, #22
 8011576:	f107 0218 	add.w	r2, r7, #24
 801157a:	f107 0314 	add.w	r3, r7, #20
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	460b      	mov	r3, r1
 8011582:	2101      	movs	r1, #1
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f001 fff2 	bl	801356e <phhalHw_Pn5180_GetTxBuffer>
 801158a:	4603      	mov	r3, r0
 801158c:	83fb      	strh	r3, [r7, #30]
 801158e:	8bfb      	ldrh	r3, [r7, #30]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d001      	beq.n	8011598 <phhalHw_Pn5180_GetConfig+0x40c>
 8011594:	8bfb      	ldrh	r3, [r7, #30]
 8011596:	e08b      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	8a1b      	ldrh	r3, [r3, #16]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d302      	bcc.n	80115aa <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80115a4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80115a8:	e082      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80115b0:	4413      	add	r3, r2
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	461a      	mov	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	801a      	strh	r2, [r3, #0]
        break;
 80115ba:	e078      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80115c2:	461a      	mov	r2, r3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	801a      	strh	r2, [r3, #0]
        break;
 80115c8:	e071      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80115d0:	461a      	mov	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	801a      	strh	r2, [r3, #0]
        break;
 80115d6:	e06a      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	801a      	strh	r2, [r3, #0]
        break;
 80115e0:	e065      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80115e8:	461a      	mov	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	801a      	strh	r2, [r3, #0]
        break;
 80115ee:	e05e      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80115f0:	f107 0310 	add.w	r3, r7, #16
 80115f4:	461a      	mov	r2, r3
 80115f6:	211d      	movs	r1, #29
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f001 f9fb 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 80115fe:	4603      	mov	r3, r0
 8011600:	83fb      	strh	r3, [r7, #30]
 8011602:	8bfb      	ldrh	r3, [r7, #30]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d001      	beq.n	801160c <phhalHw_Pn5180_GetConfig+0x480>
 8011608:	8bfb      	ldrh	r3, [r7, #30]
 801160a:	e051      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011612:	2b00      	cmp	r3, #0
 8011614:	d003      	beq.n	801161e <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2201      	movs	r2, #1
 801161a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 801161c:	e047      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	801a      	strh	r2, [r3, #0]
        break;
 8011624:	e043      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011626:	f107 0310 	add.w	r3, r7, #16
 801162a:	461a      	mov	r2, r3
 801162c:	2100      	movs	r1, #0
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f001 f9e0 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 8011634:	4603      	mov	r3, r0
 8011636:	83fb      	strh	r3, [r7, #30]
 8011638:	8bfb      	ldrh	r3, [r7, #30]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <phhalHw_Pn5180_GetConfig+0x4b6>
 801163e:	8bfb      	ldrh	r3, [r7, #30]
 8011640:	e036      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011648:	2b00      	cmp	r3, #0
 801164a:	d003      	beq.n	8011654 <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2201      	movs	r2, #1
 8011650:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 8011652:	e02c      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	801a      	strh	r2, [r3, #0]
        break;
 801165a:	e028      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011662:	461a      	mov	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	801a      	strh	r2, [r3, #0]
        break;
 8011668:	e021      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 801166a:	f107 0310 	add.w	r3, r7, #16
 801166e:	461a      	mov	r2, r3
 8011670:	211d      	movs	r1, #29
 8011672:	68f8      	ldr	r0, [r7, #12]
 8011674:	f001 f9be 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 8011678:	4603      	mov	r3, r0
 801167a:	83fb      	strh	r3, [r7, #30]
 801167c:	8bfb      	ldrh	r3, [r7, #30]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d001      	beq.n	8011686 <phhalHw_Pn5180_GetConfig+0x4fa>
 8011682:	8bfb      	ldrh	r3, [r7, #30]
 8011684:	e014      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801168c:	2b00      	cmp	r3, #0
 801168e:	d007      	beq.n	80116a0 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2201      	movs	r2, #1
 8011694:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 8011696:	e00a      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>
 8011698:	10624dd3 	.word	0x10624dd3
 801169c:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	801a      	strh	r2, [r3, #0]
        break;
 80116a6:	e002      	b.n	80116ae <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80116a8:	f240 2323 	movw	r3, #547	@ 0x223
 80116ac:	e000      	b.n	80116b0 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	460b      	mov	r3, r1
 80116c2:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 80116c4:	2300      	movs	r3, #0
 80116c6:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 80116c8:	2300      	movs	r3, #0
 80116ca:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 80116cc:	2300      	movs	r3, #0
 80116ce:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 80116d0:	887b      	ldrh	r3, [r7, #2]
 80116d2:	2b01      	cmp	r3, #1
 80116d4:	d146      	bne.n	8011764 <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 80116d6:	f107 030c 	add.w	r3, r7, #12
 80116da:	461a      	mov	r2, r3
 80116dc:	210e      	movs	r1, #14
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff fd54 	bl	801118c <phhalHw_Pn5180_GetConfig>
 80116e4:	4603      	mov	r3, r0
 80116e6:	81fb      	strh	r3, [r7, #14]
 80116e8:	89fb      	ldrh	r3, [r7, #14]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d001      	beq.n	80116f2 <phhalHw_Pn5180_SetMinFDT+0x3a>
 80116ee:	89fb      	ldrh	r3, [r7, #14]
 80116f0:	e04a      	b.n	8011788 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 80116f2:	89ba      	ldrh	r2, [r7, #12]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 80116f8:	f107 030a 	add.w	r3, r7, #10
 80116fc:	461a      	mov	r2, r3
 80116fe:	2109      	movs	r1, #9
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff fd43 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8011706:	4603      	mov	r3, r0
 8011708:	81fb      	strh	r3, [r7, #14]
 801170a:	89fb      	ldrh	r3, [r7, #14]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d001      	beq.n	8011714 <phhalHw_Pn5180_SetMinFDT+0x5c>
 8011710:	89fb      	ldrh	r3, [r7, #14]
 8011712:	e039      	b.n	8011788 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 8011714:	897b      	ldrh	r3, [r7, #10]
 8011716:	2b03      	cmp	r3, #3
 8011718:	d816      	bhi.n	8011748 <phhalHw_Pn5180_SetMinFDT+0x90>
 801171a:	a201      	add	r2, pc, #4	@ (adr r2, 8011720 <phhalHw_Pn5180_SetMinFDT+0x68>)
 801171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011720:	08011731 	.word	0x08011731
 8011724:	08011737 	.word	0x08011737
 8011728:	0801173d 	.word	0x0801173d
 801172c:	08011743 	.word	0x08011743
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 8011730:	2365      	movs	r3, #101	@ 0x65
 8011732:	81bb      	strh	r3, [r7, #12]
            break;
 8011734:	e009      	b.n	801174a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 8011736:	237f      	movs	r3, #127	@ 0x7f
 8011738:	81bb      	strh	r3, [r7, #12]
            break;
 801173a:	e006      	b.n	801174a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 801173c:	2377      	movs	r3, #119	@ 0x77
 801173e:	81bb      	strh	r3, [r7, #12]
            break;
 8011740:	e003      	b.n	801174a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 8011742:	2380      	movs	r3, #128	@ 0x80
 8011744:	81bb      	strh	r3, [r7, #12]
            break;
 8011746:	e000      	b.n	801174a <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 8011748:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 801174a:	89bb      	ldrh	r3, [r7, #12]
 801174c:	461a      	mov	r2, r3
 801174e:	210d      	movs	r1, #13
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7fe f8cd 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8011756:	4603      	mov	r3, r0
 8011758:	81fb      	strh	r3, [r7, #14]
 801175a:	89fb      	ldrh	r3, [r7, #14]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d012      	beq.n	8011786 <phhalHw_Pn5180_SetMinFDT+0xce>
 8011760:	89fb      	ldrh	r3, [r7, #14]
 8011762:	e011      	b.n	8011788 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 8011764:	887b      	ldrh	r3, [r7, #2]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d10d      	bne.n	8011786 <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801176e:	461a      	mov	r2, r3
 8011770:	210e      	movs	r1, #14
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7fe f8bc 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8011778:	4603      	mov	r3, r0
 801177a:	81fb      	strh	r3, [r7, #14]
 801177c:	89fb      	ldrh	r3, [r7, #14]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d001      	beq.n	8011786 <phhalHw_Pn5180_SetMinFDT+0xce>
 8011782:	89fb      	ldrh	r3, [r7, #14]
 8011784:	e000      	b.n	8011788 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3710      	adds	r7, #16
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	@ 0x28
 8011794:	af04      	add	r7, sp, #16
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	4611      	mov	r1, r2
 801179c:	461a      	mov	r2, r3
 801179e:	460b      	mov	r3, r1
 80117a0:	80fb      	strh	r3, [r7, #6]
 80117a2:	4613      	mov	r3, r2
 80117a4:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	789b      	ldrb	r3, [r3, #2]
 80117ac:	2b04      	cmp	r3, #4
 80117ae:	d10f      	bne.n	80117d0 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	6858      	ldr	r0, [r3, #4]
 80117b4:	88fa      	ldrh	r2, [r7, #6]
 80117b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b8:	9302      	str	r3, [sp, #8]
 80117ba:	6a3b      	ldr	r3, [r7, #32]
 80117bc:	9301      	str	r3, [sp, #4]
 80117be:	88bb      	ldrh	r3, [r7, #4]
 80117c0:	9300      	str	r3, [sp, #0]
 80117c2:	4613      	mov	r3, r2
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	2100      	movs	r1, #0
 80117c8:	f009 fee6 	bl	801b598 <phbalReg_Exchange>
 80117cc:	4603      	mov	r3, r0
 80117ce:	e077      	b.n	80118c0 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 80117d0:	bf00      	nop
 80117d2:	2201      	movs	r2, #1
 80117d4:	2102      	movs	r1, #2
 80117d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80117da:	f009 fe49 	bl	801b470 <phDriver_PinRead>
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d1f6      	bne.n	80117d2 <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	2100      	movs	r1, #0
 80117ea:	4618      	mov	r0, r3
 80117ec:	f000 fea2 	bl	8012534 <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6858      	ldr	r0, [r3, #4]
 80117f4:	88fa      	ldrh	r2, [r7, #6]
 80117f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f8:	9302      	str	r3, [sp, #8]
 80117fa:	2300      	movs	r3, #0
 80117fc:	9301      	str	r3, [sp, #4]
 80117fe:	88fb      	ldrh	r3, [r7, #6]
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	4613      	mov	r3, r2
 8011804:	68ba      	ldr	r2, [r7, #8]
 8011806:	2100      	movs	r1, #0
 8011808:	f009 fec6 	bl	801b598 <phbalReg_Exchange>
 801180c:	4603      	mov	r3, r0
 801180e:	82fb      	strh	r3, [r7, #22]
 8011810:	8afb      	ldrh	r3, [r7, #22]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d001      	beq.n	801181a <phhalHw_Pn5180_BalExchange+0x8a>
 8011816:	8afb      	ldrh	r3, [r7, #22]
 8011818:	e052      	b.n	80118c0 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8011820:	2b01      	cmp	r3, #1
 8011822:	d109      	bne.n	8011838 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 8011824:	bf00      	nop
 8011826:	2201      	movs	r2, #1
 8011828:	2102      	movs	r1, #2
 801182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801182e:	f009 fe1f 	bl	801b470 <phDriver_PinRead>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d0f6      	beq.n	8011826 <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	2101      	movs	r1, #1
 801183e:	4618      	mov	r0, r3
 8011840:	f000 fe78 	bl	8012534 <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 8011844:	88bb      	ldrh	r3, [r7, #4]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d039      	beq.n	80118be <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 801184a:	bf00      	nop
 801184c:	2201      	movs	r2, #1
 801184e:	2102      	movs	r1, #2
 8011850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011854:	f009 fe0c 	bl	801b470 <phDriver_PinRead>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d1f6      	bne.n	801184c <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	2100      	movs	r1, #0
 8011864:	4618      	mov	r0, r3
 8011866:	f000 fe65 	bl	8012534 <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6858      	ldr	r0, [r3, #4]
 801186e:	88ba      	ldrh	r2, [r7, #4]
 8011870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011872:	9302      	str	r3, [sp, #8]
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	9301      	str	r3, [sp, #4]
 8011878:	88bb      	ldrh	r3, [r7, #4]
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	4613      	mov	r3, r2
 801187e:	2200      	movs	r2, #0
 8011880:	2100      	movs	r1, #0
 8011882:	f009 fe89 	bl	801b598 <phbalReg_Exchange>
 8011886:	4603      	mov	r3, r0
 8011888:	82fb      	strh	r3, [r7, #22]
 801188a:	8afb      	ldrh	r3, [r7, #22]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d001      	beq.n	8011894 <phhalHw_Pn5180_BalExchange+0x104>
 8011890:	8afb      	ldrh	r3, [r7, #22]
 8011892:	e015      	b.n	80118c0 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 801189a:	2b01      	cmp	r3, #1
 801189c:	d109      	bne.n	80118b2 <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 801189e:	bf00      	nop
 80118a0:	2201      	movs	r2, #1
 80118a2:	2102      	movs	r1, #2
 80118a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80118a8:	f009 fde2 	bl	801b470 <phDriver_PinRead>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d0f6      	beq.n	80118a0 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	2101      	movs	r1, #1
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 fe3b 	bl	8012534 <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3718      	adds	r7, #24
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b090      	sub	sp, #64	@ 0x40
 80118cc:	af02      	add	r7, sp, #8
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	607a      	str	r2, [r7, #4]
 80118d2:	603b      	str	r3, [r7, #0]
 80118d4:	460b      	mov	r3, r1
 80118d6:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 80118d8:	237f      	movs	r3, #127	@ 0x7f
 80118da:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 80118dc:	2300      	movs	r3, #0
 80118de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 80118e0:	2300      	movs	r3, #0
 80118e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 80118e6:	2300      	movs	r3, #0
 80118e8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 80118ec:	2300      	movs	r3, #0
 80118ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 80118f2:	2300      	movs	r3, #0
 80118f4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 80118f8:	2300      	movs	r3, #0
 80118fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 80118fe:	2300      	movs	r3, #0
 8011900:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 8011904:	2300      	movs	r3, #0
 8011906:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8011908:	2200      	movs	r2, #0
 801190a:	215e      	movs	r1, #94	@ 0x5e
 801190c:	68f8      	ldr	r0, [r7, #12]
 801190e:	f7fd ffef 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8011912:	4603      	mov	r3, r0
 8011914:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011916:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011918:	2b00      	cmp	r3, #0
 801191a:	d001      	beq.n	8011920 <phhalHw_Pn5180_Autocoll+0x58>
 801191c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801191e:	e25e      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d008      	beq.n	8011940 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d005      	beq.n	8011940 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d002      	beq.n	8011940 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 801193a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801193c:	2b00      	cmp	r3, #0
 801193e:	d102      	bne.n	8011946 <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011940:	f240 2321 	movw	r3, #545	@ 0x221
 8011944:	e24b      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801194c:	2b01      	cmp	r3, #1
 801194e:	d103      	bne.n	8011958 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 8011950:	2301      	movs	r3, #1
 8011952:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8011956:	e037      	b.n	80119c8 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 8011958:	897b      	ldrh	r3, [r7, #10]
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d005      	beq.n	801196e <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 8011962:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011966:	f043 0301 	orr.w	r3, r3, #1
 801196a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 801196e:	897b      	ldrh	r3, [r7, #10]
 8011970:	f003 0304 	and.w	r3, r3, #4
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 8011978:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801197c:	f043 0302 	orr.w	r3, r3, #2
 8011980:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 8011984:	897b      	ldrh	r3, [r7, #10]
 8011986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801198a:	2b00      	cmp	r3, #0
 801198c:	d005      	beq.n	801199a <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 801198e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011992:	f043 0304 	orr.w	r3, r3, #4
 8011996:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 801199a:	897b      	ldrh	r3, [r7, #10]
 801199c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d005      	beq.n	80119b0 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 80119a4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80119a8:	f043 0308 	orr.w	r3, r3, #8
 80119ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 80119b0:	897b      	ldrh	r3, [r7, #10]
 80119b2:	f003 0302 	and.w	r3, r3, #2
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d104      	bne.n	80119c4 <phhalHw_Pn5180_Autocoll+0xfc>
 80119ba:	897b      	ldrh	r3, [r7, #10]
 80119bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d001      	beq.n	80119c8 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 80119c4:	2300      	movs	r3, #0
 80119c6:	e20a      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	2200      	movs	r2, #0
 80119cc:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2200      	movs	r2, #0
 80119d2:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2200      	movs	r2, #0
 80119d8:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2200      	movs	r2, #0
 80119de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f003 f9d2 	bl	8014d94 <phhalHw_Pn5180_Int_IdleCommand>
 80119f0:	4603      	mov	r3, r0
 80119f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80119f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d001      	beq.n	80119fe <phhalHw_Pn5180_Autocoll+0x136>
 80119fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80119fc:	e1ef      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f001 fd7b 	bl	80134fa <phhalHw_Pn5180_Instr_RfOff>
 8011a04:	4603      	mov	r3, r0
 8011a06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d001      	beq.n	8011a12 <phhalHw_Pn5180_Autocoll+0x14a>
 8011a0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a10:	e1e5      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 8011a12:	4b9d      	ldr	r3, [pc, #628]	@ (8011c88 <phhalHw_Pn5180_Autocoll+0x3c0>)
 8011a14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 8011a16:	4a9d      	ldr	r2, [pc, #628]	@ (8011c8c <phhalHw_Pn5180_Autocoll+0x3c4>)
 8011a18:	2103      	movs	r1, #3
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f000 fdd6 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8011a20:	4603      	mov	r3, r0
 8011a22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d001      	beq.n	8011a2e <phhalHw_Pn5180_Autocoll+0x166>
 8011a2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a2c:	e1d7      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8011a34:	2300      	movs	r3, #0
 8011a36:	2201      	movs	r2, #1
 8011a38:	2100      	movs	r1, #0
 8011a3a:	f009 ff63 	bl	801b904 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8011a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a40:	2101      	movs	r1, #1
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f000 fdc2 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d001      	beq.n	8011a56 <phhalHw_Pn5180_Autocoll+0x18e>
 8011a52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a54:	e1c3      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 8011a56:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8011a5a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011a5e:	4619      	mov	r1, r3
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f001 fa9f 	bl	8012fa4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 8011a66:	4603      	mov	r3, r0
 8011a68:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d001      	beq.n	8011a74 <phhalHw_Pn5180_Autocoll+0x1ac>
 8011a70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a72:	e1b4      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 8011a74:	f107 0314 	add.w	r3, r7, #20
 8011a78:	9300      	str	r3, [sp, #0]
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	2101      	movs	r1, #1
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f003 fa39 	bl	8014ef8 <phhalHw_Pn5180_WaitIrq>
 8011a86:	4603      	mov	r3, r0
 8011a88:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 8011a8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	2b12      	cmp	r3, #18
 8011a90:	d10c      	bne.n	8011aac <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f001 fadf 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d001      	beq.n	8011aa6 <phhalHw_Pn5180_Autocoll+0x1de>
 8011aa2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011aa4:	e19b      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 8011aa6:	f240 2312 	movw	r3, #530	@ 0x212
 8011aaa:	e198      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00c      	beq.n	8011ad0 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f001 facd 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011abc:	4603      	mov	r3, r0
 8011abe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011ac0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <phhalHw_Pn5180_Autocoll+0x202>
 8011ac6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011ac8:	e189      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011aca:	f240 237f 	movw	r3, #639	@ 0x27f
 8011ace:	e186      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	f003 0301 	and.w	r3, r3, #1
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f000 815d 	beq.w	8011d96 <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 8011adc:	231b      	movs	r3, #27
 8011ade:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 8011ae0:	231a      	movs	r3, #26
 8011ae2:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 8011ae4:	2313      	movs	r3, #19
 8011ae6:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 8011ae8:	231d      	movs	r3, #29
 8011aea:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 8011aec:	f107 0318 	add.w	r3, r7, #24
 8011af0:	f107 011c 	add.w	r1, r7, #28
 8011af4:	2204      	movs	r2, #4
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f000 ffea 	bl	8012ad0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 8011afc:	4603      	mov	r3, r0
 8011afe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011b00:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d001      	beq.n	8011b0a <phhalHw_Pn5180_Autocoll+0x242>
 8011b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b08:	e169      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	3301      	adds	r3, #1
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	021b      	lsls	r3, r3, #8
 8011b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	3302      	adds	r3, #2
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	041b      	lsls	r3, r3, #16
 8011b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	3303      	adds	r3, #3
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	061b      	lsls	r3, r3, #24
 8011b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b36:	4313      	orrs	r3, r2
 8011b38:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 8011b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3c:	0f5b      	lsrs	r3, r3, #29
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	f003 0303 	and.w	r3, r3, #3
 8011b44:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	3304      	adds	r3, #4
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	3305      	adds	r3, #5
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	021b      	lsls	r3, r3, #8
 8011b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b5a:	4313      	orrs	r3, r2
 8011b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	3306      	adds	r3, #6
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	041b      	lsls	r3, r3, #16
 8011b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	3307      	adds	r3, #7
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	061b      	lsls	r3, r3, #24
 8011b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b76:	4313      	orrs	r3, r2
 8011b78:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 8011b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	f003 0307 	and.w	r3, r3, #7
 8011b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 8011b86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011b8a:	3b04      	subs	r3, #4
 8011b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	3308      	adds	r3, #8
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	3309      	adds	r3, #9
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	021b      	lsls	r3, r3, #8
 8011ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	330a      	adds	r3, #10
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	041b      	lsls	r3, r3, #16
 8011bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bb0:	4313      	orrs	r3, r2
 8011bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	330b      	adds	r3, #11
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	061b      	lsls	r3, r3, #24
 8011bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	330c      	adds	r3, #12
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	330d      	adds	r3, #13
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	021b      	lsls	r3, r3, #8
 8011bd2:	6a3a      	ldr	r2, [r7, #32]
 8011bd4:	4313      	orrs	r3, r2
 8011bd6:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	330e      	adds	r3, #14
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	041b      	lsls	r3, r3, #16
 8011be0:	6a3a      	ldr	r2, [r7, #32]
 8011be2:	4313      	orrs	r3, r2
 8011be4:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	330f      	adds	r3, #15
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	061b      	lsls	r3, r3, #24
 8011bee:	6a3a      	ldr	r2, [r7, #32]
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 8011bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d00c      	beq.n	8011c18 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f001 fa29 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011c04:	4603      	mov	r3, r0
 8011c06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011c08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <phhalHw_Pn5180_Autocoll+0x34a>
 8011c0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c10:	e0e5      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 8011c12:	f240 2302 	movw	r3, #514	@ 0x202
 8011c16:	e0e2      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 8011c18:	683a      	ldr	r2, [r7, #0]
 8011c1a:	6879      	ldr	r1, [r7, #4]
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f001 fd6e 	bl	80136fe <phhalHw_Pn5180_ReadData>
 8011c22:	4603      	mov	r3, r0
 8011c24:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <phhalHw_Pn5180_Autocoll+0x368>
 8011c2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c2e:	e0d6      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	f003 0310 	and.w	r3, r3, #16
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d02a      	beq.n	8011c90 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00c      	beq.n	8011c5e <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f001 fa06 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011c4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d001      	beq.n	8011c58 <phhalHw_Pn5180_Autocoll+0x390>
 8011c54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c56:	e0c2      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 8011c58:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8011c5c:	e0bf      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2200      	movs	r2, #0
 8011c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 8011c66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d134      	bne.n	8011cd8 <phhalHw_Pn5180_Autocoll+0x410>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	2bf0      	cmp	r3, #240	@ 0xf0
 8011c76:	d12f      	bne.n	8011cd8 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8011c84:	e028      	b.n	8011cd8 <phhalHw_Pn5180_Autocoll+0x410>
 8011c86:	bf00      	nop
 8011c88:	00020041 	.word	0x00020041
 8011c8c:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d111      	bne.n	8011cbe <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 8011ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d105      	bne.n	8011cb6 <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8011caa:	2301      	movs	r3, #1
 8011cac:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 8011cb0:	2303      	movs	r3, #3
 8011cb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8011cbc:	e00c      	b.n	8011cd8 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f001 f9c9 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011cc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d001      	beq.n	8011cd2 <phhalHw_Pn5180_Autocoll+0x40a>
 8011cce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011cd0:	e085      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 8011cd2:	f240 2306 	movw	r3, #518	@ 0x206
 8011cd6:	e082      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d115      	bne.n	8011d0e <phhalHw_Pn5180_Autocoll+0x446>
 8011ce2:	897b      	ldrh	r3, [r7, #10]
 8011ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d110      	bne.n	8011d0e <phhalHw_Pn5180_Autocoll+0x446>
 8011cec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d10c      	bne.n	8011d0e <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f001 f9ae 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011cfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d001      	beq.n	8011d08 <phhalHw_Pn5180_Autocoll+0x440>
 8011d04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011d06:	e06a      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 8011d08:	f240 2306 	movw	r3, #518	@ 0x206
 8011d0c:	e067      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 8011d0e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d108      	bne.n	8011d28 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 8011d16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d24:	801a      	strh	r2, [r3, #0]
 8011d26:	e01b      	b.n	8011d60 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 8011d28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d108      	bne.n	8011d42 <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 8011d30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d3e:	801a      	strh	r2, [r3, #0]
 8011d40:	e00e      	b.n	8011d60 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 8011d42:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	d108      	bne.n	8011d5c <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 8011d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d58:	801a      	strh	r2, [r3, #0]
 8011d5a:	e001      	b.n	8011d60 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 8011d5c:	2305      	movs	r3, #5
 8011d5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	881a      	ldrh	r2, [r3, #0]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	695a      	ldr	r2, [r3, #20]
 8011d6c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8011d70:	441a      	add	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	8b5a      	ldrh	r2, [r3, #26]
 8011d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 8011d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d8a:	881a      	ldrh	r2, [r3, #0]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 8011d90:	2300      	movs	r3, #0
 8011d92:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011d94:	e006      	b.n	8011da4 <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 8011da0:	2310      	movs	r3, #16
 8011da2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 8011da4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d009      	beq.n	8011dbe <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f001 f953 	bl	8013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8011db0:	4603      	mov	r3, r0
 8011db2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011db4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <phhalHw_Pn5180_Autocoll+0x4f6>
 8011dba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011dbc:	e00f      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8011dbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00b      	beq.n	8011ddc <phhalHw_Pn5180_Autocoll+0x514>
 8011dc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011dc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d106      	bne.n	8011ddc <phhalHw_Pn5180_Autocoll+0x514>
 8011dce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011dd0:	b2db      	uxtb	r3, r3
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	e000      	b.n	8011dde <phhalHw_Pn5180_Autocoll+0x516>
 8011ddc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3738      	adds	r7, #56	@ 0x38
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop

08011de8 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b090      	sub	sp, #64	@ 0x40
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 8011df0:	2300      	movs	r3, #0
 8011df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 8011df4:	2300      	movs	r3, #0
 8011df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <phhalHw_Pn5180_Lpcd+0x28>
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d072      	beq.n	8011ef4 <phhalHw_Pn5180_Lpcd+0x10c>
 8011e0e:	e0c4      	b.n	8011f9a <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 8011e10:	f107 031c 	add.w	r3, r7, #28
 8011e14:	461a      	mov	r2, r3
 8011e16:	2126      	movs	r1, #38	@ 0x26
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f000 fdeb 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011e22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d001      	beq.n	8011e2c <phhalHw_Pn5180_Lpcd+0x44>
 8011e28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e2a:	e0c9      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 8011e2c:	f107 0210 	add.w	r2, r7, #16
 8011e30:	2305      	movs	r3, #5
 8011e32:	2134      	movs	r1, #52	@ 0x34
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 ff5d 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011e3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <phhalHw_Pn5180_Lpcd+0x60>
 8011e44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e46:	e0bb      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 8011e48:	f107 020c 	add.w	r2, r7, #12
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	2159      	movs	r1, #89	@ 0x59
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 ff4f 	bl	8012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8011e56:	4603      	mov	r3, r0
 8011e58:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011e5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d001      	beq.n	8011e64 <phhalHw_Pn5180_Lpcd+0x7c>
 8011e60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e62:	e0ad      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 8011e64:	7d3b      	ldrb	r3, [r7, #20]
 8011e66:	f003 0303 	and.w	r3, r3, #3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d109      	bne.n	8011e82 <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 8011e6e:	7c3b      	ldrb	r3, [r7, #16]
 8011e70:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 8011e72:	7c7b      	ldrb	r3, [r7, #17]
 8011e74:	021b      	lsls	r3, r3, #8
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	461a      	mov	r2, r3
 8011e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e80:	e002      	b.n	8011e88 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011e86:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 8011e88:	7cfb      	ldrb	r3, [r7, #19]
 8011e8a:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 8011e9a:	7b3b      	ldrb	r3, [r7, #12]
 8011e9c:	f003 0301 	and.w	r3, r3, #1
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d009      	beq.n	8011eb8 <phhalHw_Pn5180_Lpcd+0xd0>
 8011ea4:	69fa      	ldr	r2, [r7, #28]
 8011ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea8:	4053      	eors	r3, r2
 8011eaa:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d002      	beq.n	8011eb8 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 8011eb6:	e073      	b.n	8011fa0 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011ebe:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8011ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011ec6:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8011ec8:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 8011eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d203      	bcs.n	8011ed8 <phhalHw_Pn5180_Lpcd+0xf0>
 8011ed0:	69fa      	ldr	r2, [r7, #28]
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	e002      	b.n	8011ede <phhalHw_Pn5180_Lpcd+0xf6>
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011edc:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8011ede:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 8011ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d902      	bls.n	8011eee <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8011eec:	e058      	b.n	8011fa0 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8011ef2:	e055      	b.n	8011fa0 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8011ef4:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8011ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8011efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011efc:	2103      	movs	r1, #3
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f000 fb64 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8011f04:	4603      	mov	r3, r0
 8011f06:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011f08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d001      	beq.n	8011f12 <phhalHw_Pn5180_Lpcd+0x12a>
 8011f0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f10:	e056      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8011f18:	2300      	movs	r3, #0
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	f009 fcf1 	bl	801b904 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8011f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f24:	2101      	movs	r1, #1
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fb50 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011f30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d001      	beq.n	8011f3a <phhalHw_Pn5180_Lpcd+0x152>
 8011f36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f38:	e042      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f000 ffd6 	bl	8012ef2 <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 8011f46:	4603      	mov	r3, r0
 8011f48:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011f4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d001      	beq.n	8011f54 <phhalHw_Pn5180_Lpcd+0x16c>
 8011f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f52:	e035      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8011f54:	f107 0318 	add.w	r3, r7, #24
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	2101      	movs	r1, #1
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f002 ffc9 	bl	8014ef8 <phhalHw_Pn5180_WaitIrq>
 8011f66:	4603      	mov	r3, r0
 8011f68:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011f6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d001      	beq.n	8011f74 <phhalHw_Pn5180_Lpcd+0x18c>
 8011f70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f72:	e025      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d002      	beq.n	8011f84 <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 8011f82:	e00d      	b.n	8011fa0 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8011f84:	69bb      	ldr	r3, [r7, #24]
 8011f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d002      	beq.n	8011f94 <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 8011f8e:	2321      	movs	r3, #33	@ 0x21
 8011f90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8011f92:	e005      	b.n	8011fa0 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 8011f94:	2301      	movs	r3, #1
 8011f96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8011f98:	e002      	b.n	8011fa0 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011f9a:	f240 2321 	movw	r3, #545	@ 0x221
 8011f9e:	e00f      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8011fa0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00b      	beq.n	8011fbe <phhalHw_Pn5180_Lpcd+0x1d6>
 8011fa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011fa8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d106      	bne.n	8011fbe <phhalHw_Pn5180_Lpcd+0x1d6>
 8011fb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	e000      	b.n	8011fc0 <phhalHw_Pn5180_Lpcd+0x1d8>
 8011fbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3738      	adds	r7, #56	@ 0x38
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <phhalHw_Pn5180_SetListenParameters>:
    uint8_t * pNfcId1,
    uint8_t SelRes,
    uint8_t * pPollingResp,
    uint8_t bNfcId3
    )
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b08a      	sub	sp, #40	@ 0x28
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	70fb      	strb	r3, [r7, #3]
    /* Check all the pointers */
    PH_ASSERT_NULL(pSensRes);
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d101      	bne.n	8011fe0 <phhalHw_Pn5180_SetListenParameters+0x18>
 8011fdc:	2321      	movs	r3, #33	@ 0x21
 8011fde:	e027      	b.n	8012030 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pNfcId1);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <phhalHw_Pn5180_SetListenParameters+0x22>
 8011fe6:	2321      	movs	r3, #33	@ 0x21
 8011fe8:	e022      	b.n	8012030 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pPollingResp);
 8011fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d101      	bne.n	8011ff4 <phhalHw_Pn5180_SetListenParameters+0x2c>
 8011ff0:	2321      	movs	r3, #33	@ 0x21
 8011ff2:	e01d      	b.n	8012030 <phhalHw_Pn5180_SetListenParameters+0x68>
    if(0U != bNfcId3)
    {
        /*Coverity*/;
    }

    (void)memcpy(&aCmd[0], pSensRes, PHHAL_HW_PN5180_SET_LISTEN_SENRES_LEN);
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	881b      	ldrh	r3, [r3, #0]
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	823b      	strh	r3, [r7, #16]
    (void)memcpy(&aCmd[2], pNfcId1, PHHAL_HW_PN5180_SET_LISTEN_NFCID1_LEN);
 8011ffc:	f107 0310 	add.w	r3, r7, #16
 8012000:	3302      	adds	r3, #2
 8012002:	2203      	movs	r2, #3
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	4618      	mov	r0, r3
 8012008:	f00f fe89 	bl	8021d1e <memcpy>
    (void)memcpy(&aCmd[5], &SelRes, PHHAL_HW_PN5180_SET_LISTEN_SELRES_LEN);
 801200c:	78fb      	ldrb	r3, [r7, #3]
 801200e:	757b      	strb	r3, [r7, #21]
    (void)memcpy(&aCmd[6], pPollingResp, PHHAL_HW_PN5180_SET_LISTEN_POLLRES_LEN);
 8012010:	f107 0310 	add.w	r3, r7, #16
 8012014:	3306      	adds	r3, #6
 8012016:	2212      	movs	r2, #18
 8012018:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801201a:	4618      	mov	r0, r3
 801201c:	f00f fe7f 	bl	8021d1e <memcpy>

    return phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR, aCmd, PHHAL_HW_PN5180_SET_LISTEN_LEN);
 8012020:	f107 0210 	add.w	r2, r7, #16
 8012024:	2318      	movs	r3, #24
 8012026:	2140      	movs	r1, #64	@ 0x40
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f000 fdeb 	bl	8012c04 <phhalHw_Pn5180_Instr_WriteE2Prom>
 801202e:	4603      	mov	r3, r0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3728      	adds	r7, #40	@ 0x28
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b08e      	sub	sp, #56	@ 0x38
 801203c:	af02      	add	r7, sp, #8
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	4611      	mov	r1, r2
 8012044:	461a      	mov	r2, r3
 8012046:	460b      	mov	r3, r1
 8012048:	71fb      	strb	r3, [r7, #7]
 801204a:	4613      	mov	r3, r2
 801204c:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 801204e:	2300      	movs	r3, #0
 8012050:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8012052:	2300      	movs	r3, #0
 8012054:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 8012056:	2300      	movs	r3, #0
 8012058:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 801205c:	2300      	movs	r3, #0
 801205e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 8012062:	2301      	movs	r3, #1
 8012064:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 8012068:	2300      	movs	r3, #0
 801206a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 801206c:	2300      	movs	r3, #0
 801206e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d101      	bne.n	801207c <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 8012078:	2321      	movs	r3, #33	@ 0x21
 801207a:	e16b      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 801207c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207e:	2b00      	cmp	r3, #0
 8012080:	d101      	bne.n	8012086 <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 8012082:	2321      	movs	r3, #33	@ 0x21
 8012084:	e166      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 8012086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012088:	2b00      	cmp	r3, #0
 801208a:	d101      	bne.n	8012090 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 801208c:	2321      	movs	r3, #33	@ 0x21
 801208e:	e161      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 8012090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012092:	2b00      	cmp	r3, #0
 8012094:	d101      	bne.n	801209a <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 8012096:	2321      	movs	r3, #33	@ 0x21
 8012098:	e15c      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 801209a:	79fb      	ldrb	r3, [r7, #7]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d02f      	beq.n	8012100 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 80120a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80120ac:	085b      	lsrs	r3, r3, #1
 80120ae:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 80120b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80120b6:	f003 0307 	and.w	r3, r3, #7
 80120ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 80120be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120c0:	3301      	adds	r3, #1
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	091b      	lsrs	r3, r3, #4
 80120c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 80120ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120ce:	f003 0303 	and.w	r3, r3, #3
 80120d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 80120d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d001      	beq.n	80120e2 <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d109      	bne.n	80120f6 <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 80120e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80120e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d007      	beq.n	80120fe <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 80120ee:	f240 2321 	movw	r3, #545	@ 0x221
 80120f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 80120f4:	e003      	b.n	80120fe <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 80120f6:	f240 2321 	movw	r3, #545	@ 0x221
 80120fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80120fc:	e000      	b.n	8012100 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 80120fe:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012106:	2b01      	cmp	r3, #1
 8012108:	d120      	bne.n	801214c <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2200      	movs	r2, #0
 801210e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 8012112:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012114:	2b00      	cmp	r3, #0
 8012116:	d110      	bne.n	801213a <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 8012118:	f107 0314 	add.w	r3, r7, #20
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	2322      	movs	r3, #34	@ 0x22
 8012120:	f04f 32ff 	mov.w	r2, #4294967295
 8012124:	2105      	movs	r1, #5
 8012126:	488d      	ldr	r0, [pc, #564]	@ (801235c <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 8012128:	f009 fb6a 	bl	801b800 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	f003 0320 	and.w	r3, r3, #32
 8012132:	2b00      	cmp	r3, #0
 8012134:	d001      	beq.n	801213a <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 8012136:	2312      	movs	r3, #18
 8012138:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 801213a:	f009 fa07 	bl	801b54c <phDriver_TimerStop>
 801213e:	4603      	mov	r3, r0
 8012140:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012142:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012144:	2b00      	cmp	r3, #0
 8012146:	d001      	beq.n	801214c <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 8012148:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801214a:	e103      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 801214c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801214e:	2b00      	cmp	r3, #0
 8012150:	d001      	beq.n	8012156 <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 8012152:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012154:	e0fe      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8012156:	4b82      	ldr	r3, [pc, #520]	@ (8012360 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 8012158:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 801215a:	4a82      	ldr	r2, [pc, #520]	@ (8012364 <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 801215c:	2103      	movs	r1, #3
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f000 fa34 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8012164:	4603      	mov	r3, r0
 8012166:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012168:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801216a:	2b00      	cmp	r3, #0
 801216c:	d001      	beq.n	8012172 <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 801216e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012170:	e0f0      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012178:	2300      	movs	r3, #0
 801217a:	2201      	movs	r2, #1
 801217c:	2100      	movs	r1, #0
 801217e:	f009 fbc1 	bl	801b904 <phOsal_EventClear>
 8012182:	4603      	mov	r3, r0
 8012184:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012186:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012188:	2b00      	cmp	r3, #0
 801218a:	d001      	beq.n	8012190 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 801218c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801218e:	e0e1      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8012190:	6a3a      	ldr	r2, [r7, #32]
 8012192:	2101      	movs	r1, #1
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f000 fa8f 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 801219a:	4603      	mov	r3, r0
 801219c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801219e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d001      	beq.n	80121a8 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 80121a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121a6:	e0d5      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 80121a8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d101      	bne.n	80121b4 <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 80121b0:	2300      	movs	r3, #0
 80121b2:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 80121b4:	79b9      	ldrb	r1, [r7, #6]
 80121b6:	79fa      	ldrb	r2, [r7, #7]
 80121b8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80121bc:	9301      	str	r3, [sp, #4]
 80121be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	460b      	mov	r3, r1
 80121c4:	68b9      	ldr	r1, [r7, #8]
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f000 ff7a 	bl	80130c0 <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 80121cc:	4603      	mov	r3, r0
 80121ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80121d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d001      	beq.n	80121da <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 80121d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121d8:	e0bc      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 80121da:	f107 0318 	add.w	r3, r7, #24
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	6a3b      	ldr	r3, [r7, #32]
 80121e2:	2200      	movs	r2, #0
 80121e4:	2101      	movs	r1, #1
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f002 fe86 	bl	8014ef8 <phhalHw_Pn5180_WaitIrq>
 80121ec:	4603      	mov	r3, r0
 80121ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80121f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 80121f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121f8:	e0ac      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	f003 0301 	and.w	r3, r3, #1
 8012200:	2b00      	cmp	r3, #0
 8012202:	f000 8095 	beq.w	8012330 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 8012206:	f107 031c 	add.w	r3, r7, #28
 801220a:	4619      	mov	r1, r3
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f000 ffe6 	bl	80131de <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 8012212:	4603      	mov	r3, r0
 8012214:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012216:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012218:	2b00      	cmp	r3, #0
 801221a:	d001      	beq.n	8012220 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 801221c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801221e:	e099      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 8012220:	8bbb      	ldrh	r3, [r7, #28]
 8012222:	461a      	mov	r2, r3
 8012224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f001 f82f 	bl	801328a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 801222c:	4603      	mov	r3, r0
 801222e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012230:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012232:	2b00      	cmp	r3, #0
 8012234:	d001      	beq.n	801223a <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 8012236:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012238:	e08c      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 801223a:	8bba      	ldrh	r2, [r7, #28]
 801223c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801223e:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 8012240:	8bbb      	ldrh	r3, [r7, #28]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d071      	beq.n	801232a <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 8012246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012248:	3301      	adds	r3, #1
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	f003 0307 	and.w	r3, r3, #7
 8012250:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 8012252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012254:	3302      	adds	r3, #2
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801225c:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 801225e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012262:	005b      	lsls	r3, r3, #1
 8012264:	b25a      	sxtb	r2, r3
 8012266:	7fbb      	ldrb	r3, [r7, #30]
 8012268:	09db      	lsrs	r3, r3, #7
 801226a:	b2db      	uxtb	r3, r3
 801226c:	b25b      	sxtb	r3, r3
 801226e:	4313      	orrs	r3, r2
 8012270:	b25b      	sxtb	r3, r3
 8012272:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 8012276:	2300      	movs	r3, #0
 8012278:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 801227a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801227e:	2201      	movs	r2, #1
 8012280:	fa02 f303 	lsl.w	r3, r2, r3
 8012284:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 8012288:	e04a      	b.n	8012320 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 801228a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012290:	4413      	add	r3, r2
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	2b02      	cmp	r3, #2
 8012296:	d112      	bne.n	80122be <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8012298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801229e:	3301      	adds	r3, #1
 80122a0:	4413      	add	r3, r2
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10a      	bne.n	80122be <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 80122a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122ae:	3302      	adds	r3, #2
 80122b0:	4413      	add	r3, r2
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d102      	bne.n	80122be <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 80122b8:	2301      	movs	r3, #1
 80122ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80122bc:	e028      	b.n	8012310 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 80122be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122c4:	4413      	add	r3, r2
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d11e      	bne.n	801230a <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 80122cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122d2:	3301      	adds	r3, #1
 80122d4:	4413      	add	r3, r2
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d116      	bne.n	801230a <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 80122dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122e2:	3302      	adds	r3, #2
 80122e4:	4413      	add	r3, r2
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10e      	bne.n	801230a <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 80122ec:	2303      	movs	r3, #3
 80122ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 80122f0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80122f4:	f003 0301 	and.w	r3, r3, #1
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d11b      	bne.n	8012334 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 80122fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012300:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 8012304:	2b00      	cmp	r3, #0
 8012306:	d115      	bne.n	8012334 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 8012308:	e002      	b.n	8012310 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 801230a:	2300      	movs	r3, #0
 801230c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 801230e:	e011      	b.n	8012334 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 8012310:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012312:	3303      	adds	r3, #3
 8012314:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 8012316:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801231a:	3b01      	subs	r3, #1
 801231c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 8012320:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012324:	2b00      	cmp	r3, #0
 8012326:	d1b0      	bne.n	801228a <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 8012328:	e004      	b.n	8012334 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 801232a:	237f      	movs	r3, #127	@ 0x7f
 801232c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801232e:	e001      	b.n	8012334 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 8012330:	2301      	movs	r3, #1
 8012332:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012334:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00b      	beq.n	8012352 <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 801233a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801233c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012340:	2b00      	cmp	r3, #0
 8012342:	d106      	bne.n	8012352 <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 8012344:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012346:	b2db      	uxtb	r3, r3
 8012348:	b29b      	uxth	r3, r3
 801234a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801234e:	b29b      	uxth	r3, r3
 8012350:	e000      	b.n	8012354 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 8012352:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8012354:	4618      	mov	r0, r3
 8012356:	3730      	adds	r7, #48	@ 0x30
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}
 801235c:	20001be0 	.word	0x20001be0
 8012360:	00020001 	.word	0x00020001
 8012364:	000fffff 	.word	0x000fffff

08012368 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b08a      	sub	sp, #40	@ 0x28
 801236c:	af02      	add	r7, sp, #8
 801236e:	60f8      	str	r0, [r7, #12]
 8012370:	60b9      	str	r1, [r7, #8]
 8012372:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8012374:	2300      	movs	r3, #0
 8012376:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d101      	bne.n	8012382 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 801237e:	2321      	movs	r3, #33	@ 0x21
 8012380:	e07d      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d101      	bne.n	801238c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 8012388:	2321      	movs	r3, #33	@ 0x21
 801238a:	e078      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 801238c:	4b3e      	ldr	r3, [pc, #248]	@ (8012488 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 801238e:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8012390:	69ba      	ldr	r2, [r7, #24]
 8012392:	2103      	movs	r1, #3
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f000 f919 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 801239a:	4603      	mov	r3, r0
 801239c:	82fb      	strh	r3, [r7, #22]
 801239e:	8afb      	ldrh	r3, [r7, #22]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 80123a4:	8afb      	ldrh	r3, [r7, #22]
 80123a6:	e06a      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80123ae:	2300      	movs	r3, #0
 80123b0:	2201      	movs	r2, #1
 80123b2:	2100      	movs	r1, #0
 80123b4:	f009 faa6 	bl	801b904 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 80123b8:	69ba      	ldr	r2, [r7, #24]
 80123ba:	2101      	movs	r1, #1
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f97b 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80123c2:	4603      	mov	r3, r0
 80123c4:	82fb      	strh	r3, [r7, #22]
 80123c6:	8afb      	ldrh	r3, [r7, #22]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 80123cc:	8afb      	ldrh	r3, [r7, #22]
 80123ce:	e056      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f000 ffba 	bl	801334a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 80123d6:	4603      	mov	r3, r0
 80123d8:	82fb      	strh	r3, [r7, #22]
 80123da:	8afb      	ldrh	r3, [r7, #22]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 80123e0:	8afb      	ldrh	r3, [r7, #22]
 80123e2:	e04c      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 80123e4:	f107 0310 	add.w	r3, r7, #16
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	2200      	movs	r2, #0
 80123ee:	2101      	movs	r1, #1
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f002 fd81 	bl	8014ef8 <phhalHw_Pn5180_WaitIrq>
 80123f6:	4603      	mov	r3, r0
 80123f8:	82fb      	strh	r3, [r7, #22]
 80123fa:	8afb      	ldrh	r3, [r7, #22]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d001      	beq.n	8012404 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 8012400:	8afb      	ldrh	r3, [r7, #22]
 8012402:	e03c      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	f003 0301 	and.w	r3, r3, #1
 801240a:	2b00      	cmp	r3, #0
 801240c:	d025      	beq.n	801245a <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 801240e:	f107 0314 	add.w	r3, r7, #20
 8012412:	4619      	mov	r1, r3
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 fee2 	bl	80131de <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 801241a:	4603      	mov	r3, r0
 801241c:	82fb      	strh	r3, [r7, #22]
 801241e:	8afb      	ldrh	r3, [r7, #22]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 8012424:	8afb      	ldrh	r3, [r7, #22]
 8012426:	e02a      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 8012428:	8abb      	ldrh	r3, [r7, #20]
 801242a:	461a      	mov	r2, r3
 801242c:	68b9      	ldr	r1, [r7, #8]
 801242e:	68f8      	ldr	r0, [r7, #12]
 8012430:	f000 ff2b 	bl	801328a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 8012434:	4603      	mov	r3, r0
 8012436:	82fb      	strh	r3, [r7, #22]
 8012438:	8afb      	ldrh	r3, [r7, #22]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 801243e:	8afb      	ldrh	r3, [r7, #22]
 8012440:	e01d      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 8012442:	8aba      	ldrh	r2, [r7, #20]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 8012448:	8abb      	ldrh	r3, [r7, #20]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d002      	beq.n	8012454 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 801244e:	2300      	movs	r3, #0
 8012450:	83fb      	strh	r3, [r7, #30]
 8012452:	e004      	b.n	801245e <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 8012454:	237f      	movs	r3, #127	@ 0x7f
 8012456:	83fb      	strh	r3, [r7, #30]
 8012458:	e001      	b.n	801245e <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 801245a:	2301      	movs	r3, #1
 801245c:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 801245e:	8bfb      	ldrh	r3, [r7, #30]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d00b      	beq.n	801247c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 8012464:	8bfb      	ldrh	r3, [r7, #30]
 8012466:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801246a:	2b00      	cmp	r3, #0
 801246c:	d106      	bne.n	801247c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 801246e:	8bfb      	ldrh	r3, [r7, #30]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	b29b      	uxth	r3, r3
 8012474:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012478:	b29b      	uxth	r3, r3
 801247a:	e000      	b.n	801247e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 801247c:	8bfb      	ldrh	r3, [r7, #30]
}
 801247e:	4618      	mov	r0, r3
 8012480:	3720      	adds	r7, #32
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	00020001 	.word	0x00020001

0801248c <phhalHw_Pn5180_EventWait>:

phStatus_t phhalHw_Pn5180_EventWait(phhalHw_Pn5180_DataParams_t * pDataParams, uint32_t dwEventTimeout)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af02      	add	r7, sp, #8
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
	printf("phhalHw_Pn5180_EventWait:\r\n");
 8012496:	4809      	ldr	r0, [pc, #36]	@ (80124bc <phhalHw_Pn5180_EventWait+0x30>)
 8012498:	f00f fa80 	bl	802199c <puts>
    return phOsal_EventPend((volatile phOsal_Event_t *)(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, dwEventTimeout,
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80124a2:	2300      	movs	r3, #0
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	2321      	movs	r3, #33	@ 0x21
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	2101      	movs	r1, #1
 80124ac:	f009 f9a8 	bl	801b800 <phOsal_EventPend>
 80124b0:	4603      	mov	r3, r0
        (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	080250a4 	.word	0x080250a4

080124c0 <phhalHw_Pn5180_EventConsume>:

phStatus_t phhalHw_Pn5180_EventConsume(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
    return phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80124ce:	2300      	movs	r3, #0
 80124d0:	2221      	movs	r2, #33	@ 0x21
 80124d2:	2100      	movs	r1, #0
 80124d4:	f009 fa16 	bl	801b904 <phOsal_EventClear>
 80124d8:	4603      	mov	r3, r0
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 80124e8:	2201      	movs	r2, #1
 80124ea:	2120      	movs	r1, #32
 80124ec:	4810      	ldr	r0, [pc, #64]	@ (8012530 <phhalHw_Pn5180_Reset+0x4c>)
 80124ee:	f008 ffd1 	bl	801b494 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 80124f2:	2200      	movs	r2, #0
 80124f4:	2102      	movs	r1, #2
 80124f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80124fa:	f008 ffdd 	bl	801b4b8 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 80124fe:	2200      	movs	r2, #0
 8012500:	2120      	movs	r1, #32
 8012502:	480b      	ldr	r0, [pc, #44]	@ (8012530 <phhalHw_Pn5180_Reset+0x4c>)
 8012504:	f008 ffc6 	bl	801b494 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 8012508:	2200      	movs	r2, #0
 801250a:	2102      	movs	r1, #2
 801250c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012510:	f008 ffd2 	bl	801b4b8 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 8012514:	2201      	movs	r2, #1
 8012516:	2120      	movs	r1, #32
 8012518:	4805      	ldr	r0, [pc, #20]	@ (8012530 <phhalHw_Pn5180_Reset+0x4c>)
 801251a:	f008 ffbb 	bl	801b494 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 801251e:	2200      	movs	r2, #0
 8012520:	2102      	movs	r1, #2
 8012522:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012526:	f008 ffc7 	bl	801b4b8 <phDriver_TimerStart>
#endif /*_WIN32*/
}
 801252a:	bf00      	nop
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	48000400 	.word	0x48000400

08012534 <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	460b      	mov	r3, r1
 801253e:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	789b      	ldrb	r3, [r3, #2]
 8012544:	2b01      	cmp	r3, #1
 8012546:	d107      	bne.n	8012558 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 8012548:	78fb      	ldrb	r3, [r7, #3]
 801254a:	461a      	mov	r2, r3
 801254c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012554:	f008 ff9e 	bl	801b494 <phDriver_PinWrite>
    }
}
 8012558:	bf00      	nop
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 8012560:	b480      	push	{r7}
 8012562:	b085      	sub	sp, #20
 8012564:	af00      	add	r7, sp, #0
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f44f 7283 	mov.w	r2, #262	@ 0x106
 801257c:	801a      	strh	r2, [r3, #0]
}
 801257e:	bf00      	nop
 8012580:	3714      	adds	r7, #20
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
	...

0801258c <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 801258c:	b480      	push	{r7}
 801258e:	b085      	sub	sp, #20
 8012590:	af00      	add	r7, sp, #0
 8012592:	4603      	mov	r3, r0
 8012594:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 8012596:	2300      	movs	r3, #0
 8012598:	73fb      	strb	r3, [r7, #15]
 801259a:	e00b      	b.n	80125b4 <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 801259c:	7bfb      	ldrb	r3, [r7, #15]
 801259e:	4a0a      	ldr	r2, [pc, #40]	@ (80125c8 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 80125a0:	5cd3      	ldrb	r3, [r2, r3]
 80125a2:	79fa      	ldrb	r2, [r7, #7]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d102      	bne.n	80125ae <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 80125a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80125ac:	e006      	b.n	80125bc <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 80125ae:	7bfb      	ldrb	r3, [r7, #15]
 80125b0:	3301      	adds	r3, #1
 80125b2:	73fb      	strb	r3, [r7, #15]
 80125b4:	7bfb      	ldrb	r3, [r7, #15]
 80125b6:	2b06      	cmp	r3, #6
 80125b8:	d9f0      	bls.n	801259c <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 80125ba:	2300      	movs	r3, #0

}
 80125bc:	4618      	mov	r0, r3
 80125be:	3714      	adds	r7, #20
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr
 80125c8:	08025aa8 	.word	0x08025aa8

080125cc <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b08a      	sub	sp, #40	@ 0x28
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	460b      	mov	r3, r1
 80125d6:	607a      	str	r2, [r7, #4]
 80125d8:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d006      	beq.n	80125ee <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80125e0:	7afb      	ldrb	r3, [r7, #11]
 80125e2:	2b43      	cmp	r3, #67	@ 0x43
 80125e4:	d906      	bls.n	80125f4 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80125e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	db02      	blt.n	80125f4 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80125ee:	f240 2321 	movw	r3, #545	@ 0x221
 80125f2:	e05d      	b.n	80126b0 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80125f4:	7afb      	ldrb	r3, [r7, #11]
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7ff ffc8 	bl	801258c <phhalHw_Pn5180_Check_Reg_Readonly>
 80125fc:	4603      	mov	r3, r0
 80125fe:	83fb      	strh	r3, [r7, #30]
 8012600:	8bfb      	ldrh	r3, [r7, #30]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d001      	beq.n	801260a <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 8012606:	8bfb      	ldrh	r3, [r7, #30]
 8012608:	e052      	b.n	80126b0 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 801260a:	2300      	movs	r3, #0
 801260c:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 801260e:	7f7b      	ldrb	r3, [r7, #29]
 8012610:	1c5a      	adds	r2, r3, #1
 8012612:	777a      	strb	r2, [r7, #29]
 8012614:	3320      	adds	r3, #32
 8012616:	443b      	add	r3, r7
 8012618:	2200      	movs	r2, #0
 801261a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801261e:	7f7b      	ldrb	r3, [r7, #29]
 8012620:	1c5a      	adds	r2, r3, #1
 8012622:	777a      	strb	r2, [r7, #29]
 8012624:	3320      	adds	r3, #32
 8012626:	443b      	add	r3, r7
 8012628:	7afa      	ldrb	r2, [r7, #11]
 801262a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 801262e:	7f7b      	ldrb	r3, [r7, #29]
 8012630:	1c5a      	adds	r2, r3, #1
 8012632:	777a      	strb	r2, [r7, #29]
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	b2d2      	uxtb	r2, r2
 8012638:	3320      	adds	r3, #32
 801263a:	443b      	add	r3, r7
 801263c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	0a1a      	lsrs	r2, r3, #8
 8012644:	7f7b      	ldrb	r3, [r7, #29]
 8012646:	1c59      	adds	r1, r3, #1
 8012648:	7779      	strb	r1, [r7, #29]
 801264a:	b2d2      	uxtb	r2, r2
 801264c:	3320      	adds	r3, #32
 801264e:	443b      	add	r3, r7
 8012650:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	0c1a      	lsrs	r2, r3, #16
 8012658:	7f7b      	ldrb	r3, [r7, #29]
 801265a:	1c59      	adds	r1, r3, #1
 801265c:	7779      	strb	r1, [r7, #29]
 801265e:	b2d2      	uxtb	r2, r2
 8012660:	3320      	adds	r3, #32
 8012662:	443b      	add	r3, r7
 8012664:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	0e1a      	lsrs	r2, r3, #24
 801266c:	7f7b      	ldrb	r3, [r7, #29]
 801266e:	1c59      	adds	r1, r3, #1
 8012670:	7779      	strb	r1, [r7, #29]
 8012672:	b2d2      	uxtb	r2, r2
 8012674:	3320      	adds	r3, #32
 8012676:	443b      	add	r3, r7
 8012678:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 801267c:	2300      	movs	r3, #0
 801267e:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012680:	7f7b      	ldrb	r3, [r7, #29]
 8012682:	b29a      	uxth	r2, r3
 8012684:	7f3b      	ldrb	r3, [r7, #28]
 8012686:	b298      	uxth	r0, r3
 8012688:	f107 0114 	add.w	r1, r7, #20
 801268c:	f107 031a 	add.w	r3, r7, #26
 8012690:	9301      	str	r3, [sp, #4]
 8012692:	f107 0310 	add.w	r3, r7, #16
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	4603      	mov	r3, r0
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f7ff f878 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 80126a0:	4603      	mov	r3, r0
 80126a2:	83fb      	strh	r3, [r7, #30]
 80126a4:	8bfb      	ldrh	r3, [r7, #30]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 80126aa:	8bfb      	ldrh	r3, [r7, #30]
 80126ac:	e000      	b.n	80126b0 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80126ae:	2300      	movs	r3, #0
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3720      	adds	r7, #32
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b08a      	sub	sp, #40	@ 0x28
 80126bc:	af02      	add	r7, sp, #8
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	460b      	mov	r3, r1
 80126c2:	607a      	str	r2, [r7, #4]
 80126c4:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d006      	beq.n	80126da <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80126cc:	7afb      	ldrb	r3, [r7, #11]
 80126ce:	2b43      	cmp	r3, #67	@ 0x43
 80126d0:	d906      	bls.n	80126e0 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80126d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	db02      	blt.n	80126e0 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80126da:	f240 2321 	movw	r3, #545	@ 0x221
 80126de:	e05d      	b.n	801279c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80126e0:	7afb      	ldrb	r3, [r7, #11]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7ff ff52 	bl	801258c <phhalHw_Pn5180_Check_Reg_Readonly>
 80126e8:	4603      	mov	r3, r0
 80126ea:	83fb      	strh	r3, [r7, #30]
 80126ec:	8bfb      	ldrh	r3, [r7, #30]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d001      	beq.n	80126f6 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 80126f2:	8bfb      	ldrh	r3, [r7, #30]
 80126f4:	e052      	b.n	801279c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80126f6:	2300      	movs	r3, #0
 80126f8:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 80126fa:	7f7b      	ldrb	r3, [r7, #29]
 80126fc:	1c5a      	adds	r2, r3, #1
 80126fe:	777a      	strb	r2, [r7, #29]
 8012700:	3320      	adds	r3, #32
 8012702:	443b      	add	r3, r7
 8012704:	2201      	movs	r2, #1
 8012706:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801270a:	7f7b      	ldrb	r3, [r7, #29]
 801270c:	1c5a      	adds	r2, r3, #1
 801270e:	777a      	strb	r2, [r7, #29]
 8012710:	3320      	adds	r3, #32
 8012712:	443b      	add	r3, r7
 8012714:	7afa      	ldrb	r2, [r7, #11]
 8012716:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 801271a:	7f7b      	ldrb	r3, [r7, #29]
 801271c:	1c5a      	adds	r2, r3, #1
 801271e:	777a      	strb	r2, [r7, #29]
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	b2d2      	uxtb	r2, r2
 8012724:	3320      	adds	r3, #32
 8012726:	443b      	add	r3, r7
 8012728:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	0a1a      	lsrs	r2, r3, #8
 8012730:	7f7b      	ldrb	r3, [r7, #29]
 8012732:	1c59      	adds	r1, r3, #1
 8012734:	7779      	strb	r1, [r7, #29]
 8012736:	b2d2      	uxtb	r2, r2
 8012738:	3320      	adds	r3, #32
 801273a:	443b      	add	r3, r7
 801273c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	0c1a      	lsrs	r2, r3, #16
 8012744:	7f7b      	ldrb	r3, [r7, #29]
 8012746:	1c59      	adds	r1, r3, #1
 8012748:	7779      	strb	r1, [r7, #29]
 801274a:	b2d2      	uxtb	r2, r2
 801274c:	3320      	adds	r3, #32
 801274e:	443b      	add	r3, r7
 8012750:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	0e1a      	lsrs	r2, r3, #24
 8012758:	7f7b      	ldrb	r3, [r7, #29]
 801275a:	1c59      	adds	r1, r3, #1
 801275c:	7779      	strb	r1, [r7, #29]
 801275e:	b2d2      	uxtb	r2, r2
 8012760:	3320      	adds	r3, #32
 8012762:	443b      	add	r3, r7
 8012764:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8012768:	2300      	movs	r3, #0
 801276a:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801276c:	7f7b      	ldrb	r3, [r7, #29]
 801276e:	b29a      	uxth	r2, r3
 8012770:	7f3b      	ldrb	r3, [r7, #28]
 8012772:	b298      	uxth	r0, r3
 8012774:	f107 0114 	add.w	r1, r7, #20
 8012778:	f107 031a 	add.w	r3, r7, #26
 801277c:	9301      	str	r3, [sp, #4]
 801277e:	f107 0310 	add.w	r3, r7, #16
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	4603      	mov	r3, r0
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	f7ff f802 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 801278c:	4603      	mov	r3, r0
 801278e:	83fb      	strh	r3, [r7, #30]
 8012790:	8bfb      	ldrh	r3, [r7, #30]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d001      	beq.n	801279a <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 8012796:	8bfb      	ldrh	r3, [r7, #30]
 8012798:	e000      	b.n	801279c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801279a:	2300      	movs	r3, #0
}
 801279c:	4618      	mov	r0, r3
 801279e:	3720      	adds	r7, #32
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b08a      	sub	sp, #40	@ 0x28
 80127a8:	af02      	add	r7, sp, #8
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	460b      	mov	r3, r1
 80127ae:	607a      	str	r2, [r7, #4]
 80127b0:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d006      	beq.n	80127c6 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80127b8:	7afb      	ldrb	r3, [r7, #11]
 80127ba:	2b43      	cmp	r3, #67	@ 0x43
 80127bc:	d906      	bls.n	80127cc <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80127be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	db02      	blt.n	80127cc <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80127c6:	f240 2321 	movw	r3, #545	@ 0x221
 80127ca:	e05d      	b.n	8012888 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80127cc:	7afb      	ldrb	r3, [r7, #11]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7ff fedc 	bl	801258c <phhalHw_Pn5180_Check_Reg_Readonly>
 80127d4:	4603      	mov	r3, r0
 80127d6:	83fb      	strh	r3, [r7, #30]
 80127d8:	8bfb      	ldrh	r3, [r7, #30]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d001      	beq.n	80127e2 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 80127de:	8bfb      	ldrh	r3, [r7, #30]
 80127e0:	e052      	b.n	8012888 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80127e2:	2300      	movs	r3, #0
 80127e4:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 80127e6:	7f7b      	ldrb	r3, [r7, #29]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	777a      	strb	r2, [r7, #29]
 80127ec:	3320      	adds	r3, #32
 80127ee:	443b      	add	r3, r7
 80127f0:	2202      	movs	r2, #2
 80127f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80127f6:	7f7b      	ldrb	r3, [r7, #29]
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	777a      	strb	r2, [r7, #29]
 80127fc:	3320      	adds	r3, #32
 80127fe:	443b      	add	r3, r7
 8012800:	7afa      	ldrb	r2, [r7, #11]
 8012802:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 8012806:	7f7b      	ldrb	r3, [r7, #29]
 8012808:	1c5a      	adds	r2, r3, #1
 801280a:	777a      	strb	r2, [r7, #29]
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	b2d2      	uxtb	r2, r2
 8012810:	3320      	adds	r3, #32
 8012812:	443b      	add	r3, r7
 8012814:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	0a1a      	lsrs	r2, r3, #8
 801281c:	7f7b      	ldrb	r3, [r7, #29]
 801281e:	1c59      	adds	r1, r3, #1
 8012820:	7779      	strb	r1, [r7, #29]
 8012822:	b2d2      	uxtb	r2, r2
 8012824:	3320      	adds	r3, #32
 8012826:	443b      	add	r3, r7
 8012828:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	0c1a      	lsrs	r2, r3, #16
 8012830:	7f7b      	ldrb	r3, [r7, #29]
 8012832:	1c59      	adds	r1, r3, #1
 8012834:	7779      	strb	r1, [r7, #29]
 8012836:	b2d2      	uxtb	r2, r2
 8012838:	3320      	adds	r3, #32
 801283a:	443b      	add	r3, r7
 801283c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	0e1a      	lsrs	r2, r3, #24
 8012844:	7f7b      	ldrb	r3, [r7, #29]
 8012846:	1c59      	adds	r1, r3, #1
 8012848:	7779      	strb	r1, [r7, #29]
 801284a:	b2d2      	uxtb	r2, r2
 801284c:	3320      	adds	r3, #32
 801284e:	443b      	add	r3, r7
 8012850:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8012854:	2300      	movs	r3, #0
 8012856:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012858:	7f7b      	ldrb	r3, [r7, #29]
 801285a:	b29a      	uxth	r2, r3
 801285c:	7f3b      	ldrb	r3, [r7, #28]
 801285e:	b298      	uxth	r0, r3
 8012860:	f107 0114 	add.w	r1, r7, #20
 8012864:	f107 031a 	add.w	r3, r7, #26
 8012868:	9301      	str	r3, [sp, #4]
 801286a:	f107 0310 	add.w	r3, r7, #16
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	4603      	mov	r3, r0
 8012872:	68f8      	ldr	r0, [r7, #12]
 8012874:	f7fe ff8c 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012878:	4603      	mov	r3, r0
 801287a:	83fb      	strh	r3, [r7, #30]
 801287c:	8bfb      	ldrh	r3, [r7, #30]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d001      	beq.n	8012886 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 8012882:	8bfb      	ldrh	r3, [r7, #30]
 8012884:	e000      	b.n	8012888 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3720      	adds	r7, #32
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b08c      	sub	sp, #48	@ 0x30
 8012894:	af02      	add	r7, sp, #8
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	4613      	mov	r3, r2
 801289c:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 801289e:	2300      	movs	r3, #0
 80128a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80128a2:	2300      	movs	r3, #0
 80128a4:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d016      	beq.n	80128da <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d013      	beq.n	80128da <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 80128b2:	88fb      	ldrh	r3, [r7, #6]
 80128b4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80128b8:	d80f      	bhi.n	80128da <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 80128ba:	88fb      	ldrh	r3, [r7, #6]
 80128bc:	2b05      	cmp	r3, #5
 80128be:	d90c      	bls.n	80128da <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 80128c0:	88fa      	ldrh	r2, [r7, #6]
 80128c2:	4b4b      	ldr	r3, [pc, #300]	@ (80129f0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 80128c4:	fba3 1302 	umull	r1, r3, r3, r2
 80128c8:	0899      	lsrs	r1, r3, #2
 80128ca:	460b      	mov	r3, r1
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	440b      	add	r3, r1
 80128d0:	005b      	lsls	r3, r3, #1
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d002      	beq.n	80128e0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80128da:	f240 2321 	movw	r3, #545	@ 0x221
 80128de:	e082      	b.n	80129e6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80128e0:	2300      	movs	r3, #0
 80128e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80128e6:	e038      	b.n	801295a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 80128e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128ec:	68ba      	ldr	r2, [r7, #8]
 80128ee:	4413      	add	r3, r2
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7ff fe4a 	bl	801258c <phhalHw_Pn5180_Check_Reg_Readonly>
 80128f8:	4603      	mov	r3, r0
 80128fa:	843b      	strh	r3, [r7, #32]
 80128fc:	8c3b      	ldrh	r3, [r7, #32]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d001      	beq.n	8012906 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 8012902:	8c3b      	ldrh	r3, [r7, #32]
 8012904:	e06f      	b.n	80129e6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8012906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801290a:	68ba      	ldr	r2, [r7, #8]
 801290c:	4413      	add	r3, r2
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b43      	cmp	r3, #67	@ 0x43
 8012912:	d90a      	bls.n	801292a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8012914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012918:	68ba      	ldr	r2, [r7, #8]
 801291a:	4413      	add	r3, r2
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	b25b      	sxtb	r3, r3
 8012920:	2b00      	cmp	r3, #0
 8012922:	db02      	blt.n	801292a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012924:	f240 2321 	movw	r3, #545	@ 0x221
 8012928:	e05d      	b.n	80129e6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 801292a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801292e:	3301      	adds	r3, #1
 8012930:	68ba      	ldr	r2, [r7, #8]
 8012932:	4413      	add	r3, r2
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d007      	beq.n	801294a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 801293a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801293e:	3301      	adds	r3, #1
 8012940:	68ba      	ldr	r2, [r7, #8]
 8012942:	4413      	add	r3, r2
 8012944:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 8012946:	2b03      	cmp	r3, #3
 8012948:	d902      	bls.n	8012950 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801294a:	f240 2321 	movw	r3, #545	@ 0x221
 801294e:	e04a      	b.n	80129e6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 8012950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012954:	3306      	adds	r3, #6
 8012956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801295a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801295e:	b29b      	uxth	r3, r3
 8012960:	88fa      	ldrh	r2, [r7, #6]
 8012962:	429a      	cmp	r2, r3
 8012964:	d8c0      	bhi.n	80128e8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8012966:	f107 0216 	add.w	r2, r7, #22
 801296a:	f107 0318 	add.w	r3, r7, #24
 801296e:	4619      	mov	r1, r3
 8012970:	68f8      	ldr	r0, [r7, #12]
 8012972:	f7ff fdf5 	bl	8012560 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 8012976:	8afb      	ldrh	r3, [r7, #22]
 8012978:	461a      	mov	r2, r3
 801297a:	88fb      	ldrh	r3, [r7, #6]
 801297c:	3301      	adds	r3, #1
 801297e:	429a      	cmp	r2, r3
 8012980:	d202      	bcs.n	8012988 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8012982:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8012986:	e02e      	b.n	80129e6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012988:	2300      	movs	r3, #0
 801298a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 801298c:	69ba      	ldr	r2, [r7, #24]
 801298e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012990:	1c59      	adds	r1, r3, #1
 8012992:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8012994:	4413      	add	r3, r2
 8012996:	2203      	movs	r2, #3
 8012998:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 801299a:	69ba      	ldr	r2, [r7, #24]
 801299c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801299e:	4413      	add	r3, r2
 80129a0:	88fa      	ldrh	r2, [r7, #6]
 80129a2:	68b9      	ldr	r1, [r7, #8]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f00f f9ba 	bl	8021d1e <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 80129aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80129ac:	88fb      	ldrh	r3, [r7, #6]
 80129ae:	4413      	add	r3, r2
 80129b0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 80129b2:	2300      	movs	r3, #0
 80129b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80129b8:	69b9      	ldr	r1, [r7, #24]
 80129ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80129be:	b298      	uxth	r0, r3
 80129c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80129c2:	f107 031e 	add.w	r3, r7, #30
 80129c6:	9301      	str	r3, [sp, #4]
 80129c8:	f107 0314 	add.w	r3, r7, #20
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	4603      	mov	r3, r0
 80129d0:	68f8      	ldr	r0, [r7, #12]
 80129d2:	f7fe fedd 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 80129d6:	4603      	mov	r3, r0
 80129d8:	843b      	strh	r3, [r7, #32]
 80129da:	8c3b      	ldrh	r3, [r7, #32]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d001      	beq.n	80129e4 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 80129e0:	8c3b      	ldrh	r3, [r7, #32]
 80129e2:	e000      	b.n	80129e6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80129e4:	2300      	movs	r3, #0
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3728      	adds	r7, #40	@ 0x28
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	aaaaaaab 	.word	0xaaaaaaab

080129f4 <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b08c      	sub	sp, #48	@ 0x30
 80129f8:	af02      	add	r7, sp, #8
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	460b      	mov	r3, r1
 80129fe:	607a      	str	r2, [r7, #4]
 8012a00:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8012a02:	2300      	movs	r3, #0
 8012a04:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d009      	beq.n	8012a20 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d006      	beq.n	8012a20 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8012a12:	7afb      	ldrb	r3, [r7, #11]
 8012a14:	2b43      	cmp	r3, #67	@ 0x43
 8012a16:	d906      	bls.n	8012a26 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8012a18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	db02      	blt.n	8012a26 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012a20:	f240 2321 	movw	r3, #545	@ 0x221
 8012a24:	e050      	b.n	8012ac8 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012a26:	2300      	movs	r3, #0
 8012a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 8012a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a30:	1c5a      	adds	r2, r3, #1
 8012a32:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8012a36:	3328      	adds	r3, #40	@ 0x28
 8012a38:	443b      	add	r3, r7
 8012a3a:	2204      	movs	r2, #4
 8012a3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8012a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a44:	1c5a      	adds	r2, r3, #1
 8012a46:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8012a4a:	3328      	adds	r3, #40	@ 0x28
 8012a4c:	443b      	add	r3, r7
 8012a4e:	7afa      	ldrb	r2, [r7, #11]
 8012a50:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 8012a54:	2304      	movs	r3, #4
 8012a56:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8012a60:	f107 011c 	add.w	r1, r7, #28
 8012a64:	f107 0320 	add.w	r3, r7, #32
 8012a68:	9301      	str	r3, [sp, #4]
 8012a6a:	f107 0314 	add.w	r3, r7, #20
 8012a6e:	9300      	str	r3, [sp, #0]
 8012a70:	4603      	mov	r3, r0
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	f7fe fe8c 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012a7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d001      	beq.n	8012a86 <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 8012a82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a84:	e020      	b.n	8012ac8 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 8012a86:	8c3b      	ldrh	r3, [r7, #32]
 8012a88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d002      	beq.n	8012a94 <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012a8e:	f240 237f 	movw	r3, #639	@ 0x27f
 8012a92:	e019      	b.n	8012ac8 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 8012a94:	7d3b      	ldrb	r3, [r7, #20]
 8012a96:	461a      	mov	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681a      	ldr	r2, [r3, #0]
 8012aa0:	7d7b      	ldrb	r3, [r7, #21]
 8012aa2:	021b      	lsls	r3, r3, #8
 8012aa4:	431a      	orrs	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	7dbb      	ldrb	r3, [r7, #22]
 8012ab0:	041b      	lsls	r3, r3, #16
 8012ab2:	431a      	orrs	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	7dfb      	ldrb	r3, [r7, #23]
 8012abe:	061b      	lsls	r3, r3, #24
 8012ac0:	431a      	orrs	r2, r3
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8012ac6:	2300      	movs	r3, #0
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3728      	adds	r7, #40	@ 0x28
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 8012ad0:	b590      	push	{r4, r7, lr}
 8012ad2:	b091      	sub	sp, #68	@ 0x44
 8012ad4:	af02      	add	r7, sp, #8
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	603b      	str	r3, [r7, #0]
 8012adc:	4613      	mov	r3, r2
 8012ade:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00b      	beq.n	8012b06 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d008      	beq.n	8012b06 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d005      	beq.n	8012b06 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 8012afa:	79fb      	ldrb	r3, [r7, #7]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d002      	beq.n	8012b06 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 8012b00:	79fb      	ldrb	r3, [r7, #7]
 8012b02:	2b12      	cmp	r3, #18
 8012b04:	d902      	bls.n	8012b0c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012b06:	f240 2321 	movw	r3, #545	@ 0x221
 8012b0a:	e077      	b.n	8012bfc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012b12:	e016      	b.n	8012b42 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8012b14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b18:	68ba      	ldr	r2, [r7, #8]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b43      	cmp	r3, #67	@ 0x43
 8012b20:	d90a      	bls.n	8012b38 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8012b22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b26:	68ba      	ldr	r2, [r7, #8]
 8012b28:	4413      	add	r3, r2
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	b25b      	sxtb	r3, r3
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	db02      	blt.n	8012b38 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012b32:	f240 2321 	movw	r3, #545	@ 0x221
 8012b36:	e061      	b.n	8012bfc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8012b38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012b42:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8012b46:	79fb      	ldrb	r3, [r7, #7]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d3e3      	bcc.n	8012b14 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8012b4c:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 8012b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b54:	4619      	mov	r1, r3
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f7ff fd02 	bl	8012560 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 8012b5c:	79fb      	ldrb	r3, [r7, #7]
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 8012b64:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d902      	bls.n	8012b76 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8012b70:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8012b74:	e042      	b.n	8012bfc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 8012b76:	2300      	movs	r3, #0
 8012b78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 8012b7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012b80:	1c5a      	adds	r2, r3, #1
 8012b82:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8012b86:	3338      	adds	r3, #56	@ 0x38
 8012b88:	443b      	add	r3, r7
 8012b8a:	2205      	movs	r2, #5
 8012b8c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 8012b90:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012b94:	f107 0214 	add.w	r2, r7, #20
 8012b98:	4413      	add	r3, r2
 8012b9a:	79fa      	ldrb	r2, [r7, #7]
 8012b9c:	68b9      	ldr	r1, [r7, #8]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f00f f8bd 	bl	8021d1e <memcpy>
    wBufferLength+= bNumOfRegisters;
 8012ba4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8012ba8:	79fb      	ldrb	r3, [r7, #7]
 8012baa:	4413      	add	r3, r2
 8012bac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012bb0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012bb4:	b298      	uxth	r0, r3
 8012bb6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012bba:	b29c      	uxth	r4, r3
 8012bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bbe:	f107 0114 	add.w	r1, r7, #20
 8012bc2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012bc6:	9201      	str	r2, [sp, #4]
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	4623      	mov	r3, r4
 8012bcc:	4602      	mov	r2, r0
 8012bce:	68f8      	ldr	r0, [r7, #12]
 8012bd0:	f7fe fdde 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8012bd8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d001      	beq.n	8012be2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 8012bde:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012be0:	e00c      	b.n	8012bfc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 8012be2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012be6:	b29a      	uxth	r2, r3
 8012be8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d002      	beq.n	8012bf4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012bee:	f240 237f 	movw	r3, #639	@ 0x27f
 8012bf2:	e003      	b.n	8012bfc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 8012bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	373c      	adds	r7, #60	@ 0x3c
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd90      	pop	{r4, r7, pc}

08012c04 <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b08a      	sub	sp, #40	@ 0x28
 8012c08:	af02      	add	r7, sp, #8
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	607a      	str	r2, [r7, #4]
 8012c0e:	461a      	mov	r2, r3
 8012c10:	460b      	mov	r3, r1
 8012c12:	72fb      	strb	r3, [r7, #11]
 8012c14:	4613      	mov	r3, r2
 8012c16:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00b      	beq.n	8012c3e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d008      	beq.n	8012c3e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8012c2c:	7afb      	ldrb	r3, [r7, #11]
 8012c2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8012c30:	d805      	bhi.n	8012c3e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 8012c32:	7afb      	ldrb	r3, [r7, #11]
 8012c34:	2b15      	cmp	r3, #21
 8012c36:	d902      	bls.n	8012c3e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 8012c38:	7abb      	ldrb	r3, [r7, #10]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d102      	bne.n	8012c44 <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012c3e:	f240 2321 	movw	r3, #545	@ 0x221
 8012c42:	e053      	b.n	8012cec <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8012c44:	7afb      	ldrb	r3, [r7, #11]
 8012c46:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8012c4a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8012c4e:	33fe      	adds	r3, #254	@ 0xfe
 8012c50:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 8012c52:	7ffa      	ldrb	r2, [r7, #31]
 8012c54:	7abb      	ldrb	r3, [r7, #10]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d202      	bcs.n	8012c60 <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8012c5a:	f240 2322 	movw	r3, #546	@ 0x222
 8012c5e:	e045      	b.n	8012cec <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8012c60:	f107 0212 	add.w	r2, r7, #18
 8012c64:	f107 0314 	add.w	r3, r7, #20
 8012c68:	4619      	mov	r1, r3
 8012c6a:	68f8      	ldr	r0, [r7, #12]
 8012c6c:	f7ff fc78 	bl	8012560 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 8012c70:	8a7b      	ldrh	r3, [r7, #18]
 8012c72:	461a      	mov	r2, r3
 8012c74:	7abb      	ldrb	r3, [r7, #10]
 8012c76:	3303      	adds	r3, #3
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d202      	bcs.n	8012c82 <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8012c7c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8012c80:	e034      	b.n	8012cec <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012c82:	2300      	movs	r3, #0
 8012c84:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 8012c86:	697a      	ldr	r2, [r7, #20]
 8012c88:	7fbb      	ldrb	r3, [r7, #30]
 8012c8a:	1c59      	adds	r1, r3, #1
 8012c8c:	77b9      	strb	r1, [r7, #30]
 8012c8e:	4413      	add	r3, r2
 8012c90:	2206      	movs	r2, #6
 8012c92:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	7fbb      	ldrb	r3, [r7, #30]
 8012c98:	1c59      	adds	r1, r3, #1
 8012c9a:	77b9      	strb	r1, [r7, #30]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	7afa      	ldrb	r2, [r7, #11]
 8012ca0:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 8012ca2:	697a      	ldr	r2, [r7, #20]
 8012ca4:	7fbb      	ldrb	r3, [r7, #30]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	7aba      	ldrb	r2, [r7, #10]
 8012caa:	6879      	ldr	r1, [r7, #4]
 8012cac:	4618      	mov	r0, r3
 8012cae:	f00f f836 	bl	8021d1e <memcpy>
    wBufferLength += bDataLength;
 8012cb2:	7fba      	ldrb	r2, [r7, #30]
 8012cb4:	7abb      	ldrb	r3, [r7, #10]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012cbe:	6979      	ldr	r1, [r7, #20]
 8012cc0:	7fbb      	ldrb	r3, [r7, #30]
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	7f7b      	ldrb	r3, [r7, #29]
 8012cc6:	b298      	uxth	r0, r3
 8012cc8:	f107 0318 	add.w	r3, r7, #24
 8012ccc:	9301      	str	r3, [sp, #4]
 8012cce:	f107 0310 	add.w	r3, r7, #16
 8012cd2:	9300      	str	r3, [sp, #0]
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f7fe fd5a 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	837b      	strh	r3, [r7, #26]
 8012ce0:	8b7b      	ldrh	r3, [r7, #26]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d001      	beq.n	8012cea <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 8012ce6:	8b7b      	ldrh	r3, [r7, #26]
 8012ce8:	e000      	b.n	8012cec <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8012cea:	2300      	movs	r3, #0
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3720      	adds	r7, #32
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}

08012cf4 <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b08a      	sub	sp, #40	@ 0x28
 8012cf8:	af02      	add	r7, sp, #8
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	607a      	str	r2, [r7, #4]
 8012cfe:	461a      	mov	r2, r3
 8012d00:	460b      	mov	r3, r1
 8012d02:	72fb      	strb	r3, [r7, #11]
 8012d04:	4613      	mov	r3, r2
 8012d06:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d008      	beq.n	8012d24 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d005      	beq.n	8012d24 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8012d18:	7afb      	ldrb	r3, [r7, #11]
 8012d1a:	2bfd      	cmp	r3, #253	@ 0xfd
 8012d1c:	d802      	bhi.n	8012d24 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 8012d1e:	7abb      	ldrb	r3, [r7, #10]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d11f      	bne.n	8012d64 <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d101      	bne.n	8012d2e <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 8012d2a:	4934      	ldr	r1, [pc, #208]	@ (8012dfc <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 8012d2c:	e000      	b.n	8012d30 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 8012d2e:	4934      	ldr	r1, [pc, #208]	@ (8012e00 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d101      	bne.n	8012d3a <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 8012d36:	4a33      	ldr	r2, [pc, #204]	@ (8012e04 <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 8012d38:	e000      	b.n	8012d3c <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 8012d3a:	4a31      	ldr	r2, [pc, #196]	@ (8012e00 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8012d3c:	7afb      	ldrb	r3, [r7, #11]
 8012d3e:	2bfd      	cmp	r3, #253	@ 0xfd
 8012d40:	d901      	bls.n	8012d46 <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 8012d42:	4831      	ldr	r0, [pc, #196]	@ (8012e08 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 8012d44:	e000      	b.n	8012d48 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 8012d46:	482e      	ldr	r0, [pc, #184]	@ (8012e00 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8012d48:	7abb      	ldrb	r3, [r7, #10]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 8012d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8012e0c <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 8012d50:	e000      	b.n	8012d54 <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 8012d52:	4b2b      	ldr	r3, [pc, #172]	@ (8012e00 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	4603      	mov	r3, r0
 8012d58:	482d      	ldr	r0, [pc, #180]	@ (8012e10 <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 8012d5a:	f00e fdaf 	bl	80218bc <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012d5e:	f240 2321 	movw	r3, #545	@ 0x221
 8012d62:	e046      	b.n	8012df2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8012d64:	7afb      	ldrb	r3, [r7, #11]
 8012d66:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8012d6a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8012d6e:	33fe      	adds	r3, #254	@ 0xfe
 8012d70:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 8012d72:	7ffa      	ldrb	r2, [r7, #31]
 8012d74:	7abb      	ldrb	r3, [r7, #10]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d202      	bcs.n	8012d80 <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8012d7a:	f240 2322 	movw	r3, #546	@ 0x222
 8012d7e:	e038      	b.n	8012df2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012d80:	2300      	movs	r3, #0
 8012d82:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 8012d84:	7fbb      	ldrb	r3, [r7, #30]
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	77ba      	strb	r2, [r7, #30]
 8012d8a:	3320      	adds	r3, #32
 8012d8c:	443b      	add	r3, r7
 8012d8e:	2207      	movs	r2, #7
 8012d90:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 8012d94:	7fbb      	ldrb	r3, [r7, #30]
 8012d96:	1c5a      	adds	r2, r3, #1
 8012d98:	77ba      	strb	r2, [r7, #30]
 8012d9a:	3320      	adds	r3, #32
 8012d9c:	443b      	add	r3, r7
 8012d9e:	7afa      	ldrb	r2, [r7, #11]
 8012da0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 8012da4:	7fbb      	ldrb	r3, [r7, #30]
 8012da6:	1c5a      	adds	r2, r3, #1
 8012da8:	77ba      	strb	r2, [r7, #30]
 8012daa:	3320      	adds	r3, #32
 8012dac:	443b      	add	r3, r7
 8012dae:	7aba      	ldrb	r2, [r7, #10]
 8012db0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012db4:	7fbb      	ldrb	r3, [r7, #30]
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	7abb      	ldrb	r3, [r7, #10]
 8012dba:	b298      	uxth	r0, r3
 8012dbc:	f107 0114 	add.w	r1, r7, #20
 8012dc0:	f107 031a 	add.w	r3, r7, #26
 8012dc4:	9301      	str	r3, [sp, #4]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	4603      	mov	r3, r0
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f7fe fcdf 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	83bb      	strh	r3, [r7, #28]
 8012dd6:	8bbb      	ldrh	r3, [r7, #28]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d001      	beq.n	8012de0 <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 8012ddc:	8bbb      	ldrh	r3, [r7, #28]
 8012dde:	e008      	b.n	8012df2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 8012de0:	7abb      	ldrb	r3, [r7, #10]
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	8b7b      	ldrh	r3, [r7, #26]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d002      	beq.n	8012df0 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012dea:	f240 237f 	movw	r3, #639	@ 0x27f
 8012dee:	e000      	b.n	8012df2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 8012df0:	2300      	movs	r3, #0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3720      	adds	r7, #32
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	080250c0 	.word	0x080250c0
 8012e00:	080250d4 	.word	0x080250d4
 8012e04:	080250d8 	.word	0x080250d8
 8012e08:	080250e8 	.word	0x080250e8
 8012e0c:	080250f8 	.word	0x080250f8
 8012e10:	08025108 	.word	0x08025108

08012e14 <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 8012e14:	b590      	push	{r4, r7, lr}
 8012e16:	b08b      	sub	sp, #44	@ 0x2c
 8012e18:	af02      	add	r7, sp, #8
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	4613      	mov	r3, r2
 8012e20:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8012e22:	2300      	movs	r3, #0
 8012e24:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8012e26:	2300      	movs	r3, #0
 8012e28:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d002      	beq.n	8012e36 <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d102      	bne.n	8012e3c <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e36:	f240 2321 	movw	r3, #545	@ 0x221
 8012e3a:	e056      	b.n	8012eea <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 8012e3c:	88fb      	ldrh	r3, [r7, #6]
 8012e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e42:	d802      	bhi.n	8012e4a <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 8012e44:	88fb      	ldrh	r3, [r7, #6]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d102      	bne.n	8012e50 <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8012e4a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8012e4e:	e04c      	b.n	8012eea <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8012e50:	f107 0116 	add.w	r1, r7, #22
 8012e54:	f107 0218 	add.w	r2, r7, #24
 8012e58:	f107 0314 	add.w	r3, r7, #20
 8012e5c:	9300      	str	r3, [sp, #0]
 8012e5e:	460b      	mov	r3, r1
 8012e60:	2101      	movs	r1, #1
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f000 fbbf 	bl	80135e6 <phhalHw_Pn5180_GetRxBuffer>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	83fb      	strh	r3, [r7, #30]
 8012e6c:	8bfb      	ldrh	r3, [r7, #30]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d001      	beq.n	8012e76 <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 8012e72:	8bfb      	ldrh	r3, [r7, #30]
 8012e74:	e039      	b.n	8012eea <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 8012e76:	8abb      	ldrh	r3, [r7, #20]
 8012e78:	88fa      	ldrh	r2, [r7, #6]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d902      	bls.n	8012e84 <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8012e7e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8012e82:	e032      	b.n	8012eea <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012e84:	2300      	movs	r3, #0
 8012e86:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 8012e88:	7f7b      	ldrb	r3, [r7, #29]
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	777a      	strb	r2, [r7, #29]
 8012e8e:	3320      	adds	r3, #32
 8012e90:	443b      	add	r3, r7
 8012e92:	220a      	movs	r2, #10
 8012e94:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 8012e98:	7f7b      	ldrb	r3, [r7, #29]
 8012e9a:	1c5a      	adds	r2, r3, #1
 8012e9c:	777a      	strb	r2, [r7, #29]
 8012e9e:	3320      	adds	r3, #32
 8012ea0:	443b      	add	r3, r7
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012ea8:	7f7b      	ldrb	r3, [r7, #29]
 8012eaa:	b298      	uxth	r0, r3
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	88fc      	ldrh	r4, [r7, #6]
 8012eb0:	f107 0110 	add.w	r1, r7, #16
 8012eb4:	f107 0212 	add.w	r2, r7, #18
 8012eb8:	9201      	str	r2, [sp, #4]
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	4623      	mov	r3, r4
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	68f8      	ldr	r0, [r7, #12]
 8012ec2:	f7fe fc65 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	83fb      	strh	r3, [r7, #30]
 8012eca:	8bfb      	ldrh	r3, [r7, #30]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 8012ed0:	8bfb      	ldrh	r3, [r7, #30]
 8012ed2:	e00a      	b.n	8012eea <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 8012ed4:	8a7b      	ldrh	r3, [r7, #18]
 8012ed6:	88fa      	ldrh	r2, [r7, #6]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d002      	beq.n	8012ee2 <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012edc:	f240 237f 	movw	r3, #639	@ 0x27f
 8012ee0:	e003      	b.n	8012eea <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 8012ee2:	69ba      	ldr	r2, [r7, #24]
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8012ee8:	2300      	movs	r3, #0
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3724      	adds	r7, #36	@ 0x24
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd90      	pop	{r4, r7, pc}

08012ef2 <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 8012ef2:	b580      	push	{r7, lr}
 8012ef4:	b088      	sub	sp, #32
 8012ef6:	af02      	add	r7, sp, #8
 8012ef8:	6078      	str	r0, [r7, #4]
 8012efa:	460b      	mov	r3, r1
 8012efc:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d007      	beq.n	8012f18 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 8012f08:	887b      	ldrh	r3, [r7, #2]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d004      	beq.n	8012f18 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 8012f0e:	887b      	ldrh	r3, [r7, #2]
 8012f10:	f640 2282 	movw	r2, #2690	@ 0xa82
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d902      	bls.n	8012f1e <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012f18:	f240 2321 	movw	r3, #545	@ 0x221
 8012f1c:	e03e      	b.n	8012f9c <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8012f22:	7dfb      	ldrb	r3, [r7, #23]
 8012f24:	1c5a      	adds	r2, r3, #1
 8012f26:	75fa      	strb	r2, [r7, #23]
 8012f28:	3318      	adds	r3, #24
 8012f2a:	443b      	add	r3, r7
 8012f2c:	220b      	movs	r2, #11
 8012f2e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 8012f32:	7dfb      	ldrb	r3, [r7, #23]
 8012f34:	1c5a      	adds	r2, r3, #1
 8012f36:	75fa      	strb	r2, [r7, #23]
 8012f38:	3318      	adds	r3, #24
 8012f3a:	443b      	add	r3, r7
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 8012f42:	7dfb      	ldrb	r3, [r7, #23]
 8012f44:	1c5a      	adds	r2, r3, #1
 8012f46:	75fa      	strb	r2, [r7, #23]
 8012f48:	887a      	ldrh	r2, [r7, #2]
 8012f4a:	b2d2      	uxtb	r2, r2
 8012f4c:	3318      	adds	r3, #24
 8012f4e:	443b      	add	r3, r7
 8012f50:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 8012f54:	887b      	ldrh	r3, [r7, #2]
 8012f56:	0a1b      	lsrs	r3, r3, #8
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	7dfb      	ldrb	r3, [r7, #23]
 8012f5c:	1c59      	adds	r1, r3, #1
 8012f5e:	75f9      	strb	r1, [r7, #23]
 8012f60:	b2d2      	uxtb	r2, r2
 8012f62:	3318      	adds	r3, #24
 8012f64:	443b      	add	r3, r7
 8012f66:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012f6e:	7dfb      	ldrb	r3, [r7, #23]
 8012f70:	b29a      	uxth	r2, r3
 8012f72:	8ab8      	ldrh	r0, [r7, #20]
 8012f74:	f107 010c 	add.w	r1, r7, #12
 8012f78:	f107 0310 	add.w	r3, r7, #16
 8012f7c:	9301      	str	r3, [sp, #4]
 8012f7e:	f107 0308 	add.w	r3, r7, #8
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	4603      	mov	r3, r0
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7fe fc02 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	827b      	strh	r3, [r7, #18]
 8012f90:	8a7b      	ldrh	r3, [r7, #18]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d001      	beq.n	8012f9a <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 8012f96:	8a7b      	ldrh	r3, [r7, #18]
 8012f98:	e000      	b.n	8012f9c <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8012f9a:	2300      	movs	r3, #0
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3718      	adds	r7, #24
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b088      	sub	sp, #32
 8012fa8:	af02      	add	r7, sp, #8
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	460b      	mov	r3, r1
 8012fae:	70fb      	strb	r3, [r7, #3]
 8012fb0:	4613      	mov	r3, r2
 8012fb2:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 8012fb8:	78fb      	ldrb	r3, [r7, #3]
 8012fba:	f003 030f 	and.w	r3, r3, #15
 8012fbe:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d005      	beq.n	8012fd2 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 8012fc6:	78fb      	ldrb	r3, [r7, #3]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d002      	beq.n	8012fd2 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 8012fcc:	78bb      	ldrb	r3, [r7, #2]
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	d902      	bls.n	8012fd8 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012fd2:	f240 2321 	movw	r3, #545	@ 0x221
 8012fd6:	e03a      	b.n	801304e <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8012fdc:	7dfb      	ldrb	r3, [r7, #23]
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	75fa      	strb	r2, [r7, #23]
 8012fe2:	3318      	adds	r3, #24
 8012fe4:	443b      	add	r3, r7
 8012fe6:	220b      	movs	r2, #11
 8012fe8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 8012fec:	7dfb      	ldrb	r3, [r7, #23]
 8012fee:	1c5a      	adds	r2, r3, #1
 8012ff0:	75fa      	strb	r2, [r7, #23]
 8012ff2:	3318      	adds	r3, #24
 8012ff4:	443b      	add	r3, r7
 8012ff6:	2202      	movs	r2, #2
 8012ff8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 8012ffc:	7dfb      	ldrb	r3, [r7, #23]
 8012ffe:	1c5a      	adds	r2, r3, #1
 8013000:	75fa      	strb	r2, [r7, #23]
 8013002:	3318      	adds	r3, #24
 8013004:	443b      	add	r3, r7
 8013006:	78fa      	ldrb	r2, [r7, #3]
 8013008:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 801300c:	7dfb      	ldrb	r3, [r7, #23]
 801300e:	1c5a      	adds	r2, r3, #1
 8013010:	75fa      	strb	r2, [r7, #23]
 8013012:	3318      	adds	r3, #24
 8013014:	443b      	add	r3, r7
 8013016:	78ba      	ldrb	r2, [r7, #2]
 8013018:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 801301c:	2300      	movs	r3, #0
 801301e:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013020:	7dfb      	ldrb	r3, [r7, #23]
 8013022:	b29a      	uxth	r2, r3
 8013024:	8ab8      	ldrh	r0, [r7, #20]
 8013026:	f107 010c 	add.w	r1, r7, #12
 801302a:	f107 0310 	add.w	r3, r7, #16
 801302e:	9301      	str	r3, [sp, #4]
 8013030:	f107 0308 	add.w	r3, r7, #8
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	4603      	mov	r3, r0
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f7fe fba9 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 801303e:	4603      	mov	r3, r0
 8013040:	827b      	strh	r3, [r7, #18]
 8013042:	8a7b      	ldrh	r3, [r7, #18]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d001      	beq.n	801304c <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 8013048:	8a7b      	ldrh	r3, [r7, #18]
 801304a:	e000      	b.n	801304e <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	3718      	adds	r7, #24
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b088      	sub	sp, #32
 801305a:	af02      	add	r7, sp, #8
 801305c:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801305e:	2300      	movs	r3, #0
 8013060:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 8013062:	2300      	movs	r3, #0
 8013064:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8013066:	7dfb      	ldrb	r3, [r7, #23]
 8013068:	1c5a      	adds	r2, r3, #1
 801306a:	75fa      	strb	r2, [r7, #23]
 801306c:	3318      	adds	r3, #24
 801306e:	443b      	add	r3, r7
 8013070:	220b      	movs	r2, #11
 8013072:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 8013076:	7dfb      	ldrb	r3, [r7, #23]
 8013078:	1c5a      	adds	r2, r3, #1
 801307a:	75fa      	strb	r2, [r7, #23]
 801307c:	3318      	adds	r3, #24
 801307e:	443b      	add	r3, r7
 8013080:	2203      	movs	r2, #3
 8013082:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8013086:	2300      	movs	r3, #0
 8013088:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801308a:	7dfb      	ldrb	r3, [r7, #23]
 801308c:	b29a      	uxth	r2, r3
 801308e:	8ab8      	ldrh	r0, [r7, #20]
 8013090:	f107 0110 	add.w	r1, r7, #16
 8013094:	f107 030a 	add.w	r3, r7, #10
 8013098:	9301      	str	r3, [sp, #4]
 801309a:	f107 030c 	add.w	r3, r7, #12
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	4603      	mov	r3, r0
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7fe fb74 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 80130a8:	4603      	mov	r3, r0
 80130aa:	827b      	strh	r3, [r7, #18]
 80130ac:	8a7b      	ldrh	r3, [r7, #18]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d001      	beq.n	80130b6 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 80130b2:	8a7b      	ldrh	r3, [r7, #18]
 80130b4:	e000      	b.n	80130b8 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 80130b6:	2300      	movs	r3, #0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3718      	adds	r7, #24
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08a      	sub	sp, #40	@ 0x28
 80130c4:	af02      	add	r7, sp, #8
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	4611      	mov	r1, r2
 80130cc:	461a      	mov	r2, r3
 80130ce:	460b      	mov	r3, r1
 80130d0:	71fb      	strb	r3, [r7, #7]
 80130d2:	4613      	mov	r3, r2
 80130d4:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 80130d6:	2300      	movs	r3, #0
 80130d8:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80130da:	2300      	movs	r3, #0
 80130dc:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d006      	beq.n	80130f2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 80130e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d003      	beq.n	80130f2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 80130ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80130ee:	2b02      	cmp	r3, #2
 80130f0:	d902      	bls.n	80130f8 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80130f2:	f240 2321 	movw	r3, #545	@ 0x221
 80130f6:	e06e      	b.n	80131d6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 80130f8:	79fb      	ldrb	r3, [r7, #7]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d00b      	beq.n	8013116 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d005      	beq.n	8013110 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 8013104:	79fb      	ldrb	r3, [r7, #7]
 8013106:	2b27      	cmp	r3, #39	@ 0x27
 8013108:	d802      	bhi.n	8013110 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 801310a:	79bb      	ldrb	r3, [r7, #6]
 801310c:	2b07      	cmp	r3, #7
 801310e:	d902      	bls.n	8013116 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013110:	f240 2321 	movw	r3, #545	@ 0x221
 8013114:	e05f      	b.n	80131d6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8013116:	f107 0212 	add.w	r2, r7, #18
 801311a:	f107 0314 	add.w	r3, r7, #20
 801311e:	4619      	mov	r1, r3
 8013120:	68f8      	ldr	r0, [r7, #12]
 8013122:	f7ff fa1d 	bl	8012560 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 8013126:	8a7b      	ldrh	r3, [r7, #18]
 8013128:	2b2d      	cmp	r3, #45	@ 0x2d
 801312a:	d802      	bhi.n	8013132 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801312c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013130:	e051      	b.n	80131d6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013132:	2300      	movs	r3, #0
 8013134:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8013136:	697a      	ldr	r2, [r7, #20]
 8013138:	8bfb      	ldrh	r3, [r7, #30]
 801313a:	1c59      	adds	r1, r3, #1
 801313c:	83f9      	strh	r1, [r7, #30]
 801313e:	4413      	add	r3, r2
 8013140:	220d      	movs	r2, #13
 8013142:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8013144:	697a      	ldr	r2, [r7, #20]
 8013146:	8bfb      	ldrh	r3, [r7, #30]
 8013148:	1c59      	adds	r1, r3, #1
 801314a:	83f9      	strh	r1, [r7, #30]
 801314c:	4413      	add	r3, r2
 801314e:	79fa      	ldrb	r2, [r7, #7]
 8013150:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d013      	beq.n	8013180 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8013158:	697a      	ldr	r2, [r7, #20]
 801315a:	8bfb      	ldrh	r3, [r7, #30]
 801315c:	1c59      	adds	r1, r3, #1
 801315e:	83f9      	strh	r1, [r7, #30]
 8013160:	4413      	add	r3, r2
 8013162:	79ba      	ldrb	r2, [r7, #6]
 8013164:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	8bfb      	ldrh	r3, [r7, #30]
 801316a:	4413      	add	r3, r2
 801316c:	79fa      	ldrb	r2, [r7, #7]
 801316e:	68b9      	ldr	r1, [r7, #8]
 8013170:	4618      	mov	r0, r3
 8013172:	f00e fdd4 	bl	8021d1e <memcpy>
        wBufferLength+= bSelectCommandLength;
 8013176:	79fb      	ldrb	r3, [r7, #7]
 8013178:	b29a      	uxth	r2, r3
 801317a:	8bfb      	ldrh	r3, [r7, #30]
 801317c:	4413      	add	r3, r2
 801317e:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8013180:	697a      	ldr	r2, [r7, #20]
 8013182:	8bfb      	ldrh	r3, [r7, #30]
 8013184:	4413      	add	r3, r2
 8013186:	2203      	movs	r2, #3
 8013188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801318a:	4618      	mov	r0, r3
 801318c:	f00e fdc7 	bl	8021d1e <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8013190:	8bfb      	ldrh	r3, [r7, #30]
 8013192:	3303      	adds	r3, #3
 8013194:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 8013196:	697a      	ldr	r2, [r7, #20]
 8013198:	8bfb      	ldrh	r3, [r7, #30]
 801319a:	1c59      	adds	r1, r3, #1
 801319c:	83f9      	strh	r1, [r7, #30]
 801319e:	4413      	add	r3, r2
 80131a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80131a4:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 80131a6:	2300      	movs	r3, #0
 80131a8:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80131aa:	6979      	ldr	r1, [r7, #20]
 80131ac:	7f7b      	ldrb	r3, [r7, #29]
 80131ae:	b298      	uxth	r0, r3
 80131b0:	8bfa      	ldrh	r2, [r7, #30]
 80131b2:	f107 0318 	add.w	r3, r7, #24
 80131b6:	9301      	str	r3, [sp, #4]
 80131b8:	f107 0310 	add.w	r3, r7, #16
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	4603      	mov	r3, r0
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f7fe fae5 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 80131c6:	4603      	mov	r3, r0
 80131c8:	837b      	strh	r3, [r7, #26]
 80131ca:	8b7b      	ldrh	r3, [r7, #26]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 80131d0:	8b7b      	ldrh	r3, [r7, #26]
 80131d2:	e000      	b.n	80131d6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80131d4:	2300      	movs	r3, #0
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3720      	adds	r7, #32
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 80131de:	b580      	push	{r7, lr}
 80131e0:	b088      	sub	sp, #32
 80131e2:	af02      	add	r7, sp, #8
 80131e4:	6078      	str	r0, [r7, #4]
 80131e6:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80131e8:	2300      	movs	r3, #0
 80131ea:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80131f8:	f240 2321 	movw	r3, #545	@ 0x221
 80131fc:	e041      	b.n	8013282 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80131fe:	2300      	movs	r3, #0
 8013200:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 8013202:	7dfb      	ldrb	r3, [r7, #23]
 8013204:	1c5a      	adds	r2, r3, #1
 8013206:	75fa      	strb	r2, [r7, #23]
 8013208:	3318      	adds	r3, #24
 801320a:	443b      	add	r3, r7
 801320c:	220f      	movs	r2, #15
 801320e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8013212:	7dfb      	ldrb	r3, [r7, #23]
 8013214:	1c5a      	adds	r2, r3, #1
 8013216:	75fa      	strb	r2, [r7, #23]
 8013218:	3318      	adds	r3, #24
 801321a:	443b      	add	r3, r7
 801321c:	2200      	movs	r2, #0
 801321e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 8013222:	2302      	movs	r3, #2
 8013224:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013226:	7dfb      	ldrb	r3, [r7, #23]
 8013228:	b29a      	uxth	r2, r3
 801322a:	8ab8      	ldrh	r0, [r7, #20]
 801322c:	f107 010c 	add.w	r1, r7, #12
 8013230:	f107 0310 	add.w	r3, r7, #16
 8013234:	9301      	str	r3, [sp, #4]
 8013236:	f107 0308 	add.w	r3, r7, #8
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	4603      	mov	r3, r0
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7fe faa6 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8013244:	4603      	mov	r3, r0
 8013246:	827b      	strh	r3, [r7, #18]
 8013248:	8a7b      	ldrh	r3, [r7, #18]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d001      	beq.n	8013252 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 801324e:	8a7b      	ldrh	r3, [r7, #18]
 8013250:	e017      	b.n	8013282 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 8013252:	8a3b      	ldrh	r3, [r7, #16]
 8013254:	8aba      	ldrh	r2, [r7, #20]
 8013256:	429a      	cmp	r2, r3
 8013258:	d002      	beq.n	8013260 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801325a:	f240 237f 	movw	r3, #639	@ 0x27f
 801325e:	e010      	b.n	8013282 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8013260:	7a3b      	ldrb	r3, [r7, #8]
 8013262:	461a      	mov	r2, r3
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	b21a      	sxth	r2, r3
 801326e:	7a7b      	ldrb	r3, [r7, #9]
 8013270:	b21b      	sxth	r3, r3
 8013272:	021b      	lsls	r3, r3, #8
 8013274:	b21b      	sxth	r3, r3
 8013276:	4313      	orrs	r3, r2
 8013278:	b21b      	sxth	r3, r3
 801327a:	b29a      	uxth	r2, r3
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013280:	2300      	movs	r3, #0
}
 8013282:	4618      	mov	r0, r3
 8013284:	3718      	adds	r7, #24
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 801328a:	b590      	push	{r4, r7, lr}
 801328c:	b08b      	sub	sp, #44	@ 0x2c
 801328e:	af02      	add	r7, sp, #8
 8013290:	60f8      	str	r0, [r7, #12]
 8013292:	60b9      	str	r1, [r7, #8]
 8013294:	4613      	mov	r3, r2
 8013296:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8013298:	2300      	movs	r3, #0
 801329a:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801329c:	2300      	movs	r3, #0
 801329e:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d102      	bne.n	80132b2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80132ac:	f240 2321 	movw	r3, #545	@ 0x221
 80132b0:	e047      	b.n	8013342 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 80132b2:	88fb      	ldrh	r3, [r7, #6]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d102      	bne.n	80132be <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80132b8:	f240 2321 	movw	r3, #545	@ 0x221
 80132bc:	e041      	b.n	8013342 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80132be:	2300      	movs	r3, #0
 80132c0:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 80132c2:	7ffb      	ldrb	r3, [r7, #31]
 80132c4:	1c5a      	adds	r2, r3, #1
 80132c6:	77fa      	strb	r2, [r7, #31]
 80132c8:	3320      	adds	r3, #32
 80132ca:	443b      	add	r3, r7
 80132cc:	2210      	movs	r2, #16
 80132ce:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 80132d2:	7ffb      	ldrb	r3, [r7, #31]
 80132d4:	1c5a      	adds	r2, r3, #1
 80132d6:	77fa      	strb	r2, [r7, #31]
 80132d8:	3320      	adds	r3, #32
 80132da:	443b      	add	r3, r7
 80132dc:	2200      	movs	r2, #0
 80132de:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80132e2:	f107 0216 	add.w	r2, r7, #22
 80132e6:	f107 0318 	add.w	r3, r7, #24
 80132ea:	4619      	mov	r1, r3
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f7ff f937 	bl	8012560 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 80132f2:	8afb      	ldrh	r3, [r7, #22]
 80132f4:	88fa      	ldrh	r2, [r7, #6]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d902      	bls.n	8013300 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80132fa:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80132fe:	e020      	b.n	8013342 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013300:	7ffb      	ldrb	r3, [r7, #31]
 8013302:	b298      	uxth	r0, r3
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	88fc      	ldrh	r4, [r7, #6]
 8013308:	f107 0110 	add.w	r1, r7, #16
 801330c:	f107 0214 	add.w	r2, r7, #20
 8013310:	9201      	str	r2, [sp, #4]
 8013312:	9300      	str	r3, [sp, #0]
 8013314:	4623      	mov	r3, r4
 8013316:	4602      	mov	r2, r0
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f7fe fa39 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 801331e:	4603      	mov	r3, r0
 8013320:	83bb      	strh	r3, [r7, #28]
 8013322:	8bbb      	ldrh	r3, [r7, #28]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d001      	beq.n	801332c <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 8013328:	8bbb      	ldrh	r3, [r7, #28]
 801332a:	e00a      	b.n	8013342 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 801332c:	8abb      	ldrh	r3, [r7, #20]
 801332e:	88fa      	ldrh	r2, [r7, #6]
 8013330:	429a      	cmp	r2, r3
 8013332:	d002      	beq.n	801333a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013334:	f240 237f 	movw	r3, #639	@ 0x27f
 8013338:	e003      	b.n	8013342 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 801333a:	69ba      	ldr	r2, [r7, #24]
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013340:	2300      	movs	r3, #0

}
 8013342:	4618      	mov	r0, r3
 8013344:	3724      	adds	r7, #36	@ 0x24
 8013346:	46bd      	mov	sp, r7
 8013348:	bd90      	pop	{r4, r7, pc}

0801334a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 801334a:	b580      	push	{r7, lr}
 801334c:	b088      	sub	sp, #32
 801334e:	af02      	add	r7, sp, #8
 8013350:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8013352:	2300      	movs	r3, #0
 8013354:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d102      	bne.n	8013362 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801335c:	f240 2321 	movw	r3, #545	@ 0x221
 8013360:	e02a      	b.n	80133b8 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013362:	2300      	movs	r3, #0
 8013364:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 8013366:	7dfb      	ldrb	r3, [r7, #23]
 8013368:	1c5a      	adds	r2, r3, #1
 801336a:	75fa      	strb	r2, [r7, #23]
 801336c:	3318      	adds	r3, #24
 801336e:	443b      	add	r3, r7
 8013370:	220e      	movs	r2, #14
 8013372:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8013376:	7dfb      	ldrb	r3, [r7, #23]
 8013378:	1c5a      	adds	r2, r3, #1
 801337a:	75fa      	strb	r2, [r7, #23]
 801337c:	3318      	adds	r3, #24
 801337e:	443b      	add	r3, r7
 8013380:	2200      	movs	r2, #0
 8013382:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8013386:	2300      	movs	r3, #0
 8013388:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	b29a      	uxth	r2, r3
 801338e:	8ab8      	ldrh	r0, [r7, #20]
 8013390:	f107 010c 	add.w	r1, r7, #12
 8013394:	f107 0310 	add.w	r3, r7, #16
 8013398:	9301      	str	r3, [sp, #4]
 801339a:	f107 0308 	add.w	r3, r7, #8
 801339e:	9300      	str	r3, [sp, #0]
 80133a0:	4603      	mov	r3, r0
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7fe f9f4 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 80133a8:	4603      	mov	r3, r0
 80133aa:	827b      	strh	r3, [r7, #18]
 80133ac:	8a7b      	ldrh	r3, [r7, #18]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d001      	beq.n	80133b6 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 80133b2:	8a7b      	ldrh	r3, [r7, #18]
 80133b4:	e000      	b.n	80133b8 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 80133b6:	2300      	movs	r3, #0
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3718      	adds	r7, #24
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b088      	sub	sp, #32
 80133c4:	af02      	add	r7, sp, #8
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	460b      	mov	r3, r1
 80133ca:	70fb      	strb	r3, [r7, #3]
 80133cc:	4613      	mov	r3, r2
 80133ce:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00f      	beq.n	80133f6 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 80133d6:	78fb      	ldrb	r3, [r7, #3]
 80133d8:	2b1c      	cmp	r3, #28
 80133da:	d902      	bls.n	80133e2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 80133dc:	78fb      	ldrb	r3, [r7, #3]
 80133de:	2bff      	cmp	r3, #255	@ 0xff
 80133e0:	d109      	bne.n	80133f6 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 80133e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	da05      	bge.n	80133f6 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 80133ea:	78bb      	ldrb	r3, [r7, #2]
 80133ec:	2b9d      	cmp	r3, #157	@ 0x9d
 80133ee:	d905      	bls.n	80133fc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 80133f0:	78bb      	ldrb	r3, [r7, #2]
 80133f2:	2bff      	cmp	r3, #255	@ 0xff
 80133f4:	d002      	beq.n	80133fc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80133f6:	f240 2321 	movw	r3, #545	@ 0x221
 80133fa:	e03b      	b.n	8013474 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 80133fc:	78fa      	ldrb	r2, [r7, #3]
 80133fe:	78bb      	ldrb	r3, [r7, #2]
 8013400:	4013      	ands	r3, r2
 8013402:	b2db      	uxtb	r3, r3
 8013404:	2bff      	cmp	r3, #255	@ 0xff
 8013406:	d101      	bne.n	801340c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 8013408:	2300      	movs	r3, #0
 801340a:	e033      	b.n	8013474 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801340c:	2300      	movs	r3, #0
 801340e:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 8013410:	7dfb      	ldrb	r3, [r7, #23]
 8013412:	1c5a      	adds	r2, r3, #1
 8013414:	75fa      	strb	r2, [r7, #23]
 8013416:	3318      	adds	r3, #24
 8013418:	443b      	add	r3, r7
 801341a:	2211      	movs	r2, #17
 801341c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 8013420:	7dfb      	ldrb	r3, [r7, #23]
 8013422:	1c5a      	adds	r2, r3, #1
 8013424:	75fa      	strb	r2, [r7, #23]
 8013426:	3318      	adds	r3, #24
 8013428:	443b      	add	r3, r7
 801342a:	78fa      	ldrb	r2, [r7, #3]
 801342c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 8013430:	7dfb      	ldrb	r3, [r7, #23]
 8013432:	1c5a      	adds	r2, r3, #1
 8013434:	75fa      	strb	r2, [r7, #23]
 8013436:	3318      	adds	r3, #24
 8013438:	443b      	add	r3, r7
 801343a:	78ba      	ldrb	r2, [r7, #2]
 801343c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8013440:	2300      	movs	r3, #0
 8013442:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8013444:	7dfb      	ldrb	r3, [r7, #23]
 8013446:	b29a      	uxth	r2, r3
 8013448:	7dbb      	ldrb	r3, [r7, #22]
 801344a:	b298      	uxth	r0, r3
 801344c:	f107 010c 	add.w	r1, r7, #12
 8013450:	f107 0312 	add.w	r3, r7, #18
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f107 0308 	add.w	r3, r7, #8
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	4603      	mov	r3, r0
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f7fe f996 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8013464:	4603      	mov	r3, r0
 8013466:	82bb      	strh	r3, [r7, #20]
 8013468:	8abb      	ldrh	r3, [r7, #20]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 801346e:	8abb      	ldrh	r3, [r7, #20]
 8013470:	e000      	b.n	8013474 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013472:	2300      	movs	r3, #0
}
 8013474:	4618      	mov	r0, r3
 8013476:	3718      	adds	r7, #24
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b088      	sub	sp, #32
 8013480:	af02      	add	r7, sp, #8
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	460b      	mov	r3, r1
 8013486:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d002      	beq.n	8013494 <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 801348e:	78fb      	ldrb	r3, [r7, #3]
 8013490:	2b03      	cmp	r3, #3
 8013492:	d902      	bls.n	801349a <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013494:	f240 2321 	movw	r3, #545	@ 0x221
 8013498:	e02b      	b.n	80134f2 <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 801349a:	2300      	movs	r3, #0
 801349c:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 801349e:	7dfb      	ldrb	r3, [r7, #23]
 80134a0:	1c5a      	adds	r2, r3, #1
 80134a2:	75fa      	strb	r2, [r7, #23]
 80134a4:	3318      	adds	r3, #24
 80134a6:	443b      	add	r3, r7
 80134a8:	2216      	movs	r2, #22
 80134aa:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 80134ae:	7dfb      	ldrb	r3, [r7, #23]
 80134b0:	1c5a      	adds	r2, r3, #1
 80134b2:	75fa      	strb	r2, [r7, #23]
 80134b4:	3318      	adds	r3, #24
 80134b6:	443b      	add	r3, r7
 80134b8:	78fa      	ldrb	r2, [r7, #3]
 80134ba:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 80134be:	2300      	movs	r3, #0
 80134c0:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 80134c2:	7dfb      	ldrb	r3, [r7, #23]
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	7dbb      	ldrb	r3, [r7, #22]
 80134c8:	b298      	uxth	r0, r3
 80134ca:	f107 0110 	add.w	r1, r7, #16
 80134ce:	f107 0312 	add.w	r3, r7, #18
 80134d2:	9301      	str	r3, [sp, #4]
 80134d4:	f107 030c 	add.w	r3, r7, #12
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	4603      	mov	r3, r0
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7fe f957 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 80134e2:	4603      	mov	r3, r0
 80134e4:	82bb      	strh	r3, [r7, #20]
 80134e6:	8abb      	ldrh	r3, [r7, #20]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <phhalHw_Pn5180_Instr_RfOn+0x74>
 80134ec:	8abb      	ldrh	r3, [r7, #20]
 80134ee:	e000      	b.n	80134f2 <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80134f0:	2300      	movs	r3, #0

}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3718      	adds	r7, #24
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}

080134fa <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b088      	sub	sp, #32
 80134fe:	af02      	add	r7, sp, #8
 8013500:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d102      	bne.n	801350e <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013508:	f240 2321 	movw	r3, #545	@ 0x221
 801350c:	e02b      	b.n	8013566 <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801350e:	2300      	movs	r3, #0
 8013510:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 8013512:	7dfb      	ldrb	r3, [r7, #23]
 8013514:	1c5a      	adds	r2, r3, #1
 8013516:	75fa      	strb	r2, [r7, #23]
 8013518:	3318      	adds	r3, #24
 801351a:	443b      	add	r3, r7
 801351c:	2217      	movs	r2, #23
 801351e:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	1c5a      	adds	r2, r3, #1
 8013526:	75fa      	strb	r2, [r7, #23]
 8013528:	3318      	adds	r3, #24
 801352a:	443b      	add	r3, r7
 801352c:	2200      	movs	r2, #0
 801352e:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8013532:	2300      	movs	r3, #0
 8013534:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8013536:	7dfb      	ldrb	r3, [r7, #23]
 8013538:	b29a      	uxth	r2, r3
 801353a:	7dbb      	ldrb	r3, [r7, #22]
 801353c:	b298      	uxth	r0, r3
 801353e:	f107 0110 	add.w	r1, r7, #16
 8013542:	f107 0312 	add.w	r3, r7, #18
 8013546:	9301      	str	r3, [sp, #4]
 8013548:	f107 030c 	add.w	r3, r7, #12
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	4603      	mov	r3, r0
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7fe f91d 	bl	8011790 <phhalHw_Pn5180_BalExchange>
 8013556:	4603      	mov	r3, r0
 8013558:	82bb      	strh	r3, [r7, #20]
 801355a:	8abb      	ldrh	r3, [r7, #20]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <phhalHw_Pn5180_Instr_RfOff+0x6a>
 8013560:	8abb      	ldrh	r3, [r7, #20]
 8013562:	e000      	b.n	8013566 <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013564:	2300      	movs	r3, #0

}
 8013566:	4618      	mov	r0, r3
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}

0801356e <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b086      	sub	sp, #24
 8013572:	af02      	add	r7, sp, #8
 8013574:	60f8      	str	r0, [r7, #12]
 8013576:	607a      	str	r2, [r7, #4]
 8013578:	603b      	str	r3, [r7, #0]
 801357a:	460b      	mov	r3, r1
 801357c:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 801357e:	7afb      	ldrb	r3, [r7, #11]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d023      	beq.n	80135cc <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	68da      	ldr	r2, [r3, #12]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	695b      	ldr	r3, [r3, #20]
 801358c:	429a      	cmp	r2, r3
 801358e:	d10f      	bne.n	80135b0 <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	8bd2      	ldrh	r2, [r2, #30]
 8013598:	441a      	add	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	8a1a      	ldrh	r2, [r3, #16]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	8bdb      	ldrh	r3, [r3, #30]
 80135a6:	1ad3      	subs	r3, r2, r3
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	801a      	strh	r2, [r3, #0]
 80135ae:	e007      	b.n	80135c0 <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	68da      	ldr	r2, [r3, #12]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	8a1a      	ldrh	r2, [r3, #16]
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	8a5a      	ldrh	r2, [r3, #18]
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 80135c8:	2300      	movs	r3, #0
 80135ca:	e008      	b.n	80135de <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 80135cc:	7af9      	ldrb	r1, [r7, #11]
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	68f8      	ldr	r0, [r7, #12]
 80135d8:	f000 f805 	bl	80135e6 <phhalHw_Pn5180_GetRxBuffer>
 80135dc:	4603      	mov	r3, r0
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 80135e6:	b480      	push	{r7}
 80135e8:	b087      	sub	sp, #28
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	60f8      	str	r0, [r7, #12]
 80135ee:	607a      	str	r2, [r7, #4]
 80135f0:	603b      	str	r3, [r7, #0]
 80135f2:	460b      	mov	r3, r1
 80135f4:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 80135f6:	2300      	movs	r3, #0
 80135f8:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 80135fa:	7afb      	ldrb	r3, [r7, #11]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d021      	beq.n	8013644 <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013606:	2b01      	cmp	r3, #1
 8013608:	d101      	bne.n	801360e <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 801360a:	2301      	movs	r3, #1
 801360c:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	695b      	ldr	r3, [r3, #20]
 8013612:	68fa      	ldr	r2, [r7, #12]
 8013614:	8bd2      	ldrh	r2, [r2, #30]
 8013616:	4611      	mov	r1, r2
 8013618:	7dfa      	ldrb	r2, [r7, #23]
 801361a:	1a8a      	subs	r2, r1, r2
 801361c:	441a      	add	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	8b1a      	ldrh	r2, [r3, #24]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	8bdb      	ldrh	r3, [r3, #30]
 801362a:	1ad3      	subs	r3, r2, r3
 801362c:	b29a      	uxth	r2, r3
 801362e:	7dfb      	ldrb	r3, [r7, #23]
 8013630:	b29b      	uxth	r3, r3
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	b29a      	uxth	r2, r3
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	8b5a      	ldrh	r2, [r3, #26]
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	801a      	strh	r2, [r3, #0]
 8013642:	e055      	b.n	80136f0 <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	2200      	movs	r2, #0
 8013648:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	68da      	ldr	r2, [r3, #12]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	695b      	ldr	r3, [r3, #20]
 8013652:	429a      	cmp	r2, r3
 8013654:	d11f      	bne.n	8013696 <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 801365a:	2b00      	cmp	r3, #0
 801365c:	d103      	bne.n	8013666 <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	8bdb      	ldrh	r3, [r3, #30]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d017      	beq.n	8013696 <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	8bd2      	ldrh	r2, [r2, #30]
 801366e:	4611      	mov	r1, r2
 8013670:	68fa      	ldr	r2, [r7, #12]
 8013672:	8a52      	ldrh	r2, [r2, #18]
 8013674:	440a      	add	r2, r1
 8013676:	441a      	add	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	8a1a      	ldrh	r2, [r3, #16]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	8bd9      	ldrh	r1, [r3, #30]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	8a5b      	ldrh	r3, [r3, #18]
 8013688:	440b      	add	r3, r1
 801368a:	b29b      	uxth	r3, r3
 801368c:	1ad3      	subs	r3, r2, r3
 801368e:	b29a      	uxth	r2, r3
 8013690:	6a3b      	ldr	r3, [r7, #32]
 8013692:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 8013694:	e02c      	b.n	80136f0 <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	8a1b      	ldrh	r3, [r3, #16]
 801369a:	461a      	mov	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	8a5b      	ldrh	r3, [r3, #18]
 80136a0:	1ad2      	subs	r2, r2, r3
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	8b1b      	ldrh	r3, [r3, #24]
 80136a6:	4619      	mov	r1, r3
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	8bdb      	ldrh	r3, [r3, #30]
 80136ac:	1acb      	subs	r3, r1, r3
 80136ae:	429a      	cmp	r2, r3
 80136b0:	db0f      	blt.n	80136d2 <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	8a52      	ldrh	r2, [r2, #18]
 80136ba:	441a      	add	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	8a1a      	ldrh	r2, [r3, #16]
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	8a5b      	ldrh	r3, [r3, #18]
 80136c8:	1ad3      	subs	r3, r2, r3
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	6a3b      	ldr	r3, [r7, #32]
 80136ce:	801a      	strh	r2, [r3, #0]
 80136d0:	e00e      	b.n	80136f0 <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	695b      	ldr	r3, [r3, #20]
 80136d6:	68fa      	ldr	r2, [r7, #12]
 80136d8:	8bd2      	ldrh	r2, [r2, #30]
 80136da:	441a      	add	r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	8b1a      	ldrh	r2, [r3, #24]
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	8bdb      	ldrh	r3, [r3, #30]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	6a3b      	ldr	r3, [r7, #32]
 80136ee:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	371c      	adds	r7, #28
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b086      	sub	sp, #24
 8013702:	af00      	add	r7, sp, #0
 8013704:	60f8      	str	r0, [r7, #12]
 8013706:	60b9      	str	r1, [r7, #8]
 8013708:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 801370a:	2300      	movs	r3, #0
 801370c:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 801370e:	f107 0310 	add.w	r3, r7, #16
 8013712:	461a      	mov	r2, r3
 8013714:	2113      	movs	r1, #19
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f7fb fb5c 	bl	800edd4 <phhalHw_Pn5180_ReadRegister>
 801371c:	4603      	mov	r3, r0
 801371e:	82bb      	strh	r3, [r7, #20]
 8013720:	8abb      	ldrh	r3, [r7, #20]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d001      	beq.n	801372a <phhalHw_Pn5180_ReadData+0x2c>
 8013726:	8abb      	ldrh	r3, [r7, #20]
 8013728:	e02d      	b.n	8013786 <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013730:	2b01      	cmp	r3, #1
 8013732:	d10f      	bne.n	8013754 <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	b29b      	uxth	r3, r3
 8013738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801373c:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8013742:	b29b      	uxth	r3, r3
 8013744:	f003 030f 	and.w	r3, r3, #15
 8013748:	b29b      	uxth	r3, r3
 801374a:	015b      	lsls	r3, r3, #5
 801374c:	b29b      	uxth	r3, r3
 801374e:	4313      	orrs	r3, r2
 8013750:	82fb      	strh	r3, [r7, #22]
 8013752:	e004      	b.n	801375e <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	b29b      	uxth	r3, r3
 8013758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801375c:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 801375e:	8afb      	ldrh	r3, [r7, #22]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d00c      	beq.n	801377e <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 8013764:	8afb      	ldrh	r3, [r7, #22]
 8013766:	461a      	mov	r2, r3
 8013768:	68b9      	ldr	r1, [r7, #8]
 801376a:	68f8      	ldr	r0, [r7, #12]
 801376c:	f7ff fb52 	bl	8012e14 <phhalHw_Pn5180_Instr_RetrieveRxData>
 8013770:	4603      	mov	r3, r0
 8013772:	82bb      	strh	r3, [r7, #20]
 8013774:	8abb      	ldrh	r3, [r7, #20]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d001      	beq.n	801377e <phhalHw_Pn5180_ReadData+0x80>
 801377a:	8abb      	ldrh	r3, [r7, #20]
 801377c:	e003      	b.n	8013786 <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	8afa      	ldrh	r2, [r7, #22]
 8013782:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013784:	2300      	movs	r3, #0
}
 8013786:	4618      	mov	r0, r3
 8013788:	3718      	adds	r7, #24
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b08e      	sub	sp, #56	@ 0x38
 8013792:	af00      	add	r7, sp, #0
 8013794:	60f8      	str	r0, [r7, #12]
 8013796:	607a      	str	r2, [r7, #4]
 8013798:	603b      	str	r3, [r7, #0]
 801379a:	460b      	mov	r3, r1
 801379c:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 801379e:	7afb      	ldrb	r3, [r7, #11]
 80137a0:	2b10      	cmp	r3, #16
 80137a2:	d018      	beq.n	80137d6 <phhalHw_Pn5180_TimerStart+0x48>
 80137a4:	2b10      	cmp	r3, #16
 80137a6:	dc1f      	bgt.n	80137e8 <phhalHw_Pn5180_TimerStart+0x5a>
 80137a8:	2b0e      	cmp	r3, #14
 80137aa:	d002      	beq.n	80137b2 <phhalHw_Pn5180_TimerStart+0x24>
 80137ac:	2b0f      	cmp	r3, #15
 80137ae:	d009      	beq.n	80137c4 <phhalHw_Pn5180_TimerStart+0x36>
 80137b0:	e01a      	b.n	80137e8 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 80137b2:	230e      	movs	r3, #14
 80137b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 80137b8:	230b      	movs	r3, #11
 80137ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 80137be:	2301      	movs	r3, #1
 80137c0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80137c2:	e014      	b.n	80137ee <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 80137c4:	230f      	movs	r3, #15
 80137c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 80137ca:	230c      	movs	r3, #12
 80137cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 80137d0:	2301      	movs	r3, #1
 80137d2:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80137d4:	e00b      	b.n	80137ee <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 80137d6:	2310      	movs	r3, #16
 80137d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 80137dc:	230d      	movs	r3, #13
 80137de:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 80137e2:	2301      	movs	r3, #1
 80137e4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80137e6:	e002      	b.n	80137ee <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80137e8:	f240 2321 	movw	r3, #545	@ 0x221
 80137ec:	e0bd      	b.n	801396a <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 80137ee:	2300      	movs	r3, #0
 80137f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80137f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80137f4:	1c5a      	adds	r2, r3, #1
 80137f6:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80137f8:	3338      	adds	r3, #56	@ 0x38
 80137fa:	443b      	add	r3, r7
 80137fc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013800:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8013804:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013806:	1c5a      	adds	r2, r3, #1
 8013808:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801380a:	3338      	adds	r3, #56	@ 0x38
 801380c:	443b      	add	r3, r7
 801380e:	2201      	movs	r2, #1
 8013810:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013814:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013816:	1c5a      	adds	r2, r3, #1
 8013818:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801381a:	3338      	adds	r3, #56	@ 0x38
 801381c:	443b      	add	r3, r7
 801381e:	2200      	movs	r2, #0
 8013820:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013824:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013826:	1c5a      	adds	r2, r3, #1
 8013828:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801382a:	3338      	adds	r3, #56	@ 0x38
 801382c:	443b      	add	r3, r7
 801382e:	2200      	movs	r2, #0
 8013830:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013834:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013836:	1c5a      	adds	r2, r3, #1
 8013838:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801383a:	3338      	adds	r3, #56	@ 0x38
 801383c:	443b      	add	r3, r7
 801383e:	2200      	movs	r2, #0
 8013840:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8013844:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013846:	1c5a      	adds	r2, r3, #1
 8013848:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801384a:	3338      	adds	r3, #56	@ 0x38
 801384c:	443b      	add	r3, r7
 801384e:	2200      	movs	r2, #0
 8013850:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 8013854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801385a:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 801385c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801385e:	1c5a      	adds	r2, r3, #1
 8013860:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8013862:	3338      	adds	r3, #56	@ 0x38
 8013864:	443b      	add	r3, r7
 8013866:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 801386a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801386e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013870:	1c5a      	adds	r2, r3, #1
 8013872:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8013874:	3338      	adds	r3, #56	@ 0x38
 8013876:	443b      	add	r3, r7
 8013878:	2201      	movs	r2, #1
 801387a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801387e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013880:	1c5a      	adds	r2, r3, #1
 8013882:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8013884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013886:	b2d2      	uxtb	r2, r2
 8013888:	3338      	adds	r3, #56	@ 0x38
 801388a:	443b      	add	r3, r7
 801388c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8013890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013892:	0a1a      	lsrs	r2, r3, #8
 8013894:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013896:	1c59      	adds	r1, r3, #1
 8013898:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801389a:	b2d2      	uxtb	r2, r2
 801389c:	3338      	adds	r3, #56	@ 0x38
 801389e:	443b      	add	r3, r7
 80138a0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80138a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a6:	0c1a      	lsrs	r2, r3, #16
 80138a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80138aa:	1c59      	adds	r1, r3, #1
 80138ac:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80138ae:	b2d2      	uxtb	r2, r2
 80138b0:	3338      	adds	r3, #56	@ 0x38
 80138b2:	443b      	add	r3, r7
 80138b4:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 80138b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ba:	0e1a      	lsrs	r2, r3, #24
 80138bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80138be:	1c59      	adds	r1, r3, #1
 80138c0:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80138c2:	b2d2      	uxtb	r2, r2
 80138c4:	3338      	adds	r3, #56	@ 0x38
 80138c6:	443b      	add	r3, r7
 80138c8:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 80138cc:	687a      	ldr	r2, [r7, #4]
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	431a      	orrs	r2, r3
 80138d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138d4:	4313      	orrs	r3, r2
 80138d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138d8:	4313      	orrs	r3, r2
 80138da:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80138dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80138e2:	3338      	adds	r3, #56	@ 0x38
 80138e4:	443b      	add	r3, r7
 80138e6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80138ea:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80138ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80138f0:	1c5a      	adds	r2, r3, #1
 80138f2:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80138f4:	3338      	adds	r3, #56	@ 0x38
 80138f6:	443b      	add	r3, r7
 80138f8:	2201      	movs	r2, #1
 80138fa:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80138fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013900:	1c5a      	adds	r2, r3, #1
 8013902:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8013904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013906:	b2d2      	uxtb	r2, r2
 8013908:	3338      	adds	r3, #56	@ 0x38
 801390a:	443b      	add	r3, r7
 801390c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8013910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013912:	0a1a      	lsrs	r2, r3, #8
 8013914:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013916:	1c59      	adds	r1, r3, #1
 8013918:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801391a:	b2d2      	uxtb	r2, r2
 801391c:	3338      	adds	r3, #56	@ 0x38
 801391e:	443b      	add	r3, r7
 8013920:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8013924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013926:	0c1a      	lsrs	r2, r3, #16
 8013928:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801392a:	1c59      	adds	r1, r3, #1
 801392c:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801392e:	b2d2      	uxtb	r2, r2
 8013930:	3338      	adds	r3, #56	@ 0x38
 8013932:	443b      	add	r3, r7
 8013934:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8013938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393a:	0e1a      	lsrs	r2, r3, #24
 801393c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801393e:	1c59      	adds	r1, r3, #1
 8013940:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8013942:	b2d2      	uxtb	r2, r2
 8013944:	3338      	adds	r3, #56	@ 0x38
 8013946:	443b      	add	r3, r7
 8013948:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 801394c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801394e:	f107 0314 	add.w	r3, r7, #20
 8013952:	4619      	mov	r1, r3
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f7fe ff9b 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 801395a:	4603      	mov	r3, r0
 801395c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801395e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013960:	2b00      	cmp	r3, #0
 8013962:	d001      	beq.n	8013968 <phhalHw_Pn5180_TimerStart+0x1da>
 8013964:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013966:	e000      	b.n	801396a <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 8013968:	2300      	movs	r3, #0
}
 801396a:	4618      	mov	r0, r3
 801396c:	3738      	adds	r7, #56	@ 0x38
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
	...

08013974 <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b088      	sub	sp, #32
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	460b      	mov	r3, r1
 801397e:	807b      	strh	r3, [r7, #2]
 8013980:	4613      	mov	r3, r2
 8013982:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 8013984:	887b      	ldrh	r3, [r7, #2]
 8013986:	2b0c      	cmp	r3, #12
 8013988:	f200 81ad 	bhi.w	8013ce6 <phhalHw_Pn5180_SetConfig_Int+0x372>
 801398c:	a201      	add	r2, pc, #4	@ (adr r2, 8013994 <phhalHw_Pn5180_SetConfig_Int+0x20>)
 801398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013992:	bf00      	nop
 8013994:	080139c9 	.word	0x080139c9
 8013998:	08013a43 	.word	0x08013a43
 801399c:	08013b83 	.word	0x08013b83
 80139a0:	08013ce7 	.word	0x08013ce7
 80139a4:	08013ce7 	.word	0x08013ce7
 80139a8:	08013ce7 	.word	0x08013ce7
 80139ac:	08013ce7 	.word	0x08013ce7
 80139b0:	08013ce7 	.word	0x08013ce7
 80139b4:	08013ce7 	.word	0x08013ce7
 80139b8:	08013ce7 	.word	0x08013ce7
 80139bc:	08013ce7 	.word	0x08013ce7
 80139c0:	08013ce7 	.word	0x08013ce7
 80139c4:	08013cc1 	.word	0x08013cc1
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 80139c8:	883b      	ldrh	r3, [r7, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d11e      	bne.n	8013a0c <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 80139ce:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 80139d2:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 80139d4:	697a      	ldr	r2, [r7, #20]
 80139d6:	2118      	movs	r1, #24
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7fe fee3 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80139de:	4603      	mov	r3, r0
 80139e0:	837b      	strh	r3, [r7, #26]
 80139e2:	8b7b      	ldrh	r3, [r7, #26]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <phhalHw_Pn5180_SetConfig_Int+0x78>
 80139e8:	8b7b      	ldrh	r3, [r7, #26]
 80139ea:	e187      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 80139ec:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80139f0:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 80139f2:	697a      	ldr	r2, [r7, #20]
 80139f4:	2112      	movs	r1, #18
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7fe fed4 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80139fc:	4603      	mov	r3, r0
 80139fe:	837b      	strh	r3, [r7, #26]
 8013a00:	8b7b      	ldrh	r3, [r7, #26]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f000 8172 	beq.w	8013cec <phhalHw_Pn5180_SetConfig_Int+0x378>
 8013a08:	8b7b      	ldrh	r3, [r7, #26]
 8013a0a:	e177      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 8013a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013a10:	2118      	movs	r1, #24
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f7fe fe50 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	837b      	strh	r3, [r7, #26]
 8013a1c:	8b7b      	ldrh	r3, [r7, #26]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d001      	beq.n	8013a26 <phhalHw_Pn5180_SetConfig_Int+0xb2>
 8013a22:	8b7b      	ldrh	r3, [r7, #26]
 8013a24:	e16a      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 8013a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013a2a:	2112      	movs	r1, #18
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7fe fe43 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8013a32:	4603      	mov	r3, r0
 8013a34:	837b      	strh	r3, [r7, #26]
 8013a36:	8b7b      	ldrh	r3, [r7, #26]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f000 8157 	beq.w	8013cec <phhalHw_Pn5180_SetConfig_Int+0x378>
 8013a3e:	8b7b      	ldrh	r3, [r7, #26]
 8013a40:	e15c      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 8013a42:	883b      	ldrh	r3, [r7, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10f      	bne.n	8013a68 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 8013a48:	f06f 0301 	mvn.w	r3, #1
 8013a4c:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 8013a4e:	697a      	ldr	r2, [r7, #20]
 8013a50:	2119      	movs	r1, #25
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7fe fea6 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	837b      	strh	r3, [r7, #26]
 8013a5c:	8b7b      	ldrh	r3, [r7, #26]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	f000 8146 	beq.w	8013cf0 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 8013a64:	8b7b      	ldrh	r3, [r7, #26]
 8013a66:	e149      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 8013a6c:	f06f 0304 	mvn.w	r3, #4
 8013a70:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8013a72:	8b3b      	ldrh	r3, [r7, #24]
 8013a74:	1c5a      	adds	r2, r3, #1
 8013a76:	833a      	strh	r2, [r7, #24]
 8013a78:	3320      	adds	r3, #32
 8013a7a:	443b      	add	r3, r7
 8013a7c:	2219      	movs	r2, #25
 8013a7e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8013a82:	8b3b      	ldrh	r3, [r7, #24]
 8013a84:	1c5a      	adds	r2, r3, #1
 8013a86:	833a      	strh	r2, [r7, #24]
 8013a88:	3320      	adds	r3, #32
 8013a8a:	443b      	add	r3, r7
 8013a8c:	2203      	movs	r2, #3
 8013a8e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013a92:	8b3b      	ldrh	r3, [r7, #24]
 8013a94:	1c5a      	adds	r2, r3, #1
 8013a96:	833a      	strh	r2, [r7, #24]
 8013a98:	69fa      	ldr	r2, [r7, #28]
 8013a9a:	b2d2      	uxtb	r2, r2
 8013a9c:	3320      	adds	r3, #32
 8013a9e:	443b      	add	r3, r7
 8013aa0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013aa4:	69fb      	ldr	r3, [r7, #28]
 8013aa6:	0a1a      	lsrs	r2, r3, #8
 8013aa8:	8b3b      	ldrh	r3, [r7, #24]
 8013aaa:	1c59      	adds	r1, r3, #1
 8013aac:	8339      	strh	r1, [r7, #24]
 8013aae:	b2d2      	uxtb	r2, r2
 8013ab0:	3320      	adds	r3, #32
 8013ab2:	443b      	add	r3, r7
 8013ab4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	0c1a      	lsrs	r2, r3, #16
 8013abc:	8b3b      	ldrh	r3, [r7, #24]
 8013abe:	1c59      	adds	r1, r3, #1
 8013ac0:	8339      	strh	r1, [r7, #24]
 8013ac2:	b2d2      	uxtb	r2, r2
 8013ac4:	3320      	adds	r3, #32
 8013ac6:	443b      	add	r3, r7
 8013ac8:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013acc:	69fb      	ldr	r3, [r7, #28]
 8013ace:	0e1a      	lsrs	r2, r3, #24
 8013ad0:	8b3b      	ldrh	r3, [r7, #24]
 8013ad2:	1c59      	adds	r1, r3, #1
 8013ad4:	8339      	strh	r1, [r7, #24]
 8013ad6:	b2d2      	uxtb	r2, r2
 8013ad8:	3320      	adds	r3, #32
 8013ada:	443b      	add	r3, r7
 8013adc:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013aea:	2b06      	cmp	r3, #6
 8013aec:	d103      	bne.n	8013af6 <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	f043 0304 	orr.w	r3, r3, #4
 8013af4:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8013af6:	8b3b      	ldrh	r3, [r7, #24]
 8013af8:	1c5a      	adds	r2, r3, #1
 8013afa:	833a      	strh	r2, [r7, #24]
 8013afc:	3320      	adds	r3, #32
 8013afe:	443b      	add	r3, r7
 8013b00:	2219      	movs	r2, #25
 8013b02:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8013b06:	8b3b      	ldrh	r3, [r7, #24]
 8013b08:	1c5a      	adds	r2, r3, #1
 8013b0a:	833a      	strh	r2, [r7, #24]
 8013b0c:	3320      	adds	r3, #32
 8013b0e:	443b      	add	r3, r7
 8013b10:	2202      	movs	r2, #2
 8013b12:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013b16:	8b3b      	ldrh	r3, [r7, #24]
 8013b18:	1c5a      	adds	r2, r3, #1
 8013b1a:	833a      	strh	r2, [r7, #24]
 8013b1c:	69fa      	ldr	r2, [r7, #28]
 8013b1e:	b2d2      	uxtb	r2, r2
 8013b20:	3320      	adds	r3, #32
 8013b22:	443b      	add	r3, r7
 8013b24:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	0a1a      	lsrs	r2, r3, #8
 8013b2c:	8b3b      	ldrh	r3, [r7, #24]
 8013b2e:	1c59      	adds	r1, r3, #1
 8013b30:	8339      	strh	r1, [r7, #24]
 8013b32:	b2d2      	uxtb	r2, r2
 8013b34:	3320      	adds	r3, #32
 8013b36:	443b      	add	r3, r7
 8013b38:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	0c1a      	lsrs	r2, r3, #16
 8013b40:	8b3b      	ldrh	r3, [r7, #24]
 8013b42:	1c59      	adds	r1, r3, #1
 8013b44:	8339      	strh	r1, [r7, #24]
 8013b46:	b2d2      	uxtb	r2, r2
 8013b48:	3320      	adds	r3, #32
 8013b4a:	443b      	add	r3, r7
 8013b4c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	0e1a      	lsrs	r2, r3, #24
 8013b54:	8b3b      	ldrh	r3, [r7, #24]
 8013b56:	1c59      	adds	r1, r3, #1
 8013b58:	8339      	strh	r1, [r7, #24]
 8013b5a:	b2d2      	uxtb	r2, r2
 8013b5c:	3320      	adds	r3, #32
 8013b5e:	443b      	add	r3, r7
 8013b60:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8013b64:	8b3a      	ldrh	r2, [r7, #24]
 8013b66:	f107 0308 	add.w	r3, r7, #8
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f7fe fe8f 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8013b72:	4603      	mov	r3, r0
 8013b74:	837b      	strh	r3, [r7, #26]
 8013b76:	8b7b      	ldrh	r3, [r7, #26]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	f000 80b9 	beq.w	8013cf0 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 8013b7e:	8b7b      	ldrh	r3, [r7, #26]
 8013b80:	e0bc      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 8013b82:	883b      	ldrh	r3, [r7, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d10f      	bne.n	8013ba8 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8013b88:	f06f 0301 	mvn.w	r3, #1
 8013b8c:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 8013b8e:	697a      	ldr	r2, [r7, #20]
 8013b90:	2112      	movs	r1, #18
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f7fe fe06 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	837b      	strh	r3, [r7, #26]
 8013b9c:	8b7b      	ldrh	r3, [r7, #26]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	f000 80a8 	beq.w	8013cf4 <phhalHw_Pn5180_SetConfig_Int+0x380>
 8013ba4:	8b7b      	ldrh	r3, [r7, #26]
 8013ba6:	e0a9      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 8013bac:	f06f 0304 	mvn.w	r3, #4
 8013bb0:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8013bb2:	8b3b      	ldrh	r3, [r7, #24]
 8013bb4:	1c5a      	adds	r2, r3, #1
 8013bb6:	833a      	strh	r2, [r7, #24]
 8013bb8:	3320      	adds	r3, #32
 8013bba:	443b      	add	r3, r7
 8013bbc:	2212      	movs	r2, #18
 8013bbe:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8013bc2:	8b3b      	ldrh	r3, [r7, #24]
 8013bc4:	1c5a      	adds	r2, r3, #1
 8013bc6:	833a      	strh	r2, [r7, #24]
 8013bc8:	3320      	adds	r3, #32
 8013bca:	443b      	add	r3, r7
 8013bcc:	2203      	movs	r2, #3
 8013bce:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013bd2:	8b3b      	ldrh	r3, [r7, #24]
 8013bd4:	1c5a      	adds	r2, r3, #1
 8013bd6:	833a      	strh	r2, [r7, #24]
 8013bd8:	69fa      	ldr	r2, [r7, #28]
 8013bda:	b2d2      	uxtb	r2, r2
 8013bdc:	3320      	adds	r3, #32
 8013bde:	443b      	add	r3, r7
 8013be0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	0a1a      	lsrs	r2, r3, #8
 8013be8:	8b3b      	ldrh	r3, [r7, #24]
 8013bea:	1c59      	adds	r1, r3, #1
 8013bec:	8339      	strh	r1, [r7, #24]
 8013bee:	b2d2      	uxtb	r2, r2
 8013bf0:	3320      	adds	r3, #32
 8013bf2:	443b      	add	r3, r7
 8013bf4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013bf8:	69fb      	ldr	r3, [r7, #28]
 8013bfa:	0c1a      	lsrs	r2, r3, #16
 8013bfc:	8b3b      	ldrh	r3, [r7, #24]
 8013bfe:	1c59      	adds	r1, r3, #1
 8013c00:	8339      	strh	r1, [r7, #24]
 8013c02:	b2d2      	uxtb	r2, r2
 8013c04:	3320      	adds	r3, #32
 8013c06:	443b      	add	r3, r7
 8013c08:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	0e1a      	lsrs	r2, r3, #24
 8013c10:	8b3b      	ldrh	r3, [r7, #24]
 8013c12:	1c59      	adds	r1, r3, #1
 8013c14:	8339      	strh	r1, [r7, #24]
 8013c16:	b2d2      	uxtb	r2, r2
 8013c18:	3320      	adds	r3, #32
 8013c1a:	443b      	add	r3, r7
 8013c1c:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8013c20:	2301      	movs	r3, #1
 8013c22:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013c2a:	2b06      	cmp	r3, #6
 8013c2c:	d103      	bne.n	8013c36 <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	f043 0304 	orr.w	r3, r3, #4
 8013c34:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8013c36:	8b3b      	ldrh	r3, [r7, #24]
 8013c38:	1c5a      	adds	r2, r3, #1
 8013c3a:	833a      	strh	r2, [r7, #24]
 8013c3c:	3320      	adds	r3, #32
 8013c3e:	443b      	add	r3, r7
 8013c40:	2212      	movs	r2, #18
 8013c42:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8013c46:	8b3b      	ldrh	r3, [r7, #24]
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	833a      	strh	r2, [r7, #24]
 8013c4c:	3320      	adds	r3, #32
 8013c4e:	443b      	add	r3, r7
 8013c50:	2202      	movs	r2, #2
 8013c52:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013c56:	8b3b      	ldrh	r3, [r7, #24]
 8013c58:	1c5a      	adds	r2, r3, #1
 8013c5a:	833a      	strh	r2, [r7, #24]
 8013c5c:	69fa      	ldr	r2, [r7, #28]
 8013c5e:	b2d2      	uxtb	r2, r2
 8013c60:	3320      	adds	r3, #32
 8013c62:	443b      	add	r3, r7
 8013c64:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	0a1a      	lsrs	r2, r3, #8
 8013c6c:	8b3b      	ldrh	r3, [r7, #24]
 8013c6e:	1c59      	adds	r1, r3, #1
 8013c70:	8339      	strh	r1, [r7, #24]
 8013c72:	b2d2      	uxtb	r2, r2
 8013c74:	3320      	adds	r3, #32
 8013c76:	443b      	add	r3, r7
 8013c78:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	0c1a      	lsrs	r2, r3, #16
 8013c80:	8b3b      	ldrh	r3, [r7, #24]
 8013c82:	1c59      	adds	r1, r3, #1
 8013c84:	8339      	strh	r1, [r7, #24]
 8013c86:	b2d2      	uxtb	r2, r2
 8013c88:	3320      	adds	r3, #32
 8013c8a:	443b      	add	r3, r7
 8013c8c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	0e1a      	lsrs	r2, r3, #24
 8013c94:	8b3b      	ldrh	r3, [r7, #24]
 8013c96:	1c59      	adds	r1, r3, #1
 8013c98:	8339      	strh	r1, [r7, #24]
 8013c9a:	b2d2      	uxtb	r2, r2
 8013c9c:	3320      	adds	r3, #32
 8013c9e:	443b      	add	r3, r7
 8013ca0:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8013ca4:	8b3a      	ldrh	r2, [r7, #24]
 8013ca6:	f107 0308 	add.w	r3, r7, #8
 8013caa:	4619      	mov	r1, r3
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f7fe fdef 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	837b      	strh	r3, [r7, #26]
 8013cb6:	8b7b      	ldrh	r3, [r7, #26]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d01b      	beq.n	8013cf4 <phhalHw_Pn5180_SetConfig_Int+0x380>
 8013cbc:	8b7b      	ldrh	r3, [r7, #26]
 8013cbe:	e01d      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 8013cc0:	883b      	ldrh	r3, [r7, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d102      	bne.n	8013ccc <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8013cc6:	f240 2323 	movw	r3, #547	@ 0x223
 8013cca:	e017      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 8013ccc:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 8013cd0:	2120      	movs	r1, #32
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7fe fd66 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	837b      	strh	r3, [r7, #26]
 8013cdc:	8b7b      	ldrh	r3, [r7, #26]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d00a      	beq.n	8013cf8 <phhalHw_Pn5180_SetConfig_Int+0x384>
 8013ce2:	8b7b      	ldrh	r3, [r7, #26]
 8013ce4:	e00a      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013ce6:	f240 237f 	movw	r3, #639	@ 0x27f
 8013cea:	e007      	b.n	8013cfc <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 8013cec:	bf00      	nop
 8013cee:	e004      	b.n	8013cfa <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8013cf0:	bf00      	nop
 8013cf2:	e002      	b.n	8013cfa <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8013cf4:	bf00      	nop
 8013cf6:	e000      	b.n	8013cfa <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8013cf8:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3720      	adds	r7, #32
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8013d12:	2b04      	cmp	r3, #4
 8013d14:	d00f      	beq.n	8013d36 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 8013d16:	2200      	movs	r2, #0
 8013d18:	2143      	movs	r1, #67	@ 0x43
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7fe fc56 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8013d20:	4603      	mov	r3, r0
 8013d22:	81fb      	strh	r3, [r7, #14]
 8013d24:	89fb      	ldrh	r3, [r7, #14]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d001      	beq.n	8013d2e <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 8013d2a:	89fb      	ldrh	r3, [r7, #14]
 8013d2c:	e013      	b.n	8013d56 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	655a      	str	r2, [r3, #84]	@ 0x54
 8013d34:	e00e      	b.n	8013d54 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 8013d36:	4a0a      	ldr	r2, [pc, #40]	@ (8013d60 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8013d38:	2143      	movs	r1, #67	@ 0x43
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f7fe fc46 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8013d40:	4603      	mov	r3, r0
 8013d42:	81fb      	strh	r3, [r7, #14]
 8013d44:	89fb      	ldrh	r3, [r7, #14]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d001      	beq.n	8013d4e <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 8013d4a:	89fb      	ldrh	r3, [r7, #14]
 8013d4c:	e003      	b.n	8013d56 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4a03      	ldr	r2, [pc, #12]	@ (8013d60 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8013d52:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8013d54:	2300      	movs	r3, #0
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3710      	adds	r7, #16
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	00ff0019 	.word	0x00ff0019

08013d64 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b086      	sub	sp, #24
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	607a      	str	r2, [r7, #4]
 8013d70:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 8013d72:	897b      	ldrh	r3, [r7, #10]
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	d005      	beq.n	8013d84 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 8013d78:	897b      	ldrh	r3, [r7, #10]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d002      	beq.n	8013d84 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013d7e:	f240 2321 	movw	r3, #545	@ 0x221
 8013d82:	e037      	b.n	8013df4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 8013d84:	897b      	ldrh	r3, [r7, #10]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d018      	beq.n	8013dbc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	4013      	ands	r3, r2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d12d      	bne.n	8013df2 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	2143      	movs	r1, #67	@ 0x43
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	f7fe fc8c 	bl	80126b8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8013da0:	4603      	mov	r3, r0
 8013da2:	82fb      	strh	r3, [r7, #22]
 8013da4:	8afb      	ldrh	r3, [r7, #22]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 8013daa:	8afb      	ldrh	r3, [r7, #22]
 8013dac:	e022      	b.n	8013df4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	431a      	orrs	r2, r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	655a      	str	r2, [r3, #84]	@ 0x54
 8013dba:	e01a      	b.n	8013df2 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	4013      	ands	r3, r2
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d014      	beq.n	8013df2 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	43db      	mvns	r3, r3
 8013dcc:	461a      	mov	r2, r3
 8013dce:	2143      	movs	r1, #67	@ 0x43
 8013dd0:	68f8      	ldr	r0, [r7, #12]
 8013dd2:	f7fe fce7 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	82fb      	strh	r3, [r7, #22]
 8013dda:	8afb      	ldrh	r3, [r7, #22]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d001      	beq.n	8013de4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 8013de0:	8afb      	ldrh	r3, [r7, #22]
 8013de2:	e007      	b.n	8013df4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	43db      	mvns	r3, r3
 8013dec:	401a      	ands	r2, r3
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 8013df2:	2300      	movs	r3, #0
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	3718      	adds	r7, #24
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b086      	sub	sp, #24
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	607b      	str	r3, [r7, #4]
 8013e06:	460b      	mov	r3, r1
 8013e08:	817b      	strh	r3, [r7, #10]
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 8013e0e:	897b      	ldrh	r3, [r7, #10]
 8013e10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d002      	beq.n	8013e1e <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013e18:	f240 2321 	movw	r3, #545	@ 0x221
 8013e1c:	e028      	b.n	8013e70 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013e22:	7a7b      	ldrb	r3, [r7, #9]
 8013e24:	fa22 f303 	lsr.w	r3, r2, r3
 8013e28:	b2da      	uxtb	r2, r3
 8013e2a:	897b      	ldrh	r3, [r7, #10]
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d01d      	beq.n	8013e6e <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e36:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	43db      	mvns	r3, r3
 8013e3c:	697a      	ldr	r2, [r7, #20]
 8013e3e:	4013      	ands	r3, r2
 8013e40:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 8013e42:	897a      	ldrh	r2, [r7, #10]
 8013e44:	7a7b      	ldrb	r3, [r7, #9]
 8013e46:	fa02 f303 	lsl.w	r3, r2, r3
 8013e4a:	697a      	ldr	r2, [r7, #20]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 8013e50:	697a      	ldr	r2, [r7, #20]
 8013e52:	2143      	movs	r1, #67	@ 0x43
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7fe fbb9 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	827b      	strh	r3, [r7, #18]
 8013e5e:	8a7b      	ldrh	r3, [r7, #18]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d001      	beq.n	8013e68 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 8013e64:	8a7b      	ldrh	r3, [r7, #18]
 8013e66:	e003      	b.n	8013e70 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	697a      	ldr	r2, [r7, #20]
 8013e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8013e6e:	2300      	movs	r3, #0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3718      	adds	r7, #24
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b086      	sub	sp, #24
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	60f8      	str	r0, [r7, #12]
 8013e80:	4608      	mov	r0, r1
 8013e82:	4611      	mov	r1, r2
 8013e84:	461a      	mov	r2, r3
 8013e86:	4603      	mov	r3, r0
 8013e88:	817b      	strh	r3, [r7, #10]
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	813b      	strh	r3, [r7, #8]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 8013e92:	2300      	movs	r3, #0
 8013e94:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 8013e96:	2300      	movs	r3, #0
 8013e98:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10f      	bne.n	8013ec2 <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013ea8:	897a      	ldrh	r2, [r7, #10]
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d101      	bne.n	8013eb2 <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8013eae:	23ff      	movs	r3, #255	@ 0xff
 8013eb0:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8013eb8:	893a      	ldrh	r2, [r7, #8]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d101      	bne.n	8013ec2 <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8013ebe:	23ff      	movs	r3, #255	@ 0xff
 8013ec0:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	2b09      	cmp	r3, #9
 8013ecc:	f200 82a1 	bhi.w	8014412 <phhalHw_Pn5180_SetCardMode+0x59a>
 8013ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8013ed8 <phhalHw_Pn5180_SetCardMode+0x60>)
 8013ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ed6:	bf00      	nop
 8013ed8:	08013f01 	.word	0x08013f01
 8013edc:	080140c9 	.word	0x080140c9
 8013ee0:	08014169 	.word	0x08014169
 8013ee4:	08014285 	.word	0x08014285
 8013ee8:	08014413 	.word	0x08014413
 8013eec:	0801431b 	.word	0x0801431b
 8013ef0:	0801439d 	.word	0x0801439d
 8013ef4:	0801439d 	.word	0x0801439d
 8013ef8:	0801439d 	.word	0x0801439d
 8013efc:	08014169 	.word	0x08014169
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 808e 	beq.w	8014026 <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d14e      	bne.n	8013fb2 <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 8013f14:	897b      	ldrh	r3, [r7, #10]
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	dc0e      	bgt.n	8013f38 <phhalHw_Pn5180_SetCardMode+0xc0>
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	db1e      	blt.n	8013f5c <phhalHw_Pn5180_SetCardMode+0xe4>
 8013f1e:	2b03      	cmp	r3, #3
 8013f20:	d81c      	bhi.n	8013f5c <phhalHw_Pn5180_SetCardMode+0xe4>
 8013f22:	a201      	add	r2, pc, #4	@ (adr r2, 8013f28 <phhalHw_Pn5180_SetCardMode+0xb0>)
 8013f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f28:	08013f3f 	.word	0x08013f3f
 8013f2c:	08013f45 	.word	0x08013f45
 8013f30:	08013f4b 	.word	0x08013f4b
 8013f34:	08013f51 	.word	0x08013f51
 8013f38:	2bff      	cmp	r3, #255	@ 0xff
 8013f3a:	d00c      	beq.n	8013f56 <phhalHw_Pn5180_SetCardMode+0xde>
 8013f3c:	e00e      	b.n	8013f5c <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 8013f3e:	2313      	movs	r3, #19
 8013f40:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8013f42:	e00e      	b.n	8013f62 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 8013f44:	2314      	movs	r3, #20
 8013f46:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8013f48:	e00b      	b.n	8013f62 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 8013f4a:	2315      	movs	r3, #21
 8013f4c:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8013f4e:	e008      	b.n	8013f62 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 8013f50:	2316      	movs	r3, #22
 8013f52:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8013f54:	e005      	b.n	8013f62 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013f56:	23ff      	movs	r3, #255	@ 0xff
 8013f58:	75fb      	strb	r3, [r7, #23]
                        break;
 8013f5a:	e002      	b.n	8013f62 <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013f5c:	f240 2321 	movw	r3, #545	@ 0x221
 8013f60:	e27c      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8013f62:	893b      	ldrh	r3, [r7, #8]
 8013f64:	2b03      	cmp	r3, #3
 8013f66:	dc0f      	bgt.n	8013f88 <phhalHw_Pn5180_SetCardMode+0x110>
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	db1f      	blt.n	8013fac <phhalHw_Pn5180_SetCardMode+0x134>
 8013f6c:	2b03      	cmp	r3, #3
 8013f6e:	d81d      	bhi.n	8013fac <phhalHw_Pn5180_SetCardMode+0x134>
 8013f70:	a201      	add	r2, pc, #4	@ (adr r2, 8013f78 <phhalHw_Pn5180_SetCardMode+0x100>)
 8013f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f76:	bf00      	nop
 8013f78:	08013f8f 	.word	0x08013f8f
 8013f7c:	08013f95 	.word	0x08013f95
 8013f80:	08013f9b 	.word	0x08013f9b
 8013f84:	08013fa1 	.word	0x08013fa1
 8013f88:	2bff      	cmp	r3, #255	@ 0xff
 8013f8a:	d00c      	beq.n	8013fa6 <phhalHw_Pn5180_SetCardMode+0x12e>
 8013f8c:	e00e      	b.n	8013fac <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 8013f8e:	2393      	movs	r3, #147	@ 0x93
 8013f90:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8013f92:	e098      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 8013f94:	2394      	movs	r3, #148	@ 0x94
 8013f96:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8013f98:	e095      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 8013f9a:	2395      	movs	r3, #149	@ 0x95
 8013f9c:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8013f9e:	e092      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 8013fa0:	2396      	movs	r3, #150	@ 0x96
 8013fa2:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8013fa4:	e08f      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013fa6:	23ff      	movs	r3, #255	@ 0xff
 8013fa8:	75bb      	strb	r3, [r7, #22]
                        break;
 8013faa:	e08c      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013fac:	f240 2321 	movw	r3, #545	@ 0x221
 8013fb0:	e254      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8013fb2:	897b      	ldrh	r3, [r7, #10]
 8013fb4:	2bff      	cmp	r3, #255	@ 0xff
 8013fb6:	d013      	beq.n	8013fe0 <phhalHw_Pn5180_SetCardMode+0x168>
 8013fb8:	2bff      	cmp	r3, #255	@ 0xff
 8013fba:	dc14      	bgt.n	8013fe6 <phhalHw_Pn5180_SetCardMode+0x16e>
 8013fbc:	2b02      	cmp	r3, #2
 8013fbe:	d00c      	beq.n	8013fda <phhalHw_Pn5180_SetCardMode+0x162>
 8013fc0:	2b02      	cmp	r3, #2
 8013fc2:	dc10      	bgt.n	8013fe6 <phhalHw_Pn5180_SetCardMode+0x16e>
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d002      	beq.n	8013fce <phhalHw_Pn5180_SetCardMode+0x156>
 8013fc8:	2b01      	cmp	r3, #1
 8013fca:	d003      	beq.n	8013fd4 <phhalHw_Pn5180_SetCardMode+0x15c>
 8013fcc:	e00b      	b.n	8013fe6 <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 8013fce:	2319      	movs	r3, #25
 8013fd0:	75fb      	strb	r3, [r7, #23]
                        break;
 8013fd2:	e00b      	b.n	8013fec <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8013fd4:	231a      	movs	r3, #26
 8013fd6:	75fb      	strb	r3, [r7, #23]
                        break;
 8013fd8:	e008      	b.n	8013fec <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8013fda:	231b      	movs	r3, #27
 8013fdc:	75fb      	strb	r3, [r7, #23]
                        break;
 8013fde:	e005      	b.n	8013fec <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8013fe0:	23ff      	movs	r3, #255	@ 0xff
 8013fe2:	75fb      	strb	r3, [r7, #23]
                        break;
 8013fe4:	e002      	b.n	8013fec <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013fe6:	f240 2321 	movw	r3, #545	@ 0x221
 8013fea:	e237      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 8013fec:	893b      	ldrh	r3, [r7, #8]
 8013fee:	2bff      	cmp	r3, #255	@ 0xff
 8013ff0:	d013      	beq.n	801401a <phhalHw_Pn5180_SetCardMode+0x1a2>
 8013ff2:	2bff      	cmp	r3, #255	@ 0xff
 8013ff4:	dc14      	bgt.n	8014020 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8013ff6:	2b02      	cmp	r3, #2
 8013ff8:	d00c      	beq.n	8014014 <phhalHw_Pn5180_SetCardMode+0x19c>
 8013ffa:	2b02      	cmp	r3, #2
 8013ffc:	dc10      	bgt.n	8014020 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d002      	beq.n	8014008 <phhalHw_Pn5180_SetCardMode+0x190>
 8014002:	2b01      	cmp	r3, #1
 8014004:	d003      	beq.n	801400e <phhalHw_Pn5180_SetCardMode+0x196>
 8014006:	e00b      	b.n	8014020 <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 8014008:	2399      	movs	r3, #153	@ 0x99
 801400a:	75bb      	strb	r3, [r7, #22]
                        break;
 801400c:	e05b      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 801400e:	239a      	movs	r3, #154	@ 0x9a
 8014010:	75bb      	strb	r3, [r7, #22]
                        break;
 8014012:	e058      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8014014:	239b      	movs	r3, #155	@ 0x9b
 8014016:	75bb      	strb	r3, [r7, #22]
                        break;
 8014018:	e055      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801401a:	23ff      	movs	r3, #255	@ 0xff
 801401c:	75bb      	strb	r3, [r7, #22]
                        break;
 801401e:	e052      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014020:	f240 2321 	movw	r3, #545	@ 0x221
 8014024:	e21a      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 8014026:	897b      	ldrh	r3, [r7, #10]
 8014028:	2b03      	cmp	r3, #3
 801402a:	dc0f      	bgt.n	801404c <phhalHw_Pn5180_SetCardMode+0x1d4>
 801402c:	2b00      	cmp	r3, #0
 801402e:	db1f      	blt.n	8014070 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8014030:	2b03      	cmp	r3, #3
 8014032:	d81d      	bhi.n	8014070 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8014034:	a201      	add	r2, pc, #4	@ (adr r2, 801403c <phhalHw_Pn5180_SetCardMode+0x1c4>)
 8014036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801403a:	bf00      	nop
 801403c:	08014053 	.word	0x08014053
 8014040:	08014059 	.word	0x08014059
 8014044:	0801405f 	.word	0x0801405f
 8014048:	08014065 	.word	0x08014065
 801404c:	2bff      	cmp	r3, #255	@ 0xff
 801404e:	d00c      	beq.n	801406a <phhalHw_Pn5180_SetCardMode+0x1f2>
 8014050:	e00e      	b.n	8014070 <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 8014052:	2300      	movs	r3, #0
 8014054:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8014056:	e00e      	b.n	8014076 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 8014058:	2301      	movs	r3, #1
 801405a:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 801405c:	e00b      	b.n	8014076 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 801405e:	2302      	movs	r3, #2
 8014060:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8014062:	e008      	b.n	8014076 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 8014064:	2303      	movs	r3, #3
 8014066:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8014068:	e005      	b.n	8014076 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801406a:	23ff      	movs	r3, #255	@ 0xff
 801406c:	75fb      	strb	r3, [r7, #23]
                    break;
 801406e:	e002      	b.n	8014076 <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014070:	f240 2321 	movw	r3, #545	@ 0x221
 8014074:	e1f2      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 8014076:	893b      	ldrh	r3, [r7, #8]
 8014078:	2b03      	cmp	r3, #3
 801407a:	dc0f      	bgt.n	801409c <phhalHw_Pn5180_SetCardMode+0x224>
 801407c:	2b00      	cmp	r3, #0
 801407e:	db1f      	blt.n	80140c0 <phhalHw_Pn5180_SetCardMode+0x248>
 8014080:	2b03      	cmp	r3, #3
 8014082:	d81d      	bhi.n	80140c0 <phhalHw_Pn5180_SetCardMode+0x248>
 8014084:	a201      	add	r2, pc, #4	@ (adr r2, 801408c <phhalHw_Pn5180_SetCardMode+0x214>)
 8014086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801408a:	bf00      	nop
 801408c:	080140a3 	.word	0x080140a3
 8014090:	080140a9 	.word	0x080140a9
 8014094:	080140af 	.word	0x080140af
 8014098:	080140b5 	.word	0x080140b5
 801409c:	2bff      	cmp	r3, #255	@ 0xff
 801409e:	d00c      	beq.n	80140ba <phhalHw_Pn5180_SetCardMode+0x242>
 80140a0:	e00e      	b.n	80140c0 <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 80140a2:	2380      	movs	r3, #128	@ 0x80
 80140a4:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 80140a6:	e00e      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 80140a8:	2381      	movs	r3, #129	@ 0x81
 80140aa:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 80140ac:	e00b      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 80140ae:	2382      	movs	r3, #130	@ 0x82
 80140b0:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 80140b2:	e008      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 80140b4:	2383      	movs	r3, #131	@ 0x83
 80140b6:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 80140b8:	e005      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80140ba:	23ff      	movs	r3, #255	@ 0xff
 80140bc:	75bb      	strb	r3, [r7, #22]
                    break;
 80140be:	e002      	b.n	80140c6 <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80140c0:	f240 2321 	movw	r3, #545	@ 0x221
 80140c4:	e1ca      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 80140c6:	e1a7      	b.n	8014418 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 80140c8:	897b      	ldrh	r3, [r7, #10]
 80140ca:	2b03      	cmp	r3, #3
 80140cc:	dc0e      	bgt.n	80140ec <phhalHw_Pn5180_SetCardMode+0x274>
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	db1e      	blt.n	8014110 <phhalHw_Pn5180_SetCardMode+0x298>
 80140d2:	2b03      	cmp	r3, #3
 80140d4:	d81c      	bhi.n	8014110 <phhalHw_Pn5180_SetCardMode+0x298>
 80140d6:	a201      	add	r2, pc, #4	@ (adr r2, 80140dc <phhalHw_Pn5180_SetCardMode+0x264>)
 80140d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140dc:	080140f3 	.word	0x080140f3
 80140e0:	080140f9 	.word	0x080140f9
 80140e4:	080140ff 	.word	0x080140ff
 80140e8:	08014105 	.word	0x08014105
 80140ec:	2bff      	cmp	r3, #255	@ 0xff
 80140ee:	d00c      	beq.n	801410a <phhalHw_Pn5180_SetCardMode+0x292>
 80140f0:	e00e      	b.n	8014110 <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 80140f2:	2304      	movs	r3, #4
 80140f4:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 80140f6:	e00e      	b.n	8014116 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 80140f8:	2305      	movs	r3, #5
 80140fa:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 80140fc:	e00b      	b.n	8014116 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 80140fe:	2306      	movs	r3, #6
 8014100:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8014102:	e008      	b.n	8014116 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 8014104:	2307      	movs	r3, #7
 8014106:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8014108:	e005      	b.n	8014116 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801410a:	23ff      	movs	r3, #255	@ 0xff
 801410c:	75fb      	strb	r3, [r7, #23]
                break;
 801410e:	e002      	b.n	8014116 <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014110:	f240 2321 	movw	r3, #545	@ 0x221
 8014114:	e1a2      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8014116:	893b      	ldrh	r3, [r7, #8]
 8014118:	2b03      	cmp	r3, #3
 801411a:	dc0f      	bgt.n	801413c <phhalHw_Pn5180_SetCardMode+0x2c4>
 801411c:	2b00      	cmp	r3, #0
 801411e:	db1f      	blt.n	8014160 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8014120:	2b03      	cmp	r3, #3
 8014122:	d81d      	bhi.n	8014160 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8014124:	a201      	add	r2, pc, #4	@ (adr r2, 801412c <phhalHw_Pn5180_SetCardMode+0x2b4>)
 8014126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801412a:	bf00      	nop
 801412c:	08014143 	.word	0x08014143
 8014130:	08014149 	.word	0x08014149
 8014134:	0801414f 	.word	0x0801414f
 8014138:	08014155 	.word	0x08014155
 801413c:	2bff      	cmp	r3, #255	@ 0xff
 801413e:	d00c      	beq.n	801415a <phhalHw_Pn5180_SetCardMode+0x2e2>
 8014140:	e00e      	b.n	8014160 <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8014142:	2384      	movs	r3, #132	@ 0x84
 8014144:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8014146:	e00e      	b.n	8014166 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8014148:	2385      	movs	r3, #133	@ 0x85
 801414a:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 801414c:	e00b      	b.n	8014166 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 801414e:	2386      	movs	r3, #134	@ 0x86
 8014150:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8014152:	e008      	b.n	8014166 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8014154:	2387      	movs	r3, #135	@ 0x87
 8014156:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8014158:	e005      	b.n	8014166 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801415a:	23ff      	movs	r3, #255	@ 0xff
 801415c:	75bb      	strb	r3, [r7, #22]
                break;
 801415e:	e002      	b.n	8014166 <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014160:	f240 2321 	movw	r3, #545	@ 0x221
 8014164:	e17a      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8014166:	e157      	b.n	8014418 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801416c:	2b00      	cmp	r3, #0
 801416e:	d05c      	beq.n	801422a <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014176:	2b00      	cmp	r3, #0
 8014178:	d12b      	bne.n	80141d2 <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 801417a:	897b      	ldrh	r3, [r7, #10]
 801417c:	2bff      	cmp	r3, #255	@ 0xff
 801417e:	d00c      	beq.n	801419a <phhalHw_Pn5180_SetCardMode+0x322>
 8014180:	2bff      	cmp	r3, #255	@ 0xff
 8014182:	dc0d      	bgt.n	80141a0 <phhalHw_Pn5180_SetCardMode+0x328>
 8014184:	2b01      	cmp	r3, #1
 8014186:	d002      	beq.n	801418e <phhalHw_Pn5180_SetCardMode+0x316>
 8014188:	2b02      	cmp	r3, #2
 801418a:	d003      	beq.n	8014194 <phhalHw_Pn5180_SetCardMode+0x31c>
 801418c:	e008      	b.n	80141a0 <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 801418e:	2317      	movs	r3, #23
 8014190:	75fb      	strb	r3, [r7, #23]
                        break;
 8014192:	e008      	b.n	80141a6 <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 8014194:	2318      	movs	r3, #24
 8014196:	75fb      	strb	r3, [r7, #23]
                        break;
 8014198:	e005      	b.n	80141a6 <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801419a:	23ff      	movs	r3, #255	@ 0xff
 801419c:	75fb      	strb	r3, [r7, #23]
                        break;
 801419e:	e002      	b.n	80141a6 <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80141a0:	f240 2321 	movw	r3, #545	@ 0x221
 80141a4:	e15a      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 80141a6:	893b      	ldrh	r3, [r7, #8]
 80141a8:	2bff      	cmp	r3, #255	@ 0xff
 80141aa:	d00c      	beq.n	80141c6 <phhalHw_Pn5180_SetCardMode+0x34e>
 80141ac:	2bff      	cmp	r3, #255	@ 0xff
 80141ae:	dc0d      	bgt.n	80141cc <phhalHw_Pn5180_SetCardMode+0x354>
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d002      	beq.n	80141ba <phhalHw_Pn5180_SetCardMode+0x342>
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	d003      	beq.n	80141c0 <phhalHw_Pn5180_SetCardMode+0x348>
 80141b8:	e008      	b.n	80141cc <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 80141ba:	2397      	movs	r3, #151	@ 0x97
 80141bc:	75bb      	strb	r3, [r7, #22]
                        break;
 80141be:	e060      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 80141c0:	2398      	movs	r3, #152	@ 0x98
 80141c2:	75bb      	strb	r3, [r7, #22]
                        break;
 80141c4:	e05d      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80141c6:	23ff      	movs	r3, #255	@ 0xff
 80141c8:	75bb      	strb	r3, [r7, #22]
                        break;
 80141ca:	e05a      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80141cc:	f240 2321 	movw	r3, #545	@ 0x221
 80141d0:	e144      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 80141d2:	897b      	ldrh	r3, [r7, #10]
 80141d4:	2bff      	cmp	r3, #255	@ 0xff
 80141d6:	d00c      	beq.n	80141f2 <phhalHw_Pn5180_SetCardMode+0x37a>
 80141d8:	2bff      	cmp	r3, #255	@ 0xff
 80141da:	dc0d      	bgt.n	80141f8 <phhalHw_Pn5180_SetCardMode+0x380>
 80141dc:	2b01      	cmp	r3, #1
 80141de:	d002      	beq.n	80141e6 <phhalHw_Pn5180_SetCardMode+0x36e>
 80141e0:	2b02      	cmp	r3, #2
 80141e2:	d003      	beq.n	80141ec <phhalHw_Pn5180_SetCardMode+0x374>
 80141e4:	e008      	b.n	80141f8 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 80141e6:	231a      	movs	r3, #26
 80141e8:	75fb      	strb	r3, [r7, #23]
                        break;
 80141ea:	e008      	b.n	80141fe <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 80141ec:	231b      	movs	r3, #27
 80141ee:	75fb      	strb	r3, [r7, #23]
                        break;
 80141f0:	e005      	b.n	80141fe <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80141f2:	23ff      	movs	r3, #255	@ 0xff
 80141f4:	75fb      	strb	r3, [r7, #23]
                        break;
 80141f6:	e002      	b.n	80141fe <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80141f8:	f240 2321 	movw	r3, #545	@ 0x221
 80141fc:	e12e      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 80141fe:	893b      	ldrh	r3, [r7, #8]
 8014200:	2bff      	cmp	r3, #255	@ 0xff
 8014202:	d00c      	beq.n	801421e <phhalHw_Pn5180_SetCardMode+0x3a6>
 8014204:	2bff      	cmp	r3, #255	@ 0xff
 8014206:	dc0d      	bgt.n	8014224 <phhalHw_Pn5180_SetCardMode+0x3ac>
 8014208:	2b01      	cmp	r3, #1
 801420a:	d002      	beq.n	8014212 <phhalHw_Pn5180_SetCardMode+0x39a>
 801420c:	2b02      	cmp	r3, #2
 801420e:	d003      	beq.n	8014218 <phhalHw_Pn5180_SetCardMode+0x3a0>
 8014210:	e008      	b.n	8014224 <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8014212:	239a      	movs	r3, #154	@ 0x9a
 8014214:	75bb      	strb	r3, [r7, #22]
                        break;
 8014216:	e034      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8014218:	239b      	movs	r3, #155	@ 0x9b
 801421a:	75bb      	strb	r3, [r7, #22]
                        break;
 801421c:	e031      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801421e:	23ff      	movs	r3, #255	@ 0xff
 8014220:	75bb      	strb	r3, [r7, #22]
                        break;
 8014222:	e02e      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014224:	f240 2321 	movw	r3, #545	@ 0x221
 8014228:	e118      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 801422a:	897b      	ldrh	r3, [r7, #10]
 801422c:	2bff      	cmp	r3, #255	@ 0xff
 801422e:	d00c      	beq.n	801424a <phhalHw_Pn5180_SetCardMode+0x3d2>
 8014230:	2bff      	cmp	r3, #255	@ 0xff
 8014232:	dc0d      	bgt.n	8014250 <phhalHw_Pn5180_SetCardMode+0x3d8>
 8014234:	2b01      	cmp	r3, #1
 8014236:	d002      	beq.n	801423e <phhalHw_Pn5180_SetCardMode+0x3c6>
 8014238:	2b02      	cmp	r3, #2
 801423a:	d003      	beq.n	8014244 <phhalHw_Pn5180_SetCardMode+0x3cc>
 801423c:	e008      	b.n	8014250 <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 801423e:	2308      	movs	r3, #8
 8014240:	75fb      	strb	r3, [r7, #23]
                    break;
 8014242:	e008      	b.n	8014256 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 8014244:	2309      	movs	r3, #9
 8014246:	75fb      	strb	r3, [r7, #23]
                    break;
 8014248:	e005      	b.n	8014256 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801424a:	23ff      	movs	r3, #255	@ 0xff
 801424c:	75fb      	strb	r3, [r7, #23]
                    break;
 801424e:	e002      	b.n	8014256 <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014250:	f240 2321 	movw	r3, #545	@ 0x221
 8014254:	e102      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 8014256:	893b      	ldrh	r3, [r7, #8]
 8014258:	2bff      	cmp	r3, #255	@ 0xff
 801425a:	d00c      	beq.n	8014276 <phhalHw_Pn5180_SetCardMode+0x3fe>
 801425c:	2bff      	cmp	r3, #255	@ 0xff
 801425e:	dc0d      	bgt.n	801427c <phhalHw_Pn5180_SetCardMode+0x404>
 8014260:	2b01      	cmp	r3, #1
 8014262:	d002      	beq.n	801426a <phhalHw_Pn5180_SetCardMode+0x3f2>
 8014264:	2b02      	cmp	r3, #2
 8014266:	d003      	beq.n	8014270 <phhalHw_Pn5180_SetCardMode+0x3f8>
 8014268:	e008      	b.n	801427c <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 801426a:	2388      	movs	r3, #136	@ 0x88
 801426c:	75bb      	strb	r3, [r7, #22]
                    break;
 801426e:	e008      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8014270:	2389      	movs	r3, #137	@ 0x89
 8014272:	75bb      	strb	r3, [r7, #22]
                    break;
 8014274:	e005      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014276:	23ff      	movs	r3, #255	@ 0xff
 8014278:	75bb      	strb	r3, [r7, #22]
                    break;
 801427a:	e002      	b.n	8014282 <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801427c:	f240 2321 	movw	r3, #545	@ 0x221
 8014280:	e0ec      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 8014282:	e0c9      	b.n	8014418 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 8014284:	897b      	ldrh	r3, [r7, #10]
 8014286:	2b0b      	cmp	r3, #11
 8014288:	d002      	beq.n	8014290 <phhalHw_Pn5180_SetCardMode+0x418>
 801428a:	2bff      	cmp	r3, #255	@ 0xff
 801428c:	d003      	beq.n	8014296 <phhalHw_Pn5180_SetCardMode+0x41e>
 801428e:	e005      	b.n	801429c <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8014290:	230e      	movs	r3, #14
 8014292:	75fb      	strb	r3, [r7, #23]
                break;
 8014294:	e005      	b.n	80142a2 <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014296:	23ff      	movs	r3, #255	@ 0xff
 8014298:	75fb      	strb	r3, [r7, #23]
                break;
 801429a:	e002      	b.n	80142a2 <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801429c:	f240 2321 	movw	r3, #545	@ 0x221
 80142a0:	e0dc      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 80142a2:	893b      	ldrh	r3, [r7, #8]
 80142a4:	2b0f      	cmp	r3, #15
 80142a6:	dc25      	bgt.n	80142f4 <phhalHw_Pn5180_SetCardMode+0x47c>
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	dd32      	ble.n	8014312 <phhalHw_Pn5180_SetCardMode+0x49a>
 80142ac:	3b01      	subs	r3, #1
 80142ae:	2b0e      	cmp	r3, #14
 80142b0:	d82f      	bhi.n	8014312 <phhalHw_Pn5180_SetCardMode+0x49a>
 80142b2:	a201      	add	r2, pc, #4	@ (adr r2, 80142b8 <phhalHw_Pn5180_SetCardMode+0x440>)
 80142b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142b8:	08014307 	.word	0x08014307
 80142bc:	08014313 	.word	0x08014313
 80142c0:	08014313 	.word	0x08014313
 80142c4:	08014313 	.word	0x08014313
 80142c8:	08014313 	.word	0x08014313
 80142cc:	08014313 	.word	0x08014313
 80142d0:	08014313 	.word	0x08014313
 80142d4:	08014313 	.word	0x08014313
 80142d8:	08014313 	.word	0x08014313
 80142dc:	08014313 	.word	0x08014313
 80142e0:	08014313 	.word	0x08014313
 80142e4:	08014307 	.word	0x08014307
 80142e8:	080142fb 	.word	0x080142fb
 80142ec:	08014307 	.word	0x08014307
 80142f0:	08014301 	.word	0x08014301
 80142f4:	2bff      	cmp	r3, #255	@ 0xff
 80142f6:	d009      	beq.n	801430c <phhalHw_Pn5180_SetCardMode+0x494>
 80142f8:	e00b      	b.n	8014312 <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 80142fa:	238d      	movs	r3, #141	@ 0x8d
 80142fc:	75bb      	strb	r3, [r7, #22]
                break;
 80142fe:	e00b      	b.n	8014318 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 8014300:	238e      	movs	r3, #142	@ 0x8e
 8014302:	75bb      	strb	r3, [r7, #22]
                break;
 8014304:	e008      	b.n	8014318 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8014306:	f240 2323 	movw	r3, #547	@ 0x223
 801430a:	e0a7      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801430c:	23ff      	movs	r3, #255	@ 0xff
 801430e:	75bb      	strb	r3, [r7, #22]
                break;
 8014310:	e002      	b.n	8014318 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014312:	f240 2321 	movw	r3, #545	@ 0x221
 8014316:	e0a1      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8014318:	e07e      	b.n	8014418 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 801431a:	897b      	ldrh	r3, [r7, #10]
 801431c:	2b11      	cmp	r3, #17
 801431e:	d002      	beq.n	8014326 <phhalHw_Pn5180_SetCardMode+0x4ae>
 8014320:	2bff      	cmp	r3, #255	@ 0xff
 8014322:	d00c      	beq.n	801433e <phhalHw_Pn5180_SetCardMode+0x4c6>
 8014324:	e00e      	b.n	8014344 <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 8014326:	88fb      	ldrh	r3, [r7, #6]
 8014328:	2b01      	cmp	r3, #1
 801432a:	d005      	beq.n	8014338 <phhalHw_Pn5180_SetCardMode+0x4c0>
 801432c:	88fb      	ldrh	r3, [r7, #6]
 801432e:	2b02      	cmp	r3, #2
 8014330:	d002      	beq.n	8014338 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014332:	f240 2321 	movw	r3, #545	@ 0x221
 8014336:	e091      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 8014338:	2310      	movs	r3, #16
 801433a:	75fb      	strb	r3, [r7, #23]
                break;
 801433c:	e005      	b.n	801434a <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801433e:	23ff      	movs	r3, #255	@ 0xff
 8014340:	75fb      	strb	r3, [r7, #23]
                break;
 8014342:	e002      	b.n	801434a <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014344:	f240 2321 	movw	r3, #545	@ 0x221
 8014348:	e088      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 801434a:	893b      	ldrh	r3, [r7, #8]
 801434c:	2b16      	cmp	r3, #22
 801434e:	dc0f      	bgt.n	8014370 <phhalHw_Pn5180_SetCardMode+0x4f8>
 8014350:	2b13      	cmp	r3, #19
 8014352:	db1f      	blt.n	8014394 <phhalHw_Pn5180_SetCardMode+0x51c>
 8014354:	3b13      	subs	r3, #19
 8014356:	2b03      	cmp	r3, #3
 8014358:	d81c      	bhi.n	8014394 <phhalHw_Pn5180_SetCardMode+0x51c>
 801435a:	a201      	add	r2, pc, #4	@ (adr r2, 8014360 <phhalHw_Pn5180_SetCardMode+0x4e8>)
 801435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014360:	08014377 	.word	0x08014377
 8014364:	08014383 	.word	0x08014383
 8014368:	0801437d 	.word	0x0801437d
 801436c:	08014389 	.word	0x08014389
 8014370:	2bff      	cmp	r3, #255	@ 0xff
 8014372:	d00c      	beq.n	801438e <phhalHw_Pn5180_SetCardMode+0x516>
 8014374:	e00e      	b.n	8014394 <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 8014376:	2390      	movs	r3, #144	@ 0x90
 8014378:	75bb      	strb	r3, [r7, #22]
                break;
 801437a:	e00e      	b.n	801439a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 801437c:	238f      	movs	r3, #143	@ 0x8f
 801437e:	75bb      	strb	r3, [r7, #22]
                break;
 8014380:	e00b      	b.n	801439a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 8014382:	2392      	movs	r3, #146	@ 0x92
 8014384:	75bb      	strb	r3, [r7, #22]
                break;
 8014386:	e008      	b.n	801439a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8014388:	2391      	movs	r3, #145	@ 0x91
 801438a:	75bb      	strb	r3, [r7, #22]
                break;
 801438c:	e005      	b.n	801439a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801438e:	23ff      	movs	r3, #255	@ 0xff
 8014390:	75bb      	strb	r3, [r7, #22]
                break;
 8014392:	e002      	b.n	801439a <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014394:	f240 2321 	movw	r3, #545	@ 0x221
 8014398:	e060      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 801439a:	e03d      	b.n	8014418 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 801439c:	897b      	ldrh	r3, [r7, #10]
 801439e:	2bff      	cmp	r3, #255	@ 0xff
 80143a0:	d013      	beq.n	80143ca <phhalHw_Pn5180_SetCardMode+0x552>
 80143a2:	2bff      	cmp	r3, #255	@ 0xff
 80143a4:	dc14      	bgt.n	80143d0 <phhalHw_Pn5180_SetCardMode+0x558>
 80143a6:	2b02      	cmp	r3, #2
 80143a8:	d00c      	beq.n	80143c4 <phhalHw_Pn5180_SetCardMode+0x54c>
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	dc10      	bgt.n	80143d0 <phhalHw_Pn5180_SetCardMode+0x558>
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d002      	beq.n	80143b8 <phhalHw_Pn5180_SetCardMode+0x540>
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d003      	beq.n	80143be <phhalHw_Pn5180_SetCardMode+0x546>
 80143b6:	e00b      	b.n	80143d0 <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 80143b8:	230a      	movs	r3, #10
 80143ba:	75fb      	strb	r3, [r7, #23]
                break;
 80143bc:	e00b      	b.n	80143d6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 80143be:	230b      	movs	r3, #11
 80143c0:	75fb      	strb	r3, [r7, #23]
            break;
 80143c2:	e008      	b.n	80143d6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 80143c4:	230c      	movs	r3, #12
 80143c6:	75fb      	strb	r3, [r7, #23]
                break;
 80143c8:	e005      	b.n	80143d6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80143ca:	23ff      	movs	r3, #255	@ 0xff
 80143cc:	75fb      	strb	r3, [r7, #23]
                break;
 80143ce:	e002      	b.n	80143d6 <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80143d0:	f240 2321 	movw	r3, #545	@ 0x221
 80143d4:	e042      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 80143d6:	893b      	ldrh	r3, [r7, #8]
 80143d8:	2bff      	cmp	r3, #255	@ 0xff
 80143da:	d013      	beq.n	8014404 <phhalHw_Pn5180_SetCardMode+0x58c>
 80143dc:	2bff      	cmp	r3, #255	@ 0xff
 80143de:	dc14      	bgt.n	801440a <phhalHw_Pn5180_SetCardMode+0x592>
 80143e0:	2b02      	cmp	r3, #2
 80143e2:	d00c      	beq.n	80143fe <phhalHw_Pn5180_SetCardMode+0x586>
 80143e4:	2b02      	cmp	r3, #2
 80143e6:	dc10      	bgt.n	801440a <phhalHw_Pn5180_SetCardMode+0x592>
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <phhalHw_Pn5180_SetCardMode+0x57a>
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d003      	beq.n	80143f8 <phhalHw_Pn5180_SetCardMode+0x580>
 80143f0:	e00b      	b.n	801440a <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 80143f2:	238a      	movs	r3, #138	@ 0x8a
 80143f4:	75bb      	strb	r3, [r7, #22]
                break;
 80143f6:	e00b      	b.n	8014410 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 80143f8:	238b      	movs	r3, #139	@ 0x8b
 80143fa:	75bb      	strb	r3, [r7, #22]
            break;
 80143fc:	e008      	b.n	8014410 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 80143fe:	238c      	movs	r3, #140	@ 0x8c
 8014400:	75bb      	strb	r3, [r7, #22]
                break;
 8014402:	e005      	b.n	8014410 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014404:	23ff      	movs	r3, #255	@ 0xff
 8014406:	75bb      	strb	r3, [r7, #22]
                break;
 8014408:	e002      	b.n	8014410 <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801440a:	f240 2321 	movw	r3, #545	@ 0x221
 801440e:	e025      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 8014410:	e002      	b.n	8014418 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014412:	f240 2321 	movw	r3, #545	@ 0x221
 8014416:	e021      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 8014418:	7dfb      	ldrb	r3, [r7, #23]
 801441a:	2bff      	cmp	r3, #255	@ 0xff
 801441c:	d102      	bne.n	8014424 <phhalHw_Pn5180_SetCardMode+0x5ac>
 801441e:	7dbb      	ldrb	r3, [r7, #22]
 8014420:	2bff      	cmp	r3, #255	@ 0xff
 8014422:	d00c      	beq.n	801443e <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8014424:	7dba      	ldrb	r2, [r7, #22]
 8014426:	7dfb      	ldrb	r3, [r7, #23]
 8014428:	4619      	mov	r1, r3
 801442a:	68f8      	ldr	r0, [r7, #12]
 801442c:	f7fe ffc8 	bl	80133c0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 8014430:	4603      	mov	r3, r0
 8014432:	82bb      	strh	r3, [r7, #20]
 8014434:	8abb      	ldrh	r3, [r7, #20]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <phhalHw_Pn5180_SetCardMode+0x5c6>
 801443a:	8abb      	ldrh	r3, [r7, #20]
 801443c:	e00e      	b.n	801445c <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 801443e:	897b      	ldrh	r3, [r7, #10]
 8014440:	2bff      	cmp	r3, #255	@ 0xff
 8014442:	d003      	beq.n	801444c <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	897a      	ldrh	r2, [r7, #10]
 8014448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 801444c:	893b      	ldrh	r3, [r7, #8]
 801444e:	2bff      	cmp	r3, #255	@ 0xff
 8014450:	d003      	beq.n	801445a <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	893a      	ldrh	r2, [r7, #8]
 8014456:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 801445a:	2300      	movs	r3, #0
}
 801445c:	4618      	mov	r0, r3
 801445e:	3718      	adds	r7, #24
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b088      	sub	sp, #32
 8014468:	af02      	add	r7, sp, #8
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	460b      	mov	r3, r1
 801446e:	807b      	strh	r3, [r7, #2]
 8014470:	4613      	mov	r3, r2
 8014472:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 8014474:	2300      	movs	r3, #0
 8014476:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8014478:	787b      	ldrb	r3, [r7, #1]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d005      	beq.n	801448a <phhalHw_Pn5180_SetTmo+0x26>
 801447e:	787b      	ldrb	r3, [r7, #1]
 8014480:	2b01      	cmp	r3, #1
 8014482:	d002      	beq.n	801448a <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014484:	f240 2321 	movw	r3, #545	@ 0x221
 8014488:	e051      	b.n	801452e <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 801448a:	887b      	ldrh	r3, [r7, #2]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d101      	bne.n	8014494 <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 8014490:	2300      	movs	r3, #0
 8014492:	e04c      	b.n	801452e <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 8014494:	787b      	ldrb	r3, [r7, #1]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d125      	bne.n	80144e6 <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80144a0:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 80144a4:	d20d      	bcs.n	80144c2 <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 80144a6:	f107 030c 	add.w	r3, r7, #12
 80144aa:	461a      	mov	r2, r3
 80144ac:	2101      	movs	r1, #1
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f000 f966 	bl	8014780 <phhalHw_Pn5180_Int_GetDigiDelay>
 80144b4:	4603      	mov	r3, r0
 80144b6:	81fb      	strh	r3, [r7, #14]
 80144b8:	89fb      	ldrh	r3, [r7, #14]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d001      	beq.n	80144c2 <phhalHw_Pn5180_SetTmo+0x5e>
 80144be:	89fb      	ldrh	r3, [r7, #14]
 80144c0:	e035      	b.n	801452e <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 80144c2:	2300      	movs	r3, #0
 80144c4:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 80144c6:	f240 534c 	movw	r3, #1356	@ 0x54c
 80144ca:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 80144cc:	887b      	ldrh	r3, [r7, #2]
 80144ce:	89ba      	ldrh	r2, [r7, #12]
 80144d0:	4413      	add	r3, r2
 80144d2:	461a      	mov	r2, r3
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	fb02 f303 	mul.w	r3, r2, r3
 80144da:	4a17      	ldr	r2, [pc, #92]	@ (8014538 <phhalHw_Pn5180_SetTmo+0xd4>)
 80144dc:	fba2 2303 	umull	r2, r3, r2, r3
 80144e0:	095b      	lsrs	r3, r3, #5
 80144e2:	613b      	str	r3, [r7, #16]
 80144e4:	e00f      	b.n	8014506 <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 80144e6:	233c      	movs	r3, #60	@ 0x3c
 80144e8:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 80144ea:	887b      	ldrh	r3, [r7, #2]
 80144ec:	f644 5248 	movw	r2, #19784	@ 0x4d48
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d805      	bhi.n	8014500 <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 80144f4:	887b      	ldrh	r3, [r7, #2]
 80144f6:	2235      	movs	r2, #53	@ 0x35
 80144f8:	fb02 f303 	mul.w	r3, r2, r3
 80144fc:	613b      	str	r3, [r7, #16]
 80144fe:	e002      	b.n	8014506 <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8014500:	f240 2322 	movw	r3, #546	@ 0x222
 8014504:	e013      	b.n	801452e <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	9301      	str	r3, [sp, #4]
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014512:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014516:	210f      	movs	r1, #15
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7ff f938 	bl	801378e <phhalHw_Pn5180_TimerStart>
 801451e:	4603      	mov	r3, r0
 8014520:	81fb      	strh	r3, [r7, #14]
 8014522:	89fb      	ldrh	r3, [r7, #14]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d001      	beq.n	801452c <phhalHw_Pn5180_SetTmo+0xc8>
 8014528:	89fb      	ldrh	r3, [r7, #14]
 801452a:	e000      	b.n	801452e <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 801452c:	2300      	movs	r3, #0
}
 801452e:	4618      	mov	r0, r3
 8014530:	3718      	adds	r7, #24
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	51eb851f 	.word	0x51eb851f

0801453c <phhalHw_Pn5180_Int_Wait>:

phStatus_t phhalHw_Pn5180_Int_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint32_t dwLoadValue,
    uint32_t wPrescaler)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b094      	sub	sp, #80	@ 0x50
 8014540:	af02      	add	r7, sp, #8
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	607a      	str	r2, [r7, #4]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwIrqStatusReg;

    /* Setting Timer1 & Reload value Registers */
    bTmrConfigReg = TIMER0_CONFIG;
 8014548:	230e      	movs	r3, #14
 801454a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bTmrReloadReg = TIMER0_RELOAD;
 801454e:	230b      	movs	r3, #11
 8014550:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 8014554:	2301      	movs	r3, #1
 8014556:	643b      	str	r3, [r7, #64]	@ 0x40

    /*write 0 to stop timer1*/
    wSizeOfRegTypeValueSets = 0U;
 8014558:	2300      	movs	r3, #0
 801455a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 801455c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801455e:	1c5a      	adds	r2, r3, #1
 8014560:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014562:	3348      	adds	r3, #72	@ 0x48
 8014564:	443b      	add	r3, r7
 8014566:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801456a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801456e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014570:	1c5a      	adds	r2, r3, #1
 8014572:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014574:	3348      	adds	r3, #72	@ 0x48
 8014576:	443b      	add	r3, r7
 8014578:	2201      	movs	r2, #1
 801457a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801457e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014580:	1c5a      	adds	r2, r3, #1
 8014582:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014584:	3348      	adds	r3, #72	@ 0x48
 8014586:	443b      	add	r3, r7
 8014588:	2200      	movs	r2, #0
 801458a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801458e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014590:	1c5a      	adds	r2, r3, #1
 8014592:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014594:	3348      	adds	r3, #72	@ 0x48
 8014596:	443b      	add	r3, r7
 8014598:	2200      	movs	r2, #0
 801459a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801459e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80145a0:	1c5a      	adds	r2, r3, #1
 80145a2:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80145a4:	3348      	adds	r3, #72	@ 0x48
 80145a6:	443b      	add	r3, r7
 80145a8:	2200      	movs	r2, #0
 80145aa:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80145ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80145b0:	1c5a      	adds	r2, r3, #1
 80145b2:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80145b4:	3348      	adds	r3, #72	@ 0x48
 80145b6:	443b      	add	r3, r7
 80145b8:	2200      	movs	r2, #0
 80145ba:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /*load the timer 2 reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrReloadReg;
 80145c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80145c8:	1c5a      	adds	r2, r3, #1
 80145ca:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80145cc:	3348      	adds	r3, #72	@ 0x48
 80145ce:	443b      	add	r3, r7
 80145d0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80145d4:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80145d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80145da:	1c5a      	adds	r2, r3, #1
 80145dc:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80145de:	3348      	adds	r3, #72	@ 0x48
 80145e0:	443b      	add	r3, r7
 80145e2:	2201      	movs	r2, #1
 80145e4:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80145e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80145ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145f0:	b2d2      	uxtb	r2, r2
 80145f2:	3348      	adds	r3, #72	@ 0x48
 80145f4:	443b      	add	r3, r7
 80145f6:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80145fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145fc:	0a1a      	lsrs	r2, r3, #8
 80145fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014600:	1c59      	adds	r1, r3, #1
 8014602:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014604:	b2d2      	uxtb	r2, r2
 8014606:	3348      	adds	r3, #72	@ 0x48
 8014608:	443b      	add	r3, r7
 801460a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014610:	0c1a      	lsrs	r2, r3, #16
 8014612:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014614:	1c59      	adds	r1, r3, #1
 8014616:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014618:	b2d2      	uxtb	r2, r2
 801461a:	3348      	adds	r3, #72	@ 0x48
 801461c:	443b      	add	r3, r7
 801461e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014624:	0e1a      	lsrs	r2, r3, #24
 8014626:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014628:	1c59      	adds	r1, r3, #1
 801462a:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 801462c:	b2d2      	uxtb	r2, r2
 801462e:	3348      	adds	r3, #72	@ 0x48
 8014630:	443b      	add	r3, r7
 8014632:	f803 2c2c 	strb.w	r2, [r3, #-44]

    dwStartCond = TIMER0_CONFIG_T0_START_NOW_MASK;
 8014636:	2340      	movs	r3, #64	@ 0x40
 8014638:	637b      	str	r3, [r7, #52]	@ 0x34
    dwStopCond = 0x00U;
 801463a:	2300      	movs	r3, #0
 801463c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* T2_MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask);
 801463e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014642:	431a      	orrs	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	4313      	orrs	r3, r2
 8014648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801464a:	4313      	orrs	r3, r2
 801464c:	63bb      	str	r3, [r7, #56]	@ 0x38

    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 801464e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014650:	1c5a      	adds	r2, r3, #1
 8014652:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014654:	3348      	adds	r3, #72	@ 0x48
 8014656:	443b      	add	r3, r7
 8014658:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801465c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8014660:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014662:	1c5a      	adds	r2, r3, #1
 8014664:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014666:	3348      	adds	r3, #72	@ 0x48
 8014668:	443b      	add	r3, r7
 801466a:	2201      	movs	r2, #1
 801466c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014670:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014672:	1c5a      	adds	r2, r3, #1
 8014674:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014678:	b2d2      	uxtb	r2, r2
 801467a:	3348      	adds	r3, #72	@ 0x48
 801467c:	443b      	add	r3, r7
 801467e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014684:	0a1a      	lsrs	r2, r3, #8
 8014686:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014688:	1c59      	adds	r1, r3, #1
 801468a:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 801468c:	b2d2      	uxtb	r2, r2
 801468e:	3348      	adds	r3, #72	@ 0x48
 8014690:	443b      	add	r3, r7
 8014692:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8014696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014698:	0c1a      	lsrs	r2, r3, #16
 801469a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801469c:	1c59      	adds	r1, r3, #1
 801469e:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80146a0:	b2d2      	uxtb	r2, r2
 80146a2:	3348      	adds	r3, #72	@ 0x48
 80146a4:	443b      	add	r3, r7
 80146a6:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80146aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146ac:	0e1a      	lsrs	r2, r3, #24
 80146ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80146b0:	1c59      	adds	r1, r3, #1
 80146b2:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80146b4:	b2d2      	uxtb	r2, r2
 80146b6:	3348      	adds	r3, #72	@ 0x48
 80146b8:	443b      	add	r3, r7
 80146ba:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /* Clear Interrupt  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_TIMER0_IRQ_CLR_MASK));
 80146be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80146c2:	2103      	movs	r1, #3
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f7fd ff81 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 80146ca:	4603      	mov	r3, r0
 80146cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80146ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d001      	beq.n	80146d8 <phhalHw_Pn5180_Int_Wait+0x19c>
 80146d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80146d6:	e04f      	b.n	8014778 <phhalHw_Pn5180_Int_Wait+0x23c>
    phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80146de:	2300      	movs	r3, #0
 80146e0:	2201      	movs	r2, #1
 80146e2:	2100      	movs	r1, #0
 80146e4:	f007 f90e 	bl	801b904 <phOsal_EventClear>
    /* Enable IRQ source */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_TIMER0_IRQ_SET_ENABLE_MASK));
 80146e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80146ec:	2101      	movs	r1, #1
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f7fd ff6c 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 80146f4:	4603      	mov	r3, r0
 80146f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80146f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d001      	beq.n	8014702 <phhalHw_Pn5180_Int_Wait+0x1c6>
 80146fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014700:	e03a      	b.n	8014778 <phhalHw_Pn5180_Int_Wait+0x23c>
    /*Start the timer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8014702:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014704:	f107 031c 	add.w	r3, r7, #28
 8014708:	4619      	mov	r1, r3
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7fe f8c0 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8014710:	4603      	mov	r3, r0
 8014712:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8014714:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014716:	2b00      	cmp	r3, #0
 8014718:	d001      	beq.n	801471e <phhalHw_Pn5180_Int_Wait+0x1e2>
 801471a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801471c:	e02c      	b.n	8014778 <phhalHw_Pn5180_Int_Wait+0x23c>

    uint32_t irqEnable;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_ENABLE, &irqEnable);
 801471e:	f107 0314 	add.w	r3, r7, #20
 8014722:	461a      	mov	r2, r3
 8014724:	2101      	movs	r1, #1
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	f7fe f964 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>

    uint32_t irqStatus;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &irqStatus);
 801472c:	f107 0310 	add.w	r3, r7, #16
 8014730:	461a      	mov	r2, r3
 8014732:	2102      	movs	r1, #2
 8014734:	68f8      	ldr	r0, [r7, #12]
 8014736:	f7fe f95d 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>

    /* Wait for the timer0 to expire. */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_WaitIrq(pDataParams,PH_ON,PH_OFF,IRQ_STATUS_TIMER0_IRQ_MASK,&dwIrqStatusReg));
 801473a:	f107 0318 	add.w	r3, r7, #24
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014744:	2200      	movs	r2, #0
 8014746:	2101      	movs	r1, #1
 8014748:	68f8      	ldr	r0, [r7, #12]
 801474a:	f000 fbd5 	bl	8014ef8 <phhalHw_Pn5180_WaitIrq>
 801474e:	4603      	mov	r3, r0
 8014750:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8014752:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <phhalHw_Pn5180_Int_Wait+0x220>
 8014758:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801475a:	e00d      	b.n	8014778 <phhalHw_Pn5180_Int_Wait+0x23c>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams,TIMER0_CONFIG, (uint32_t)(~TIMER0_CONFIG_T0_ENABLE_MASK)));
 801475c:	f06f 0201 	mvn.w	r2, #1
 8014760:	210e      	movs	r1, #14
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f7fe f81e 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8014768:	4603      	mov	r3, r0
 801476a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801476c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801476e:	2b00      	cmp	r3, #0
 8014770:	d001      	beq.n	8014776 <phhalHw_Pn5180_Int_Wait+0x23a>
 8014772:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014774:	e000      	b.n	8014778 <phhalHw_Pn5180_Int_Wait+0x23c>
    return PH_ERR_SUCCESS;
 8014776:	2300      	movs	r3, #0
}
 8014778:	4618      	mov	r0, r3
 801477a:	3748      	adds	r7, #72	@ 0x48
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 8014780:	b480      	push	{r7}
 8014782:	b087      	sub	sp, #28
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	460b      	mov	r3, r1
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8014794:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801479c:	3b01      	subs	r3, #1
 801479e:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80147a6:	3b01      	subs	r3, #1
 80147a8:	2b09      	cmp	r3, #9
 80147aa:	f200 8086 	bhi.w	80148ba <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 80147ae:	a201      	add	r2, pc, #4	@ (adr r2, 80147b4 <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 80147b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b4:	080147dd 	.word	0x080147dd
 80147b8:	080147dd 	.word	0x080147dd
 80147bc:	0801481b 	.word	0x0801481b
 80147c0:	08014833 	.word	0x08014833
 80147c4:	08014849 	.word	0x08014849
 80147c8:	08014857 	.word	0x08014857
 80147cc:	080148bb 	.word	0x080148bb
 80147d0:	080148bb 	.word	0x080148bb
 80147d4:	080148bb 	.word	0x080148bb
 80147d8:	0801481b 	.word	0x0801481b
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80147dc:	7d7a      	ldrb	r2, [r7, #21]
 80147de:	8afb      	ldrh	r3, [r7, #22]
 80147e0:	493b      	ldr	r1, [pc, #236]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80147e2:	0092      	lsls	r2, r2, #2
 80147e4:	4413      	add	r3, r2
 80147e6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 80147ee:	7afb      	ldrb	r3, [r7, #11]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d005      	beq.n	8014800 <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	881b      	ldrh	r3, [r3, #0]
 80147f8:	330f      	adds	r3, #15
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014806:	2b01      	cmp	r3, #1
 8014808:	d15a      	bne.n	80148c0 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014812:	b29a      	uxth	r2, r3
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	801a      	strh	r2, [r3, #0]
        }
        break;
 8014818:	e052      	b.n	80148c0 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 801481a:	2302      	movs	r3, #2
 801481c:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 801481e:	7d7a      	ldrb	r2, [r7, #21]
 8014820:	8afb      	ldrh	r3, [r7, #22]
 8014822:	492b      	ldr	r1, [pc, #172]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8014824:	0092      	lsls	r2, r2, #2
 8014826:	4413      	add	r3, r2
 8014828:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	801a      	strh	r2, [r3, #0]
        break;
 8014830:	e047      	b.n	80148c2 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 8014832:	7d7a      	ldrb	r2, [r7, #21]
 8014834:	8afb      	ldrh	r3, [r7, #22]
 8014836:	3b0c      	subs	r3, #12
 8014838:	4925      	ldr	r1, [pc, #148]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801483a:	0092      	lsls	r2, r2, #2
 801483c:	4413      	add	r3, r2
 801483e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	801a      	strh	r2, [r3, #0]
        break;
 8014846:	e03c      	b.n	80148c2 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8014848:	7d7b      	ldrb	r3, [r7, #21]
 801484a:	4a21      	ldr	r2, [pc, #132]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801484c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	801a      	strh	r2, [r3, #0]
        break;
 8014854:	e035      	b.n	80148c2 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 8014856:	8afb      	ldrh	r3, [r7, #22]
 8014858:	3b13      	subs	r3, #19
 801485a:	2b03      	cmp	r3, #3
 801485c:	d829      	bhi.n	80148b2 <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 801485e:	a201      	add	r2, pc, #4	@ (adr r2, 8014864 <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 8014860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014864:	08014875 	.word	0x08014875
 8014868:	08014893 	.word	0x08014893
 801486c:	08014883 	.word	0x08014883
 8014870:	080148a3 	.word	0x080148a3
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8014874:	7d7b      	ldrb	r3, [r7, #21]
 8014876:	4a16      	ldr	r2, [pc, #88]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8014878:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	801a      	strh	r2, [r3, #0]
                break;
 8014880:	e01a      	b.n	80148b8 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 8014882:	7d7b      	ldrb	r3, [r7, #21]
 8014884:	4a12      	ldr	r2, [pc, #72]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8014886:	00db      	lsls	r3, r3, #3
 8014888:	4413      	add	r3, r2
 801488a:	885a      	ldrh	r2, [r3, #2]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	801a      	strh	r2, [r3, #0]
                break;
 8014890:	e012      	b.n	80148b8 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 8014892:	7d7b      	ldrb	r3, [r7, #21]
 8014894:	4a0e      	ldr	r2, [pc, #56]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8014896:	00db      	lsls	r3, r3, #3
 8014898:	4413      	add	r3, r2
 801489a:	889a      	ldrh	r2, [r3, #4]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	801a      	strh	r2, [r3, #0]
                break;
 80148a0:	e00a      	b.n	80148b8 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 80148a2:	7d7b      	ldrb	r3, [r7, #21]
 80148a4:	4a0a      	ldr	r2, [pc, #40]	@ (80148d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80148a6:	00db      	lsls	r3, r3, #3
 80148a8:	4413      	add	r3, r2
 80148aa:	88da      	ldrh	r2, [r3, #6]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	801a      	strh	r2, [r3, #0]
                break;
 80148b0:	e002      	b.n	80148b8 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80148b2:	f240 237f 	movw	r3, #639	@ 0x27f
 80148b6:	e005      	b.n	80148c4 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 80148b8:	e003      	b.n	80148c2 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80148ba:	f240 237f 	movw	r3, #639	@ 0x27f
 80148be:	e001      	b.n	80148c4 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 80148c0:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80148c2:	2300      	movs	r3, #0
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	371c      	adds	r7, #28
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr
 80148d0:	08025ab0 	.word	0x08025ab0

080148d4 <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 80148d4:	b5b0      	push	{r4, r5, r7, lr}
 80148d6:	b094      	sub	sp, #80	@ 0x50
 80148d8:	af04      	add	r7, sp, #16
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	60b9      	str	r1, [r7, #8]
 80148de:	607a      	str	r2, [r7, #4]
 80148e0:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80148e2:	2300      	movs	r3, #0
 80148e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80148e6:	2300      	movs	r3, #0
 80148e8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80148ea:	2300      	movs	r3, #0
 80148ec:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 80148ee:	2300      	movs	r3, #0
 80148f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 80148f2:	2300      	movs	r3, #0
 80148f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 80148f6:	2300      	movs	r3, #0
 80148f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 80148fc:	2300      	movs	r3, #0
 80148fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8014902:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8014906:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	2200      	movs	r2, #0
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f000 faf1 	bl	8014ef8 <phhalHw_Pn5180_WaitIrq>
 8014916:	4603      	mov	r3, r0
 8014918:	867b      	strh	r3, [r7, #50]	@ 0x32
 801491a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801491c:	2b00      	cmp	r3, #0
 801491e:	d001      	beq.n	8014924 <phhalHw_Pn5180_Receive_Int+0x50>
 8014920:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014922:	e233      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801492a:	2b01      	cmp	r3, #1
 801492c:	d10d      	bne.n	801494a <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 801492e:	f107 0318 	add.w	r3, r7, #24
 8014932:	461a      	mov	r2, r3
 8014934:	211d      	movs	r1, #29
 8014936:	68f8      	ldr	r0, [r7, #12]
 8014938:	f7fe f85c 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 801493c:	4603      	mov	r3, r0
 801493e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8014940:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014942:	2b00      	cmp	r3, #0
 8014944:	d001      	beq.n	801494a <phhalHw_Pn5180_Receive_Int+0x76>
 8014946:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014948:	e220      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 801494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801494c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014950:	2b00      	cmp	r3, #0
 8014952:	d002      	beq.n	801495a <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 8014954:	237f      	movs	r3, #127	@ 0x7f
 8014956:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014958:	e089      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014960:	2b01      	cmp	r3, #1
 8014962:	d10f      	bne.n	8014984 <phhalHw_Pn5180_Receive_Int+0xb0>
 8014964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00a      	beq.n	8014984 <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014970:	f003 0301 	and.w	r3, r3, #1
 8014974:	2b00      	cmp	r3, #0
 8014976:	d002      	beq.n	801497e <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 8014978:	2300      	movs	r3, #0
 801497a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801497c:	e077      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 801497e:	2301      	movs	r3, #1
 8014980:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8014982:	e074      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 8014984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801498a:	2b00      	cmp	r3, #0
 801498c:	d02e      	beq.n	80149ec <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014994:	2b00      	cmp	r3, #0
 8014996:	d009      	beq.n	80149ac <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f7fa ff6f 	bl	800f87c <phhalHw_Pn5180_FieldReset>
 801499e:	4603      	mov	r3, r0
 80149a0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80149a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d001      	beq.n	80149ac <phhalHw_Pn5180_Receive_Int+0xd8>
 80149a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80149aa:	e1ef      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 80149ac:	2301      	movs	r3, #1
 80149ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d159      	bne.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d155      	bne.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d007      	beq.n	80149dc <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 80149cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d14b      	bne.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 80149d6:	237f      	movs	r3, #127	@ 0x7f
 80149d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80149da:	e048      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d043      	beq.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 80149e6:	2310      	movs	r3, #16
 80149e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80149ea:	e040      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d123      	bne.n	8014a3e <phhalHw_Pn5180_Receive_Int+0x16a>
 80149f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d01e      	beq.n	8014a3e <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	0b5b      	lsrs	r3, r3, #13
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	f003 0307 	and.w	r3, r3, #7
 8014a0a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d009      	beq.n	8014a2a <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 8014a16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014a1a:	2b04      	cmp	r3, #4
 8014a1c:	d002      	beq.n	8014a24 <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 8014a1e:	2310      	movs	r3, #16
 8014a20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8014a22:	e024      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 8014a24:	2344      	movs	r3, #68	@ 0x44
 8014a26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8014a28:	e021      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 8014a2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014a2e:	2b04      	cmp	r3, #4
 8014a30:	d102      	bne.n	8014a38 <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 8014a32:	2301      	movs	r3, #1
 8014a34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8014a36:	e01a      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 8014a38:	2310      	movs	r3, #16
 8014a3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8014a3c:	e017      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8014a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d012      	beq.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d106      	bne.n	8014a60 <phhalHw_Pn5180_Receive_Int+0x18c>
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d002      	beq.n	8014a60 <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 8014a5a:	2310      	movs	r3, #16
 8014a5c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014a5e:	e006      	b.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 8014a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a62:	f003 0301 	and.w	r3, r3, #1
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d101      	bne.n	8014a6e <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8014a6a:	2302      	movs	r3, #2
 8014a6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 8014a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a70:	f003 0301 	and.w	r3, r3, #1
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f000 8174 	beq.w	8014d62 <phhalHw_Pn5180_Receive_Int+0x48e>
 8014a7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f040 8170 	bne.w	8014d62 <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2200      	movs	r2, #0
 8014a86:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8014a88:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8014a8c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014a90:	f107 0320 	add.w	r3, r7, #32
 8014a94:	9300      	str	r3, [sp, #0]
 8014a96:	460b      	mov	r3, r1
 8014a98:	2101      	movs	r1, #1
 8014a9a:	68f8      	ldr	r0, [r7, #12]
 8014a9c:	f7fe fda3 	bl	80135e6 <phhalHw_Pn5180_GetRxBuffer>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	867b      	strh	r3, [r7, #50]	@ 0x32
 8014aa4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <phhalHw_Pn5180_Receive_Int+0x1da>
 8014aaa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014aac:	e16e      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d103      	bne.n	8014ac0 <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 8014ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 8014ac0:	f107 031c 	add.w	r3, r7, #28
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	2113      	movs	r1, #19
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f7fa f983 	bl	800edd4 <phhalHw_Pn5180_ReadRegister>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	867b      	strh	r3, [r7, #50]	@ 0x32
 8014ad2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <phhalHw_Pn5180_Receive_Int+0x208>
 8014ad8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014ada:	e157      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d110      	bne.n	8014b08 <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014aee:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	f003 030f 	and.w	r3, r3, #15
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	015b      	lsls	r3, r3, #5
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	4313      	orrs	r3, r2
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014b06:	e005      	b.n	8014b14 <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 8014b08:	69fb      	ldr	r3, [r7, #28]
 8014b0a:	b29b      	uxth	r3, r3
 8014b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b10:	b29b      	uxth	r3, r3
 8014b12:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 8014b14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d00c      	beq.n	8014b34 <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 8014b1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	6879      	ldr	r1, [r7, #4]
 8014b20:	68f8      	ldr	r0, [r7, #12]
 8014b22:	f7fe f977 	bl	8012e14 <phhalHw_Pn5180_Instr_RetrieveRxData>
 8014b26:	4603      	mov	r3, r0
 8014b28:	867b      	strh	r3, [r7, #50]	@ 0x32
 8014b2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d001      	beq.n	8014b34 <phhalHw_Pn5180_Receive_Int+0x260>
 8014b30:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014b32:	e12b      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8014b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 8014b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b3e:	0b5b      	lsrs	r3, r3, #13
 8014b40:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 8014b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b44:	b29a      	uxth	r2, r3
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 8014b4a:	69fb      	ldr	r3, [r7, #28]
 8014b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d044      	beq.n	8014bde <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 8014b54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d107      	bne.n	8014b6a <phhalHw_Pn5180_Receive_Int+0x296>
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d102      	bne.n	8014b6a <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 8014b64:	2301      	movs	r3, #1
 8014b66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014b68:	e051      	b.n	8014c0e <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 8014b6a:	2303      	movs	r3, #3
 8014b6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8014b74:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 8014b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b78:	0cdb      	lsrs	r3, r3, #19
 8014b7a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 8014b7c:	8c3a      	ldrh	r2, [r7, #32]
 8014b7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b80:	4413      	add	r3, r2
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 8014b86:	8c3b      	ldrh	r3, [r7, #32]
 8014b88:	461a      	mov	r2, r3
 8014b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b8c:	4293      	cmp	r3, r2
 8014b8e:	d904      	bls.n	8014b9a <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 8014b90:	8c3b      	ldrh	r3, [r7, #32]
 8014b92:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 8014b94:	2304      	movs	r3, #4
 8014b96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014b98:	e004      	b.n	8014ba4 <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 8014b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	08db      	lsrs	r3, r3, #3
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 8014ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ba6:	2b07      	cmp	r3, #7
 8014ba8:	d904      	bls.n	8014bb4 <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 8014baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bac:	f003 0307 	and.w	r3, r3, #7
 8014bb0:	61fb      	str	r3, [r7, #28]
 8014bb2:	e001      	b.n	8014bb8 <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bb6:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d00a      	beq.n	8014bd4 <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 8014bbe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014bc0:	8c3b      	ldrh	r3, [r7, #32]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d102      	bne.n	8014bcc <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 8014bc6:	2304      	movs	r3, #4
 8014bc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014bca:	e003      	b.n	8014bd4 <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 8014bcc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014bce:	3301      	adds	r3, #1
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014bdc:	e017      	b.n	8014c0e <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d002      	beq.n	8014bee <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8014be8:	2302      	movs	r3, #2
 8014bea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014bec:	e00f      	b.n	8014c0e <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d002      	beq.n	8014bfe <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 8014bf8:	2306      	movs	r3, #6
 8014bfa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8014bfc:	e007      	b.n	8014c0e <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 8014bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d004      	beq.n	8014c0e <phhalHw_Pn5180_Receive_Int+0x33a>
 8014c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c06:	2b08      	cmp	r3, #8
 8014c08:	d001      	beq.n	8014c0e <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 8014c0a:	2373      	movs	r3, #115	@ 0x73
 8014c0c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d117      	bne.n	8014c48 <phhalHw_Pn5180_Receive_Int+0x374>
 8014c18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d014      	beq.n	8014c48 <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	2bf0      	cmp	r3, #240	@ 0xf0
 8014c26:	d002      	beq.n	8014c2e <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 8014c28:	f240 2301 	movw	r3, #513	@ 0x201
 8014c2c:	e0ae      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 8014c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c30:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8014c34:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	1c5a      	adds	r2, r3, #1
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 8014c40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c42:	3b01      	subs	r3, #1
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	8bda      	ldrh	r2, [r3, #30]
 8014c4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c4e:	4413      	add	r3, r2
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d005      	beq.n	8014c68 <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	695a      	ldr	r2, [r3, #20]
 8014c60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c62:	441a      	add	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d003      	beq.n	8014c76 <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	8b5a      	ldrh	r2, [r3, #26]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014c7c:	2b01      	cmp	r3, #1
 8014c7e:	d169      	bne.n	8014d54 <phhalHw_Pn5180_Receive_Int+0x480>
 8014c80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d003      	beq.n	8014c8e <phhalHw_Pn5180_Receive_Int+0x3ba>
 8014c86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014c88:	b2db      	uxtb	r3, r3
 8014c8a:	2b73      	cmp	r3, #115	@ 0x73
 8014c8c:	d162      	bne.n	8014d54 <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d025      	beq.n	8014ce0 <phhalHw_Pn5180_Receive_Int+0x40c>
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d022      	beq.n	8014ce0 <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6818      	ldr	r0, [r3, #0]
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 8014ca6:	b2dd      	uxtb	r5, r3
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	6812      	ldr	r2, [r2, #0]
 8014cb0:	f107 0117 	add.w	r1, r7, #23
 8014cb4:	9103      	str	r1, [sp, #12]
 8014cb6:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8014cba:	9102      	str	r1, [sp, #8]
 8014cbc:	9201      	str	r2, [sp, #4]
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	462b      	mov	r3, r5
 8014cc2:	4622      	mov	r2, r4
 8014cc4:	4601      	mov	r1, r0
 8014cc6:	2001      	movs	r0, #1
 8014cc8:	f7f3 ff10 	bl	8008aec <phTools_DecodeParity>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8014cd0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d003      	beq.n	8014ce0 <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 8014cd8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8014cde:	e039      	b.n	8014d54 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 8014ce0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ce2:	2b03      	cmp	r3, #3
 8014ce4:	d933      	bls.n	8014d4e <phhalHw_Pn5180_Receive_Int+0x47a>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d030      	beq.n	8014d4e <phhalHw_Pn5180_Receive_Int+0x47a>
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d02d      	beq.n	8014d4e <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014cf8:	3a02      	subs	r2, #2
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	f107 0214 	add.w	r2, r7, #20
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f4 f872 	bl	8008dea <phTools_ComputeCrc_B>
 8014d06:	4603      	mov	r3, r0
 8014d08:	867b      	strh	r3, [r7, #50]	@ 0x32
 8014d0a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d001      	beq.n	8014d14 <phhalHw_Pn5180_Receive_Int+0x440>
 8014d10:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014d12:	e03b      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8014d14:	7d3a      	ldrb	r2, [r7, #20]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6819      	ldr	r1, [r3, #0]
 8014d1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d1c:	3b02      	subs	r3, #2
 8014d1e:	440b      	add	r3, r1
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d108      	bne.n	8014d38 <phhalHw_Pn5180_Receive_Int+0x464>
 8014d26:	7d7a      	ldrb	r2, [r7, #21]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6819      	ldr	r1, [r3, #0]
 8014d2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d2e:	3b01      	subs	r3, #1
 8014d30:	440b      	add	r3, r1
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d002      	beq.n	8014d3e <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 8014d38:	2302      	movs	r3, #2
 8014d3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8014d3c:	e00a      	b.n	8014d54 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 8014d3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d40:	3b02      	subs	r3, #2
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8014d4c:	e002      	b.n	8014d54 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 8014d4e:	2306      	movs	r3, #6
 8014d50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 8014d52:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8014d54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d5a:	d907      	bls.n	8014d6c <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 8014d5c:	2304      	movs	r3, #4
 8014d5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8014d60:	e004      	b.n	8014d6c <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 8014d62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d101      	bne.n	8014d6c <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 8014d68:	237f      	movs	r3, #127	@ 0x7f
 8014d6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8014d6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00b      	beq.n	8014d8a <phhalHw_Pn5180_Receive_Int+0x4b6>
 8014d72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014d74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d106      	bne.n	8014d8a <phhalHw_Pn5180_Receive_Int+0x4b6>
 8014d7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	e000      	b.n	8014d8c <phhalHw_Pn5180_Receive_Int+0x4b8>
 8014d8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3740      	adds	r7, #64	@ 0x40
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bdb0      	pop	{r4, r5, r7, pc}

08014d94 <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b084      	sub	sp, #16
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 8014d9c:	f06f 0207 	mvn.w	r2, #7
 8014da0:	2100      	movs	r1, #0
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7fd fcfe 	bl	80127a4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8014da8:	4603      	mov	r3, r0
 8014daa:	81fb      	strh	r3, [r7, #14]
 8014dac:	89fb      	ldrh	r3, [r7, #14]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d001      	beq.n	8014db6 <phhalHw_Pn5180_Int_IdleCommand+0x22>
 8014db2:	89fb      	ldrh	r3, [r7, #14]
 8014db4:	e00c      	b.n	8014dd0 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 8014db6:	2204      	movs	r2, #4
 8014db8:	2103      	movs	r1, #3
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7fd fc06 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	81fb      	strh	r3, [r7, #14]
 8014dc4:	89fb      	ldrh	r3, [r7, #14]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d001      	beq.n	8014dce <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 8014dca:	89fb      	ldrh	r3, [r7, #14]
 8014dcc:	e000      	b.n	8014dd0 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 8014dce:	2300      	movs	r3, #0
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3710      	adds	r7, #16
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b088      	sub	sp, #32
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	460b      	mov	r3, r1
 8014de2:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 8014de4:	2300      	movs	r3, #0
 8014de6:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 8014de8:	f06f 0307 	mvn.w	r3, #7
 8014dec:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8014dee:	8bfb      	ldrh	r3, [r7, #30]
 8014df0:	1c5a      	adds	r2, r3, #1
 8014df2:	83fa      	strh	r2, [r7, #30]
 8014df4:	3320      	adds	r3, #32
 8014df6:	443b      	add	r3, r7
 8014df8:	2200      	movs	r2, #0
 8014dfa:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8014dfe:	8bfb      	ldrh	r3, [r7, #30]
 8014e00:	1c5a      	adds	r2, r3, #1
 8014e02:	83fa      	strh	r2, [r7, #30]
 8014e04:	3320      	adds	r3, #32
 8014e06:	443b      	add	r3, r7
 8014e08:	2203      	movs	r2, #3
 8014e0a:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014e0e:	8bfb      	ldrh	r3, [r7, #30]
 8014e10:	1c5a      	adds	r2, r3, #1
 8014e12:	83fa      	strh	r2, [r7, #30]
 8014e14:	69ba      	ldr	r2, [r7, #24]
 8014e16:	b2d2      	uxtb	r2, r2
 8014e18:	3320      	adds	r3, #32
 8014e1a:	443b      	add	r3, r7
 8014e1c:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	0a1a      	lsrs	r2, r3, #8
 8014e24:	8bfb      	ldrh	r3, [r7, #30]
 8014e26:	1c59      	adds	r1, r3, #1
 8014e28:	83f9      	strh	r1, [r7, #30]
 8014e2a:	b2d2      	uxtb	r2, r2
 8014e2c:	3320      	adds	r3, #32
 8014e2e:	443b      	add	r3, r7
 8014e30:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8014e34:	69bb      	ldr	r3, [r7, #24]
 8014e36:	0c1a      	lsrs	r2, r3, #16
 8014e38:	8bfb      	ldrh	r3, [r7, #30]
 8014e3a:	1c59      	adds	r1, r3, #1
 8014e3c:	83f9      	strh	r1, [r7, #30]
 8014e3e:	b2d2      	uxtb	r2, r2
 8014e40:	3320      	adds	r3, #32
 8014e42:	443b      	add	r3, r7
 8014e44:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	0e1a      	lsrs	r2, r3, #24
 8014e4c:	8bfb      	ldrh	r3, [r7, #30]
 8014e4e:	1c59      	adds	r1, r3, #1
 8014e50:	83f9      	strh	r1, [r7, #30]
 8014e52:	b2d2      	uxtb	r2, r2
 8014e54:	3320      	adds	r3, #32
 8014e56:	443b      	add	r3, r7
 8014e58:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 8014e5c:	78fb      	ldrb	r3, [r7, #3]
 8014e5e:	f003 0307 	and.w	r3, r3, #7
 8014e62:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8014e64:	8bfb      	ldrh	r3, [r7, #30]
 8014e66:	1c5a      	adds	r2, r3, #1
 8014e68:	83fa      	strh	r2, [r7, #30]
 8014e6a:	3320      	adds	r3, #32
 8014e6c:	443b      	add	r3, r7
 8014e6e:	2200      	movs	r2, #0
 8014e70:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8014e74:	8bfb      	ldrh	r3, [r7, #30]
 8014e76:	1c5a      	adds	r2, r3, #1
 8014e78:	83fa      	strh	r2, [r7, #30]
 8014e7a:	3320      	adds	r3, #32
 8014e7c:	443b      	add	r3, r7
 8014e7e:	2202      	movs	r2, #2
 8014e80:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014e84:	8bfb      	ldrh	r3, [r7, #30]
 8014e86:	1c5a      	adds	r2, r3, #1
 8014e88:	83fa      	strh	r2, [r7, #30]
 8014e8a:	69ba      	ldr	r2, [r7, #24]
 8014e8c:	b2d2      	uxtb	r2, r2
 8014e8e:	3320      	adds	r3, #32
 8014e90:	443b      	add	r3, r7
 8014e92:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	0a1a      	lsrs	r2, r3, #8
 8014e9a:	8bfb      	ldrh	r3, [r7, #30]
 8014e9c:	1c59      	adds	r1, r3, #1
 8014e9e:	83f9      	strh	r1, [r7, #30]
 8014ea0:	b2d2      	uxtb	r2, r2
 8014ea2:	3320      	adds	r3, #32
 8014ea4:	443b      	add	r3, r7
 8014ea6:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	0c1a      	lsrs	r2, r3, #16
 8014eae:	8bfb      	ldrh	r3, [r7, #30]
 8014eb0:	1c59      	adds	r1, r3, #1
 8014eb2:	83f9      	strh	r1, [r7, #30]
 8014eb4:	b2d2      	uxtb	r2, r2
 8014eb6:	3320      	adds	r3, #32
 8014eb8:	443b      	add	r3, r7
 8014eba:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014ebe:	69bb      	ldr	r3, [r7, #24]
 8014ec0:	0e1a      	lsrs	r2, r3, #24
 8014ec2:	8bfb      	ldrh	r3, [r7, #30]
 8014ec4:	1c59      	adds	r1, r3, #1
 8014ec6:	83f9      	strh	r1, [r7, #30]
 8014ec8:	b2d2      	uxtb	r2, r2
 8014eca:	3320      	adds	r3, #32
 8014ecc:	443b      	add	r3, r7
 8014ece:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8014ed2:	8bfa      	ldrh	r2, [r7, #30]
 8014ed4:	f107 0308 	add.w	r3, r7, #8
 8014ed8:	4619      	mov	r1, r3
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f7fd fcd8 	bl	8012890 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	82fb      	strh	r3, [r7, #22]
 8014ee4:	8afb      	ldrh	r3, [r7, #22]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d001      	beq.n	8014eee <phhalHw_Pn5180_Int_LoadCommand+0x116>
 8014eea:	8afb      	ldrh	r3, [r7, #22]
 8014eec:	e000      	b.n	8014ef0 <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 8014eee:	2300      	movs	r3, #0

}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3720      	adds	r7, #32
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}

08014ef8 <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b088      	sub	sp, #32
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	607b      	str	r3, [r7, #4]
 8014f02:	460b      	mov	r3, r1
 8014f04:	72fb      	strb	r3, [r7, #11]
 8014f06:	4613      	mov	r3, r2
 8014f08:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d102      	bne.n	8014f16 <phhalHw_Pn5180_WaitIrq+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8014f10:	f240 237f 	movw	r3, #639	@ 0x27f
 8014f14:	e04a      	b.n	8014fac <phhalHw_Pn5180_WaitIrq+0xb4>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8014f1c:	2b01      	cmp	r3, #1
 8014f1e:	d103      	bne.n	8014f28 <phhalHw_Pn5180_WaitIrq+0x30>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 8014f20:	7afb      	ldrb	r3, [r7, #11]
 8014f22:	f023 0301 	bic.w	r3, r3, #1
 8014f26:	72fb      	strb	r3, [r7, #11]
        do
        {
#ifndef _WIN32
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8014f2e:	2b01      	cmp	r3, #1
 8014f30:	d114      	bne.n	8014f5c <phhalHw_Pn5180_WaitIrq+0x64>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d106      	bne.n	8014f4a <phhalHw_Pn5180_WaitIrq+0x52>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	2101      	movs	r1, #1
 8014f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014f44:	f006 fab8 	bl	801b4b8 <phDriver_TimerStart>
 8014f48:	e008      	b.n	8014f5c <phhalHw_Pn5180_WaitIrq+0x64>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8014f50:	2200      	movs	r2, #0
 8014f52:	4619      	mov	r1, r3
 8014f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014f58:	f006 faae 	bl	801b4b8 <phDriver_TimerStart>
                }
            }
#endif
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8014f5c:	f107 0318 	add.w	r3, r7, #24
 8014f60:	461a      	mov	r2, r3
 8014f62:	2102      	movs	r1, #2
 8014f64:	68f8      	ldr	r0, [r7, #12]
 8014f66:	f7fd fd45 	bl	80129f4 <phhalHw_Pn5180_Instr_ReadRegister>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	83fb      	strh	r3, [r7, #30]
 8014f6e:	8bfb      	ldrh	r3, [r7, #30]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d001      	beq.n	8014f78 <phhalHw_Pn5180_WaitIrq+0x80>
 8014f74:	8bfb      	ldrh	r3, [r7, #30]
 8014f76:	e019      	b.n	8014fac <phhalHw_Pn5180_WaitIrq+0xb4>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 8014f78:	69ba      	ldr	r2, [r7, #24]
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d0d2      	beq.n	8014f28 <phhalHw_Pn5180_WaitIrq+0x30>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8014f82:	69ba      	ldr	r2, [r7, #24]
 8014f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f86:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8014f88:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	db0c      	blt.n	8014faa <phhalHw_Pn5180_WaitIrq+0xb2>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	461a      	mov	r2, r3
 8014f94:	2103      	movs	r1, #3
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f7fd fb18 	bl	80125cc <phhalHw_Pn5180_Instr_WriteRegister>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	83fb      	strh	r3, [r7, #30]
 8014fa0:	8bfb      	ldrh	r3, [r7, #30]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d001      	beq.n	8014faa <phhalHw_Pn5180_WaitIrq+0xb2>
 8014fa6:	8bfb      	ldrh	r3, [r7, #30]
 8014fa8:	e000      	b.n	8014fac <phhalHw_Pn5180_WaitIrq+0xb4>
        }
    }

    return PH_ERR_SUCCESS;
 8014faa:	2300      	movs	r3, #0

}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3720      	adds	r7, #32
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b085      	sub	sp, #20
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 8014fc2:	897b      	ldrh	r3, [r7, #10]
 8014fc4:	2b20      	cmp	r3, #32
 8014fc6:	d002      	beq.n	8014fce <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 8014fc8:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8014fcc:	e01d      	b.n	801500a <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d101      	bne.n	8014fd8 <phpalFelica_Sw_Init+0x24>
 8014fd4:	2321      	movs	r3, #33	@ 0x21
 8014fd6:	e018      	b.n	801500a <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d101      	bne.n	8014fe2 <phpalFelica_Sw_Init+0x2e>
 8014fde:	2321      	movs	r3, #33	@ 0x21
 8014fe0:	e013      	b.n	801500a <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f640 0201 	movw	r2, #2049	@ 0x801
 8014fe8:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2200      	movs	r2, #0
 8015000:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	2200      	movs	r2, #0
 8015006:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 8015008:	2300      	movs	r3, #0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3714      	adds	r7, #20
 801500e:	46bd      	mov	sp, r7
 8015010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015014:	4770      	bx	lr
	...

08015018 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b08c      	sub	sp, #48	@ 0x30
 801501c:	af02      	add	r7, sp, #8
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	603b      	str	r3, [r7, #0]
 8015024:	4613      	mov	r3, r2
 8015026:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 8015028:	2300      	movs	r3, #0
 801502a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 801502c:	2300      	movs	r3, #0
 801502e:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8015030:	2300      	movs	r3, #0
 8015032:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	3308      	adds	r3, #8
 8015038:	2212      	movs	r2, #18
 801503a:	2100      	movs	r1, #0
 801503c:	4618      	mov	r0, r3
 801503e:	f00c fdd9 	bl	8021bf4 <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2200      	movs	r2, #0
 8015046:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2200      	movs	r2, #0
 801504c:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 801504e:	79fb      	ldrb	r3, [r7, #7]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d00e      	beq.n	8015072 <phpalFelica_Sw_ReqC+0x5a>
 8015054:	79fb      	ldrb	r3, [r7, #7]
 8015056:	2b01      	cmp	r3, #1
 8015058:	d00b      	beq.n	8015072 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 801505a:	79fb      	ldrb	r3, [r7, #7]
 801505c:	2b03      	cmp	r3, #3
 801505e:	d008      	beq.n	8015072 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8015060:	79fb      	ldrb	r3, [r7, #7]
 8015062:	2b07      	cmp	r3, #7
 8015064:	d005      	beq.n	8015072 <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8015066:	79fb      	ldrb	r3, [r7, #7]
 8015068:	2b0f      	cmp	r3, #15
 801506a:	d002      	beq.n	8015072 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 801506c:	f640 0321 	movw	r3, #2081	@ 0x821
 8015070:	e0e2      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	f107 0210 	add.w	r2, r7, #16
 801507a:	2121      	movs	r1, #33	@ 0x21
 801507c:	4618      	mov	r0, r3
 801507e:	f7fc f885 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8015082:	4603      	mov	r3, r0
 8015084:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015086:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015088:	2b00      	cmp	r3, #0
 801508a:	d001      	beq.n	8015090 <phpalFelica_Sw_ReqC+0x78>
 801508c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801508e:	e0d3      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 8015090:	8a3b      	ldrh	r3, [r7, #16]
 8015092:	2b03      	cmp	r3, #3
 8015094:	d005      	beq.n	80150a2 <phpalFelica_Sw_ReqC+0x8a>
 8015096:	8a3b      	ldrh	r3, [r7, #16]
 8015098:	2b0a      	cmp	r3, #10
 801509a:	d002      	beq.n	80150a2 <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 801509c:	f640 0325 	movw	r3, #2085	@ 0x825
 80150a0:	e0ca      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 80150a2:	8a3b      	ldrh	r3, [r7, #16]
 80150a4:	2b03      	cmp	r3, #3
 80150a6:	d107      	bne.n	80150b8 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	7f9b      	ldrb	r3, [r3, #30]
 80150ac:	461a      	mov	r2, r3
 80150ae:	4b64      	ldr	r3, [pc, #400]	@ (8015240 <phpalFelica_Sw_ReqC+0x228>)
 80150b0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80150b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80150b6:	e006      	b.n	80150c6 <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	7f9b      	ldrb	r3, [r3, #30]
 80150bc:	4a60      	ldr	r2, [pc, #384]	@ (8015240 <phpalFelica_Sw_ReqC+0x228>)
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	4413      	add	r3, r2
 80150c2:	885b      	ldrh	r3, [r3, #2]
 80150c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 80150c6:	79fb      	ldrb	r3, [r7, #7]
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	461a      	mov	r2, r3
 80150cc:	0092      	lsls	r2, r2, #2
 80150ce:	441a      	add	r2, r3
 80150d0:	4611      	mov	r1, r2
 80150d2:	0109      	lsls	r1, r1, #4
 80150d4:	1a8a      	subs	r2, r1, r2
 80150d6:	0052      	lsls	r2, r2, #1
 80150d8:	4413      	add	r3, r2
 80150da:	00db      	lsls	r3, r3, #3
 80150dc:	b29b      	uxth	r3, r3
 80150de:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 80150e2:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 80150e4:	2306      	movs	r3, #6
 80150e6:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 80150e8:	2300      	movs	r3, #0
 80150ea:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	785b      	ldrb	r3, [r3, #1]
 80150f6:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	7f1b      	ldrb	r3, [r3, #28]
 80150fc:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 80150fe:	79fb      	ldrb	r3, [r7, #7]
 8015100:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015108:	210d      	movs	r1, #13
 801510a:	4618      	mov	r0, r3
 801510c:	f7fa fbf0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015110:	4603      	mov	r3, r0
 8015112:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015116:	2b00      	cmp	r3, #0
 8015118:	d001      	beq.n	801511e <phpalFelica_Sw_ReqC+0x106>
 801511a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801511c:	e08c      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 801511e:	79fb      	ldrb	r3, [r7, #7]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d00d      	beq.n	8015140 <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	2201      	movs	r2, #1
 801512a:	2153      	movs	r1, #83	@ 0x53
 801512c:	4618      	mov	r0, r3
 801512e:	f7fa fbdf 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015132:	4603      	mov	r3, r0
 8015134:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015136:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015138:	2b00      	cmp	r3, #0
 801513a:	d001      	beq.n	8015140 <phpalFelica_Sw_ReqC+0x128>
 801513c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801513e:	e07b      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	6858      	ldr	r0, [r3, #4]
 8015144:	f107 0218 	add.w	r2, r7, #24
 8015148:	f107 0312 	add.w	r3, r7, #18
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	f107 0314 	add.w	r3, r7, #20
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	2306      	movs	r3, #6
 8015156:	2100      	movs	r1, #0
 8015158:	f7fa f814 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801515c:	4603      	mov	r3, r0
 801515e:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8015160:	79fb      	ldrb	r3, [r7, #7]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d00d      	beq.n	8015182 <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	2200      	movs	r2, #0
 801516c:	2153      	movs	r1, #83	@ 0x53
 801516e:	4618      	mov	r0, r3
 8015170:	f7fa fbbe 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015174:	4603      	mov	r3, r0
 8015176:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015178:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801517a:	2b00      	cmp	r3, #0
 801517c:	d001      	beq.n	8015182 <phpalFelica_Sw_ReqC+0x16a>
 801517e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015180:	e05a      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8015182:	8c3b      	ldrh	r3, [r7, #32]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d001      	beq.n	801518c <phpalFelica_Sw_ReqC+0x174>
 8015188:	8c3b      	ldrh	r3, [r7, #32]
 801518a:	e055      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 801518c:	79fb      	ldrb	r3, [r7, #7]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d015      	beq.n	80151be <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 8015192:	8a7b      	ldrh	r3, [r7, #18]
 8015194:	f003 031f 	and.w	r3, r3, #31
 8015198:	b29b      	uxth	r3, r3
 801519a:	2b00      	cmp	r3, #0
 801519c:	d002      	beq.n	80151a4 <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 801519e:	f640 0306 	movw	r3, #2054	@ 0x806
 80151a2:	e049      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 80151a4:	697a      	ldr	r2, [r7, #20]
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 80151aa:	8a7a      	ldrh	r2, [r7, #18]
 80151ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151ae:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 80151b0:	8a7b      	ldrh	r3, [r7, #18]
 80151b2:	095b      	lsrs	r3, r3, #5
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	775a      	strb	r2, [r3, #29]
 80151bc:	e038      	b.n	8015230 <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 80151be:	8a7b      	ldrh	r3, [r7, #18]
 80151c0:	2b12      	cmp	r3, #18
 80151c2:	d002      	beq.n	80151ca <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 80151c4:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 80151c6:	2b14      	cmp	r3, #20
 80151c8:	d10a      	bne.n	80151e0 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	461a      	mov	r2, r3
 80151d0:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d104      	bne.n	80151e0 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	3301      	adds	r3, #1
 80151da:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d002      	beq.n	80151e6 <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80151e0:	f640 0306 	movw	r3, #2054	@ 0x806
 80151e4:	e028      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 80151e6:	8a7b      	ldrh	r3, [r7, #18]
 80151e8:	2b14      	cmp	r3, #20
 80151ea:	d106      	bne.n	80151fa <phpalFelica_Sw_ReqC+0x1e2>
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	7f1b      	ldrb	r3, [r3, #28]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d102      	bne.n	80151fa <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80151f4:	f640 0306 	movw	r3, #2054	@ 0x806
 80151f8:	e01e      	b.n	8015238 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f103 0008 	add.w	r0, r3, #8
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	1c99      	adds	r1, r3, #2
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	3b02      	subs	r3, #2
 801520a:	461a      	mov	r2, r3
 801520c:	f00c fd87 	bl	8021d1e <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2201      	movs	r2, #1
 8015214:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	1c9a      	adds	r2, r3, #2
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	3b02      	subs	r3, #2
 8015224:	b29a      	uxth	r2, r3
 8015226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015228:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2201      	movs	r2, #1
 801522e:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	2201      	movs	r2, #1
 8015234:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 8015236:	2300      	movs	r3, #0
}
 8015238:	4618      	mov	r0, r3
 801523a:	3728      	adds	r7, #40	@ 0x28
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	08025ae8 	.word	0x08025ae8

08015244 <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 8015244:	b480      	push	{r7}
 8015246:	b087      	sub	sp, #28
 8015248:	af00      	add	r7, sp, #0
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	607a      	str	r2, [r7, #4]
 801524e:	603b      	str	r3, [r7, #0]
 8015250:	460b      	mov	r3, r1
 8015252:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	7f5b      	ldrb	r3, [r3, #29]
 8015258:	7afa      	ldrb	r2, [r7, #11]
 801525a:	429a      	cmp	r2, r3
 801525c:	d802      	bhi.n	8015264 <phpalFelica_Sw_GetFrameInfo+0x20>
 801525e:	7afb      	ldrb	r3, [r7, #11]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d102      	bne.n	801526a <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8015264:	f640 0321 	movw	r3, #2081	@ 0x821
 8015268:	e06f      	b.n	801534a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	2200      	movs	r2, #0
 801526e:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8015270:	7afb      	ldrb	r3, [r7, #11]
 8015272:	3b01      	subs	r3, #1
 8015274:	b2db      	uxtb	r3, r3
 8015276:	015b      	lsls	r3, r3, #5
 8015278:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 801527a:	7dfb      	ldrb	r3, [r7, #23]
 801527c:	331c      	adds	r3, #28
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	4413      	add	r3, r2
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	2b12      	cmp	r3, #18
 8015286:	d006      	beq.n	8015296 <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8015288:	7dfb      	ldrb	r3, [r7, #23]
 801528a:	331c      	adds	r3, #28
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	4413      	add	r3, r2
 8015290:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8015292:	2b14      	cmp	r3, #20
 8015294:	d106      	bne.n	80152a4 <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 8015296:	7dfb      	ldrb	r3, [r7, #23]
 8015298:	3301      	adds	r3, #1
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	4413      	add	r3, r2
 801529e:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 80152a0:	2b01      	cmp	r3, #1
 80152a2:	d002      	beq.n	80152aa <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80152a4:	f640 0306 	movw	r3, #2054	@ 0x806
 80152a8:	e04f      	b.n	801534a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 80152aa:	7dfb      	ldrb	r3, [r7, #23]
 80152ac:	331c      	adds	r3, #28
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	4413      	add	r3, r2
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	2b14      	cmp	r3, #20
 80152b6:	d106      	bne.n	80152c6 <phpalFelica_Sw_GetFrameInfo+0x82>
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	7f1b      	ldrb	r3, [r3, #28]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d102      	bne.n	80152c6 <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80152c0:	f640 0306 	movw	r3, #2054	@ 0x806
 80152c4:	e041      	b.n	801534a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 80152c6:	7dfb      	ldrb	r3, [r7, #23]
 80152c8:	331d      	adds	r3, #29
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	4413      	add	r3, r2
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	f003 031f 	and.w	r3, r3, #31
 80152d4:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 80152d6:	7dbb      	ldrb	r3, [r7, #22]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d026      	beq.n	801532a <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 80152dc:	7dbb      	ldrb	r3, [r7, #22]
 80152de:	f003 0301 	and.w	r3, r3, #1
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d01d      	beq.n	8015322 <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 80152e6:	7dbb      	ldrb	r3, [r7, #22]
 80152e8:	f003 0304 	and.w	r3, r3, #4
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d003      	beq.n	80152f8 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	2206      	movs	r2, #6
 80152f4:	801a      	strh	r2, [r3, #0]
 80152f6:	e027      	b.n	8015348 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 80152f8:	7dbb      	ldrb	r3, [r7, #22]
 80152fa:	f003 0308 	and.w	r3, r3, #8
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d003      	beq.n	801530a <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	2203      	movs	r2, #3
 8015306:	801a      	strh	r2, [r3, #0]
 8015308:	e01e      	b.n	8015348 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 801530a:	7dbb      	ldrb	r3, [r7, #22]
 801530c:	f003 0302 	and.w	r3, r3, #2
 8015310:	2b00      	cmp	r3, #0
 8015312:	d003      	beq.n	801531c <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	2202      	movs	r2, #2
 8015318:	801a      	strh	r2, [r3, #0]
 801531a:	e015      	b.n	8015348 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 801531c:	f640 0306 	movw	r3, #2054	@ 0x806
 8015320:	e013      	b.n	801534a <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	220c      	movs	r2, #12
 8015326:	801a      	strh	r2, [r3, #0]
 8015328:	e00e      	b.n	8015348 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 801532a:	7dfb      	ldrb	r3, [r7, #23]
 801532c:	3302      	adds	r3, #2
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	441a      	add	r2, r3
 8015332:	6a3b      	ldr	r3, [r7, #32]
 8015334:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 8015336:	7dfb      	ldrb	r3, [r7, #23]
 8015338:	331c      	adds	r3, #28
 801533a:	687a      	ldr	r2, [r7, #4]
 801533c:	4413      	add	r3, r2
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	3b02      	subs	r3, #2
 8015342:	b2da      	uxtb	r2, r3
 8015344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015346:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8015348:	2300      	movs	r3, #0
}
 801534a:	4618      	mov	r0, r3
 801534c:	371c      	adds	r7, #28
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr

08015356 <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 8015356:	b580      	push	{r7, lr}
 8015358:	b082      	sub	sp, #8
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2201      	movs	r2, #1
 8015364:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	3308      	adds	r3, #8
 801536a:	2210      	movs	r2, #16
 801536c:	6839      	ldr	r1, [r7, #0]
 801536e:	4618      	mov	r0, r3
 8015370:	f00c fcd5 	bl	8021d1e <memcpy>

    return PH_ERR_SUCCESS;
 8015374:	2300      	movs	r3, #0

}
 8015376:	4618      	mov	r0, r3
 8015378:	3708      	adds	r7, #8
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 801537e:	b480      	push	{r7}
 8015380:	b083      	sub	sp, #12
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
 8015386:	460b      	mov	r3, r1
 8015388:	807b      	strh	r3, [r7, #2]
 801538a:	4613      	mov	r3, r2
 801538c:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 801538e:	887b      	ldrh	r3, [r7, #2]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d002      	beq.n	801539a <phpalFelica_Sw_SetConfig+0x1c>
 8015394:	2b02      	cmp	r3, #2
 8015396:	d00c      	beq.n	80153b2 <phpalFelica_Sw_SetConfig+0x34>
 8015398:	e01f      	b.n	80153da <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 801539a:	883b      	ldrh	r3, [r7, #0]
 801539c:	b2db      	uxtb	r3, r3
 801539e:	2b02      	cmp	r3, #2
 80153a0:	d902      	bls.n	80153a8 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 80153a2:	f640 0321 	movw	r3, #2081	@ 0x821
 80153a6:	e01c      	b.n	80153e2 <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 80153a8:	883b      	ldrh	r3, [r7, #0]
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	771a      	strb	r2, [r3, #28]
        break;
 80153b0:	e016      	b.n	80153e0 <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 80153b2:	883b      	ldrh	r3, [r7, #0]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d00b      	beq.n	80153d0 <phpalFelica_Sw_SetConfig+0x52>
 80153b8:	883b      	ldrh	r3, [r7, #0]
 80153ba:	2b02      	cmp	r3, #2
 80153bc:	d008      	beq.n	80153d0 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 80153be:	883b      	ldrh	r3, [r7, #0]
 80153c0:	2b03      	cmp	r3, #3
 80153c2:	d005      	beq.n	80153d0 <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 80153c4:	883b      	ldrh	r3, [r7, #0]
 80153c6:	2b04      	cmp	r3, #4
 80153c8:	d002      	beq.n	80153d0 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 80153ca:	f640 0321 	movw	r3, #2081	@ 0x821
 80153ce:	e008      	b.n	80153e2 <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 80153d0:	883b      	ldrh	r3, [r7, #0]
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	779a      	strb	r2, [r3, #30]
        break;
 80153d8:	e002      	b.n	80153e0 <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 80153da:	f640 0323 	movw	r3, #2083	@ 0x823
 80153de:	e000      	b.n	80153e2 <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 80153e0:	2300      	movs	r3, #0
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	370c      	adds	r7, #12
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 80153ee:	b480      	push	{r7}
 80153f0:	b085      	sub	sp, #20
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	60f8      	str	r0, [r7, #12]
 80153f6:	460b      	mov	r3, r1
 80153f8:	607a      	str	r2, [r7, #4]
 80153fa:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 80153fc:	897b      	ldrh	r3, [r7, #10]
 80153fe:	2b03      	cmp	r3, #3
 8015400:	d012      	beq.n	8015428 <phpalFelica_Sw_GetConfig+0x3a>
 8015402:	2b03      	cmp	r3, #3
 8015404:	dc26      	bgt.n	8015454 <phpalFelica_Sw_GetConfig+0x66>
 8015406:	2b00      	cmp	r3, #0
 8015408:	d002      	beq.n	8015410 <phpalFelica_Sw_GetConfig+0x22>
 801540a:	2b01      	cmp	r3, #1
 801540c:	d006      	beq.n	801541c <phpalFelica_Sw_GetConfig+0x2e>
 801540e:	e021      	b.n	8015454 <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	7f1b      	ldrb	r3, [r3, #28]
 8015414:	461a      	mov	r2, r3
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	801a      	strh	r2, [r3, #0]
        break;
 801541a:	e01e      	b.n	801545a <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	7f5b      	ldrb	r3, [r3, #29]
 8015420:	461a      	mov	r2, r3
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	801a      	strh	r2, [r3, #0]
        break;
 8015426:	e018      	b.n	801545a <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	7e9b      	ldrb	r3, [r3, #26]
 801542c:	2b01      	cmp	r3, #1
 801542e:	d10d      	bne.n	801544c <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	7e1b      	ldrb	r3, [r3, #24]
 8015434:	b21b      	sxth	r3, r3
 8015436:	021b      	lsls	r3, r3, #8
 8015438:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	7e5b      	ldrb	r3, [r3, #25]
 801543e:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8015440:	4313      	orrs	r3, r2
 8015442:	b21b      	sxth	r3, r3
 8015444:	b29a      	uxth	r2, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 801544a:	e006      	b.n	801545a <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2200      	movs	r2, #0
 8015450:	801a      	strh	r2, [r3, #0]
        break;
 8015452:	e002      	b.n	801545a <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8015454:	f640 0323 	movw	r3, #2083	@ 0x823
 8015458:	e000      	b.n	801545c <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3714      	adds	r7, #20
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8015468:	b480      	push	{r7}
 801546a:	b085      	sub	sp, #20
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	460b      	mov	r3, r1
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 8015476:	897b      	ldrh	r3, [r7, #10]
 8015478:	2b18      	cmp	r3, #24
 801547a:	d002      	beq.n	8015482 <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 801547c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8015480:	e01d      	b.n	80154be <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d101      	bne.n	801548c <phpalI14443p3a_Sw_Init+0x24>
 8015488:	2321      	movs	r3, #33	@ 0x21
 801548a:	e018      	b.n	80154be <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d101      	bne.n	8015496 <phpalI14443p3a_Sw_Init+0x2e>
 8015492:	2321      	movs	r3, #33	@ 0x21
 8015494:	e013      	b.n	80154be <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	f240 3201 	movw	r2, #769	@ 0x301
 801549c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	2200      	movs	r2, #0
 80154a8:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2200      	movs	r2, #0
 80154ae:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	2202      	movs	r2, #2
 80154b4:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2200      	movs	r2, #0
 80154ba:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3714      	adds	r7, #20
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr

080154ca <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 80154ca:	b580      	push	{r7, lr}
 80154cc:	b084      	sub	sp, #16
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	6078      	str	r0, [r7, #4]
 80154d2:	460b      	mov	r3, r1
 80154d4:	807b      	strh	r3, [r7, #2]
 80154d6:	4613      	mov	r3, r2
 80154d8:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 80154da:	887b      	ldrh	r3, [r7, #2]
 80154dc:	2b03      	cmp	r3, #3
 80154de:	d010      	beq.n	8015502 <phpalI14443p3a_Sw_SetConfig+0x38>
 80154e0:	2b03      	cmp	r3, #3
 80154e2:	dc1c      	bgt.n	801551e <phpalI14443p3a_Sw_SetConfig+0x54>
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d002      	beq.n	80154ee <phpalI14443p3a_Sw_SetConfig+0x24>
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	d005      	beq.n	80154f8 <phpalI14443p3a_Sw_SetConfig+0x2e>
 80154ec:	e017      	b.n	801551e <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 80154ee:	883b      	ldrh	r3, [r7, #0]
 80154f0:	b2da      	uxtb	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	751a      	strb	r2, [r3, #20]
       break;
 80154f6:	e016      	b.n	8015526 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 80154f8:	883b      	ldrh	r3, [r7, #0]
 80154fa:	b2da      	uxtb	r2, r3
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	755a      	strb	r2, [r3, #21]
       break;
 8015500:	e011      	b.n	8015526 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	883a      	ldrh	r2, [r7, #0]
 8015508:	210d      	movs	r1, #13
 801550a:	4618      	mov	r0, r3
 801550c:	f7fa f9f0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015510:	4603      	mov	r3, r0
 8015512:	81fb      	strh	r3, [r7, #14]
 8015514:	89fb      	ldrh	r3, [r7, #14]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d004      	beq.n	8015524 <phpalI14443p3a_Sw_SetConfig+0x5a>
 801551a:	89fb      	ldrh	r3, [r7, #14]
 801551c:	e004      	b.n	8015528 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 801551e:	f240 3323 	movw	r3, #803	@ 0x323
 8015522:	e001      	b.n	8015528 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 8015524:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8015526:	2300      	movs	r3, #0

}
 8015528:	4618      	mov	r0, r3
 801552a:	3710      	adds	r7, #16
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	2126      	movs	r1, #38	@ 0x26
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 fc89 	bl	8015e56 <phpalI14443p3a_Sw_RequestAEx>
 8015544:	4603      	mov	r3, r0
}
 8015546:	4618      	mov	r0, r3
 8015548:	3708      	adds	r7, #8
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b082      	sub	sp, #8
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
 8015556:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8015558:	683a      	ldr	r2, [r7, #0]
 801555a:	2152      	movs	r1, #82	@ 0x52
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f000 fc7a 	bl	8015e56 <phpalI14443p3a_Sw_RequestAEx>
 8015562:	4603      	mov	r3, r0
}
 8015564:	4618      	mov	r0, r3
 8015566:	3708      	adds	r7, #8
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}

0801556c <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b088      	sub	sp, #32
 8015570:	af02      	add	r7, sp, #8
 8015572:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015574:	2300      	movs	r3, #0
 8015576:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015578:	2300      	movs	r3, #0
 801557a:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8015584:	210d      	movs	r1, #13
 8015586:	4618      	mov	r0, r3
 8015588:	f7fa f9b2 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801558c:	4603      	mov	r3, r0
 801558e:	82fb      	strh	r3, [r7, #22]
 8015590:	8afb      	ldrh	r3, [r7, #22]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d001      	beq.n	801559a <phpalI14443p3a_Sw_HaltA+0x2e>
 8015596:	8afb      	ldrh	r3, [r7, #22]
 8015598:	e03b      	b.n	8015612 <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	2201      	movs	r2, #1
 80155a0:	2101      	movs	r1, #1
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fa f9a4 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80155a8:	4603      	mov	r3, r0
 80155aa:	82fb      	strh	r3, [r7, #22]
 80155ac:	8afb      	ldrh	r3, [r7, #22]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d001      	beq.n	80155b6 <phpalI14443p3a_Sw_HaltA+0x4a>
 80155b2:	8afb      	ldrh	r3, [r7, #22]
 80155b4:	e02d      	b.n	8015612 <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	2201      	movs	r2, #1
 80155bc:	2102      	movs	r1, #2
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fa f996 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80155c4:	4603      	mov	r3, r0
 80155c6:	82fb      	strh	r3, [r7, #22]
 80155c8:	8afb      	ldrh	r3, [r7, #22]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d001      	beq.n	80155d2 <phpalI14443p3a_Sw_HaltA+0x66>
 80155ce:	8afb      	ldrh	r3, [r7, #22]
 80155d0:	e01f      	b.n	8015612 <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 80155d2:	2350      	movs	r3, #80	@ 0x50
 80155d4:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 80155d6:	2300      	movs	r3, #0
 80155d8:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6858      	ldr	r0, [r3, #4]
 80155de:	f107 0210 	add.w	r2, r7, #16
 80155e2:	f107 030a 	add.w	r3, r7, #10
 80155e6:	9301      	str	r3, [sp, #4]
 80155e8:	f107 030c 	add.w	r3, r7, #12
 80155ec:	9300      	str	r3, [sp, #0]
 80155ee:	2302      	movs	r3, #2
 80155f0:	2100      	movs	r1, #0
 80155f2:	f7f9 fdc7 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80155f6:	4603      	mov	r3, r0
 80155f8:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 80155fa:	8abb      	ldrh	r3, [r7, #20]
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d003      	beq.n	801560a <phpalI14443p3a_Sw_HaltA+0x9e>
 8015602:	2b01      	cmp	r3, #1
 8015604:	d104      	bne.n	8015610 <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 8015606:	2300      	movs	r3, #0
 8015608:	e003      	b.n	8015612 <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801560a:	f240 3306 	movw	r3, #774	@ 0x306
 801560e:	e000      	b.n	8015612 <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 8015610:	8abb      	ldrh	r3, [r7, #20]
    }
}
 8015612:	4618      	mov	r0, r3
 8015614:	3718      	adds	r7, #24
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b08e      	sub	sp, #56	@ 0x38
 801561e:	af02      	add	r7, sp, #8
 8015620:	60f8      	str	r0, [r7, #12]
 8015622:	607a      	str	r2, [r7, #4]
 8015624:	461a      	mov	r2, r3
 8015626:	460b      	mov	r3, r1
 8015628:	72fb      	strb	r3, [r7, #11]
 801562a:	4613      	mov	r3, r2
 801562c:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 801562e:	2300      	movs	r3, #0
 8015630:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 8015632:	2300      	movs	r3, #0
 8015634:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 8015636:	2300      	movs	r3, #0
 8015638:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 801563a:	7abb      	ldrb	r3, [r7, #10]
 801563c:	2b40      	cmp	r3, #64	@ 0x40
 801563e:	d804      	bhi.n	801564a <phpalI14443p3a_Sw_Anticollision+0x30>
 8015640:	7abb      	ldrb	r3, [r7, #10]
 8015642:	f003 0308 	and.w	r3, r3, #8
 8015646:	2b00      	cmp	r3, #0
 8015648:	d002      	beq.n	8015650 <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 801564a:	f240 3321 	movw	r3, #801	@ 0x321
 801564e:	e217      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 8015650:	7afb      	ldrb	r3, [r7, #11]
 8015652:	2b97      	cmp	r3, #151	@ 0x97
 8015654:	d00d      	beq.n	8015672 <phpalI14443p3a_Sw_Anticollision+0x58>
 8015656:	2b97      	cmp	r3, #151	@ 0x97
 8015658:	dc08      	bgt.n	801566c <phpalI14443p3a_Sw_Anticollision+0x52>
 801565a:	2b93      	cmp	r3, #147	@ 0x93
 801565c:	d002      	beq.n	8015664 <phpalI14443p3a_Sw_Anticollision+0x4a>
 801565e:	2b95      	cmp	r3, #149	@ 0x95
 8015660:	d007      	beq.n	8015672 <phpalI14443p3a_Sw_Anticollision+0x58>
 8015662:	e003      	b.n	801566c <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2200      	movs	r2, #0
 8015668:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 801566a:	e002      	b.n	8015672 <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 801566c:	f240 3321 	movw	r3, #801	@ 0x321
 8015670:	e206      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 8015672:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2200      	movs	r2, #0
 8015678:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 801567a:	7abb      	ldrb	r3, [r7, #10]
 801567c:	2b40      	cmp	r3, #64	@ 0x40
 801567e:	d01e      	beq.n	80156be <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 8015680:	2300      	movs	r3, #0
 8015682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	2200      	movs	r2, #0
 801568c:	2101      	movs	r1, #1
 801568e:	4618      	mov	r0, r3
 8015690:	f7fa f92e 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015694:	4603      	mov	r3, r0
 8015696:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015698:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801569a:	2b00      	cmp	r3, #0
 801569c:	d001      	beq.n	80156a2 <phpalI14443p3a_Sw_Anticollision+0x88>
 801569e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156a0:	e1ee      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	2102      	movs	r1, #2
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7fa f920 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80156b0:	4603      	mov	r3, r0
 80156b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d020      	beq.n	80156fc <phpalI14443p3a_Sw_Anticollision+0xe2>
 80156ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156bc:	e1e0      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 80156be:	2301      	movs	r3, #1
 80156c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	2201      	movs	r2, #1
 80156ca:	2101      	movs	r1, #1
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7fa f90f 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80156d2:	4603      	mov	r3, r0
 80156d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d001      	beq.n	80156e0 <phpalI14443p3a_Sw_Anticollision+0xc6>
 80156dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156de:	e1cf      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	2201      	movs	r2, #1
 80156e6:	2102      	movs	r1, #2
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7fa f901 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80156ee:	4603      	mov	r3, r0
 80156f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <phpalI14443p3a_Sw_Anticollision+0xe2>
 80156f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156fa:	e1c1      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 80156fc:	7afb      	ldrb	r3, [r7, #11]
 80156fe:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 8015700:	f107 0318 	add.w	r3, r7, #24
 8015704:	3302      	adds	r3, #2
 8015706:	2205      	movs	r2, #5
 8015708:	2100      	movs	r1, #0
 801570a:	4618      	mov	r0, r3
 801570c:	f00c fa72 	bl	8021bf4 <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 8015710:	7abb      	ldrb	r3, [r7, #10]
 8015712:	091b      	lsrs	r3, r3, #4
 8015714:	b2db      	uxtb	r3, r3
 8015716:	461a      	mov	r2, r3
 8015718:	7abb      	ldrb	r3, [r7, #10]
 801571a:	f003 030f 	and.w	r3, r3, #15
 801571e:	2b00      	cmp	r3, #0
 8015720:	d001      	beq.n	8015726 <phpalI14443p3a_Sw_Anticollision+0x10c>
 8015722:	2301      	movs	r3, #1
 8015724:	e000      	b.n	8015728 <phpalI14443p3a_Sw_Anticollision+0x10e>
 8015726:	2300      	movs	r3, #0
 8015728:	4413      	add	r3, r2
 801572a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 801572c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801572e:	f107 0318 	add.w	r3, r7, #24
 8015732:	3302      	adds	r3, #2
 8015734:	6879      	ldr	r1, [r7, #4]
 8015736:	4618      	mov	r0, r3
 8015738:	f00c faf1 	bl	8021d1e <memcpy>
    wSndBytes += 2U;
 801573c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801573e:	3302      	adds	r3, #2
 8015740:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 8015742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015746:	2b00      	cmp	r3, #0
 8015748:	d016      	beq.n	8015778 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 801574a:	2350      	movs	r3, #80	@ 0x50
 801574c:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	781a      	ldrb	r2, [r3, #0]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	3301      	adds	r3, #1
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	4053      	eors	r3, r2
 801575a:	b2da      	uxtb	r2, r3
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	3302      	adds	r3, #2
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	4053      	eors	r3, r2
 8015764:	b2da      	uxtb	r2, r3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	3303      	adds	r3, #3
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	4053      	eors	r3, r2
 801576e:	b2db      	uxtb	r3, r3
 8015770:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 8015772:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015774:	3301      	adds	r3, #1
 8015776:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8015778:	7abb      	ldrb	r3, [r7, #10]
 801577a:	3320      	adds	r3, #32
 801577c:	b2db      	uxtb	r3, r3
 801577e:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	6858      	ldr	r0, [r3, #4]
 8015784:	7abb      	ldrb	r3, [r7, #10]
 8015786:	b29b      	uxth	r3, r3
 8015788:	f003 0307 	and.w	r3, r3, #7
 801578c:	b29b      	uxth	r3, r3
 801578e:	461a      	mov	r2, r3
 8015790:	2105      	movs	r1, #5
 8015792:	f7fa f8ad 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015796:	4603      	mov	r3, r0
 8015798:	853b      	strh	r3, [r7, #40]	@ 0x28
 801579a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801579c:	2b00      	cmp	r3, #0
 801579e:	d001      	beq.n	80157a4 <phpalI14443p3a_Sw_Anticollision+0x18a>
 80157a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157a2:	e16d      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	6858      	ldr	r0, [r3, #4]
 80157a8:	7abb      	ldrb	r3, [r7, #10]
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	f003 0307 	and.w	r3, r3, #7
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	461a      	mov	r2, r3
 80157b4:	2103      	movs	r1, #3
 80157b6:	f7fa f89b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80157ba:	4603      	mov	r3, r0
 80157bc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80157be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d001      	beq.n	80157c8 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 80157c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157c6:	e15b      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	6858      	ldr	r0, [r3, #4]
 80157cc:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80157ce:	f107 0218 	add.w	r2, r7, #24
 80157d2:	f107 0312 	add.w	r3, r7, #18
 80157d6:	9301      	str	r3, [sp, #4]
 80157d8:	f107 0314 	add.w	r3, r7, #20
 80157dc:	9300      	str	r3, [sp, #0]
 80157de:	460b      	mov	r3, r1
 80157e0:	2100      	movs	r1, #0
 80157e2:	f7f9 fccf 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80157e6:	4603      	mov	r3, r0
 80157e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	2200      	movs	r2, #0
 80157f0:	2105      	movs	r1, #5
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fa f87c 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80157f8:	4603      	mov	r3, r0
 80157fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80157fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <phpalI14443p3a_Sw_Anticollision+0x1ec>
 8015802:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015804:	e13c      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 8015806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801580a:	2b00      	cmp	r3, #0
 801580c:	d112      	bne.n	8015834 <phpalI14443p3a_Sw_Anticollision+0x21a>
 801580e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015810:	b2db      	uxtb	r3, r3
 8015812:	2b03      	cmp	r3, #3
 8015814:	d10e      	bne.n	8015834 <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	f107 0210 	add.w	r2, r7, #16
 801581e:	2104      	movs	r1, #4
 8015820:	4618      	mov	r0, r3
 8015822:	f7fb fcb3 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8015826:	4603      	mov	r3, r0
 8015828:	853b      	strh	r3, [r7, #40]	@ 0x28
 801582a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801582c:	2b00      	cmp	r3, #0
 801582e:	d00f      	beq.n	8015850 <phpalI14443p3a_Sw_Anticollision+0x236>
 8015830:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015832:	e125      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8015834:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015836:	b2db      	uxtb	r3, r3
 8015838:	2b73      	cmp	r3, #115	@ 0x73
 801583a:	d102      	bne.n	8015842 <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801583c:	f240 3306 	movw	r3, #774	@ 0x306
 8015840:	e11e      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 8015842:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015844:	2b00      	cmp	r3, #0
 8015846:	d001      	beq.n	801584c <phpalI14443p3a_Sw_Anticollision+0x232>
 8015848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801584a:	e119      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 8015850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015854:	2b00      	cmp	r3, #0
 8015856:	f040 80ae 	bne.w	80159b6 <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 801585a:	7abb      	ldrb	r3, [r7, #10]
 801585c:	091b      	lsrs	r3, r3, #4
 801585e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 8015862:	7abb      	ldrb	r3, [r7, #10]
 8015864:	091b      	lsrs	r3, r3, #4
 8015866:	b2da      	uxtb	r2, r3
 8015868:	8a7b      	ldrh	r3, [r7, #18]
 801586a:	b2db      	uxtb	r3, r3
 801586c:	4413      	add	r3, r2
 801586e:	b2db      	uxtb	r3, r3
 8015870:	00db      	lsls	r3, r3, #3
 8015872:	b2da      	uxtb	r2, r3
 8015874:	8a3b      	ldrh	r3, [r7, #16]
 8015876:	b2db      	uxtb	r3, r3
 8015878:	4413      	add	r3, r2
 801587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 801587e:	8a3b      	ldrh	r3, [r7, #16]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d004      	beq.n	801588e <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 8015884:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015888:	3b08      	subs	r3, #8
 801588a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 801588e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015892:	08db      	lsrs	r3, r3, #3
 8015894:	b2db      	uxtb	r3, r3
 8015896:	011b      	lsls	r3, r3, #4
 8015898:	b2da      	uxtb	r2, r3
 801589a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801589e:	f003 0307 	and.w	r3, r3, #7
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	4413      	add	r3, r2
 80158a6:	b2da      	uxtb	r2, r3
 80158a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158aa:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 80158ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b50      	cmp	r3, #80	@ 0x50
 80158b2:	d902      	bls.n	80158ba <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80158b4:	f240 3306 	movw	r3, #774	@ 0x306
 80158b8:	e0e2      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 80158ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d106      	bne.n	80158d0 <phpalI14443p3a_Sw_Anticollision+0x2b6>
 80158c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	2b50      	cmp	r3, #80	@ 0x50
 80158c8:	d002      	beq.n	80158d0 <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80158ca:	f240 3306 	movw	r3, #774	@ 0x306
 80158ce:	e0d7      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 80158d0:	8a7b      	ldrh	r3, [r7, #18]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d041      	beq.n	801595a <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 80158d6:	7abb      	ldrb	r3, [r7, #10]
 80158d8:	f003 0307 	and.w	r3, r3, #7
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d026      	beq.n	801592e <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80158e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80158e4:	3302      	adds	r3, #2
 80158e6:	3330      	adds	r3, #48	@ 0x30
 80158e8:	443b      	add	r3, r7
 80158ea:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80158ee:	7abb      	ldrb	r3, [r7, #10]
 80158f0:	f003 0307 	and.w	r3, r3, #7
 80158f4:	2101      	movs	r1, #1
 80158f6:	fa01 f303 	lsl.w	r3, r1, r3
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	3b01      	subs	r3, #1
 80158fe:	b2db      	uxtb	r3, r3
 8015900:	4013      	ands	r3, r2
 8015902:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	781a      	ldrb	r2, [r3, #0]
 8015908:	7abb      	ldrb	r3, [r7, #10]
 801590a:	f003 0307 	and.w	r3, r3, #7
 801590e:	20ff      	movs	r0, #255	@ 0xff
 8015910:	fa00 f303 	lsl.w	r3, r0, r3
 8015914:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 8015916:	4013      	ands	r3, r2
 8015918:	b2da      	uxtb	r2, r3
 801591a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801591e:	3302      	adds	r3, #2
 8015920:	430a      	orrs	r2, r1
 8015922:	b2d2      	uxtb	r2, r2
 8015924:	3330      	adds	r3, #48	@ 0x30
 8015926:	443b      	add	r3, r7
 8015928:	f803 2c18 	strb.w	r2, [r3, #-24]
 801592c:	e008      	b.n	8015940 <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 801592e:	697a      	ldr	r2, [r7, #20]
 8015930:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015934:	3302      	adds	r3, #2
 8015936:	7812      	ldrb	r2, [r2, #0]
 8015938:	3330      	adds	r3, #48	@ 0x30
 801593a:	443b      	add	r3, r7
 801593c:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 8015940:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015944:	3303      	adds	r3, #3
 8015946:	f107 0218 	add.w	r2, r7, #24
 801594a:	18d0      	adds	r0, r2, r3
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	3301      	adds	r3, #1
 8015950:	8a7a      	ldrh	r2, [r7, #18]
 8015952:	3a01      	subs	r2, #1
 8015954:	4619      	mov	r1, r3
 8015956:	f00c f9e2 	bl	8021d1e <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 801595a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	2b40      	cmp	r3, #64	@ 0x40
 8015960:	d91d      	bls.n	801599e <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 8015962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	2b4f      	cmp	r3, #79	@ 0x4f
 8015968:	d802      	bhi.n	8015970 <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 801596a:	f240 3305 	movw	r3, #773	@ 0x305
 801596e:	e087      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 8015970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015972:	2240      	movs	r2, #64	@ 0x40
 8015974:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 8015976:	8a7b      	ldrh	r3, [r7, #18]
 8015978:	3b01      	subs	r3, #1
 801597a:	b29b      	uxth	r3, r3
 801597c:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 801597e:	7eba      	ldrb	r2, [r7, #26]
 8015980:	7efb      	ldrb	r3, [r7, #27]
 8015982:	4053      	eors	r3, r2
 8015984:	b2da      	uxtb	r2, r3
 8015986:	7f3b      	ldrb	r3, [r7, #28]
 8015988:	4053      	eors	r3, r2
 801598a:	b2da      	uxtb	r2, r3
 801598c:	7f7b      	ldrb	r3, [r7, #29]
 801598e:	4053      	eors	r3, r2
 8015990:	b2da      	uxtb	r2, r3
 8015992:	7fbb      	ldrb	r3, [r7, #30]
 8015994:	429a      	cmp	r2, r3
 8015996:	d002      	beq.n	801599e <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8015998:	f240 3305 	movw	r3, #773	@ 0x305
 801599c:	e070      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 801599e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80159a2:	8a7a      	ldrh	r2, [r7, #18]
 80159a4:	441a      	add	r2, r3
 80159a6:	f107 0318 	add.w	r3, r7, #24
 80159aa:	3302      	adds	r3, #2
 80159ac:	4619      	mov	r1, r3
 80159ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80159b0:	f00c f9b5 	bl	8021d1e <memcpy>
 80159b4:	e054      	b.n	8015a60 <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 80159b6:	8a7b      	ldrh	r3, [r7, #18]
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d002      	beq.n	80159c2 <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80159bc:	f240 3306 	movw	r3, #774	@ 0x306
 80159c0:	e05e      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	781b      	ldrb	r3, [r3, #0]
 80159c6:	f003 0304 	and.w	r3, r3, #4
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d01e      	beq.n	8015a0c <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 80159ce:	7afb      	ldrb	r3, [r7, #11]
 80159d0:	2b97      	cmp	r3, #151	@ 0x97
 80159d2:	d102      	bne.n	80159da <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80159d4:	f240 3306 	movw	r3, #774	@ 0x306
 80159d8:	e052      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	2b88      	cmp	r3, #136	@ 0x88
 80159e0:	d002      	beq.n	80159e8 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80159e2:	f240 3306 	movw	r3, #774	@ 0x306
 80159e6:	e04b      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	7c9b      	ldrb	r3, [r3, #18]
 80159ec:	3308      	adds	r3, #8
 80159ee:	68fa      	ldr	r2, [r7, #12]
 80159f0:	18d0      	adds	r0, r2, r3
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	3301      	adds	r3, #1
 80159f6:	2203      	movs	r2, #3
 80159f8:	4619      	mov	r1, r3
 80159fa:	f00c f990 	bl	8021d1e <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	7c9b      	ldrb	r3, [r3, #18]
 8015a02:	3303      	adds	r3, #3
 8015a04:	b2da      	uxtb	r2, r3
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	749a      	strb	r2, [r3, #18]
 8015a0a:	e025      	b.n	8015a58 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	2b88      	cmp	r3, #136	@ 0x88
 8015a12:	d102      	bne.n	8015a1a <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8015a14:	f240 3306 	movw	r3, #774	@ 0x306
 8015a18:	e032      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	7c9b      	ldrb	r3, [r3, #18]
 8015a1e:	3308      	adds	r3, #8
 8015a20:	68fa      	ldr	r2, [r7, #12]
 8015a22:	4413      	add	r3, r2
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	6812      	ldr	r2, [r2, #0]
 8015a28:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	7c9b      	ldrb	r3, [r3, #18]
 8015a2e:	3304      	adds	r3, #4
 8015a30:	b2da      	uxtb	r2, r3
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2201      	movs	r2, #1
 8015a3a:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	220a      	movs	r2, #10
 8015a42:	210e      	movs	r1, #14
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f9 ff53 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015a4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d001      	beq.n	8015a58 <phpalI14443p3a_Sw_Anticollision+0x43e>
 8015a54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015a56:	e013      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	781a      	ldrb	r2, [r3, #0]
 8015a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a5e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 8015a60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d00b      	beq.n	8015a7e <phpalI14443p3a_Sw_Anticollision+0x464>
 8015a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d106      	bne.n	8015a7e <phpalI14443p3a_Sw_Anticollision+0x464>
 8015a70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	e000      	b.n	8015a80 <phpalI14443p3a_Sw_Anticollision+0x466>
 8015a7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3730      	adds	r7, #48	@ 0x30
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b088      	sub	sp, #32
 8015a8c:	af02      	add	r7, sp, #8
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	607a      	str	r2, [r7, #4]
 8015a92:	603b      	str	r3, [r7, #0]
 8015a94:	460b      	mov	r3, r1
 8015a96:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 8015a98:	7af9      	ldrb	r1, [r7, #11]
 8015a9a:	f107 0317 	add.w	r3, r7, #23
 8015a9e:	9301      	str	r3, [sp, #4]
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	2340      	movs	r3, #64	@ 0x40
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f7ff fdb6 	bl	801561a <phpalI14443p3a_Sw_Anticollision>
 8015aae:	4603      	mov	r3, r0
}
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	3718      	adds	r7, #24
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b08a      	sub	sp, #40	@ 0x28
 8015abc:	af02      	add	r7, sp, #8
 8015abe:	60f8      	str	r0, [r7, #12]
 8015ac0:	60b9      	str	r1, [r7, #8]
 8015ac2:	603b      	str	r3, [r7, #0]
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 8015acc:	2300      	movs	r3, #0
 8015ace:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 8015ad8:	79fb      	ldrb	r3, [r7, #7]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d00f      	beq.n	8015afe <phpalI14443p3a_Sw_ActivateCard+0x46>
 8015ade:	79fb      	ldrb	r3, [r7, #7]
 8015ae0:	2b04      	cmp	r3, #4
 8015ae2:	d00c      	beq.n	8015afe <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 8015ae4:	79fb      	ldrb	r3, [r7, #7]
 8015ae6:	2b07      	cmp	r3, #7
 8015ae8:	d009      	beq.n	8015afe <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 8015aea:	79fb      	ldrb	r3, [r7, #7]
 8015aec:	2b0a      	cmp	r3, #10
 8015aee:	d006      	beq.n	8015afe <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 8015af4:	2b01      	cmp	r3, #1
 8015af6:	d002      	beq.n	8015afe <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8015af8:	f240 3321 	movw	r3, #801	@ 0x321
 8015afc:	e18c      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 8015afe:	2300      	movs	r3, #0
 8015b00:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 8015b02:	f107 0310 	add.w	r3, r7, #16
 8015b06:	2204      	movs	r2, #4
 8015b08:	2100      	movs	r1, #0
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f00c f872 	bl	8021bf4 <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 8015b10:	2300      	movs	r3, #0
 8015b12:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 8015b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b16:	2200      	movs	r2, #0
 8015b18:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	7d1b      	ldrb	r3, [r3, #20]
 8015b24:	2b01      	cmp	r3, #1
 8015b26:	d12a      	bne.n	8015b7e <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8015b28:	f107 0314 	add.w	r3, r7, #20
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	68f8      	ldr	r0, [r7, #12]
 8015b30:	f7ff fd0d 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 8015b34:	4603      	mov	r3, r0
 8015b36:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8015b38:	e019      	b.n	8015b6e <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 8015b3a:	7e3b      	ldrb	r3, [r7, #24]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8015b48:	2100      	movs	r1, #0
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f9 fe16 	bl	800f77c <phhalHw_Pn5180_Wait>
 8015b50:	4603      	mov	r3, r0
 8015b52:	83fb      	strh	r3, [r7, #30]
 8015b54:	8bfb      	ldrh	r3, [r7, #30]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d001      	beq.n	8015b5e <phpalI14443p3a_Sw_ActivateCard+0xa6>
 8015b5a:	8bfb      	ldrh	r3, [r7, #30]
 8015b5c:	e15c      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8015b5e:	f107 0314 	add.w	r3, r7, #20
 8015b62:	4619      	mov	r1, r3
 8015b64:	68f8      	ldr	r0, [r7, #12]
 8015b66:	f7ff fcf2 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8015b6e:	8bfb      	ldrh	r3, [r7, #30]
 8015b70:	b2db      	uxtb	r3, r3
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d128      	bne.n	8015bc8 <phpalI14443p3a_Sw_ActivateCard+0x110>
 8015b76:	7e3b      	ldrb	r3, [r7, #24]
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d9de      	bls.n	8015b3a <phpalI14443p3a_Sw_ActivateCard+0x82>
 8015b7c:	e024      	b.n	8015bc8 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	7d1b      	ldrb	r3, [r3, #20]
 8015b82:	2b03      	cmp	r3, #3
 8015b84:	d10c      	bne.n	8015ba0 <phpalI14443p3a_Sw_ActivateCard+0xe8>
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	7d5b      	ldrb	r3, [r3, #21]
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d108      	bne.n	8015ba0 <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8015b8e:	f107 0314 	add.w	r3, r7, #20
 8015b92:	4619      	mov	r1, r3
 8015b94:	68f8      	ldr	r0, [r7, #12]
 8015b96:	f7ff fcda 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	83fb      	strh	r3, [r7, #30]
 8015b9e:	e013      	b.n	8015bc8 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 8015ba0:	79fb      	ldrb	r3, [r7, #7]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d108      	bne.n	8015bb8 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 8015ba6:	f107 0314 	add.w	r3, r7, #20
 8015baa:	4619      	mov	r1, r3
 8015bac:	68f8      	ldr	r0, [r7, #12]
 8015bae:	f7ff fcbf 	bl	8015530 <phpalI14443p3a_Sw_RequestA>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	83fb      	strh	r3, [r7, #30]
 8015bb6:	e007      	b.n	8015bc8 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8015bb8:	f107 0314 	add.w	r3, r7, #20
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	f7ff fcc5 	bl	801554e <phpalI14443p3a_Sw_WakeUpA>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8015bc8:	8bfb      	ldrh	r3, [r7, #30]
 8015bca:	b2db      	uxtb	r3, r3
 8015bcc:	2b03      	cmp	r3, #3
 8015bce:	d10b      	bne.n	8015be8 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	7d1b      	ldrb	r3, [r3, #20]
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d101      	bne.n	8015bdc <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 8015bd8:	8bfb      	ldrh	r3, [r7, #30]
 8015bda:	e11d      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 8015be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015be2:	2201      	movs	r2, #1
 8015be4:	701a      	strb	r2, [r3, #0]
 8015be6:	e004      	b.n	8015bf2 <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 8015be8:	8bfb      	ldrh	r3, [r7, #30]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d001      	beq.n	8015bf2 <phpalI14443p3a_Sw_ActivateCard+0x13a>
 8015bee:	8bfb      	ldrh	r3, [r7, #30]
 8015bf0:	e112      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	76bb      	strb	r3, [r7, #26]
 8015bf6:	e0fb      	b.n	8015df0 <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 8015bf8:	7ebb      	ldrb	r3, [r7, #26]
 8015bfa:	2b02      	cmp	r3, #2
 8015bfc:	d00c      	beq.n	8015c18 <phpalI14443p3a_Sw_ActivateCard+0x160>
 8015bfe:	2b02      	cmp	r3, #2
 8015c00:	dc0d      	bgt.n	8015c1e <phpalI14443p3a_Sw_ActivateCard+0x166>
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d002      	beq.n	8015c0c <phpalI14443p3a_Sw_ActivateCard+0x154>
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d003      	beq.n	8015c12 <phpalI14443p3a_Sw_ActivateCard+0x15a>
 8015c0a:	e008      	b.n	8015c1e <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 8015c0c:	2393      	movs	r3, #147	@ 0x93
 8015c0e:	76fb      	strb	r3, [r7, #27]
            break;
 8015c10:	e005      	b.n	8015c1e <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 8015c12:	2395      	movs	r3, #149	@ 0x95
 8015c14:	76fb      	strb	r3, [r7, #27]
            break;
 8015c16:	e002      	b.n	8015c1e <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 8015c18:	2397      	movs	r3, #151	@ 0x97
 8015c1a:	76fb      	strb	r3, [r7, #27]
            break;
 8015c1c:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 8015c1e:	79fa      	ldrb	r2, [r7, #7]
 8015c20:	7e7b      	ldrb	r3, [r7, #25]
 8015c22:	3304      	adds	r3, #4
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d107      	bne.n	8015c38 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 8015c28:	7e7b      	ldrb	r3, [r7, #25]
 8015c2a:	68ba      	ldr	r2, [r7, #8]
 8015c2c:	4413      	add	r3, r2
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8015c32:	2340      	movs	r3, #64	@ 0x40
 8015c34:	75bb      	strb	r3, [r7, #22]
 8015c36:	e097      	b.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8015c38:	79fa      	ldrb	r2, [r7, #7]
 8015c3a:	7e7b      	ldrb	r3, [r7, #25]
 8015c3c:	3304      	adds	r3, #4
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d911      	bls.n	8015c66 <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 8015c42:	2388      	movs	r3, #136	@ 0x88
 8015c44:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 8015c46:	7e7b      	ldrb	r3, [r7, #25]
 8015c48:	68ba      	ldr	r2, [r7, #8]
 8015c4a:	18d1      	adds	r1, r2, r3
 8015c4c:	f107 0310 	add.w	r3, r7, #16
 8015c50:	3301      	adds	r3, #1
 8015c52:	2203      	movs	r2, #3
 8015c54:	4618      	mov	r0, r3
 8015c56:	f00c f862 	bl	8021d1e <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 8015c5a:	7e7b      	ldrb	r3, [r7, #25]
 8015c5c:	3303      	adds	r3, #3
 8015c5e:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8015c60:	2340      	movs	r3, #64	@ 0x40
 8015c62:	75bb      	strb	r3, [r7, #22]
 8015c64:	e080      	b.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 8015c66:	2300      	movs	r3, #0
 8015c68:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 8015c6a:	e07d      	b.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8015c6c:	7db8      	ldrb	r0, [r7, #22]
 8015c6e:	f107 0210 	add.w	r2, r7, #16
 8015c72:	7ef9      	ldrb	r1, [r7, #27]
 8015c74:	f107 0316 	add.w	r3, r7, #22
 8015c78:	9301      	str	r3, [sp, #4]
 8015c7a:	f107 0310 	add.w	r3, r7, #16
 8015c7e:	9300      	str	r3, [sp, #0]
 8015c80:	4603      	mov	r3, r0
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f7ff fcc9 	bl	801561a <phpalI14443p3a_Sw_Anticollision>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	7d1b      	ldrb	r3, [r3, #20]
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d12b      	bne.n	8015cec <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 8015c94:	2300      	movs	r3, #0
 8015c96:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8015c98:	e021      	b.n	8015cde <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 8015c9a:	7e3b      	ldrb	r3, [r7, #24]
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8015ca8:	2100      	movs	r1, #0
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7f9 fd66 	bl	800f77c <phhalHw_Pn5180_Wait>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	83fb      	strh	r3, [r7, #30]
 8015cb4:	8bfb      	ldrh	r3, [r7, #30]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d001      	beq.n	8015cbe <phpalI14443p3a_Sw_ActivateCard+0x206>
 8015cba:	8bfb      	ldrh	r3, [r7, #30]
 8015cbc:	e0ac      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8015cbe:	7db8      	ldrb	r0, [r7, #22]
 8015cc0:	f107 0210 	add.w	r2, r7, #16
 8015cc4:	7ef9      	ldrb	r1, [r7, #27]
 8015cc6:	f107 0316 	add.w	r3, r7, #22
 8015cca:	9301      	str	r3, [sp, #4]
 8015ccc:	f107 0310 	add.w	r3, r7, #16
 8015cd0:	9300      	str	r3, [sp, #0]
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	f7ff fca0 	bl	801561a <phpalI14443p3a_Sw_Anticollision>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8015cde:	8bfb      	ldrh	r3, [r7, #30]
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	2b01      	cmp	r3, #1
 8015ce4:	d102      	bne.n	8015cec <phpalI14443p3a_Sw_ActivateCard+0x234>
 8015ce6:	7e3b      	ldrb	r3, [r7, #24]
 8015ce8:	2b01      	cmp	r3, #1
 8015cea:	d9d6      	bls.n	8015c9a <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8015cec:	8bfb      	ldrh	r3, [r7, #30]
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	2b03      	cmp	r3, #3
 8015cf2:	d11b      	bne.n	8015d2c <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	7d1b      	ldrb	r3, [r3, #20]
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d101      	bne.n	8015d00 <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 8015cfc:	8bfb      	ldrh	r3, [r7, #30]
 8015cfe:	e08b      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 8015d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d02:	2201      	movs	r2, #1
 8015d04:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 8015d06:	7dbb      	ldrb	r3, [r7, #22]
 8015d08:	f003 0307 	and.w	r3, r3, #7
 8015d0c:	2b06      	cmp	r3, #6
 8015d0e:	d804      	bhi.n	8015d1a <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 8015d10:	7dbb      	ldrb	r3, [r7, #22]
 8015d12:	3301      	adds	r3, #1
 8015d14:	b2db      	uxtb	r3, r3
 8015d16:	75bb      	strb	r3, [r7, #22]
 8015d18:	e00d      	b.n	8015d36 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 8015d1a:	7dbb      	ldrb	r3, [r7, #22]
 8015d1c:	091b      	lsrs	r3, r3, #4
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	3301      	adds	r3, #1
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	011b      	lsls	r3, r3, #4
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	75bb      	strb	r3, [r7, #22]
 8015d2a:	e004      	b.n	8015d36 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 8015d2c:	8bfb      	ldrh	r3, [r7, #30]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d001      	beq.n	8015d36 <phpalI14443p3a_Sw_ActivateCard+0x27e>
 8015d32:	8bfb      	ldrh	r3, [r7, #30]
 8015d34:	e070      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 8015d36:	7dfb      	ldrb	r3, [r7, #23]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d115      	bne.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8015d3c:	7d3b      	ldrb	r3, [r7, #20]
 8015d3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d102      	bne.n	8015d4c <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8015d46:	7efb      	ldrb	r3, [r7, #27]
 8015d48:	2b93      	cmp	r3, #147	@ 0x93
 8015d4a:	d007      	beq.n	8015d5c <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8015d4c:	7d3b      	ldrb	r3, [r7, #20]
 8015d4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8015d52:	2b40      	cmp	r3, #64	@ 0x40
 8015d54:	d108      	bne.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8015d56:	7efb      	ldrb	r3, [r7, #27]
 8015d58:	2b95      	cmp	r3, #149	@ 0x95
 8015d5a:	d105      	bne.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 8015d5c:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8015d5e:	2b88      	cmp	r3, #136	@ 0x88
 8015d60:	d102      	bne.n	8015d68 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8015d62:	f240 3306 	movw	r3, #774	@ 0x306
 8015d66:	e057      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8015d68:	7dbb      	ldrb	r3, [r7, #22]
 8015d6a:	2b40      	cmp	r3, #64	@ 0x40
 8015d6c:	f47f af7e 	bne.w	8015c6c <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8015d70:	f107 0210 	add.w	r2, r7, #16
 8015d74:	7ef9      	ldrb	r1, [r7, #27]
 8015d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7ff fe85 	bl	8015a88 <phpalI14443p3a_Sw_Select>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	7d1b      	ldrb	r3, [r3, #20]
 8015d86:	2b01      	cmp	r3, #1
 8015d88:	d124      	bne.n	8015dd4 <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8015d8e:	e01a      	b.n	8015dc6 <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 8015d90:	7e3b      	ldrb	r3, [r7, #24]
 8015d92:	3301      	adds	r3, #1
 8015d94:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8015d9e:	2100      	movs	r1, #0
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f9 fceb 	bl	800f77c <phhalHw_Pn5180_Wait>
 8015da6:	4603      	mov	r3, r0
 8015da8:	83fb      	strh	r3, [r7, #30]
 8015daa:	8bfb      	ldrh	r3, [r7, #30]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d001      	beq.n	8015db4 <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 8015db0:	8bfb      	ldrh	r3, [r7, #30]
 8015db2:	e031      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8015db4:	f107 0210 	add.w	r2, r7, #16
 8015db8:	7ef9      	ldrb	r1, [r7, #27]
 8015dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dbc:	68f8      	ldr	r0, [r7, #12]
 8015dbe:	f7ff fe63 	bl	8015a88 <phpalI14443p3a_Sw_Select>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8015dc6:	8bbb      	ldrh	r3, [r7, #28]
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	2b01      	cmp	r3, #1
 8015dcc:	d102      	bne.n	8015dd4 <phpalI14443p3a_Sw_ActivateCard+0x31c>
 8015dce:	7e3b      	ldrb	r3, [r7, #24]
 8015dd0:	2b01      	cmp	r3, #1
 8015dd2:	d9dd      	bls.n	8015d90 <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 8015dd4:	8bbb      	ldrh	r3, [r7, #28]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d001      	beq.n	8015dde <phpalI14443p3a_Sw_ActivateCard+0x326>
 8015dda:	8bbb      	ldrh	r3, [r7, #28]
 8015ddc:	e01c      	b.n	8015e18 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 8015dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	f003 0304 	and.w	r3, r3, #4
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d007      	beq.n	8015dfa <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 8015dea:	7ebb      	ldrb	r3, [r7, #26]
 8015dec:	3301      	adds	r3, #1
 8015dee:	76bb      	strb	r3, [r7, #26]
 8015df0:	7ebb      	ldrb	r3, [r7, #26]
 8015df2:	2b02      	cmp	r3, #2
 8015df4:	f67f af00 	bls.w	8015bf8 <phpalI14443p3a_Sw_ActivateCard+0x140>
 8015df8:	e000      	b.n	8015dfc <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 8015dfa:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	f103 0108 	add.w	r1, r3, #8
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	7c9b      	ldrb	r3, [r3, #18]
 8015e06:	461a      	mov	r2, r3
 8015e08:	6838      	ldr	r0, [r7, #0]
 8015e0a:	f00b ff88 	bl	8021d1e <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	7c9a      	ldrb	r2, [r3, #18]
 8015e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e14:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8015e16:	2300      	movs	r3, #0
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3720      	adds	r7, #32
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	607a      	str	r2, [r7, #4]
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	817b      	strh	r3, [r7, #10]
 8015e30:	4613      	mov	r3, r2
 8015e32:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	6858      	ldr	r0, [r3, #4]
 8015e38:	893a      	ldrh	r2, [r7, #8]
 8015e3a:	8979      	ldrh	r1, [r7, #10]
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	9301      	str	r3, [sp, #4]
 8015e40:	69bb      	ldr	r3, [r7, #24]
 8015e42:	9300      	str	r3, [sp, #0]
 8015e44:	4613      	mov	r3, r2
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	f7f9 f99c 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8015e4c:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3710      	adds	r7, #16
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}

08015e56 <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 8015e56:	b580      	push	{r7, lr}
 8015e58:	b08a      	sub	sp, #40	@ 0x28
 8015e5a:	af02      	add	r7, sp, #8
 8015e5c:	60f8      	str	r0, [r7, #12]
 8015e5e:	460b      	mov	r3, r1
 8015e60:	607a      	str	r2, [r7, #4]
 8015e62:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015e64:	2300      	movs	r3, #0
 8015e66:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	2201      	movs	r2, #1
 8015e72:	212e      	movs	r1, #46	@ 0x2e
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7f9 fd3b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	83fb      	strh	r3, [r7, #30]
 8015e7e:	8bfb      	ldrh	r3, [r7, #30]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d001      	beq.n	8015e88 <phpalI14443p3a_Sw_RequestAEx+0x32>
 8015e84:	8bfb      	ldrh	r3, [r7, #30]
 8015e86:	e0cc      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	2109      	movs	r1, #9
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7f9 fd2d 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015e96:	4603      	mov	r3, r0
 8015e98:	83fb      	strh	r3, [r7, #30]
 8015e9a:	8bfb      	ldrh	r3, [r7, #30]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d001      	beq.n	8015ea4 <phpalI14443p3a_Sw_RequestAEx+0x4e>
 8015ea0:	8bfb      	ldrh	r3, [r7, #30]
 8015ea2:	e0be      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	685b      	ldr	r3, [r3, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	210a      	movs	r1, #10
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7f9 fd1f 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	83fb      	strh	r3, [r7, #30]
 8015eb6:	8bfb      	ldrh	r3, [r7, #30]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d001      	beq.n	8015ec0 <phpalI14443p3a_Sw_RequestAEx+0x6a>
 8015ebc:	8bfb      	ldrh	r3, [r7, #30]
 8015ebe:	e0b0      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	2291      	movs	r2, #145	@ 0x91
 8015ec6:	210d      	movs	r1, #13
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7f9 fd11 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	83fb      	strh	r3, [r7, #30]
 8015ed2:	8bfb      	ldrh	r3, [r7, #30]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d001      	beq.n	8015edc <phpalI14443p3a_Sw_RequestAEx+0x86>
 8015ed8:	8bfb      	ldrh	r3, [r7, #30]
 8015eda:	e0a2      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	f107 0210 	add.w	r2, r7, #16
 8015ee4:	2106      	movs	r1, #6
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7fb f950 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8015eec:	4603      	mov	r3, r0
 8015eee:	83fb      	strh	r3, [r7, #30]
 8015ef0:	8bfb      	ldrh	r3, [r7, #30]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d001      	beq.n	8015efa <phpalI14443p3a_Sw_RequestAEx+0xa4>
 8015ef6:	8bfb      	ldrh	r3, [r7, #30]
 8015ef8:	e093      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	224c      	movs	r2, #76	@ 0x4c
 8015f00:	2106      	movs	r1, #6
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7f9 fcf4 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	83fb      	strh	r3, [r7, #30]
 8015f0c:	8bfb      	ldrh	r3, [r7, #30]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d001      	beq.n	8015f16 <phpalI14443p3a_Sw_RequestAEx+0xc0>
 8015f12:	8bfb      	ldrh	r3, [r7, #30]
 8015f14:	e085      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	685b      	ldr	r3, [r3, #4]
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	2101      	movs	r1, #1
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7f9 fce6 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015f24:	4603      	mov	r3, r0
 8015f26:	83fb      	strh	r3, [r7, #30]
 8015f28:	8bfb      	ldrh	r3, [r7, #30]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d001      	beq.n	8015f32 <phpalI14443p3a_Sw_RequestAEx+0xdc>
 8015f2e:	8bfb      	ldrh	r3, [r7, #30]
 8015f30:	e077      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	2200      	movs	r2, #0
 8015f38:	2102      	movs	r1, #2
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7f9 fcd8 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015f40:	4603      	mov	r3, r0
 8015f42:	83fb      	strh	r3, [r7, #30]
 8015f44:	8bfb      	ldrh	r3, [r7, #30]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d001      	beq.n	8015f4e <phpalI14443p3a_Sw_RequestAEx+0xf8>
 8015f4a:	8bfb      	ldrh	r3, [r7, #30]
 8015f4c:	e069      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	2207      	movs	r2, #7
 8015f54:	2103      	movs	r1, #3
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7f9 fcca 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	83fb      	strh	r3, [r7, #30]
 8015f60:	8bfb      	ldrh	r3, [r7, #30]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d001      	beq.n	8015f6a <phpalI14443p3a_Sw_RequestAEx+0x114>
 8015f66:	8bfb      	ldrh	r3, [r7, #30]
 8015f68:	e05b      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 8015f6a:	7afb      	ldrb	r3, [r7, #11]
 8015f6c:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	6858      	ldr	r0, [r3, #4]
 8015f72:	f107 0218 	add.w	r2, r7, #24
 8015f76:	f107 0312 	add.w	r3, r7, #18
 8015f7a:	9301      	str	r3, [sp, #4]
 8015f7c:	f107 0314 	add.w	r3, r7, #20
 8015f80:	9300      	str	r3, [sp, #0]
 8015f82:	2301      	movs	r3, #1
 8015f84:	2100      	movs	r1, #0
 8015f86:	f7f9 f8fd 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	8a3a      	ldrh	r2, [r7, #16]
 8015f94:	2106      	movs	r1, #6
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7f9 fcaa 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	83bb      	strh	r3, [r7, #28]
 8015fa0:	8bbb      	ldrh	r3, [r7, #28]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d001      	beq.n	8015faa <phpalI14443p3a_Sw_RequestAEx+0x154>
 8015fa6:	8bbb      	ldrh	r3, [r7, #28]
 8015fa8:	e03b      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 8015faa:	8bfb      	ldrh	r3, [r7, #30]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d001      	beq.n	8015fb4 <phpalI14443p3a_Sw_RequestAEx+0x15e>
 8015fb0:	8bfb      	ldrh	r3, [r7, #30]
 8015fb2:	e036      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 8015fb4:	8a7b      	ldrh	r3, [r7, #18]
 8015fb6:	2b02      	cmp	r3, #2
 8015fb8:	d12f      	bne.n	801601a <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	b29a      	uxth	r2, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	7d1b      	ldrb	r3, [r3, #20]
 8015fc8:	2b01      	cmp	r3, #1
 8015fca:	d109      	bne.n	8015fe0 <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d022      	beq.n	8016020 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8015fda:	f240 3306 	movw	r3, #774	@ 0x306
 8015fde:	e020      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	f003 031f 	and.w	r3, r3, #31
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d106      	bne.n	8015ffa <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	3301      	adds	r3, #1
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	f003 030f 	and.w	r3, r3, #15
 8015ff6:	2b0c      	cmp	r3, #12
 8015ff8:	d10c      	bne.n	8016014 <phpalI14443p3a_Sw_RequestAEx+0x1be>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	f003 030f 	and.w	r3, r3, #15
 8016004:	2b0c      	cmp	r3, #12
 8016006:	d10b      	bne.n	8016020 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	f003 031f 	and.w	r3, r3, #31
 8016010:	2b00      	cmp	r3, #0
 8016012:	d005      	beq.n	8016020 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8016014:	f240 3306 	movw	r3, #774	@ 0x306
 8016018:	e003      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801601a:	f240 3306 	movw	r3, #774	@ 0x306
 801601e:	e000      	b.n	8016022 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 8016020:	2300      	movs	r3, #0
}
 8016022:	4618      	mov	r0, r3
 8016024:	3720      	adds	r7, #32
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}

0801602a <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 801602a:	b580      	push	{r7, lr}
 801602c:	b084      	sub	sp, #16
 801602e:	af00      	add	r7, sp, #0
 8016030:	60f8      	str	r0, [r7, #12]
 8016032:	60b9      	str	r1, [r7, #8]
 8016034:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	7cdb      	ldrb	r3, [r3, #19]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d102      	bne.n	8016044 <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 801603e:	f240 3325 	movw	r3, #805	@ 0x325
 8016042:	e00d      	b.n	8016060 <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	f103 0108 	add.w	r1, r3, #8
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	7c9b      	ldrb	r3, [r3, #18]
 801604e:	461a      	mov	r2, r3
 8016050:	68b8      	ldr	r0, [r7, #8]
 8016052:	f00b fe64 	bl	8021d1e <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	7c9a      	ldrb	r2, [r3, #18]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8016068:	b480      	push	{r7}
 801606a:	b085      	sub	sp, #20
 801606c:	af00      	add	r7, sp, #0
 801606e:	60f8      	str	r0, [r7, #12]
 8016070:	460b      	mov	r3, r1
 8016072:	607a      	str	r2, [r7, #4]
 8016074:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 8016076:	897b      	ldrh	r3, [r7, #10]
 8016078:	2b2c      	cmp	r3, #44	@ 0x2c
 801607a:	d002      	beq.n	8016082 <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 801607c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8016080:	e051      	b.n	8016126 <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <phpalI14443p3b_Sw_Init+0x24>
 8016088:	2321      	movs	r3, #33	@ 0x21
 801608a:	e04c      	b.n	8016126 <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d101      	bne.n	8016096 <phpalI14443p3b_Sw_Init+0x2e>
 8016092:	2321      	movs	r3, #33	@ 0x21
 8016094:	e047      	b.n	8016126 <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f240 4201 	movw	r2, #1025	@ 0x401
 801609c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2200      	movs	r2, #0
 80160a8:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2200      	movs	r2, #0
 80160b4:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2200      	movs	r2, #0
 80160ba:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	2200      	movs	r2, #0
 80160c0:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2204      	movs	r2, #4
 80160c6:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2202      	movs	r2, #2
 80160cc:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	2200      	movs	r2, #0
 80160d2:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	2200      	movs	r2, #0
 80160d8:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	2200      	movs	r2, #0
 80160de:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2200      	movs	r2, #0
 80160e4:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2200      	movs	r2, #0
 80160ea:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80160f2:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2200      	movs	r2, #0
 80160f8:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2200      	movs	r2, #0
 80160fe:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	2200      	movs	r2, #0
 8016104:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2200      	movs	r2, #0
 801610a:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	2202      	movs	r2, #2
 8016110:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	2200      	movs	r2, #0
 8016118:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2201      	movs	r2, #1
 8016120:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 8016124:	2300      	movs	r3, #0
}
 8016126:	4618      	mov	r0, r3
 8016128:	3714      	adds	r7, #20
 801612a:	46bd      	mov	sp, r7
 801612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016130:	4770      	bx	lr
	...

08016134 <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 8016134:	b480      	push	{r7}
 8016136:	b083      	sub	sp, #12
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	460b      	mov	r3, r1
 801613e:	807b      	strh	r3, [r7, #2]
 8016140:	4613      	mov	r3, r2
 8016142:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8016144:	887b      	ldrh	r3, [r7, #2]
 8016146:	2b03      	cmp	r3, #3
 8016148:	d82c      	bhi.n	80161a4 <phpalI14443p3b_Sw_SetConfig+0x70>
 801614a:	a201      	add	r2, pc, #4	@ (adr r2, 8016150 <phpalI14443p3b_Sw_SetConfig+0x1c>)
 801614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016150:	08016161 	.word	0x08016161
 8016154:	0801616b 	.word	0x0801616b
 8016158:	08016177 	.word	0x08016177
 801615c:	08016183 	.word	0x08016183
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8016160:	883b      	ldrh	r3, [r7, #0]
 8016162:	b2da      	uxtb	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	759a      	strb	r2, [r3, #22]
        break;
 8016168:	e01f      	b.n	80161aa <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 801616a:	883b      	ldrh	r3, [r7, #0]
 801616c:	b2da      	uxtb	r2, r3
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 8016174:	e019      	b.n	80161aa <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 8016176:	883b      	ldrh	r3, [r7, #0]
 8016178:	b2da      	uxtb	r2, r3
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8016180:	e013      	b.n	80161aa <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8016182:	883b      	ldrh	r3, [r7, #0]
 8016184:	b2db      	uxtb	r3, r3
 8016186:	2b00      	cmp	r3, #0
 8016188:	d006      	beq.n	8016198 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 801618a:	883b      	ldrh	r3, [r7, #0]
 801618c:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 801618e:	2b01      	cmp	r3, #1
 8016190:	d002      	beq.n	8016198 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016192:	f240 4321 	movw	r3, #1057	@ 0x421
 8016196:	e009      	b.n	80161ac <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 8016198:	883b      	ldrh	r3, [r7, #0]
 801619a:	b2da      	uxtb	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 80161a2:	e002      	b.n	80161aa <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80161a4:	f240 4323 	movw	r3, #1059	@ 0x423
 80161a8:	e000      	b.n	80161ac <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 80161aa:	2300      	movs	r3, #0
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	370c      	adds	r7, #12
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr

080161b8 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 80161b8:	b480      	push	{r7}
 80161ba:	b085      	sub	sp, #20
 80161bc:	af00      	add	r7, sp, #0
 80161be:	60f8      	str	r0, [r7, #12]
 80161c0:	460b      	mov	r3, r1
 80161c2:	607a      	str	r2, [r7, #4]
 80161c4:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 80161c6:	897b      	ldrh	r3, [r7, #10]
 80161c8:	2b05      	cmp	r3, #5
 80161ca:	d828      	bhi.n	801621e <phpalI14443p3b_Sw_GetConfig+0x66>
 80161cc:	a201      	add	r2, pc, #4	@ (adr r2, 80161d4 <phpalI14443p3b_Sw_GetConfig+0x1c>)
 80161ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161d2:	bf00      	nop
 80161d4:	080161ed 	.word	0x080161ed
 80161d8:	0801621f 	.word	0x0801621f
 80161dc:	0801621f 	.word	0x0801621f
 80161e0:	080161f9 	.word	0x080161f9
 80161e4:	08016207 	.word	0x08016207
 80161e8:	08016213 	.word	0x08016213
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	7d9b      	ldrb	r3, [r3, #22]
 80161f0:	461a      	mov	r2, r3
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	801a      	strh	r2, [r3, #0]
        break;
 80161f6:	e015      	b.n	8016224 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80161fe:	461a      	mov	r2, r3
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	801a      	strh	r2, [r3, #0]
        break;
 8016204:	e00e      	b.n	8016224 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	7d1b      	ldrb	r3, [r3, #20]
 801620a:	461a      	mov	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	801a      	strh	r2, [r3, #0]
        break;
 8016210:	e008      	b.n	8016224 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	7d5b      	ldrb	r3, [r3, #21]
 8016216:	461a      	mov	r2, r3
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	801a      	strh	r2, [r3, #0]
        break;
 801621c:	e002      	b.n	8016224 <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801621e:	f240 4323 	movw	r3, #1059	@ 0x423
 8016222:	e000      	b.n	8016226 <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8016224:	2300      	movs	r3, #0
}
 8016226:	4618      	mov	r0, r3
 8016228:	3714      	adds	r7, #20
 801622a:	46bd      	mov	sp, r7
 801622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016230:	4770      	bx	lr
 8016232:	bf00      	nop

08016234 <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af04      	add	r7, sp, #16
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	4608      	mov	r0, r1
 801623e:	4611      	mov	r1, r2
 8016240:	461a      	mov	r2, r3
 8016242:	4603      	mov	r3, r0
 8016244:	70fb      	strb	r3, [r7, #3]
 8016246:	460b      	mov	r3, r1
 8016248:	70bb      	strb	r3, [r7, #2]
 801624a:	4613      	mov	r3, r2
 801624c:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 801624e:	78b9      	ldrb	r1, [r7, #2]
 8016250:	78fa      	ldrb	r2, [r7, #3]
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	9302      	str	r3, [sp, #8]
 8016256:	693b      	ldr	r3, [r7, #16]
 8016258:	9301      	str	r3, [sp, #4]
 801625a:	787b      	ldrb	r3, [r7, #1]
 801625c:	9300      	str	r3, [sp, #0]
 801625e:	460b      	mov	r3, r1
 8016260:	2100      	movs	r1, #0
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f000 fc54 	bl	8016b10 <phpalI14443p3b_Sw_RequestBEx>
 8016268:	4603      	mov	r3, r0
}
 801626a:	4618      	mov	r0, r3
 801626c:	3708      	adds	r7, #8
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}

08016272 <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 8016272:	b580      	push	{r7, lr}
 8016274:	b086      	sub	sp, #24
 8016276:	af04      	add	r7, sp, #16
 8016278:	6078      	str	r0, [r7, #4]
 801627a:	4608      	mov	r0, r1
 801627c:	4611      	mov	r1, r2
 801627e:	461a      	mov	r2, r3
 8016280:	4603      	mov	r3, r0
 8016282:	70fb      	strb	r3, [r7, #3]
 8016284:	460b      	mov	r3, r1
 8016286:	70bb      	strb	r3, [r7, #2]
 8016288:	4613      	mov	r3, r2
 801628a:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 801628c:	78b9      	ldrb	r1, [r7, #2]
 801628e:	78fa      	ldrb	r2, [r7, #3]
 8016290:	697b      	ldr	r3, [r7, #20]
 8016292:	9302      	str	r3, [sp, #8]
 8016294:	693b      	ldr	r3, [r7, #16]
 8016296:	9301      	str	r3, [sp, #4]
 8016298:	787b      	ldrb	r3, [r7, #1]
 801629a:	9300      	str	r3, [sp, #0]
 801629c:	460b      	mov	r3, r1
 801629e:	2101      	movs	r1, #1
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f000 fc35 	bl	8016b10 <phpalI14443p3b_Sw_RequestBEx>
 80162a6:	4603      	mov	r3, r0
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b08a      	sub	sp, #40	@ 0x28
 80162b4:	af02      	add	r7, sp, #8
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	607a      	str	r2, [r7, #4]
 80162ba:	603b      	str	r3, [r7, #0]
 80162bc:	460b      	mov	r3, r1
 80162be:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80162c0:	2300      	movs	r3, #0
 80162c2:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80162c4:	2300      	movs	r3, #0
 80162c6:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 80162c8:	7afb      	ldrb	r3, [r7, #11]
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d902      	bls.n	80162d4 <phpalI14443p3b_Sw_SlotMarker+0x24>
 80162ce:	7afb      	ldrb	r3, [r7, #11]
 80162d0:	2b10      	cmp	r3, #16
 80162d2:	d902      	bls.n	80162da <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80162d4:	f240 4321 	movw	r3, #1057	@ 0x421
 80162d8:	e026      	b.n	8016328 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 80162da:	7afb      	ldrb	r3, [r7, #11]
 80162dc:	3b01      	subs	r3, #1
 80162de:	b2db      	uxtb	r3, r3
 80162e0:	011b      	lsls	r3, r3, #4
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	f043 0305 	orr.w	r3, r3, #5
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	6858      	ldr	r0, [r3, #4]
 80162f0:	f107 021c 	add.w	r2, r7, #28
 80162f4:	f107 0316 	add.w	r3, r7, #22
 80162f8:	9301      	str	r3, [sp, #4]
 80162fa:	f107 0318 	add.w	r3, r7, #24
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	2301      	movs	r3, #1
 8016302:	2100      	movs	r1, #0
 8016304:	f7f8 ff3e 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8016308:	4603      	mov	r3, r0
 801630a:	83fb      	strh	r3, [r7, #30]
 801630c:	8bfb      	ldrh	r3, [r7, #30]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d001      	beq.n	8016316 <phpalI14443p3b_Sw_SlotMarker+0x66>
 8016312:	8bfb      	ldrh	r3, [r7, #30]
 8016314:	e008      	b.n	8016328 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8016316:	69b9      	ldr	r1, [r7, #24]
 8016318:	8afa      	ldrh	r2, [r7, #22]
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	9300      	str	r3, [sp, #0]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f000 fb31 	bl	8016988 <phpalI14443p3b_Sw_CheckATQBEx>
 8016326:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8016328:	4618      	mov	r0, r3
 801632a:	3720      	adds	r7, #32
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b088      	sub	sp, #32
 8016334:	af02      	add	r7, sp, #8
 8016336:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016338:	2300      	movs	r3, #0
 801633a:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801633c:	2300      	movs	r3, #0
 801633e:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	685b      	ldr	r3, [r3, #4]
 8016344:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8016348:	210d      	movs	r1, #13
 801634a:	4618      	mov	r0, r3
 801634c:	f7f9 fad0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016350:	4603      	mov	r3, r0
 8016352:	82fb      	strh	r3, [r7, #22]
 8016354:	8afb      	ldrh	r3, [r7, #22]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d001      	beq.n	801635e <phpalI14443p3b_Sw_HaltB+0x2e>
 801635a:	8afb      	ldrh	r3, [r7, #22]
 801635c:	e029      	b.n	80163b2 <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 801635e:	2350      	movs	r3, #80	@ 0x50
 8016360:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	3309      	adds	r3, #9
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6858      	ldr	r0, [r3, #4]
 8016370:	f107 0210 	add.w	r2, r7, #16
 8016374:	f107 030a 	add.w	r3, r7, #10
 8016378:	9301      	str	r3, [sp, #4]
 801637a:	f107 030c 	add.w	r3, r7, #12
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	2305      	movs	r3, #5
 8016382:	2100      	movs	r1, #0
 8016384:	f7f8 fefe 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8016388:	4603      	mov	r3, r0
 801638a:	82fb      	strh	r3, [r7, #22]
 801638c:	8afb      	ldrh	r3, [r7, #22]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d001      	beq.n	8016396 <phpalI14443p3b_Sw_HaltB+0x66>
 8016392:	8afb      	ldrh	r3, [r7, #22]
 8016394:	e00d      	b.n	80163b2 <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 8016396:	897b      	ldrh	r3, [r7, #10]
 8016398:	2b01      	cmp	r3, #1
 801639a:	d103      	bne.n	80163a4 <phpalI14443p3b_Sw_HaltB+0x74>
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d002      	beq.n	80163aa <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80163a4:	f240 4306 	movw	r3, #1030	@ 0x406
 80163a8:	e003      	b.n	80163b2 <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2200      	movs	r2, #0
 80163ae:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 80163b0:	2300      	movs	r3, #0
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	3718      	adds	r7, #24
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
 80163ba:	0000      	movs	r0, r0
 80163bc:	0000      	movs	r0, r0
	...

080163c0 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b090      	sub	sp, #64	@ 0x40
 80163c4:	af02      	add	r7, sp, #8
 80163c6:	60f8      	str	r0, [r7, #12]
 80163c8:	60b9      	str	r1, [r7, #8]
 80163ca:	4611      	mov	r1, r2
 80163cc:	461a      	mov	r2, r3
 80163ce:	460b      	mov	r3, r1
 80163d0:	71fb      	strb	r3, [r7, #7]
 80163d2:	4613      	mov	r3, r2
 80163d4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80163d6:	2300      	movs	r3, #0
 80163d8:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 80163de:	2300      	movs	r3, #0
 80163e0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 80163e4:	2300      	movs	r3, #0
 80163e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 80163e8:	2300      	movs	r3, #0
 80163ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 80163ec:	f04f 0300 	mov.w	r3, #0
 80163f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 80163f2:	79fb      	ldrb	r3, [r7, #7]
 80163f4:	2b0c      	cmp	r3, #12
 80163f6:	d005      	beq.n	8016404 <phpalI14443p3b_Sw_Attrib+0x44>
 80163f8:	79fb      	ldrb	r3, [r7, #7]
 80163fa:	2b0d      	cmp	r3, #13
 80163fc:	d002      	beq.n	8016404 <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80163fe:	f240 4321 	movw	r3, #1057	@ 0x421
 8016402:	e295      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 8016404:	79bb      	ldrb	r3, [r7, #6]
 8016406:	2b0c      	cmp	r3, #12
 8016408:	d807      	bhi.n	801641a <phpalI14443p3b_Sw_Attrib+0x5a>
 801640a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801640e:	2b03      	cmp	r3, #3
 8016410:	d803      	bhi.n	801641a <phpalI14443p3b_Sw_Attrib+0x5a>
 8016412:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8016416:	2b03      	cmp	r3, #3
 8016418:	d902      	bls.n	8016420 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801641a:	f240 4321 	movw	r3, #1057	@ 0x421
 801641e:	e287      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8016420:	79bb      	ldrb	r3, [r7, #6]
 8016422:	2b07      	cmp	r3, #7
 8016424:	d807      	bhi.n	8016436 <phpalI14443p3b_Sw_Attrib+0x76>
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801642c:	2b01      	cmp	r3, #1
 801642e:	d102      	bne.n	8016436 <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016430:	f240 4321 	movw	r3, #1057	@ 0x421
 8016434:	e27c      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 8016436:	231d      	movs	r3, #29
 8016438:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	3301      	adds	r3, #1
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	7d9b      	ldrb	r3, [r3, #22]
 8016448:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 801644c:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8016450:	019b      	lsls	r3, r3, #6
 8016452:	b25a      	sxtb	r2, r3
 8016454:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8016458:	011b      	lsls	r3, r3, #4
 801645a:	b25b      	sxtb	r3, r3
 801645c:	4313      	orrs	r3, r2
 801645e:	b25a      	sxtb	r2, r3
 8016460:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016464:	4313      	orrs	r3, r2
 8016466:	b25b      	sxtb	r3, r3
 8016468:	b2db      	uxtb	r3, r3
 801646a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016474:	2b01      	cmp	r3, #1
 8016476:	d108      	bne.n	801648a <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	330a      	adds	r3, #10
 801647c:	781b      	ldrb	r3, [r3, #0]
 801647e:	f003 0301 	and.w	r3, r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016488:	e007      	b.n	801649a <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	330a      	adds	r3, #10
 801648e:	781b      	ldrb	r3, [r3, #0]
 8016490:	f003 0307 	and.w	r3, r3, #7
 8016494:	b2db      	uxtb	r3, r3
 8016496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	330b      	adds	r3, #11
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	f003 0301 	and.w	r3, r3, #1
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d006      	beq.n	80164b6 <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 80164a8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80164ac:	2b0e      	cmp	r3, #14
 80164ae:	d905      	bls.n	80164bc <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80164b0:	f240 4321 	movw	r3, #1057	@ 0x421
 80164b4:	e23c      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 80164b6:	2300      	movs	r3, #0
 80164b8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 80164bc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80164c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	330b      	adds	r3, #11
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	091b      	lsrs	r3, r3, #4
 80164cc:	b2da      	uxtb	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	7c5b      	ldrb	r3, [r3, #17]
 80164d6:	2b0f      	cmp	r3, #15
 80164d8:	d102      	bne.n	80164e0 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2204      	movs	r2, #4
 80164de:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	7c5b      	ldrb	r3, [r3, #17]
 80164e4:	461a      	mov	r2, r3
 80164e6:	2301      	movs	r3, #1
 80164e8:	4093      	lsls	r3, r2
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7ea f80a 	bl	8000504 <__aeabi_ui2d>
 80164f0:	a3ab      	add	r3, pc, #684	@ (adr r3, 80167a0 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 80164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f6:	f7ea f87f 	bl	80005f8 <__aeabi_dmul>
 80164fa:	4602      	mov	r2, r0
 80164fc:	460b      	mov	r3, r1
 80164fe:	4610      	mov	r0, r2
 8016500:	4619      	mov	r1, r3
 8016502:	f7ea fb51 	bl	8000ba8 <__aeabi_d2f>
 8016506:	4603      	mov	r3, r0
 8016508:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016510:	2b03      	cmp	r3, #3
 8016512:	d108      	bne.n	8016526 <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 8016514:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016518:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8016790 <phpalI14443p3b_Sw_Attrib+0x3d0>
 801651c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016520:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8016524:	e014      	b.n	8016550 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 8016526:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801652a:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8016794 <phpalI14443p3b_Sw_Attrib+0x3d4>
 801652e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016532:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801653c:	2b01      	cmp	r3, #1
 801653e:	d107      	bne.n	8016550 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 8016540:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016544:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8016798 <phpalI14443p3b_Sw_Attrib+0x3d8>
 8016548:	ee77 7a87 	vadd.f32	s15, s15, s14
 801654c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 8016550:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016558:	ee17 3a90 	vmov	r3, s15
 801655c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 801655e:	79fb      	ldrb	r3, [r7, #7]
 8016560:	2b0d      	cmp	r3, #13
 8016562:	d10e      	bne.n	8016582 <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 801656c:	210d      	movs	r1, #13
 801656e:	4618      	mov	r0, r3
 8016570:	f7f9 f9be 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016574:	4603      	mov	r3, r0
 8016576:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016578:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801657a:	2b00      	cmp	r3, #0
 801657c:	d029      	beq.n	80165d2 <phpalI14443p3b_Sw_Attrib+0x212>
 801657e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016580:	e1d6      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8016582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016588:	d314      	bcc.n	80165b4 <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	6858      	ldr	r0, [r3, #4]
 801658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016590:	4a82      	ldr	r2, [pc, #520]	@ (801679c <phpalI14443p3b_Sw_Attrib+0x3dc>)
 8016592:	fba2 2303 	umull	r2, r3, r2, r3
 8016596:	099b      	lsrs	r3, r3, #6
 8016598:	b29b      	uxth	r3, r3
 801659a:	3301      	adds	r3, #1
 801659c:	b29b      	uxth	r3, r3
 801659e:	461a      	mov	r2, r3
 80165a0:	210e      	movs	r1, #14
 80165a2:	f7f9 f9a5 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80165a6:	4603      	mov	r3, r0
 80165a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80165aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d010      	beq.n	80165d2 <phpalI14443p3b_Sw_Attrib+0x212>
 80165b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80165b2:	e1bd      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	685b      	ldr	r3, [r3, #4]
 80165b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80165ba:	b292      	uxth	r2, r2
 80165bc:	210d      	movs	r1, #13
 80165be:	4618      	mov	r0, r3
 80165c0:	f7f9 f996 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80165c4:	4603      	mov	r3, r0
 80165c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80165c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d001      	beq.n	80165d2 <phpalI14443p3b_Sw_Attrib+0x212>
 80165ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80165d0:	e1ae      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 80165d2:	2300      	movs	r3, #0
 80165d4:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	6858      	ldr	r0, [r3, #4]
 80165da:	f107 021c 	add.w	r2, r7, #28
 80165de:	f107 0316 	add.w	r3, r7, #22
 80165e2:	9301      	str	r3, [sp, #4]
 80165e4:	f107 0318 	add.w	r3, r7, #24
 80165e8:	9300      	str	r3, [sp, #0]
 80165ea:	2309      	movs	r3, #9
 80165ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80165f0:	f7f8 fdc8 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80165f4:	4603      	mov	r3, r0
 80165f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80165f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d001      	beq.n	8016602 <phpalI14443p3b_Sw_Attrib+0x242>
 80165fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016600:	e196      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	6858      	ldr	r0, [r3, #4]
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	699a      	ldr	r2, [r3, #24]
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	8bd9      	ldrh	r1, [r3, #30]
 801660e:	f107 0316 	add.w	r3, r7, #22
 8016612:	9301      	str	r3, [sp, #4]
 8016614:	f107 0318 	add.w	r3, r7, #24
 8016618:	9300      	str	r3, [sp, #0]
 801661a:	460b      	mov	r3, r1
 801661c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016620:	f7f8 fdb0 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8016624:	4603      	mov	r3, r0
 8016626:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 801662e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8016632:	e04d      	b.n	80166d0 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801663a:	2b01      	cmp	r3, #1
 801663c:	d118      	bne.n	8016670 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 801663e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016640:	b2db      	uxtb	r3, r3
 8016642:	2b01      	cmp	r3, #1
 8016644:	d003      	beq.n	801664e <phpalI14443p3b_Sw_Attrib+0x28e>
 8016646:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016648:	b2db      	uxtb	r3, r3
 801664a:	2b11      	cmp	r3, #17
 801664c:	d10e      	bne.n	801666c <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8016656:	2100      	movs	r1, #0
 8016658:	4618      	mov	r0, r3
 801665a:	f7f9 f88f 	bl	800f77c <phhalHw_Pn5180_Wait>
 801665e:	4603      	mov	r3, r0
 8016660:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016662:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016664:	2b00      	cmp	r3, #0
 8016666:	d003      	beq.n	8016670 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8016668:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801666a:	e161      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 801666c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801666e:	e15f      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8016670:	2300      	movs	r3, #0
 8016672:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	6858      	ldr	r0, [r3, #4]
 8016678:	f107 021c 	add.w	r2, r7, #28
 801667c:	f107 0316 	add.w	r3, r7, #22
 8016680:	9301      	str	r3, [sp, #4]
 8016682:	f107 0318 	add.w	r3, r7, #24
 8016686:	9300      	str	r3, [sp, #0]
 8016688:	2309      	movs	r3, #9
 801668a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801668e:	f7f8 fd79 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8016692:	4603      	mov	r3, r0
 8016694:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016696:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016698:	2b00      	cmp	r3, #0
 801669a:	d001      	beq.n	80166a0 <phpalI14443p3b_Sw_Attrib+0x2e0>
 801669c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801669e:	e147      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	6858      	ldr	r0, [r3, #4]
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	699a      	ldr	r2, [r3, #24]
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	8bd9      	ldrh	r1, [r3, #30]
 80166ac:	f107 0316 	add.w	r3, r7, #22
 80166b0:	9301      	str	r3, [sp, #4]
 80166b2:	f107 0318 	add.w	r3, r7, #24
 80166b6:	9300      	str	r3, [sp, #0]
 80166b8:	460b      	mov	r3, r1
 80166ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80166be:	f7f8 fd61 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80166c2:	4603      	mov	r3, r0
 80166c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 80166c6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80166ca:	3b01      	subs	r3, #1
 80166cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 80166d0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d003      	beq.n	80166e0 <phpalI14443p3b_Sw_Attrib+0x320>
 80166d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d1a9      	bne.n	8016634 <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 80166e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d001      	beq.n	80166ea <phpalI14443p3b_Sw_Attrib+0x32a>
 80166e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80166e8:	e122      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 80166ea:	8afb      	ldrh	r3, [r7, #22]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d102      	bne.n	80166f6 <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80166f0:	f240 4306 	movw	r3, #1030	@ 0x406
 80166f4:	e11c      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 80166f6:	68bb      	ldr	r3, [r7, #8]
 80166f8:	330b      	adds	r3, #11
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	f003 0301 	and.w	r3, r3, #1
 8016700:	2b00      	cmp	r3, #0
 8016702:	d00a      	beq.n	801671a <phpalI14443p3b_Sw_Attrib+0x35a>
 8016704:	69bb      	ldr	r3, [r7, #24]
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	f003 020f 	and.w	r2, r3, #15
 801670c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016710:	429a      	cmp	r2, r3
 8016712:	d002      	beq.n	801671a <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8016714:	f240 4306 	movw	r3, #1030	@ 0x406
 8016718:	e10a      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016720:	2b03      	cmp	r3, #3
 8016722:	d00f      	beq.n	8016744 <phpalI14443p3b_Sw_Attrib+0x384>
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	330b      	adds	r3, #11
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	f003 0301 	and.w	r3, r3, #1
 801672e:	2b00      	cmp	r3, #0
 8016730:	d108      	bne.n	8016744 <phpalI14443p3b_Sw_Attrib+0x384>
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	f003 030f 	and.w	r3, r3, #15
 801673a:	2b00      	cmp	r3, #0
 801673c:	d002      	beq.n	8016744 <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801673e:	f240 4306 	movw	r3, #1030	@ 0x406
 8016742:	e0f5      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	091b      	lsrs	r3, r3, #4
 801674a:	b2da      	uxtb	r2, r3
 801674c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801674e:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 8016750:	8afb      	ldrh	r3, [r7, #22]
 8016752:	2b01      	cmp	r3, #1
 8016754:	d931      	bls.n	80167ba <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 8016756:	8afb      	ldrh	r3, [r7, #22]
 8016758:	3b01      	subs	r3, #1
 801675a:	b29a      	uxth	r2, r3
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	8bdb      	ldrh	r3, [r3, #30]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d105      	bne.n	8016774 <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	2200      	movs	r2, #0
 801676c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801676e:	f240 4306 	movw	r3, #1030	@ 0x406
 8016772:	e0dd      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801677c:	429a      	cmp	r2, r3
 801677e:	d913      	bls.n	80167a8 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2200      	movs	r2, #0
 8016784:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 8016786:	f240 4304 	movw	r3, #1028	@ 0x404
 801678a:	e0d1      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
 801678c:	f3af 8000 	nop.w
 8016790:	427c0000 	.word	0x427c0000
 8016794:	4566a000 	.word	0x4566a000
 8016798:	447a0000 	.word	0x447a0000
 801679c:	10624dd3 	.word	0x10624dd3
 80167a0:	d12e109d 	.word	0xd12e109d
 80167a4:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	6a18      	ldr	r0, [r3, #32]
 80167ac:	69bb      	ldr	r3, [r7, #24]
 80167ae:	1c59      	adds	r1, r3, #1
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80167b4:	461a      	mov	r2, r3
 80167b6:	f00b fab2 	bl	8021d1e <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80167c0:	2b03      	cmp	r3, #3
 80167c2:	d006      	beq.n	80167d2 <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	2200      	movs	r2, #0
 80167c8:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2200      	movs	r2, #0
 80167ce:	73da      	strb	r2, [r3, #15]
 80167d0:	e011      	b.n	80167f6 <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	330b      	adds	r3, #11
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	f003 0301 	and.w	r3, r3, #1
 80167dc:	b2da      	uxtb	r2, r3
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	330b      	adds	r3, #11
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	085b      	lsrs	r3, r3, #1
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	f003 0301 	and.w	r3, r3, #1
 80167f0:	b2da      	uxtb	r2, r3
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 80167f6:	69bb      	ldr	r3, [r7, #24]
 80167f8:	781b      	ldrb	r3, [r3, #0]
 80167fa:	f003 030f 	and.w	r3, r3, #15
 80167fe:	b2da      	uxtb	r2, r3
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	330a      	adds	r3, #10
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	091b      	lsrs	r3, r3, #4
 801680c:	b2da      	uxtb	r2, r3
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	79ba      	ldrb	r2, [r7, #6]
 8016816:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801681e:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8016826:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 8016828:	2300      	movs	r3, #0
 801682a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 801682e:	79fb      	ldrb	r3, [r7, #7]
 8016830:	2b0d      	cmp	r3, #13
 8016832:	d125      	bne.n	8016880 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8016834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801683a:	d312      	bcc.n	8016862 <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	6858      	ldr	r0, [r3, #4]
 8016840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016842:	4a3d      	ldr	r2, [pc, #244]	@ (8016938 <phpalI14443p3b_Sw_Attrib+0x578>)
 8016844:	fba2 2303 	umull	r2, r3, r2, r3
 8016848:	099b      	lsrs	r3, r3, #6
 801684a:	b29b      	uxth	r3, r3
 801684c:	461a      	mov	r2, r3
 801684e:	210e      	movs	r1, #14
 8016850:	f7f9 f84e 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016854:	4603      	mov	r3, r0
 8016856:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016858:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801685a:	2b00      	cmp	r3, #0
 801685c:	d010      	beq.n	8016880 <phpalI14443p3b_Sw_Attrib+0x4c0>
 801685e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016860:	e066      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016868:	b292      	uxth	r2, r2
 801686a:	210d      	movs	r1, #13
 801686c:	4618      	mov	r0, r3
 801686e:	f7f9 f83f 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016872:	4603      	mov	r3, r0
 8016874:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016876:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016878:	2b00      	cmp	r3, #0
 801687a:	d001      	beq.n	8016880 <phpalI14443p3b_Sw_Attrib+0x4c0>
 801687c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801687e:	e057      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 8016880:	68f8      	ldr	r0, [r7, #12]
 8016882:	f000 f9ef 	bl	8016c64 <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 8016886:	4603      	mov	r3, r0
 8016888:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801688a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801688c:	2b00      	cmp	r3, #0
 801688e:	d001      	beq.n	8016894 <phpalI14443p3b_Sw_Attrib+0x4d4>
 8016890:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016892:	e04d      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	6858      	ldr	r0, [r3, #4]
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	8b9b      	ldrh	r3, [r3, #28]
 801689c:	461a      	mov	r2, r3
 801689e:	2107      	movs	r1, #7
 80168a0:	f7f9 f826 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80168a4:	4603      	mov	r3, r0
 80168a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80168a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d001      	beq.n	80168b2 <phpalI14443p3b_Sw_Attrib+0x4f2>
 80168ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80168b0:	e03e      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 80168b2:	79fb      	ldrb	r3, [r7, #7]
 80168b4:	2b0d      	cmp	r3, #13
 80168b6:	d13a      	bne.n	801692e <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	330c      	adds	r3, #12
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	091b      	lsrs	r3, r3, #4
 80168c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 80168c4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80168c8:	2b0f      	cmp	r3, #15
 80168ca:	d102      	bne.n	80168d2 <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 80168cc:	2300      	movs	r3, #0
 80168ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 80168d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80168d6:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80168da:	fa02 f303 	lsl.w	r3, r2, r3
 80168de:	333f      	adds	r3, #63	@ 0x3f
 80168e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 80168e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80168e8:	d312      	bcc.n	8016910 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	6858      	ldr	r0, [r3, #4]
 80168ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168f0:	4a11      	ldr	r2, [pc, #68]	@ (8016938 <phpalI14443p3b_Sw_Attrib+0x578>)
 80168f2:	fba2 2303 	umull	r2, r3, r2, r3
 80168f6:	099b      	lsrs	r3, r3, #6
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	461a      	mov	r2, r3
 80168fc:	2101      	movs	r1, #1
 80168fe:	f7f8 ff3d 	bl	800f77c <phhalHw_Pn5180_Wait>
 8016902:	4603      	mov	r3, r0
 8016904:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016906:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016908:	2b00      	cmp	r3, #0
 801690a:	d010      	beq.n	801692e <phpalI14443p3b_Sw_Attrib+0x56e>
 801690c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801690e:	e00f      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016916:	b292      	uxth	r2, r2
 8016918:	2100      	movs	r1, #0
 801691a:	4618      	mov	r0, r3
 801691c:	f7f8 ff2e 	bl	800f77c <phhalHw_Pn5180_Wait>
 8016920:	4603      	mov	r3, r0
 8016922:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016924:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016926:	2b00      	cmp	r3, #0
 8016928:	d001      	beq.n	801692e <phpalI14443p3b_Sw_Attrib+0x56e>
 801692a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801692c:	e000      	b.n	8016930 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 801692e:	2300      	movs	r3, #0
}
 8016930:	4618      	mov	r0, r3
 8016932:	3738      	adds	r7, #56	@ 0x38
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}
 8016938:	10624dd3 	.word	0x10624dd3

0801693c <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 801693c:	b480      	push	{r7}
 801693e:	b085      	sub	sp, #20
 8016940:	af00      	add	r7, sp, #0
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
 8016948:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	7b9a      	ldrb	r2, [r3, #14]
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	7c1a      	ldrb	r2, [r3, #16]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	7bda      	ldrb	r2, [r3, #15]
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	7c5a      	ldrb	r2, [r3, #17]
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	7cda      	ldrb	r2, [r3, #19]
 801696e:	69fb      	ldr	r3, [r7, #28]
 8016970:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	7c9a      	ldrb	r2, [r3, #18]
 8016976:	6a3b      	ldr	r3, [r7, #32]
 8016978:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801697a:	2300      	movs	r3, #0
}
 801697c:	4618      	mov	r0, r3
 801697e:	3714      	adds	r7, #20
 8016980:	46bd      	mov	sp, r7
 8016982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016986:	4770      	bx	lr

08016988 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b086      	sub	sp, #24
 801698c:	af00      	add	r7, sp, #0
 801698e:	60f8      	str	r0, [r7, #12]
 8016990:	60b9      	str	r1, [r7, #8]
 8016992:	603b      	str	r3, [r7, #0]
 8016994:	4613      	mov	r3, r2
 8016996:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 8016998:	88fb      	ldrh	r3, [r7, #6]
 801699a:	2b0c      	cmp	r3, #12
 801699c:	d005      	beq.n	80169aa <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 801699e:	88fb      	ldrh	r3, [r7, #6]
 80169a0:	2b0d      	cmp	r3, #13
 80169a2:	d002      	beq.n	80169aa <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80169a4:	f240 4306 	movw	r3, #1030	@ 0x406
 80169a8:	e0ae      	b.n	8016b08 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 80169aa:	68bb      	ldr	r3, [r7, #8]
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	2b50      	cmp	r3, #80	@ 0x50
 80169b0:	d002      	beq.n	80169b8 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80169b2:	f240 4306 	movw	r3, #1030	@ 0x406
 80169b6:	e0a7      	b.n	8016b08 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 80169b8:	88fb      	ldrh	r3, [r7, #6]
 80169ba:	461a      	mov	r2, r3
 80169bc:	68b9      	ldr	r1, [r7, #8]
 80169be:	6838      	ldr	r0, [r7, #0]
 80169c0:	f00b f9ad 	bl	8021d1e <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 80169c4:	88fb      	ldrh	r3, [r7, #6]
 80169c6:	b2da      	uxtb	r2, r3
 80169c8:	6a3b      	ldr	r3, [r7, #32]
 80169ca:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169d2:	2b02      	cmp	r3, #2
 80169d4:	d013      	beq.n	80169fe <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	330a      	adds	r3, #10
 80169da:	781b      	ldrb	r3, [r3, #0]
 80169dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80169e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80169e2:	d91f      	bls.n	8016a24 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	330a      	adds	r3, #10
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	f003 030f 	and.w	r3, r3, #15
 80169ee:	b2da      	uxtb	r2, r3
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	330a      	adds	r3, #10
 80169f4:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80169f8:	b2d2      	uxtb	r2, r2
 80169fa:	701a      	strb	r2, [r3, #0]
 80169fc:	e012      	b.n	8016a24 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	330a      	adds	r3, #10
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016a08:	2b80      	cmp	r3, #128	@ 0x80
 8016a0a:	d90b      	bls.n	8016a24 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	330a      	adds	r3, #10
 8016a10:	781b      	ldrb	r3, [r3, #0]
 8016a12:	f003 030f 	and.w	r3, r3, #15
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	330a      	adds	r3, #10
 8016a1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8016a20:	b2d2      	uxtb	r2, r2
 8016a22:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a2a:	2b01      	cmp	r3, #1
 8016a2c:	d109      	bne.n	8016a42 <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	330a      	adds	r3, #10
 8016a32:	781b      	ldrb	r3, [r3, #0]
 8016a34:	f003 0308 	and.w	r3, r3, #8
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d002      	beq.n	8016a42 <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8016a3c:	f240 4306 	movw	r3, #1030	@ 0x406
 8016a40:	e062      	b.n	8016b08 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a48:	2b03      	cmp	r3, #3
 8016a4a:	d132      	bne.n	8016ab2 <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	330a      	adds	r3, #10
 8016a50:	781b      	ldrb	r3, [r3, #0]
 8016a52:	085b      	lsrs	r3, r3, #1
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	f003 0303 	and.w	r3, r3, #3
 8016a5a:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 8016a5c:	7d7b      	ldrb	r3, [r7, #21]
 8016a5e:	2b02      	cmp	r3, #2
 8016a60:	d00e      	beq.n	8016a80 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 8016a62:	2b02      	cmp	r3, #2
 8016a64:	dc11      	bgt.n	8016a8a <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d002      	beq.n	8016a70 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d004      	beq.n	8016a78 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 8016a6e:	e00c      	b.n	8016a8a <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2285      	movs	r2, #133	@ 0x85
 8016a74:	839a      	strh	r2, [r3, #28]
            break;
 8016a76:	e00d      	b.n	8016a94 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	22f6      	movs	r2, #246	@ 0xf6
 8016a7c:	839a      	strh	r2, [r3, #28]
            break;
 8016a7e:	e009      	b.n	8016a94 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f240 128d 	movw	r2, #397	@ 0x18d
 8016a86:	839a      	strh	r2, [r3, #28]
            break;
 8016a88:	e004      	b.n	8016a94 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8016a90:	839a      	strh	r2, [r3, #28]
            break;
 8016a92:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6858      	ldr	r0, [r3, #4]
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	8b9b      	ldrh	r3, [r3, #28]
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	2107      	movs	r1, #7
 8016aa0:	f7f8 ff26 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	82fb      	strh	r3, [r7, #22]
 8016aa8:	8afb      	ldrh	r3, [r7, #22]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d022      	beq.n	8016af4 <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8016aae:	8afb      	ldrh	r3, [r7, #22]
 8016ab0:	e02a      	b.n	8016b08 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	330a      	adds	r3, #10
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	085b      	lsrs	r3, r3, #1
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	f003 0303 	and.w	r3, r3, #3
 8016ac0:	b2db      	uxtb	r3, r3
 8016ac2:	2b03      	cmp	r3, #3
 8016ac4:	d112      	bne.n	8016aec <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8016acc:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8016ad6:	2107      	movs	r1, #7
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7f8 ff09 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	82fb      	strh	r3, [r7, #22]
 8016ae2:	8afb      	ldrh	r3, [r7, #22]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d005      	beq.n	8016af4 <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8016ae8:	8afb      	ldrh	r3, [r7, #22]
 8016aea:	e00d      	b.n	8016b08 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8016af2:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	3309      	adds	r3, #9
 8016af8:	683a      	ldr	r2, [r7, #0]
 8016afa:	3201      	adds	r2, #1
 8016afc:	6812      	ldr	r2, [r2, #0]
 8016afe:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	2201      	movs	r2, #1
 8016b04:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8016b06:	2300      	movs	r3, #0
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3718      	adds	r7, #24
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b088      	sub	sp, #32
 8016b14:	af02      	add	r7, sp, #8
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	4608      	mov	r0, r1
 8016b1a:	4611      	mov	r1, r2
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	4603      	mov	r3, r0
 8016b20:	70fb      	strb	r3, [r7, #3]
 8016b22:	460b      	mov	r3, r1
 8016b24:	70bb      	strb	r3, [r7, #2]
 8016b26:	4613      	mov	r3, r2
 8016b28:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 8016b32:	78bb      	ldrb	r3, [r7, #2]
 8016b34:	2b04      	cmp	r3, #4
 8016b36:	d902      	bls.n	8016b3e <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016b38:	f240 4321 	movw	r3, #1057	@ 0x421
 8016b3c:	e08d      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 8016b3e:	2305      	movs	r3, #5
 8016b40:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 8016b42:	787b      	ldrb	r3, [r7, #1]
 8016b44:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 8016b46:	78bb      	ldrb	r3, [r7, #2]
 8016b48:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 8016b4a:	78fb      	ldrb	r3, [r7, #3]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d004      	beq.n	8016b5a <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 8016b50:	7cbb      	ldrb	r3, [r7, #18]
 8016b52:	f043 0308 	orr.w	r3, r3, #8
 8016b56:	b2db      	uxtb	r3, r3
 8016b58:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 8016b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d004      	beq.n	8016b6c <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 8016b62:	7cbb      	ldrb	r3, [r7, #18]
 8016b64:	f043 0310 	orr.w	r3, r3, #16
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016b72:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2200      	movs	r2, #0
 8016b78:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	2200      	movs	r2, #0
 8016b80:	2109      	movs	r1, #9
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7f8 feb4 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	82fb      	strh	r3, [r7, #22]
 8016b8c:	8afb      	ldrh	r3, [r7, #22]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d001      	beq.n	8016b96 <phpalI14443p3b_Sw_RequestBEx+0x86>
 8016b92:	8afb      	ldrh	r3, [r7, #22]
 8016b94:	e061      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	210a      	movs	r1, #10
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7f8 fea6 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	82fb      	strh	r3, [r7, #22]
 8016ba8:	8afb      	ldrh	r3, [r7, #22]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d001      	beq.n	8016bb2 <phpalI14443p3b_Sw_RequestBEx+0xa2>
 8016bae:	8afb      	ldrh	r3, [r7, #22]
 8016bb0:	e053      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d10e      	bne.n	8016bda <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	f240 22d6 	movw	r2, #726	@ 0x2d6
 8016bc4:	210d      	movs	r1, #13
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7f8 fe92 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	82fb      	strh	r3, [r7, #22]
 8016bd0:	8afb      	ldrh	r3, [r7, #22]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d023      	beq.n	8016c1e <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8016bd6:	8afb      	ldrh	r3, [r7, #22]
 8016bd8:	e03f      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016be0:	2b03      	cmp	r3, #3
 8016be2:	d10e      	bne.n	8016c02 <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	685b      	ldr	r3, [r3, #4]
 8016be8:	f240 2297 	movw	r2, #663	@ 0x297
 8016bec:	210d      	movs	r1, #13
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7f8 fe7e 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	82fb      	strh	r3, [r7, #22]
 8016bf8:	8afb      	ldrh	r3, [r7, #22]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d00f      	beq.n	8016c1e <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8016bfe:	8afb      	ldrh	r3, [r7, #22]
 8016c00:	e02b      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	685b      	ldr	r3, [r3, #4]
 8016c06:	2211      	movs	r2, #17
 8016c08:	210e      	movs	r1, #14
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7f8 fe70 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016c10:	4603      	mov	r3, r0
 8016c12:	82fb      	strh	r3, [r7, #22]
 8016c14:	8afb      	ldrh	r3, [r7, #22]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d001      	beq.n	8016c1e <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8016c1a:	8afb      	ldrh	r3, [r7, #22]
 8016c1c:	e01d      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6858      	ldr	r0, [r3, #4]
 8016c22:	f107 0210 	add.w	r2, r7, #16
 8016c26:	f107 030a 	add.w	r3, r7, #10
 8016c2a:	9301      	str	r3, [sp, #4]
 8016c2c:	f107 030c 	add.w	r3, r7, #12
 8016c30:	9300      	str	r3, [sp, #0]
 8016c32:	2303      	movs	r3, #3
 8016c34:	2100      	movs	r1, #0
 8016c36:	f7f8 faa5 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	82fb      	strh	r3, [r7, #22]
 8016c3e:	8afb      	ldrh	r3, [r7, #22]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d001      	beq.n	8016c48 <phpalI14443p3b_Sw_RequestBEx+0x138>
 8016c44:	8afb      	ldrh	r3, [r7, #22]
 8016c46:	e008      	b.n	8016c5a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8016c48:	68f9      	ldr	r1, [r7, #12]
 8016c4a:	897a      	ldrh	r2, [r7, #10]
 8016c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c4e:	9300      	str	r3, [sp, #0]
 8016c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f7ff fe98 	bl	8016988 <phpalI14443p3b_Sw_CheckATQBEx>
 8016c58:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3718      	adds	r7, #24
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
	...

08016c64 <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b084      	sub	sp, #16
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	7d1b      	ldrb	r3, [r3, #20]
 8016c70:	2b03      	cmp	r3, #3
 8016c72:	d817      	bhi.n	8016ca4 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 8016c74:	a201      	add	r2, pc, #4	@ (adr r2, 8016c7c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 8016c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c7a:	bf00      	nop
 8016c7c:	08016c8d 	.word	0x08016c8d
 8016c80:	08016c93 	.word	0x08016c93
 8016c84:	08016c99 	.word	0x08016c99
 8016c88:	08016c9f 	.word	0x08016c9f
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	81fb      	strh	r3, [r7, #14]
        break;
 8016c90:	e00b      	b.n	8016caa <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 8016c92:	2301      	movs	r3, #1
 8016c94:	81fb      	strh	r3, [r7, #14]
        break;
 8016c96:	e008      	b.n	8016caa <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8016c98:	2302      	movs	r3, #2
 8016c9a:	81fb      	strh	r3, [r7, #14]
        break;
 8016c9c:	e005      	b.n	8016caa <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8016c9e:	2303      	movs	r3, #3
 8016ca0:	81fb      	strh	r3, [r7, #14]
        break;
 8016ca2:	e002      	b.n	8016caa <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016ca4:	f240 4321 	movw	r3, #1057	@ 0x421
 8016ca8:	e03a      	b.n	8016d20 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	7d5b      	ldrb	r3, [r3, #21]
 8016cae:	2b03      	cmp	r3, #3
 8016cb0:	d816      	bhi.n	8016ce0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 8016cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8016cb8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 8016cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cb8:	08016cc9 	.word	0x08016cc9
 8016cbc:	08016ccf 	.word	0x08016ccf
 8016cc0:	08016cd5 	.word	0x08016cd5
 8016cc4:	08016cdb 	.word	0x08016cdb
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	81bb      	strh	r3, [r7, #12]
        break;
 8016ccc:	e00b      	b.n	8016ce6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	81bb      	strh	r3, [r7, #12]
        break;
 8016cd2:	e008      	b.n	8016ce6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8016cd4:	2302      	movs	r3, #2
 8016cd6:	81bb      	strh	r3, [r7, #12]
        break;
 8016cd8:	e005      	b.n	8016ce6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 8016cda:	2303      	movs	r3, #3
 8016cdc:	81bb      	strh	r3, [r7, #12]
        break;
 8016cde:	e002      	b.n	8016ce6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016ce0:	f240 4321 	movw	r3, #1057	@ 0x421
 8016ce4:	e01c      	b.n	8016d20 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	89fa      	ldrh	r2, [r7, #14]
 8016cec:	2109      	movs	r1, #9
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7f8 fdfe 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	817b      	strh	r3, [r7, #10]
 8016cf8:	897b      	ldrh	r3, [r7, #10]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d001      	beq.n	8016d02 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 8016cfe:	897b      	ldrh	r3, [r7, #10]
 8016d00:	e00e      	b.n	8016d20 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	685b      	ldr	r3, [r3, #4]
 8016d06:	89ba      	ldrh	r2, [r7, #12]
 8016d08:	210a      	movs	r1, #10
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f7f8 fdf0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016d10:	4603      	mov	r3, r0
 8016d12:	817b      	strh	r3, [r7, #10]
 8016d14:	897b      	ldrh	r3, [r7, #10]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d001      	beq.n	8016d1e <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 8016d1a:	897b      	ldrh	r3, [r7, #10]
 8016d1c:	e000      	b.n	8016d20 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 8016d1e:	2300      	movs	r3, #0

}
 8016d20:	4618      	mov	r0, r3
 8016d22:	3710      	adds	r7, #16
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b083      	sub	sp, #12
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	3309      	adds	r3, #9
 8016d36:	683a      	ldr	r2, [r7, #0]
 8016d38:	6812      	ldr	r2, [r2, #0]
 8016d3a:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2201      	movs	r2, #1
 8016d40:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8016d42:	2300      	movs	r3, #0
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4e:	4770      	bx	lr

08016d50 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	60f8      	str	r0, [r7, #12]
 8016d58:	460b      	mov	r3, r1
 8016d5a:	607a      	str	r2, [r7, #4]
 8016d5c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 8016d5e:	897b      	ldrh	r3, [r7, #10]
 8016d60:	2b14      	cmp	r3, #20
 8016d62:	d002      	beq.n	8016d6a <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 8016d64:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8016d68:	e017      	b.n	8016d9a <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d101      	bne.n	8016d74 <phpalI14443p4_Sw_Init+0x24>
 8016d70:	2321      	movs	r3, #33	@ 0x21
 8016d72:	e012      	b.n	8016d9a <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d101      	bne.n	8016d7e <phpalI14443p4_Sw_Init+0x2e>
 8016d7a:	2321      	movs	r3, #33	@ 0x21
 8016d7c:	e00d      	b.n	8016d9a <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	f240 6201 	movw	r2, #1537	@ 0x601
 8016d84:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	687a      	ldr	r2, [r7, #4]
 8016d8a:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	2202      	movs	r2, #2
 8016d90:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 8016d92:	68f8      	ldr	r0, [r7, #12]
 8016d94:	f000 f840 	bl	8016e18 <phpalI14443p4_Sw_ResetProtocol>
 8016d98:	4603      	mov	r3, r0
}
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	3710      	adds	r7, #16
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}

08016da2 <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 8016da2:	b480      	push	{r7}
 8016da4:	b083      	sub	sp, #12
 8016da6:	af00      	add	r7, sp, #0
 8016da8:	6078      	str	r0, [r7, #4]
 8016daa:	4608      	mov	r0, r1
 8016dac:	4611      	mov	r1, r2
 8016dae:	461a      	mov	r2, r3
 8016db0:	4603      	mov	r3, r0
 8016db2:	70fb      	strb	r3, [r7, #3]
 8016db4:	460b      	mov	r3, r1
 8016db6:	70bb      	strb	r3, [r7, #2]
 8016db8:	4613      	mov	r3, r2
 8016dba:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 8016dc2:	78bb      	ldrb	r3, [r7, #2]
 8016dc4:	2b0e      	cmp	r3, #14
 8016dc6:	d808      	bhi.n	8016dda <phpalI14443p4_Sw_SetProtocol+0x38>
 8016dc8:	7d3b      	ldrb	r3, [r7, #20]
 8016dca:	2b0e      	cmp	r3, #14
 8016dcc:	d805      	bhi.n	8016dda <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 8016dce:	7e3b      	ldrb	r3, [r7, #24]
 8016dd0:	2b0c      	cmp	r3, #12
 8016dd2:	d802      	bhi.n	8016dda <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8016dd4:	7f3b      	ldrb	r3, [r7, #28]
 8016dd6:	2b0c      	cmp	r3, #12
 8016dd8:	d902      	bls.n	8016de0 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8016dda:	f240 6321 	movw	r3, #1569	@ 0x621
 8016dde:	e015      	b.n	8016e0c <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	78fa      	ldrb	r2, [r7, #3]
 8016de4:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	78ba      	ldrb	r2, [r7, #2]
 8016dea:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	787a      	ldrb	r2, [r7, #1]
 8016df0:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	7c3a      	ldrb	r2, [r7, #16]
 8016df6:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	7d3a      	ldrb	r2, [r7, #20]
 8016dfc:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	7e3a      	ldrb	r2, [r7, #24]
 8016e02:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	7f3a      	ldrb	r2, [r7, #28]
 8016e08:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 8016e0a:	2300      	movs	r3, #0
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	370c      	adds	r7, #12
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr

08016e18 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b083      	sub	sp, #12
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	2201      	movs	r2, #1
 8016e24:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2200      	movs	r2, #0
 8016e2a:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	2200      	movs	r2, #0
 8016e36:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2200      	movs	r2, #0
 8016e42:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2204      	movs	r2, #4
 8016e48:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2202      	movs	r2, #2
 8016e54:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	2202      	movs	r2, #2
 8016e5a:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 8016e5c:	2300      	movs	r3, #0
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	370c      	adds	r7, #12
 8016e62:	46bd      	mov	sp, r7
 8016e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e68:	4770      	bx	lr

08016e6a <phpalI14443p4_Sw_Deselect>:

phStatus_t phpalI14443p4_Sw_Deselect(
                                     phpalI14443p4_Sw_DataParams_t * pDataParams
                                     )
{
 8016e6a:	b580      	push	{r7, lr}
 8016e6c:	b08a      	sub	sp, #40	@ 0x28
 8016e6e:	af02      	add	r7, sp, #8
 8016e70:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint16_t    PH_MEMLOC_REM wIsoFrameLen = 0;
 8016e72:	2300      	movs	r3, #0
 8016e74:	827b      	strh	r3, [r7, #18]
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016e76:	2300      	movs	r3, #0
 8016e78:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	817b      	strh	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bInvalidBlock;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint16_t    PH_MEMLOC_REM wRetries;

    /* Build S(DESELECT) frame */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildSBlock(
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	7a58      	ldrb	r0, [r3, #9]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	7a99      	ldrb	r1, [r3, #10]
 8016e86:	f107 0312 	add.w	r3, r7, #18
 8016e8a:	9301      	str	r3, [sp, #4]
 8016e8c:	f107 0314 	add.w	r3, r7, #20
 8016e90:	9300      	str	r3, [sp, #0]
 8016e92:	2300      	movs	r3, #0
 8016e94:	2200      	movs	r2, #0
 8016e96:	f001 f936 	bl	8018106 <phpalI14443p4_Sw_BuildSBlock>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	833b      	strh	r3, [r7, #24]
 8016e9e:	8b3b      	ldrh	r3, [r7, #24]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d001      	beq.n	8016ea8 <phpalI14443p4_Sw_Deselect+0x3e>
 8016ea4:	8b3b      	ldrh	r3, [r7, #24]
 8016ea6:	e08f      	b.n	8016fc8 <phpalI14443p4_Sw_Deselect+0x15e>
        0,
        bIsoFrame,
        &wIsoFrameLen));

    /* Set DESELECT timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	685b      	ldr	r3, [r3, #4]
 8016eac:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8016eb0:	210d      	movs	r1, #13
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7f8 fd1c 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	833b      	strh	r3, [r7, #24]
 8016ebc:	8b3b      	ldrh	r3, [r7, #24]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d001      	beq.n	8016ec6 <phpalI14443p4_Sw_Deselect+0x5c>
 8016ec2:	8b3b      	ldrh	r3, [r7, #24]
 8016ec4:	e080      	b.n	8016fc8 <phpalI14443p4_Sw_Deselect+0x15e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4_SW_FWT_DESELECT_US + PHPAL_I14443P4_EXT_TIME_US));

    /* Retrieve max. retry count */
    wRetries = (uint16_t)pDataParams->bMaxRetryCount + 1U;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	7c5b      	ldrb	r3, [r3, #17]
 8016eca:	3301      	adds	r3, #1
 8016ecc:	837b      	strh	r3, [r7, #26]

    /* Reset response received flag */
    bResponseReceived = 0;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	777b      	strb	r3, [r7, #29]
    /* Do as long as invalid responses are received
    and the retry counter has not reached zero.*/
    do
    {
        /* Send the S(DESELECT) request */
        status = phhalHw_Exchange(
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6858      	ldr	r0, [r3, #4]
 8016ed6:	8a79      	ldrh	r1, [r7, #18]
 8016ed8:	f107 0214 	add.w	r2, r7, #20
 8016edc:	f107 030a 	add.w	r3, r7, #10
 8016ee0:	9301      	str	r3, [sp, #4]
 8016ee2:	f107 030c 	add.w	r3, r7, #12
 8016ee6:	9300      	str	r3, [sp, #0]
 8016ee8:	460b      	mov	r3, r1
 8016eea:	2100      	movs	r1, #0
 8016eec:	f7f8 f94a 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	83fb      	strh	r3, [r7, #30]
            wIsoFrameLen,
            &pResp,
            &wRespLen);

        /* Status --> InvalidBlock mapping */
        bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_DESELECT_IS_INVALID_BLOCK_STATUS(status);
 8016ef4:	8bfb      	ldrh	r3, [r7, #30]
 8016ef6:	b2db      	uxtb	r3, r3
 8016ef8:	2b01      	cmp	r3, #1
 8016efa:	d013      	beq.n	8016f24 <phpalI14443p4_Sw_Deselect+0xba>
 8016efc:	8bfb      	ldrh	r3, [r7, #30]
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	2b02      	cmp	r3, #2
 8016f02:	d00f      	beq.n	8016f24 <phpalI14443p4_Sw_Deselect+0xba>
 8016f04:	8bfb      	ldrh	r3, [r7, #30]
 8016f06:	b2db      	uxtb	r3, r3
 8016f08:	2b05      	cmp	r3, #5
 8016f0a:	d00b      	beq.n	8016f24 <phpalI14443p4_Sw_Deselect+0xba>
 8016f0c:	8bfb      	ldrh	r3, [r7, #30]
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	2b73      	cmp	r3, #115	@ 0x73
 8016f12:	d007      	beq.n	8016f24 <phpalI14443p4_Sw_Deselect+0xba>
 8016f14:	8bfb      	ldrh	r3, [r7, #30]
 8016f16:	b2db      	uxtb	r3, r3
 8016f18:	2b06      	cmp	r3, #6
 8016f1a:	d003      	beq.n	8016f24 <phpalI14443p4_Sw_Deselect+0xba>
 8016f1c:	8bfb      	ldrh	r3, [r7, #30]
 8016f1e:	b2db      	uxtb	r3, r3
 8016f20:	2b03      	cmp	r3, #3
 8016f22:	d101      	bne.n	8016f28 <phpalI14443p4_Sw_Deselect+0xbe>
 8016f24:	2301      	movs	r3, #1
 8016f26:	e000      	b.n	8016f2a <phpalI14443p4_Sw_Deselect+0xc0>
 8016f28:	2300      	movs	r3, #0
 8016f2a:	75fb      	strb	r3, [r7, #23]

        if (0U == (bInvalidBlock))
 8016f2c:	7dfb      	ldrb	r3, [r7, #23]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d12f      	bne.n	8016f92 <phpalI14443p4_Sw_Deselect+0x128>
        {
            /* Check for other errors */
            PH_CHECK_SUCCESS(status);
 8016f32:	8bfb      	ldrh	r3, [r7, #30]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d001      	beq.n	8016f3c <phpalI14443p4_Sw_Deselect+0xd2>
 8016f38:	8bfb      	ldrh	r3, [r7, #30]
 8016f3a:	e045      	b.n	8016fc8 <phpalI14443p4_Sw_Deselect+0x15e>

            /* Signal that we've received something */
            bResponseReceived = 1;
 8016f3c:	2301      	movs	r3, #1
 8016f3e:	777b      	strb	r3, [r7, #29]

            /* Rule 8, ISO/IEC 14443-4:2008(E), "...the S(DESELECT) request may be re-transmitted..." */
            if ((wRespLen == wIsoFrameLen) && (wRespLen > 0U) && (wRespLen < 3U))
 8016f40:	897a      	ldrh	r2, [r7, #10]
 8016f42:	8a7b      	ldrh	r3, [r7, #18]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d121      	bne.n	8016f8c <phpalI14443p4_Sw_Deselect+0x122>
 8016f48:	897b      	ldrh	r3, [r7, #10]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d01e      	beq.n	8016f8c <phpalI14443p4_Sw_Deselect+0x122>
 8016f4e:	897b      	ldrh	r3, [r7, #10]
 8016f50:	2b02      	cmp	r3, #2
 8016f52:	d81b      	bhi.n	8016f8c <phpalI14443p4_Sw_Deselect+0x122>
            {
                /* Mask out Power-Level-Indication */
                if (0U != (pDataParams->bCidEnabled))
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	7a5b      	ldrb	r3, [r3, #9]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d008      	beq.n	8016f6e <phpalI14443p4_Sw_Deselect+0x104>
                {
                    pResp[1] &= 0x3FU;
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	781a      	ldrb	r2, [r3, #0]
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	3301      	adds	r3, #1
 8016f66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016f6a:	b2d2      	uxtb	r2, r2
 8016f6c:	701a      	strb	r2, [r3, #0]
                }

                /* Verify S(DESELECT) Response */
                if (memcmp(bIsoFrame, pResp, wRespLen) != 0)
 8016f6e:	68f9      	ldr	r1, [r7, #12]
 8016f70:	897b      	ldrh	r3, [r7, #10]
 8016f72:	461a      	mov	r2, r3
 8016f74:	f107 0314 	add.w	r3, r7, #20
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f00a fe11 	bl	8021ba0 <memcmp>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d006      	beq.n	8016f92 <phpalI14443p4_Sw_Deselect+0x128>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016f84:	f240 6306 	movw	r3, #1542	@ 0x606
 8016f88:	83fb      	strh	r3, [r7, #30]
                if (memcmp(bIsoFrame, pResp, wRespLen) != 0)
 8016f8a:	e002      	b.n	8016f92 <phpalI14443p4_Sw_Deselect+0x128>
                }
            }
            else
            {
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8016f8c:	f240 6306 	movw	r3, #1542	@ 0x606
 8016f90:	83fb      	strh	r3, [r7, #30]
            }
        }
        --wRetries;
 8016f92:	8b7b      	ldrh	r3, [r7, #26]
 8016f94:	3b01      	subs	r3, #1
 8016f96:	837b      	strh	r3, [r7, #26]
    }
    /* Retry as long as neccessary */
    while ((0U != bInvalidBlock) && (wRetries != 0U));
 8016f98:	7dfb      	ldrb	r3, [r7, #23]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d002      	beq.n	8016fa4 <phpalI14443p4_Sw_Deselect+0x13a>
 8016f9e:	8b7b      	ldrh	r3, [r7, #26]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d196      	bne.n	8016ed2 <phpalI14443p4_Sw_Deselect+0x68>

    /* Operation not successful */
    if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8016fa4:	8bfb      	ldrh	r3, [r7, #30]
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d009      	beq.n	8016fc0 <phpalI14443p4_Sw_Deselect+0x156>
    {
        /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
        if ((pDataParams->bMaxRetryCount > 0U) && (bResponseReceived > 0U))
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	7c5b      	ldrb	r3, [r3, #17]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d005      	beq.n	8016fc0 <phpalI14443p4_Sw_Deselect+0x156>
 8016fb4:	7f7b      	ldrb	r3, [r7, #29]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d002      	beq.n	8016fc0 <phpalI14443p4_Sw_Deselect+0x156>
        {
            status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 8016fba:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8016fbe:	83fb      	strh	r3, [r7, #30]
        }
    }

    /* Apply default parameters */
    (void) phpalI14443p4_Sw_ResetProtocol(pDataParams);
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f7ff ff29 	bl	8016e18 <phpalI14443p4_Sw_ResetProtocol>

    return status;
 8016fc6:	8bfb      	ldrh	r3, [r7, #30]
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3720      	adds	r7, #32
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <phpalI14443p4_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 8016fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd2:	b095      	sub	sp, #84	@ 0x54
 8016fd4:	af04      	add	r7, sp, #16
 8016fd6:	60f8      	str	r0, [r7, #12]
 8016fd8:	607a      	str	r2, [r7, #4]
 8016fda:	461a      	mov	r2, r3
 8016fdc:	460b      	mov	r3, r1
 8016fde:	817b      	strh	r3, [r7, #10]
 8016fe0:	4613      	mov	r3, r2
 8016fe2:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bBufferOverflow;

    /* Used to build I/R/S block frames */
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint16_t    PH_MEMLOC_REM wIsoFrameLen = 0;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bRxOverlapped[3];
    uint16_t    PH_MEMLOC_REM wRxOverlappedLen = 0;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t    PH_MEMLOC_REM wRxStartPos;
    uint8_t     PH_MEMLOC_REM bUseNad = 0;
 8016fec:	2300      	movs	r3, #0
 8016fee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bForceSend;

    /* Used for Transmission */
    uint16_t    PH_MEMLOC_REM wRxBufferSize;
    uint16_t    PH_MEMLOC_REM wTxBufferSize;
    uint16_t    PH_MEMLOC_REM wTxBufferLen = 0;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wInfLength = 0;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t    PH_MEMLOC_REM wMaxPcdFrameSize;
    uint16_t    PH_MEMLOC_REM wMaxCardFrameSize;
    uint16_t    PH_MEMLOC_REM wPcb = 0;
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	833b      	strh	r3, [r7, #24]
    uint8_t     PH_MEMLOC_REM bRetryCountRetransmit;

    /* Used for Reception */
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 8016ffe:	2300      	movs	r3, #0
 8017000:	613b      	str	r3, [r7, #16]

    /* Option parameter check */
    if (0u != (wOption &  (uint16_t)~(uint16_t)
 8017002:	897a      	ldrh	r2, [r7, #10]
 8017004:	f643 73fc 	movw	r3, #16380	@ 0x3ffc
 8017008:	4013      	ands	r3, r2
 801700a:	2b00      	cmp	r3, #0
 801700c:	d002      	beq.n	8017014 <phpalI14443p4_Sw_Exchange+0x44>
        (
        PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT |
        PH_EXCHANGE_TXCHAINING | PH_EXCHANGE_RXCHAINING | PH_EXCHANGE_RXCHAINING_BUFSIZE
        )))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 801700e:	f240 6321 	movw	r3, #1569	@ 0x621
 8017012:	e34b      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 8017014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017016:	2b00      	cmp	r3, #0
 8017018:	d102      	bne.n	8017020 <phpalI14443p4_Sw_Exchange+0x50>
    {
        ppRxBuffer = &pRxBuffer;
 801701a:	f107 0310 	add.w	r3, r7, #16
 801701e:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    if (pRxLength == NULL)
 8017020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017022:	2b00      	cmp	r3, #0
 8017024:	d102      	bne.n	801702c <phpalI14443p4_Sw_Exchange+0x5c>
    {
        pRxLength = &RxLength;
 8017026:	f107 0316 	add.w	r3, r7, #22
 801702a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Retrieve HAL buffer sizes */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE, &wRxBufferSize));
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	f107 021e 	add.w	r2, r7, #30
 8017034:	2131      	movs	r1, #49	@ 0x31
 8017036:	4618      	mov	r0, r3
 8017038:	f7fa f8a8 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801703c:	4603      	mov	r3, r0
 801703e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017040:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017042:	2b00      	cmp	r3, #0
 8017044:	d001      	beq.n	801704a <phpalI14443p4_Sw_Exchange+0x7a>
 8017046:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017048:	e330      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE, &wTxBufferSize));
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	f107 021c 	add.w	r2, r7, #28
 8017052:	2132      	movs	r1, #50	@ 0x32
 8017054:	4618      	mov	r0, r3
 8017056:	f7fa f899 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801705a:	4603      	mov	r3, r0
 801705c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801705e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017060:	2b00      	cmp	r3, #0
 8017062:	d001      	beq.n	8017068 <phpalI14443p4_Sw_Exchange+0x98>
 8017064:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017066:	e321      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>

    /* Retrieve maximum frame sizes */
    wMaxPcdFrameSize = bI14443p4_FsTable[pDataParams->bFsdi] - (uint16_t)2U;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	7b9b      	ldrb	r3, [r3, #14]
 801706c:	461a      	mov	r2, r3
 801706e:	4b98      	ldr	r3, [pc, #608]	@ (80172d0 <phpalI14443p4_Sw_Exchange+0x300>)
 8017070:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017074:	3b02      	subs	r3, #2
 8017076:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wMaxCardFrameSize = bI14443p4_FsTable[pDataParams->bFsci] - (uint16_t)2U;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	7bdb      	ldrb	r3, [r3, #15]
 801707c:	461a      	mov	r2, r3
 801707e:	4b94      	ldr	r3, [pc, #592]	@ (80172d0 <phpalI14443p4_Sw_Exchange+0x300>)
 8017080:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017084:	3b02      	subs	r3, #2
 8017086:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* R(ACK) transmission in case of Rx-Chaining */
    if (((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING) ||
 8017088:	897b      	ldrh	r3, [r7, #10]
 801708a:	f003 030f 	and.w	r3, r3, #15
 801708e:	2b02      	cmp	r3, #2
 8017090:	d004      	beq.n	801709c <phpalI14443p4_Sw_Exchange+0xcc>
        ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 8017092:	897b      	ldrh	r3, [r7, #10]
 8017094:	f003 030f 	and.w	r3, r3, #15
    if (((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING) ||
 8017098:	2b03      	cmp	r3, #3
 801709a:	d103      	bne.n	80170a4 <phpalI14443p4_Sw_Exchange+0xd4>
    {
        pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_RX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2282      	movs	r2, #130	@ 0x82
 80170a0:	721a      	strb	r2, [r3, #8]
 80170a2:	e008      	b.n	80170b6 <phpalI14443p4_Sw_Exchange+0xe6>
    }
    /* I-Block transmission */
    else
    {
        /* Reset to default state if not in Tx-Mode */
        if ((pDataParams->bStateNow & PH_EXCHANGE_MODE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_TX)
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	7a1b      	ldrb	r3, [r3, #8]
 80170a8:	f003 030f 	and.w	r3, r3, #15
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d002      	beq.n	80170b6 <phpalI14443p4_Sw_Exchange+0xe6>
        {
            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	2201      	movs	r2, #1
 80170b4:	721a      	strb	r2, [r3, #8]
        }
    }

    /* Reset receive length */
    *pRxLength = 0;
 80170b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80170b8:	2200      	movs	r2, #0
 80170ba:	801a      	strh	r2, [r3, #0]

    /* Reset RetryCount */
    bRetryCountRetransmit = 0;
 80170bc:	2300      	movs	r3, #0
 80170be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    /* Reset BufferOverflow flag */
    bBufferOverflow = 0;
 80170c2:	2300      	movs	r3, #0
 80170c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    /*     I-BLOCK TRANSMISSION LOOP    */
    /* ******************************** */
    do
    {
        /* Reset Preloaded bytes and ForceSend */
        wTxBufferLen = 0;
 80170c8:	2300      	movs	r3, #0
 80170ca:	837b      	strh	r3, [r7, #26]
        bForceSend = 0;
 80170cc:	2300      	movs	r3, #0
 80170ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        switch (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK)
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	7a1b      	ldrb	r3, [r3, #8]
 80170d6:	f003 030f 	and.w	r3, r3, #15
 80170da:	2b01      	cmp	r3, #1
 80170dc:	d003      	beq.n	80170e6 <phpalI14443p4_Sw_Exchange+0x116>
 80170de:	2b02      	cmp	r3, #2
 80170e0:	f000 8114 	beq.w	801730c <phpalI14443p4_Sw_Exchange+0x33c>
 80170e4:	e143      	b.n	801736e <phpalI14443p4_Sw_Exchange+0x39e>
        {
        case PHPAL_I14443P4_SW_STATE_I_BLOCK_TX:

            /* Retrieve Number of preloaded bytes */
            if (0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))
 80170e6:	897b      	ldrh	r3, [r7, #10]
 80170e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00e      	beq.n	801710e <phpalI14443p4_Sw_Exchange+0x13e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	f107 021a 	add.w	r2, r7, #26
 80170f8:	2133      	movs	r1, #51	@ 0x33
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7fa f846 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8017100:	4603      	mov	r3, r0
 8017102:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017104:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017106:	2b00      	cmp	r3, #0
 8017108:	d001      	beq.n	801710e <phpalI14443p4_Sw_Exchange+0x13e>
 801710a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801710c:	e2ce      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                    PHHAL_HW_CONFIG_TXBUFFER_LENGTH,
                    &wTxBufferLen));
            }

            /* Set initial INF length to (remaining) input data length */
            wInfLength = wTxLength;
 801710e:	893b      	ldrh	r3, [r7, #8]
 8017110:	86bb      	strh	r3, [r7, #52]	@ 0x34

            /* Frame has already been preloaded -> IsoFrameLen is zero */
            if (wTxBufferLen > 0U)
 8017112:	8b7b      	ldrh	r3, [r7, #26]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d002      	beq.n	801711e <phpalI14443p4_Sw_Exchange+0x14e>
            {
                /* do not generate the iso frame */
                wIsoFrameLen = 0;
 8017118:	2300      	movs	r3, #0
 801711a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801711c:	e01e      	b.n	801715c <phpalI14443p4_Sw_Exchange+0x18c>
            }
            /* Else evaluate IsoFrameLen*/
            else
            {
                /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                if ((0U == ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))))
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	7a1b      	ldrb	r3, [r3, #8]
 8017122:	b25b      	sxtb	r3, r3
 8017124:	2b00      	cmp	r3, #0
 8017126:	db04      	blt.n	8017132 <phpalI14443p4_Sw_Exchange+0x162>
                {
                    bUseNad = pDataParams->bNadEnabled;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	7adb      	ldrb	r3, [r3, #11]
 801712c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017130:	e002      	b.n	8017138 <phpalI14443p4_Sw_Exchange+0x168>
                }
                else
                {
                    bUseNad = 0;
 8017132:	2300      	movs	r3, #0
 8017134:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Evaluate frame overhead */
                wIsoFrameLen = 1;
 8017138:	2301      	movs	r3, #1
 801713a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (0U != (bUseNad))
 801713c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017140:	2b00      	cmp	r3, #0
 8017142:	d003      	beq.n	801714c <phpalI14443p4_Sw_Exchange+0x17c>
                {
                    ++wIsoFrameLen;
 8017144:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017146:	3301      	adds	r3, #1
 8017148:	b29b      	uxth	r3, r3
 801714a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                }
                if (0U != (pDataParams->bCidEnabled))
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	7a5b      	ldrb	r3, [r3, #9]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d003      	beq.n	801715c <phpalI14443p4_Sw_Exchange+0x18c>
                {
                    ++wIsoFrameLen;
 8017154:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017156:	3301      	adds	r3, #1
 8017158:	b29b      	uxth	r3, r3
 801715a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                }
            }

            /* Check if chaining is intended or not */
            if ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING)
 801715c:	897b      	ldrh	r3, [r7, #10]
 801715e:	f003 030f 	and.w	r3, r3, #15
 8017162:	2b01      	cmp	r3, #1
 8017164:	d107      	bne.n	8017176 <phpalI14443p4_Sw_Exchange+0x1a6>
            {
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	7a1b      	ldrb	r3, [r3, #8]
 801716a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801716e:	b2da      	uxtb	r2, r3
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	721a      	strb	r2, [r3, #8]
 8017174:	e006      	b.n	8017184 <phpalI14443p4_Sw_Exchange+0x1b4>
            }
            else
            {
                pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	7a1b      	ldrb	r3, [r3, #8]
 801717a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801717e:	b2da      	uxtb	r2, r3
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	721a      	strb	r2, [r3, #8]
            }

            /* Force frame exchange if
            a) the maximum frame size of the card has been reached;
            */
            if ((wTxBufferLen + wIsoFrameLen + wInfLength) > wMaxCardFrameSize)
 8017184:	8b7b      	ldrh	r3, [r7, #26]
 8017186:	461a      	mov	r2, r3
 8017188:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801718a:	441a      	add	r2, r3
 801718c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801718e:	441a      	add	r2, r3
 8017190:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017192:	429a      	cmp	r2, r3
 8017194:	dd10      	ble.n	80171b8 <phpalI14443p4_Sw_Exchange+0x1e8>
            {
                /* force frame exchange */
                bForceSend = 1;
 8017196:	2301      	movs	r3, #1
 8017198:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                /* force chaining */
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	7a1b      	ldrb	r3, [r3, #8]
 80171a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80171a4:	b2da      	uxtb	r2, r3
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	721a      	strb	r2, [r3, #8]

                /* limit number of bytes to send */
                wInfLength = wMaxCardFrameSize - wTxBufferLen - wIsoFrameLen;
 80171aa:	8b7b      	ldrh	r3, [r7, #26]
 80171ac:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80171ae:	1ad3      	subs	r3, r2, r3
 80171b0:	b29a      	uxth	r2, r3
 80171b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80171b4:	1ad3      	subs	r3, r2, r3
 80171b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
            }

            /* Force frame exchange if
            b) the TxBuffer is full;
            */
            if ((0U != ((wOption & PH_EXCHANGE_BUFFERED_BIT))) &&
 80171b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	da12      	bge.n	80171e6 <phpalI14443p4_Sw_Exchange+0x216>
                ((wTxBufferLen + wIsoFrameLen + wInfLength) >= wTxBufferSize))
 80171c0:	8b7b      	ldrh	r3, [r7, #26]
 80171c2:	461a      	mov	r2, r3
 80171c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80171c6:	441a      	add	r2, r3
 80171c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80171ca:	4413      	add	r3, r2
 80171cc:	8bba      	ldrh	r2, [r7, #28]
            if ((0U != ((wOption & PH_EXCHANGE_BUFFERED_BIT))) &&
 80171ce:	4293      	cmp	r3, r2
 80171d0:	db09      	blt.n	80171e6 <phpalI14443p4_Sw_Exchange+0x216>
            {
                /* force frame exchange */
                bForceSend = 1;
 80171d2:	2301      	movs	r3, #1
 80171d4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                /* force chaining */
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	7a1b      	ldrb	r3, [r3, #8]
 80171dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80171e0:	b2da      	uxtb	r2, r3
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	721a      	strb	r2, [r3, #8]
            }

            /* Generate / Buffer ISO frame */
            if (wIsoFrameLen > 0U)
 80171e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d039      	beq.n	8017260 <phpalI14443p4_Sw_Exchange+0x290>
            {
                /* Generate I-Block frame header */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildIBlock(
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	7a58      	ldrb	r0, [r3, #9]
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	7a9c      	ldrb	r4, [r3, #10]
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	7b1e      	ldrb	r6, [r3, #12]
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	7c1b      	ldrb	r3, [r3, #16]
 80171fc:	68fa      	ldr	r2, [r7, #12]
 80171fe:	7a12      	ldrb	r2, [r2, #8]
 8017200:	09d2      	lsrs	r2, r2, #7
 8017202:	b2d2      	uxtb	r2, r2
 8017204:	f897 5037 	ldrb.w	r5, [r7, #55]	@ 0x37
 8017208:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 801720c:	9103      	str	r1, [sp, #12]
 801720e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017212:	9102      	str	r1, [sp, #8]
 8017214:	9201      	str	r2, [sp, #4]
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	4633      	mov	r3, r6
 801721a:	462a      	mov	r2, r5
 801721c:	4621      	mov	r1, r4
 801721e:	f000 fee3 	bl	8017fe8 <phpalI14443p4_Sw_BuildIBlock>
 8017222:	4603      	mov	r3, r0
 8017224:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017226:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017228:	2b00      	cmp	r3, #0
 801722a:	d001      	beq.n	8017230 <phpalI14443p4_Sw_Exchange+0x260>
 801722c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801722e:	e23d      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                    (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT)) ? 1U : 0U,
                    bIsoFrame,
                    &wIsoFrameLen));

                /* Write Frame to HAL TxBuffer but do not preform Exchange */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	6858      	ldr	r0, [r3, #4]
 8017234:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017236:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801723a:	2100      	movs	r1, #0
 801723c:	9101      	str	r1, [sp, #4]
 801723e:	2100      	movs	r1, #0
 8017240:	9100      	str	r1, [sp, #0]
 8017242:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017246:	f7f7 ff9d 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801724a:	4603      	mov	r3, r0
 801724c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801724e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017250:	2b00      	cmp	r3, #0
 8017252:	d001      	beq.n	8017258 <phpalI14443p4_Sw_Exchange+0x288>
 8017254:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017256:	e229      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                    wIsoFrameLen,
                    NULL,
                    NULL));

                /* Retain the preloaded bytes from now on */
                wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8017258:	897b      	ldrh	r3, [r7, #10]
 801725a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801725e:	817b      	strh	r3, [r7, #10]
            }

            /* Tx-Buffering mode (and no forced exchange) */
            if ((0U == bForceSend) && (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8017260:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017264:	2b00      	cmp	r3, #0
 8017266:	d113      	bne.n	8017290 <phpalI14443p4_Sw_Exchange+0x2c0>
 8017268:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801726c:	2b00      	cmp	r3, #0
 801726e:	da0f      	bge.n	8017290 <phpalI14443p4_Sw_Exchange+0x2c0>
            {
                /* Preload the data into the TxBuffer */
                return phhalHw_Exchange(
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	6858      	ldr	r0, [r3, #4]
 8017274:	897b      	ldrh	r3, [r7, #10]
 8017276:	f023 030f 	bic.w	r3, r3, #15
 801727a:	b299      	uxth	r1, r3
 801727c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801727e:	2200      	movs	r2, #0
 8017280:	9201      	str	r2, [sp, #4]
 8017282:	2200      	movs	r2, #0
 8017284:	9200      	str	r2, [sp, #0]
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	f7f7 ff7c 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801728c:	4603      	mov	r3, r0
 801728e:	e20d      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                    NULL,
                    NULL);
            }

            /* Content has been buffered before */
            if (wTxBufferLen > 0U)
 8017290:	8b7b      	ldrh	r3, [r7, #26]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d06e      	beq.n	8017374 <phpalI14443p4_Sw_Exchange+0x3a4>
            {
                /* retrieve PCB byte */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_OFFSET, 0x00));
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	2200      	movs	r2, #0
 801729c:	212f      	movs	r1, #47	@ 0x2f
 801729e:	4618      	mov	r0, r3
 80172a0:	f7f8 fb26 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80172a4:	4603      	mov	r3, r0
 80172a6:	863b      	strh	r3, [r7, #48]	@ 0x30
 80172a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d001      	beq.n	80172b2 <phpalI14443p4_Sw_Exchange+0x2e2>
 80172ae:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80172b0:	e1fc      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, &wPcb));
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	f107 0218 	add.w	r2, r7, #24
 80172ba:	2134      	movs	r1, #52	@ 0x34
 80172bc:	4618      	mov	r0, r3
 80172be:	f7f9 ff65 	bl	801118c <phhalHw_Pn5180_GetConfig>
 80172c2:	4603      	mov	r3, r0
 80172c4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80172c6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d003      	beq.n	80172d4 <phpalI14443p4_Sw_Exchange+0x304>
 80172cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80172ce:	e1ed      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
 80172d0:	08025af8 	.word	0x08025af8

                /* Preloaded Data or ForceSend -> Modify PCB byte if neccessary */
                if ((0U != bForceSend) || ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING))
 80172d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d104      	bne.n	80172e6 <phpalI14443p4_Sw_Exchange+0x316>
 80172dc:	897b      	ldrh	r3, [r7, #10]
 80172de:	f003 030f 	and.w	r3, r3, #15
 80172e2:	2b01      	cmp	r3, #1
 80172e4:	d146      	bne.n	8017374 <phpalI14443p4_Sw_Exchange+0x3a4>
                {
                    /* modify PCB byte */
                    wPcb |= PHPAL_I14443P4_SW_PCB_CHAINING;
 80172e6:	8b3b      	ldrh	r3, [r7, #24]
 80172e8:	f043 0310 	orr.w	r3, r3, #16
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	833b      	strh	r3, [r7, #24]
                    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, wPcb));
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	8b3a      	ldrh	r2, [r7, #24]
 80172f6:	2134      	movs	r1, #52	@ 0x34
 80172f8:	4618      	mov	r0, r3
 80172fa:	f7f8 faf9 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80172fe:	4603      	mov	r3, r0
 8017300:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017302:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017304:	2b00      	cmp	r3, #0
 8017306:	d035      	beq.n	8017374 <phpalI14443p4_Sw_Exchange+0x3a4>
 8017308:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801730a:	e1cf      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
            break;

        case PHPAL_I14443P4_SW_STATE_I_BLOCK_RX:

            /* Build R(ACK) frame */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	7a58      	ldrb	r0, [r3, #9]
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	7a99      	ldrb	r1, [r3, #10]
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	7c1a      	ldrb	r2, [r3, #16]
 8017318:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 801731c:	9301      	str	r3, [sp, #4]
 801731e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017322:	9300      	str	r3, [sp, #0]
 8017324:	2301      	movs	r3, #1
 8017326:	f000 feb1 	bl	801808c <phpalI14443p4_Sw_BuildRBlock>
 801732a:	4603      	mov	r3, r0
 801732c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801732e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017330:	2b00      	cmp	r3, #0
 8017332:	d001      	beq.n	8017338 <phpalI14443p4_Sw_Exchange+0x368>
 8017334:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017336:	e1b9      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                1,
                bIsoFrame,
                &wIsoFrameLen));

            /* Write Frame to HAL TxBuffer but do not preform Exchange */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	6858      	ldr	r0, [r3, #4]
 801733c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801733e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8017342:	2100      	movs	r1, #0
 8017344:	9101      	str	r1, [sp, #4]
 8017346:	2100      	movs	r1, #0
 8017348:	9100      	str	r1, [sp, #0]
 801734a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801734e:	f7f7 ff19 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8017352:	4603      	mov	r3, r0
 8017354:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017356:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017358:	2b00      	cmp	r3, #0
 801735a:	d001      	beq.n	8017360 <phpalI14443p4_Sw_Exchange+0x390>
 801735c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801735e:	e1a5      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                wIsoFrameLen,
                NULL,
                NULL));

            /* Retain the preloaded bytes from now on */
            wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8017360:	897b      	ldrh	r3, [r7, #10]
 8017362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017366:	817b      	strh	r3, [r7, #10]

            /* do not append any data */
            wInfLength = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	86bb      	strh	r3, [r7, #52]	@ 0x34
            break;
 801736c:	e003      	b.n	8017376 <phpalI14443p4_Sw_Exchange+0x3a6>

            /* Should NEVER happen! */
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 801736e:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017372:	e19b      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
            break;
 8017374:	bf00      	nop
        }

        /* Perform Exchange using complete ISO handling */
        status = phpalI14443p4_Sw_IsoHandling(
 8017376:	897b      	ldrh	r3, [r7, #10]
 8017378:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801737c:	b299      	uxth	r1, r3
 801737e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8017382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017384:	9302      	str	r3, [sp, #8]
 8017386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017388:	9301      	str	r3, [sp, #4]
 801738a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	f000 f98f 	bl	80176b4 <phpalI14443p4_Sw_IsoHandling>
 8017396:	4603      	mov	r3, r0
 8017398:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            wInfLength,
            ppRxBuffer,
            pRxLength);

        /* Complete chaining if buffer is full */
        if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 801739a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801739c:	b2db      	uxtb	r3, r3
 801739e:	2b04      	cmp	r3, #4
 80173a0:	d10f      	bne.n	80173c2 <phpalI14443p4_Sw_Exchange+0x3f2>
            ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 80173a2:	897b      	ldrh	r3, [r7, #10]
 80173a4:	f003 030f 	and.w	r3, r3, #15
        if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 80173a8:	2b03      	cmp	r3, #3
 80173aa:	d10a      	bne.n	80173c2 <phpalI14443p4_Sw_Exchange+0x3f2>
        {
            /* Indicate Buffer Overflow */
            bBufferOverflow = 1;
 80173ac:	2301      	movs	r3, #1
 80173ae:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            /* Toggle Blocknumber */
            pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	7c1b      	ldrb	r3, [r3, #16]
 80173b6:	f083 0301 	eor.w	r3, r3, #1
 80173ba:	b2da      	uxtb	r2, r3
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	741a      	strb	r2, [r3, #16]
 80173c0:	e004      	b.n	80173cc <phpalI14443p4_Sw_Exchange+0x3fc>
        }
        /* Else bail out on error */
        else
        {
            PH_CHECK_SUCCESS(status);
 80173c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d001      	beq.n	80173cc <phpalI14443p4_Sw_Exchange+0x3fc>
 80173c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80173ca:	e16f      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
        }

        /* Retransmission in progress */
        if (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT))
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	7a1b      	ldrb	r3, [r3, #8]
 80173d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d039      	beq.n	801744c <phpalI14443p4_Sw_Exchange+0x47c>
        {
            /* Increment Retransmit RetryCount */
            ++bRetryCountRetransmit;
 80173d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80173dc:	3301      	adds	r3, #1
 80173de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            /* Restore internal TxBuffer. */
            /* Neccessary in case RxBuffer and TxBuffer are the same. */
            if (wTxBufferLen > 0U)
 80173e2:	8b7b      	ldrh	r3, [r7, #26]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d029      	beq.n	801743c <phpalI14443p4_Sw_Exchange+0x46c>
            {
                /* restore PCB byte */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_OFFSET, 0x00));
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	2200      	movs	r2, #0
 80173ee:	212f      	movs	r1, #47	@ 0x2f
 80173f0:	4618      	mov	r0, r3
 80173f2:	f7f8 fa7d 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80173f6:	4603      	mov	r3, r0
 80173f8:	863b      	strh	r3, [r7, #48]	@ 0x30
 80173fa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d001      	beq.n	8017404 <phpalI14443p4_Sw_Exchange+0x434>
 8017400:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017402:	e153      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, wPcb));
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	685b      	ldr	r3, [r3, #4]
 8017408:	8b3a      	ldrh	r2, [r7, #24]
 801740a:	2134      	movs	r1, #52	@ 0x34
 801740c:	4618      	mov	r0, r3
 801740e:	f7f8 fa6f 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017412:	4603      	mov	r3, r0
 8017414:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017416:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017418:	2b00      	cmp	r3, #0
 801741a:	d001      	beq.n	8017420 <phpalI14443p4_Sw_Exchange+0x450>
 801741c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801741e:	e145      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>

                /* restore TxBufferLen */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	8b7a      	ldrh	r2, [r7, #26]
 8017426:	2133      	movs	r1, #51	@ 0x33
 8017428:	4618      	mov	r0, r3
 801742a:	f7f8 fa61 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801742e:	4603      	mov	r3, r0
 8017430:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017432:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017434:	2b00      	cmp	r3, #0
 8017436:	d001      	beq.n	801743c <phpalI14443p4_Sw_Exchange+0x46c>
 8017438:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801743a:	e137      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                    PHHAL_HW_CONFIG_TXBUFFER_LENGTH,
                    wTxBufferLen));
            }

            /* Clear retransmission bit */
            pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	7a1b      	ldrb	r3, [r3, #8]
 8017440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017444:	b2da      	uxtb	r2, r3
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	721a      	strb	r2, [r3, #8]
 801744a:	e026      	b.n	801749a <phpalI14443p4_Sw_Exchange+0x4ca>
        }
        /* No retransmission in progress */
        else
        {
            /* Reset Retransmit RetryCount */
            bRetryCountRetransmit = 0;
 801744c:	2300      	movs	r3, #0
 801744e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            /* Chaining is active */
            if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	7a1b      	ldrb	r3, [r3, #8]
 8017456:	2b81      	cmp	r3, #129	@ 0x81
 8017458:	d111      	bne.n	801747e <phpalI14443p4_Sw_Exchange+0x4ae>
            {
                /* Bytes to send cannot be less than sent bytes */
                if (wTxLength < wInfLength)
 801745a:	893a      	ldrh	r2, [r7, #8]
 801745c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801745e:	429a      	cmp	r2, r3
 8017460:	d202      	bcs.n	8017468 <phpalI14443p4_Sw_Exchange+0x498>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017462:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017466:	e121      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                }

                /* Remove sent bytes from TxBuffer */
                pTxBuffer = pTxBuffer + wInfLength;
 8017468:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	4413      	add	r3, r2
 801746e:	607b      	str	r3, [r7, #4]

                /* below if condition is added to make QAC compliant  */
                if(wTxLength > 0U)
 8017470:	893b      	ldrh	r3, [r7, #8]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d003      	beq.n	801747e <phpalI14443p4_Sw_Exchange+0x4ae>
                {
                    wTxLength = wTxLength - wInfLength;
 8017476:	893a      	ldrh	r2, [r7, #8]
 8017478:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801747a:	1ad3      	subs	r3, r2, r3
 801747c:	813b      	strh	r3, [r7, #8]
                }
            }

            /* Buffered / TxChaining mode -> finished after sending */
            if ((wTxLength == 0U) &&
 801747e:	893b      	ldrh	r3, [r7, #8]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d10a      	bne.n	801749a <phpalI14443p4_Sw_Exchange+0x4ca>
                (
                ((wOption & PH_EXCHANGE_BUFFERED_BIT) > 0U) ||
 8017484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
            if ((wTxLength == 0U) &&
 8017488:	2b00      	cmp	r3, #0
 801748a:	db04      	blt.n	8017496 <phpalI14443p4_Sw_Exchange+0x4c6>
                ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING)
 801748c:	897b      	ldrh	r3, [r7, #10]
 801748e:	f003 030f 	and.w	r3, r3, #15
                ((wOption & PH_EXCHANGE_BUFFERED_BIT) > 0U) ||
 8017492:	2b01      	cmp	r3, #1
 8017494:	d101      	bne.n	801749a <phpalI14443p4_Sw_Exchange+0x4ca>
                ))
            {
                return PH_ERR_SUCCESS;
 8017496:	2300      	movs	r3, #0
 8017498:	e108      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
            }
        }
    }
    /* Loop as long as the state does not transit to RX mode */
    while ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_RX);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	7a1b      	ldrb	r3, [r3, #8]
 801749e:	f003 030f 	and.w	r3, r3, #15
 80174a2:	2b02      	cmp	r3, #2
 80174a4:	f47f ae10 	bne.w	80170c8 <phpalI14443p4_Sw_Exchange+0xf8>

    /* Overlap PCB */
    wRxOverlappedLen = 1;
 80174a8:	2301      	movs	r3, #1
 80174aa:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* Overlap CID */
    if (0u != ((*ppRxBuffer)[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING))
 80174ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	781b      	ldrb	r3, [r3, #0]
 80174b2:	f003 0308 	and.w	r3, r3, #8
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d002      	beq.n	80174c0 <phpalI14443p4_Sw_Exchange+0x4f0>
    {
        wRxOverlappedLen++;
 80174ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80174bc:	3301      	adds	r3, #1
 80174be:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }

    /* Overlap NAD */
    if (0u != ((*ppRxBuffer)[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING))
 80174c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	f003 0304 	and.w	r3, r3, #4
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d002      	beq.n	80174d4 <phpalI14443p4_Sw_Exchange+0x504>
    {
        wRxOverlappedLen++;
 80174ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80174d0:	3301      	adds	r3, #1
 80174d2:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }

    /* Reset RxStartPos */
    wRxStartPos = 0;
 80174d4:	2300      	movs	r3, #0
 80174d6:	873b      	strh	r3, [r7, #56]	@ 0x38
    /*      I-BLOCK RECEPTION LOOP      */
    /* ******************************** */
    do
    {
        /* Only allow receive state at this point */
        if ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_RX)
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	7a1b      	ldrb	r3, [r3, #8]
 80174dc:	f003 030f 	and.w	r3, r3, #15
 80174e0:	2b02      	cmp	r3, #2
 80174e2:	d002      	beq.n	80174ea <phpalI14443p4_Sw_Exchange+0x51a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 80174e4:	f240 637f 	movw	r3, #1663	@ 0x67f
 80174e8:	e0e0      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
        }

        /* Rule 2, ISO/IEC 14443-4:2008(E), PICC chaining */
        if (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	7a1b      	ldrb	r3, [r3, #8]
 80174ee:	b25b      	sxtb	r3, r3
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	f280 80ae 	bge.w	8017652 <phpalI14443p4_Sw_Exchange+0x682>
        {
            /* Skip overlapping / SUCCESS_CHAINING checks in case of BufferOverflow */
            if (0U == (bBufferOverflow))
 80174f6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d139      	bne.n	8017572 <phpalI14443p4_Sw_Exchange+0x5a2>
            {
                /* This is first chained response */
                if (wRxStartPos == 0U)
 80174fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017500:	2b00      	cmp	r3, #0
 8017502:	d106      	bne.n	8017512 <phpalI14443p4_Sw_Exchange+0x542>
                {
                    /* Special NAD chaining handling */
                    /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                    if (0U != (pDataParams->bNadEnabled))
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	7adb      	ldrb	r3, [r3, #11]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d002      	beq.n	8017512 <phpalI14443p4_Sw_Exchange+0x542>
                    {
                        --wRxOverlappedLen;
 801750c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801750e:	3b01      	subs	r3, #1
 8017510:	877b      	strh	r3, [r7, #58]	@ 0x3a
                    }
                }

                /* Backup overlapped bytes */
                (void)memcpy(bRxOverlapped, &(*ppRxBuffer)[((*pRxLength) - wRxOverlappedLen)], wRxOverlappedLen);
 8017512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017518:	8812      	ldrh	r2, [r2, #0]
 801751a:	4611      	mov	r1, r2
 801751c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801751e:	1a8a      	subs	r2, r1, r2
 8017520:	1899      	adds	r1, r3, r2
 8017522:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017524:	f107 0320 	add.w	r3, r7, #32
 8017528:	4618      	mov	r0, r3
 801752a:	f00a fbf8 	bl	8021d1e <memcpy>

                /* Calculate RxBuffer Start Position */
                wRxStartPos = (*pRxLength) - wRxOverlappedLen;
 801752e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017530:	881a      	ldrh	r2, [r3, #0]
 8017532:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017534:	1ad3      	subs	r3, r2, r3
 8017536:	873b      	strh	r3, [r7, #56]	@ 0x38

                /* Skip SUCCESS_CHAINING check for RXCHAINING_BUFSIZE mode */
                if ((wOption & PH_EXCHANGE_MODE_MASK) != PH_EXCHANGE_RXCHAINING_BUFSIZE)
 8017538:	897b      	ldrh	r3, [r7, #10]
 801753a:	f003 030f 	and.w	r3, r3, #15
 801753e:	2b03      	cmp	r3, #3
 8017540:	d017      	beq.n	8017572 <phpalI14443p4_Sw_Exchange+0x5a2>
                {
                    /* Return with chaining status if the next chain may not fit into our buffer */
                    if ((*pRxLength + wMaxPcdFrameSize) > wRxBufferSize)
 8017542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017544:	881b      	ldrh	r3, [r3, #0]
 8017546:	461a      	mov	r2, r3
 8017548:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801754a:	4413      	add	r3, r2
 801754c:	8bfa      	ldrh	r2, [r7, #30]
 801754e:	4293      	cmp	r3, r2
 8017550:	dd0f      	ble.n	8017572 <phpalI14443p4_Sw_Exchange+0x5a2>
                    {
                        /* Adjust RxBuffer position */
                        (*ppRxBuffer) = (*ppRxBuffer) + wRxOverlappedLen;
 8017552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017554:	681a      	ldr	r2, [r3, #0]
 8017556:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017558:	441a      	add	r2, r3
 801755a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801755c:	601a      	str	r2, [r3, #0]
                        *pRxLength = *pRxLength - wRxOverlappedLen;
 801755e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017560:	881a      	ldrh	r2, [r3, #0]
 8017562:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	b29a      	uxth	r2, r3
 8017568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801756a:	801a      	strh	r2, [r3, #0]

                        return PH_ADD_COMPCODE_FIXED(PH_ERR_SUCCESS_CHAINING, PH_COMP_PAL_ISO14443P4);
 801756c:	f240 6371 	movw	r3, #1649	@ 0x671
 8017570:	e09c      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                    }
                }
            }

            /* Set RxBuffer Start Position */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8017578:	2130      	movs	r1, #48	@ 0x30
 801757a:	4618      	mov	r0, r3
 801757c:	f7f8 f9b8 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017580:	4603      	mov	r3, r0
 8017582:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017584:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017586:	2b00      	cmp	r3, #0
 8017588:	d001      	beq.n	801758e <phpalI14443p4_Sw_Exchange+0x5be>
 801758a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801758c:	e08e      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXBUFFER_STARTPOS,
                wRxStartPos));

            /* Prepare R(ACK) frame */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	7a58      	ldrb	r0, [r3, #9]
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	7a99      	ldrb	r1, [r3, #10]
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	7c1a      	ldrb	r2, [r3, #16]
 801759a:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 801759e:	9301      	str	r3, [sp, #4]
 80175a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80175a4:	9300      	str	r3, [sp, #0]
 80175a6:	2301      	movs	r3, #1
 80175a8:	f000 fd70 	bl	801808c <phpalI14443p4_Sw_BuildRBlock>
 80175ac:	4603      	mov	r3, r0
 80175ae:	863b      	strh	r3, [r7, #48]	@ 0x30
 80175b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d001      	beq.n	80175ba <phpalI14443p4_Sw_Exchange+0x5ea>
 80175b6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80175b8:	e078      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                1,
                bIsoFrame,
                &wIsoFrameLen));

            /* Perform Exchange using complete ISO handling */
            status = phpalI14443p4_Sw_IsoHandling(
 80175ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80175bc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80175c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80175c2:	9202      	str	r2, [sp, #8]
 80175c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80175c6:	9201      	str	r2, [sp, #4]
 80175c8:	9300      	str	r3, [sp, #0]
 80175ca:	460b      	mov	r3, r1
 80175cc:	2200      	movs	r2, #0
 80175ce:	2100      	movs	r1, #0
 80175d0:	68f8      	ldr	r0, [r7, #12]
 80175d2:	f000 f86f 	bl	80176b4 <phpalI14443p4_Sw_IsoHandling>
 80175d6:	4603      	mov	r3, r0
 80175d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                wIsoFrameLen,
                ppRxBuffer,
                pRxLength);

            /* Complete chaining if buffer is full */
            if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 80175da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	2b04      	cmp	r3, #4
 80175e0:	d111      	bne.n	8017606 <phpalI14443p4_Sw_Exchange+0x636>
                ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 80175e2:	897b      	ldrh	r3, [r7, #10]
 80175e4:	f003 030f 	and.w	r3, r3, #15
            if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 80175e8:	2b03      	cmp	r3, #3
 80175ea:	d10c      	bne.n	8017606 <phpalI14443p4_Sw_Exchange+0x636>
            {
                /* Reset wRxStartPos */
                wRxStartPos = 0;
 80175ec:	2300      	movs	r3, #0
 80175ee:	873b      	strh	r3, [r7, #56]	@ 0x38

                /* Indicate Buffer Overflow */
                bBufferOverflow = 1;
 80175f0:	2301      	movs	r3, #1
 80175f2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

                /* Toggle Blocknumber */
                pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	7c1b      	ldrb	r3, [r3, #16]
 80175fa:	f083 0301 	eor.w	r3, r3, #1
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	741a      	strb	r2, [r3, #16]
 8017604:	e04c      	b.n	80176a0 <phpalI14443p4_Sw_Exchange+0x6d0>
            }
            /* Default behaviour */
            else
            {
                /* In case of buffer overflow error from HAL, reset the HAL Rx Buffer Start position */
                if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && ((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW))
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	7c9b      	ldrb	r3, [r3, #18]
 801760a:	2b03      	cmp	r3, #3
 801760c:	d011      	beq.n	8017632 <phpalI14443p4_Sw_Exchange+0x662>
 801760e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017610:	b2db      	uxtb	r3, r3
 8017612:	2b04      	cmp	r3, #4
 8017614:	d10d      	bne.n	8017632 <phpalI14443p4_Sw_Exchange+0x662>
                {
                    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	685b      	ldr	r3, [r3, #4]
 801761a:	2200      	movs	r2, #0
 801761c:	2130      	movs	r1, #48	@ 0x30
 801761e:	4618      	mov	r0, r3
 8017620:	f7f8 f966 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017624:	4603      	mov	r3, r0
 8017626:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017628:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801762a:	2b00      	cmp	r3, #0
 801762c:	d001      	beq.n	8017632 <phpalI14443p4_Sw_Exchange+0x662>
 801762e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017630:	e03c      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>
                }
                /* Bail out on error */
                PH_CHECK_SUCCESS(status);
 8017632:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017634:	2b00      	cmp	r3, #0
 8017636:	d001      	beq.n	801763c <phpalI14443p4_Sw_Exchange+0x66c>
 8017638:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801763a:	e037      	b.n	80176ac <phpalI14443p4_Sw_Exchange+0x6dc>

                /* Restore overlapped INF bytes */
                (void)memcpy(&(*ppRxBuffer)[wRxStartPos], bRxOverlapped, wRxOverlappedLen); /* PRQA S 3354 */
 801763c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017642:	4413      	add	r3, r2
 8017644:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017646:	f107 0120 	add.w	r1, r7, #32
 801764a:	4618      	mov	r0, r3
 801764c:	f00a fb67 	bl	8021d1e <memcpy>
 8017650:	e026      	b.n	80176a0 <phpalI14443p4_Sw_Exchange+0x6d0>
        }
        /* No chaining -> reception finished */
        else
        {
            /* Return data */
            if (0U == (bBufferOverflow))
 8017652:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8017656:	2b00      	cmp	r3, #0
 8017658:	d119      	bne.n	801768e <phpalI14443p4_Sw_Exchange+0x6be>
            {
                /* Special NAD chaining handling */
                /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                if ((wRxStartPos > 0U) && (pDataParams->bNadEnabled > 0U))
 801765a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801765c:	2b00      	cmp	r3, #0
 801765e:	d006      	beq.n	801766e <phpalI14443p4_Sw_Exchange+0x69e>
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	7adb      	ldrb	r3, [r3, #11]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d002      	beq.n	801766e <phpalI14443p4_Sw_Exchange+0x69e>
                {
                    ++wRxOverlappedLen;
 8017668:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801766a:	3301      	adds	r3, #1
 801766c:	877b      	strh	r3, [r7, #58]	@ 0x3a
                }

                /* Do not return protocol bytes, advance to INF field */
                (*ppRxBuffer) = (*ppRxBuffer) + wRxOverlappedLen;
 801766e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017674:	441a      	add	r2, r3
 8017676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017678:	601a      	str	r2, [r3, #0]
                *pRxLength = *pRxLength - wRxOverlappedLen;
 801767a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801767c:	881a      	ldrh	r2, [r3, #0]
 801767e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017680:	1ad3      	subs	r3, r2, r3
 8017682:	b29a      	uxth	r2, r3
 8017684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017686:	801a      	strh	r2, [r3, #0]
                /* Reception successful */
                status = PH_ERR_SUCCESS;
 8017688:	2300      	movs	r3, #0
 801768a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801768c:	e005      	b.n	801769a <phpalI14443p4_Sw_Exchange+0x6ca>
            }
            /* do not return any data in case of Buffer Overflow */
            else
            {
                *pRxLength = 0;
 801768e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017690:	2200      	movs	r2, #0
 8017692:	801a      	strh	r2, [r3, #0]
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P4);
 8017694:	f240 6304 	movw	r3, #1540	@ 0x604
 8017698:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            /* Reception finished */
            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_FINISHED;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	220f      	movs	r2, #15
 801769e:	721a      	strb	r2, [r3, #8]
        }
    }
    while (pDataParams->bStateNow != PHPAL_I14443P4_SW_STATE_FINISHED);
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	7a1b      	ldrb	r3, [r3, #8]
 80176a4:	2b0f      	cmp	r3, #15
 80176a6:	f47f af17 	bne.w	80174d8 <phpalI14443p4_Sw_Exchange+0x508>

    return status;
 80176aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 80176ac:	4618      	mov	r0, r3
 80176ae:	3744      	adds	r7, #68	@ 0x44
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176b4 <phpalI14443p4_Sw_IsoHandling>:
                                        uint8_t * pTxBuffer,
                                        uint16_t wTxLength,
                                        uint8_t ** ppRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 80176b4:	b590      	push	{r4, r7, lr}
 80176b6:	b091      	sub	sp, #68	@ 0x44
 80176b8:	af02      	add	r7, sp, #8
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	607b      	str	r3, [r7, #4]
 80176be:	460b      	mov	r3, r1
 80176c0:	817b      	strh	r3, [r7, #10]
 80176c2:	4613      	mov	r3, r2
 80176c4:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80176c6:	2300      	movs	r3, #0
 80176c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    phStatus_t  PH_MEMLOC_REM statusBkUp = PH_ERR_SUCCESS;
 80176ca:	2300      	movs	r3, #0
 80176cc:	847b      	strh	r3, [r7, #34]	@ 0x22
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 80176d2:	2300      	movs	r3, #0
 80176d4:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wRxBufferStartPos;
    uint8_t     PH_MEMLOC_REM bInvalidBlock;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bWtxm = 0;
 80176d6:	2300      	movs	r3, #0
 80176d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bCheckNad;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint32_t    PH_MEMLOC_REM dwTimeoutMax = PHPAL_I14443P4_SW_FWT_MAX_US;
 80176dc:	4b99      	ldr	r3, [pc, #612]	@ (8017944 <phpalI14443p4_Sw_IsoHandling+0x290>)
 80176de:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTimeoutPrev = 0;
 80176e0:	2300      	movs	r3, #0
 80176e2:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bTimeoutInMs = 0;
 80176e4:	2300      	movs	r3, #0
 80176e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t     bNAKCount = 0;
 80176ea:	2300      	movs	r3, #0
 80176ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t     bACKCount = 0;
 80176f0:	2300      	movs	r3, #0
 80176f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Buffered Exchange is not allowed here */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 80176f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	da02      	bge.n	8017704 <phpalI14443p4_Sw_IsoHandling+0x50>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 80176fe:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017702:	e362      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
    }

    /* Ignore custom modes */
    wOption &= (uint16_t)~(uint16_t)PH_EXCHANGE_MODE_MASK;
 8017704:	897b      	ldrh	r3, [r7, #10]
 8017706:	f023 030f 	bic.w	r3, r3, #15
 801770a:	817b      	strh	r3, [r7, #10]

    /* Reset response received flag */
    bResponseReceived = 0;
 801770c:	2300      	movs	r3, #0
 801770e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Loops in case of an error */
    do
    {
        /* WTX Timeout - set temporary FWT */
        if (bWtxm > 0U)
 8017712:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017716:	2b00      	cmp	r3, #0
 8017718:	f000 8081 	beq.w	801781e <phpalI14443p4_Sw_IsoHandling+0x16a>
        {
            /* Retrieve current timeout */
            status = phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, &wTimeoutPrev);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	f107 0210 	add.w	r2, r7, #16
 8017724:	210d      	movs	r1, #13
 8017726:	4618      	mov	r0, r3
 8017728:	f7f9 fd30 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801772c:	4603      	mov	r3, r0
 801772e:	86fb      	strh	r3, [r7, #54]	@ 0x36

            /* Timeout is out of range, retrieve it in milliseconds */
            if ((status & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW)
 8017730:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017732:	b2db      	uxtb	r3, r3
 8017734:	2b22      	cmp	r3, #34	@ 0x22
 8017736:	d112      	bne.n	801775e <phpalI14443p4_Sw_IsoHandling+0xaa>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimeoutPrev));
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	685b      	ldr	r3, [r3, #4]
 801773c:	f107 0210 	add.w	r2, r7, #16
 8017740:	210e      	movs	r1, #14
 8017742:	4618      	mov	r0, r3
 8017744:	f7f9 fd22 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8017748:	4603      	mov	r3, r0
 801774a:	833b      	strh	r3, [r7, #24]
 801774c:	8b3b      	ldrh	r3, [r7, #24]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d001      	beq.n	8017756 <phpalI14443p4_Sw_IsoHandling+0xa2>
 8017752:	8b3b      	ldrh	r3, [r7, #24]
 8017754:	e339      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
                bTimeoutInMs = 1;
 8017756:	2301      	movs	r3, #1
 8017758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801775c:	e007      	b.n	801776e <phpalI14443p4_Sw_IsoHandling+0xba>
            }
            else
            {
                PH_CHECK_SUCCESS(status);
 801775e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017760:	2b00      	cmp	r3, #0
 8017762:	d001      	beq.n	8017768 <phpalI14443p4_Sw_IsoHandling+0xb4>
 8017764:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017766:	e330      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
                bTimeoutInMs = 0;
 8017768:	2300      	movs	r3, #0
 801776a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            /* Calculate temporary WTX timeout */
            if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	7c9b      	ldrb	r3, [r3, #18]
 8017772:	2b03      	cmp	r3, #3
 8017774:	d10c      	bne.n	8017790 <phpalI14443p4_Sw_IsoHandling+0xdc>
            {
                dwTimeout = (((uint32_t)PHPAL_I14443P4_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi)) * (uint32_t)bWtxm) +
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	7b5b      	ldrb	r3, [r3, #13]
 801777a:	461a      	mov	r2, r3
 801777c:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 8017780:	4093      	lsls	r3, r2
 8017782:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8017786:	fb02 f303 	mul.w	r3, r2, r3
 801778a:	333c      	adds	r3, #60	@ 0x3c
 801778c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801778e:	e018      	b.n	80177c2 <phpalI14443p4_Sw_IsoHandling+0x10e>
                            (uint32_t)PHPAL_I14443P4_EXT_TIME_US;
            }
            else
            {
                /* As per Digital Spec V1.1 req 15.3.2.1, NFC Forum Device SHALL wait at least FWTtemp + delta FWTT4AT for a Response */
                dwTimeout = (((uint32_t)PHPAL_I14443P4_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi)) * (uint32_t)bWtxm) +
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	7b5b      	ldrb	r3, [r3, #13]
 8017794:	461a      	mov	r2, r3
 8017796:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 801779a:	4093      	lsls	r3, r2
 801779c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80177a0:	fb02 f303 	mul.w	r3, r2, r3
 80177a4:	f603 6329 	addw	r3, r3, #3625	@ 0xe29
 80177a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            (uint32_t)PHPAL_I14443P4_SW_DELTA_FWT_US;

                dwTimeoutMax = PHPAL_I14443P4_SW_NFC_FWT_MAX_US;
 80177aa:	4b67      	ldr	r3, [pc, #412]	@ (8017948 <phpalI14443p4_Sw_IsoHandling+0x294>)
 80177ac:	62bb      	str	r3, [r7, #40]	@ 0x28

                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	7c9b      	ldrb	r3, [r3, #18]
 80177b2:	2b01      	cmp	r3, #1
 80177b4:	d105      	bne.n	80177c2 <phpalI14443p4_Sw_IsoHandling+0x10e>
                {
                    dwTimeout += (uint32_t)PHPAL_I14443P4_SW_DELTA_TPCD_US;
 80177b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177b8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80177bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    dwTimeoutMax = PHPAL_I14443P4_SW_EMVCO_FWT_MAX_US;
 80177be:	4b63      	ldr	r3, [pc, #396]	@ (801794c <phpalI14443p4_Sw_IsoHandling+0x298>)
 80177c0:	62bb      	str	r3, [r7, #40]	@ 0x28
                }
            }

            /* Limit timeout to FWT max */
            if (dwTimeout > dwTimeoutMax)
 80177c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d901      	bls.n	80177ce <phpalI14443p4_Sw_IsoHandling+0x11a>
            {
                dwTimeout = dwTimeoutMax;
 80177ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Set temporary WTX timeout */
            if (dwTimeout > 0xFFFFU)
 80177ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80177d4:	d314      	bcc.n	8017800 <phpalI14443p4_Sw_IsoHandling+0x14c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, (uint16_t)((dwTimeout / 1000U) + 1U)));
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	6858      	ldr	r0, [r3, #4]
 80177da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177dc:	4a5c      	ldr	r2, [pc, #368]	@ (8017950 <phpalI14443p4_Sw_IsoHandling+0x29c>)
 80177de:	fba2 2303 	umull	r2, r3, r2, r3
 80177e2:	099b      	lsrs	r3, r3, #6
 80177e4:	b29b      	uxth	r3, r3
 80177e6:	3301      	adds	r3, #1
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	461a      	mov	r2, r3
 80177ec:	210e      	movs	r1, #14
 80177ee:	f7f8 f87f 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80177f2:	4603      	mov	r3, r0
 80177f4:	833b      	strh	r3, [r7, #24]
 80177f6:	8b3b      	ldrh	r3, [r7, #24]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d010      	beq.n	801781e <phpalI14443p4_Sw_IsoHandling+0x16a>
 80177fc:	8b3b      	ldrh	r3, [r7, #24]
 80177fe:	e2e4      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, (uint16_t)dwTimeout));
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017806:	b292      	uxth	r2, r2
 8017808:	210d      	movs	r1, #13
 801780a:	4618      	mov	r0, r3
 801780c:	f7f8 f870 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017810:	4603      	mov	r3, r0
 8017812:	833b      	strh	r3, [r7, #24]
 8017814:	8b3b      	ldrh	r3, [r7, #24]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d001      	beq.n	801781e <phpalI14443p4_Sw_IsoHandling+0x16a>
 801781a:	8b3b      	ldrh	r3, [r7, #24]
 801781c:	e2d5      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
            }
        }

        /* Call HAL exchange function */
        status = phhalHw_Exchange(
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	6858      	ldr	r0, [r3, #4]
 8017822:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8017826:	8979      	ldrh	r1, [r7, #10]
 8017828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801782a:	9301      	str	r3, [sp, #4]
 801782c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801782e:	9300      	str	r3, [sp, #0]
 8017830:	4613      	mov	r3, r2
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	f7f7 fca6 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8017838:	4603      	mov	r3, r0
 801783a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            wOption,
            pTxBuffer,
            wTxLength,
            ppRxBuffer,
            pRxLength);
        statusBkUp = status;
 801783c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801783e:	847b      	strh	r3, [r7, #34]	@ 0x22

        /* Reset Exchange Option */
        wOption = PH_EXCHANGE_DEFAULT;
 8017840:	2300      	movs	r3, #0
 8017842:	817b      	strh	r3, [r7, #10]

        /* Reset transmission length */
        wTxLength = 0;
 8017844:	2300      	movs	r3, #0
 8017846:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        /* Status --> InvalidBlock mapping */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	7c9b      	ldrb	r3, [r3, #18]
 801784e:	2b01      	cmp	r3, #1
 8017850:	d11d      	bne.n	801788e <phpalI14443p4_Sw_IsoHandling+0x1da>
        {
            bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_EMVCO_IS_INVALID_BLOCK_STATUS(status);
 8017852:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017854:	b2db      	uxtb	r3, r3
 8017856:	2b01      	cmp	r3, #1
 8017858:	d013      	beq.n	8017882 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801785a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801785c:	b2db      	uxtb	r3, r3
 801785e:	2b02      	cmp	r3, #2
 8017860:	d00f      	beq.n	8017882 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8017862:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017864:	b2db      	uxtb	r3, r3
 8017866:	2b11      	cmp	r3, #17
 8017868:	d00b      	beq.n	8017882 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801786a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801786c:	b2db      	uxtb	r3, r3
 801786e:	2b05      	cmp	r3, #5
 8017870:	d007      	beq.n	8017882 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8017872:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2b03      	cmp	r3, #3
 8017878:	d003      	beq.n	8017882 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801787a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801787c:	b2db      	uxtb	r3, r3
 801787e:	2b06      	cmp	r3, #6
 8017880:	d101      	bne.n	8017886 <phpalI14443p4_Sw_IsoHandling+0x1d2>
 8017882:	2301      	movs	r3, #1
 8017884:	e000      	b.n	8017888 <phpalI14443p4_Sw_IsoHandling+0x1d4>
 8017886:	2300      	movs	r3, #0
 8017888:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 801788c:	e014      	b.n	80178b8 <phpalI14443p4_Sw_IsoHandling+0x204>
        }
        else
        {
           bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_IS_INVALID_BLOCK_STATUS(status);
 801788e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017890:	b2db      	uxtb	r3, r3
 8017892:	2b01      	cmp	r3, #1
 8017894:	d00b      	beq.n	80178ae <phpalI14443p4_Sw_IsoHandling+0x1fa>
 8017896:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017898:	b2db      	uxtb	r3, r3
 801789a:	2b02      	cmp	r3, #2
 801789c:	d007      	beq.n	80178ae <phpalI14443p4_Sw_IsoHandling+0x1fa>
 801789e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	2b05      	cmp	r3, #5
 80178a4:	d003      	beq.n	80178ae <phpalI14443p4_Sw_IsoHandling+0x1fa>
 80178a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178a8:	b2db      	uxtb	r3, r3
 80178aa:	2b03      	cmp	r3, #3
 80178ac:	d101      	bne.n	80178b2 <phpalI14443p4_Sw_IsoHandling+0x1fe>
 80178ae:	2301      	movs	r3, #1
 80178b0:	e000      	b.n	80178b4 <phpalI14443p4_Sw_IsoHandling+0x200>
 80178b2:	2300      	movs	r3, #0
 80178b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        if (0U == (bInvalidBlock))
 80178b8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d149      	bne.n	8017954 <phpalI14443p4_Sw_IsoHandling+0x2a0>
        {
            /* MIFARE compliancy: force protocol error on NAK */
            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 80178c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178c2:	b2db      	uxtb	r3, r3
 80178c4:	2b73      	cmp	r3, #115	@ 0x73
 80178c6:	d113      	bne.n	80178f0 <phpalI14443p4_Sw_IsoHandling+0x23c>
            {
                *pRxLength = 0;
 80178c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178ca:	2200      	movs	r2, #0
 80178cc:	801a      	strh	r2, [r3, #0]
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	685b      	ldr	r3, [r3, #4]
 80178d2:	2200      	movs	r2, #0
 80178d4:	2130      	movs	r1, #48	@ 0x30
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7f8 f80a 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80178dc:	4603      	mov	r3, r0
 80178de:	833b      	strh	r3, [r7, #24]
 80178e0:	8b3b      	ldrh	r3, [r7, #24]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d001      	beq.n	80178ea <phpalI14443p4_Sw_IsoHandling+0x236>
 80178e6:	8b3b      	ldrh	r3, [r7, #24]
 80178e8:	e26f      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80178ea:	f240 6306 	movw	r3, #1542	@ 0x606
 80178ee:	e26c      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
            }
            else
            {
                PH_CHECK_SUCCESS(status);
 80178f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d001      	beq.n	80178fa <phpalI14443p4_Sw_IsoHandling+0x246>
 80178f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80178f8:	e267      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>

                /* WTX Timeout - restore previous value */
                if (bWtxm > 0U)
 80178fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d028      	beq.n	8017954 <phpalI14443p4_Sw_IsoHandling+0x2a0>
                {
                    /* Restore previous state and timeout after */
                    if (0U == (bTimeoutInMs))
 8017902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017906:	2b00      	cmp	r3, #0
 8017908:	d10d      	bne.n	8017926 <phpalI14443p4_Sw_IsoHandling+0x272>
                    {
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimeoutPrev));
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	685b      	ldr	r3, [r3, #4]
 801790e:	8a3a      	ldrh	r2, [r7, #16]
 8017910:	210d      	movs	r1, #13
 8017912:	4618      	mov	r0, r3
 8017914:	f7f7 ffec 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017918:	4603      	mov	r3, r0
 801791a:	833b      	strh	r3, [r7, #24]
 801791c:	8b3b      	ldrh	r3, [r7, #24]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d018      	beq.n	8017954 <phpalI14443p4_Sw_IsoHandling+0x2a0>
 8017922:	8b3b      	ldrh	r3, [r7, #24]
 8017924:	e251      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
                    }
                    else
                    {
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, wTimeoutPrev));
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	8a3a      	ldrh	r2, [r7, #16]
 801792c:	210e      	movs	r1, #14
 801792e:	4618      	mov	r0, r3
 8017930:	f7f7 ffde 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017934:	4603      	mov	r3, r0
 8017936:	833b      	strh	r3, [r7, #24]
 8017938:	8b3b      	ldrh	r3, [r7, #24]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d00a      	beq.n	8017954 <phpalI14443p4_Sw_IsoHandling+0x2a0>
 801793e:	8b3b      	ldrh	r3, [r7, #24]
 8017940:	e243      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
 8017942:	bf00      	nop
 8017944:	004b8408 	.word	0x004b8408
 8017948:	004b93a8 	.word	0x004b93a8
 801794c:	004b9790 	.word	0x004b9790
 8017950:	10624dd3 	.word	0x10624dd3
                }
            }
        }

        /* Reset defaults */
        bWtxm = 0;
 8017954:	2300      	movs	r3, #0
 8017956:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        /* Emvco: case_id TA404_04, TA411_04, TB404_04, TB411_04 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, &wRxBufferStartPos));
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	f107 0212 	add.w	r2, r7, #18
 8017962:	2130      	movs	r1, #48	@ 0x30
 8017964:	4618      	mov	r0, r3
 8017966:	f7f9 fc11 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801796a:	4603      	mov	r3, r0
 801796c:	833b      	strh	r3, [r7, #24]
 801796e:	8b3b      	ldrh	r3, [r7, #24]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d001      	beq.n	8017978 <phpalI14443p4_Sw_IsoHandling+0x2c4>
 8017974:	8b3b      	ldrh	r3, [r7, #24]
 8017976:	e228      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
        /* Check for FSD */
        if(((*pRxLength) - wRxBufferStartPos) > (bI14443p4_FsTable[pDataParams->bFsdi] - 2))
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	7b9b      	ldrb	r3, [r3, #14]
 801797c:	461a      	mov	r2, r3
 801797e:	4b9d      	ldr	r3, [pc, #628]	@ (8017bf4 <phpalI14443p4_Sw_IsoHandling+0x540>)
 8017980:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017984:	1e5a      	subs	r2, r3, #1
 8017986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017988:	881b      	ldrh	r3, [r3, #0]
 801798a:	4619      	mov	r1, r3
 801798c:	8a7b      	ldrh	r3, [r7, #18]
 801798e:	1acb      	subs	r3, r1, r3
 8017990:	429a      	cmp	r2, r3
 8017992:	dc15      	bgt.n	80179c0 <phpalI14443p4_Sw_IsoHandling+0x30c>
         {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	2200      	movs	r2, #0
 801799a:	2130      	movs	r1, #48	@ 0x30
 801799c:	4618      	mov	r0, r3
 801799e:	f7f7 ffa7 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80179a2:	4603      	mov	r3, r0
 80179a4:	833b      	strh	r3, [r7, #24]
 80179a6:	8b3b      	ldrh	r3, [r7, #24]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d001      	beq.n	80179b0 <phpalI14443p4_Sw_IsoHandling+0x2fc>
 80179ac:	8b3b      	ldrh	r3, [r7, #24]
 80179ae:	e20c      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80179b0:	f240 6306 	movw	r3, #1542	@ 0x606
 80179b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            *pRxLength = 0;
 80179b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179b8:	2200      	movs	r2, #0
 80179ba:	801a      	strh	r2, [r3, #0]
            return status;
 80179bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80179be:	e204      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
         }
        /* Do not enter if we received an invalid block */
        if (0U == (bInvalidBlock))
 80179c0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	f040 8138 	bne.w	8017c3a <phpalI14443p4_Sw_IsoHandling+0x586>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 80179ca:	2301      	movs	r3, #1
 80179cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

            /* Map receive buffer pointer to current data */
            pResp = *ppRxBuffer + wRxBufferStartPos;
 80179d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	8a7a      	ldrh	r2, [r7, #18]
 80179d6:	4413      	add	r3, r2
 80179d8:	61fb      	str	r3, [r7, #28]
            wRespLen = *pRxLength - wRxBufferStartPos;
 80179da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179dc:	881a      	ldrh	r2, [r3, #0]
 80179de:	8a7b      	ldrh	r3, [r7, #18]
 80179e0:	1ad3      	subs	r3, r2, r3
 80179e2:	837b      	strh	r3, [r7, #26]

            /* I-Block handling */
            if (0u != (PHPAL_I14443P4_SW_IS_I_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 80179e4:	69fb      	ldr	r3, [r7, #28]
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d15e      	bne.n	8017aae <phpalI14443p4_Sw_IsoHandling+0x3fa>
            {
                /* Rule 2/10, ISO/IEC 14443-4:2008(E) */
                if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	7a1b      	ldrb	r3, [r3, #8]
 80179f4:	2b81      	cmp	r3, #129	@ 0x81
 80179f6:	d103      	bne.n	8017a00 <phpalI14443p4_Sw_IsoHandling+0x34c>
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 80179f8:	2301      	movs	r3, #1
 80179fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80179fe:	e104      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                }
                else
                {
                    /* Evaluate if NAD should be present */
                    /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                    if ((pDataParams->bNadEnabled > 0U) && (0U == ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))))
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	7adb      	ldrb	r3, [r3, #11]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d008      	beq.n	8017a1a <phpalI14443p4_Sw_IsoHandling+0x366>
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	7a1b      	ldrb	r3, [r3, #8]
 8017a0c:	b25b      	sxtb	r3, r3
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	db03      	blt.n	8017a1a <phpalI14443p4_Sw_IsoHandling+0x366>
                    {
                        bCheckNad = 1;
 8017a12:	2301      	movs	r3, #1
 8017a14:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8017a18:	e002      	b.n	8017a20 <phpalI14443p4_Sw_IsoHandling+0x36c>
                    }
                    else
                    {
                        bCheckNad = 0;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                    }

                    /* Check if I-Block is valid */
                    status = phpalI14443p4_Sw_IsValidIBlock(
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	7a58      	ldrb	r0, [r3, #9]
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	7a99      	ldrb	r1, [r3, #10]
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	7b1c      	ldrb	r4, [r3, #12]
 8017a2c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8017a30:	8b7b      	ldrh	r3, [r7, #26]
 8017a32:	9301      	str	r3, [sp, #4]
 8017a34:	69fb      	ldr	r3, [r7, #28]
 8017a36:	9300      	str	r3, [sp, #0]
 8017a38:	4623      	mov	r3, r4
 8017a3a:	f000 f9cb 	bl	8017dd4 <phpalI14443p4_Sw_IsValidIBlock>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        pDataParams->bNad,
                        pResp,
                        wRespLen);

                    /* Blocknumber is equal, I-Block Rx mode is active */
                    if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (PHPAL_I14443P4_SW_IS_BLOCKNR_EQUAL(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 8017a42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017a44:	b2db      	uxtb	r3, r3
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d12d      	bne.n	8017aa6 <phpalI14443p4_Sw_IsoHandling+0x3f2>
 8017a4a:	69fb      	ldr	r3, [r7, #28]
 8017a4c:	781b      	ldrb	r3, [r3, #0]
 8017a4e:	f003 0301 	and.w	r3, r3, #1
 8017a52:	68fa      	ldr	r2, [r7, #12]
 8017a54:	7c12      	ldrb	r2, [r2, #16]
 8017a56:	4293      	cmp	r3, r2
 8017a58:	d125      	bne.n	8017aa6 <phpalI14443p4_Sw_IsoHandling+0x3f2>
                    {
                        /* Switch from Tx-Mode to Rx-Mode */
                        if ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) == PHPAL_I14443P4_SW_STATE_I_BLOCK_TX)
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	7a1b      	ldrb	r3, [r3, #8]
 8017a5e:	f003 030f 	and.w	r3, r3, #15
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	d102      	bne.n	8017a6c <phpalI14443p4_Sw_IsoHandling+0x3b8>
                        {
                            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_RX;
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	2202      	movs	r2, #2
 8017a6a:	721a      	strb	r2, [r3, #8]
                        }

                        /* Rule B, ISO/IEC 14443-4:2008(E), toggle Blocknumber */
                        pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	7c1b      	ldrb	r3, [r3, #16]
 8017a70:	f083 0301 	eor.w	r3, r3, #1
 8017a74:	b2da      	uxtb	r2, r3
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	741a      	strb	r2, [r3, #16]

                        /* Set chaining bit if card is chaining */
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8017a7a:	69fb      	ldr	r3, [r7, #28]
 8017a7c:	781b      	ldrb	r3, [r3, #0]
 8017a7e:	f003 0310 	and.w	r3, r3, #16
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d007      	beq.n	8017a96 <phpalI14443p4_Sw_IsoHandling+0x3e2>
                        {
                            pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	7a1b      	ldrb	r3, [r3, #8]
 8017a8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017a8e:	b2da      	uxtb	r2, r3
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	721a      	strb	r2, [r3, #8]
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8017a94:	e0b9      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Clear chaining bit otherwise */
                        else
                        {
                            pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	7a1b      	ldrb	r3, [r3, #8]
 8017a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017a9e:	b2da      	uxtb	r2, r3
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	721a      	strb	r2, [r3, #8]
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8017aa4:	e0b1      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                    /* We received an invalid block */
                    else
                    {
                        /* Protocol violation */
                        bInvalidBlock = 1;
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8017aac:	e0ad      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                }
            }
            /* R(ACK) handling */
            else if ((PHPAL_I14443P4_SW_IS_R_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U) && (PHPAL_I14443P4_SW_IS_ACK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 8017aae:	69fb      	ldr	r3, [r7, #28]
 8017ab0:	781b      	ldrb	r3, [r3, #0]
 8017ab2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017ab6:	2b80      	cmp	r3, #128	@ 0x80
 8017ab8:	d144      	bne.n	8017b44 <phpalI14443p4_Sw_IsoHandling+0x490>
 8017aba:	69fb      	ldr	r3, [r7, #28]
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	f003 0310 	and.w	r3, r3, #16
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d13e      	bne.n	8017b44 <phpalI14443p4_Sw_IsoHandling+0x490>
            {
                /* Check if R-Block is valid */
                status = phpalI14443p4_Sw_IsValidRBlock(
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	7a58      	ldrb	r0, [r3, #9]
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	7a99      	ldrb	r1, [r3, #10]
 8017ace:	8b7b      	ldrh	r3, [r7, #26]
 8017ad0:	69fa      	ldr	r2, [r7, #28]
 8017ad2:	f000 f9ee 	bl	8017eb2 <phpalI14443p4_Sw_IsValidRBlock>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    pDataParams->bCid,
                    pResp,
                    wRespLen);

                /* R-Block invalid or not in transmission mode */
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017ada:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017adc:	b2db      	uxtb	r3, r3
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d003      	beq.n	8017aea <phpalI14443p4_Sw_IsoHandling+0x436>
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017ae8:	e08f      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                }
                else
                {
                    /* Blocknumber is equal */
                    if (0u != (PHPAL_I14443P4_SW_IS_BLOCKNR_EQUAL(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	f003 0301 	and.w	r3, r3, #1
 8017af2:	68fa      	ldr	r2, [r7, #12]
 8017af4:	7c12      	ldrb	r2, [r2, #16]
 8017af6:	4293      	cmp	r3, r2
 8017af8:	d10f      	bne.n	8017b1a <phpalI14443p4_Sw_IsoHandling+0x466>
                    {
                        /* Continue TX chaining */
                        if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	7a1b      	ldrb	r3, [r3, #8]
 8017afe:	2b81      	cmp	r3, #129	@ 0x81
 8017b00:	d107      	bne.n	8017b12 <phpalI14443p4_Sw_IsoHandling+0x45e>
                        {
                            /* Rule B, ISO/IEC 14443-4:2008(E), toggle Blocknumber */
                            pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	7c1b      	ldrb	r3, [r3, #16]
 8017b06:	f083 0301 	eor.w	r3, r3, #1
 8017b0a:	b2da      	uxtb	r2, r3
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	741a      	strb	r2, [r3, #16]
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017b10:	e07b      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Not in chaining mode */
                        else
                        {
                            /* Protocol violation */
                            bInvalidBlock = 1;
 8017b12:	2301      	movs	r3, #1
 8017b14:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017b18:	e077      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                    /* Rule 6, ISO/IEC 14443-4:2008(E), unequal block number */
                    else
                    {
                        /* Limit this behaviour with bMaxRetryCount, bRetry count is set by the caller in this case */
                        if ((bRetryCount > pDataParams->bMaxRetryCount) || (pDataParams->bMaxRetryCount == 0U))
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	7c5b      	ldrb	r3, [r3, #17]
 8017b1e:	7a7a      	ldrb	r2, [r7, #9]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d803      	bhi.n	8017b2c <phpalI14443p4_Sw_IsoHandling+0x478>
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	7c5b      	ldrb	r3, [r3, #17]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d103      	bne.n	8017b34 <phpalI14443p4_Sw_IsoHandling+0x480>
                        {
                            /* Protocol violation */
                            bInvalidBlock = 1;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017b32:	e06a      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Send last I-Block again */
                        else
                        {
                            pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	7a1b      	ldrb	r3, [r3, #8]
 8017b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b3c:	b2da      	uxtb	r2, r3
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	721a      	strb	r2, [r3, #8]
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017b42:	e062      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                    }
                }
            }
            /* S(WTX) handling */
            else if ((PHPAL_I14443P4_SW_IS_S_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U) && (PHPAL_I14443P4_SW_IS_WTX(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 8017b44:	69fb      	ldr	r3, [r7, #28]
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017b4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8017b4e:	d157      	bne.n	8017c00 <phpalI14443p4_Sw_IsoHandling+0x54c>
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8017b58:	2b30      	cmp	r3, #48	@ 0x30
 8017b5a:	d151      	bne.n	8017c00 <phpalI14443p4_Sw_IsoHandling+0x54c>
            {
                /* Check if S-Block is valid */
                status = phpalI14443p4_Sw_IsValidSBlock(
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	7a58      	ldrb	r0, [r3, #9]
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	7a99      	ldrb	r1, [r3, #10]
 8017b64:	8b7b      	ldrh	r3, [r7, #26]
 8017b66:	69fa      	ldr	r2, [r7, #28]
 8017b68:	f000 f9ec 	bl	8017f44 <phpalI14443p4_Sw_IsValidSBlock>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    pDataParams->bCid,
                    pResp,
                    wRespLen);

                /* Rule 3, ISO/IEC 14443-4:2008(E), S(WTX) handling */
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8017b70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d13f      	bne.n	8017bf8 <phpalI14443p4_Sw_IsoHandling+0x544>
                {
                    /* Retrieve WTXM */
                    bWtxm = pResp[wRespLen-1u];
 8017b78:	8b7b      	ldrh	r3, [r7, #26]
 8017b7a:	3b01      	subs	r3, #1
 8017b7c:	69fa      	ldr	r2, [r7, #28]
 8017b7e:	4413      	add	r3, r2
 8017b80:	781b      	ldrb	r3, [r3, #0]
 8017b82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* EMV 2.5 */
                    if ((0U != ((bWtxm & PHPAL_I14443P4_SW_S_BLOCK_INF_PLI_MASK))) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8017b86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017b8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d007      	beq.n	8017ba2 <phpalI14443p4_Sw_IsoHandling+0x4ee>
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	7c9b      	ldrb	r3, [r3, #18]
 8017b96:	2b01      	cmp	r3, #1
 8017b98:	d103      	bne.n	8017ba2 <phpalI14443p4_Sw_IsoHandling+0x4ee>
                    {
                        status =  PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017b9a:	f240 6306 	movw	r3, #1542	@ 0x606
 8017b9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        break;
 8017ba0:	e104      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
                    }

                    /* Ignore and clear the Power Level Indication */
                    bWtxm &= 0x3FU;
 8017ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017ba6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017baa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* Treat invalid WTXM value as protocol error, do not perform error correction. */
                    if ((bWtxm == 0U) || (bWtxm > 59U))
 8017bae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d003      	beq.n	8017bbe <phpalI14443p4_Sw_IsoHandling+0x50a>
 8017bb6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017bba:	2b3b      	cmp	r3, #59	@ 0x3b
 8017bbc:	d903      	bls.n	8017bc6 <phpalI14443p4_Sw_IsoHandling+0x512>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017bbe:	f240 6306 	movw	r3, #1542	@ 0x606
 8017bc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        break;
 8017bc4:	e0f2      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
                    }

                    /* Generate S(WTX) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildSBlock(
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	7a58      	ldrb	r0, [r3, #9]
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	7a99      	ldrb	r1, [r3, #10]
 8017bce:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8017bd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8017bd6:	9301      	str	r3, [sp, #4]
 8017bd8:	f107 0314 	add.w	r3, r7, #20
 8017bdc:	9300      	str	r3, [sp, #0]
 8017bde:	4613      	mov	r3, r2
 8017be0:	2201      	movs	r2, #1
 8017be2:	f000 fa90 	bl	8018106 <phpalI14443p4_Sw_BuildSBlock>
 8017be6:	4603      	mov	r3, r0
 8017be8:	833b      	strh	r3, [r7, #24]
 8017bea:	8b3b      	ldrh	r3, [r7, #24]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d00b      	beq.n	8017c08 <phpalI14443p4_Sw_IsoHandling+0x554>
 8017bf0:	8b3b      	ldrh	r3, [r7, #24]
 8017bf2:	e0ea      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
 8017bf4:	08025af8 	.word	0x08025af8
                }
                /* We received an invalid block */
                else
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8017bfe:	e003      	b.n	8017c08 <phpalI14443p4_Sw_IsoHandling+0x554>
            }
            /* We received an invalid block */
            else
            {
                /* Protocol violation */
                bInvalidBlock = 1;
 8017c00:	2301      	movs	r3, #1
 8017c02:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8017c06:	e000      	b.n	8017c0a <phpalI14443p4_Sw_IsoHandling+0x556>
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8017c08:	bf00      	nop
            }

            /* Protocol violation */
            if (0U != (bInvalidBlock))
 8017c0a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d010      	beq.n	8017c34 <phpalI14443p4_Sw_IsoHandling+0x580>
            {
                /* Emvco:  case_id TA404_XY and TA401_15 */
                /* bMaxRetryCount = 0 suppresses the S(DESELECT) behaviour */
                if((pDataParams->bMaxRetryCount > 0U) && (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	7c5b      	ldrb	r3, [r3, #17]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d008      	beq.n	8017c2c <phpalI14443p4_Sw_IsoHandling+0x578>
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	7c9b      	ldrb	r3, [r3, #18]
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	d004      	beq.n	8017c2c <phpalI14443p4_Sw_IsoHandling+0x578>
                {
                    /* send S(DESELECT) (ignore return code) */
                    statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8017c22:	68f8      	ldr	r0, [r7, #12]
 8017c24:	f7ff f921 	bl	8016e6a <phpalI14443p4_Sw_Deselect>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	833b      	strh	r3, [r7, #24]
                }

                /* bail out with protocol error */
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017c2c:	f240 6306 	movw	r3, #1542	@ 0x606
 8017c30:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8017c32:	e0bb      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
            }
            /* Reset retry counter on no error */
            else
            {
                bRetryCount = 0;
 8017c34:	2300      	movs	r3, #0
 8017c36:	727b      	strb	r3, [r7, #9]
 8017c38:	e0a8      	b.n	8017d8c <phpalI14443p4_Sw_IsoHandling+0x6d8>
             * and For EMVCo: TA401_15 Article(10.3.4.4)
             * Says, After 2nd failed retry of I-block exchange. Send NAk
             */

            /* This is added to restrict retry count less than 1 for ISO mode */
            if( (bRetryCount >= pDataParams->bMaxRetryCount) && (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	7c5b      	ldrb	r3, [r3, #17]
 8017c3e:	7a7a      	ldrb	r2, [r7, #9]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d31f      	bcc.n	8017c84 <phpalI14443p4_Sw_IsoHandling+0x5d0>
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	7c9b      	ldrb	r3, [r3, #18]
 8017c48:	2b03      	cmp	r3, #3
 8017c4a:	d11b      	bne.n	8017c84 <phpalI14443p4_Sw_IsoHandling+0x5d0>
            {
                if (pDataParams->bMaxRetryCount > 0U)
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	7c5b      	ldrb	r3, [r3, #17]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	f000 80a4 	beq.w	8017d9e <phpalI14443p4_Sw_IsoHandling+0x6ea>
                {
                    /* backup retry count */
                    bRetryCount = pDataParams->bMaxRetryCount;
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	7c5b      	ldrb	r3, [r3, #17]
 8017c5a:	727b      	strb	r3, [r7, #9]

                    /* set retry count to zero to send only one S(DESELECT) */
                    pDataParams->bMaxRetryCount = 0;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	2200      	movs	r2, #0
 8017c60:	745a      	strb	r2, [r3, #17]

                    /* send deselect (ignore return code) */
                    statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8017c62:	68f8      	ldr	r0, [r7, #12]
 8017c64:	f7ff f901 	bl	8016e6a <phpalI14443p4_Sw_Deselect>
 8017c68:	4603      	mov	r3, r0
 8017c6a:	833b      	strh	r3, [r7, #24]

                    /* restore retry count setting */
                    pDataParams->bMaxRetryCount = bRetryCount;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	7a7a      	ldrb	r2, [r7, #9]
 8017c70:	745a      	strb	r2, [r3, #17]

                    /* Return ERR_RECOVERY_FAILED if some response has been received before */
                    if (0U != (bResponseReceived))
 8017c72:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	f000 8091 	beq.w	8017d9e <phpalI14443p4_Sw_IsoHandling+0x6ea>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 8017c7c:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8017c80:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    }
                }
                break;
 8017c82:	e08c      	b.n	8017d9e <phpalI14443p4_Sw_IsoHandling+0x6ea>
            }

            else if (bRetryCount <= pDataParams->bMaxRetryCount)
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	7c5b      	ldrb	r3, [r3, #17]
 8017c88:	7a7a      	ldrb	r2, [r7, #9]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d85d      	bhi.n	8017d4a <phpalI14443p4_Sw_IsoHandling+0x696>
            {
                /* Rule 5, ISO/IEC 14443-4:2008(E) */
                if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_RX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	7a1b      	ldrb	r3, [r3, #8]
 8017c92:	2b82      	cmp	r3, #130	@ 0x82
 8017c94:	d12c      	bne.n	8017cf0 <phpalI14443p4_Sw_IsoHandling+0x63c>
                {
                    /* Generate R(ACK) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	7a58      	ldrb	r0, [r3, #9]
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	7a99      	ldrb	r1, [r3, #10]
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	7c1a      	ldrb	r2, [r3, #16]
 8017ca2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8017ca6:	9301      	str	r3, [sp, #4]
 8017ca8:	f107 0314 	add.w	r3, r7, #20
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	2301      	movs	r3, #1
 8017cb0:	f000 f9ec 	bl	801808c <phpalI14443p4_Sw_BuildRBlock>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	833b      	strh	r3, [r7, #24]
 8017cb8:	8b3b      	ldrh	r3, [r7, #24]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d001      	beq.n	8017cc2 <phpalI14443p4_Sw_IsoHandling+0x60e>
 8017cbe:	8b3b      	ldrh	r3, [r7, #24]
 8017cc0:	e083      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
                        pDataParams->bPcbBlockNum,
                        1,
                        bIsoFrame,
                        &wTxLength));

                    bNAKCount = 0;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                    /* Emvco: case_id TA410 */
                    if(bACKCount >= pDataParams->bMaxRetryCount)
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	7c5b      	ldrb	r3, [r3, #17]
 8017ccc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d266      	bcs.n	8017da2 <phpalI14443p4_Sw_IsoHandling+0x6ee>
                    {
                        break;
                    }

                    if((statusBkUp & PH_ERR_MASK) != PH_ERR_SUCCESS )
 8017cd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017cd6:	b2db      	uxtb	r3, r3
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d005      	beq.n	8017ce8 <phpalI14443p4_Sw_IsoHandling+0x634>
                    {
                        bACKCount++;
 8017cdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017ce6:	e04e      	b.n	8017d86 <phpalI14443p4_Sw_IsoHandling+0x6d2>
                    }
                    else
                    {
                        bACKCount = 0;
 8017ce8:	2300      	movs	r3, #0
 8017cea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017cee:	e04a      	b.n	8017d86 <phpalI14443p4_Sw_IsoHandling+0x6d2>
                }
                /* Rule 4, ISO/IEC 14443-4:2008(E) */
                else
                {
                    /* Generate R(NAK) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	7a58      	ldrb	r0, [r3, #9]
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	7a99      	ldrb	r1, [r3, #10]
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	7c1a      	ldrb	r2, [r3, #16]
 8017cfc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8017d00:	9301      	str	r3, [sp, #4]
 8017d02:	f107 0314 	add.w	r3, r7, #20
 8017d06:	9300      	str	r3, [sp, #0]
 8017d08:	2300      	movs	r3, #0
 8017d0a:	f000 f9bf 	bl	801808c <phpalI14443p4_Sw_BuildRBlock>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	833b      	strh	r3, [r7, #24]
 8017d12:	8b3b      	ldrh	r3, [r7, #24]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d001      	beq.n	8017d1c <phpalI14443p4_Sw_IsoHandling+0x668>
 8017d18:	8b3b      	ldrh	r3, [r7, #24]
 8017d1a:	e056      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>
                        pDataParams->bCid,
                        pDataParams->bPcbBlockNum,
                        0,
                        bIsoFrame,
                        &wTxLength));
                    bACKCount = 0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                    /* Emvco: case_id TA402 TA403 */
                    if(bNAKCount >= pDataParams->bMaxRetryCount)
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	7c5b      	ldrb	r3, [r3, #17]
 8017d26:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d23b      	bcs.n	8017da6 <phpalI14443p4_Sw_IsoHandling+0x6f2>
                    {
                        break;
                    }
                    /* Emvco: case_id: TA415_X */
                    if((statusBkUp & PH_ERR_MASK) != PH_ERR_SUCCESS )
 8017d2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d005      	beq.n	8017d42 <phpalI14443p4_Sw_IsoHandling+0x68e>
                    {
                        bNAKCount++;
 8017d36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017d40:	e021      	b.n	8017d86 <phpalI14443p4_Sw_IsoHandling+0x6d2>
                    }
                    else
                    {
                        bNAKCount = 0;
 8017d42:	2300      	movs	r3, #0
 8017d44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017d48:	e01d      	b.n	8017d86 <phpalI14443p4_Sw_IsoHandling+0x6d2>
            }
            /* Bail out if the max. retry count is reached */
            else
            {
                /* Deselect card if behaviour is enabled */
                if (pDataParams->bMaxRetryCount > 0U)
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	7c5b      	ldrb	r3, [r3, #17]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d02b      	beq.n	8017daa <phpalI14443p4_Sw_IsoHandling+0x6f6>
                {
                    /* backup retry count */
                    bRetryCount = pDataParams->bMaxRetryCount;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	7c5b      	ldrb	r3, [r3, #17]
 8017d56:	727b      	strb	r3, [r7, #9]

                    /* set retry count to zero to send only one S(DESELECT) */
                    pDataParams->bMaxRetryCount = 0;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	745a      	strb	r2, [r3, #17]

                    /* Emvco Doesnot expect DeSelect Command*/
                    if(pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	7c9b      	ldrb	r3, [r3, #18]
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d004      	beq.n	8017d70 <phpalI14443p4_Sw_IsoHandling+0x6bc>
                    {
                        /* send deselect (ignore return code) */
                        statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8017d66:	68f8      	ldr	r0, [r7, #12]
 8017d68:	f7ff f87f 	bl	8016e6a <phpalI14443p4_Sw_Deselect>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	833b      	strh	r3, [r7, #24]
                    }
                    /* restore retry count setting */
                    pDataParams->bMaxRetryCount = bRetryCount;
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	7a7a      	ldrb	r2, [r7, #9]
 8017d74:	745a      	strb	r2, [r3, #17]

                    /* Return ERR_RECOVERY_FAILED if some response has been received before */
                    if (0U != (bResponseReceived)) {
 8017d76:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d015      	beq.n	8017daa <phpalI14443p4_Sw_IsoHandling+0x6f6>
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 8017d7e:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8017d82:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    }
                }
                break;
 8017d84:	e011      	b.n	8017daa <phpalI14443p4_Sw_IsoHandling+0x6f6>
            }

            /* Increment retry count */
            ++bRetryCount;
 8017d86:	7a7b      	ldrb	r3, [r7, #9]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	727b      	strb	r3, [r7, #9]
        }

        /* Map TxBuffer to ISO Frame buffer for next loop */
        pTxBuffer = bIsoFrame;
 8017d8c:	f107 0314 	add.w	r3, r7, #20
 8017d90:	607b      	str	r3, [r7, #4]
    }
    /* Loop as long as we generate transmissions */
    while (0U != wTxLength);
 8017d92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	f47f acbb 	bne.w	8017712 <phpalI14443p4_Sw_IsoHandling+0x5e>
 8017d9c:	e006      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
                break;
 8017d9e:	bf00      	nop
 8017da0:	e004      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
                        break;
 8017da2:	bf00      	nop
 8017da4:	e002      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
                        break;
 8017da6:	bf00      	nop
 8017da8:	e000      	b.n	8017dac <phpalI14443p4_Sw_IsoHandling+0x6f8>
                break;
 8017daa:	bf00      	nop

    /* Reset RxBuffer Start Position */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	685b      	ldr	r3, [r3, #4]
 8017db0:	2200      	movs	r2, #0
 8017db2:	2130      	movs	r1, #48	@ 0x30
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7f7 fd9b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	833b      	strh	r3, [r7, #24]
 8017dbe:	8b3b      	ldrh	r3, [r7, #24]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d001      	beq.n	8017dc8 <phpalI14443p4_Sw_IsoHandling+0x714>
 8017dc4:	8b3b      	ldrh	r3, [r7, #24]
 8017dc6:	e000      	b.n	8017dca <phpalI14443p4_Sw_IsoHandling+0x716>

    return status;
 8017dc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	373c      	adds	r7, #60	@ 0x3c
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd90      	pop	{r4, r7, pc}
 8017dd2:	bf00      	nop

08017dd4 <phpalI14443p4_Sw_IsValidIBlock>:
    uint8_t bCheckNad,
    uint8_t bNad,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8017dd4:	b490      	push	{r4, r7}
 8017dd6:	b084      	sub	sp, #16
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	4604      	mov	r4, r0
 8017ddc:	4608      	mov	r0, r1
 8017dde:	4611      	mov	r1, r2
 8017de0:	461a      	mov	r2, r3
 8017de2:	4623      	mov	r3, r4
 8017de4:	71fb      	strb	r3, [r7, #7]
 8017de6:	4603      	mov	r3, r0
 8017de8:	71bb      	strb	r3, [r7, #6]
 8017dea:	460b      	mov	r3, r1
 8017dec:	717b      	strb	r3, [r7, #5]
 8017dee:	4613      	mov	r3, r2
 8017df0:	713b      	strb	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8017df2:	2300      	movs	r3, #0
 8017df4:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_I_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_I_BLOCK_RFU_BITS)
 8017df6:	69bb      	ldr	r3, [r7, #24]
 8017df8:	781b      	ldrb	r3, [r3, #0]
 8017dfa:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8017dfe:	2b02      	cmp	r3, #2
 8017e00:	d002      	beq.n	8017e08 <phpalI14443p4_Sw_IsValidIBlock+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017e02:	f240 6306 	movw	r3, #1542	@ 0x606
 8017e06:	e04f      	b.n	8017ea8 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8017e08:	2301      	movs	r3, #1
 8017e0a:	81fb      	strh	r3, [r7, #14]

    /* Enable CID checking if neccessary */
    if (0U != (bCheckCid))
 8017e0c:	79fb      	ldrb	r3, [r7, #7]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d002      	beq.n	8017e18 <phpalI14443p4_Sw_IsValidIBlock+0x44>
    {
        wExpRxLength++;
 8017e12:	89fb      	ldrh	r3, [r7, #14]
 8017e14:	3301      	adds	r3, #1
 8017e16:	81fb      	strh	r3, [r7, #14]
    }

    /* Enable NAD checking if neccessary */
    if (0U != (bCheckNad))
 8017e18:	797b      	ldrb	r3, [r7, #5]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d002      	beq.n	8017e24 <phpalI14443p4_Sw_IsValidIBlock+0x50>
    {
        wExpRxLength++;
 8017e1e:	89fb      	ldrh	r3, [r7, #14]
 8017e20:	3301      	adds	r3, #1
 8017e22:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the minimum frame length */
    if (wRxLength < wExpRxLength)
 8017e24:	8bba      	ldrh	r2, [r7, #28]
 8017e26:	89fb      	ldrh	r3, [r7, #14]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d202      	bcs.n	8017e32 <phpalI14443p4_Sw_IsValidIBlock+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017e2c:	f240 6306 	movw	r3, #1542	@ 0x606
 8017e30:	e03a      	b.n	8017ea8 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* CID presence check */
    if ((0u != bCheckCid) &&
 8017e32:	79fb      	ldrb	r3, [r7, #7]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d00d      	beq.n	8017e54 <phpalI14443p4_Sw_IsValidIBlock+0x80>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING) > 0U) &&
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	f003 0308 	and.w	r3, r3, #8
    if ((0u != bCheckCid) &&
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d007      	beq.n	8017e54 <phpalI14443p4_Sw_IsValidIBlock+0x80>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid)
 8017e44:	69bb      	ldr	r3, [r7, #24]
 8017e46:	3301      	adds	r3, #1
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	f003 020f 	and.w	r2, r3, #15
 8017e4e:	79bb      	ldrb	r3, [r7, #6]
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING) > 0U) &&
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d00b      	beq.n	8017e6c <phpalI14443p4_Sw_IsValidIBlock+0x98>
        )
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8017e54:	79fb      	ldrb	r3, [r7, #7]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d105      	bne.n	8017e66 <phpalI14443p4_Sw_IsValidIBlock+0x92>
 8017e5a:	69bb      	ldr	r3, [r7, #24]
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	f003 0308 	and.w	r3, r3, #8
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d002      	beq.n	8017e6c <phpalI14443p4_Sw_IsValidIBlock+0x98>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017e66:	f240 6306 	movw	r3, #1542	@ 0x606
 8017e6a:	e01d      	b.n	8017ea8 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* NAD presence check */
    if ((0u != bCheckNad) &&
 8017e6c:	797b      	ldrb	r3, [r7, #5]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d00d      	beq.n	8017e8e <phpalI14443p4_Sw_IsValidIBlock+0xba>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING)) &&
 8017e72:	69bb      	ldr	r3, [r7, #24]
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	f003 0304 	and.w	r3, r3, #4
    if ((0u != bCheckNad) &&
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d007      	beq.n	8017e8e <phpalI14443p4_Sw_IsValidIBlock+0xba>
        (pRxBuffer[wExpRxLength-1u] == bNad)
 8017e7e:	89fb      	ldrh	r3, [r7, #14]
 8017e80:	3b01      	subs	r3, #1
 8017e82:	69ba      	ldr	r2, [r7, #24]
 8017e84:	4413      	add	r3, r2
 8017e86:	781b      	ldrb	r3, [r3, #0]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING)) &&
 8017e88:	793a      	ldrb	r2, [r7, #4]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d00b      	beq.n	8017ea6 <phpalI14443p4_Sw_IsValidIBlock+0xd2>
        )
    {
        /* CHECK SUCCEEDED */
    }
    /* NAD absence check */
    else if ((bCheckNad == 0U) && ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING) == 0U))
 8017e8e:	797b      	ldrb	r3, [r7, #5]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d105      	bne.n	8017ea0 <phpalI14443p4_Sw_IsValidIBlock+0xcc>
 8017e94:	69bb      	ldr	r3, [r7, #24]
 8017e96:	781b      	ldrb	r3, [r3, #0]
 8017e98:	f003 0304 	and.w	r3, r3, #4
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d002      	beq.n	8017ea6 <phpalI14443p4_Sw_IsValidIBlock+0xd2>
        /* CHECK SUCCEEDED */
    }
    /* NAD protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017ea0:	f240 6306 	movw	r3, #1542	@ 0x606
 8017ea4:	e000      	b.n	8017ea8 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    return PH_ERR_SUCCESS;
 8017ea6:	2300      	movs	r3, #0
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3710      	adds	r7, #16
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bc90      	pop	{r4, r7}
 8017eb0:	4770      	bx	lr

08017eb2 <phpalI14443p4_Sw_IsValidRBlock>:
    uint8_t bCheckCid,
    uint8_t bCid,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8017eb2:	b480      	push	{r7}
 8017eb4:	b085      	sub	sp, #20
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	603a      	str	r2, [r7, #0]
 8017eba:	461a      	mov	r2, r3
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	71fb      	strb	r3, [r7, #7]
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	71bb      	strb	r3, [r7, #6]
 8017ec4:	4613      	mov	r3, r2
 8017ec6:	80bb      	strh	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_R_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_R_BLOCK_RFU_BITS)
 8017ecc:	683b      	ldr	r3, [r7, #0]
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	f003 0326 	and.w	r3, r3, #38	@ 0x26
 8017ed4:	2b22      	cmp	r3, #34	@ 0x22
 8017ed6:	d002      	beq.n	8017ede <phpalI14443p4_Sw_IsValidRBlock+0x2c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017ed8:	f240 6306 	movw	r3, #1542	@ 0x606
 8017edc:	e02c      	b.n	8017f38 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8017ede:	2301      	movs	r3, #1
 8017ee0:	81fb      	strh	r3, [r7, #14]

    /* If CID is enabled, we always expect it */
    if (0U != (bCheckCid))
 8017ee2:	79fb      	ldrb	r3, [r7, #7]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d002      	beq.n	8017eee <phpalI14443p4_Sw_IsValidRBlock+0x3c>
    {
        wExpRxLength++;
 8017ee8:	89fb      	ldrh	r3, [r7, #14]
 8017eea:	3301      	adds	r3, #1
 8017eec:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the exact frame length */
    if (wRxLength != wExpRxLength)
 8017eee:	88ba      	ldrh	r2, [r7, #4]
 8017ef0:	89fb      	ldrh	r3, [r7, #14]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d002      	beq.n	8017efc <phpalI14443p4_Sw_IsValidRBlock+0x4a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017ef6:	f240 6306 	movw	r3, #1542	@ 0x606
 8017efa:	e01d      	b.n	8017f38 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    /* CID presence check */
    if ((0U != bCheckCid) &&
 8017efc:	79fb      	ldrb	r3, [r7, #7]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d00d      	beq.n	8017f1e <phpalI14443p4_Sw_IsValidRBlock+0x6c>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	781b      	ldrb	r3, [r3, #0]
 8017f06:	f003 0308 	and.w	r3, r3, #8
    if ((0U != bCheckCid) &&
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d007      	beq.n	8017f1e <phpalI14443p4_Sw_IsValidRBlock+0x6c>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid))
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	3301      	adds	r3, #1
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	f003 020f 	and.w	r2, r3, #15
 8017f18:	79bb      	ldrb	r3, [r7, #6]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d00b      	beq.n	8017f36 <phpalI14443p4_Sw_IsValidRBlock+0x84>
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8017f1e:	79fb      	ldrb	r3, [r7, #7]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d105      	bne.n	8017f30 <phpalI14443p4_Sw_IsValidRBlock+0x7e>
 8017f24:	683b      	ldr	r3, [r7, #0]
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	f003 0308 	and.w	r3, r3, #8
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d002      	beq.n	8017f36 <phpalI14443p4_Sw_IsValidRBlock+0x84>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017f30:	f240 6306 	movw	r3, #1542	@ 0x606
 8017f34:	e000      	b.n	8017f38 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    return PH_ERR_SUCCESS;
 8017f36:	2300      	movs	r3, #0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3714      	adds	r7, #20
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr

08017f44 <phpalI14443p4_Sw_IsValidSBlock>:
    uint8_t bCheckCid,
    uint8_t bCid,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8017f44:	b480      	push	{r7}
 8017f46:	b085      	sub	sp, #20
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	603a      	str	r2, [r7, #0]
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	4603      	mov	r3, r0
 8017f50:	71fb      	strb	r3, [r7, #7]
 8017f52:	460b      	mov	r3, r1
 8017f54:	71bb      	strb	r3, [r7, #6]
 8017f56:	4613      	mov	r3, r2
 8017f58:	80bb      	strh	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits, return with Protocol error if received PCB byte is not related to "Waiting time extension" */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_S_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_S_BLOCK_RFU_BITS)
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	f003 0307 	and.w	r3, r3, #7
 8017f66:	2b02      	cmp	r3, #2
 8017f68:	d002      	beq.n	8017f70 <phpalI14443p4_Sw_IsValidSBlock+0x2c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017f6a:	f240 6306 	movw	r3, #1542	@ 0x606
 8017f6e:	e035      	b.n	8017fdc <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8017f70:	2301      	movs	r3, #1
 8017f72:	81fb      	strh	r3, [r7, #14]

    /* If CID is enabled, we always expect it */
    if (0U != (bCheckCid))
 8017f74:	79fb      	ldrb	r3, [r7, #7]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d002      	beq.n	8017f80 <phpalI14443p4_Sw_IsValidSBlock+0x3c>
    {
        wExpRxLength++;
 8017f7a:	89fb      	ldrh	r3, [r7, #14]
 8017f7c:	3301      	adds	r3, #1
 8017f7e:	81fb      	strh	r3, [r7, #14]
    }

    /* If this is a WTX request, we expect an additional INF byte */
    if (0u != (PHPAL_I14443P4_SW_IS_WTX(pRxBuffer[PHPAL_I14443P4_SW_PCB_POS])))
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8017f88:	2b30      	cmp	r3, #48	@ 0x30
 8017f8a:	d102      	bne.n	8017f92 <phpalI14443p4_Sw_IsValidSBlock+0x4e>
    {
        wExpRxLength++;
 8017f8c:	89fb      	ldrh	r3, [r7, #14]
 8017f8e:	3301      	adds	r3, #1
 8017f90:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the exact frame length */
    if (wRxLength != wExpRxLength)
 8017f92:	88ba      	ldrh	r2, [r7, #4]
 8017f94:	89fb      	ldrh	r3, [r7, #14]
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d002      	beq.n	8017fa0 <phpalI14443p4_Sw_IsValidSBlock+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017f9a:	f240 6306 	movw	r3, #1542	@ 0x606
 8017f9e:	e01d      	b.n	8017fdc <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    /* CID presence check */
    if ((0u != bCheckCid) &&
 8017fa0:	79fb      	ldrb	r3, [r7, #7]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d00d      	beq.n	8017fc2 <phpalI14443p4_Sw_IsValidSBlock+0x7e>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	781b      	ldrb	r3, [r3, #0]
 8017faa:	f003 0308 	and.w	r3, r3, #8
    if ((0u != bCheckCid) &&
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d007      	beq.n	8017fc2 <phpalI14443p4_Sw_IsValidSBlock+0x7e>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid))
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	f003 020f 	and.w	r2, r3, #15
 8017fbc:	79bb      	ldrb	r3, [r7, #6]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d00b      	beq.n	8017fda <phpalI14443p4_Sw_IsValidSBlock+0x96>
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8017fc2:	79fb      	ldrb	r3, [r7, #7]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d105      	bne.n	8017fd4 <phpalI14443p4_Sw_IsValidSBlock+0x90>
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	781b      	ldrb	r3, [r3, #0]
 8017fcc:	f003 0308 	and.w	r3, r3, #8
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d002      	beq.n	8017fda <phpalI14443p4_Sw_IsValidSBlock+0x96>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017fd4:	f240 6306 	movw	r3, #1542	@ 0x606
 8017fd8:	e000      	b.n	8017fdc <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    return PH_ERR_SUCCESS;
 8017fda:	2300      	movs	r3, #0
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3714      	adds	r7, #20
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe6:	4770      	bx	lr

08017fe8 <phpalI14443p4_Sw_BuildIBlock>:
                                        uint8_t bPcbBlockNum,
                                        uint8_t bChaining,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 8017fe8:	b490      	push	{r4, r7}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	4604      	mov	r4, r0
 8017ff0:	4608      	mov	r0, r1
 8017ff2:	4611      	mov	r1, r2
 8017ff4:	461a      	mov	r2, r3
 8017ff6:	4623      	mov	r3, r4
 8017ff8:	71fb      	strb	r3, [r7, #7]
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	71bb      	strb	r3, [r7, #6]
 8017ffe:	460b      	mov	r3, r1
 8018000:	717b      	strb	r3, [r7, #5]
 8018002:	4613      	mov	r3, r2
 8018004:	713b      	strb	r3, [r7, #4]
    /* I-Block PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] = PHPAL_I14443P4_SW_I_BLOCK | PHPAL_I14443P4_SW_I_BLOCK_RFU_BITS | bPcbBlockNum;
 8018006:	7c3b      	ldrb	r3, [r7, #16]
 8018008:	f043 0302 	orr.w	r3, r3, #2
 801800c:	b2da      	uxtb	r2, r3
 801800e:	69bb      	ldr	r3, [r7, #24]
 8018010:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	2201      	movs	r2, #1
 8018016:	801a      	strh	r2, [r3, #0]

    /* Check if chaining is neccessary */
    if (0U != (bChaining))
 8018018:	7d3b      	ldrb	r3, [r7, #20]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d006      	beq.n	801802c <phpalI14443p4_Sw_BuildIBlock+0x44>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CHAINING;
 801801e:	69bb      	ldr	r3, [r7, #24]
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	f043 0310 	orr.w	r3, r3, #16
 8018026:	b2da      	uxtb	r2, r3
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	701a      	strb	r2, [r3, #0]
    }

    /* Append CID if neccessary */
    if (0U != (bCidEnabled))
 801802c:	79fb      	ldrb	r3, [r7, #7]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d011      	beq.n	8018056 <phpalI14443p4_Sw_BuildIBlock+0x6e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8018032:	69bb      	ldr	r3, [r7, #24]
 8018034:	781b      	ldrb	r3, [r3, #0]
 8018036:	f043 0308 	orr.w	r3, r3, #8
 801803a:	b2da      	uxtb	r2, r3
 801803c:	69bb      	ldr	r3, [r7, #24]
 801803e:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	881b      	ldrh	r3, [r3, #0]
 8018044:	1c5a      	adds	r2, r3, #1
 8018046:	b291      	uxth	r1, r2
 8018048:	69fa      	ldr	r2, [r7, #28]
 801804a:	8011      	strh	r1, [r2, #0]
 801804c:	461a      	mov	r2, r3
 801804e:	69bb      	ldr	r3, [r7, #24]
 8018050:	4413      	add	r3, r2
 8018052:	79ba      	ldrb	r2, [r7, #6]
 8018054:	701a      	strb	r2, [r3, #0]
    }

    /* Append NAD if neccessary */
    if (0U != (bNadEnabled))
 8018056:	797b      	ldrb	r3, [r7, #5]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d011      	beq.n	8018080 <phpalI14443p4_Sw_BuildIBlock+0x98>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING;
 801805c:	69bb      	ldr	r3, [r7, #24]
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	f043 0304 	orr.w	r3, r3, #4
 8018064:	b2da      	uxtb	r2, r3
 8018066:	69bb      	ldr	r3, [r7, #24]
 8018068:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bNad;
 801806a:	69fb      	ldr	r3, [r7, #28]
 801806c:	881b      	ldrh	r3, [r3, #0]
 801806e:	1c5a      	adds	r2, r3, #1
 8018070:	b291      	uxth	r1, r2
 8018072:	69fa      	ldr	r2, [r7, #28]
 8018074:	8011      	strh	r1, [r2, #0]
 8018076:	461a      	mov	r2, r3
 8018078:	69bb      	ldr	r3, [r7, #24]
 801807a:	4413      	add	r3, r2
 801807c:	793a      	ldrb	r2, [r7, #4]
 801807e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8018080:	2300      	movs	r3, #0
}
 8018082:	4618      	mov	r0, r3
 8018084:	3708      	adds	r7, #8
 8018086:	46bd      	mov	sp, r7
 8018088:	bc90      	pop	{r4, r7}
 801808a:	4770      	bx	lr

0801808c <phpalI14443p4_Sw_BuildRBlock>:
                                        uint8_t bPcbBlockNum,
                                        uint8_t bIsAck,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 801808c:	b490      	push	{r4, r7}
 801808e:	b082      	sub	sp, #8
 8018090:	af00      	add	r7, sp, #0
 8018092:	4604      	mov	r4, r0
 8018094:	4608      	mov	r0, r1
 8018096:	4611      	mov	r1, r2
 8018098:	461a      	mov	r2, r3
 801809a:	4623      	mov	r3, r4
 801809c:	71fb      	strb	r3, [r7, #7]
 801809e:	4603      	mov	r3, r0
 80180a0:	71bb      	strb	r3, [r7, #6]
 80180a2:	460b      	mov	r3, r1
 80180a4:	717b      	strb	r3, [r7, #5]
 80180a6:	4613      	mov	r3, r2
 80180a8:	713b      	strb	r3, [r7, #4]
    /* R(ACK) PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS]  = PHPAL_I14443P4_SW_R_BLOCK | PHPAL_I14443P4_SW_R_BLOCK_RFU_BITS | bPcbBlockNum;
 80180aa:	797b      	ldrb	r3, [r7, #5]
 80180ac:	f063 035d 	orn	r3, r3, #93	@ 0x5d
 80180b0:	b2da      	uxtb	r2, r3
 80180b2:	693b      	ldr	r3, [r7, #16]
 80180b4:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	2201      	movs	r2, #1
 80180ba:	801a      	strh	r2, [r3, #0]

    /* Switch to R(NAK) if neccessary */
    if (0U == (bIsAck))
 80180bc:	793b      	ldrb	r3, [r7, #4]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d106      	bne.n	80180d0 <phpalI14443p4_Sw_BuildRBlock+0x44>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_NAK;
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	f043 0310 	orr.w	r3, r3, #16
 80180ca:	b2da      	uxtb	r2, r3
 80180cc:	693b      	ldr	r3, [r7, #16]
 80180ce:	701a      	strb	r2, [r3, #0]
    }

    /* Append CID if supported */
    if (bCidEnabled != 0U)
 80180d0:	79fb      	ldrb	r3, [r7, #7]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d011      	beq.n	80180fa <phpalI14443p4_Sw_BuildRBlock+0x6e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	f043 0308 	orr.w	r3, r3, #8
 80180de:	b2da      	uxtb	r2, r3
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	881b      	ldrh	r3, [r3, #0]
 80180e8:	1c5a      	adds	r2, r3, #1
 80180ea:	b291      	uxth	r1, r2
 80180ec:	697a      	ldr	r2, [r7, #20]
 80180ee:	8011      	strh	r1, [r2, #0]
 80180f0:	461a      	mov	r2, r3
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	4413      	add	r3, r2
 80180f6:	79ba      	ldrb	r2, [r7, #6]
 80180f8:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 80180fa:	2300      	movs	r3, #0
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	3708      	adds	r7, #8
 8018100:	46bd      	mov	sp, r7
 8018102:	bc90      	pop	{r4, r7}
 8018104:	4770      	bx	lr

08018106 <phpalI14443p4_Sw_BuildSBlock>:
                                        uint8_t bIsWtx,
                                        uint8_t bWtxm,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 8018106:	b490      	push	{r4, r7}
 8018108:	b082      	sub	sp, #8
 801810a:	af00      	add	r7, sp, #0
 801810c:	4604      	mov	r4, r0
 801810e:	4608      	mov	r0, r1
 8018110:	4611      	mov	r1, r2
 8018112:	461a      	mov	r2, r3
 8018114:	4623      	mov	r3, r4
 8018116:	71fb      	strb	r3, [r7, #7]
 8018118:	4603      	mov	r3, r0
 801811a:	71bb      	strb	r3, [r7, #6]
 801811c:	460b      	mov	r3, r1
 801811e:	717b      	strb	r3, [r7, #5]
 8018120:	4613      	mov	r3, r2
 8018122:	713b      	strb	r3, [r7, #4]
    /* S-Block PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS]  = PHPAL_I14443P4_SW_S_BLOCK | PHPAL_I14443P4_SW_S_BLOCK_RFU_BITS;
 8018124:	693b      	ldr	r3, [r7, #16]
 8018126:	22c2      	movs	r2, #194	@ 0xc2
 8018128:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	2201      	movs	r2, #1
 801812e:	801a      	strh	r2, [r3, #0]

    /* Append CID if supported */
    if (bCidEnabled != 0U)
 8018130:	79fb      	ldrb	r3, [r7, #7]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d011      	beq.n	801815a <phpalI14443p4_Sw_BuildSBlock+0x54>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8018136:	693b      	ldr	r3, [r7, #16]
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	f043 0308 	orr.w	r3, r3, #8
 801813e:	b2da      	uxtb	r2, r3
 8018140:	693b      	ldr	r3, [r7, #16]
 8018142:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	881b      	ldrh	r3, [r3, #0]
 8018148:	1c5a      	adds	r2, r3, #1
 801814a:	b291      	uxth	r1, r2
 801814c:	697a      	ldr	r2, [r7, #20]
 801814e:	8011      	strh	r1, [r2, #0]
 8018150:	461a      	mov	r2, r3
 8018152:	693b      	ldr	r3, [r7, #16]
 8018154:	4413      	add	r3, r2
 8018156:	79ba      	ldrb	r2, [r7, #6]
 8018158:	701a      	strb	r2, [r3, #0]
    }

    /* By default, PCB byte(bit 5 and 6) is configured to DESELECT command.
     * Configure PCB byte to WTX(instead of DESELECT) and append WTXM based on bIsWtx input value.
     */
    if (0U != (bIsWtx))
 801815a:	797b      	ldrb	r3, [r7, #5]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d011      	beq.n	8018184 <phpalI14443p4_Sw_BuildSBlock+0x7e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_WTX;
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	781b      	ldrb	r3, [r3, #0]
 8018164:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8018168:	b2da      	uxtb	r2, r3
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bWtxm;
 801816e:	697b      	ldr	r3, [r7, #20]
 8018170:	881b      	ldrh	r3, [r3, #0]
 8018172:	1c5a      	adds	r2, r3, #1
 8018174:	b291      	uxth	r1, r2
 8018176:	697a      	ldr	r2, [r7, #20]
 8018178:	8011      	strh	r1, [r2, #0]
 801817a:	461a      	mov	r2, r3
 801817c:	693b      	ldr	r3, [r7, #16]
 801817e:	4413      	add	r3, r2
 8018180:	793a      	ldrb	r2, [r7, #4]
 8018182:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8018184:	2300      	movs	r3, #0
}
 8018186:	4618      	mov	r0, r3
 8018188:	3708      	adds	r7, #8
 801818a:	46bd      	mov	sp, r7
 801818c:	bc90      	pop	{r4, r7}
 801818e:	4770      	bx	lr

08018190 <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8018190:	b480      	push	{r7}
 8018192:	b083      	sub	sp, #12
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
 8018198:	460b      	mov	r3, r1
 801819a:	807b      	strh	r3, [r7, #2]
 801819c:	4613      	mov	r3, r2
 801819e:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 80181a0:	887b      	ldrh	r3, [r7, #2]
 80181a2:	2b06      	cmp	r3, #6
 80181a4:	d876      	bhi.n	8018294 <phpalI14443p4_Sw_SetConfig+0x104>
 80181a6:	a201      	add	r2, pc, #4	@ (adr r2, 80181ac <phpalI14443p4_Sw_SetConfig+0x1c>)
 80181a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181ac:	080181d3 	.word	0x080181d3
 80181b0:	080181e9 	.word	0x080181e9
 80181b4:	0801821f 	.word	0x0801821f
 80181b8:	08018247 	.word	0x08018247
 80181bc:	0801825d 	.word	0x0801825d
 80181c0:	0801828b 	.word	0x0801828b
 80181c4:	080181c9 	.word	0x080181c9
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 80181c8:	883b      	ldrh	r3, [r7, #0]
 80181ca:	b2da      	uxtb	r2, r3
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	749a      	strb	r2, [r3, #18]
            break;
 80181d0:	e063      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 80181d2:	883b      	ldrh	r3, [r7, #0]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d103      	bne.n	80181e0 <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	2200      	movs	r2, #0
 80181dc:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 80181de:	e05c      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2201      	movs	r2, #1
 80181e4:	741a      	strb	r2, [r3, #16]
            break;
 80181e6:	e058      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 80181e8:	883b      	ldrh	r3, [r7, #0]
 80181ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d00e      	beq.n	8018210 <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 80181f2:	883b      	ldrh	r3, [r7, #0]
 80181f4:	b2db      	uxtb	r3, r3
 80181f6:	2b0e      	cmp	r3, #14
 80181f8:	d902      	bls.n	8018200 <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80181fa:	f240 6321 	movw	r3, #1569	@ 0x621
 80181fe:	e04d      	b.n	801829c <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2201      	movs	r2, #1
 8018204:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 8018206:	883b      	ldrh	r3, [r7, #0]
 8018208:	b2da      	uxtb	r2, r3
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 801820e:	e044      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2200      	movs	r2, #0
 8018214:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2200      	movs	r2, #0
 801821a:	729a      	strb	r2, [r3, #10]
            break;
 801821c:	e03d      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 801821e:	883b      	ldrh	r3, [r7, #0]
 8018220:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018224:	2b00      	cmp	r3, #0
 8018226:	d007      	beq.n	8018238 <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2201      	movs	r2, #1
 801822c:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 801822e:	883b      	ldrh	r3, [r7, #0]
 8018230:	b2da      	uxtb	r2, r3
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 8018236:	e030      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2200      	movs	r2, #0
 801823c:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	2200      	movs	r2, #0
 8018242:	731a      	strb	r2, [r3, #12]
            break;
 8018244:	e029      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 8018246:	883b      	ldrh	r3, [r7, #0]
 8018248:	2b0e      	cmp	r3, #14
 801824a:	d902      	bls.n	8018252 <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 801824c:	f240 6321 	movw	r3, #1569	@ 0x621
 8018250:	e024      	b.n	801829c <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 8018252:	883b      	ldrh	r3, [r7, #0]
 8018254:	b2da      	uxtb	r2, r3
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	735a      	strb	r2, [r3, #13]
            break;
 801825a:	e01e      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 801825c:	883b      	ldrh	r3, [r7, #0]
 801825e:	0a1b      	lsrs	r3, r3, #8
 8018260:	b29b      	uxth	r3, r3
 8018262:	2b0c      	cmp	r3, #12
 8018264:	d803      	bhi.n	801826e <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 8018266:	883b      	ldrh	r3, [r7, #0]
 8018268:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 801826a:	2b0c      	cmp	r3, #12
 801826c:	d902      	bls.n	8018274 <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 801826e:	f240 6321 	movw	r3, #1569	@ 0x621
 8018272:	e013      	b.n	801829c <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 8018274:	883b      	ldrh	r3, [r7, #0]
 8018276:	0a1b      	lsrs	r3, r3, #8
 8018278:	b29b      	uxth	r3, r3
 801827a:	b2da      	uxtb	r2, r3
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 8018280:	883b      	ldrh	r3, [r7, #0]
 8018282:	b2da      	uxtb	r2, r3
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	73da      	strb	r2, [r3, #15]
            break;
 8018288:	e007      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 801828a:	883b      	ldrh	r3, [r7, #0]
 801828c:	b2da      	uxtb	r2, r3
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	745a      	strb	r2, [r3, #17]
            break;
 8018292:	e002      	b.n	801829a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8018294:	f240 6323 	movw	r3, #1571	@ 0x623
 8018298:	e000      	b.n	801829c <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 801829a:	2300      	movs	r3, #0
}
 801829c:	4618      	mov	r0, r3
 801829e:	370c      	adds	r7, #12
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr

080182a8 <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 80182a8:	b480      	push	{r7}
 80182aa:	b085      	sub	sp, #20
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	460b      	mov	r3, r1
 80182b2:	607a      	str	r2, [r7, #4]
 80182b4:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 80182b6:	897b      	ldrh	r3, [r7, #10]
 80182b8:	2b14      	cmp	r3, #20
 80182ba:	d002      	beq.n	80182c2 <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 80182bc:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 80182c0:	e032      	b.n	8018328 <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d101      	bne.n	80182cc <phpalI14443p4a_Sw_Init+0x24>
 80182c8:	2321      	movs	r3, #33	@ 0x21
 80182ca:	e02d      	b.n	8018328 <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d101      	bne.n	80182d6 <phpalI14443p4a_Sw_Init+0x2e>
 80182d2:	2321      	movs	r3, #33	@ 0x21
 80182d4:	e028      	b.n	8018328 <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	f240 5201 	movw	r2, #1281	@ 0x501
 80182dc:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	687a      	ldr	r2, [r7, #4]
 80182e2:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	2200      	movs	r2, #0
 80182e8:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	2200      	movs	r2, #0
 80182ee:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	2200      	movs	r2, #0
 80182f4:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	2200      	movs	r2, #0
 80182fa:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	2204      	movs	r2, #4
 8018300:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	2202      	movs	r2, #2
 8018306:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	2200      	movs	r2, #0
 801830c:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	2200      	movs	r2, #0
 8018312:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	2200      	movs	r2, #0
 8018318:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	2202      	movs	r2, #2
 801831e:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	2201      	movs	r2, #1
 8018324:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 8018326:	2300      	movs	r3, #0
}
 8018328:	4618      	mov	r0, r3
 801832a:	3714      	adds	r7, #20
 801832c:	46bd      	mov	sp, r7
 801832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018332:	4770      	bx	lr

08018334 <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8018334:	b480      	push	{r7}
 8018336:	b083      	sub	sp, #12
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	460b      	mov	r3, r1
 801833e:	807b      	strh	r3, [r7, #2]
 8018340:	4613      	mov	r3, r2
 8018342:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 8018344:	887b      	ldrh	r3, [r7, #2]
 8018346:	2b01      	cmp	r3, #1
 8018348:	d002      	beq.n	8018350 <phpalI14443p4a_Sw_SetConfig+0x1c>
 801834a:	2b02      	cmp	r3, #2
 801834c:	d005      	beq.n	801835a <phpalI14443p4a_Sw_SetConfig+0x26>
 801834e:	e014      	b.n	801837a <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 8018350:	883b      	ldrh	r3, [r7, #0]
 8018352:	b2da      	uxtb	r2, r3
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	745a      	strb	r2, [r3, #17]
      break;
 8018358:	e012      	b.n	8018380 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 801835a:	883b      	ldrh	r3, [r7, #0]
 801835c:	b2db      	uxtb	r3, r3
 801835e:	2b00      	cmp	r3, #0
 8018360:	d006      	beq.n	8018370 <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 8018362:	883b      	ldrh	r3, [r7, #0]
 8018364:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8018366:	2b01      	cmp	r3, #1
 8018368:	d002      	beq.n	8018370 <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801836a:	f240 5321 	movw	r3, #1313	@ 0x521
 801836e:	e008      	b.n	8018382 <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 8018370:	883b      	ldrh	r3, [r7, #0]
 8018372:	b2da      	uxtb	r2, r3
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	749a      	strb	r2, [r3, #18]
      break;
 8018378:	e002      	b.n	8018380 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801837a:	f240 5323 	movw	r3, #1315	@ 0x523
 801837e:	e000      	b.n	8018382 <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 8018380:	2300      	movs	r3, #0
}
 8018382:	4618      	mov	r0, r3
 8018384:	370c      	adds	r7, #12
 8018386:	46bd      	mov	sp, r7
 8018388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838c:	4770      	bx	lr
	...

08018390 <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 8018390:	b480      	push	{r7}
 8018392:	b085      	sub	sp, #20
 8018394:	af00      	add	r7, sp, #0
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	460b      	mov	r3, r1
 801839a:	607a      	str	r2, [r7, #4]
 801839c:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 801839e:	897b      	ldrh	r3, [r7, #10]
 80183a0:	3b01      	subs	r3, #1
 80183a2:	2b03      	cmp	r3, #3
 80183a4:	d822      	bhi.n	80183ec <phpalI14443p4a_Sw_GetConfig+0x5c>
 80183a6:	a201      	add	r2, pc, #4	@ (adr r2, 80183ac <phpalI14443p4a_Sw_GetConfig+0x1c>)
 80183a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183ac:	080183bd 	.word	0x080183bd
 80183b0:	080183c9 	.word	0x080183c9
 80183b4:	080183d5 	.word	0x080183d5
 80183b8:	080183e1 	.word	0x080183e1
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	7c5b      	ldrb	r3, [r3, #17]
 80183c0:	461a      	mov	r2, r3
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	801a      	strh	r2, [r3, #0]
        break;
 80183c6:	e014      	b.n	80183f2 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	7c9b      	ldrb	r3, [r3, #18]
 80183cc:	461a      	mov	r2, r3
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	801a      	strh	r2, [r3, #0]
        break;
 80183d2:	e00e      	b.n	80183f2 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	7bdb      	ldrb	r3, [r3, #15]
 80183d8:	461a      	mov	r2, r3
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	801a      	strh	r2, [r3, #0]
        break;
 80183de:	e008      	b.n	80183f2 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	7c1b      	ldrb	r3, [r3, #16]
 80183e4:	461a      	mov	r2, r3
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	801a      	strh	r2, [r3, #0]
        break;
 80183ea:	e002      	b.n	80183f2 <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80183ec:	f240 5323 	movw	r3, #1315	@ 0x523
 80183f0:	e000      	b.n	80183f4 <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 80183f2:	2300      	movs	r3, #0
}
 80183f4:	4618      	mov	r0, r3
 80183f6:	3714      	adds	r7, #20
 80183f8:	46bd      	mov	sp, r7
 80183fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fe:	4770      	bx	lr

08018400 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 8018400:	b5b0      	push	{r4, r5, r7, lr}
 8018402:	b08e      	sub	sp, #56	@ 0x38
 8018404:	af02      	add	r7, sp, #8
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	607b      	str	r3, [r7, #4]
 801840a:	460b      	mov	r3, r1
 801840c:	72fb      	strb	r3, [r7, #11]
 801840e:	4613      	mov	r3, r2
 8018410:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 8018412:	2300      	movs	r3, #0
 8018414:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8018416:	2300      	movs	r3, #0
 8018418:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801841a:	2300      	movs	r3, #0
 801841c:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	7c5b      	ldrb	r3, [r3, #17]
 8018422:	2b02      	cmp	r3, #2
 8018424:	d012      	beq.n	801844c <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 8018426:	7afb      	ldrb	r3, [r7, #11]
 8018428:	2b0c      	cmp	r3, #12
 801842a:	d802      	bhi.n	8018432 <phpalI14443p4a_Sw_Rats+0x32>
 801842c:	7abb      	ldrb	r3, [r7, #10]
 801842e:	2b0e      	cmp	r3, #14
 8018430:	d902      	bls.n	8018438 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018432:	f240 5321 	movw	r3, #1313	@ 0x521
 8018436:	e2c5      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8018438:	7afb      	ldrb	r3, [r7, #11]
 801843a:	2b07      	cmp	r3, #7
 801843c:	d80f      	bhi.n	801845e <phpalI14443p4a_Sw_Rats+0x5e>
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	7c5b      	ldrb	r3, [r3, #17]
 8018442:	2b01      	cmp	r3, #1
 8018444:	d10b      	bne.n	801845e <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018446:	f240 5321 	movw	r3, #1313	@ 0x521
 801844a:	e2bb      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 801844c:	7afb      	ldrb	r3, [r7, #11]
 801844e:	2b08      	cmp	r3, #8
 8018450:	d802      	bhi.n	8018458 <phpalI14443p4a_Sw_Rats+0x58>
 8018452:	7abb      	ldrb	r3, [r7, #10]
 8018454:	2b0e      	cmp	r3, #14
 8018456:	d902      	bls.n	801845e <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018458:	f240 5321 	movw	r3, #1313	@ 0x521
 801845c:	e2b2      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8018466:	210d      	movs	r1, #13
 8018468:	4618      	mov	r0, r3
 801846a:	f7f7 fa41 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801846e:	4603      	mov	r3, r0
 8018470:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018474:	2b00      	cmp	r3, #0
 8018476:	d001      	beq.n	801847c <phpalI14443p4a_Sw_Rats+0x7c>
 8018478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801847a:	e2a3      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 801847c:	23e0      	movs	r3, #224	@ 0xe0
 801847e:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8018480:	7afb      	ldrb	r3, [r7, #11]
 8018482:	011b      	lsls	r3, r3, #4
 8018484:	b2da      	uxtb	r2, r3
 8018486:	7abb      	ldrb	r3, [r7, #10]
 8018488:	f003 030f 	and.w	r3, r3, #15
 801848c:	b2db      	uxtb	r3, r3
 801848e:	4313      	orrs	r3, r2
 8018490:	b2db      	uxtb	r3, r3
 8018492:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	6858      	ldr	r0, [r3, #4]
 8018498:	f107 0218 	add.w	r2, r7, #24
 801849c:	f107 0312 	add.w	r3, r7, #18
 80184a0:	9301      	str	r3, [sp, #4]
 80184a2:	f107 0314 	add.w	r3, r7, #20
 80184a6:	9300      	str	r3, [sp, #0]
 80184a8:	2302      	movs	r3, #2
 80184aa:	2100      	movs	r1, #0
 80184ac:	f7f6 fe6a 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80184b0:	4603      	mov	r3, r0
 80184b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	7c9b      	ldrb	r3, [r3, #18]
 80184b8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 80184bc:	e031      	b.n	8018522 <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	7c5b      	ldrb	r3, [r3, #17]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d118      	bne.n	80184f8 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 80184c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	2b01      	cmp	r3, #1
 80184cc:	d003      	beq.n	80184d6 <phpalI14443p4a_Sw_Rats+0xd6>
 80184ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80184d0:	b2db      	uxtb	r3, r3
 80184d2:	2b11      	cmp	r3, #17
 80184d4:	d10e      	bne.n	80184f4 <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	685b      	ldr	r3, [r3, #4]
 80184da:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80184de:	2100      	movs	r1, #0
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7f7 f94b 	bl	800f77c <phhalHw_Pn5180_Wait>
 80184e6:	4603      	mov	r3, r0
 80184e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80184ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d003      	beq.n	80184f8 <phpalI14443p4a_Sw_Rats+0xf8>
 80184f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80184f2:	e267      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 80184f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80184f6:	e265      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	6858      	ldr	r0, [r3, #4]
 80184fc:	f107 0218 	add.w	r2, r7, #24
 8018500:	f107 0312 	add.w	r3, r7, #18
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	f107 0314 	add.w	r3, r7, #20
 801850a:	9300      	str	r3, [sp, #0]
 801850c:	2302      	movs	r3, #2
 801850e:	2100      	movs	r1, #0
 8018510:	f7f6 fe38 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8018514:	4603      	mov	r3, r0
 8018516:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 8018518:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801851c:	3b01      	subs	r3, #1
 801851e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8018522:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018526:	2b00      	cmp	r3, #0
 8018528:	d003      	beq.n	8018532 <phpalI14443p4a_Sw_Rats+0x132>
 801852a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801852c:	b2db      	uxtb	r3, r3
 801852e:	2b00      	cmp	r3, #0
 8018530:	d1c5      	bne.n	80184be <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8018532:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018534:	b2db      	uxtb	r3, r3
 8018536:	2b00      	cmp	r3, #0
 8018538:	f040 81c5 	bne.w	80188c6 <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 801853c:	8a7b      	ldrh	r3, [r7, #18]
 801853e:	b2da      	uxtb	r2, r3
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	429a      	cmp	r2, r3
 8018546:	d102      	bne.n	801854e <phpalI14443p4a_Sw_Rats+0x14e>
 8018548:	8a7b      	ldrh	r3, [r7, #18]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d102      	bne.n	8018554 <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 801854e:	f240 5306 	movw	r3, #1286	@ 0x506
 8018552:	e237      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	8a7a      	ldrh	r2, [r7, #18]
 8018558:	4619      	mov	r1, r3
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f009 fbdf 	bl	8021d1e <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	7c5b      	ldrb	r3, [r3, #17]
 8018564:	2b03      	cmp	r3, #3
 8018566:	d006      	beq.n	8018576 <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	2200      	movs	r2, #0
 801856c:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	2200      	movs	r2, #0
 8018572:	729a      	strb	r2, [r3, #10]
 8018574:	e005      	b.n	8018582 <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	2201      	movs	r2, #1
 801857a:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	7aba      	ldrb	r2, [r7, #10]
 8018580:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	2200      	movs	r2, #0
 8018586:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	2200      	movs	r2, #0
 801858c:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	2204      	movs	r2, #4
 8018592:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	7afa      	ldrb	r2, [r7, #11]
 8018598:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	2202      	movs	r2, #2
 801859e:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	2200      	movs	r2, #0
 80185a4:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	2200      	movs	r2, #0
 80185aa:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 80185ac:	2300      	movs	r3, #0
 80185ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 80185b2:	2301      	movs	r3, #1
 80185b4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 80185b8:	8a7b      	ldrh	r3, [r7, #18]
 80185ba:	2b01      	cmp	r3, #1
 80185bc:	f240 80ba 	bls.w	8018734 <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 80185c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80185c4:	687a      	ldr	r2, [r7, #4]
 80185c6:	4413      	add	r3, r2
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	f003 030f 	and.w	r3, r3, #15
 80185ce:	b2da      	uxtb	r2, r3
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	7c5b      	ldrb	r3, [r3, #17]
 80185d8:	2b02      	cmp	r3, #2
 80185da:	d007      	beq.n	80185ec <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	7b5b      	ldrb	r3, [r3, #13]
 80185e0:	2b0c      	cmp	r3, #12
 80185e2:	d90a      	bls.n	80185fa <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	220c      	movs	r2, #12
 80185e8:	735a      	strb	r2, [r3, #13]
 80185ea:	e006      	b.n	80185fa <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	7b5b      	ldrb	r3, [r3, #13]
 80185f0:	2b08      	cmp	r3, #8
 80185f2:	d902      	bls.n	80185fa <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2208      	movs	r2, #8
 80185f8:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 80185fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80185fe:	3301      	adds	r3, #1
 8018600:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	3301      	adds	r3, #1
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	f003 0310 	and.w	r3, r3, #16
 801860e:	2b00      	cmp	r3, #0
 8018610:	d021      	beq.n	8018656 <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8018612:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018616:	b29a      	uxth	r2, r3
 8018618:	8a7b      	ldrh	r3, [r7, #18]
 801861a:	429a      	cmp	r2, r3
 801861c:	d302      	bcc.n	8018624 <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 801861e:	f240 5306 	movw	r3, #1286	@ 0x506
 8018622:	e1cf      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 8018624:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	4413      	add	r3, r2
 801862c:	781b      	ldrb	r3, [r3, #0]
 801862e:	f003 0308 	and.w	r3, r3, #8
 8018632:	2b00      	cmp	r3, #0
 8018634:	d003      	beq.n	801863e <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	2200      	movs	r2, #0
 801863a:	72da      	strb	r2, [r3, #11]
 801863c:	e006      	b.n	801864c <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 801863e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018642:	687a      	ldr	r2, [r7, #4]
 8018644:	4413      	add	r3, r2
 8018646:	781a      	ldrb	r2, [r3, #0]
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 801864c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018650:	3301      	adds	r3, #1
 8018652:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	3301      	adds	r3, #1
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	f003 0320 	and.w	r3, r3, #32
 8018660:	2b00      	cmp	r3, #0
 8018662:	d02d      	beq.n	80186c0 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8018664:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018668:	b29a      	uxth	r2, r3
 801866a:	8a7b      	ldrh	r3, [r7, #18]
 801866c:	429a      	cmp	r2, r3
 801866e:	d302      	bcc.n	8018676 <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018670:	f240 5306 	movw	r3, #1286	@ 0x506
 8018674:	e1a6      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 8018676:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	4413      	add	r3, r2
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	f003 030f 	and.w	r3, r3, #15
 8018684:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8018688:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801868c:	2b0f      	cmp	r3, #15
 801868e:	d102      	bne.n	8018696 <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8018690:	2300      	movs	r3, #0
 8018692:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 8018696:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	4413      	add	r3, r2
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	091b      	lsrs	r3, r3, #4
 80186a2:	b2da      	uxtb	r2, r3
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	7b1b      	ldrb	r3, [r3, #12]
 80186ac:	2b0f      	cmp	r3, #15
 80186ae:	d102      	bne.n	80186b6 <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	2204      	movs	r2, #4
 80186b4:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 80186b6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80186ba:	3301      	adds	r3, #1
 80186bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	3301      	adds	r3, #1
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d032      	beq.n	8018734 <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 80186ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80186d2:	b29a      	uxth	r2, r3
 80186d4:	8a7b      	ldrh	r3, [r7, #18]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d302      	bcc.n	80186e0 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80186da:	f240 5306 	movw	r3, #1286	@ 0x506
 80186de:	e171      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	7c5b      	ldrb	r3, [r3, #17]
 80186e4:	2b01      	cmp	r3, #1
 80186e6:	d025      	beq.n	8018734 <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	7c5b      	ldrb	r3, [r3, #17]
 80186ec:	2b03      	cmp	r3, #3
 80186ee:	d10b      	bne.n	8018708 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 80186f0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80186f4:	687a      	ldr	r2, [r7, #4]
 80186f6:	4413      	add	r3, r2
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	f003 0301 	and.w	r3, r3, #1
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d002      	beq.n	8018708 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2201      	movs	r2, #1
 8018706:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 8018708:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801870c:	687a      	ldr	r2, [r7, #4]
 801870e:	4413      	add	r3, r2
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	f003 0302 	and.w	r3, r3, #2
 8018716:	2b00      	cmp	r3, #0
 8018718:	d106      	bne.n	8018728 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2200      	movs	r2, #0
 801871e:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	2200      	movs	r2, #0
 8018724:	729a      	strb	r2, [r3, #10]
 8018726:	e005      	b.n	8018734 <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	2201      	movs	r2, #1
 801872c:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	7aba      	ldrb	r2, [r7, #10]
 8018732:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 8018734:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018738:	2201      	movs	r2, #1
 801873a:	fa02 f303 	lsl.w	r3, r2, r3
 801873e:	4618      	mov	r0, r3
 8018740:	f7e7 fee0 	bl	8000504 <__aeabi_ui2d>
 8018744:	a3a7      	add	r3, pc, #668	@ (adr r3, 80189e4 <phpalI14443p4a_Sw_Rats+0x5e4>)
 8018746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801874a:	f7e7 ff55 	bl	80005f8 <__aeabi_dmul>
 801874e:	4602      	mov	r2, r0
 8018750:	460b      	mov	r3, r1
 8018752:	4610      	mov	r0, r2
 8018754:	4619      	mov	r1, r3
 8018756:	f7e8 fa27 	bl	8000ba8 <__aeabi_d2f>
 801875a:	4603      	mov	r3, r0
 801875c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	7c5b      	ldrb	r3, [r3, #17]
 8018762:	2b03      	cmp	r3, #3
 8018764:	d01f      	beq.n	80187a6 <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 8018766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018768:	f7e7 feee 	bl	8000548 <__aeabi_f2d>
 801876c:	4604      	mov	r4, r0
 801876e:	460d      	mov	r5, r1
 8018770:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018774:	2201      	movs	r2, #1
 8018776:	fa02 f303 	lsl.w	r3, r2, r3
 801877a:	4618      	mov	r0, r3
 801877c:	f7e7 fec2 	bl	8000504 <__aeabi_ui2d>
 8018780:	a39a      	add	r3, pc, #616	@ (adr r3, 80189ec <phpalI14443p4a_Sw_Rats+0x5ec>)
 8018782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018786:	f7e7 ff37 	bl	80005f8 <__aeabi_dmul>
 801878a:	4602      	mov	r2, r0
 801878c:	460b      	mov	r3, r1
 801878e:	4620      	mov	r0, r4
 8018790:	4629      	mov	r1, r5
 8018792:	f7e7 fd7b 	bl	800028c <__adddf3>
 8018796:	4602      	mov	r2, r0
 8018798:	460b      	mov	r3, r1
 801879a:	4610      	mov	r0, r2
 801879c:	4619      	mov	r1, r3
 801879e:	f7e8 fa03 	bl	8000ba8 <__aeabi_d2f>
 80187a2:	4603      	mov	r3, r0
 80187a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 80187a6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80187aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80187ae:	ee17 3a90 	vmov	r3, s15
 80187b2:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 80187b4:	6a3b      	ldr	r3, [r7, #32]
 80187b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80187ba:	d314      	bcc.n	80187e6 <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	6858      	ldr	r0, [r3, #4]
 80187c0:	6a3b      	ldr	r3, [r7, #32]
 80187c2:	4a83      	ldr	r2, [pc, #524]	@ (80189d0 <phpalI14443p4a_Sw_Rats+0x5d0>)
 80187c4:	fba2 2303 	umull	r2, r3, r2, r3
 80187c8:	099b      	lsrs	r3, r3, #6
 80187ca:	b29b      	uxth	r3, r3
 80187cc:	3301      	adds	r3, #1
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	461a      	mov	r2, r3
 80187d2:	2101      	movs	r1, #1
 80187d4:	f7f6 ffd2 	bl	800f77c <phhalHw_Pn5180_Wait>
 80187d8:	4603      	mov	r3, r0
 80187da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80187dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d010      	beq.n	8018804 <phpalI14443p4a_Sw_Rats+0x404>
 80187e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80187e4:	e0ee      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	685b      	ldr	r3, [r3, #4]
 80187ea:	6a3a      	ldr	r2, [r7, #32]
 80187ec:	b292      	uxth	r2, r2
 80187ee:	2100      	movs	r1, #0
 80187f0:	4618      	mov	r0, r3
 80187f2:	f7f6 ffc3 	bl	800f77c <phhalHw_Pn5180_Wait>
 80187f6:	4603      	mov	r3, r0
 80187f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80187fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d001      	beq.n	8018804 <phpalI14443p4a_Sw_Rats+0x404>
 8018800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018802:	e0df      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 8018804:	4b73      	ldr	r3, [pc, #460]	@ (80189d4 <phpalI14443p4a_Sw_Rats+0x5d4>)
 8018806:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	7b1b      	ldrb	r3, [r3, #12]
 801880c:	461a      	mov	r2, r3
 801880e:	2301      	movs	r3, #1
 8018810:	4093      	lsls	r3, r2
 8018812:	ee07 3a90 	vmov	s15, r3
 8018816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801881a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018822:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	7c5b      	ldrb	r3, [r3, #17]
 801882a:	2b03      	cmp	r3, #3
 801882c:	d108      	bne.n	8018840 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 801882e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8018832:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80189d8 <phpalI14443p4a_Sw_Rats+0x5d8>
 8018836:	ee77 7a87 	vadd.f32	s15, s15, s14
 801883a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 801883e:	e013      	b.n	8018868 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 8018840:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8018844:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80189dc <phpalI14443p4a_Sw_Rats+0x5dc>
 8018848:	ee77 7a87 	vadd.f32	s15, s15, s14
 801884c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	7c5b      	ldrb	r3, [r3, #17]
 8018854:	2b01      	cmp	r3, #1
 8018856:	d107      	bne.n	8018868 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8018858:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801885c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80189e0 <phpalI14443p4a_Sw_Rats+0x5e0>
 8018860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018864:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8018868:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801886c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018870:	ee17 3a90 	vmov	r3, s15
 8018874:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8018876:	69fb      	ldr	r3, [r7, #28]
 8018878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801887c:	d314      	bcc.n	80188a8 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	6858      	ldr	r0, [r3, #4]
 8018882:	69fb      	ldr	r3, [r7, #28]
 8018884:	4a52      	ldr	r2, [pc, #328]	@ (80189d0 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8018886:	fba2 2303 	umull	r2, r3, r2, r3
 801888a:	099b      	lsrs	r3, r3, #6
 801888c:	b29b      	uxth	r3, r3
 801888e:	3301      	adds	r3, #1
 8018890:	b29b      	uxth	r3, r3
 8018892:	461a      	mov	r2, r3
 8018894:	210e      	movs	r1, #14
 8018896:	f7f7 f82b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801889a:	4603      	mov	r3, r0
 801889c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801889e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d07f      	beq.n	80189a4 <phpalI14443p4a_Sw_Rats+0x5a4>
 80188a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188a6:	e08d      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	685b      	ldr	r3, [r3, #4]
 80188ac:	69fa      	ldr	r2, [r7, #28]
 80188ae:	b292      	uxth	r2, r2
 80188b0:	210d      	movs	r1, #13
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7f7 f81c 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80188b8:	4603      	mov	r3, r0
 80188ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80188bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d070      	beq.n	80189a4 <phpalI14443p4a_Sw_Rats+0x5a4>
 80188c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188c4:	e07e      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	7c5b      	ldrb	r3, [r3, #17]
 80188ca:	2b01      	cmp	r3, #1
 80188cc:	d101      	bne.n	80188d2 <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 80188ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188d0:	e078      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 80188d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d00d      	beq.n	80188f6 <phpalI14443p4a_Sw_Rats+0x4f6>
 80188da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188dc:	b2db      	uxtb	r3, r3
 80188de:	2b02      	cmp	r3, #2
 80188e0:	d009      	beq.n	80188f6 <phpalI14443p4a_Sw_Rats+0x4f6>
 80188e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	2b05      	cmp	r3, #5
 80188e8:	d005      	beq.n	80188f6 <phpalI14443p4a_Sw_Rats+0x4f6>
 80188ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b03      	cmp	r3, #3
 80188f0:	d001      	beq.n	80188f6 <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 80188f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188f4:	e066      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 80188f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80188f8:	b2db      	uxtb	r3, r3
 80188fa:	2b01      	cmp	r3, #1
 80188fc:	d00e      	beq.n	801891c <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8018906:	2100      	movs	r1, #0
 8018908:	4618      	mov	r0, r3
 801890a:	f7f6 ff37 	bl	800f77c <phhalHw_Pn5180_Wait>
 801890e:	4603      	mov	r3, r0
 8018910:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018914:	2b00      	cmp	r3, #0
 8018916:	d001      	beq.n	801891c <phpalI14443p4a_Sw_Rats+0x51c>
 8018918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801891a:	e053      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 801891c:	23c2      	movs	r3, #194	@ 0xc2
 801891e:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 8018920:	2301      	movs	r3, #1
 8018922:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	6858      	ldr	r0, [r3, #4]
 8018928:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 801892a:	f107 0218 	add.w	r2, r7, #24
 801892e:	f107 0312 	add.w	r3, r7, #18
 8018932:	9301      	str	r3, [sp, #4]
 8018934:	f107 0314 	add.w	r3, r7, #20
 8018938:	9300      	str	r3, [sp, #0]
 801893a:	460b      	mov	r3, r1
 801893c:	2100      	movs	r1, #0
 801893e:	f7f6 fc21 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8018942:	4603      	mov	r3, r0
 8018944:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 8018946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018948:	b2db      	uxtb	r3, r3
 801894a:	2b00      	cmp	r3, #0
 801894c:	d107      	bne.n	801895e <phpalI14443p4a_Sw_Rats+0x55e>
 801894e:	8a7b      	ldrh	r3, [r7, #18]
 8018950:	2b01      	cmp	r3, #1
 8018952:	d104      	bne.n	801895e <phpalI14443p4a_Sw_Rats+0x55e>
 8018954:	697b      	ldr	r3, [r7, #20]
 8018956:	781a      	ldrb	r2, [r3, #0]
 8018958:	7e3b      	ldrb	r3, [r7, #24]
 801895a:	429a      	cmp	r2, r3
 801895c:	d022      	beq.n	80189a4 <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	f240 424c 	movw	r2, #1100	@ 0x44c
 8018966:	210d      	movs	r1, #13
 8018968:	4618      	mov	r0, r3
 801896a:	f7f6 ffc1 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801896e:	4603      	mov	r3, r0
 8018970:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018974:	2b00      	cmp	r3, #0
 8018976:	d001      	beq.n	801897c <phpalI14443p4a_Sw_Rats+0x57c>
 8018978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801897a:	e023      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 801897c:	2350      	movs	r3, #80	@ 0x50
 801897e:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8018980:	2300      	movs	r3, #0
 8018982:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	6858      	ldr	r0, [r3, #4]
 8018988:	f107 0218 	add.w	r2, r7, #24
 801898c:	f107 0312 	add.w	r3, r7, #18
 8018990:	9301      	str	r3, [sp, #4]
 8018992:	f107 0314 	add.w	r3, r7, #20
 8018996:	9300      	str	r3, [sp, #0]
 8018998:	2302      	movs	r3, #2
 801899a:	2100      	movs	r1, #0
 801899c:	f7f6 fbf2 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80189a0:	4603      	mov	r3, r0
 80189a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 80189a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d00b      	beq.n	80189c2 <phpalI14443p4a_Sw_Rats+0x5c2>
 80189aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80189ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d106      	bne.n	80189c2 <phpalI14443p4a_Sw_Rats+0x5c2>
 80189b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80189b6:	b2db      	uxtb	r3, r3
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80189be:	b29b      	uxth	r3, r3
 80189c0:	e000      	b.n	80189c4 <phpalI14443p4a_Sw_Rats+0x5c4>
 80189c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	3730      	adds	r7, #48	@ 0x30
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bdb0      	pop	{r4, r5, r7, pc}
 80189cc:	f3af 8000 	nop.w
 80189d0:	10624dd3 	.word	0x10624dd3
 80189d4:	4397084f 	.word	0x4397084f
 80189d8:	42700000 	.word	0x42700000
 80189dc:	45638000 	.word	0x45638000
 80189e0:	447a0000 	.word	0x447a0000
 80189e4:	d12e109d 	.word	0xd12e109d
 80189e8:	4072e109 	.word	0x4072e109
 80189ec:	b9c518eb 	.word	0xb9c518eb
 80189f0:	403c518e 	.word	0x403c518e

080189f4 <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b08a      	sub	sp, #40	@ 0x28
 80189f8:	af02      	add	r7, sp, #8
 80189fa:	6078      	str	r0, [r7, #4]
 80189fc:	460b      	mov	r3, r1
 80189fe:	70fb      	strb	r3, [r7, #3]
 8018a00:	4613      	mov	r3, r2
 8018a02:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8018a04:	2300      	movs	r3, #0
 8018a06:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 8018a0c:	78fb      	ldrb	r3, [r7, #3]
 8018a0e:	2b03      	cmp	r3, #3
 8018a10:	d816      	bhi.n	8018a40 <phpalI14443p4a_Sw_Pps+0x4c>
 8018a12:	a201      	add	r2, pc, #4	@ (adr r2, 8018a18 <phpalI14443p4a_Sw_Pps+0x24>)
 8018a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a18:	08018a29 	.word	0x08018a29
 8018a1c:	08018a2f 	.word	0x08018a2f
 8018a20:	08018a35 	.word	0x08018a35
 8018a24:	08018a3b 	.word	0x08018a3b
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	83fb      	strh	r3, [r7, #30]
        break;
 8018a2c:	e00b      	b.n	8018a46 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	83fb      	strh	r3, [r7, #30]
        break;
 8018a32:	e008      	b.n	8018a46 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8018a34:	2302      	movs	r3, #2
 8018a36:	83fb      	strh	r3, [r7, #30]
        break;
 8018a38:	e005      	b.n	8018a46 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8018a3a:	2303      	movs	r3, #3
 8018a3c:	83fb      	strh	r3, [r7, #30]
        break;
 8018a3e:	e002      	b.n	8018a46 <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018a40:	f240 5321 	movw	r3, #1313	@ 0x521
 8018a44:	e080      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 8018a46:	78bb      	ldrb	r3, [r7, #2]
 8018a48:	2b03      	cmp	r3, #3
 8018a4a:	d817      	bhi.n	8018a7c <phpalI14443p4a_Sw_Pps+0x88>
 8018a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8018a54 <phpalI14443p4a_Sw_Pps+0x60>)
 8018a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a52:	bf00      	nop
 8018a54:	08018a65 	.word	0x08018a65
 8018a58:	08018a6b 	.word	0x08018a6b
 8018a5c:	08018a71 	.word	0x08018a71
 8018a60:	08018a77 	.word	0x08018a77
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8018a64:	2300      	movs	r3, #0
 8018a66:	83bb      	strh	r3, [r7, #28]
        break;
 8018a68:	e00b      	b.n	8018a82 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	83bb      	strh	r3, [r7, #28]
        break;
 8018a6e:	e008      	b.n	8018a82 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8018a70:	2302      	movs	r3, #2
 8018a72:	83bb      	strh	r3, [r7, #28]
        break;
 8018a74:	e005      	b.n	8018a82 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 8018a76:	2303      	movs	r3, #3
 8018a78:	83bb      	strh	r3, [r7, #28]
        break;
 8018a7a:	e002      	b.n	8018a82 <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018a7c:	f240 5321 	movw	r3, #1313	@ 0x521
 8018a80:	e062      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	7a9b      	ldrb	r3, [r3, #10]
 8018a86:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8018a8a:	b2db      	uxtb	r3, r3
 8018a8c:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 8018a8e:	2311      	movs	r3, #17
 8018a90:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 8018a92:	78bb      	ldrb	r3, [r7, #2]
 8018a94:	009b      	lsls	r3, r3, #2
 8018a96:	b2db      	uxtb	r3, r3
 8018a98:	f003 030c 	and.w	r3, r3, #12
 8018a9c:	b2da      	uxtb	r2, r3
 8018a9e:	78fb      	ldrb	r3, [r7, #3]
 8018aa0:	f003 0303 	and.w	r3, r3, #3
 8018aa4:	b2db      	uxtb	r3, r3
 8018aa6:	4313      	orrs	r3, r2
 8018aa8:	b2db      	uxtb	r3, r3
 8018aaa:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6858      	ldr	r0, [r3, #4]
 8018ab0:	f107 0214 	add.w	r2, r7, #20
 8018ab4:	f107 030e 	add.w	r3, r7, #14
 8018ab8:	9301      	str	r3, [sp, #4]
 8018aba:	f107 0310 	add.w	r3, r7, #16
 8018abe:	9300      	str	r3, [sp, #0]
 8018ac0:	2303      	movs	r3, #3
 8018ac2:	2100      	movs	r1, #0
 8018ac4:	f7f6 fb5e 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8018acc:	8b7b      	ldrh	r3, [r7, #26]
 8018ace:	b2db      	uxtb	r3, r3
 8018ad0:	2b73      	cmp	r3, #115	@ 0x73
 8018ad2:	d102      	bne.n	8018ada <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018ad4:	f240 5306 	movw	r3, #1286	@ 0x506
 8018ad8:	e036      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 8018ada:	8b7b      	ldrh	r3, [r7, #26]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d001      	beq.n	8018ae4 <phpalI14443p4a_Sw_Pps+0xf0>
 8018ae0:	8b7b      	ldrh	r3, [r7, #26]
 8018ae2:	e031      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 8018ae4:	89fb      	ldrh	r3, [r7, #14]
 8018ae6:	2b01      	cmp	r3, #1
 8018ae8:	d108      	bne.n	8018afc <phpalI14443p4a_Sw_Pps+0x108>
 8018aea:	693b      	ldr	r3, [r7, #16]
 8018aec:	781a      	ldrb	r2, [r3, #0]
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	7a9b      	ldrb	r3, [r3, #10]
 8018af2:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	429a      	cmp	r2, r3
 8018afa:	d002      	beq.n	8018b02 <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018afc:	f240 5306 	movw	r3, #1286	@ 0x506
 8018b00:	e022      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	78fa      	ldrb	r2, [r7, #3]
 8018b06:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	78ba      	ldrb	r2, [r7, #2]
 8018b0c:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	8bfa      	ldrh	r2, [r7, #30]
 8018b14:	2109      	movs	r1, #9
 8018b16:	4618      	mov	r0, r3
 8018b18:	f7f6 feea 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	833b      	strh	r3, [r7, #24]
 8018b20:	8b3b      	ldrh	r3, [r7, #24]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d001      	beq.n	8018b2a <phpalI14443p4a_Sw_Pps+0x136>
 8018b26:	8b3b      	ldrh	r3, [r7, #24]
 8018b28:	e00e      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	685b      	ldr	r3, [r3, #4]
 8018b2e:	8bba      	ldrh	r2, [r7, #28]
 8018b30:	210a      	movs	r1, #10
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7f6 fedc 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	833b      	strh	r3, [r7, #24]
 8018b3c:	8b3b      	ldrh	r3, [r7, #24]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d001      	beq.n	8018b46 <phpalI14443p4a_Sw_Pps+0x152>
 8018b42:	8b3b      	ldrh	r3, [r7, #24]
 8018b44:	e000      	b.n	8018b48 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 8018b46:	2300      	movs	r3, #0
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3720      	adds	r7, #32
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}

08018b50 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b084      	sub	sp, #16
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	4608      	mov	r0, r1
 8018b5a:	4611      	mov	r1, r2
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	4603      	mov	r3, r0
 8018b60:	70fb      	strb	r3, [r7, #3]
 8018b62:	460b      	mov	r3, r1
 8018b64:	70bb      	strb	r3, [r7, #2]
 8018b66:	4613      	mov	r3, r2
 8018b68:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 8018b6a:	787b      	ldrb	r3, [r7, #1]
 8018b6c:	2b03      	cmp	r3, #3
 8018b6e:	d902      	bls.n	8018b76 <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018b70:	f240 5321 	movw	r3, #1313	@ 0x521
 8018b74:	e0a0      	b.n	8018cb8 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8018b76:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8018b78:	7e3b      	ldrb	r3, [r7, #24]
 8018b7a:	2b03      	cmp	r3, #3
 8018b7c:	d902      	bls.n	8018b84 <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018b7e:	f240 5321 	movw	r3, #1313	@ 0x521
 8018b82:	e099      	b.n	8018cb8 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8018b84:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 8018b86:	78ba      	ldrb	r2, [r7, #2]
 8018b88:	78f9      	ldrb	r1, [r7, #3]
 8018b8a:	69fb      	ldr	r3, [r7, #28]
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f7ff fc37 	bl	8018400 <phpalI14443p4a_Sw_Rats>
 8018b92:	4603      	mov	r3, r0
 8018b94:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8018b96:	89fb      	ldrh	r3, [r7, #14]
 8018b98:	b2db      	uxtb	r3, r3
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d17c      	bne.n	8018c98 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8018b9e:	787b      	ldrb	r3, [r7, #1]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d102      	bne.n	8018baa <phpalI14443p4a_Sw_ActivateCard+0x5a>
 8018ba4:	7e3b      	ldrb	r3, [r7, #24]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d076      	beq.n	8018c98 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d072      	beq.n	8018c98 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	7adb      	ldrb	r3, [r3, #11]
 8018bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d002      	beq.n	8018bc4 <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 8018bbe:	2303      	movs	r3, #3
 8018bc0:	737b      	strb	r3, [r7, #13]
 8018bc2:	e013      	b.n	8018bec <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	7adb      	ldrb	r3, [r3, #11]
 8018bc8:	f003 0320 	and.w	r3, r3, #32
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d002      	beq.n	8018bd6 <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 8018bd0:	2302      	movs	r3, #2
 8018bd2:	737b      	strb	r3, [r7, #13]
 8018bd4:	e00a      	b.n	8018bec <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	7adb      	ldrb	r3, [r3, #11]
 8018bda:	f003 0310 	and.w	r3, r3, #16
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d002      	beq.n	8018be8 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 8018be2:	2301      	movs	r3, #1
 8018be4:	737b      	strb	r3, [r7, #13]
 8018be6:	e001      	b.n	8018bec <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 8018be8:	2300      	movs	r3, #0
 8018bea:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	7adb      	ldrb	r3, [r3, #11]
 8018bf0:	f003 0304 	and.w	r3, r3, #4
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d002      	beq.n	8018bfe <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 8018bf8:	2303      	movs	r3, #3
 8018bfa:	733b      	strb	r3, [r7, #12]
 8018bfc:	e013      	b.n	8018c26 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	7adb      	ldrb	r3, [r3, #11]
 8018c02:	f003 0302 	and.w	r3, r3, #2
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d002      	beq.n	8018c10 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 8018c0a:	2302      	movs	r3, #2
 8018c0c:	733b      	strb	r3, [r7, #12]
 8018c0e:	e00a      	b.n	8018c26 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	7adb      	ldrb	r3, [r3, #11]
 8018c14:	f003 0301 	and.w	r3, r3, #1
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d002      	beq.n	8018c22 <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	733b      	strb	r3, [r7, #12]
 8018c20:	e001      	b.n	8018c26 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 8018c22:	2300      	movs	r3, #0
 8018c24:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 8018c26:	7e3a      	ldrb	r2, [r7, #24]
 8018c28:	7b7b      	ldrb	r3, [r7, #13]
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d005      	beq.n	8018c3a <phpalI14443p4a_Sw_ActivateCard+0xea>
 8018c2e:	7e3a      	ldrb	r2, [r7, #24]
 8018c30:	7b7b      	ldrb	r3, [r7, #13]
 8018c32:	429a      	cmp	r2, r3
 8018c34:	d901      	bls.n	8018c3a <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 8018c36:	7b7b      	ldrb	r3, [r7, #13]
 8018c38:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 8018c3a:	787a      	ldrb	r2, [r7, #1]
 8018c3c:	7b3b      	ldrb	r3, [r7, #12]
 8018c3e:	429a      	cmp	r2, r3
 8018c40:	d005      	beq.n	8018c4e <phpalI14443p4a_Sw_ActivateCard+0xfe>
 8018c42:	787a      	ldrb	r2, [r7, #1]
 8018c44:	7b3b      	ldrb	r3, [r7, #12]
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d901      	bls.n	8018c4e <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 8018c4a:	7b3b      	ldrb	r3, [r7, #12]
 8018c4c:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	7adb      	ldrb	r3, [r3, #11]
 8018c52:	b25b      	sxtb	r3, r3
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	da0c      	bge.n	8018c72 <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8018c58:	7e3a      	ldrb	r2, [r7, #24]
 8018c5a:	787b      	ldrb	r3, [r7, #1]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d008      	beq.n	8018c72 <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8018c60:	7e3a      	ldrb	r2, [r7, #24]
 8018c62:	787b      	ldrb	r3, [r7, #1]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d202      	bcs.n	8018c6e <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8018c68:	7e3b      	ldrb	r3, [r7, #24]
 8018c6a:	707b      	strb	r3, [r7, #1]
 8018c6c:	e001      	b.n	8018c72 <phpalI14443p4a_Sw_ActivateCard+0x122>
 8018c6e:	787b      	ldrb	r3, [r7, #1]
 8018c70:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 8018c72:	787b      	ldrb	r3, [r7, #1]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d102      	bne.n	8018c7e <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8018c78:	7e3b      	ldrb	r3, [r7, #24]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d00c      	beq.n	8018c98 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 8018c7e:	7e3a      	ldrb	r2, [r7, #24]
 8018c80:	787b      	ldrb	r3, [r7, #1]
 8018c82:	4619      	mov	r1, r3
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f7ff feb5 	bl	80189f4 <phpalI14443p4a_Sw_Pps>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	81fb      	strh	r3, [r7, #14]
 8018c8e:	89fb      	ldrh	r3, [r7, #14]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d001      	beq.n	8018c98 <phpalI14443p4a_Sw_ActivateCard+0x148>
 8018c94:	89fb      	ldrh	r3, [r7, #14]
 8018c96:	e00f      	b.n	8018cb8 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8018c98:	89fb      	ldrh	r3, [r7, #14]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d00b      	beq.n	8018cb6 <phpalI14443p4a_Sw_ActivateCard+0x166>
 8018c9e:	89fb      	ldrh	r3, [r7, #14]
 8018ca0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d106      	bne.n	8018cb6 <phpalI14443p4a_Sw_ActivateCard+0x166>
 8018ca8:	89fb      	ldrh	r3, [r7, #14]
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8018cb2:	b29b      	uxth	r3, r3
 8018cb4:	e000      	b.n	8018cb8 <phpalI14443p4a_Sw_ActivateCard+0x168>
 8018cb6:	89fb      	ldrh	r3, [r7, #14]
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3710      	adds	r7, #16
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b085      	sub	sp, #20
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	60f8      	str	r0, [r7, #12]
 8018cc8:	60b9      	str	r1, [r7, #8]
 8018cca:	607a      	str	r2, [r7, #4]
 8018ccc:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	7a1a      	ldrb	r2, [r3, #8]
 8018cd2:	68bb      	ldr	r3, [r7, #8]
 8018cd4:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	7a9a      	ldrb	r2, [r3, #10]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	7a5a      	ldrb	r2, [r3, #9]
 8018ce2:	683b      	ldr	r3, [r7, #0]
 8018ce4:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	7b1a      	ldrb	r2, [r3, #12]
 8018cea:	69bb      	ldr	r3, [r7, #24]
 8018cec:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	7b9a      	ldrb	r2, [r3, #14]
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	7b5a      	ldrb	r2, [r3, #13]
 8018cfa:	6a3b      	ldr	r3, [r7, #32]
 8018cfc:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8018cfe:	2300      	movs	r3, #0
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	3714      	adds	r7, #20
 8018d04:	46bd      	mov	sp, r7
 8018d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0a:	4770      	bx	lr

08018d0c <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b086      	sub	sp, #24
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	60f8      	str	r0, [r7, #12]
 8018d14:	607a      	str	r2, [r7, #4]
 8018d16:	603b      	str	r3, [r7, #0]
 8018d18:	460b      	mov	r3, r1
 8018d1a:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 8018d20:	897b      	ldrh	r3, [r7, #10]
 8018d22:	2b34      	cmp	r3, #52	@ 0x34
 8018d24:	d002      	beq.n	8018d2c <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 8018d26:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 8018d2a:	e039      	b.n	8018da0 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d101      	bne.n	8018d36 <phpalI14443p4mC_Sw_Init+0x2a>
 8018d32:	2321      	movs	r3, #33	@ 0x21
 8018d34:	e034      	b.n	8018da0 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d101      	bne.n	8018d40 <phpalI14443p4mC_Sw_Init+0x34>
 8018d3c:	2321      	movs	r3, #33	@ 0x21
 8018d3e:	e02f      	b.n	8018da0 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	f640 7201 	movw	r2, #3841	@ 0xf01
 8018d46:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	683a      	ldr	r2, [r7, #0]
 8018d52:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	2201      	movs	r2, #1
 8018d58:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	2202      	movs	r2, #2
 8018d64:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	224b      	movs	r2, #75	@ 0x4b
 8018d72:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 8018d76:	68f8      	ldr	r0, [r7, #12]
 8018d78:	f000 f818 	bl	8018dac <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	2200      	movs	r2, #0
 8018d80:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	4a08      	ldr	r2, [pc, #32]	@ (8018da8 <phpalI14443p4mC_Sw_Init+0x9c>)
 8018d86:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	f103 0208 	add.w	r2, r3, #8
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	3308      	adds	r3, #8
 8018d92:	4619      	mov	r1, r3
 8018d94:	4610      	mov	r0, r2
 8018d96:	f002 fce7 	bl	801b768 <phOsal_EventCreate>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8018d9e:	8afb      	ldrh	r3, [r7, #22]
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	3718      	adds	r7, #24
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	08025b14 	.word	0x08025b14

08018dac <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b084      	sub	sp, #16
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8018db4:	2300      	movs	r3, #0
 8018db6:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2201      	movs	r2, #1
 8018dc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2202      	movs	r2, #2
 8018dd2:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2200      	movs	r2, #0
 8018dde:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2200      	movs	r2, #0
 8018de4:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	2204      	movs	r2, #4
 8018dea:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2200      	movs	r2, #0
 8018df0:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2200      	movs	r2, #0
 8018df8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2200      	movs	r2, #0
 8018e00:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	2200      	movs	r2, #0
 8018e08:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2200      	movs	r2, #0
 8018e10:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2201      	movs	r2, #1
 8018e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	2200      	movs	r2, #0
 8018e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2200      	movs	r2, #0
 8018e28:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	685b      	ldr	r3, [r3, #4]
 8018e38:	2200      	movs	r2, #0
 8018e3a:	2130      	movs	r1, #48	@ 0x30
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f7f6 fd57 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8018e42:	4603      	mov	r3, r0
 8018e44:	81fb      	strh	r3, [r7, #14]
 8018e46:	89fb      	ldrh	r3, [r7, #14]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d001      	beq.n	8018e50 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 8018e4c:	89fb      	ldrh	r3, [r7, #14]
 8018e4e:	e000      	b.n	8018e52 <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 8018e50:	89fb      	ldrh	r3, [r7, #14]
}
 8018e52:	4618      	mov	r0, r3
 8018e54:	3710      	adds	r7, #16
 8018e56:	46bd      	mov	sp, r7
 8018e58:	bd80      	pop	{r7, pc}

08018e5a <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 8018e5a:	b480      	push	{r7}
 8018e5c:	b085      	sub	sp, #20
 8018e5e:	af00      	add	r7, sp, #0
 8018e60:	60f8      	str	r0, [r7, #12]
 8018e62:	460b      	mov	r3, r1
 8018e64:	607a      	str	r2, [r7, #4]
 8018e66:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8018e68:	897b      	ldrh	r3, [r7, #10]
 8018e6a:	2b0c      	cmp	r3, #12
 8018e6c:	d002      	beq.n	8018e74 <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 8018e6e:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8018e72:	e017      	b.n	8018ea4 <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d101      	bne.n	8018e7e <phpalI18000p3m3_Sw_Init+0x24>
 8018e7a:	2321      	movs	r3, #33	@ 0x21
 8018e7c:	e012      	b.n	8018ea4 <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d101      	bne.n	8018e88 <phpalI18000p3m3_Sw_Init+0x2e>
 8018e84:	2321      	movs	r3, #33	@ 0x21
 8018e86:	e00d      	b.n	8018ea4 <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	f640 3201 	movw	r2, #2817	@ 0xb01
 8018e8e:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	687a      	ldr	r2, [r7, #4]
 8018e94:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	2200      	movs	r2, #0
 8018e9a:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8018ea2:	2300      	movs	r3, #0
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3714      	adds	r7, #20
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eae:	4770      	bx	lr

08018eb0 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 8018eb0:	b480      	push	{r7}
 8018eb2:	b085      	sub	sp, #20
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
 8018eb8:	4608      	mov	r0, r1
 8018eba:	4611      	mov	r1, r2
 8018ebc:	461a      	mov	r2, r3
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	70fb      	strb	r3, [r7, #3]
 8018ec2:	460b      	mov	r3, r1
 8018ec4:	70bb      	strb	r3, [r7, #2]
 8018ec6:	4613      	mov	r3, r2
 8018ec8:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 8018eca:	2300      	movs	r3, #0
 8018ecc:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 8018ece:	78fb      	ldrb	r3, [r7, #3]
 8018ed0:	2b07      	cmp	r3, #7
 8018ed2:	d80c      	bhi.n	8018eee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8018ed4:	78bb      	ldrb	r3, [r7, #2]
 8018ed6:	2b07      	cmp	r3, #7
 8018ed8:	d809      	bhi.n	8018eee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8018eda:	787b      	ldrb	r3, [r7, #1]
 8018edc:	2b03      	cmp	r3, #3
 8018ede:	d806      	bhi.n	8018eee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8018ee0:	7f3b      	ldrb	r3, [r7, #28]
 8018ee2:	2b03      	cmp	r3, #3
 8018ee4:	d803      	bhi.n	8018eee <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8018ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018eea:	2b01      	cmp	r3, #1
 8018eec:	d902      	bls.n	8018ef4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8018eee:	f640 3321 	movw	r3, #2849	@ 0xb21
 8018ef2:	e0f0      	b.n	80190d6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 8018ef8:	78fb      	ldrb	r3, [r7, #3]
 8018efa:	005b      	lsls	r3, r3, #1
 8018efc:	b2da      	uxtb	r2, r3
 8018efe:	78bb      	ldrb	r3, [r7, #2]
 8018f00:	089b      	lsrs	r3, r3, #2
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	4313      	orrs	r3, r2
 8018f06:	b2da      	uxtb	r2, r3
 8018f08:	7bbb      	ldrb	r3, [r7, #14]
 8018f0a:	1c59      	adds	r1, r3, #1
 8018f0c:	73b9      	strb	r1, [r7, #14]
 8018f0e:	4619      	mov	r1, r3
 8018f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f12:	440b      	add	r3, r1
 8018f14:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 8018f18:	b2d2      	uxtb	r2, r2
 8018f1a:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 8018f1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8018f20:	019b      	lsls	r3, r3, #6
 8018f22:	b25a      	sxtb	r2, r3
 8018f24:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8018f28:	011b      	lsls	r3, r3, #4
 8018f2a:	b25b      	sxtb	r3, r3
 8018f2c:	4313      	orrs	r3, r2
 8018f2e:	b25a      	sxtb	r2, r3
 8018f30:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	b25b      	sxtb	r3, r3
 8018f38:	4313      	orrs	r3, r2
 8018f3a:	b259      	sxtb	r1, r3
 8018f3c:	7bbb      	ldrb	r3, [r7, #14]
 8018f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f40:	4413      	add	r3, r2
 8018f42:	b2ca      	uxtb	r2, r1
 8018f44:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8018f46:	2300      	movs	r3, #0
 8018f48:	73fb      	strb	r3, [r7, #15]
 8018f4a:	e01f      	b.n	8018f8c <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 8018f4c:	7bbb      	ldrb	r3, [r7, #14]
 8018f4e:	1c5a      	adds	r2, r3, #1
 8018f50:	73ba      	strb	r2, [r7, #14]
 8018f52:	4619      	mov	r1, r3
 8018f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f56:	440a      	add	r2, r1
 8018f58:	7811      	ldrb	r1, [r2, #0]
 8018f5a:	7bfa      	ldrb	r2, [r7, #15]
 8018f5c:	69b8      	ldr	r0, [r7, #24]
 8018f5e:	4402      	add	r2, r0
 8018f60:	7812      	ldrb	r2, [r2, #0]
 8018f62:	0992      	lsrs	r2, r2, #6
 8018f64:	b2d2      	uxtb	r2, r2
 8018f66:	4618      	mov	r0, r3
 8018f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f6a:	4403      	add	r3, r0
 8018f6c:	430a      	orrs	r2, r1
 8018f6e:	b2d2      	uxtb	r2, r2
 8018f70:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 8018f72:	7bfb      	ldrb	r3, [r7, #15]
 8018f74:	69ba      	ldr	r2, [r7, #24]
 8018f76:	4413      	add	r3, r2
 8018f78:	781a      	ldrb	r2, [r3, #0]
 8018f7a:	7bbb      	ldrb	r3, [r7, #14]
 8018f7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018f7e:	440b      	add	r3, r1
 8018f80:	0092      	lsls	r2, r2, #2
 8018f82:	b2d2      	uxtb	r2, r2
 8018f84:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8018f86:	7bfb      	ldrb	r3, [r7, #15]
 8018f88:	3301      	adds	r3, #1
 8018f8a:	73fb      	strb	r3, [r7, #15]
 8018f8c:	7bfa      	ldrb	r2, [r7, #15]
 8018f8e:	7f3b      	ldrb	r3, [r7, #28]
 8018f90:	3301      	adds	r3, #1
 8018f92:	429a      	cmp	r2, r3
 8018f94:	d3da      	bcc.n	8018f4c <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 8018f96:	7bbb      	ldrb	r3, [r7, #14]
 8018f98:	1c5a      	adds	r2, r3, #1
 8018f9a:	73ba      	strb	r2, [r7, #14]
 8018f9c:	4619      	mov	r1, r3
 8018f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018fa0:	440a      	add	r2, r1
 8018fa2:	7811      	ldrb	r1, [r2, #0]
 8018fa4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8018fa8:	0992      	lsrs	r2, r2, #6
 8018faa:	b2d2      	uxtb	r2, r2
 8018fac:	4618      	mov	r0, r3
 8018fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018fb0:	4403      	add	r3, r0
 8018fb2:	430a      	orrs	r2, r1
 8018fb4:	b2d2      	uxtb	r2, r2
 8018fb6:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 8018fb8:	7bbb      	ldrb	r3, [r7, #14]
 8018fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018fbc:	4413      	add	r3, r2
 8018fbe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8018fc2:	0092      	lsls	r2, r2, #2
 8018fc4:	b2d2      	uxtb	r2, r2
 8018fc6:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 8018fc8:	7bbb      	ldrb	r3, [r7, #14]
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	00db      	lsls	r3, r3, #3
 8018fce:	b29b      	uxth	r3, r3
 8018fd0:	3306      	adds	r3, #6
 8018fd2:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 8018fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018fd8:	08db      	lsrs	r3, r3, #3
 8018fda:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 8018fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018fe0:	f003 0307 	and.w	r3, r3, #7
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d002      	beq.n	8018fee <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 8018fe8:	7b3b      	ldrb	r3, [r7, #12]
 8018fea:	3301      	adds	r3, #1
 8018fec:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8018fee:	2300      	movs	r3, #0
 8018ff0:	73fb      	strb	r3, [r7, #15]
 8018ff2:	e036      	b.n	8019062 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 8018ff4:	7bfb      	ldrb	r3, [r7, #15]
 8018ff6:	6a3a      	ldr	r2, [r7, #32]
 8018ff8:	4413      	add	r3, r2
 8018ffa:	781b      	ldrb	r3, [r3, #0]
 8018ffc:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 8018ffe:	7bfa      	ldrb	r2, [r7, #15]
 8019000:	7b3b      	ldrb	r3, [r7, #12]
 8019002:	3b01      	subs	r3, #1
 8019004:	429a      	cmp	r2, r3
 8019006:	d112      	bne.n	801902e <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 8019008:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801900c:	f003 0307 	and.w	r3, r3, #7
 8019010:	2b00      	cmp	r3, #0
 8019012:	d00c      	beq.n	801902e <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 8019014:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019018:	f003 0307 	and.w	r3, r3, #7
 801901c:	f1c3 0308 	rsb	r3, r3, #8
 8019020:	22ff      	movs	r2, #255	@ 0xff
 8019022:	fa02 f303 	lsl.w	r3, r2, r3
 8019026:	b2da      	uxtb	r2, r3
 8019028:	7b7b      	ldrb	r3, [r7, #13]
 801902a:	4013      	ands	r3, r2
 801902c:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 801902e:	7bbb      	ldrb	r3, [r7, #14]
 8019030:	1c5a      	adds	r2, r3, #1
 8019032:	73ba      	strb	r2, [r7, #14]
 8019034:	4619      	mov	r1, r3
 8019036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019038:	440a      	add	r2, r1
 801903a:	7811      	ldrb	r1, [r2, #0]
 801903c:	7b7a      	ldrb	r2, [r7, #13]
 801903e:	0992      	lsrs	r2, r2, #6
 8019040:	b2d2      	uxtb	r2, r2
 8019042:	4618      	mov	r0, r3
 8019044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019046:	4403      	add	r3, r0
 8019048:	430a      	orrs	r2, r1
 801904a:	b2d2      	uxtb	r2, r2
 801904c:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 801904e:	7bbb      	ldrb	r3, [r7, #14]
 8019050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019052:	4413      	add	r3, r2
 8019054:	7b7a      	ldrb	r2, [r7, #13]
 8019056:	0092      	lsls	r2, r2, #2
 8019058:	b2d2      	uxtb	r2, r2
 801905a:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 801905c:	7bfb      	ldrb	r3, [r7, #15]
 801905e:	3301      	adds	r3, #1
 8019060:	73fb      	strb	r3, [r7, #15]
 8019062:	7bfa      	ldrb	r2, [r7, #15]
 8019064:	7b3b      	ldrb	r3, [r7, #12]
 8019066:	429a      	cmp	r2, r3
 8019068:	d3c4      	bcc.n	8018ff4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 801906a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801906e:	b29a      	uxth	r2, r3
 8019070:	897b      	ldrh	r3, [r7, #10]
 8019072:	4413      	add	r3, r2
 8019074:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 8019076:	897b      	ldrh	r3, [r7, #10]
 8019078:	08db      	lsrs	r3, r3, #3
 801907a:	b29a      	uxth	r2, r3
 801907c:	7bbb      	ldrb	r3, [r7, #14]
 801907e:	b29b      	uxth	r3, r3
 8019080:	429a      	cmp	r2, r3
 8019082:	d002      	beq.n	801908a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 8019084:	7bbb      	ldrb	r3, [r7, #14]
 8019086:	3b01      	subs	r3, #1
 8019088:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 801908a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801908e:	2b00      	cmp	r3, #0
 8019090:	d010      	beq.n	80190b4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 8019092:	7bbb      	ldrb	r3, [r7, #14]
 8019094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019096:	4413      	add	r3, r2
 8019098:	7819      	ldrb	r1, [r3, #0]
 801909a:	897b      	ldrh	r3, [r7, #10]
 801909c:	f003 0307 	and.w	r3, r3, #7
 80190a0:	2280      	movs	r2, #128	@ 0x80
 80190a2:	fa22 f303 	lsr.w	r3, r2, r3
 80190a6:	b2da      	uxtb	r2, r3
 80190a8:	7bbb      	ldrb	r3, [r7, #14]
 80190aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80190ac:	4403      	add	r3, r0
 80190ae:	430a      	orrs	r2, r1
 80190b0:	b2d2      	uxtb	r2, r2
 80190b2:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 80190b4:	7bbb      	ldrb	r3, [r7, #14]
 80190b6:	3301      	adds	r3, #1
 80190b8:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 80190ba:	897b      	ldrh	r3, [r7, #10]
 80190bc:	3301      	adds	r3, #1
 80190be:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 80190c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190c2:	7bba      	ldrb	r2, [r7, #14]
 80190c4:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 80190c6:	897b      	ldrh	r3, [r7, #10]
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	f003 0307 	and.w	r3, r3, #7
 80190ce:	b2da      	uxtb	r2, r3
 80190d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190d2:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80190d4:	2300      	movs	r3, #0
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3714      	adds	r7, #20
 80190da:	46bd      	mov	sp, r7
 80190dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e0:	4770      	bx	lr

080190e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 80190e2:	b580      	push	{r7, lr}
 80190e4:	b084      	sub	sp, #16
 80190e6:	af00      	add	r7, sp, #0
 80190e8:	6078      	str	r0, [r7, #4]
 80190ea:	4608      	mov	r0, r1
 80190ec:	4611      	mov	r1, r2
 80190ee:	461a      	mov	r2, r3
 80190f0:	4603      	mov	r3, r0
 80190f2:	70fb      	strb	r3, [r7, #3]
 80190f4:	460b      	mov	r3, r1
 80190f6:	70bb      	strb	r3, [r7, #2]
 80190f8:	4613      	mov	r3, r2
 80190fa:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 80190fc:	2300      	movs	r3, #0
 80190fe:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 8019100:	78fb      	ldrb	r3, [r7, #3]
 8019102:	2b01      	cmp	r3, #1
 8019104:	d816      	bhi.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8019106:	78bb      	ldrb	r3, [r7, #2]
 8019108:	2b01      	cmp	r3, #1
 801910a:	d913      	bls.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 801910c:	78bb      	ldrb	r3, [r7, #2]
 801910e:	2b03      	cmp	r3, #3
 8019110:	d810      	bhi.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8019112:	787b      	ldrb	r3, [r7, #1]
 8019114:	2b01      	cmp	r3, #1
 8019116:	d80d      	bhi.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8019118:	7e3b      	ldrb	r3, [r7, #24]
 801911a:	2b03      	cmp	r3, #3
 801911c:	d80a      	bhi.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 801911e:	7f3b      	ldrb	r3, [r7, #28]
 8019120:	2b03      	cmp	r3, #3
 8019122:	d807      	bhi.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 8019124:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019128:	2b01      	cmp	r3, #1
 801912a:	d803      	bhi.n	8019134 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 801912c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019130:	2b0f      	cmp	r3, #15
 8019132:	d902      	bls.n	801913a <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8019134:	f640 3321 	movw	r3, #2849	@ 0xb21
 8019138:	e072      	b.n	8019220 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	7f3a      	ldrb	r2, [r7, #28]
 801913e:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 8019140:	787b      	ldrb	r3, [r7, #1]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d002      	beq.n	801914c <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 8019146:	2301      	movs	r3, #1
 8019148:	707b      	strb	r3, [r7, #1]
 801914a:	e001      	b.n	8019150 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 801914c:	2300      	movs	r3, #0
 801914e:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 8019150:	78fb      	ldrb	r3, [r7, #3]
 8019152:	00db      	lsls	r3, r3, #3
 8019154:	b2da      	uxtb	r2, r3
 8019156:	78bb      	ldrb	r3, [r7, #2]
 8019158:	005b      	lsls	r3, r3, #1
 801915a:	b2db      	uxtb	r3, r3
 801915c:	4313      	orrs	r3, r2
 801915e:	b2da      	uxtb	r2, r3
 8019160:	787b      	ldrb	r3, [r7, #1]
 8019162:	4313      	orrs	r3, r2
 8019164:	b2db      	uxtb	r3, r3
 8019166:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801916a:	b2da      	uxtb	r2, r3
 801916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801916e:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8019170:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8019174:	019b      	lsls	r3, r3, #6
 8019176:	b25a      	sxtb	r2, r3
 8019178:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801917c:	011b      	lsls	r3, r3, #4
 801917e:	b25b      	sxtb	r3, r3
 8019180:	4313      	orrs	r3, r2
 8019182:	b25a      	sxtb	r2, r3
 8019184:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8019188:	00db      	lsls	r3, r3, #3
 801918a:	b25b      	sxtb	r3, r3
 801918c:	4313      	orrs	r3, r2
 801918e:	b25a      	sxtb	r2, r3
 8019190:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019194:	085b      	lsrs	r3, r3, #1
 8019196:	b2db      	uxtb	r3, r3
 8019198:	b25b      	sxtb	r3, r3
 801919a:	4313      	orrs	r3, r2
 801919c:	b25a      	sxtb	r2, r3
 801919e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191a0:	3301      	adds	r3, #1
 80191a2:	b2d2      	uxtb	r2, r2
 80191a4:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 80191a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191a8:	3302      	adds	r3, #2
 80191aa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80191ae:	01d2      	lsls	r2, r2, #7
 80191b0:	b2d2      	uxtb	r2, r2
 80191b2:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 80191b4:	78fb      	ldrb	r3, [r7, #3]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d108      	bne.n	80191cc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 80191ba:	78bb      	ldrb	r3, [r7, #2]
 80191bc:	2b02      	cmp	r3, #2
 80191be:	d102      	bne.n	80191c6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 80191c0:	2313      	movs	r3, #19
 80191c2:	81fb      	strh	r3, [r7, #14]
 80191c4:	e00a      	b.n	80191dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 80191c6:	2315      	movs	r3, #21
 80191c8:	81fb      	strh	r3, [r7, #14]
 80191ca:	e007      	b.n	80191dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 80191cc:	78bb      	ldrb	r3, [r7, #2]
 80191ce:	2b02      	cmp	r3, #2
 80191d0:	d102      	bne.n	80191d8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 80191d2:	2314      	movs	r3, #20
 80191d4:	81fb      	strh	r3, [r7, #14]
 80191d6:	e001      	b.n	80191dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 80191d8:	2316      	movs	r3, #22
 80191da:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	685b      	ldr	r3, [r3, #4]
 80191e0:	89fa      	ldrh	r2, [r7, #14]
 80191e2:	210a      	movs	r1, #10
 80191e4:	4618      	mov	r0, r3
 80191e6:	f7f6 fb83 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80191ea:	4603      	mov	r3, r0
 80191ec:	81bb      	strh	r3, [r7, #12]
 80191ee:	89bb      	ldrh	r3, [r7, #12]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d001      	beq.n	80191f8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 80191f4:	89bb      	ldrh	r3, [r7, #12]
 80191f6:	e013      	b.n	8019220 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	6858      	ldr	r0, [r3, #4]
 80191fc:	78fb      	ldrb	r3, [r7, #3]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d101      	bne.n	8019206 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 8019202:	2301      	movs	r3, #1
 8019204:	e000      	b.n	8019208 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 8019206:	2302      	movs	r3, #2
 8019208:	461a      	mov	r2, r3
 801920a:	210f      	movs	r1, #15
 801920c:	f7f6 fb70 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8019210:	4603      	mov	r3, r0
 8019212:	81bb      	strh	r3, [r7, #12]
 8019214:	89bb      	ldrh	r3, [r7, #12]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d001      	beq.n	801921e <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 801921a:	89bb      	ldrh	r3, [r7, #12]
 801921c:	e000      	b.n	8019220 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 801921e:	2300      	movs	r3, #0
}
 8019220:	4618      	mov	r0, r3
 8019222:	3710      	adds	r7, #16
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}

08019228 <phpalI18092mPI_Sw_Init>:
phStatus_t phpalI18092mPI_Sw_Init(
                                  phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
 801922e:	60f8      	str	r0, [r7, #12]
 8019230:	460b      	mov	r3, r1
 8019232:	607a      	str	r2, [r7, #4]
 8019234:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18092mPI_Sw_DataParams_t) != wSizeOfDataParams)
 8019236:	897b      	ldrh	r3, [r7, #10]
 8019238:	2b24      	cmp	r3, #36	@ 0x24
 801923a:	d002      	beq.n	8019242 <phpalI18092mPI_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MPI);
 801923c:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8019240:	e014      	b.n	801926c <phpalI18092mPI_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d101      	bne.n	801924c <phpalI18092mPI_Sw_Init+0x24>
 8019248:	2321      	movs	r3, #33	@ 0x21
 801924a:	e00f      	b.n	801926c <phpalI18092mPI_Sw_Init+0x44>
    PH_ASSERT_NULL (pHalDataParams);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d101      	bne.n	8019256 <phpalI18092mPI_Sw_Init+0x2e>
 8019252:	2321      	movs	r3, #33	@ 0x21
 8019254:	e00a      	b.n	801926c <phpalI18092mPI_Sw_Init+0x44>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MPI | PHPAL_I18092MPI_SW_ID;
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	f640 4201 	movw	r2, #3073	@ 0xc01
 801925c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	605a      	str	r2, [r3, #4]

    /* Reset protocol to defaults */
    return phpalI18092mPI_Sw_ResetProtocol(pDataParams);
 8019264:	68f8      	ldr	r0, [r7, #12]
 8019266:	f000 f805 	bl	8019274 <phpalI18092mPI_Sw_ResetProtocol>
 801926a:	4603      	mov	r3, r0
}
 801926c:	4618      	mov	r0, r3
 801926e:	3710      	adds	r7, #16
 8019270:	46bd      	mov	sp, r7
 8019272:	bd80      	pop	{r7, pc}

08019274 <phpalI18092mPI_Sw_ResetProtocol>:

phStatus_t phpalI18092mPI_Sw_ResetProtocol(
    phpalI18092mPI_Sw_DataParams_t * pDataParams
    )
{
 8019274:	b480      	push	{r7}
 8019276:	b083      	sub	sp, #12
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bNfcIdValid    = PH_OFF;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	2200      	movs	r2, #0
 8019280:	721a      	strb	r2, [r3, #8]
    pDataParams->bStateNow      = PHPAL_I18092MPI_SW_STATE_INFORMATION_PDU_TX;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2200      	movs	r2, #0
 8019286:	74da      	strb	r2, [r3, #19]
    pDataParams->bDid           = 0;    /* set DID to 0, i.e. disable usage of DID */
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	2200      	movs	r2, #0
 801928c:	751a      	strb	r2, [r3, #20]
    pDataParams->bNadEnabled    = PH_OFF;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	2200      	movs	r2, #0
 8019292:	755a      	strb	r2, [r3, #21]
    pDataParams->bNad           = 0;
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2200      	movs	r2, #0
 8019298:	759a      	strb	r2, [r3, #22]
    pDataParams->bWt            = PHPAL_I18092MPI_WT_MAX;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	220e      	movs	r2, #14
 801929e:	75da      	strb	r2, [r3, #23]
    pDataParams->bFsl           = PHPAL_I18092MPI_FRAMESIZE_64;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	2200      	movs	r2, #0
 80192a4:	761a      	strb	r2, [r3, #24]
    pDataParams->bLri           = PHPAL_I18092MPI_FRAMESIZE_64;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	2200      	movs	r2, #0
 80192aa:	771a      	strb	r2, [r3, #28]
    pDataParams->bLrt           = PHPAL_I18092MPI_FRAMESIZE_64;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	2200      	movs	r2, #0
 80192b0:	775a      	strb	r2, [r3, #29]
    pDataParams->bPni           = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2200      	movs	r2, #0
 80192b6:	765a      	strb	r2, [r3, #25]
    pDataParams->bDsi           = 0;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2200      	movs	r2, #0
 80192bc:	769a      	strb	r2, [r3, #26]
    pDataParams->bDri           = 0;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	2200      	movs	r2, #0
 80192c2:	76da      	strb	r2, [r3, #27]
    pDataParams->bMaxRetryCount = PHPAL_I18092MPI_SW_RETRIES_DEFAULT;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2202      	movs	r2, #2
 80192c8:	779a      	strb	r2, [r3, #30]
    pDataParams->bAtnDisabled   = 0;
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	2200      	movs	r2, #0
 80192ce:	77da      	strb	r2, [r3, #31]
    pDataParams->bActiveMode    = 0;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2200      	movs	r2, #0
 80192d4:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2202      	movs	r2, #2
 80192dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bPropPSLMode   = PH_OFF;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	2200      	movs	r2, #0
 80192e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    return PH_ERR_SUCCESS;
 80192e8:	2300      	movs	r3, #0
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	370c      	adds	r7, #12
 80192ee:	46bd      	mov	sp, r7
 80192f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f4:	4770      	bx	lr
	...

080192f8 <phpalI18092mPI_Sw_Atr>:
                                 uint8_t * pGi,
                                 uint8_t bGiLength,
                                 uint8_t * pAtrRes,
                                 uint8_t * pAtrResLength
                                 )
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b098      	sub	sp, #96	@ 0x60
 80192fc:	af04      	add	r7, sp, #16
 80192fe:	60f8      	str	r0, [r7, #12]
 8019300:	60b9      	str	r1, [r7, #8]
 8019302:	4611      	mov	r1, r2
 8019304:	461a      	mov	r2, r3
 8019306:	460b      	mov	r3, r1
 8019308:	71fb      	strb	r3, [r7, #7]
 801930a:	4613      	mov	r3, r2
 801930c:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM wPreviousStatus;
    uint8_t     PH_MEMLOC_REM aCmd[14];
    uint8_t     PH_MEMLOC_REM bCmdLen;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801930e:	2300      	movs	r3, #0
 8019310:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 8019312:	2300      	movs	r3, #0
 8019314:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 8019316:	2300      	movs	r3, #0
 8019318:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 801931a:	2300      	movs	r3, #0
 801931c:	623b      	str	r3, [r7, #32]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 801931e:	2300      	movs	r3, #0
 8019320:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 8019322:	2300      	movs	r3, #0
 8019324:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wActiveMode;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bTo;
    uint16_t    PH_MEMLOC_REM wDsi = 0;
 8019326:	2300      	movs	r3, #0
 8019328:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wDri;
    uint32_t    PH_MEMLOC_REM dwRwt;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 801932a:	2301      	movs	r3, #1
 801932c:	647b      	str	r3, [r7, #68]	@ 0x44

    wPreviousStatus = 0;
 801932e:	2300      	movs	r3, #0
 8019330:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    bRetryCount = 0;
 8019334:	2300      	movs	r3, #0
 8019336:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    /* Parameter check */
    if ((bDid > PHPAL_I18092MPI_DID_MAX) ||
 801933a:	79fb      	ldrb	r3, [r7, #7]
 801933c:	2b0e      	cmp	r3, #14
 801933e:	d806      	bhi.n	801934e <phpalI18092mPI_Sw_Atr+0x56>
 8019340:	79bb      	ldrb	r3, [r7, #6]
 8019342:	2b03      	cmp	r3, #3
 8019344:	d803      	bhi.n	801934e <phpalI18092mPI_Sw_Atr+0x56>
        (bLri > PHPAL_I18092MPI_FRAMESIZE_254) ||
 8019346:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 801934a:	2b30      	cmp	r3, #48	@ 0x30
 801934c:	d902      	bls.n	8019354 <phpalI18092mPI_Sw_Atr+0x5c>
        (bGiLength > PHPAL_I18092MPI_MAX_GI_LENGTH))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18092MPI);
 801934e:	f640 4321 	movw	r3, #3105	@ 0xc21
 8019352:	e29f      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	2200      	movs	r2, #0
 8019358:	721a      	strb	r2, [r3, #8]

    /* Set new DID */
    pDataParams->bDid = bDid;
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	79fa      	ldrb	r2, [r7, #7]
 801935e:	751a      	strb	r2, [r3, #20]

    /* Build up frame data. */
    (void)memcpy(aCmd, pNfcid3i, PHPAL_I18092MPI_NFCID3_LENGTH);
 8019360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019364:	220a      	movs	r2, #10
 8019366:	68b9      	ldr	r1, [r7, #8]
 8019368:	4618      	mov	r0, r3
 801936a:	f008 fcd8 	bl	8021d1e <memcpy>
    bCmdLen = PHPAL_I18092MPI_NFCID3_LENGTH;
 801936e:	230a      	movs	r3, #10
 8019370:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    aCmd[bCmdLen++] = bDid;
 8019374:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019378:	1c5a      	adds	r2, r3, #1
 801937a:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 801937e:	3350      	adds	r3, #80	@ 0x50
 8019380:	443b      	add	r3, r7
 8019382:	79fa      	ldrb	r2, [r7, #7]
 8019384:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Next two fields (BSi and BRi) only used for active mode, so set them to 0. */
    aCmd[bCmdLen++] = 0x00;
 8019388:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801938c:	1c5a      	adds	r2, r3, #1
 801938e:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8019392:	3350      	adds	r3, #80	@ 0x50
 8019394:	443b      	add	r3, r7
 8019396:	2200      	movs	r2, #0
 8019398:	f803 2c24 	strb.w	r2, [r3, #-36]
    aCmd[bCmdLen++] = 0x00;
 801939c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193a0:	1c5a      	adds	r2, r3, #1
 80193a2:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 80193a6:	3350      	adds	r3, #80	@ 0x50
 80193a8:	443b      	add	r3, r7
 80193aa:	2200      	movs	r2, #0
 80193ac:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Configure PPi field */
    aCmd[bCmdLen++] = (bLri << PHPAL_I18092MPI_SW_ATR_PPI_LRI_BIT);
 80193b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193b4:	1c5a      	adds	r2, r3, #1
 80193b6:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 80193ba:	4619      	mov	r1, r3
 80193bc:	79bb      	ldrb	r3, [r7, #6]
 80193be:	011b      	lsls	r3, r3, #4
 80193c0:	b2da      	uxtb	r2, r3
 80193c2:	f101 0350 	add.w	r3, r1, #80	@ 0x50
 80193c6:	443b      	add	r3, r7
 80193c8:	f803 2c24 	strb.w	r2, [r3, #-36]
    if (0U != (bNadEnabled))
 80193cc:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d010      	beq.n	80193f6 <phpalI18092mPI_Sw_Atr+0xfe>
    {
        aCmd[bCmdLen - 1U] |= 0x01U;
 80193d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193d8:	3b01      	subs	r3, #1
 80193da:	3350      	adds	r3, #80	@ 0x50
 80193dc:	443b      	add	r3, r7
 80193de:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80193e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193e6:	3b01      	subs	r3, #1
 80193e8:	f042 0201 	orr.w	r2, r2, #1
 80193ec:	b2d2      	uxtb	r2, r2
 80193ee:	3350      	adds	r3, #80	@ 0x50
 80193f0:	443b      	add	r3, r7
 80193f2:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get initial set data rate from HAL since NFC allows starting at different data rates. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wDsi));
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	685b      	ldr	r3, [r3, #4]
 80193fa:	f107 0216 	add.w	r2, r7, #22
 80193fe:	2109      	movs	r1, #9
 8019400:	4618      	mov	r0, r3
 8019402:	f7f7 fec3 	bl	801118c <phhalHw_Pn5180_GetConfig>
 8019406:	4603      	mov	r3, r0
 8019408:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801940c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019410:	2b00      	cmp	r3, #0
 8019412:	d002      	beq.n	801941a <phpalI18092mPI_Sw_Atr+0x122>
 8019414:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019418:	e23c      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDsi, &pDataParams->bDsi));
 801941a:	8afa      	ldrh	r2, [r7, #22]
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	331a      	adds	r3, #26
 8019420:	4619      	mov	r1, r3
 8019422:	4610      	mov	r0, r2
 8019424:	f000 fc5e 	bl	8019ce4 <phpalI18092mPI_Sw_ConvertDatarate>
 8019428:	4603      	mov	r3, r0
 801942a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801942e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019432:	2b00      	cmp	r3, #0
 8019434:	d002      	beq.n	801943c <phpalI18092mPI_Sw_Atr+0x144>
 8019436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801943a:	e22b      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, &wDri));
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	685b      	ldr	r3, [r3, #4]
 8019440:	f107 0214 	add.w	r2, r7, #20
 8019444:	210a      	movs	r1, #10
 8019446:	4618      	mov	r0, r3
 8019448:	f7f7 fea0 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801944c:	4603      	mov	r3, r0
 801944e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019452:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019456:	2b00      	cmp	r3, #0
 8019458:	d002      	beq.n	8019460 <phpalI18092mPI_Sw_Atr+0x168>
 801945a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801945e:	e219      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDri, &pDataParams->bDri));
 8019460:	8aba      	ldrh	r2, [r7, #20]
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	331b      	adds	r3, #27
 8019466:	4619      	mov	r1, r3
 8019468:	4610      	mov	r0, r2
 801946a:	f000 fc3b 	bl	8019ce4 <phpalI18092mPI_Sw_ConvertDatarate>
 801946e:	4603      	mov	r3, r0
 8019470:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019478:	2b00      	cmp	r3, #0
 801947a:	d002      	beq.n	8019482 <phpalI18092mPI_Sw_Atr+0x18a>
 801947c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019480:	e208      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>

    /* Configure HAL for handling StartByte in case Transmit datarate is 106kbps. */
    if (pDataParams->bDsi == PHHAL_HW_RF_DATARATE_106)
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	7e9b      	ldrb	r3, [r3, #26]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d110      	bne.n	80194ac <phpalI18092mPI_Sw_Atr+0x1b4>
    {
        /* Configure HAL for NFCIP to enable handling StartByte at 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_ON));
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	2201      	movs	r2, #1
 8019490:	215c      	movs	r1, #92	@ 0x5c
 8019492:	4618      	mov	r0, r3
 8019494:	f7f6 fa2c 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8019498:	4603      	mov	r3, r0
 801949a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801949e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d013      	beq.n	80194ce <phpalI18092mPI_Sw_Atr+0x1d6>
 80194a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194aa:	e1f3      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    }
    else
    {
        /* Disabled handling of StartByte if datarate is other than 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_OFF));
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	685b      	ldr	r3, [r3, #4]
 80194b0:	2200      	movs	r2, #0
 80194b2:	215c      	movs	r1, #92	@ 0x5c
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7f6 fa1b 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80194ba:	4603      	mov	r3, r0
 80194bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80194c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d002      	beq.n	80194ce <phpalI18092mPI_Sw_Atr+0x1d6>
 80194c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194cc:	e1e2      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	685b      	ldr	r3, [r3, #4]
 80194d2:	f240 523b 	movw	r2, #1339	@ 0x53b
 80194d6:	210e      	movs	r1, #14
 80194d8:	4618      	mov	r0, r3
 80194da:	f7f6 fa09 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80194de:	4603      	mov	r3, r0
 80194e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80194e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d002      	beq.n	80194f2 <phpalI18092mPI_Sw_Atr+0x1fa>
 80194ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194f0:	e1d0      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        PHPAL_I18092MPI_SW_RWT_ACTIVATION_MS + PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS));

    /* Reset response received flag */
    bResponseReceived = 0;
 80194f2:	2300      	movs	r3, #0
 80194f4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 80194f8:	2300      	movs	r3, #0
 80194fa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

        /* Write frame header. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams, PH_EXCHANGE_BUFFER_FIRST, PHPAL_I18092MPI_SW_CMD_ATR_REQ, (bCmdLen + bGiLength)));
 80194fe:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8019502:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8019506:	4413      	add	r3, r2
 8019508:	b2db      	uxtb	r3, r3
 801950a:	2200      	movs	r2, #0
 801950c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8019510:	68f8      	ldr	r0, [r7, #12]
 8019512:	f000 fab5 	bl	8019a80 <phpalI18092mPI_Sw_WriteFrameHeader>
 8019516:	4603      	mov	r3, r0
 8019518:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801951c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019520:	2b00      	cmp	r3, #0
 8019522:	d002      	beq.n	801952a <phpalI18092mPI_Sw_Atr+0x232>
 8019524:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019528:	e1b4      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>

        /* Append general bytes if present */
        if (bGiLength > 0U)
 801952a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 801952e:	2b00      	cmp	r3, #0
 8019530:	d03e      	beq.n	80195b0 <phpalI18092mPI_Sw_Atr+0x2b8>
        {
            /* Mark that general bytes are present */
            aCmd[bCmdLen - 1U] |= PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE;
 8019532:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019536:	3b01      	subs	r3, #1
 8019538:	3350      	adds	r3, #80	@ 0x50
 801953a:	443b      	add	r3, r7
 801953c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8019540:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019544:	3b01      	subs	r3, #1
 8019546:	f042 0202 	orr.w	r2, r2, #2
 801954a:	b2d2      	uxtb	r2, r2
 801954c:	3350      	adds	r3, #80	@ 0x50
 801954e:	443b      	add	r3, r7
 8019550:	f803 2c24 	strb.w	r2, [r3, #-36]

            /* Write data to internal buffer. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	6858      	ldr	r0, [r3, #4]
 8019558:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801955c:	b29b      	uxth	r3, r3
 801955e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8019562:	2100      	movs	r1, #0
 8019564:	9101      	str	r1, [sp, #4]
 8019566:	2100      	movs	r1, #0
 8019568:	9100      	str	r1, [sp, #0]
 801956a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 801956e:	f7f5 fe09 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8019572:	4603      	mov	r3, r0
 8019574:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019578:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801957c:	2b00      	cmp	r3, #0
 801957e:	d002      	beq.n	8019586 <phpalI18092mPI_Sw_Atr+0x28e>
 8019580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019584:	e186      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)bCmdLen,
                NULL,
                NULL));

            /* Write general bytes, transmit the whole buffer and receive response. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	6858      	ldr	r0, [r3, #4]
 801958a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 801958e:	b29a      	uxth	r2, r3
 8019590:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8019594:	9301      	str	r3, [sp, #4]
 8019596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801959a:	9300      	str	r3, [sp, #0]
 801959c:	4613      	mov	r3, r2
 801959e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80195a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80195a4:	f7f5 fdee 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80195a8:	4603      	mov	r3, r0
 80195aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80195ae:	e014      	b.n	80195da <phpalI18092mPI_Sw_Atr+0x2e2>
                &wResponseLength);
        }
        else
        {
            /* No additional general bytes to be sent so transmit the buffer now. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	6858      	ldr	r0, [r3, #4]
 80195b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80195b8:	b299      	uxth	r1, r3
 80195ba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80195be:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80195c2:	9301      	str	r3, [sp, #4]
 80195c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80195c8:	9300      	str	r3, [sp, #0]
 80195ca:	460b      	mov	r3, r1
 80195cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80195d0:	f7f5 fdd8 	bl	800f184 <phhalHw_Pn5180_Exchange>
 80195d4:	4603      	mov	r3, r0
 80195d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                &pResp,
                &wResponseLength);
        }

        /* Get the state of activation mode status either indication active/passive mode. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	685b      	ldr	r3, [r3, #4]
 80195de:	f107 0218 	add.w	r2, r7, #24
 80195e2:	2154      	movs	r1, #84	@ 0x54
 80195e4:	4618      	mov	r0, r3
 80195e6:	f7f7 fdd1 	bl	801118c <phhalHw_Pn5180_GetConfig>
 80195ea:	4603      	mov	r3, r0
 80195ec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80195f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d002      	beq.n	80195fe <phpalI18092mPI_Sw_Atr+0x306>
 80195f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80195fc:	e14a      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_ACTIVEMODE,
            &wActiveMode));
        pDataParams->bActiveMode = (uint8_t)wActiveMode;
 80195fe:	8b3b      	ldrh	r3, [r7, #24]
 8019600:	b2da      	uxtb	r2, r3
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	f883 2020 	strb.w	r2, [r3, #32]

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8019608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801960c:	b2db      	uxtb	r3, r3
 801960e:	2b00      	cmp	r3, #0
 8019610:	d102      	bne.n	8019618 <phpalI18092mPI_Sw_Atr+0x320>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 8019612:	2301      	movs	r3, #1
 8019614:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        }

        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8019618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801961c:	b2db      	uxtb	r3, r3
 801961e:	2b00      	cmp	r3, #0
 8019620:	f040 80d0 	bne.w	80197c4 <phpalI18092mPI_Sw_Atr+0x4cc>
        {
            /* Check for valid response frame and remove start byte if present. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 8019624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019626:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019628:	f107 031a 	add.w	r3, r7, #26
 801962c:	9303      	str	r3, [sp, #12]
 801962e:	f107 031c 	add.w	r3, r7, #28
 8019632:	9302      	str	r3, [sp, #8]
 8019634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019638:	9301      	str	r3, [sp, #4]
 801963a:	f107 0320 	add.w	r3, r7, #32
 801963e:	9300      	str	r3, [sp, #0]
 8019640:	2301      	movs	r3, #1
 8019642:	68f8      	ldr	r0, [r7, #12]
 8019644:	f000 fa60 	bl	8019b08 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 8019648:	4603      	mov	r3, r0
 801964a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801964e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019652:	2b00      	cmp	r3, #0
 8019654:	d002      	beq.n	801965c <phpalI18092mPI_Sw_Atr+0x364>
 8019656:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801965a:	e11b      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Ignore length byte */
            ++pFrame;
 801965c:	6a3b      	ldr	r3, [r7, #32]
 801965e:	3301      	adds	r3, #1
 8019660:	623b      	str	r3, [r7, #32]
            --wFrameLength;
 8019662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019664:	3b01      	subs	r3, #1
 8019666:	b29b      	uxth	r3, r3
 8019668:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Check for minimum and maximum frame size. NFCForum-TS-DigitalProtocol-1.0 section 14.6.1.3. */
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 801966a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801966c:	2b40      	cmp	r3, #64	@ 0x40
 801966e:	d802      	bhi.n	8019676 <phpalI18092mPI_Sw_Atr+0x37e>
                (wFrameLength < PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH))
 8019670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 8019672:	2b10      	cmp	r3, #16
 8019674:	d802      	bhi.n	801967c <phpalI18092mPI_Sw_Atr+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019676:	f640 4306 	movw	r3, #3078	@ 0xc06
 801967a:	e10b      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check Gt presence / absence */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE))
 801967c:	6a3b      	ldr	r3, [r7, #32]
 801967e:	3310      	adds	r3, #16
 8019680:	781b      	ldrb	r3, [r3, #0]
 8019682:	f003 0302 	and.w	r3, r3, #2
 8019686:	2b00      	cmp	r3, #0
 8019688:	d005      	beq.n	8019696 <phpalI18092mPI_Sw_Atr+0x39e>
            {
                /* Gt should be present */
                if (wFrameLength <= PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 801968a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801968c:	2b11      	cmp	r3, #17
 801968e:	d808      	bhi.n	80196a2 <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019690:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019694:	e0fe      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }
            else
            {
                /* Gt should be absent */
                if (wFrameLength > PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 8019696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019698:	2b11      	cmp	r3, #17
 801969a:	d902      	bls.n	80196a2 <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801969c:	f640 4306 	movw	r3, #3078	@ 0xc06
 80196a0:	e0f8      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }

            /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.2. */
            if (pFrame[PHPAL_I18092MPI_SW_ATR_RES_DID_POS] != bDid)
 80196a2:	6a3b      	ldr	r3, [r7, #32]
 80196a4:	330c      	adds	r3, #12
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	79fa      	ldrb	r2, [r7, #7]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d002      	beq.n	80196b4 <phpalI18092mPI_Sw_Atr+0x3bc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80196ae:	f640 4306 	movw	r3, #3078	@ 0xc06
 80196b2:	e0ef      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check NadUsed bit */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_NAD_USED))
 80196b4:	6a3b      	ldr	r3, [r7, #32]
 80196b6:	3310      	adds	r3, #16
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	f003 0301 	and.w	r3, r3, #1
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d00e      	beq.n	80196e0 <phpalI18092mPI_Sw_Atr+0x3e8>
            {
                /* Protocol error if NAD use is requested to be disabled */
                if (bNadEnabled == PH_OFF)
 80196c2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d102      	bne.n	80196d0 <phpalI18092mPI_Sw_Atr+0x3d8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80196ca:	f640 4306 	movw	r3, #3078	@ 0xc06
 80196ce:	e0e1      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                }

                pDataParams->bNad = bNad;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80196d6:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_ON;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	2201      	movs	r2, #1
 80196dc:	755a      	strb	r2, [r3, #21]
 80196de:	e005      	b.n	80196ec <phpalI18092mPI_Sw_Atr+0x3f4>
            }
            else
            {
                pDataParams->bNad = 0x00;
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	2200      	movs	r2, #0
 80196e4:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_OFF;
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	2200      	movs	r2, #0
 80196ea:	755a      	strb	r2, [r3, #21]
            }

            /* Copy ATR_RES to response buffer. */
            (void)memcpy(pAtrRes, pFrame, wFrameLength);
 80196ec:	6a3b      	ldr	r3, [r7, #32]
 80196ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80196f0:	4619      	mov	r1, r3
 80196f2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80196f4:	f008 fb13 	bl	8021d1e <memcpy>
            *pAtrResLength = (uint8_t)wFrameLength;
 80196f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80196fa:	b2da      	uxtb	r2, r3
 80196fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80196fe:	701a      	strb	r2, [r3, #0]

            /* Update LRi */
            pDataParams->bLri = bLri;
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	79ba      	ldrb	r2, [r7, #6]
 8019704:	771a      	strb	r2, [r3, #28]

            /* Retrieve TO */
            bTo = pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_TO_POS] & 0xFU;
 8019706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019708:	330f      	adds	r3, #15
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	f003 030f 	and.w	r3, r3, #15
 8019710:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

            /* Adjust timeout field if necessary. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.8. */
            if (bTo > PHPAL_I18092MPI_WT_MAX)
 8019714:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019718:	2b0e      	cmp	r3, #14
 801971a:	d902      	bls.n	8019722 <phpalI18092mPI_Sw_Atr+0x42a>
            {
                bTo = PHPAL_I18092MPI_WT_MAX;
 801971c:	230e      	movs	r3, #14
 801971e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            }

            /* Parse the response to see what frame size the target supports. */
            pDataParams->bLrt = (pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] >> 4U) & 0x3U;
 8019722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019724:	3310      	adds	r3, #16
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	091b      	lsrs	r3, r3, #4
 801972a:	b2db      	uxtb	r3, r3
 801972c:	f003 0303 	and.w	r3, r3, #3
 8019730:	b2da      	uxtb	r2, r3
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	775a      	strb	r2, [r3, #29]

            /* Set FSL to the lowest frame size (lowest of LRi and LRt) */
            pDataParams->bFsl = (pDataParams->bLrt < pDataParams->bLri) ? pDataParams->bLrt : pDataParams->bLri;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	7f1a      	ldrb	r2, [r3, #28]
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	7f5b      	ldrb	r3, [r3, #29]
 801973e:	4293      	cmp	r3, r2
 8019740:	bf28      	it	cs
 8019742:	4613      	movcs	r3, r2
 8019744:	b2da      	uxtb	r2, r3
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	761a      	strb	r2, [r3, #24]

            /* Store TO */
            pDataParams->bWt = bTo;
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8019750:	75da      	strb	r2, [r3, #23]

            /* NfcID is now valid */
            pDataParams->bNfcIdValid = PH_ON;
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	2201      	movs	r2, #1
 8019756:	721a      	strb	r2, [r3, #8]
            (void)memcpy(pDataParams->aNfcid3i, &pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_NFCID3_POS], PHPAL_I18092MPI_NFCID3_LENGTH);
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	f103 0009 	add.w	r0, r3, #9
 801975e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019760:	3302      	adds	r3, #2
 8019762:	220a      	movs	r2, #10
 8019764:	4619      	mov	r1, r3
 8019766:	f008 fada 	bl	8021d1e <memcpy>

            /* Calculate Response Waiting Time. */
            dwShift = 1U;
 801976a:	2301      	movs	r3, #1
 801976c:	647b      	str	r3, [r7, #68]	@ 0x44
            dwRwt = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((dwShift << bTo)));
 801976e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019774:	fa02 f303 	lsl.w	r3, r2, r3
 8019778:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801977c:	fb02 f303 	mul.w	r3, r2, r3
 8019780:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 8019782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019784:	3302      	adds	r3, #2
 8019786:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt /= 1000U;
 8019788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801978a:	4a44      	ldr	r2, [pc, #272]	@ (801989c <phpalI18092mPI_Sw_Atr+0x5a4>)
 801978c:	fba2 2303 	umull	r2, r3, r2, r3
 8019790:	099b      	lsrs	r3, r3, #6
 8019792:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += 1U;
 8019794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019796:	3301      	adds	r3, #1
 8019798:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 801979a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801979c:	3364      	adds	r3, #100	@ 0x64
 801979e:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Set Response Waiting Time. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80197a6:	b292      	uxth	r2, r2
 80197a8:	210e      	movs	r1, #14
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7f6 f8a0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 80197b0:	4603      	mov	r3, r0
 80197b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80197b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d058      	beq.n	8019870 <phpalI18092mPI_Sw_Atr+0x578>
 80197be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80197c2:	e067      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)dwRwt));
        }
        else
        {
            /* If HAL returned Integrity Error first time then save and return this status at the end of Retry. */
            if (((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) && (bRetryCount == 0U))
 80197c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80197c8:	b2db      	uxtb	r3, r3
 80197ca:	2b02      	cmp	r3, #2
 80197cc:	d107      	bne.n	80197de <phpalI18092mPI_Sw_Atr+0x4e6>
 80197ce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d103      	bne.n	80197de <phpalI18092mPI_Sw_Atr+0x4e6>
            {
                wPreviousStatus = status;
 80197d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80197da:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            }

            /* Retransmit in case of timeout or receive error, ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
            if (0u != (PHPAL_I18092MPI_SW_IS_INVALID_BLOCK_STATUS(status)))
 80197de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	d00e      	beq.n	8019806 <phpalI18092mPI_Sw_Atr+0x50e>
 80197e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	2b02      	cmp	r3, #2
 80197f0:	d009      	beq.n	8019806 <phpalI18092mPI_Sw_Atr+0x50e>
 80197f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80197f6:	b2db      	uxtb	r3, r3
 80197f8:	2b05      	cmp	r3, #5
 80197fa:	d004      	beq.n	8019806 <phpalI18092mPI_Sw_Atr+0x50e>
 80197fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019800:	b2db      	uxtb	r3, r3
 8019802:	2b03      	cmp	r3, #3
 8019804:	d134      	bne.n	8019870 <phpalI18092mPI_Sw_Atr+0x578>
            {
                /* Check if we shall perform another retry. */
                if (bRetryCount < pDataParams->bMaxRetryCount)
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	7f9b      	ldrb	r3, [r3, #30]
 801980a:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 801980e:	429a      	cmp	r2, r3
 8019810:	d21b      	bcs.n	801984a <phpalI18092mPI_Sw_Atr+0x552>
                {
                    ++bRetryCount;
 8019812:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8019816:	3301      	adds	r3, #1
 8019818:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    bRetry = PH_ON;
 801981c:	2301      	movs	r3, #1
 801981e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

                    if (wActiveMode == PH_ON)
 8019822:	8b3b      	ldrh	r3, [r7, #24]
 8019824:	2b01      	cmp	r3, #1
 8019826:	d123      	bne.n	8019870 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        /* Wait for T_IRFG (Initial RF guard time) before ATR retry. */
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	685b      	ldr	r3, [r3, #4]
 801982c:	2205      	movs	r2, #5
 801982e:	2101      	movs	r1, #1
 8019830:	4618      	mov	r0, r3
 8019832:	f7f5 ffa3 	bl	800f77c <phhalHw_Pn5180_Wait>
 8019836:	4603      	mov	r3, r0
 8019838:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801983c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019840:	2b00      	cmp	r3, #0
 8019842:	d015      	beq.n	8019870 <phpalI18092mPI_Sw_Atr+0x578>
 8019844:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019848:	e024      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
                    }
                }
                else
                {
                    /* Deselect target ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
                    statusTmp = phpalI18092mPI_Sw_Deselect(pDataParams, PHPAL_I18092MPI_DESELECT_RLS);
 801984a:	210a      	movs	r1, #10
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f000 f827 	bl	80198a0 <phpalI18092mPI_Sw_Deselect>
 8019852:	4603      	mov	r3, r0
 8019854:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

                    /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                    if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	7f9b      	ldrb	r3, [r3, #30]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d007      	beq.n	8019870 <phpalI18092mPI_Sw_Atr+0x578>
 8019860:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8019864:	2b00      	cmp	r3, #0
 8019866:	d003      	beq.n	8019870 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 8019868:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 801986c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 8019870:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019874:	2b00      	cmp	r3, #0
 8019876:	f47f ae3f 	bne.w	80194f8 <phpalI18092mPI_Sw_Atr+0x200>

    if ((wPreviousStatus != 0U) && (status != PH_ERR_SUCCESS))
 801987a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801987e:	2b00      	cmp	r3, #0
 8019880:	d006      	beq.n	8019890 <phpalI18092mPI_Sw_Atr+0x598>
 8019882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019886:	2b00      	cmp	r3, #0
 8019888:	d002      	beq.n	8019890 <phpalI18092mPI_Sw_Atr+0x598>
    {
        return wPreviousStatus;
 801988a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801988e:	e001      	b.n	8019894 <phpalI18092mPI_Sw_Atr+0x59c>
    }
    return status;
 8019890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
}
 8019894:	4618      	mov	r0, r3
 8019896:	3750      	adds	r7, #80	@ 0x50
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}
 801989c:	10624dd3 	.word	0x10624dd3

080198a0 <phpalI18092mPI_Sw_Deselect>:

phStatus_t phpalI18092mPI_Sw_Deselect(
                                      phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                      uint8_t bDeselectCommand
                                      )
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b092      	sub	sp, #72	@ 0x48
 80198a4:	af04      	add	r7, sp, #16
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	460b      	mov	r3, r1
 80198aa:	70fb      	strb	r3, [r7, #3]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t     PH_MEMLOC_REM bCmdLen = 0;
 80198ac:	2300      	movs	r3, #0
 80198ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM bExpectedResponse;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80198b2:	2300      	movs	r3, #0
 80198b4:	623b      	str	r3, [r7, #32]
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 80198b6:	2300      	movs	r3, #0
 80198b8:	83fb      	strh	r3, [r7, #30]
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 80198ba:	2300      	movs	r3, #0
 80198bc:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 80198be:	2300      	movs	r3, #0
 80198c0:	82fb      	strh	r3, [r7, #22]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 80198c2:	2300      	movs	r3, #0
 80198c4:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 80198c6:	2300      	movs	r3, #0
 80198c8:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_COUNT bRetryCount = 0;
 80198ca:	2300      	movs	r3, #0
 80198cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 80198d0:	2301      	movs	r3, #1
 80198d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2200      	movs	r2, #0
 80198d8:	721a      	strb	r2, [r3, #8]

    /* Calculate Response Waiting Time. */
    dwShift = 1U;
 80198da:	2301      	movs	r3, #1
 80198dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dwTimeout = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((uint32_t)(dwShift << pDataParams->bWt)));
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	7ddb      	ldrb	r3, [r3, #23]
 80198e2:	461a      	mov	r2, r3
 80198e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198e6:	4093      	lsls	r3, r2
 80198e8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80198ec:	fb02 f303 	mul.w	r3, r2, r3
 80198f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 80198f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198f4:	3302      	adds	r3, #2
 80198f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout /= 1000U;
 80198f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198fa:	4a60      	ldr	r2, [pc, #384]	@ (8019a7c <phpalI18092mPI_Sw_Deselect+0x1dc>)
 80198fc:	fba2 2303 	umull	r2, r3, r2, r3
 8019900:	099b      	lsrs	r3, r3, #6
 8019902:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += 1U;
 8019904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019906:	3301      	adds	r3, #1
 8019908:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 801990a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801990c:	3364      	adds	r3, #100	@ 0x64
 801990e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Set Response Waiting Time as per NFCForum-TS-DigitalProtocol-1.1 section 16.11.2.3. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	685b      	ldr	r3, [r3, #4]
 8019914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019916:	b292      	uxth	r2, r2
 8019918:	210e      	movs	r1, #14
 801991a:	4618      	mov	r0, r3
 801991c:	f7f5 ffe8 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 8019920:	4603      	mov	r3, r0
 8019922:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019924:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019926:	2b00      	cmp	r3, #0
 8019928:	d001      	beq.n	801992e <phpalI18092mPI_Sw_Deselect+0x8e>
 801992a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801992c:	e0a1      	b.n	8019a72 <phpalI18092mPI_Sw_Deselect+0x1d2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        (uint16_t)dwTimeout));

    /* Append DID if enabled */
    if (pDataParams->bDid > 0U)
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	7d1b      	ldrb	r3, [r3, #20]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d00c      	beq.n	8019950 <phpalI18092mPI_Sw_Deselect+0xb0>
    {
        aCmd[bCmdLen++] = pDataParams->bDid;
 8019936:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801993a:	1c5a      	adds	r2, r3, #1
 801993c:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8019940:	4619      	mov	r1, r3
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	7d1a      	ldrb	r2, [r3, #20]
 8019946:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801994a:	443b      	add	r3, r7
 801994c:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    /* Reset response received flag */
    bResponseReceived = 0;
 8019950:	2300      	movs	r3, #0
 8019952:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 8019956:	2300      	movs	r3, #0
 8019958:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

        /* Write frame header and update length field. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams,PH_EXCHANGE_BUFFER_FIRST, bDeselectCommand, bCmdLen));
 801995c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8019960:	78fa      	ldrb	r2, [r7, #3]
 8019962:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8019966:	6878      	ldr	r0, [r7, #4]
 8019968:	f000 f88a 	bl	8019a80 <phpalI18092mPI_Sw_WriteFrameHeader>
 801996c:	4603      	mov	r3, r0
 801996e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019970:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019972:	2b00      	cmp	r3, #0
 8019974:	d001      	beq.n	801997a <phpalI18092mPI_Sw_Deselect+0xda>
 8019976:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019978:	e07b      	b.n	8019a72 <phpalI18092mPI_Sw_Deselect+0x1d2>

        /* Start transmission. */
        status = phhalHw_Exchange(pDataParams->pHalDataParams,
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	6858      	ldr	r0, [r3, #4]
 801997e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8019982:	b299      	uxth	r1, r3
 8019984:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8019988:	f107 031e 	add.w	r3, r7, #30
 801998c:	9301      	str	r3, [sp, #4]
 801998e:	f107 0320 	add.w	r3, r7, #32
 8019992:	9300      	str	r3, [sp, #0]
 8019994:	460b      	mov	r3, r1
 8019996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801999a:	f7f5 fbf3 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801999e:	4603      	mov	r3, r0
 80199a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)bCmdLen,
            &pResp,
            &wResponseLength);

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80199a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80199a4:	b2db      	uxtb	r3, r3
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d102      	bne.n	80199b0 <phpalI18092mPI_Sw_Deselect+0x110>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 80199aa:	2301      	movs	r3, #1
 80199ac:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80199b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80199b2:	b2db      	uxtb	r3, r3
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d13c      	bne.n	8019a32 <phpalI18092mPI_Sw_Deselect+0x192>
        {
            if (bDeselectCommand == PHPAL_I18092MPI_DESELECT_DSL)
 80199b8:	78fb      	ldrb	r3, [r7, #3]
 80199ba:	2b08      	cmp	r3, #8
 80199bc:	d103      	bne.n	80199c6 <phpalI18092mPI_Sw_Deselect+0x126>
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_DSL_RES;
 80199be:	2309      	movs	r3, #9
 80199c0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80199c4:	e002      	b.n	80199cc <phpalI18092mPI_Sw_Deselect+0x12c>
            }
            else
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_RLS_RES;
 80199c6:	230b      	movs	r3, #11
 80199c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            }

            /* Check for valid response frame. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 80199cc:	6a39      	ldr	r1, [r7, #32]
 80199ce:	8bfa      	ldrh	r2, [r7, #30]
 80199d0:	f897 0034 	ldrb.w	r0, [r7, #52]	@ 0x34
 80199d4:	f107 030e 	add.w	r3, r7, #14
 80199d8:	9303      	str	r3, [sp, #12]
 80199da:	f107 0310 	add.w	r3, r7, #16
 80199de:	9302      	str	r3, [sp, #8]
 80199e0:	f107 0316 	add.w	r3, r7, #22
 80199e4:	9301      	str	r3, [sp, #4]
 80199e6:	f107 0318 	add.w	r3, r7, #24
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	4603      	mov	r3, r0
 80199ee:	6878      	ldr	r0, [r7, #4]
 80199f0:	f000 f88a 	bl	8019b08 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 80199f4:	4603      	mov	r3, r0
 80199f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80199f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d001      	beq.n	8019a02 <phpalI18092mPI_Sw_Deselect+0x162>
 80199fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019a00:	e037      	b.n	8019a72 <phpalI18092mPI_Sw_Deselect+0x1d2>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Check DID */
            if (pDataParams->bDid > 0U)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	7d1b      	ldrb	r3, [r3, #20]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d00c      	beq.n	8019a24 <phpalI18092mPI_Sw_Deselect+0x184>
            {
                /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if ((wPayloadLength != 1U) || (pPayload[0] != pDataParams->bDid))
 8019a0a:	89fb      	ldrh	r3, [r7, #14]
 8019a0c:	2b01      	cmp	r3, #1
 8019a0e:	d105      	bne.n	8019a1c <phpalI18092mPI_Sw_Deselect+0x17c>
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	781a      	ldrb	r2, [r3, #0]
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	7d1b      	ldrb	r3, [r3, #20]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d024      	beq.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019a1c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019a20:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8019a22:	e020      	b.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
                }
            }
            else
            {
                /* DID must not be present in response. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if (wPayloadLength != 0U)
 8019a24:	89fb      	ldrh	r3, [r7, #14]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d01d      	beq.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019a2a:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019a2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8019a30:	e019      	b.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
        }
        else
        {
            /* Check if we shall perform a(nother) retry. */
            if (bRetryCount < pDataParams->bMaxRetryCount)
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	7f9b      	ldrb	r3, [r3, #30]
 8019a36:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d208      	bcs.n	8019a50 <phpalI18092mPI_Sw_Deselect+0x1b0>
            {
                ++bRetryCount;
 8019a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019a42:	3301      	adds	r3, #1
 8019a44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                bRetry = PH_ON;
 8019a48:	2301      	movs	r3, #1
 8019a4a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8019a4e:	e00a      	b.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
            else
            {
                /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	7f9b      	ldrb	r3, [r3, #30]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d006      	beq.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
 8019a58:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d002      	beq.n	8019a66 <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 8019a60:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8019a64:	86fb      	strh	r3, [r7, #54]	@ 0x36
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 8019a66:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	f47f af73 	bne.w	8019956 <phpalI18092mPI_Sw_Deselect+0xb6>

    return status;
 8019a70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8019a72:	4618      	mov	r0, r3
 8019a74:	3738      	adds	r7, #56	@ 0x38
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bd80      	pop	{r7, pc}
 8019a7a:	bf00      	nop
 8019a7c:	10624dd3 	.word	0x10624dd3

08019a80 <phpalI18092mPI_Sw_WriteFrameHeader>:
        phpalI18092mPI_Sw_DataParams_t * pDataParams,
        uint16_t wOption,
        uint8_t bCommandCode,
        uint8_t bDataLength
)
{
 8019a80:	b590      	push	{r4, r7, lr}
 8019a82:	b087      	sub	sp, #28
 8019a84:	af02      	add	r7, sp, #8
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	4608      	mov	r0, r1
 8019a8a:	4611      	mov	r1, r2
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	4603      	mov	r3, r0
 8019a90:	807b      	strh	r3, [r7, #2]
 8019a92:	460b      	mov	r3, r1
 8019a94:	707b      	strb	r3, [r7, #1]
 8019a96:	4613      	mov	r3, r2
 8019a98:	703b      	strb	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM aHeader[4];
    uint8_t     PH_MEMLOC_REM bLength = 0;
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	73fb      	strb	r3, [r7, #15]

    /* Set LEN byte (includes the length itself). */
    aHeader[bLength++] = bDataLength + 3U;
 8019a9e:	7bfb      	ldrb	r3, [r7, #15]
 8019aa0:	1c5a      	adds	r2, r3, #1
 8019aa2:	73fa      	strb	r2, [r7, #15]
 8019aa4:	4619      	mov	r1, r3
 8019aa6:	783b      	ldrb	r3, [r7, #0]
 8019aa8:	3303      	adds	r3, #3
 8019aaa:	b2da      	uxtb	r2, r3
 8019aac:	f101 0310 	add.w	r3, r1, #16
 8019ab0:	443b      	add	r3, r7
 8019ab2:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Only NFC initiator mode is supported so only requests are sent. */
    aHeader[bLength++] = PHPAL_I18092MPI_SW_CMD_REQUEST;
 8019ab6:	7bfb      	ldrb	r3, [r7, #15]
 8019ab8:	1c5a      	adds	r2, r3, #1
 8019aba:	73fa      	strb	r2, [r7, #15]
 8019abc:	3310      	adds	r3, #16
 8019abe:	443b      	add	r3, r7
 8019ac0:	22d4      	movs	r2, #212	@ 0xd4
 8019ac2:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Set the command code. */
    aHeader[bLength++] = bCommandCode;
 8019ac6:	7bfb      	ldrb	r3, [r7, #15]
 8019ac8:	1c5a      	adds	r2, r3, #1
 8019aca:	73fa      	strb	r2, [r7, #15]
 8019acc:	3310      	adds	r3, #16
 8019ace:	443b      	add	r3, r7
 8019ad0:	787a      	ldrb	r2, [r7, #1]
 8019ad2:	f803 2c08 	strb.w	r2, [r3, #-8]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Exchange(
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	6858      	ldr	r0, [r3, #4]
 8019ada:	7bfb      	ldrb	r3, [r7, #15]
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	f107 0208 	add.w	r2, r7, #8
 8019ae2:	8879      	ldrh	r1, [r7, #2]
 8019ae4:	2400      	movs	r4, #0
 8019ae6:	9401      	str	r4, [sp, #4]
 8019ae8:	2400      	movs	r4, #0
 8019aea:	9400      	str	r4, [sp, #0]
 8019aec:	f7f5 fb4a 	bl	800f184 <phhalHw_Pn5180_Exchange>
 8019af0:	4603      	mov	r3, r0
 8019af2:	81bb      	strh	r3, [r7, #12]
 8019af4:	89bb      	ldrh	r3, [r7, #12]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d001      	beq.n	8019afe <phpalI18092mPI_Sw_WriteFrameHeader+0x7e>
 8019afa:	89bb      	ldrh	r3, [r7, #12]
 8019afc:	e000      	b.n	8019b00 <phpalI18092mPI_Sw_WriteFrameHeader+0x80>
        aHeader,
        (uint16_t)bLength,
        NULL,
        NULL));

    return PH_ERR_SUCCESS;
 8019afe:	2300      	movs	r3, #0
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3714      	adds	r7, #20
 8019b04:	46bd      	mov	sp, r7
 8019b06:	bd90      	pop	{r4, r7, pc}

08019b08 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>:
    uint8_t ** ppValidatedFrame,
    uint16_t * pValidatedFrameLength,
    uint8_t ** ppPayload,
    uint16_t * pPayloadLength
    )
{
 8019b08:	b480      	push	{r7}
 8019b0a:	b087      	sub	sp, #28
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	60f8      	str	r0, [r7, #12]
 8019b10:	60b9      	str	r1, [r7, #8]
 8019b12:	4611      	mov	r1, r2
 8019b14:	461a      	mov	r2, r3
 8019b16:	460b      	mov	r3, r1
 8019b18:	80fb      	strh	r3, [r7, #6]
 8019b1a:	4613      	mov	r3, r2
 8019b1c:	717b      	strb	r3, [r7, #5]
    phStatus_t  PH_MEMLOC_REM bOffset = 0;
 8019b1e:	2300      	movs	r3, #0
 8019b20:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bPfb;

    /* Check maximum frame length */
    if (wFrameLength > aI18092_mPI_FsTable[pDataParams->bLri])
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	7f1b      	ldrb	r3, [r3, #28]
 8019b26:	461a      	mov	r2, r3
 8019b28:	4b6d      	ldr	r3, [pc, #436]	@ (8019ce0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1d8>)
 8019b2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019b2e:	88fa      	ldrh	r2, [r7, #6]
 8019b30:	429a      	cmp	r2, r3
 8019b32:	d902      	bls.n	8019b3a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x32>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019b34:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019b38:	e0cb      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check minimum frame length */
    if (wFrameLength < PHPAL_I18092MPI_SW_MIN_FRAMESIZE)
 8019b3a:	88fb      	ldrh	r3, [r7, #6]
 8019b3c:	2b02      	cmp	r3, #2
 8019b3e:	d802      	bhi.n	8019b46 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x3e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019b40:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019b44:	e0c5      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Remove Startbyte if present */
    *ppValidatedFrame = &pFrame[bOffset];
 8019b46:	8afb      	ldrh	r3, [r7, #22]
 8019b48:	68ba      	ldr	r2, [r7, #8]
 8019b4a:	441a      	add	r2, r3
 8019b4c:	6a3b      	ldr	r3, [r7, #32]
 8019b4e:	601a      	str	r2, [r3, #0]
    *pValidatedFrameLength = wFrameLength - (uint16_t)bOffset;
 8019b50:	88fa      	ldrh	r2, [r7, #6]
 8019b52:	8afb      	ldrh	r3, [r7, #22]
 8019b54:	1ad3      	subs	r3, r2, r3
 8019b56:	b29a      	uxth	r2, r3
 8019b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b5a:	801a      	strh	r2, [r3, #0]

    /* Compare length field with frame length. */
    if (pFrame[bOffset++] != (uint8_t)*pValidatedFrameLength)
 8019b5c:	8afb      	ldrh	r3, [r7, #22]
 8019b5e:	1c5a      	adds	r2, r3, #1
 8019b60:	82fa      	strh	r2, [r7, #22]
 8019b62:	461a      	mov	r2, r3
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	4413      	add	r3, r2
 8019b68:	781a      	ldrb	r2, [r3, #0]
 8019b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b6c:	881b      	ldrh	r3, [r3, #0]
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d002      	beq.n	8019b7a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019b74:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019b78:	e0ab      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if the received frame is a reponse frame. */
    if (pFrame[bOffset++] != PHPAL_I18092MPI_SW_CMD_RESPONSE)
 8019b7a:	8afb      	ldrh	r3, [r7, #22]
 8019b7c:	1c5a      	adds	r2, r3, #1
 8019b7e:	82fa      	strh	r2, [r7, #22]
 8019b80:	461a      	mov	r2, r3
 8019b82:	68bb      	ldr	r3, [r7, #8]
 8019b84:	4413      	add	r3, r2
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	2bd5      	cmp	r3, #213	@ 0xd5
 8019b8a:	d002      	beq.n	8019b92 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x8a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019b8c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019b90:	e09f      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if expected response code matches the received response code. */
    if (pFrame[bOffset++] != bExpectedResponseCode)
 8019b92:	8afb      	ldrh	r3, [r7, #22]
 8019b94:	1c5a      	adds	r2, r3, #1
 8019b96:	82fa      	strh	r2, [r7, #22]
 8019b98:	461a      	mov	r2, r3
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	4413      	add	r3, r2
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	797a      	ldrb	r2, [r7, #5]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d002      	beq.n	8019bac <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xa4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019ba6:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019baa:	e092      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* In case the response is a DEP PDU also check for presence of DID, NAD and PNI. */
    if (bExpectedResponseCode == PHPAL_I18092MPI_SW_CMD_DEP_RES)
 8019bac:	797b      	ldrb	r3, [r7, #5]
 8019bae:	2b07      	cmp	r3, #7
 8019bb0:	f040 8083 	bne.w	8019cba <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
    {
        /* PFB should be present in frame. */
        if (wFrameLength < (bOffset + /* */ 1U))
 8019bb4:	88fa      	ldrh	r2, [r7, #6]
 8019bb6:	8afb      	ldrh	r3, [r7, #22]
 8019bb8:	3301      	adds	r3, #1
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d202      	bcs.n	8019bc4 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xbc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019bbe:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019bc2:	e086      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }

        /* Retrieve PFB */
        bPfb = pFrame[bOffset++];
 8019bc4:	8afb      	ldrh	r3, [r7, #22]
 8019bc6:	1c5a      	adds	r2, r3, #1
 8019bc8:	82fa      	strh	r2, [r7, #22]
 8019bca:	461a      	mov	r2, r3
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	4413      	add	r3, r2
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	757b      	strb	r3, [r7, #21]

        /* DID enabled */
        if (pDataParams->bDid > 0U)
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	7d1b      	ldrb	r3, [r3, #20]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d01d      	beq.n	8019c18 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x110>
        {
            /* DID presence should be indicated. */
            if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))))
 8019bdc:	7d7b      	ldrb	r3, [r7, #21]
 8019bde:	f003 0304 	and.w	r3, r3, #4
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d102      	bne.n	8019bec <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019be6:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019bea:	e072      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should be present in frame. */
            if (wFrameLength < (bOffset + /* */ 1U))
 8019bec:	88fa      	ldrh	r2, [r7, #6]
 8019bee:	8afb      	ldrh	r3, [r7, #22]
 8019bf0:	3301      	adds	r3, #1
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d202      	bcs.n	8019bfc <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xf4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019bf6:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019bfa:	e06a      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should match. */
            if (pFrame[bOffset++] != pDataParams->bDid)
 8019bfc:	8afb      	ldrh	r3, [r7, #22]
 8019bfe:	1c5a      	adds	r2, r3, #1
 8019c00:	82fa      	strh	r2, [r7, #22]
 8019c02:	461a      	mov	r2, r3
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	4413      	add	r3, r2
 8019c08:	781a      	ldrb	r2, [r3, #0]
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	7d1b      	ldrb	r3, [r3, #20]
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d00a      	beq.n	8019c28 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019c12:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019c16:	e05c      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }
        /* DID disabled */
        else
        {
            /* DID presence should not be indicated. */
            if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))
 8019c18:	7d7b      	ldrb	r3, [r7, #21]
 8019c1a:	f003 0304 	and.w	r3, r3, #4
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d002      	beq.n	8019c28 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019c22:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019c26:	e054      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
        }

        /* Check NAD only for first PDU frames. */
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	7cdb      	ldrb	r3, [r3, #19]
 8019c2c:	f003 0320 	and.w	r3, r3, #32
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d12e      	bne.n	8019c92 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
            (0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_LAST_BIT))))
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	7cdb      	ldrb	r3, [r3, #19]
 8019c38:	b25b      	sxtb	r3, r3
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	db29      	blt.n	8019c92 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
        {
            /* NAD enabled */
            if (0U != (pDataParams->bNadEnabled))
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	7d5b      	ldrb	r3, [r3, #21]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d01d      	beq.n	8019c82 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x17a>
            {
                /* NAD presence should be indicated. */
                if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))))
 8019c46:	7d7b      	ldrb	r3, [r7, #21]
 8019c48:	f003 0308 	and.w	r3, r3, #8
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d102      	bne.n	8019c56 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x14e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019c50:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019c54:	e03d      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should be present in frame. */
                if (wFrameLength < (bOffset + /* */ 1U))
 8019c56:	88fa      	ldrh	r2, [r7, #6]
 8019c58:	8afb      	ldrh	r3, [r7, #22]
 8019c5a:	3301      	adds	r3, #1
 8019c5c:	429a      	cmp	r2, r3
 8019c5e:	d202      	bcs.n	8019c66 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x15e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019c60:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019c64:	e035      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should match. */
                if (pFrame[bOffset++] != pDataParams->bNad)
 8019c66:	8afb      	ldrh	r3, [r7, #22]
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	82fa      	strh	r2, [r7, #22]
 8019c6c:	461a      	mov	r2, r3
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	4413      	add	r3, r2
 8019c72:	781a      	ldrb	r2, [r3, #0]
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	7d9b      	ldrb	r3, [r3, #22]
 8019c78:	429a      	cmp	r2, r3
 8019c7a:	d00a      	beq.n	8019c92 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019c7c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019c80:	e027      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* NAD disabled */
            else
            {
                /* NAD presence should not be indicated. */
                if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))
 8019c82:	7d7b      	ldrb	r3, [r7, #21]
 8019c84:	f003 0308 	and.w	r3, r3, #8
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d002      	beq.n	8019c92 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019c8c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019c90:	e01f      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
            }
        }

        /* For information or ACK PDU also check for PNI. */
        switch (bPfb & PHPAL_I18092MPI_SW_PFB_PDU_TYPE_MASK)
 8019c92:	7d7b      	ldrb	r3, [r7, #21]
 8019c94:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d001      	beq.n	8019ca0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x198>
 8019c9c:	2b40      	cmp	r3, #64	@ 0x40
 8019c9e:	d109      	bne.n	8019cb4 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ac>
        {
        case PHPAL_I18092MPI_SW_PFB_INFORMATION_PDU_MASK:
        case PHPAL_I18092MPI_SW_PFB_ACK_PDU_MASK:
            if ((bPfb & PHPAL_I18092MPI_SW_PFB_PNI_MASK) != pDataParams->bPni)
 8019ca0:	7d7b      	ldrb	r3, [r7, #21]
 8019ca2:	f003 0303 	and.w	r3, r3, #3
 8019ca6:	68fa      	ldr	r2, [r7, #12]
 8019ca8:	7e52      	ldrb	r2, [r2, #25]
 8019caa:	4293      	cmp	r3, r2
 8019cac:	d004      	beq.n	8019cb8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019cae:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019cb2:	e00e      	b.n	8019cd2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            break;

        default:
            /* nothing. */
            break;
 8019cb4:	bf00      	nop
 8019cb6:	e000      	b.n	8019cba <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
            break;
 8019cb8:	bf00      	nop
        }
    }

    /* Return Payload. */
    *ppPayload = &pFrame[bOffset];
 8019cba:	8afb      	ldrh	r3, [r7, #22]
 8019cbc:	68ba      	ldr	r2, [r7, #8]
 8019cbe:	441a      	add	r2, r3
 8019cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cc2:	601a      	str	r2, [r3, #0]
    *pPayloadLength = wFrameLength - bOffset;
 8019cc4:	88fa      	ldrh	r2, [r7, #6]
 8019cc6:	8afb      	ldrh	r3, [r7, #22]
 8019cc8:	1ad3      	subs	r3, r2, r3
 8019cca:	b29a      	uxth	r2, r3
 8019ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cce:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8019cd0:	2300      	movs	r3, #0
}
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	371c      	adds	r7, #28
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop
 8019ce0:	08025b1c 	.word	0x08025b1c

08019ce4 <phpalI18092mPI_Sw_ConvertDatarate>:

phStatus_t phpalI18092mPI_Sw_ConvertDatarate(
    uint16_t wHalDatarate,
    uint8_t * pI18092Datarate
    )
{
 8019ce4:	b480      	push	{r7}
 8019ce6:	b083      	sub	sp, #12
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	4603      	mov	r3, r0
 8019cec:	6039      	str	r1, [r7, #0]
 8019cee:	80fb      	strh	r3, [r7, #6]
    wHalDatarate = wHalDatarate & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 8019cf0:	88fb      	ldrh	r3, [r7, #6]
 8019cf2:	b2db      	uxtb	r3, r3
 8019cf4:	80fb      	strh	r3, [r7, #6]
    switch (wHalDatarate)
 8019cf6:	88fb      	ldrh	r3, [r7, #6]
 8019cf8:	2b02      	cmp	r3, #2
 8019cfa:	d00e      	beq.n	8019d1a <phpalI18092mPI_Sw_ConvertDatarate+0x36>
 8019cfc:	2b02      	cmp	r3, #2
 8019cfe:	dc10      	bgt.n	8019d22 <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d002      	beq.n	8019d0a <phpalI18092mPI_Sw_ConvertDatarate+0x26>
 8019d04:	2b01      	cmp	r3, #1
 8019d06:	d004      	beq.n	8019d12 <phpalI18092mPI_Sw_ConvertDatarate+0x2e>
 8019d08:	e00b      	b.n	8019d22 <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
    {
    case PHHAL_HW_RF_DATARATE_106:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_106;
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	701a      	strb	r2, [r3, #0]
        break;
 8019d10:	e00a      	b.n	8019d28 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_212:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_212;
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	2201      	movs	r2, #1
 8019d16:	701a      	strb	r2, [r3, #0]
        break;
 8019d18:	e006      	b.n	8019d28 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_424:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_424;
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	2202      	movs	r2, #2
 8019d1e:	701a      	strb	r2, [r3, #0]
        break;
 8019d20:	e002      	b.n	8019d28 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_I18092MPI);
 8019d22:	f640 4325 	movw	r3, #3109	@ 0xc25
 8019d26:	e000      	b.n	8019d2a <phpalI18092mPI_Sw_ConvertDatarate+0x46>
    }

    return PH_ERR_SUCCESS;
 8019d28:	2300      	movs	r3, #0
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	370c      	adds	r7, #12
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d34:	4770      	bx	lr
	...

08019d38 <phpalI18092mT_Sw_Init>:
    phpalI18092mT_Sw_DataParams_t * pDataParams,
    uint16_t wSizeOfDataParams,
    void * pHalDataParams,
    pRtoxTimerCallback pRtoxCallback
    )
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b086      	sub	sp, #24
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	60f8      	str	r0, [r7, #12]
 8019d40:	607a      	str	r2, [r7, #4]
 8019d42:	603b      	str	r3, [r7, #0]
 8019d44:	460b      	mov	r3, r1
 8019d46:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_SUCCESS;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI18092mT_Sw_DataParams_t) != wSizeOfDataParams)
 8019d4c:	897b      	ldrh	r3, [r7, #10]
 8019d4e:	2b4c      	cmp	r3, #76	@ 0x4c
 8019d50:	d002      	beq.n	8019d58 <phpalI18092mT_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MT);
 8019d52:	f44f 6352 	mov.w	r3, #3360	@ 0xd20
 8019d56:	e02c      	b.n	8019db2 <phpalI18092mT_Sw_Init+0x7a>
    }
    PH_ASSERT_NULL (pDataParams);
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d101      	bne.n	8019d62 <phpalI18092mT_Sw_Init+0x2a>
 8019d5e:	2321      	movs	r3, #33	@ 0x21
 8019d60:	e027      	b.n	8019db2 <phpalI18092mT_Sw_Init+0x7a>
    PH_ASSERT_NULL (pHalDataParams);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d101      	bne.n	8019d6c <phpalI18092mT_Sw_Init+0x34>
 8019d68:	2321      	movs	r3, #33	@ 0x21
 8019d6a:	e022      	b.n	8019db2 <phpalI18092mT_Sw_Init+0x7a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MT | PHPAL_I18092MT_SW_ID;
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	f640 5201 	movw	r2, #3329	@ 0xd01
 8019d72:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	687a      	ldr	r2, [r7, #4]
 8019d78:	605a      	str	r2, [r3, #4]
    pDataParams->pRtoxCallback  = pRtoxCallback;
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	683a      	ldr	r2, [r7, #0]
 8019d7e:	60da      	str	r2, [r3, #12]
    pDataParams->bCmdtype       = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	220a      	movs	r2, #10
 8019d84:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

    /* Reset protocol to defaults */
    (void)phpalI18092mT_Sw_ResetProtocol(pDataParams);
 8019d88:	68f8      	ldr	r0, [r7, #12]
 8019d8a:	f000 f819 	bl	8019dc0 <phpalI18092mT_Sw_ResetProtocol>

    /* Check whether event is already created. */
    pDataParams->Pal18092mTEventObj.pEvtName = (uint8_t *)bmtEventName;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	4a0a      	ldr	r2, [pc, #40]	@ (8019dbc <phpalI18092mT_Sw_Init+0x84>)
 8019d92:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->Pal18092mTEventObj.intialValue = 0;
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	2200      	movs	r2, #0
 8019d98:	645a      	str	r2, [r3, #68]	@ 0x44
    wStatus = phOsal_EventCreate(&pDataParams->Pal18092mTEventObj.EventHandle, &pDataParams->Pal18092mTEventObj);
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	333c      	adds	r3, #60	@ 0x3c
 8019da4:	4619      	mov	r1, r3
 8019da6:	4610      	mov	r0, r2
 8019da8:	f001 fcde 	bl	801b768 <phOsal_EventCreate>
 8019dac:	4603      	mov	r3, r0
 8019dae:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8019db0:	8afb      	ldrh	r3, [r7, #22]
}
 8019db2:	4618      	mov	r0, r3
 8019db4:	3718      	adds	r7, #24
 8019db6:	46bd      	mov	sp, r7
 8019db8:	bd80      	pop	{r7, pc}
 8019dba:	bf00      	nop
 8019dbc:	08025b24 	.word	0x08025b24

08019dc0 <phpalI18092mT_Sw_ResetProtocol>:
}

phStatus_t phpalI18092mT_Sw_ResetProtocol(
    phpalI18092mT_Sw_DataParams_t * pDataParams
    )
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bStateNow          = PHPAL_I18092MT_SW_STATE_INFORMATION_PDU_TX;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2200      	movs	r2, #0
 8019dcc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bDid               = 0;    /* set DID to 0, i.e. disable usage of DID */
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    pDataParams->bNadEnabled        = PH_OFF;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bNadVal            = 0;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2200      	movs	r2, #0
 8019de4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bFsl               = PHPAL_I18092MT_FRAMESIZE_64;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2200      	movs	r2, #0
 8019dec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    pDataParams->bPni               = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	2200      	movs	r2, #0
 8019df4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    pDataParams->bDst               = PHPAL_I18092MT_DATARATE_106;
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    pDataParams->bDrt               = PHPAL_I18092MT_DATARATE_106;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	2200      	movs	r2, #0
 8019e04:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    pDataParams->bBsi               = 0;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bBri               = 0;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2200      	movs	r2, #0
 8019e14:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    pDataParams->bLri               = PHPAL_I18092MT_FRAMESIZE_64;
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pDataParams->bBst               = 0;
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	2200      	movs	r2, #0
 8019e24:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    pDataParams->bBrt               = 0;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    pDataParams->bLrt               = PHPAL_I18092MT_FRAMESIZE_64;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2200      	movs	r2, #0
 8019e34:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pDataParams->bTo                = 0;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pDataParams->bRtoxDisabled      = PH_OFF;
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	2200      	movs	r2, #0
 8019e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    pDataParams->ovrTask            = NULL;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	609a      	str	r2, [r3, #8]
    pDataParams->bCmdtype           = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	220a      	movs	r2, #10
 8019e52:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    pDataParams->bRtoxExtnVal       = PHPAL_I18092MT_SW_MIN_RTOX_VALUE;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	2201      	movs	r2, #1
 8019e5a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    pDataParams->wLastTxLen         = 0;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	2200      	movs	r2, #0
 8019e62:	821a      	strh	r2, [r3, #16]
    pDataParams->bOpeMode           = RD_LIB_MODE_NFC;
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	2202      	movs	r2, #2
 8019e68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bPropPSLMode       = PH_OFF;
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    (void)memset(pDataParams->aNfcid3i, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	3312      	adds	r3, #18
 8019e78:	220a      	movs	r2, #10
 8019e7a:	2100      	movs	r1, #0
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f007 feb9 	bl	8021bf4 <memset>
    (void)memset(pDataParams->aNfcid3t, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	331c      	adds	r3, #28
 8019e86:	220a      	movs	r2, #10
 8019e88:	2100      	movs	r1, #0
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	f007 feb2 	bl	8021bf4 <memset>

    return PH_ERR_SUCCESS;
 8019e90:	2300      	movs	r3, #0
}
 8019e92:	4618      	mov	r0, r3
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}

08019e9a <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 8019e9a:	b480      	push	{r7}
 8019e9c:	b085      	sub	sp, #20
 8019e9e:	af00      	add	r7, sp, #0
 8019ea0:	60f8      	str	r0, [r7, #12]
 8019ea2:	607a      	str	r2, [r7, #4]
 8019ea4:	603b      	str	r3, [r7, #0]
 8019ea6:	460b      	mov	r3, r1
 8019ea8:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 8019eaa:	897b      	ldrh	r3, [r7, #10]
 8019eac:	2b0c      	cmp	r3, #12
 8019eae:	d002      	beq.n	8019eb6 <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 8019eb0:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8019eb4:	e014      	b.n	8019ee0 <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d101      	bne.n	8019ec0 <phpalMifare_Sw_Init+0x26>
 8019ebc:	2321      	movs	r3, #33	@ 0x21
 8019ebe:	e00f      	b.n	8019ee0 <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d101      	bne.n	8019eca <phpalMifare_Sw_Init+0x30>
 8019ec6:	2321      	movs	r3, #33	@ 0x21
 8019ec8:	e00a      	b.n	8019ee0 <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	f240 7202 	movw	r2, #1794	@ 0x702
 8019ed0:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	687a      	ldr	r2, [r7, #4]
 8019ed6:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	683a      	ldr	r2, [r7, #0]
 8019edc:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 8019ede:	2300      	movs	r3, #0
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	3714      	adds	r7, #20
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eea:	4770      	bx	lr

08019eec <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8019eec:	b480      	push	{r7}
 8019eee:	b085      	sub	sp, #20
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	607a      	str	r2, [r7, #4]
 8019ef8:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d101      	bne.n	8019f04 <phpalSli15693_Sw_Init+0x18>
 8019f00:	2321      	movs	r3, #33	@ 0x21
 8019f02:	e02d      	b.n	8019f60 <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d101      	bne.n	8019f0e <phpalSli15693_Sw_Init+0x22>
 8019f0a:	2321      	movs	r3, #33	@ 0x21
 8019f0c:	e028      	b.n	8019f60 <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 8019f0e:	897b      	ldrh	r3, [r7, #10]
 8019f10:	2b1c      	cmp	r3, #28
 8019f12:	d002      	beq.n	8019f1a <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 8019f14:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8019f18:	e022      	b.n	8019f60 <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	f640 2201 	movw	r2, #2561	@ 0xa01
 8019f20:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	687a      	ldr	r2, [r7, #4]
 8019f26:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	2206      	movs	r2, #6
 8019f32:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	2200      	movs	r2, #0
 8019f38:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	2203      	movs	r2, #3
 8019f44:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	2200      	movs	r2, #0
 8019f4a:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	2202      	movs	r2, #2
 8019f50:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	2204      	movs	r2, #4
 8019f56:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8019f5e:	2300      	movs	r3, #0
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3714      	adds	r7, #20
 8019f64:	46bd      	mov	sp, r7
 8019f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6a:	4770      	bx	lr

08019f6c <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b08e      	sub	sp, #56	@ 0x38
 8019f70:	af08      	add	r7, sp, #32
 8019f72:	60f8      	str	r0, [r7, #12]
 8019f74:	607b      	str	r3, [r7, #4]
 8019f76:	460b      	mov	r3, r1
 8019f78:	72fb      	strb	r3, [r7, #11]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 8019f82:	7ab9      	ldrb	r1, [r7, #10]
 8019f84:	7afa      	ldrb	r2, [r7, #11]
 8019f86:	f107 0314 	add.w	r3, r7, #20
 8019f8a:	9307      	str	r3, [sp, #28]
 8019f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f8e:	9306      	str	r3, [sp, #24]
 8019f90:	f107 0317 	add.w	r3, r7, #23
 8019f94:	9305      	str	r3, [sp, #20]
 8019f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f98:	9304      	str	r3, [sp, #16]
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	9303      	str	r3, [sp, #12]
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	9302      	str	r3, [sp, #8]
 8019fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019fa6:	9301      	str	r3, [sp, #4]
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	9300      	str	r3, [sp, #0]
 8019fac:	460b      	mov	r3, r1
 8019fae:	2101      	movs	r1, #1
 8019fb0:	68f8      	ldr	r0, [r7, #12]
 8019fb2:	f000 fe63 	bl	801ac7c <phpalSli15693_Sw_InventoryEx>
 8019fb6:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 8019fb8:	4618      	mov	r0, r3
 8019fba:	3718      	adds	r7, #24
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	bd80      	pop	{r7, pc}

08019fc0 <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b08a      	sub	sp, #40	@ 0x28
 8019fc4:	af02      	add	r7, sp, #8
 8019fc6:	60f8      	str	r0, [r7, #12]
 8019fc8:	607a      	str	r2, [r7, #4]
 8019fca:	603b      	str	r3, [r7, #0]
 8019fcc:	460b      	mov	r3, r1
 8019fce:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 8019fd8:	7afb      	ldrb	r3, [r7, #11]
 8019fda:	2b03      	cmp	r3, #3
 8019fdc:	d902      	bls.n	8019fe4 <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8019fde:	f640 2321 	movw	r3, #2593	@ 0xa21
 8019fe2:	e1c1      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 8019fe4:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	2200      	movs	r2, #0
 8019fea:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 8019fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fee:	2200      	movs	r2, #0
 8019ff0:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8019ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 8019ff8:	7afb      	ldrb	r3, [r7, #11]
 8019ffa:	2b03      	cmp	r3, #3
 8019ffc:	d10e      	bne.n	801a01c <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	685b      	ldr	r3, [r3, #4]
 801a002:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801a006:	2100      	movs	r1, #0
 801a008:	4618      	mov	r0, r3
 801a00a:	f7f5 fbb7 	bl	800f77c <phhalHw_Pn5180_Wait>
 801a00e:	4603      	mov	r3, r0
 801a010:	83bb      	strh	r3, [r7, #28]
 801a012:	8bbb      	ldrh	r3, [r7, #28]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d001      	beq.n	801a01c <phpalSli15693_Sw_SendEof+0x5c>
 801a018:	8bbb      	ldrh	r3, [r7, #28]
 801a01a:	e1a5      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	f107 0210 	add.w	r2, r7, #16
 801a024:	210c      	movs	r1, #12
 801a026:	4618      	mov	r0, r3
 801a028:	f7f7 f8b0 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801a02c:	4603      	mov	r3, r0
 801a02e:	83bb      	strh	r3, [r7, #28]
 801a030:	8bbb      	ldrh	r3, [r7, #28]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d001      	beq.n	801a03a <phpalSli15693_Sw_SendEof+0x7a>
 801a036:	8bbb      	ldrh	r3, [r7, #28]
 801a038:	e196      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 801a03a:	7afb      	ldrb	r3, [r7, #11]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d12a      	bne.n	801a096 <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 801a040:	8a3b      	ldrh	r3, [r7, #16]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d00d      	beq.n	801a062 <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	7a9b      	ldrb	r3, [r3, #10]
 801a04a:	f003 0302 	and.w	r3, r3, #2
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d003      	beq.n	801a05a <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 801a052:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801a056:	83fb      	strh	r3, [r7, #30]
 801a058:	e010      	b.n	801a07c <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 801a05a:	f240 33a1 	movw	r3, #929	@ 0x3a1
 801a05e:	83fb      	strh	r3, [r7, #30]
 801a060:	e00c      	b.n	801a07c <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	7a9b      	ldrb	r3, [r3, #10]
 801a066:	f003 0302 	and.w	r3, r3, #2
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d003      	beq.n	801a076 <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 801a06e:	f241 039c 	movw	r3, #4252	@ 0x109c
 801a072:	83fb      	strh	r3, [r7, #30]
 801a074:	e002      	b.n	801a07c <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 801a076:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 801a07a:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a07c:	8bfb      	ldrh	r3, [r7, #30]
 801a07e:	461a      	mov	r2, r3
 801a080:	2102      	movs	r1, #2
 801a082:	68f8      	ldr	r0, [r7, #12]
 801a084:	f000 faf8 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801a088:	4603      	mov	r3, r0
 801a08a:	83bb      	strh	r3, [r7, #28]
 801a08c:	8bbb      	ldrh	r3, [r7, #28]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d04b      	beq.n	801a12a <phpalSli15693_Sw_SendEof+0x16a>
 801a092:	8bbb      	ldrh	r3, [r7, #28]
 801a094:	e168      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 801a096:	7afb      	ldrb	r3, [r7, #11]
 801a098:	2b01      	cmp	r3, #1
 801a09a:	d12a      	bne.n	801a0f2 <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 801a09c:	8a3b      	ldrh	r3, [r7, #16]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d00d      	beq.n	801a0be <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	7a9b      	ldrb	r3, [r3, #10]
 801a0a6:	f003 0302 	and.w	r3, r3, #2
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d003      	beq.n	801a0b6 <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 801a0ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801a0b2:	83fb      	strh	r3, [r7, #30]
 801a0b4:	e010      	b.n	801a0d8 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 801a0b6:	f240 2373 	movw	r3, #627	@ 0x273
 801a0ba:	83fb      	strh	r3, [r7, #30]
 801a0bc:	e00c      	b.n	801a0d8 <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	7a9b      	ldrb	r3, [r3, #10]
 801a0c2:	f003 0302 	and.w	r3, r3, #2
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d003      	beq.n	801a0d2 <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 801a0ca:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 801a0ce:	83fb      	strh	r3, [r7, #30]
 801a0d0:	e002      	b.n	801a0d8 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801a0d2:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801a0d6:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a0d8:	8bfb      	ldrh	r3, [r7, #30]
 801a0da:	461a      	mov	r2, r3
 801a0dc:	2102      	movs	r1, #2
 801a0de:	68f8      	ldr	r0, [r7, #12]
 801a0e0:	f000 faca 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801a0e4:	4603      	mov	r3, r0
 801a0e6:	83bb      	strh	r3, [r7, #28]
 801a0e8:	8bbb      	ldrh	r3, [r7, #28]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d01d      	beq.n	801a12a <phpalSli15693_Sw_SendEof+0x16a>
 801a0ee:	8bbb      	ldrh	r3, [r7, #28]
 801a0f0:	e13a      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	7d9b      	ldrb	r3, [r3, #22]
 801a0f6:	2b02      	cmp	r3, #2
 801a0f8:	d10b      	bne.n	801a112 <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a0fa:	2246      	movs	r2, #70	@ 0x46
 801a0fc:	2103      	movs	r1, #3
 801a0fe:	68f8      	ldr	r0, [r7, #12]
 801a100:	f000 faba 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801a104:	4603      	mov	r3, r0
 801a106:	83bb      	strh	r3, [r7, #28]
 801a108:	8bbb      	ldrh	r3, [r7, #28]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d00d      	beq.n	801a12a <phpalSli15693_Sw_SendEof+0x16a>
 801a10e:	8bbb      	ldrh	r3, [r7, #28]
 801a110:	e12a      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a112:	2214      	movs	r2, #20
 801a114:	2103      	movs	r1, #3
 801a116:	68f8      	ldr	r0, [r7, #12]
 801a118:	f000 faae 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801a11c:	4603      	mov	r3, r0
 801a11e:	83bb      	strh	r3, [r7, #28]
 801a120:	8bbb      	ldrh	r3, [r7, #28]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d001      	beq.n	801a12a <phpalSli15693_Sw_SendEof+0x16a>
 801a126:	8bbb      	ldrh	r3, [r7, #28]
 801a128:	e11e      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	685b      	ldr	r3, [r3, #4]
 801a12e:	2200      	movs	r2, #0
 801a130:	2115      	movs	r1, #21
 801a132:	4618      	mov	r0, r3
 801a134:	f7f5 fbdc 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a138:	4603      	mov	r3, r0
 801a13a:	83bb      	strh	r3, [r7, #28]
 801a13c:	8bbb      	ldrh	r3, [r7, #28]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d001      	beq.n	801a146 <phpalSli15693_Sw_SendEof+0x186>
 801a142:	8bbb      	ldrh	r3, [r7, #28]
 801a144:	e110      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	6858      	ldr	r0, [r3, #4]
 801a14a:	f107 0312 	add.w	r3, r7, #18
 801a14e:	9301      	str	r3, [sp, #4]
 801a150:	f107 0314 	add.w	r3, r7, #20
 801a154:	9300      	str	r3, [sp, #0]
 801a156:	2300      	movs	r3, #0
 801a158:	2200      	movs	r2, #0
 801a15a:	2100      	movs	r1, #0
 801a15c:	f7f5 f812 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801a160:	4603      	mov	r3, r0
 801a162:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	685b      	ldr	r3, [r3, #4]
 801a168:	2205      	movs	r2, #5
 801a16a:	2115      	movs	r1, #21
 801a16c:	4618      	mov	r0, r3
 801a16e:	f7f5 fbbf 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a172:	4603      	mov	r3, r0
 801a174:	83bb      	strh	r3, [r7, #28]
 801a176:	8bbb      	ldrh	r3, [r7, #28]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d001      	beq.n	801a180 <phpalSli15693_Sw_SendEof+0x1c0>
 801a17c:	8bbb      	ldrh	r3, [r7, #28]
 801a17e:	e0f3      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 801a180:	8b7b      	ldrh	r3, [r7, #26]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d001      	beq.n	801a18a <phpalSli15693_Sw_SendEof+0x1ca>
 801a186:	8b7b      	ldrh	r3, [r7, #26]
 801a188:	e0ee      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 801a18a:	8a7b      	ldrh	r3, [r7, #18]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d102      	bne.n	801a196 <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a190:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a194:	e0e8      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 801a196:	697b      	ldr	r3, [r7, #20]
 801a198:	781b      	ldrb	r3, [r3, #0]
 801a19a:	f003 0301 	and.w	r3, r3, #1
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d00e      	beq.n	801a1c0 <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 801a1a2:	8a7b      	ldrh	r3, [r7, #18]
 801a1a4:	2b02      	cmp	r3, #2
 801a1a6:	d002      	beq.n	801a1ae <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a1a8:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a1ac:	e0dc      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 801a1ae:	697b      	ldr	r3, [r7, #20]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	781b      	ldrb	r3, [r3, #0]
 801a1b4:	461a      	mov	r2, r3
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 801a1ba:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 801a1be:	e0d3      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 801a1c0:	7afb      	ldrb	r3, [r7, #11]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d13d      	bne.n	801a242 <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 801a1c6:	697b      	ldr	r3, [r7, #20]
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	617b      	str	r3, [r7, #20]
        --wRespLength;
 801a1cc:	8a7b      	ldrh	r3, [r7, #18]
 801a1ce:	3b01      	subs	r3, #1
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 801a1d4:	8a7b      	ldrh	r3, [r7, #18]
 801a1d6:	2b09      	cmp	r3, #9
 801a1d8:	d002      	beq.n	801a1e0 <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a1da:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a1de:	e0c3      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	685b      	ldr	r3, [r3, #4]
 801a1e4:	f44f 729b 	mov.w	r2, #310	@ 0x136
 801a1e8:	2100      	movs	r1, #0
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7f5 fac6 	bl	800f77c <phhalHw_Pn5180_Wait>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	83bb      	strh	r3, [r7, #28]
 801a1f4:	8bbb      	ldrh	r3, [r7, #28]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d001      	beq.n	801a1fe <phpalSli15693_Sw_SendEof+0x23e>
 801a1fa:	8bbb      	ldrh	r3, [r7, #28]
 801a1fc:	e0b4      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	781a      	ldrb	r2, [r3, #0]
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	f103 000c 	add.w	r0, r3, #12
 801a20c:	697b      	ldr	r3, [r7, #20]
 801a20e:	3301      	adds	r3, #1
 801a210:	2208      	movs	r2, #8
 801a212:	4619      	mov	r1, r3
 801a214:	f007 fd83 	bl	8021d1e <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	2240      	movs	r2, #64	@ 0x40
 801a21c:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801a21e:	697b      	ldr	r3, [r7, #20]
 801a220:	3301      	adds	r3, #1
 801a222:	2208      	movs	r2, #8
 801a224:	4619      	mov	r1, r3
 801a226:	6838      	ldr	r0, [r7, #0]
 801a228:	f007 fd79 	bl	8021d1e <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801a22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a22e:	2208      	movs	r2, #8
 801a230:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	7a9b      	ldrb	r3, [r3, #10]
 801a236:	f043 0320 	orr.w	r3, r3, #32
 801a23a:	b2da      	uxtb	r2, r3
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	729a      	strb	r2, [r3, #10]
 801a240:	e091      	b.n	801a366 <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 801a242:	7afb      	ldrb	r3, [r7, #11]
 801a244:	2b01      	cmp	r3, #1
 801a246:	f040 8088 	bne.w	801a35a <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 801a24a:	697b      	ldr	r3, [r7, #20]
 801a24c:	3301      	adds	r3, #1
 801a24e:	617b      	str	r3, [r7, #20]
        --wRespLength;
 801a250:	8a7b      	ldrh	r3, [r7, #18]
 801a252:	3b01      	subs	r3, #1
 801a254:	b29b      	uxth	r3, r3
 801a256:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	7a9b      	ldrb	r3, [r3, #10]
 801a25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a260:	2b00      	cmp	r3, #0
 801a262:	d05b      	beq.n	801a31c <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	7d1b      	ldrb	r3, [r3, #20]
 801a268:	08db      	lsrs	r3, r3, #3
 801a26a:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801a26c:	7e7b      	ldrb	r3, [r7, #25]
 801a26e:	f1c3 0308 	rsb	r3, r3, #8
 801a272:	b2da      	uxtb	r2, r3
 801a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a276:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 801a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	461a      	mov	r2, r3
 801a27e:	8a7b      	ldrh	r3, [r7, #18]
 801a280:	429a      	cmp	r2, r3
 801a282:	d902      	bls.n	801a28a <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a284:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a288:	e06e      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 801a28a:	7e7b      	ldrb	r3, [r7, #25]
 801a28c:	2b07      	cmp	r3, #7
 801a28e:	d837      	bhi.n	801a300 <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	7d1b      	ldrb	r3, [r3, #20]
 801a294:	f003 0307 	and.w	r3, r3, #7
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d01e      	beq.n	801a2dc <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 801a29e:	7e7b      	ldrb	r3, [r7, #25]
 801a2a0:	2b06      	cmp	r3, #6
 801a2a2:	d80d      	bhi.n	801a2c0 <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 801a2a4:	7e7b      	ldrb	r3, [r7, #25]
 801a2a6:	3301      	adds	r3, #1
 801a2a8:	3308      	adds	r3, #8
 801a2aa:	68fa      	ldr	r2, [r7, #12]
 801a2ac:	4413      	add	r3, r2
 801a2ae:	1d18      	adds	r0, r3, #4
 801a2b0:	697b      	ldr	r3, [r7, #20]
 801a2b2:	1c59      	adds	r1, r3, #1
 801a2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	3b01      	subs	r3, #1
 801a2ba:	461a      	mov	r2, r3
 801a2bc:	f007 fd2f 	bl	8021d1e <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 801a2c0:	7e7b      	ldrb	r3, [r7, #25]
 801a2c2:	68fa      	ldr	r2, [r7, #12]
 801a2c4:	4413      	add	r3, r2
 801a2c6:	7b19      	ldrb	r1, [r3, #12]
 801a2c8:	697b      	ldr	r3, [r7, #20]
 801a2ca:	781a      	ldrb	r2, [r3, #0]
 801a2cc:	7e7b      	ldrb	r3, [r7, #25]
 801a2ce:	430a      	orrs	r2, r1
 801a2d0:	b2d1      	uxtb	r1, r2
 801a2d2:	68fa      	ldr	r2, [r7, #12]
 801a2d4:	4413      	add	r3, r2
 801a2d6:	460a      	mov	r2, r1
 801a2d8:	731a      	strb	r2, [r3, #12]
 801a2da:	e00a      	b.n	801a2f2 <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 801a2dc:	7e7b      	ldrb	r3, [r7, #25]
 801a2de:	3308      	adds	r3, #8
 801a2e0:	68fa      	ldr	r2, [r7, #12]
 801a2e2:	4413      	add	r3, r2
 801a2e4:	1d18      	adds	r0, r3, #4
 801a2e6:	6979      	ldr	r1, [r7, #20]
 801a2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	f007 fd16 	bl	8021d1e <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 801a2f2:	6979      	ldr	r1, [r7, #20]
 801a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	461a      	mov	r2, r3
 801a2fa:	6838      	ldr	r0, [r7, #0]
 801a2fc:	f007 fd0f 	bl	8021d1e <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	2240      	movs	r2, #64	@ 0x40
 801a304:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 801a306:	697b      	ldr	r3, [r7, #20]
 801a308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a30a:	7812      	ldrb	r2, [r2, #0]
 801a30c:	4413      	add	r3, r2
 801a30e:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 801a310:	8a7b      	ldrh	r3, [r7, #18]
 801a312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a314:	7812      	ldrb	r2, [r2, #0]
 801a316:	1a9b      	subs	r3, r3, r2
 801a318:	b29b      	uxth	r3, r3
 801a31a:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 801a31c:	697b      	ldr	r3, [r7, #20]
 801a31e:	8a7a      	ldrh	r2, [r7, #18]
 801a320:	4619      	mov	r1, r3
 801a322:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a324:	f007 fcfb 	bl	8021d1e <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 801a328:	8a7a      	ldrh	r2, [r7, #18]
 801a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a32c:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	7a9b      	ldrb	r3, [r3, #10]
 801a332:	f043 0320 	orr.w	r3, r3, #32
 801a336:	b2da      	uxtb	r2, r3
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	685b      	ldr	r3, [r3, #4]
 801a340:	f44f 729b 	mov.w	r2, #310	@ 0x136
 801a344:	2100      	movs	r1, #0
 801a346:	4618      	mov	r0, r3
 801a348:	f7f5 fa18 	bl	800f77c <phhalHw_Pn5180_Wait>
 801a34c:	4603      	mov	r3, r0
 801a34e:	83bb      	strh	r3, [r7, #28]
 801a350:	8bbb      	ldrh	r3, [r7, #28]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d007      	beq.n	801a366 <phpalSli15693_Sw_SendEof+0x3a6>
 801a356:	8bbb      	ldrh	r3, [r7, #28]
 801a358:	e006      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 801a35a:	8a7b      	ldrh	r3, [r7, #18]
 801a35c:	2b01      	cmp	r3, #1
 801a35e:	d002      	beq.n	801a366 <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a360:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a364:	e000      	b.n	801a368 <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 801a366:	2300      	movs	r3, #0
}
 801a368:	4618      	mov	r0, r3
 801a36a:	3720      	adds	r7, #32
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bd80      	pop	{r7, pc}

0801a370 <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 801a370:	b580      	push	{r7, lr}
 801a372:	b088      	sub	sp, #32
 801a374:	af02      	add	r7, sp, #8
 801a376:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801a378:	2300      	movs	r3, #0
 801a37a:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801a37c:	2300      	movs	r3, #0
 801a37e:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	7a9b      	ldrb	r3, [r3, #10]
 801a384:	f023 0310 	bic.w	r3, r3, #16
 801a388:	b2da      	uxtb	r2, r3
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	7a9b      	ldrb	r3, [r3, #10]
 801a392:	f043 0320 	orr.w	r3, r3, #32
 801a396:	b2da      	uxtb	r2, r3
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 801a39c:	2325      	movs	r3, #37	@ 0x25
 801a39e:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a3a0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801a3a4:	2102      	movs	r1, #2
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	f000 f966 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801a3ac:	4603      	mov	r3, r0
 801a3ae:	82fb      	strh	r3, [r7, #22]
 801a3b0:	8afb      	ldrh	r3, [r7, #22]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d001      	beq.n	801a3ba <phpalSli15693_Sw_Select+0x4a>
 801a3b6:	8afb      	ldrh	r3, [r7, #22]
 801a3b8:	e028      	b.n	801a40c <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 801a3ba:	f107 0214 	add.w	r2, r7, #20
 801a3be:	f107 030e 	add.w	r3, r7, #14
 801a3c2:	9301      	str	r3, [sp, #4]
 801a3c4:	f107 0310 	add.w	r3, r7, #16
 801a3c8:	9300      	str	r3, [sp, #0]
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	2100      	movs	r1, #0
 801a3ce:	6878      	ldr	r0, [r7, #4]
 801a3d0:	f000 f820 	bl	801a414 <phpalSli15693_Sw_Exchange>
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	82fb      	strh	r3, [r7, #22]
 801a3d8:	8afb      	ldrh	r3, [r7, #22]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d001      	beq.n	801a3e2 <phpalSli15693_Sw_Select+0x72>
 801a3de:	8afb      	ldrh	r3, [r7, #22]
 801a3e0:	e014      	b.n	801a40c <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 801a3e2:	89fb      	ldrh	r3, [r7, #14]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d002      	beq.n	801a3ee <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a3e8:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a3ec:	e00e      	b.n	801a40c <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	7a9b      	ldrb	r3, [r3, #10]
 801a3f2:	f023 0320 	bic.w	r3, r3, #32
 801a3f6:	b2da      	uxtb	r2, r3
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	7a9b      	ldrb	r3, [r3, #10]
 801a400:	f043 0310 	orr.w	r3, r3, #16
 801a404:	b2da      	uxtb	r2, r3
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 801a40a:	2300      	movs	r3, #0
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	3718      	adds	r7, #24
 801a410:	46bd      	mov	sp, r7
 801a412:	bd80      	pop	{r7, pc}

0801a414 <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b08a      	sub	sp, #40	@ 0x28
 801a418:	af02      	add	r7, sp, #8
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	607a      	str	r2, [r7, #4]
 801a41e:	461a      	mov	r2, r3
 801a420:	460b      	mov	r3, r1
 801a422:	817b      	strh	r3, [r7, #10]
 801a424:	4613      	mov	r3, r2
 801a426:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 801a428:	2300      	movs	r3, #0
 801a42a:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 801a42c:	2300      	movs	r3, #0
 801a42e:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	7a9b      	ldrb	r3, [r3, #10]
 801a434:	f003 0304 	and.w	r3, r3, #4
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d10c      	bne.n	801a456 <phpalSli15693_Sw_Exchange+0x42>
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	7a9b      	ldrb	r3, [r3, #10]
 801a440:	f003 0320 	and.w	r3, r3, #32
 801a444:	2b00      	cmp	r3, #0
 801a446:	d006      	beq.n	801a456 <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	7d1b      	ldrb	r3, [r3, #20]
 801a44c:	2b40      	cmp	r3, #64	@ 0x40
 801a44e:	d002      	beq.n	801a456 <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 801a450:	f640 2325 	movw	r3, #2597	@ 0xa25
 801a454:	e0f0      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 801a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d102      	bne.n	801a462 <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 801a45c:	f107 0310 	add.w	r3, r7, #16
 801a460:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 801a462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a464:	2b00      	cmp	r3, #0
 801a466:	d102      	bne.n	801a46e <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 801a468:	f107 0316 	add.w	r3, r7, #22
 801a46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 801a46e:	897b      	ldrh	r3, [r7, #10]
 801a470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801a474:	2b00      	cmp	r3, #0
 801a476:	f040 8086 	bne.w	801a586 <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 801a47a:	8bfb      	ldrh	r3, [r7, #30]
 801a47c:	1c5a      	adds	r2, r3, #1
 801a47e:	83fa      	strh	r2, [r7, #30]
 801a480:	4619      	mov	r1, r3
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	7a9a      	ldrb	r2, [r3, #10]
 801a486:	f101 0320 	add.w	r3, r1, #32
 801a48a:	443b      	add	r3, r7
 801a48c:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 801a490:	8bfb      	ldrh	r3, [r7, #30]
 801a492:	1c5a      	adds	r2, r3, #1
 801a494:	83fa      	strh	r2, [r7, #30]
 801a496:	4619      	mov	r1, r3
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	781a      	ldrb	r2, [r3, #0]
 801a49c:	f101 0320 	add.w	r3, r1, #32
 801a4a0:	443b      	add	r3, r7
 801a4a2:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	781b      	ldrb	r3, [r3, #0]
 801a4aa:	2b9f      	cmp	r3, #159	@ 0x9f
 801a4ac:	d90f      	bls.n	801a4ce <phpalSli15693_Sw_Exchange+0xba>
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	781b      	ldrb	r3, [r3, #0]
 801a4b2:	2bdf      	cmp	r3, #223	@ 0xdf
 801a4b4:	d80b      	bhi.n	801a4ce <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 801a4b6:	8bfb      	ldrh	r3, [r7, #30]
 801a4b8:	1c5a      	adds	r2, r3, #1
 801a4ba:	83fa      	strh	r2, [r7, #30]
 801a4bc:	4619      	mov	r1, r3
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	7e5a      	ldrb	r2, [r3, #25]
 801a4c2:	f101 0320 	add.w	r3, r1, #32
 801a4c6:	443b      	add	r3, r7
 801a4c8:	f803 2c08 	strb.w	r2, [r3, #-8]
 801a4cc:	e017      	b.n	801a4fe <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	2b3b      	cmp	r3, #59	@ 0x3b
 801a4d4:	d113      	bne.n	801a4fe <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 801a4d6:	893b      	ldrh	r3, [r7, #8]
 801a4d8:	2b01      	cmp	r3, #1
 801a4da:	d910      	bls.n	801a4fe <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 801a4dc:	8bfb      	ldrh	r3, [r7, #30]
 801a4de:	1c5a      	adds	r2, r3, #1
 801a4e0:	83fa      	strh	r2, [r7, #30]
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	785a      	ldrb	r2, [r3, #1]
 801a4e8:	f101 0320 	add.w	r3, r1, #32
 801a4ec:	443b      	add	r3, r7
 801a4ee:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	607b      	str	r3, [r7, #4]
               --wTxLength;
 801a4f8:	893b      	ldrh	r3, [r7, #8]
 801a4fa:	3b01      	subs	r3, #1
 801a4fc:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	6858      	ldr	r0, [r3, #4]
 801a502:	8bf9      	ldrh	r1, [r7, #30]
 801a504:	f107 0218 	add.w	r2, r7, #24
 801a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a50a:	9301      	str	r3, [sp, #4]
 801a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a50e:	9300      	str	r3, [sp, #0]
 801a510:	460b      	mov	r3, r1
 801a512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801a516:	f7f4 fe35 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801a51a:	4603      	mov	r3, r0
 801a51c:	83bb      	strh	r3, [r7, #28]
 801a51e:	8bbb      	ldrh	r3, [r7, #28]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d001      	beq.n	801a528 <phpalSli15693_Sw_Exchange+0x114>
 801a524:	8bbb      	ldrh	r3, [r7, #28]
 801a526:	e087      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	3301      	adds	r3, #1
 801a52c:	607b      	str	r3, [r7, #4]
        --wTxLength;
 801a52e:	893b      	ldrh	r3, [r7, #8]
 801a530:	3b01      	subs	r3, #1
 801a532:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	7a9b      	ldrb	r3, [r3, #10]
 801a538:	f003 0304 	and.w	r3, r3, #4
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d11e      	bne.n	801a57e <phpalSli15693_Sw_Exchange+0x16a>
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	7a9b      	ldrb	r3, [r3, #10]
 801a544:	f003 0320 	and.w	r3, r3, #32
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d018      	beq.n	801a57e <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	7d5b      	ldrb	r3, [r3, #21]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d114      	bne.n	801a57e <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	6858      	ldr	r0, [r3, #4]
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	f103 020c 	add.w	r2, r3, #12
 801a55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a560:	9301      	str	r3, [sp, #4]
 801a562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a564:	9300      	str	r3, [sp, #0]
 801a566:	2308      	movs	r3, #8
 801a568:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 801a56c:	f7f4 fe0a 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801a570:	4603      	mov	r3, r0
 801a572:	83bb      	strh	r3, [r7, #28]
 801a574:	8bbb      	ldrh	r3, [r7, #28]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d001      	beq.n	801a57e <phpalSli15693_Sw_Exchange+0x16a>
 801a57a:	8bbb      	ldrh	r3, [r7, #28]
 801a57c:	e05c      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 801a57e:	897b      	ldrh	r3, [r7, #10]
 801a580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801a584:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	6858      	ldr	r0, [r3, #4]
 801a58a:	893a      	ldrh	r2, [r7, #8]
 801a58c:	8979      	ldrh	r1, [r7, #10]
 801a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a590:	9301      	str	r3, [sp, #4]
 801a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a594:	9300      	str	r3, [sp, #0]
 801a596:	4613      	mov	r3, r2
 801a598:	687a      	ldr	r2, [r7, #4]
 801a59a:	f7f4 fdf3 	bl	800f184 <phhalHw_Pn5180_Exchange>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	83bb      	strh	r3, [r7, #28]
 801a5a2:	8bbb      	ldrh	r3, [r7, #28]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d001      	beq.n	801a5ac <phpalSli15693_Sw_Exchange+0x198>
 801a5a8:	8bbb      	ldrh	r3, [r7, #28]
 801a5aa:	e045      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 801a5ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	db40      	blt.n	801a636 <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 801a5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5b6:	881b      	ldrh	r3, [r3, #0]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d102      	bne.n	801a5c2 <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a5bc:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a5c0:	e03a      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 801a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	781b      	ldrb	r3, [r3, #0]
 801a5ce:	f003 0301 	and.w	r3, r3, #1
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d019      	beq.n	801a60a <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	2201      	movs	r2, #1
 801a5da:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 801a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5de:	881b      	ldrh	r3, [r3, #0]
 801a5e0:	2b02      	cmp	r3, #2
 801a5e2:	d002      	beq.n	801a5ea <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801a5e4:	f640 2306 	movw	r3, #2566	@ 0xa06
 801a5e8:	e026      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 801a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	3301      	adds	r3, #1
 801a5f0:	781b      	ldrb	r3, [r3, #0]
 801a5f2:	461a      	mov	r2, r3
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 801a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 801a5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a600:	2200      	movs	r2, #0
 801a602:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 801a604:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 801a608:	e016      	b.n	801a638 <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 801a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	781b      	ldrb	r3, [r3, #0]
 801a610:	461a      	mov	r2, r3
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 801a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	781a      	ldrb	r2, [r3, #0]
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 801a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	1c5a      	adds	r2, r3, #1
 801a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a628:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 801a62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a62c:	881b      	ldrh	r3, [r3, #0]
 801a62e:	3b01      	subs	r3, #1
 801a630:	b29a      	uxth	r2, r3
 801a632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a634:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 801a636:	2300      	movs	r3, #0
}
 801a638:	4618      	mov	r0, r3
 801a63a:	3720      	adds	r7, #32
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b084      	sub	sp, #16
 801a644:	af00      	add	r7, sp, #0
 801a646:	60f8      	str	r0, [r7, #12]
 801a648:	60b9      	str	r1, [r7, #8]
 801a64a:	4613      	mov	r3, r2
 801a64c:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 801a64e:	79fb      	ldrb	r3, [r7, #7]
 801a650:	2b08      	cmp	r3, #8
 801a652:	d002      	beq.n	801a65a <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a654:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a658:	e00a      	b.n	801a670 <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	330c      	adds	r3, #12
 801a65e:	2208      	movs	r2, #8
 801a660:	68b9      	ldr	r1, [r7, #8]
 801a662:	4618      	mov	r0, r3
 801a664:	f007 fb5b 	bl	8021d1e <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2240      	movs	r2, #64	@ 0x40
 801a66c:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 801a66e:	2300      	movs	r3, #0
}
 801a670:	4618      	mov	r0, r3
 801a672:	3710      	adds	r7, #16
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b084      	sub	sp, #16
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	460b      	mov	r3, r1
 801a682:	807b      	strh	r3, [r7, #2]
 801a684:	4613      	mov	r3, r2
 801a686:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 801a688:	887b      	ldrh	r3, [r7, #2]
 801a68a:	2b0a      	cmp	r3, #10
 801a68c:	f200 81b9 	bhi.w	801aa02 <phpalSli15693_Sw_SetConfig+0x38a>
 801a690:	a201      	add	r2, pc, #4	@ (adr r2, 801a698 <phpalSli15693_Sw_SetConfig+0x20>)
 801a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a696:	bf00      	nop
 801a698:	0801a6c5 	.word	0x0801a6c5
 801a69c:	0801aa03 	.word	0x0801aa03
 801a6a0:	0801a7c3 	.word	0x0801a7c3
 801a6a4:	0801a82f 	.word	0x0801a82f
 801a6a8:	0801a8fb 	.word	0x0801a8fb
 801a6ac:	0801a96f 	.word	0x0801a96f
 801a6b0:	0801a875 	.word	0x0801a875
 801a6b4:	0801a8f1 	.word	0x0801a8f1
 801a6b8:	0801a9d7 	.word	0x0801a9d7
 801a6bc:	0801a9ef 	.word	0x0801a9ef
 801a6c0:	0801a9f9 	.word	0x0801a9f9
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	685b      	ldr	r3, [r3, #4]
 801a6c8:	f107 020c 	add.w	r2, r7, #12
 801a6cc:	210f      	movs	r1, #15
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f7f6 fd5c 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	81fb      	strh	r3, [r7, #14]
 801a6d8:	89fb      	ldrh	r3, [r7, #14]
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d001      	beq.n	801a6e2 <phpalSli15693_Sw_SetConfig+0x6a>
 801a6de:	89fb      	ldrh	r3, [r7, #14]
 801a6e0:	e19c      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 801a6e2:	883b      	ldrh	r3, [r7, #0]
 801a6e4:	f003 0301 	and.w	r3, r3, #1
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d017      	beq.n	801a71c <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	7d9b      	ldrb	r3, [r3, #22]
 801a6f0:	2b02      	cmp	r3, #2
 801a6f2:	d102      	bne.n	801a6fa <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a6f4:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a6f8:	e190      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 801a6fa:	89bb      	ldrh	r3, [r7, #12]
 801a6fc:	2b01      	cmp	r3, #1
 801a6fe:	d01e      	beq.n	801a73e <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	685b      	ldr	r3, [r3, #4]
 801a704:	2201      	movs	r2, #1
 801a706:	210f      	movs	r1, #15
 801a708:	4618      	mov	r0, r3
 801a70a:	f7f5 f8f1 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a70e:	4603      	mov	r3, r0
 801a710:	81fb      	strh	r3, [r7, #14]
 801a712:	89fb      	ldrh	r3, [r7, #14]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d012      	beq.n	801a73e <phpalSli15693_Sw_SetConfig+0xc6>
 801a718:	89fb      	ldrh	r3, [r7, #14]
 801a71a:	e17f      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 801a71c:	89bb      	ldrh	r3, [r7, #12]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d00d      	beq.n	801a73e <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	2200      	movs	r2, #0
 801a728:	210f      	movs	r1, #15
 801a72a:	4618      	mov	r0, r3
 801a72c:	f7f5 f8e0 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a730:	4603      	mov	r3, r0
 801a732:	81fb      	strh	r3, [r7, #14]
 801a734:	89fb      	ldrh	r3, [r7, #14]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d001      	beq.n	801a73e <phpalSli15693_Sw_SetConfig+0xc6>
 801a73a:	89fb      	ldrh	r3, [r7, #14]
 801a73c:	e16e      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	685b      	ldr	r3, [r3, #4]
 801a742:	f107 020c 	add.w	r2, r7, #12
 801a746:	210a      	movs	r1, #10
 801a748:	4618      	mov	r0, r3
 801a74a:	f7f6 fd1f 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801a74e:	4603      	mov	r3, r0
 801a750:	81fb      	strh	r3, [r7, #14]
 801a752:	89fb      	ldrh	r3, [r7, #14]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d001      	beq.n	801a75c <phpalSli15693_Sw_SetConfig+0xe4>
 801a758:	89fb      	ldrh	r3, [r7, #14]
 801a75a:	e15f      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a75c:	883b      	ldrh	r3, [r7, #0]
 801a75e:	f003 0302 	and.w	r3, r3, #2
 801a762:	2b00      	cmp	r3, #0
 801a764:	d117      	bne.n	801a796 <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	7d9b      	ldrb	r3, [r3, #22]
 801a76a:	2b02      	cmp	r3, #2
 801a76c:	d102      	bne.n	801a774 <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a76e:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a772:	e153      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 801a774:	89bb      	ldrh	r3, [r7, #12]
 801a776:	2b0c      	cmp	r3, #12
 801a778:	d01e      	beq.n	801a7b8 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	685b      	ldr	r3, [r3, #4]
 801a77e:	220c      	movs	r2, #12
 801a780:	210a      	movs	r1, #10
 801a782:	4618      	mov	r0, r3
 801a784:	f7f5 f8b4 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a788:	4603      	mov	r3, r0
 801a78a:	81fb      	strh	r3, [r7, #14]
 801a78c:	89fb      	ldrh	r3, [r7, #14]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d012      	beq.n	801a7b8 <phpalSli15693_Sw_SetConfig+0x140>
 801a792:	89fb      	ldrh	r3, [r7, #14]
 801a794:	e142      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 801a796:	89bb      	ldrh	r3, [r7, #12]
 801a798:	2b0d      	cmp	r3, #13
 801a79a:	d00d      	beq.n	801a7b8 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	220d      	movs	r2, #13
 801a7a2:	210a      	movs	r1, #10
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f7f5 f8a3 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	81fb      	strh	r3, [r7, #14]
 801a7ae:	89fb      	ldrh	r3, [r7, #14]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d001      	beq.n	801a7b8 <phpalSli15693_Sw_SetConfig+0x140>
 801a7b4:	89fb      	ldrh	r3, [r7, #14]
 801a7b6:	e131      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 801a7b8:	883b      	ldrh	r3, [r7, #0]
 801a7ba:	b2da      	uxtb	r2, r3
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	729a      	strb	r2, [r3, #10]

        break;
 801a7c0:	e12b      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 801a7c2:	883b      	ldrh	r3, [r7, #0]
 801a7c4:	333c      	adds	r3, #60	@ 0x3c
 801a7c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a7ca:	d302      	bcc.n	801a7d2 <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 801a7cc:	f640 2322 	movw	r3, #2594	@ 0xa22
 801a7d0:	e124      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 801a7d2:	883b      	ldrh	r3, [r7, #0]
 801a7d4:	333c      	adds	r3, #60	@ 0x3c
 801a7d6:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	685b      	ldr	r3, [r3, #4]
 801a7dc:	f107 020c 	add.w	r2, r7, #12
 801a7e0:	210d      	movs	r1, #13
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7f6 fcd2 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801a7e8:	4603      	mov	r3, r0
 801a7ea:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 801a7ec:	89fb      	ldrh	r3, [r7, #14]
 801a7ee:	b2db      	uxtb	r3, r3
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d103      	bne.n	801a7fc <phpalSli15693_Sw_SetConfig+0x184>
 801a7f4:	89bb      	ldrh	r3, [r7, #12]
 801a7f6:	883a      	ldrh	r2, [r7, #0]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d103      	bne.n	801a804 <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 801a7fc:	89fb      	ldrh	r3, [r7, #14]
 801a7fe:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 801a800:	2b22      	cmp	r3, #34	@ 0x22
 801a802:	d10d      	bne.n	801a820 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	883a      	ldrh	r2, [r7, #0]
 801a80a:	210d      	movs	r1, #13
 801a80c:	4618      	mov	r0, r3
 801a80e:	f7f5 f86f 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a812:	4603      	mov	r3, r0
 801a814:	81fb      	strh	r3, [r7, #14]
 801a816:	89fb      	ldrh	r3, [r7, #14]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d007      	beq.n	801a82c <phpalSli15693_Sw_SetConfig+0x1b4>
 801a81c:	89fb      	ldrh	r3, [r7, #14]
 801a81e:	e0fd      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 801a820:	89fb      	ldrh	r3, [r7, #14]
 801a822:	2b00      	cmp	r3, #0
 801a824:	f000 80f0 	beq.w	801aa08 <phpalSli15693_Sw_SetConfig+0x390>
 801a828:	89fb      	ldrh	r3, [r7, #14]
 801a82a:	e0f7      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 801a82c:	e0ec      	b.n	801aa08 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	f107 020c 	add.w	r2, r7, #12
 801a836:	210e      	movs	r1, #14
 801a838:	4618      	mov	r0, r3
 801a83a:	f7f6 fca7 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801a83e:	4603      	mov	r3, r0
 801a840:	81fb      	strh	r3, [r7, #14]
 801a842:	89fb      	ldrh	r3, [r7, #14]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d001      	beq.n	801a84c <phpalSli15693_Sw_SetConfig+0x1d4>
 801a848:	89fb      	ldrh	r3, [r7, #14]
 801a84a:	e0e7      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 801a84c:	89bb      	ldrh	r3, [r7, #12]
 801a84e:	883a      	ldrh	r2, [r7, #0]
 801a850:	429a      	cmp	r2, r3
 801a852:	f000 80db 	beq.w	801aa0c <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	685b      	ldr	r3, [r3, #4]
 801a85a:	883a      	ldrh	r2, [r7, #0]
 801a85c:	210e      	movs	r1, #14
 801a85e:	4618      	mov	r0, r3
 801a860:	f7f5 f846 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a864:	4603      	mov	r3, r0
 801a866:	81fb      	strh	r3, [r7, #14]
 801a868:	89fb      	ldrh	r3, [r7, #14]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	f000 80ce 	beq.w	801aa0c <phpalSli15693_Sw_SetConfig+0x394>
 801a870:	89fb      	ldrh	r3, [r7, #14]
 801a872:	e0d3      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 801a874:	883b      	ldrh	r3, [r7, #0]
 801a876:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 801a87a:	d006      	beq.n	801a88a <phpalSli15693_Sw_SetConfig+0x212>
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	7d9b      	ldrb	r3, [r3, #22]
 801a880:	2b02      	cmp	r3, #2
 801a882:	d102      	bne.n	801a88a <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a884:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a888:	e0c8      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	685b      	ldr	r3, [r3, #4]
 801a88e:	f107 020c 	add.w	r2, r7, #12
 801a892:	210d      	movs	r1, #13
 801a894:	4618      	mov	r0, r3
 801a896:	f7f6 fc79 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801a89a:	4603      	mov	r3, r0
 801a89c:	81fb      	strh	r3, [r7, #14]
 801a89e:	89fb      	ldrh	r3, [r7, #14]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d001      	beq.n	801a8a8 <phpalSli15693_Sw_SetConfig+0x230>
 801a8a4:	89fb      	ldrh	r3, [r7, #14]
 801a8a6:	e0b9      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 801a8a8:	89bb      	ldrh	r3, [r7, #12]
 801a8aa:	883a      	ldrh	r2, [r7, #0]
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	f000 80af 	beq.w	801aa10 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	6858      	ldr	r0, [r3, #4]
 801a8b6:	883b      	ldrh	r3, [r7, #0]
 801a8b8:	3b0a      	subs	r3, #10
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	461a      	mov	r2, r3
 801a8be:	2106      	movs	r1, #6
 801a8c0:	f7f5 f816 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	81fb      	strh	r3, [r7, #14]
 801a8c8:	89fb      	ldrh	r3, [r7, #14]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d001      	beq.n	801a8d2 <phpalSli15693_Sw_SetConfig+0x25a>
 801a8ce:	89fb      	ldrh	r3, [r7, #14]
 801a8d0:	e0a4      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	685b      	ldr	r3, [r3, #4]
 801a8d6:	883a      	ldrh	r2, [r7, #0]
 801a8d8:	210d      	movs	r1, #13
 801a8da:	4618      	mov	r0, r3
 801a8dc:	f7f5 f808 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	81fb      	strh	r3, [r7, #14]
 801a8e4:	89fb      	ldrh	r3, [r7, #14]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	f000 8092 	beq.w	801aa10 <phpalSli15693_Sw_SetConfig+0x398>
 801a8ec:	89fb      	ldrh	r3, [r7, #14]
 801a8ee:	e095      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 801a8f0:	883b      	ldrh	r3, [r7, #0]
 801a8f2:	b2da      	uxtb	r2, r3
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	75da      	strb	r2, [r3, #23]
        break;
 801a8f8:	e08f      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	7d9b      	ldrb	r3, [r3, #22]
 801a8fe:	2b02      	cmp	r3, #2
 801a900:	d105      	bne.n	801a90e <phpalSli15693_Sw_SetConfig+0x296>
 801a902:	883b      	ldrh	r3, [r7, #0]
 801a904:	2b1a      	cmp	r3, #26
 801a906:	d002      	beq.n	801a90e <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a908:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a90c:	e086      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 801a90e:	883b      	ldrh	r3, [r7, #0]
 801a910:	2b1d      	cmp	r3, #29
 801a912:	d902      	bls.n	801a91a <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801a914:	f640 2323 	movw	r3, #2595	@ 0xa23
 801a918:	e080      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 801a91a:	883b      	ldrh	r3, [r7, #0]
 801a91c:	3b1a      	subs	r3, #26
 801a91e:	2b03      	cmp	r3, #3
 801a920:	d816      	bhi.n	801a950 <phpalSli15693_Sw_SetConfig+0x2d8>
 801a922:	a201      	add	r2, pc, #4	@ (adr r2, 801a928 <phpalSli15693_Sw_SetConfig+0x2b0>)
 801a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a928:	0801a939 	.word	0x0801a939
 801a92c:	0801a93f 	.word	0x0801a93f
 801a930:	0801a945 	.word	0x0801a945
 801a934:	0801a94b 	.word	0x0801a94b
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 801a938:	230b      	movs	r3, #11
 801a93a:	803b      	strh	r3, [r7, #0]
            break;
 801a93c:	e009      	b.n	801a952 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 801a93e:	231b      	movs	r3, #27
 801a940:	803b      	strh	r3, [r7, #0]
            break;
 801a942:	e006      	b.n	801a952 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801a944:	2300      	movs	r3, #0
 801a946:	803b      	strh	r3, [r7, #0]
            break;
 801a948:	e003      	b.n	801a952 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 801a94a:	2301      	movs	r3, #1
 801a94c:	803b      	strh	r3, [r7, #0]
            break;
 801a94e:	e000      	b.n	801a952 <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 801a950:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	685b      	ldr	r3, [r3, #4]
 801a956:	883a      	ldrh	r2, [r7, #0]
 801a958:	2109      	movs	r1, #9
 801a95a:	4618      	mov	r0, r3
 801a95c:	f7f4 ffc8 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a960:	4603      	mov	r3, r0
 801a962:	81fb      	strh	r3, [r7, #14]
 801a964:	89fb      	ldrh	r3, [r7, #14]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d054      	beq.n	801aa14 <phpalSli15693_Sw_SetConfig+0x39c>
 801a96a:	89fb      	ldrh	r3, [r7, #14]
 801a96c:	e056      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	7d9b      	ldrb	r3, [r3, #22]
 801a972:	2b02      	cmp	r3, #2
 801a974:	d105      	bne.n	801a982 <phpalSli15693_Sw_SetConfig+0x30a>
 801a976:	883b      	ldrh	r3, [r7, #0]
 801a978:	2b1a      	cmp	r3, #26
 801a97a:	d002      	beq.n	801a982 <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a97c:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a980:	e04c      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 801a982:	883b      	ldrh	r3, [r7, #0]
 801a984:	3b1a      	subs	r3, #26
 801a986:	2b03      	cmp	r3, #3
 801a988:	d816      	bhi.n	801a9b8 <phpalSli15693_Sw_SetConfig+0x340>
 801a98a:	a201      	add	r2, pc, #4	@ (adr r2, 801a990 <phpalSli15693_Sw_SetConfig+0x318>)
 801a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a990:	0801a9a1 	.word	0x0801a9a1
 801a994:	0801a9a7 	.word	0x0801a9a7
 801a998:	0801a9ad 	.word	0x0801a9ad
 801a99c:	0801a9b3 	.word	0x0801a9b3
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 801a9a0:	230d      	movs	r3, #13
 801a9a2:	803b      	strh	r3, [r7, #0]
            break;
 801a9a4:	e009      	b.n	801a9ba <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 801a9a6:	230f      	movs	r3, #15
 801a9a8:	803b      	strh	r3, [r7, #0]
            break;
 801a9aa:	e006      	b.n	801a9ba <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	803b      	strh	r3, [r7, #0]
            break;
 801a9b0:	e003      	b.n	801a9ba <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	803b      	strh	r3, [r7, #0]
            break;
 801a9b6:	e000      	b.n	801a9ba <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 801a9b8:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	883a      	ldrh	r2, [r7, #0]
 801a9c0:	210a      	movs	r1, #10
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7f4 ff94 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	81fb      	strh	r3, [r7, #14]
 801a9cc:	89fb      	ldrh	r3, [r7, #14]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d022      	beq.n	801aa18 <phpalSli15693_Sw_SetConfig+0x3a0>
 801a9d2:	89fb      	ldrh	r3, [r7, #14]
 801a9d4:	e022      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	7e1b      	ldrb	r3, [r3, #24]
 801a9da:	2b05      	cmp	r3, #5
 801a9dc:	d902      	bls.n	801a9e4 <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a9de:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a9e2:	e01b      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 801a9e4:	883b      	ldrh	r3, [r7, #0]
 801a9e6:	b2da      	uxtb	r2, r3
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	761a      	strb	r2, [r3, #24]
            break;
 801a9ec:	e015      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 801a9ee:	883b      	ldrh	r3, [r7, #0]
 801a9f0:	b2da      	uxtb	r2, r3
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	765a      	strb	r2, [r3, #25]
            break;
 801a9f6:	e010      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 801a9f8:	883b      	ldrh	r3, [r7, #0]
 801a9fa:	b2da      	uxtb	r2, r3
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	759a      	strb	r2, [r3, #22]
            break;
 801aa00:	e00b      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801aa02:	f640 2323 	movw	r3, #2595	@ 0xa23
 801aa06:	e009      	b.n	801aa1c <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 801aa08:	bf00      	nop
 801aa0a:	e006      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801aa0c:	bf00      	nop
 801aa0e:	e004      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801aa10:	bf00      	nop
 801aa12:	e002      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801aa14:	bf00      	nop
 801aa16:	e000      	b.n	801aa1a <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801aa18:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801aa1a:	2300      	movs	r3, #0
}
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	3710      	adds	r7, #16
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}

0801aa24 <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b086      	sub	sp, #24
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	60f8      	str	r0, [r7, #12]
 801aa2c:	460b      	mov	r3, r1
 801aa2e:	607a      	str	r2, [r7, #4]
 801aa30:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 801aa32:	897b      	ldrh	r3, [r7, #10]
 801aa34:	2b0a      	cmp	r3, #10
 801aa36:	f200 8115 	bhi.w	801ac64 <phpalSli15693_Sw_GetConfig+0x240>
 801aa3a:	a201      	add	r2, pc, #4	@ (adr r2, 801aa40 <phpalSli15693_Sw_GetConfig+0x1c>)
 801aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa40:	0801aa6d 	.word	0x0801aa6d
 801aa44:	0801aa79 	.word	0x0801aa79
 801aa48:	0801aa83 	.word	0x0801aa83
 801aa4c:	0801aaad 	.word	0x0801aaad
 801aa50:	0801aacb 	.word	0x0801aacb
 801aa54:	0801ab89 	.word	0x0801ab89
 801aa58:	0801ac19 	.word	0x0801ac19
 801aa5c:	0801ac35 	.word	0x0801ac35
 801aa60:	0801ac41 	.word	0x0801ac41
 801aa64:	0801ac4d 	.word	0x0801ac4d
 801aa68:	0801ac59 	.word	0x0801ac59
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	7a9b      	ldrb	r3, [r3, #10]
 801aa70:	461a      	mov	r2, r3
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	801a      	strh	r2, [r3, #0]
        break;
 801aa76:	e0fb      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	891a      	ldrh	r2, [r3, #8]
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	801a      	strh	r2, [r3, #0]
        break;
 801aa80:	e0f6      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	685b      	ldr	r3, [r3, #4]
 801aa86:	687a      	ldr	r2, [r7, #4]
 801aa88:	210d      	movs	r1, #13
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	f7f6 fb7e 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801aa90:	4603      	mov	r3, r0
 801aa92:	82fb      	strh	r3, [r7, #22]
 801aa94:	8afb      	ldrh	r3, [r7, #22]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d001      	beq.n	801aa9e <phpalSli15693_Sw_GetConfig+0x7a>
 801aa9a:	8afb      	ldrh	r3, [r7, #22]
 801aa9c:	e0e9      	b.n	801ac72 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	881b      	ldrh	r3, [r3, #0]
 801aaa2:	3b3c      	subs	r3, #60	@ 0x3c
 801aaa4:	b29a      	uxth	r2, r3
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	801a      	strh	r2, [r3, #0]
        break;
 801aaaa:	e0e1      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	687a      	ldr	r2, [r7, #4]
 801aab2:	210e      	movs	r1, #14
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7f6 fb69 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801aaba:	4603      	mov	r3, r0
 801aabc:	82fb      	strh	r3, [r7, #22]
 801aabe:	8afb      	ldrh	r3, [r7, #22]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	f000 80d2 	beq.w	801ac6a <phpalSli15693_Sw_GetConfig+0x246>
 801aac6:	8afb      	ldrh	r3, [r7, #22]
 801aac8:	e0d3      	b.n	801ac72 <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	685b      	ldr	r3, [r3, #4]
 801aace:	687a      	ldr	r2, [r7, #4]
 801aad0:	2109      	movs	r1, #9
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7f6 fb5a 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801aad8:	4603      	mov	r3, r0
 801aada:	82fb      	strh	r3, [r7, #22]
 801aadc:	8afb      	ldrh	r3, [r7, #22]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d001      	beq.n	801aae6 <phpalSli15693_Sw_GetConfig+0xc2>
 801aae2:	8afb      	ldrh	r3, [r7, #22]
 801aae4:	e0c5      	b.n	801ac72 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	881b      	ldrh	r3, [r3, #0]
 801aaea:	2b1b      	cmp	r3, #27
 801aaec:	d84a      	bhi.n	801ab84 <phpalSli15693_Sw_GetConfig+0x160>
 801aaee:	a201      	add	r2, pc, #4	@ (adr r2, 801aaf4 <phpalSli15693_Sw_GetConfig+0xd0>)
 801aaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaf4:	0801ab75 	.word	0x0801ab75
 801aaf8:	0801ab7d 	.word	0x0801ab7d
 801aafc:	0801ab85 	.word	0x0801ab85
 801ab00:	0801ab85 	.word	0x0801ab85
 801ab04:	0801ab85 	.word	0x0801ab85
 801ab08:	0801ab85 	.word	0x0801ab85
 801ab0c:	0801ab85 	.word	0x0801ab85
 801ab10:	0801ab85 	.word	0x0801ab85
 801ab14:	0801ab85 	.word	0x0801ab85
 801ab18:	0801ab85 	.word	0x0801ab85
 801ab1c:	0801ab85 	.word	0x0801ab85
 801ab20:	0801ab65 	.word	0x0801ab65
 801ab24:	0801ab85 	.word	0x0801ab85
 801ab28:	0801ab85 	.word	0x0801ab85
 801ab2c:	0801ab85 	.word	0x0801ab85
 801ab30:	0801ab85 	.word	0x0801ab85
 801ab34:	0801ab85 	.word	0x0801ab85
 801ab38:	0801ab85 	.word	0x0801ab85
 801ab3c:	0801ab85 	.word	0x0801ab85
 801ab40:	0801ab85 	.word	0x0801ab85
 801ab44:	0801ab85 	.word	0x0801ab85
 801ab48:	0801ab85 	.word	0x0801ab85
 801ab4c:	0801ab85 	.word	0x0801ab85
 801ab50:	0801ab85 	.word	0x0801ab85
 801ab54:	0801ab85 	.word	0x0801ab85
 801ab58:	0801ab85 	.word	0x0801ab85
 801ab5c:	0801ab85 	.word	0x0801ab85
 801ab60:	0801ab6d 	.word	0x0801ab6d
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	221a      	movs	r2, #26
 801ab68:	801a      	strh	r2, [r3, #0]
            break;
 801ab6a:	e00c      	b.n	801ab86 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	221b      	movs	r2, #27
 801ab70:	801a      	strh	r2, [r3, #0]
            break;
 801ab72:	e008      	b.n	801ab86 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	221c      	movs	r2, #28
 801ab78:	801a      	strh	r2, [r3, #0]
            break;
 801ab7a:	e004      	b.n	801ab86 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	221d      	movs	r2, #29
 801ab80:	801a      	strh	r2, [r3, #0]
            break;
 801ab82:	e000      	b.n	801ab86 <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 801ab84:	bf00      	nop
        }
        break;
 801ab86:	e073      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	685b      	ldr	r3, [r3, #4]
 801ab8c:	687a      	ldr	r2, [r7, #4]
 801ab8e:	210a      	movs	r1, #10
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7f6 fafb 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801ab96:	4603      	mov	r3, r0
 801ab98:	82fb      	strh	r3, [r7, #22]
 801ab9a:	8afb      	ldrh	r3, [r7, #22]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d001      	beq.n	801aba4 <phpalSli15693_Sw_GetConfig+0x180>
 801aba0:	8afb      	ldrh	r3, [r7, #22]
 801aba2:	e066      	b.n	801ac72 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	881b      	ldrh	r3, [r3, #0]
 801aba8:	2b0f      	cmp	r3, #15
 801abaa:	d833      	bhi.n	801ac14 <phpalSli15693_Sw_GetConfig+0x1f0>
 801abac:	a201      	add	r2, pc, #4	@ (adr r2, 801abb4 <phpalSli15693_Sw_GetConfig+0x190>)
 801abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abb2:	bf00      	nop
 801abb4:	0801ac05 	.word	0x0801ac05
 801abb8:	0801ac0d 	.word	0x0801ac0d
 801abbc:	0801ac15 	.word	0x0801ac15
 801abc0:	0801ac15 	.word	0x0801ac15
 801abc4:	0801ac15 	.word	0x0801ac15
 801abc8:	0801ac15 	.word	0x0801ac15
 801abcc:	0801ac15 	.word	0x0801ac15
 801abd0:	0801ac15 	.word	0x0801ac15
 801abd4:	0801ac15 	.word	0x0801ac15
 801abd8:	0801ac15 	.word	0x0801ac15
 801abdc:	0801ac15 	.word	0x0801ac15
 801abe0:	0801ac15 	.word	0x0801ac15
 801abe4:	0801ac15 	.word	0x0801ac15
 801abe8:	0801abf5 	.word	0x0801abf5
 801abec:	0801ac15 	.word	0x0801ac15
 801abf0:	0801abfd 	.word	0x0801abfd
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	221a      	movs	r2, #26
 801abf8:	801a      	strh	r2, [r3, #0]
            break;
 801abfa:	e00c      	b.n	801ac16 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	221b      	movs	r2, #27
 801ac00:	801a      	strh	r2, [r3, #0]
            break;
 801ac02:	e008      	b.n	801ac16 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	221c      	movs	r2, #28
 801ac08:	801a      	strh	r2, [r3, #0]
            break;
 801ac0a:	e004      	b.n	801ac16 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	221d      	movs	r2, #29
 801ac10:	801a      	strh	r2, [r3, #0]
            break;
 801ac12:	e000      	b.n	801ac16 <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 801ac14:	bf00      	nop
        }
        break;
 801ac16:	e02b      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	685b      	ldr	r3, [r3, #4]
 801ac1c:	687a      	ldr	r2, [r7, #4]
 801ac1e:	210d      	movs	r1, #13
 801ac20:	4618      	mov	r0, r3
 801ac22:	f7f6 fab3 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801ac26:	4603      	mov	r3, r0
 801ac28:	82fb      	strh	r3, [r7, #22]
 801ac2a:	8afb      	ldrh	r3, [r7, #22]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d01e      	beq.n	801ac6e <phpalSli15693_Sw_GetConfig+0x24a>
 801ac30:	8afb      	ldrh	r3, [r7, #22]
 801ac32:	e01e      	b.n	801ac72 <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	7ddb      	ldrb	r3, [r3, #23]
 801ac38:	461a      	mov	r2, r3
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	801a      	strh	r2, [r3, #0]
        break;
 801ac3e:	e017      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	7e1b      	ldrb	r3, [r3, #24]
 801ac44:	461a      	mov	r2, r3
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	801a      	strh	r2, [r3, #0]
        break;
 801ac4a:	e011      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	7e5b      	ldrb	r3, [r3, #25]
 801ac50:	461a      	mov	r2, r3
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	801a      	strh	r2, [r3, #0]
        break;
 801ac56:	e00b      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	7d9b      	ldrb	r3, [r3, #22]
 801ac5c:	461a      	mov	r2, r3
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	801a      	strh	r2, [r3, #0]
        break;
 801ac62:	e005      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801ac64:	f640 2323 	movw	r3, #2595	@ 0xa23
 801ac68:	e003      	b.n	801ac72 <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 801ac6a:	bf00      	nop
 801ac6c:	e000      	b.n	801ac70 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 801ac6e:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801ac70:	2300      	movs	r3, #0
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	3718      	adds	r7, #24
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd80      	pop	{r7, pc}
 801ac7a:	bf00      	nop

0801ac7c <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b08e      	sub	sp, #56	@ 0x38
 801ac80:	af0c      	add	r7, sp, #48	@ 0x30
 801ac82:	6078      	str	r0, [r7, #4]
 801ac84:	4608      	mov	r0, r1
 801ac86:	4611      	mov	r1, r2
 801ac88:	461a      	mov	r2, r3
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	70fb      	strb	r3, [r7, #3]
 801ac8e:	460b      	mov	r3, r1
 801ac90:	70bb      	strb	r3, [r7, #2]
 801ac92:	4613      	mov	r3, r2
 801ac94:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 801ac96:	7878      	ldrb	r0, [r7, #1]
 801ac98:	78ba      	ldrb	r2, [r7, #2]
 801ac9a:	78f9      	ldrb	r1, [r7, #3]
 801ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aca2:	930a      	str	r3, [sp, #40]	@ 0x28
 801aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca6:	9309      	str	r3, [sp, #36]	@ 0x24
 801aca8:	6a3b      	ldr	r3, [r7, #32]
 801acaa:	9308      	str	r3, [sp, #32]
 801acac:	2300      	movs	r3, #0
 801acae:	9307      	str	r3, [sp, #28]
 801acb0:	8bbb      	ldrh	r3, [r7, #28]
 801acb2:	9306      	str	r3, [sp, #24]
 801acb4:	7e3b      	ldrb	r3, [r7, #24]
 801acb6:	9305      	str	r3, [sp, #20]
 801acb8:	7d3b      	ldrb	r3, [r7, #20]
 801acba:	9304      	str	r3, [sp, #16]
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	9303      	str	r3, [sp, #12]
 801acc0:	2300      	movs	r3, #0
 801acc2:	9302      	str	r3, [sp, #8]
 801acc4:	2300      	movs	r3, #0
 801acc6:	9301      	str	r3, [sp, #4]
 801acc8:	2300      	movs	r3, #0
 801acca:	9300      	str	r3, [sp, #0]
 801accc:	4603      	mov	r3, r0
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f000 f805 	bl	801acde <phpalSli15693_Sw_InventoryExt>
 801acd4:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 801acd6:	4618      	mov	r0, r3
 801acd8:	3708      	adds	r7, #8
 801acda:	46bd      	mov	sp, r7
 801acdc:	bd80      	pop	{r7, pc}

0801acde <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 801acde:	b580      	push	{r7, lr}
 801ace0:	b090      	sub	sp, #64	@ 0x40
 801ace2:	af02      	add	r7, sp, #8
 801ace4:	6078      	str	r0, [r7, #4]
 801ace6:	4608      	mov	r0, r1
 801ace8:	4611      	mov	r1, r2
 801acea:	461a      	mov	r2, r3
 801acec:	4603      	mov	r3, r0
 801acee:	70fb      	strb	r3, [r7, #3]
 801acf0:	460b      	mov	r3, r1
 801acf2:	70bb      	strb	r3, [r7, #2]
 801acf4:	4613      	mov	r3, r2
 801acf6:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 801acf8:	2300      	movs	r3, #0
 801acfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 801acfe:	2300      	movs	r3, #0
 801ad00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801ad04:	2300      	movs	r3, #0
 801ad06:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801ad08:	2300      	movs	r3, #0
 801ad0a:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 801ad12:	2300      	movs	r3, #0
 801ad14:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 801ad16:	2300      	movs	r3, #0
 801ad18:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 801ad1e:	2300      	movs	r3, #0
 801ad20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 801ad22:	2300      	movs	r3, #0
 801ad24:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 801ad26:	2300      	movs	r3, #0
 801ad28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	2200      	movs	r2, #0
 801ad36:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 801ad38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d00e      	beq.n	801ad5c <phpalSli15693_Sw_InventoryExt+0x7e>
 801ad3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d00b      	beq.n	801ad5c <phpalSli15693_Sw_InventoryExt+0x7e>
 801ad44:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801ad48:	f003 0310 	and.w	r3, r3, #16
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d008      	beq.n	801ad62 <phpalSli15693_Sw_InventoryExt+0x84>
 801ad50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d002      	beq.n	801ad5c <phpalSli15693_Sw_InventoryExt+0x7e>
 801ad56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d102      	bne.n	801ad62 <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801ad5c:	f640 2321 	movw	r3, #2593	@ 0xa21
 801ad60:	e334      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 801ad62:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801ad66:	f003 0304 	and.w	r3, r3, #4
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d005      	beq.n	801ad7a <phpalSli15693_Sw_InventoryExt+0x9c>
 801ad6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d102      	bne.n	801ad7a <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801ad74:	f640 2321 	movw	r3, #2593	@ 0xa21
 801ad78:	e328      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 801ad7a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801ad7e:	f003 0308 	and.w	r3, r3, #8
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d005      	beq.n	801ad92 <phpalSli15693_Sw_InventoryExt+0xb4>
 801ad86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d102      	bne.n	801ad92 <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801ad8c:	f640 2321 	movw	r3, #2593	@ 0xa21
 801ad90:	e31c      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 801ad92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad94:	2200      	movs	r2, #0
 801ad96:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 801ad98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 801ad9e:	78bb      	ldrb	r3, [r7, #2]
 801ada0:	f003 0320 	and.w	r3, r3, #32
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d003      	beq.n	801adb0 <phpalSli15693_Sw_InventoryExt+0xd2>
 801ada8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801adac:	2b40      	cmp	r3, #64	@ 0x40
 801adae:	d808      	bhi.n	801adc2 <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 801adb0:	78bb      	ldrb	r3, [r7, #2]
 801adb2:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d106      	bne.n	801adc8 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 801adba:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801adbe:	2b3c      	cmp	r3, #60	@ 0x3c
 801adc0:	d902      	bls.n	801adc8 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801adc2:	f640 2321 	movw	r3, #2593	@ 0xa21
 801adc6:	e301      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 801adc8:	78fb      	ldrb	r3, [r7, #3]
 801adca:	2b01      	cmp	r3, #1
 801adcc:	d010      	beq.n	801adf0 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 801adce:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801add2:	2b00      	cmp	r3, #0
 801add4:	d102      	bne.n	801addc <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801add6:	f640 2321 	movw	r3, #2593	@ 0xa21
 801adda:	e2f7      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 801addc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801ade0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801ade4:	4413      	add	r3, r2
 801ade6:	2bff      	cmp	r3, #255	@ 0xff
 801ade8:	d902      	bls.n	801adf0 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801adea:	f640 2321 	movw	r3, #2593	@ 0xa21
 801adee:	e2ed      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 801adf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801adf4:	1c5a      	adds	r2, r3, #1
 801adf6:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801adfa:	3338      	adds	r3, #56	@ 0x38
 801adfc:	443b      	add	r3, r7
 801adfe:	78fa      	ldrb	r2, [r7, #3]
 801ae00:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801ae04:	78bb      	ldrb	r3, [r7, #2]
 801ae06:	b29b      	uxth	r3, r3
 801ae08:	461a      	mov	r2, r3
 801ae0a:	2100      	movs	r1, #0
 801ae0c:	6878      	ldr	r0, [r7, #4]
 801ae0e:	f7ff fc33 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801ae12:	4603      	mov	r3, r0
 801ae14:	853b      	strh	r3, [r7, #40]	@ 0x28
 801ae16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d001      	beq.n	801ae20 <phpalSli15693_Sw_InventoryExt+0x142>
 801ae1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ae1e:	e2d5      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801ae20:	78fb      	ldrb	r3, [r7, #3]
 801ae22:	2ba1      	cmp	r3, #161	@ 0xa1
 801ae24:	d002      	beq.n	801ae2c <phpalSli15693_Sw_InventoryExt+0x14e>
 801ae26:	78fb      	ldrb	r3, [r7, #3]
 801ae28:	2bb1      	cmp	r3, #177	@ 0xb1
 801ae2a:	d120      	bne.n	801ae6e <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801ae2c:	78bb      	ldrb	r3, [r7, #2]
 801ae2e:	f003 0302 	and.w	r3, r3, #2
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d00d      	beq.n	801ae52 <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	685b      	ldr	r3, [r3, #4]
 801ae3a:	220f      	movs	r2, #15
 801ae3c:	210a      	movs	r1, #10
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f7f4 fd56 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801ae44:	4603      	mov	r3, r0
 801ae46:	853b      	strh	r3, [r7, #40]	@ 0x28
 801ae48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d00f      	beq.n	801ae6e <phpalSli15693_Sw_InventoryExt+0x190>
 801ae4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ae50:	e2bc      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	685b      	ldr	r3, [r3, #4]
 801ae56:	220e      	movs	r2, #14
 801ae58:	210a      	movs	r1, #10
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7f4 fd48 	bl	800f8f0 <phhalHw_Pn5180_SetConfig>
 801ae60:	4603      	mov	r3, r0
 801ae62:	853b      	strh	r3, [r7, #40]	@ 0x28
 801ae64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d001      	beq.n	801ae6e <phpalSli15693_Sw_InventoryExt+0x190>
 801ae6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ae6c:	e2ae      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 801ae6e:	78bb      	ldrb	r3, [r7, #2]
 801ae70:	f003 0310 	and.w	r3, r3, #16
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d00e      	beq.n	801ae96 <phpalSli15693_Sw_InventoryExt+0x1b8>
 801ae78:	78bb      	ldrb	r3, [r7, #2]
 801ae7a:	f003 0304 	and.w	r3, r3, #4
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d009      	beq.n	801ae96 <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 801ae82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ae86:	1c5a      	adds	r2, r3, #1
 801ae88:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801ae8c:	3338      	adds	r3, #56	@ 0x38
 801ae8e:	443b      	add	r3, r7
 801ae90:	787a      	ldrb	r2, [r7, #1]
 801ae92:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 801ae96:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d03b      	beq.n	801af16 <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 801ae9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801aea2:	1c5a      	adds	r2, r3, #1
 801aea4:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801aea8:	4619      	mov	r1, r3
 801aeaa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801aeae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801aeb2:	b2da      	uxtb	r2, r3
 801aeb4:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801aeb8:	443b      	add	r3, r7
 801aeba:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 801aebe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801aec2:	1c5a      	adds	r2, r3, #1
 801aec4:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801aec8:	3338      	adds	r3, #56	@ 0x38
 801aeca:	443b      	add	r3, r7
 801aecc:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801aed0:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 801aed4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801aed8:	f003 0304 	and.w	r3, r3, #4
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d025      	beq.n	801af2c <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 801aee0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801aee4:	1c5a      	adds	r2, r3, #1
 801aee6:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801aeea:	4619      	mov	r1, r3
 801aeec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aeee:	781a      	ldrb	r2, [r3, #0]
 801aef0:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801aef4:	443b      	add	r3, r7
 801aef6:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 801aefa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801aefe:	1c5a      	adds	r2, r3, #1
 801af00:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801af04:	4619      	mov	r1, r3
 801af06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801af08:	785a      	ldrb	r2, [r3, #1]
 801af0a:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801af0e:	443b      	add	r3, r7
 801af10:	f803 2c24 	strb.w	r2, [r3, #-36]
 801af14:	e00a      	b.n	801af2c <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 801af16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801af1a:	1c5a      	adds	r2, r3, #1
 801af1c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801af20:	3338      	adds	r3, #56	@ 0x38
 801af22:	443b      	add	r3, r7
 801af24:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801af28:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 801af2c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801af30:	f003 0307 	and.w	r3, r3, #7
 801af34:	b2db      	uxtb	r3, r3
 801af36:	2b00      	cmp	r3, #0
 801af38:	d006      	beq.n	801af48 <phpalSli15693_Sw_InventoryExt+0x26a>
 801af3a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801af3e:	08db      	lsrs	r3, r3, #3
 801af40:	b2db      	uxtb	r3, r3
 801af42:	3301      	adds	r3, #1
 801af44:	b2db      	uxtb	r3, r3
 801af46:	e003      	b.n	801af50 <phpalSli15693_Sw_InventoryExt+0x272>
 801af48:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801af4c:	08db      	lsrs	r3, r3, #3
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	330c      	adds	r3, #12
 801af58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801af5c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801af5e:	4618      	mov	r0, r3
 801af60:	f006 fedd 	bl	8021d1e <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801af6a:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 801af6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801af70:	f107 0214 	add.w	r2, r7, #20
 801af74:	4413      	add	r3, r2
 801af76:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801af7a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801af7c:	4618      	mov	r0, r3
 801af7e:	f006 fece 	bl	8021d1e <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 801af82:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801af86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801af8a:	4413      	add	r3, r2
 801af8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 801af90:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801af94:	f003 0307 	and.w	r3, r3, #7
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d019      	beq.n	801afd0 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 801af9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801afa0:	3b01      	subs	r3, #1
 801afa2:	3338      	adds	r3, #56	@ 0x38
 801afa4:	443b      	add	r3, r7
 801afa6:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 801afaa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801afae:	f003 0307 	and.w	r3, r3, #7
 801afb2:	f1c3 0308 	rsb	r3, r3, #8
 801afb6:	22ff      	movs	r2, #255	@ 0xff
 801afb8:	fa22 f303 	lsr.w	r3, r2, r3
 801afbc:	b2da      	uxtb	r2, r3
 801afbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801afc2:	3b01      	subs	r3, #1
 801afc4:	400a      	ands	r2, r1
 801afc6:	b2d2      	uxtb	r2, r2
 801afc8:	3338      	adds	r3, #56	@ 0x38
 801afca:	443b      	add	r3, r7
 801afcc:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	685b      	ldr	r3, [r3, #4]
 801afd4:	f107 020c 	add.w	r2, r7, #12
 801afd8:	210c      	movs	r1, #12
 801afda:	4618      	mov	r0, r3
 801afdc:	f7f6 f8d6 	bl	801118c <phhalHw_Pn5180_GetConfig>
 801afe0:	4603      	mov	r3, r0
 801afe2:	853b      	strh	r3, [r7, #40]	@ 0x28
 801afe4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d001      	beq.n	801afee <phpalSli15693_Sw_InventoryExt+0x310>
 801afea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801afec:	e1ee      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 801afee:	89bb      	ldrh	r3, [r7, #12]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d01f      	beq.n	801b034 <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801aff4:	78fb      	ldrb	r3, [r7, #3]
 801aff6:	2ba1      	cmp	r3, #161	@ 0xa1
 801aff8:	d002      	beq.n	801b000 <phpalSli15693_Sw_InventoryExt+0x322>
 801affa:	78fb      	ldrb	r3, [r7, #3]
 801affc:	2bb1      	cmp	r3, #177	@ 0xb1
 801affe:	d10c      	bne.n	801b01a <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b000:	78bb      	ldrb	r3, [r7, #2]
 801b002:	f003 0302 	and.w	r3, r3, #2
 801b006:	2b00      	cmp	r3, #0
 801b008:	d003      	beq.n	801b012 <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 801b00a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801b00e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b010:	e02f      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 801b012:	f240 2373 	movw	r3, #627	@ 0x273
 801b016:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b018:	e02b      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b01a:	78bb      	ldrb	r3, [r7, #2]
 801b01c:	f003 0302 	and.w	r3, r3, #2
 801b020:	2b00      	cmp	r3, #0
 801b022:	d003      	beq.n	801b02c <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 801b024:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801b028:	867b      	strh	r3, [r7, #50]	@ 0x32
 801b02a:	e022      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 801b02c:	f240 33a1 	movw	r3, #929	@ 0x3a1
 801b030:	867b      	strh	r3, [r7, #50]	@ 0x32
 801b032:	e01e      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801b034:	78fb      	ldrb	r3, [r7, #3]
 801b036:	2ba1      	cmp	r3, #161	@ 0xa1
 801b038:	d002      	beq.n	801b040 <phpalSli15693_Sw_InventoryExt+0x362>
 801b03a:	78fb      	ldrb	r3, [r7, #3]
 801b03c:	2bb1      	cmp	r3, #177	@ 0xb1
 801b03e:	d10c      	bne.n	801b05a <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b040:	78bb      	ldrb	r3, [r7, #2]
 801b042:	f003 0302 	and.w	r3, r3, #2
 801b046:	2b00      	cmp	r3, #0
 801b048:	d003      	beq.n	801b052 <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 801b04a:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 801b04e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b050:	e00f      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801b052:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801b056:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b058:	e00b      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b05a:	78bb      	ldrb	r3, [r7, #2]
 801b05c:	f003 0302 	and.w	r3, r3, #2
 801b060:	2b00      	cmp	r3, #0
 801b062:	d003      	beq.n	801b06c <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 801b064:	f241 039c 	movw	r3, #4252	@ 0x109c
 801b068:	867b      	strh	r3, [r7, #50]	@ 0x32
 801b06a:	e002      	b.n	801b072 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 801b06c:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 801b070:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801b072:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801b074:	461a      	mov	r2, r3
 801b076:	2102      	movs	r1, #2
 801b078:	6878      	ldr	r0, [r7, #4]
 801b07a:	f7ff fafd 	bl	801a678 <phpalSli15693_Sw_SetConfig>
 801b07e:	4603      	mov	r3, r0
 801b080:	853b      	strh	r3, [r7, #40]	@ 0x28
 801b082:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b084:	2b00      	cmp	r3, #0
 801b086:	d001      	beq.n	801b08c <phpalSli15693_Sw_InventoryExt+0x3ae>
 801b088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b08a:	e19f      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 801b08c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b090:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	7ddb      	ldrb	r3, [r3, #23]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d016      	beq.n	801b0ca <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 801b09c:	78bb      	ldrb	r3, [r7, #2]
 801b09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d001      	beq.n	801b0aa <phpalSli15693_Sw_InventoryExt+0x3cc>
 801b0a6:	2328      	movs	r3, #40	@ 0x28
 801b0a8:	e000      	b.n	801b0ac <phpalSli15693_Sw_InventoryExt+0x3ce>
 801b0aa:	233c      	movs	r3, #60	@ 0x3c
 801b0ac:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 801b0ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b0b0:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 801b0b2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801b0b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d20c      	bcs.n	801b0d6 <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 801b0bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b0c0:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801b0c8:	e005      	b.n	801b0d6 <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 801b0ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b0ce:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 801b0d0:	2301      	movs	r3, #1
 801b0d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	7a9b      	ldrb	r3, [r3, #10]
 801b0da:	f003 0304 	and.w	r3, r3, #4
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d107      	bne.n	801b0f2 <phpalSli15693_Sw_InventoryExt+0x414>
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	7a9b      	ldrb	r3, [r3, #10]
 801b0e6:	f003 0320 	and.w	r3, r3, #32
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d001      	beq.n	801b0f2 <phpalSli15693_Sw_InventoryExt+0x414>
 801b0ee:	2301      	movs	r3, #1
 801b0f0:	e000      	b.n	801b0f4 <phpalSli15693_Sw_InventoryExt+0x416>
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d002      	beq.n	801b0fe <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	2201      	movs	r2, #1
 801b0fc:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 801b0fe:	2301      	movs	r3, #1
 801b100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 801b104:	78fb      	ldrb	r3, [r7, #3]
 801b106:	2b01      	cmp	r3, #1
 801b108:	d028      	beq.n	801b15c <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 801b10a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b10c:	3b01      	subs	r3, #1
 801b10e:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 801b110:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801b114:	2b00      	cmp	r3, #0
 801b116:	d005      	beq.n	801b124 <phpalSli15693_Sw_InventoryExt+0x446>
 801b118:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b11c:	f003 0310 	and.w	r3, r3, #16
 801b120:	2b00      	cmp	r3, #0
 801b122:	d11b      	bne.n	801b15c <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 801b124:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b126:	b2da      	uxtb	r2, r3
 801b128:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801b12c:	1c59      	adds	r1, r3, #1
 801b12e:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801b132:	4619      	mov	r1, r3
 801b134:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801b138:	4413      	add	r3, r2
 801b13a:	b2da      	uxtb	r2, r3
 801b13c:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801b140:	443b      	add	r3, r7
 801b142:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 801b146:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801b14a:	1c5a      	adds	r2, r3, #1
 801b14c:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 801b150:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801b152:	b2d2      	uxtb	r2, r2
 801b154:	3338      	adds	r3, #56	@ 0x38
 801b156:	443b      	add	r3, r7
 801b158:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 801b15c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801b160:	b299      	uxth	r1, r3
 801b162:	f107 0214 	add.w	r2, r7, #20
 801b166:	f107 030e 	add.w	r3, r7, #14
 801b16a:	9301      	str	r3, [sp, #4]
 801b16c:	f107 0310 	add.w	r3, r7, #16
 801b170:	9300      	str	r3, [sp, #0]
 801b172:	460b      	mov	r3, r1
 801b174:	2100      	movs	r1, #0
 801b176:	6878      	ldr	r0, [r7, #4]
 801b178:	f7ff f94c 	bl	801a414 <phpalSli15693_Sw_Exchange>
 801b17c:	4603      	mov	r3, r0
 801b17e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 801b180:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b182:	b2db      	uxtb	r3, r3
 801b184:	2b00      	cmp	r3, #0
 801b186:	d006      	beq.n	801b196 <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	7a9b      	ldrb	r3, [r3, #10]
 801b18c:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 801b190:	b2da      	uxtb	r2, r3
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 801b196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d001      	beq.n	801b1a0 <phpalSli15693_Sw_InventoryExt+0x4c2>
 801b19c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b19e:	e115      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 801b1a0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d011      	beq.n	801b1cc <phpalSli15693_Sw_InventoryExt+0x4ee>
 801b1a8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b1ac:	f003 0308 	and.w	r3, r3, #8
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d00b      	beq.n	801b1cc <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 801b1b4:	693b      	ldr	r3, [r7, #16]
 801b1b6:	881b      	ldrh	r3, [r3, #0]
 801b1b8:	b29a      	uxth	r2, r3
 801b1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b1bc:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 801b1be:	693b      	ldr	r3, [r7, #16]
 801b1c0:	3302      	adds	r3, #2
 801b1c2:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 801b1c4:	89fb      	ldrh	r3, [r7, #14]
 801b1c6:	3b02      	subs	r3, #2
 801b1c8:	b29b      	uxth	r3, r3
 801b1ca:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 801b1cc:	78fb      	ldrb	r3, [r7, #3]
 801b1ce:	2b01      	cmp	r3, #1
 801b1d0:	d123      	bne.n	801b21a <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 801b1d2:	89fb      	ldrh	r3, [r7, #14]
 801b1d4:	2b09      	cmp	r3, #9
 801b1d6:	d002      	beq.n	801b1de <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801b1d8:	f640 2306 	movw	r3, #2566	@ 0xa06
 801b1dc:	e0f6      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 801b1de:	693b      	ldr	r3, [r7, #16]
 801b1e0:	781a      	ldrb	r2, [r3, #0]
 801b1e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b1e4:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 801b1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b1e8:	2201      	movs	r2, #1
 801b1ea:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	f103 000c 	add.w	r0, r3, #12
 801b1f2:	693b      	ldr	r3, [r7, #16]
 801b1f4:	3301      	adds	r3, #1
 801b1f6:	2208      	movs	r2, #8
 801b1f8:	4619      	mov	r1, r3
 801b1fa:	f006 fd90 	bl	8021d1e <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	2240      	movs	r2, #64	@ 0x40
 801b202:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	330c      	adds	r3, #12
 801b208:	2208      	movs	r2, #8
 801b20a:	4619      	mov	r1, r3
 801b20c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801b20e:	f006 fd86 	bl	8021d1e <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801b212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b214:	2208      	movs	r2, #8
 801b216:	701a      	strb	r2, [r3, #0]
 801b218:	e099      	b.n	801b34e <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 801b21a:	78bb      	ldrb	r3, [r7, #2]
 801b21c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b220:	2b00      	cmp	r3, #0
 801b222:	f000 8083 	beq.w	801b32c <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801b226:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b22a:	f1c3 0308 	rsb	r3, r3, #8
 801b22e:	b2da      	uxtb	r2, r3
 801b230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b232:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 801b234:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d018      	beq.n	801b26e <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	7d1b      	ldrb	r3, [r3, #20]
 801b240:	08db      	lsrs	r3, r3, #3
 801b242:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801b246:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b24a:	f1c3 0308 	rsb	r3, r3, #8
 801b24e:	b2da      	uxtb	r2, r3
 801b250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b252:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 801b254:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d008      	beq.n	801b26e <phpalSli15693_Sw_InventoryExt+0x590>
 801b25c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b260:	f003 0302 	and.w	r3, r3, #2
 801b264:	2b00      	cmp	r3, #0
 801b266:	d002      	beq.n	801b26e <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801b268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b26a:	2208      	movs	r2, #8
 801b26c:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 801b26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b270:	781b      	ldrb	r3, [r3, #0]
 801b272:	461a      	mov	r2, r3
 801b274:	89fb      	ldrh	r3, [r7, #14]
 801b276:	429a      	cmp	r2, r3
 801b278:	d902      	bls.n	801b280 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801b27a:	f640 2306 	movw	r3, #2566	@ 0xa06
 801b27e:	e0a5      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 801b280:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b284:	2b07      	cmp	r3, #7
 801b286:	d843      	bhi.n	801b310 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 801b288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b28a:	781b      	ldrb	r3, [r3, #0]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d102      	bne.n	801b296 <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801b290:	f640 2306 	movw	r3, #2566	@ 0xa06
 801b294:	e09a      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 801b296:	6939      	ldr	r1, [r7, #16]
 801b298:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b29a:	781b      	ldrb	r3, [r3, #0]
 801b29c:	461a      	mov	r2, r3
 801b29e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801b2a0:	f006 fd3d 	bl	8021d1e <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 801b2a4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b2a8:	f003 0307 	and.w	r3, r3, #7
 801b2ac:	b2db      	uxtb	r3, r3
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d022      	beq.n	801b2f8 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 801b2b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b2b6:	2b06      	cmp	r3, #6
 801b2b8:	d80e      	bhi.n	801b2d8 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 801b2ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b2be:	3301      	adds	r3, #1
 801b2c0:	3308      	adds	r3, #8
 801b2c2:	687a      	ldr	r2, [r7, #4]
 801b2c4:	4413      	add	r3, r2
 801b2c6:	1d18      	adds	r0, r3, #4
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	1c59      	adds	r1, r3, #1
 801b2cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	3b01      	subs	r3, #1
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	f006 fd23 	bl	8021d1e <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 801b2d8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	4413      	add	r3, r2
 801b2e0:	7b19      	ldrb	r1, [r3, #12]
 801b2e2:	693b      	ldr	r3, [r7, #16]
 801b2e4:	781a      	ldrb	r2, [r3, #0]
 801b2e6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b2ea:	430a      	orrs	r2, r1
 801b2ec:	b2d1      	uxtb	r1, r2
 801b2ee:	687a      	ldr	r2, [r7, #4]
 801b2f0:	4413      	add	r3, r2
 801b2f2:	460a      	mov	r2, r1
 801b2f4:	731a      	strb	r2, [r3, #12]
 801b2f6:	e00b      	b.n	801b310 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 801b2f8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801b2fc:	3308      	adds	r3, #8
 801b2fe:	687a      	ldr	r2, [r7, #4]
 801b300:	4413      	add	r3, r2
 801b302:	1d18      	adds	r0, r3, #4
 801b304:	6939      	ldr	r1, [r7, #16]
 801b306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b308:	781b      	ldrb	r3, [r3, #0]
 801b30a:	461a      	mov	r2, r3
 801b30c:	f006 fd07 	bl	8021d1e <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	2240      	movs	r2, #64	@ 0x40
 801b314:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b31a:	7812      	ldrb	r2, [r2, #0]
 801b31c:	4413      	add	r3, r2
 801b31e:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 801b320:	89fb      	ldrh	r3, [r7, #14]
 801b322:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b324:	7812      	ldrb	r2, [r2, #0]
 801b326:	1a9b      	subs	r3, r3, r2
 801b328:	b29b      	uxth	r3, r3
 801b32a:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 801b32c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b32e:	881b      	ldrh	r3, [r3, #0]
 801b330:	461a      	mov	r2, r3
 801b332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b334:	4413      	add	r3, r2
 801b336:	6939      	ldr	r1, [r7, #16]
 801b338:	89fa      	ldrh	r2, [r7, #14]
 801b33a:	4618      	mov	r0, r3
 801b33c:	f006 fcef 	bl	8021d1e <memcpy>
            *pDataLength += wRespLength;
 801b340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b342:	881a      	ldrh	r2, [r3, #0]
 801b344:	89fb      	ldrh	r3, [r7, #14]
 801b346:	4413      	add	r3, r2
 801b348:	b29a      	uxth	r2, r3
 801b34a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b34c:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 801b34e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b350:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b352:	4413      	add	r3, r2
 801b354:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 801b356:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b358:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 801b35a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b35e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 801b362:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801b366:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b368:	1ad2      	subs	r2, r2, r3
 801b36a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b36c:	429a      	cmp	r2, r3
 801b36e:	da04      	bge.n	801b37a <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 801b370:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801b374:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b376:	1ad3      	subs	r3, r2, r3
 801b378:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 801b37a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b37e:	009b      	lsls	r3, r3, #2
 801b380:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b382:	8812      	ldrh	r2, [r2, #0]
 801b384:	4293      	cmp	r3, r2
 801b386:	d102      	bne.n	801b38e <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 801b388:	2301      	movs	r3, #1
 801b38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 801b38e:	2300      	movs	r3, #0
 801b390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 801b394:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801b398:	2b00      	cmp	r3, #0
 801b39a:	f43f aeb3 	beq.w	801b104 <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	7a9b      	ldrb	r3, [r3, #10]
 801b3a2:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 801b3a6:	b2da      	uxtb	r2, r3
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 801b3b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d001      	beq.n	801b3bc <phpalSli15693_Sw_InventoryExt+0x6de>
 801b3b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b3ba:	e007      	b.n	801b3cc <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	7a9b      	ldrb	r3, [r3, #10]
 801b3c0:	f043 0320 	orr.w	r3, r3, #32
 801b3c4:	b2da      	uxtb	r2, r3
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 801b3ca:	2300      	movs	r3, #0
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3738      	adds	r7, #56	@ 0x38
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}

0801b3d4 <phDriver_PinConfig>:
 * PORT/GPIO PIN API's
 *******************************************************************************/

/* GPIO FUNC_1:配置GPIO引脚的功能和属性 */
phStatus_t phDriver_PinConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc, phDriver_Pin_Config_t *pPinConfig)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b08a      	sub	sp, #40	@ 0x28
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	60f8      	str	r0, [r7, #12]
 801b3dc:	607b      	str	r3, [r7, #4]
 801b3de:	460b      	mov	r3, r1
 801b3e0:	817b      	strh	r3, [r7, #10]
 801b3e2:	4613      	mov	r3, r2
 801b3e4:	727b      	strb	r3, [r7, #9]
	uint32_t mode;

	// 空指针保护
	if (pPinConfig == NULL)
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d101      	bne.n	801b3f0 <phDriver_PinConfig+0x1c>
	    return PH_DRIVER_ERROR;
 801b3ec:	2380      	movs	r3, #128	@ 0x80
 801b3ee:	e039      	b.n	801b464 <phDriver_PinConfig+0x90>

	if(GPIO_Pin == PN5180_IRQ_Pin)
 801b3f0:	897b      	ldrh	r3, [r7, #10]
 801b3f2:	2b10      	cmp	r3, #16
 801b3f4:	d135      	bne.n	801b462 <phDriver_PinConfig+0x8e>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b3f6:	f107 0310 	add.w	r3, r7, #16
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	601a      	str	r2, [r3, #0]
 801b3fe:	605a      	str	r2, [r3, #4]
 801b400:	609a      	str	r2, [r3, #8]
 801b402:	60da      	str	r2, [r3, #12]
 801b404:	611a      	str	r2, [r3, #16]

		HAL_GPIO_DeInit(PN5180_IRQ_GPIO_Port, PN5180_IRQ_Pin);
 801b406:	2110      	movs	r1, #16
 801b408:	4818      	ldr	r0, [pc, #96]	@ (801b46c <phDriver_PinConfig+0x98>)
 801b40a:	f000 fe91 	bl	801c130 <HAL_GPIO_DeInit>

		mode = (pPinConfig->bPullSelect == PH_DRIVER_PULL_DOWN)?GPIO_PULLDOWN:GPIO_PULLUP;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	781b      	ldrb	r3, [r3, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d101      	bne.n	801b41a <phDriver_PinConfig+0x46>
 801b416:	2302      	movs	r3, #2
 801b418:	e000      	b.n	801b41c <phDriver_PinConfig+0x48>
 801b41a:	2301      	movs	r3, #1
 801b41c:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Pull = mode;
 801b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b420:	61bb      	str	r3, [r7, #24]

		switch(pPinConfig->eInterruptConfig)
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	789b      	ldrb	r3, [r3, #2]
 801b426:	2b05      	cmp	r3, #5
 801b428:	d00e      	beq.n	801b448 <phDriver_PinConfig+0x74>
 801b42a:	2b05      	cmp	r3, #5
 801b42c:	dc10      	bgt.n	801b450 <phDriver_PinConfig+0x7c>
 801b42e:	2b03      	cmp	r3, #3
 801b430:	d002      	beq.n	801b438 <phDriver_PinConfig+0x64>
 801b432:	2b04      	cmp	r3, #4
 801b434:	d004      	beq.n	801b440 <phDriver_PinConfig+0x6c>
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
			    break;

			default:
				/* Do Nothing. */
				break;
 801b436:	e00b      	b.n	801b450 <phDriver_PinConfig+0x7c>
				GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801b438:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 801b43c:	617b      	str	r3, [r7, #20]
				break;
 801b43e:	e008      	b.n	801b452 <phDriver_PinConfig+0x7e>
				GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801b440:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 801b444:	617b      	str	r3, [r7, #20]
				break;
 801b446:	e004      	b.n	801b452 <phDriver_PinConfig+0x7e>
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801b448:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 801b44c:	617b      	str	r3, [r7, #20]
			    break;
 801b44e:	e000      	b.n	801b452 <phDriver_PinConfig+0x7e>
				break;
 801b450:	bf00      	nop
	    }
		GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 801b452:	2310      	movs	r3, #16
 801b454:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 801b456:	f107 0310 	add.w	r3, r7, #16
 801b45a:	4619      	mov	r1, r3
 801b45c:	4803      	ldr	r0, [pc, #12]	@ (801b46c <phDriver_PinConfig+0x98>)
 801b45e:	f000 fced 	bl	801be3c <HAL_GPIO_Init>
	}

    /* 其他GPIO已经在GPIO_INIT实现 */
    return PH_DRIVER_SUCCESS;
 801b462:	2300      	movs	r3, #0
}
 801b464:	4618      	mov	r0, r3
 801b466:	3728      	adds	r7, #40	@ 0x28
 801b468:	46bd      	mov	sp, r7
 801b46a:	bd80      	pop	{r7, pc}
 801b46c:	48000400 	.word	0x48000400

0801b470 <phDriver_PinRead>:

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	b082      	sub	sp, #8
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
 801b478:	460b      	mov	r3, r1
 801b47a:	807b      	strh	r3, [r7, #2]
 801b47c:	4613      	mov	r3, r2
 801b47e:	707b      	strb	r3, [r7, #1]
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 801b480:	887b      	ldrh	r3, [r7, #2]
 801b482:	4619      	mov	r1, r3
 801b484:	6878      	ldr	r0, [r7, #4]
 801b486:	f000 ff2d 	bl	801c2e4 <HAL_GPIO_ReadPin>
 801b48a:	4603      	mov	r3, r0
}
 801b48c:	4618      	mov	r0, r3
 801b48e:	3708      	adds	r7, #8
 801b490:	46bd      	mov	sp, r7
 801b492:	bd80      	pop	{r7, pc}

0801b494 <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 801b494:	b580      	push	{r7, lr}
 801b496:	b082      	sub	sp, #8
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
 801b49c:	460b      	mov	r3, r1
 801b49e:	807b      	strh	r3, [r7, #2]
 801b4a0:	4613      	mov	r3, r2
 801b4a2:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 801b4a4:	787a      	ldrb	r2, [r7, #1]
 801b4a6:	887b      	ldrh	r3, [r7, #2]
 801b4a8:	4619      	mov	r1, r3
 801b4aa:	6878      	ldr	r0, [r7, #4]
 801b4ac:	f000 ff32 	bl	801c314 <HAL_GPIO_WritePin>
}
 801b4b0:	bf00      	nop
 801b4b2:	3708      	adds	r7, #8
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}

0801b4b8 <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b084      	sub	sp, #16
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	60f8      	str	r0, [r7, #12]
 801b4c0:	60b9      	str	r1, [r7, #8]
 801b4c2:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d11d      	bne.n	801b506 <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	2b01      	cmp	r3, #1
 801b4ce:	d108      	bne.n	801b4e2 <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b4d6:	fb02 f303 	mul.w	r3, r2, r3
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f000 fafa 	bl	801bad4 <HAL_Delay>
 801b4e0:	e029      	b.n	801b536 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b4e8:	d103      	bne.n	801b4f2 <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 801b4ea:	68b8      	ldr	r0, [r7, #8]
 801b4ec:	f000 faf2 	bl	801bad4 <HAL_Delay>
 801b4f0:	e021      	b.n	801b536 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	4a12      	ldr	r2, [pc, #72]	@ (801b540 <phDriver_TimerStart+0x88>)
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d11d      	bne.n	801b536 <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	b29b      	uxth	r3, r3
 801b4fe:	4618      	mov	r0, r3
 801b500:	f7e6 f9a8 	bl	8001854 <delay_us>
 801b504:	e017      	b.n	801b536 <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 801b506:	4a0f      	ldr	r2, [pc, #60]	@ (801b544 <phDriver_TimerStart+0x8c>)
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 801b50c:	4b0e      	ldr	r3, [pc, #56]	@ (801b548 <phDriver_TimerStart+0x90>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	68ba      	ldr	r2, [r7, #8]
 801b512:	3a01      	subs	r2, #1
 801b514:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b516:	68bb      	ldr	r3, [r7, #8]
 801b518:	3b01      	subs	r3, #1
 801b51a:	4a0b      	ldr	r2, [pc, #44]	@ (801b548 <phDriver_TimerStart+0x90>)
 801b51c:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 801b51e:	4b0a      	ldr	r3, [pc, #40]	@ (801b548 <phDriver_TimerStart+0x90>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	2200      	movs	r2, #0
 801b524:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 801b526:	4b08      	ldr	r3, [pc, #32]	@ (801b548 <phDriver_TimerStart+0x90>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	f06f 0201 	mvn.w	r2, #1
 801b52e:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 801b530:	4805      	ldr	r0, [pc, #20]	@ (801b548 <phDriver_TimerStart+0x90>)
 801b532:	f002 fdc3 	bl	801e0bc <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 801b536:	2300      	movs	r3, #0
}
 801b538:	4618      	mov	r0, r3
 801b53a:	3710      	adds	r7, #16
 801b53c:	46bd      	mov	sp, r7
 801b53e:	bd80      	pop	{r7, pc}
 801b540:	000f4240 	.word	0x000f4240
 801b544:	20001be4 	.word	0x20001be4
 801b548:	20000310 	.word	0x20000310

0801b54c <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 801b54c:	b480      	push	{r7}
 801b54e:	af00      	add	r7, sp, #0

    /* 清除回调函数和标志 */
    pTimerIsrCallBack = NULL;
    dwTimerExp = 0;
#endif
    return PH_DRIVER_SUCCESS;
 801b550:	2300      	movs	r3, #0
}
 801b552:	4618      	mov	r0, r3
 801b554:	46bd      	mov	sp, r7
 801b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55a:	4770      	bx	lr

0801b55c <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 801b55c:	b480      	push	{r7}
 801b55e:	b085      	sub	sp, #20
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
 801b564:	460b      	mov	r3, r1
 801b566:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d002      	beq.n	801b574 <phbalReg_Init+0x18>
 801b56e:	887b      	ldrh	r3, [r7, #2]
 801b570:	2b04      	cmp	r3, #4
 801b572:	d002      	beq.n	801b57a <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 801b574:	f24f 1380 	movw	r3, #61824	@ 0xf180
 801b578:	e007      	b.n	801b58a <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 801b580:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	2201      	movs	r2, #1
 801b586:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 801b588:	2300      	movs	r3, #0
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3714      	adds	r7, #20
 801b58e:	46bd      	mov	sp, r7
 801b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b594:	4770      	bx	lr
	...

0801b598 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 801b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b59c:	b095      	sub	sp, #84	@ 0x54
 801b59e:	af02      	add	r7, sp, #8
 801b5a0:	6178      	str	r0, [r7, #20]
 801b5a2:	60fa      	str	r2, [r7, #12]
 801b5a4:	461a      	mov	r2, r3
 801b5a6:	460b      	mov	r3, r1
 801b5a8:	827b      	strh	r3, [r7, #18]
 801b5aa:	4613      	mov	r3, r2
 801b5ac:	823b      	strh	r3, [r7, #16]
 801b5ae:	466b      	mov	r3, sp
 801b5b0:	461e      	mov	r6, r3
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
	}

	return PH_DRIVER_SUCCESS;
#endif
	uint8_t *pRxBuf = NULL;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t dummyTxByte = 0xFF;
 801b5b6:	23ff      	movs	r3, #255	@ 0xff
 801b5b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// 只发送不接收
	if (pRxBuffer == NULL)
 801b5bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d102      	bne.n	801b5c8 <phbalReg_Exchange+0x30>
	{
		pRxBuf = NULL;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	647b      	str	r3, [r7, #68]	@ 0x44
 801b5c6:	e001      	b.n	801b5cc <phbalReg_Exchange+0x34>
	}
	else // 接收
	{
		pRxBuf = pRxBuffer;
 801b5c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b5ca:	647b      	str	r3, [r7, #68]	@ 0x44
	}

//	printf("SPITX>> ");
	for (int i = 0; i < wTxLength; i++)
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	643b      	str	r3, [r7, #64]	@ 0x40
 801b5d0:	e00d      	b.n	801b5ee <phbalReg_Exchange+0x56>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d004      	beq.n	801b5e2 <phbalReg_Exchange+0x4a>
 801b5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b5da:	68fa      	ldr	r2, [r7, #12]
 801b5dc:	4413      	add	r3, r2
 801b5de:	781b      	ldrb	r3, [r3, #0]
 801b5e0:	e001      	b.n	801b5e6 <phbalReg_Exchange+0x4e>
 801b5e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801b5e6:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < wTxLength; i++)
 801b5e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	643b      	str	r3, [r7, #64]	@ 0x40
 801b5ee:	8a3b      	ldrh	r3, [r7, #16]
 801b5f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b5f2:	429a      	cmp	r2, r3
 801b5f4:	dbed      	blt.n	801b5d2 <phbalReg_Exchange+0x3a>
//		printf("%02X ", txByte); // 打印发送内容
	}
//	printf("\n");

	// 定义临时 buffer
	uint8_t txBuf[wTxLength];
 801b5f6:	8a39      	ldrh	r1, [r7, #16]
 801b5f8:	460b      	mov	r3, r1
 801b5fa:	3b01      	subs	r3, #1
 801b5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b5fe:	b28b      	uxth	r3, r1
 801b600:	2200      	movs	r2, #0
 801b602:	603b      	str	r3, [r7, #0]
 801b604:	607a      	str	r2, [r7, #4]
 801b606:	f04f 0200 	mov.w	r2, #0
 801b60a:	f04f 0300 	mov.w	r3, #0
 801b60e:	6878      	ldr	r0, [r7, #4]
 801b610:	00c3      	lsls	r3, r0, #3
 801b612:	6838      	ldr	r0, [r7, #0]
 801b614:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801b618:	6838      	ldr	r0, [r7, #0]
 801b61a:	00c2      	lsls	r2, r0, #3
 801b61c:	b28b      	uxth	r3, r1
 801b61e:	2200      	movs	r2, #0
 801b620:	469a      	mov	sl, r3
 801b622:	4693      	mov	fp, r2
 801b624:	f04f 0200 	mov.w	r2, #0
 801b628:	f04f 0300 	mov.w	r3, #0
 801b62c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801b630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801b634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b638:	460b      	mov	r3, r1
 801b63a:	3307      	adds	r3, #7
 801b63c:	08db      	lsrs	r3, r3, #3
 801b63e:	00db      	lsls	r3, r3, #3
 801b640:	ebad 0d03 	sub.w	sp, sp, r3
 801b644:	ab02      	add	r3, sp, #8
 801b646:	3300      	adds	r3, #0
 801b648:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rxBuf[wTxLength];
 801b64a:	8a39      	ldrh	r1, [r7, #16]
 801b64c:	460b      	mov	r3, r1
 801b64e:	3b01      	subs	r3, #1
 801b650:	627b      	str	r3, [r7, #36]	@ 0x24
 801b652:	b28b      	uxth	r3, r1
 801b654:	2200      	movs	r2, #0
 801b656:	4698      	mov	r8, r3
 801b658:	4691      	mov	r9, r2
 801b65a:	f04f 0200 	mov.w	r2, #0
 801b65e:	f04f 0300 	mov.w	r3, #0
 801b662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801b666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801b66a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801b66e:	b28b      	uxth	r3, r1
 801b670:	2200      	movs	r2, #0
 801b672:	461c      	mov	r4, r3
 801b674:	4615      	mov	r5, r2
 801b676:	f04f 0200 	mov.w	r2, #0
 801b67a:	f04f 0300 	mov.w	r3, #0
 801b67e:	00eb      	lsls	r3, r5, #3
 801b680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801b684:	00e2      	lsls	r2, r4, #3
 801b686:	460b      	mov	r3, r1
 801b688:	3307      	adds	r3, #7
 801b68a:	08db      	lsrs	r3, r3, #3
 801b68c:	00db      	lsls	r3, r3, #3
 801b68e:	ebad 0d03 	sub.w	sp, sp, r3
 801b692:	ab02      	add	r3, sp, #8
 801b694:	3300      	adds	r3, #0
 801b696:	623b      	str	r3, [r7, #32]

	// 填充 txBuf
	for (int i = 0; i < wTxLength; i++)
 801b698:	2300      	movs	r3, #0
 801b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b69c:	e010      	b.n	801b6c0 <phbalReg_Exchange+0x128>
	{
		txBuf[i] = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d004      	beq.n	801b6ae <phbalReg_Exchange+0x116>
 801b6a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6a6:	68fa      	ldr	r2, [r7, #12]
 801b6a8:	4413      	add	r3, r2
 801b6aa:	781b      	ldrb	r3, [r3, #0]
 801b6ac:	e001      	b.n	801b6b2 <phbalReg_Exchange+0x11a>
 801b6ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801b6b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b6b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b6b6:	440a      	add	r2, r1
 801b6b8:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < wTxLength; i++)
 801b6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6bc:	3301      	adds	r3, #1
 801b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b6c0:	8a3b      	ldrh	r3, [r7, #16]
 801b6c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b6c4:	429a      	cmp	r2, r3
 801b6c6:	dbea      	blt.n	801b69e <phbalReg_Exchange+0x106>
	}

	// 一次性全双工发送接收
	if (HAL_SPI_TransmitReceive(&hspi3, txBuf, rxBuf, wTxLength, 1000) != HAL_OK)
 801b6c8:	8a3b      	ldrh	r3, [r7, #16]
 801b6ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b6ce:	9200      	str	r2, [sp, #0]
 801b6d0:	6a3a      	ldr	r2, [r7, #32]
 801b6d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b6d4:	4823      	ldr	r0, [pc, #140]	@ (801b764 <phbalReg_Exchange+0x1cc>)
 801b6d6:	f002 f8a2 	bl	801d81e <HAL_SPI_TransmitReceive>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d002      	beq.n	801b6e6 <phbalReg_Exchange+0x14e>
	{
		return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 801b6e0:	f24f 1381 	movw	r3, #61825	@ 0xf181
 801b6e4:	e037      	b.n	801b756 <phbalReg_Exchange+0x1be>
	}

	// 拷贝接收到的内容到 pRxBuf
	if (pRxBuf != NULL)
 801b6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d016      	beq.n	801b71a <phbalReg_Exchange+0x182>
	{
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b6f0:	e00a      	b.n	801b708 <phbalReg_Exchange+0x170>
		{
			pRxBuf[i] = rxBuf[i];
 801b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b6f6:	4413      	add	r3, r2
 801b6f8:	6a39      	ldr	r1, [r7, #32]
 801b6fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b6fc:	440a      	add	r2, r1
 801b6fe:	7812      	ldrb	r2, [r2, #0]
 801b700:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801b702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b704:	3301      	adds	r3, #1
 801b706:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b708:	8a3b      	ldrh	r3, [r7, #16]
 801b70a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b70c:	429a      	cmp	r2, r3
 801b70e:	da04      	bge.n	801b71a <phbalReg_Exchange+0x182>
 801b710:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 801b714:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b716:	429a      	cmp	r2, r3
 801b718:	dbeb      	blt.n	801b6f2 <phbalReg_Exchange+0x15a>
		}
	}

	// 打印接收内容
	if (pRxBuf != NULL)
 801b71a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d00e      	beq.n	801b73e <phbalReg_Exchange+0x1a6>
	{
//		printf("SPIRX<< ");
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801b720:	2300      	movs	r3, #0
 801b722:	637b      	str	r3, [r7, #52]	@ 0x34
 801b724:	e002      	b.n	801b72c <phbalReg_Exchange+0x194>
 801b726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b728:	3301      	adds	r3, #1
 801b72a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b72c:	8a3b      	ldrh	r3, [r7, #16]
 801b72e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b730:	429a      	cmp	r2, r3
 801b732:	da04      	bge.n	801b73e <phbalReg_Exchange+0x1a6>
 801b734:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 801b738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b73a:	429a      	cmp	r2, r3
 801b73c:	dbf3      	blt.n	801b726 <phbalReg_Exchange+0x18e>
		}
//		printf("\n");
	}

	// 返回接收长度
	if (pRxLength != NULL)
 801b73e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b740:	2b00      	cmp	r3, #0
 801b742:	d007      	beq.n	801b754 <phbalReg_Exchange+0x1bc>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 801b744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b746:	2b00      	cmp	r3, #0
 801b748:	d001      	beq.n	801b74e <phbalReg_Exchange+0x1b6>
 801b74a:	8a3a      	ldrh	r2, [r7, #16]
 801b74c:	e000      	b.n	801b750 <phbalReg_Exchange+0x1b8>
 801b74e:	2200      	movs	r2, #0
 801b750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b752:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 801b754:	2300      	movs	r3, #0
 801b756:	46b5      	mov	sp, r6
}
 801b758:	4618      	mov	r0, r3
 801b75a:	374c      	adds	r7, #76	@ 0x4c
 801b75c:	46bd      	mov	sp, r7
 801b75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b762:	bf00      	nop
 801b764:	2000025c 	.word	0x2000025c

0801b768 <phOsal_EventCreate>:
//1    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
    return HAL_InitTick(1);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b084      	sub	sp, #16
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
 801b770:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 801b772:	2300      	movs	r3, #0
 801b774:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d002      	beq.n	801b782 <phOsal_EventCreate+0x1a>
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d102      	bne.n	801b788 <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801b782:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801b786:	e033      	b.n	801b7f0 <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 801b788:	4b1b      	ldr	r3, [pc, #108]	@ (801b7f8 <phOsal_EventCreate+0x90>)
 801b78a:	6819      	ldr	r1, [r3, #0]
 801b78c:	f107 030c 	add.w	r3, r7, #12
 801b790:	2205      	movs	r2, #5
 801b792:	4618      	mov	r0, r3
 801b794:	f000 f8e2 	bl	801b95c <phOsal_NullOs_GetFreeIndex>
 801b798:	4603      	mov	r3, r0
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d009      	beq.n	801b7b2 <phOsal_EventCreate+0x4a>
 801b79e:	4b16      	ldr	r3, [pc, #88]	@ (801b7f8 <phOsal_EventCreate+0x90>)
 801b7a0:	6819      	ldr	r1, [r3, #0]
 801b7a2:	f107 030c 	add.w	r3, r7, #12
 801b7a6:	2205      	movs	r2, #5
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	f000 f8d7 	bl	801b95c <phOsal_NullOs_GetFreeIndex>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	e01e      	b.n	801b7f0 <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	4a11      	ldr	r2, [pc, #68]	@ (801b7fc <phOsal_EventCreate+0x94>)
 801b7b6:	2100      	movs	r1, #0
 801b7b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	2201      	movs	r2, #1
 801b7c0:	fa02 f303 	lsl.w	r3, r2, r3
 801b7c4:	461a      	mov	r2, r3
 801b7c6:	4b0c      	ldr	r3, [pc, #48]	@ (801b7f8 <phOsal_EventCreate+0x90>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	4313      	orrs	r3, r2
 801b7cc:	4a0a      	ldr	r2, [pc, #40]	@ (801b7f8 <phOsal_EventCreate+0x90>)
 801b7ce:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	009b      	lsls	r3, r3, #2
 801b7d4:	4a09      	ldr	r2, [pc, #36]	@ (801b7fc <phOsal_EventCreate+0x94>)
 801b7d6:	441a      	add	r2, r3
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	009b      	lsls	r3, r3, #2
 801b7e0:	4a06      	ldr	r2, [pc, #24]	@ (801b7fc <phOsal_EventCreate+0x94>)
 801b7e2:	441a      	add	r2, r3
 801b7e4:	683b      	ldr	r3, [r7, #0]
 801b7e6:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 801b7e8:	68fa      	ldr	r2, [r7, #12]
 801b7ea:	683b      	ldr	r3, [r7, #0]
 801b7ec:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 801b7ee:	2300      	movs	r3, #0
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	3710      	adds	r7, #16
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}
 801b7f8:	20001c00 	.word	0x20001c00
 801b7fc:	20001bec 	.word	0x20001bec

0801b800 <phOsal_EventPend>:

// 事件挂起函数：等待特定事件标志位被设置，类似于RTOS中的事件等待机制
phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 801b800:	b480      	push	{r7}
 801b802:	b087      	sub	sp, #28
 801b804:	af00      	add	r7, sp, #0
 801b806:	60f8      	str	r0, [r7, #12]
 801b808:	607a      	str	r2, [r7, #4]
 801b80a:	603b      	str	r3, [r7, #0]
 801b80c:	460b      	mov	r3, r1
 801b80e:	72fb      	strb	r3, [r7, #11]
	phStatus_t status;

	/* 检查事件句柄是否有效 */
	if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d003      	beq.n	801b81e <phOsal_EventPend+0x1e>
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d102      	bne.n	801b824 <phOsal_EventPend+0x24>
	{
	    return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801b81e:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801b822:	e02e      	b.n	801b882 <phOsal_EventPend+0x82>
	}

	status = PH_OSAL_IO_TIMEOUT; // 默认设置为超时状态
 801b824:	2301      	movs	r3, #1
 801b826:	82fb      	strh	r3, [r7, #22]
	    /* Wait for interrupts/events to occur */
	    phOsal_Sleep();
	}
#endif
	//dd1    phOsal_StopTickTimer();
	gbWaitTimedOut = 0;		// 清除超时标志
 801b828:	4b19      	ldr	r3, [pc, #100]	@ (801b890 <phOsal_EventPend+0x90>)
 801b82a:	2200      	movs	r2, #0
 801b82c:	701a      	strb	r2, [r3, #0]

	//dd1    phOsal_EnterCriticalSection();

	/* 返回当前标志位 */
	if (pCurrFlags != NULL)
 801b82e:	6a3b      	ldr	r3, [r7, #32]
 801b830:	2b00      	cmp	r3, #0
 801b832:	d004      	beq.n	801b83e <phOsal_EventPend+0x3e>
	{
	    *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	6a3b      	ldr	r3, [r7, #32]
 801b83c:	601a      	str	r2, [r3, #0]
	}

	/* 清除指定标志位 */
	if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 801b83e:	7afb      	ldrb	r3, [r7, #11]
 801b840:	f003 0304 	and.w	r3, r3, #4
 801b844:	2b00      	cmp	r3, #0
 801b846:	d00a      	beq.n	801b85e <phOsal_EventPend+0x5e>
	{
	    (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	681a      	ldr	r2, [r3, #0]
 801b84e:	683b      	ldr	r3, [r7, #0]
 801b850:	4013      	ands	r3, r2
 801b852:	43d9      	mvns	r1, r3
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	681a      	ldr	r2, [r3, #0]
 801b85a:	400a      	ands	r2, r1
 801b85c:	601a      	str	r2, [r3, #0]
	}
	//dd1    phOsal_ExitCriticalSection();

	return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 801b85e:	8afb      	ldrh	r3, [r7, #22]
 801b860:	2b00      	cmp	r3, #0
 801b862:	d00d      	beq.n	801b880 <phOsal_EventPend+0x80>
 801b864:	8afb      	ldrh	r3, [r7, #22]
 801b866:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d108      	bne.n	801b880 <phOsal_EventPend+0x80>
 801b86e:	8afb      	ldrh	r3, [r7, #22]
 801b870:	b2db      	uxtb	r3, r3
 801b872:	b29b      	uxth	r3, r3
 801b874:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b878:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b87c:	b29b      	uxth	r3, r3
 801b87e:	e000      	b.n	801b882 <phOsal_EventPend+0x82>
 801b880:	8afb      	ldrh	r3, [r7, #22]
}
 801b882:	4618      	mov	r0, r3
 801b884:	371c      	adds	r7, #28
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr
 801b88e:	bf00      	nop
 801b890:	20001be8 	.word	0x20001be8

0801b894 <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b084      	sub	sp, #16
 801b898:	af00      	add	r7, sp, #0
 801b89a:	60f8      	str	r0, [r7, #12]
 801b89c:	607a      	str	r2, [r7, #4]
 801b89e:	603b      	str	r3, [r7, #0]
 801b8a0:	460b      	mov	r3, r1
 801b8a2:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08lX\r\n", FlagsToPost);  // 添加这行
 801b8a4:	6879      	ldr	r1, [r7, #4]
 801b8a6:	4815      	ldr	r0, [pc, #84]	@ (801b8fc <phOsal_EventPost+0x68>)
 801b8a8:	f006 f808 	bl	80218bc <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d003      	beq.n	801b8ba <phOsal_EventPost+0x26>
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d105      	bne.n	801b8c6 <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 801b8ba:	4811      	ldr	r0, [pc, #68]	@ (801b900 <phOsal_EventPost+0x6c>)
 801b8bc:	f006 f86e 	bl	802199c <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801b8c0:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801b8c4:	e016      	b.n	801b8f4 <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801b8c6:	f000 f879 	bl	801b9bc <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	6819      	ldr	r1, [r3, #0]
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	687a      	ldr	r2, [r7, #4]
 801b8d6:	430a      	orrs	r2, r1
 801b8d8:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d004      	beq.n	801b8ea <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	681a      	ldr	r2, [r3, #0]
 801b8e6:	683b      	ldr	r3, [r7, #0]
 801b8e8:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 801b8ea:	f000 f86f 	bl	801b9cc <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 801b8ee:	f000 f875 	bl	801b9dc <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 801b8f2:	2300      	movs	r3, #0

}
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	3710      	adds	r7, #16
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	bd80      	pop	{r7, pc}
 801b8fc:	0802511c 	.word	0x0802511c
 801b900:	0802512c 	.word	0x0802512c

0801b904 <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b084      	sub	sp, #16
 801b908:	af00      	add	r7, sp, #0
 801b90a:	60f8      	str	r0, [r7, #12]
 801b90c:	607a      	str	r2, [r7, #4]
 801b90e:	603b      	str	r3, [r7, #0]
 801b910:	460b      	mov	r3, r1
 801b912:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801b914:	68fb      	ldr	r3, [r7, #12]
 801b916:	2b00      	cmp	r3, #0
 801b918:	d003      	beq.n	801b922 <phOsal_EventClear+0x1e>
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d102      	bne.n	801b928 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801b922:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801b926:	e015      	b.n	801b954 <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801b928:	f000 f848 	bl	801b9bc <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 801b92c:	683b      	ldr	r3, [r7, #0]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d004      	beq.n	801b93c <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	681a      	ldr	r2, [r3, #0]
 801b938:	683b      	ldr	r3, [r7, #0]
 801b93a:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	6819      	ldr	r1, [r3, #0]
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	43da      	mvns	r2, r3
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	400a      	ands	r2, r1
 801b94c:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 801b94e:	f000 f83d 	bl	801b9cc <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 801b952:	2300      	movs	r3, #0
}
 801b954:	4618      	mov	r0, r3
 801b956:	3710      	adds	r7, #16
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}

0801b95c <phOsal_NullOs_GetFreeIndex>:
{
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
}

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 801b95c:	b480      	push	{r7}
 801b95e:	b087      	sub	sp, #28
 801b960:	af00      	add	r7, sp, #0
 801b962:	60f8      	str	r0, [r7, #12]
 801b964:	60b9      	str	r1, [r7, #8]
 801b966:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	2200      	movs	r2, #0
 801b96c:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801b96e:	e004      	b.n	801b97a <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	1c5a      	adds	r2, r3, #1
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	2201      	movs	r2, #1
 801b980:	fa02 f303 	lsl.w	r3, r2, r3
 801b984:	461a      	mov	r2, r3
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	4013      	ands	r3, r2
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d004      	beq.n	801b998 <phOsal_NullOs_GetFreeIndex+0x3c>
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	687a      	ldr	r2, [r7, #4]
 801b994:	429a      	cmp	r2, r3
 801b996:	d8eb      	bhi.n	801b970 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	687a      	ldr	r2, [r7, #4]
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d103      	bne.n	801b9aa <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 801b9a2:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801b9a6:	82fb      	strh	r3, [r7, #22]
 801b9a8:	e001      	b.n	801b9ae <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 801b9ae:	8afb      	ldrh	r3, [r7, #22]
}
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	371c      	adds	r7, #28
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ba:	4770      	bx	lr

0801b9bc <phOsal_EnterCriticalSection>:

    return PH_OSAL_SUCCESS;
}

void phOsal_EnterCriticalSection(void)
{
 801b9bc:	b480      	push	{r7}
 801b9be:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 801b9c0:	b672      	cpsid	i
}
 801b9c2:	bf00      	nop
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ca:	4770      	bx	lr

0801b9cc <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 801b9cc:	b480      	push	{r7}
 801b9ce:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 801b9d0:	b662      	cpsie	i
}
 801b9d2:	bf00      	nop
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9da:	4770      	bx	lr

0801b9dc <phOsal_WakeUp>:
{
     __WFE();
}

void phOsal_WakeUp(void)
{
 801b9dc:	b480      	push	{r7}
 801b9de:	af00      	add	r7, sp, #0
    __SEV();
 801b9e0:	bf40      	sev
}
 801b9e2:	bf00      	nop
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ea:	4770      	bx	lr

0801b9ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b082      	sub	sp, #8
 801b9f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b9f6:	2003      	movs	r0, #3
 801b9f8:	f000 f960 	bl	801bcbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801b9fc:	2001      	movs	r0, #1
 801b9fe:	f000 f80d 	bl	801ba1c <HAL_InitTick>
 801ba02:	4603      	mov	r3, r0
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d002      	beq.n	801ba0e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 801ba08:	2301      	movs	r3, #1
 801ba0a:	71fb      	strb	r3, [r7, #7]
 801ba0c:	e001      	b.n	801ba12 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801ba0e:	f7e5 fc39 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801ba12:	79fb      	ldrb	r3, [r7, #7]
}
 801ba14:	4618      	mov	r0, r3
 801ba16:	3708      	adds	r7, #8
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bd80      	pop	{r7, pc}

0801ba1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	b084      	sub	sp, #16
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801ba24:	2300      	movs	r3, #0
 801ba26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 801ba28:	4b17      	ldr	r3, [pc, #92]	@ (801ba88 <HAL_InitTick+0x6c>)
 801ba2a:	781b      	ldrb	r3, [r3, #0]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d023      	beq.n	801ba78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801ba30:	4b16      	ldr	r3, [pc, #88]	@ (801ba8c <HAL_InitTick+0x70>)
 801ba32:	681a      	ldr	r2, [r3, #0]
 801ba34:	4b14      	ldr	r3, [pc, #80]	@ (801ba88 <HAL_InitTick+0x6c>)
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	4619      	mov	r1, r3
 801ba3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ba3e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba42:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba46:	4618      	mov	r0, r3
 801ba48:	f000 f96d 	bl	801bd26 <HAL_SYSTICK_Config>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d10f      	bne.n	801ba72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	2b0f      	cmp	r3, #15
 801ba56:	d809      	bhi.n	801ba6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801ba58:	2200      	movs	r2, #0
 801ba5a:	6879      	ldr	r1, [r7, #4]
 801ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ba60:	f000 f937 	bl	801bcd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801ba64:	4a0a      	ldr	r2, [pc, #40]	@ (801ba90 <HAL_InitTick+0x74>)
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6013      	str	r3, [r2, #0]
 801ba6a:	e007      	b.n	801ba7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801ba6c:	2301      	movs	r3, #1
 801ba6e:	73fb      	strb	r3, [r7, #15]
 801ba70:	e004      	b.n	801ba7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 801ba72:	2301      	movs	r3, #1
 801ba74:	73fb      	strb	r3, [r7, #15]
 801ba76:	e001      	b.n	801ba7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 801ba78:	2301      	movs	r3, #1
 801ba7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba7e:	4618      	mov	r0, r3
 801ba80:	3710      	adds	r7, #16
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}
 801ba86:	bf00      	nop
 801ba88:	20000074 	.word	0x20000074
 801ba8c:	20000000 	.word	0x20000000
 801ba90:	20000070 	.word	0x20000070

0801ba94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801ba94:	b480      	push	{r7}
 801ba96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801ba98:	4b06      	ldr	r3, [pc, #24]	@ (801bab4 <HAL_IncTick+0x20>)
 801ba9a:	781b      	ldrb	r3, [r3, #0]
 801ba9c:	461a      	mov	r2, r3
 801ba9e:	4b06      	ldr	r3, [pc, #24]	@ (801bab8 <HAL_IncTick+0x24>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	4413      	add	r3, r2
 801baa4:	4a04      	ldr	r2, [pc, #16]	@ (801bab8 <HAL_IncTick+0x24>)
 801baa6:	6013      	str	r3, [r2, #0]
}
 801baa8:	bf00      	nop
 801baaa:	46bd      	mov	sp, r7
 801baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab0:	4770      	bx	lr
 801bab2:	bf00      	nop
 801bab4:	20000074 	.word	0x20000074
 801bab8:	20001c04 	.word	0x20001c04

0801babc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801babc:	b480      	push	{r7}
 801babe:	af00      	add	r7, sp, #0
  return uwTick;
 801bac0:	4b03      	ldr	r3, [pc, #12]	@ (801bad0 <HAL_GetTick+0x14>)
 801bac2:	681b      	ldr	r3, [r3, #0]
}
 801bac4:	4618      	mov	r0, r3
 801bac6:	46bd      	mov	sp, r7
 801bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bacc:	4770      	bx	lr
 801bace:	bf00      	nop
 801bad0:	20001c04 	.word	0x20001c04

0801bad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b084      	sub	sp, #16
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801badc:	f7ff ffee 	bl	801babc <HAL_GetTick>
 801bae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801baec:	d005      	beq.n	801bafa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801baee:	4b0a      	ldr	r3, [pc, #40]	@ (801bb18 <HAL_Delay+0x44>)
 801baf0:	781b      	ldrb	r3, [r3, #0]
 801baf2:	461a      	mov	r2, r3
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	4413      	add	r3, r2
 801baf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801bafa:	bf00      	nop
 801bafc:	f7ff ffde 	bl	801babc <HAL_GetTick>
 801bb00:	4602      	mov	r2, r0
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	1ad3      	subs	r3, r2, r3
 801bb06:	68fa      	ldr	r2, [r7, #12]
 801bb08:	429a      	cmp	r2, r3
 801bb0a:	d8f7      	bhi.n	801bafc <HAL_Delay+0x28>
  {
  }
}
 801bb0c:	bf00      	nop
 801bb0e:	bf00      	nop
 801bb10:	3710      	adds	r7, #16
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	20000074 	.word	0x20000074

0801bb1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bb1c:	b480      	push	{r7}
 801bb1e:	b085      	sub	sp, #20
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	f003 0307 	and.w	r3, r3, #7
 801bb2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bb2c:	4b0c      	ldr	r3, [pc, #48]	@ (801bb60 <__NVIC_SetPriorityGrouping+0x44>)
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bb32:	68ba      	ldr	r2, [r7, #8]
 801bb34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801bb38:	4013      	ands	r3, r2
 801bb3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801bb44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801bb48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bb4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bb4e:	4a04      	ldr	r2, [pc, #16]	@ (801bb60 <__NVIC_SetPriorityGrouping+0x44>)
 801bb50:	68bb      	ldr	r3, [r7, #8]
 801bb52:	60d3      	str	r3, [r2, #12]
}
 801bb54:	bf00      	nop
 801bb56:	3714      	adds	r7, #20
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb5e:	4770      	bx	lr
 801bb60:	e000ed00 	.word	0xe000ed00

0801bb64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801bb64:	b480      	push	{r7}
 801bb66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bb68:	4b04      	ldr	r3, [pc, #16]	@ (801bb7c <__NVIC_GetPriorityGrouping+0x18>)
 801bb6a:	68db      	ldr	r3, [r3, #12]
 801bb6c:	0a1b      	lsrs	r3, r3, #8
 801bb6e:	f003 0307 	and.w	r3, r3, #7
}
 801bb72:	4618      	mov	r0, r3
 801bb74:	46bd      	mov	sp, r7
 801bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7a:	4770      	bx	lr
 801bb7c:	e000ed00 	.word	0xe000ed00

0801bb80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bb80:	b480      	push	{r7}
 801bb82:	b083      	sub	sp, #12
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	4603      	mov	r3, r0
 801bb88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bb8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	db0b      	blt.n	801bbaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bb92:	79fb      	ldrb	r3, [r7, #7]
 801bb94:	f003 021f 	and.w	r2, r3, #31
 801bb98:	4907      	ldr	r1, [pc, #28]	@ (801bbb8 <__NVIC_EnableIRQ+0x38>)
 801bb9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb9e:	095b      	lsrs	r3, r3, #5
 801bba0:	2001      	movs	r0, #1
 801bba2:	fa00 f202 	lsl.w	r2, r0, r2
 801bba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801bbaa:	bf00      	nop
 801bbac:	370c      	adds	r7, #12
 801bbae:	46bd      	mov	sp, r7
 801bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbb4:	4770      	bx	lr
 801bbb6:	bf00      	nop
 801bbb8:	e000e100 	.word	0xe000e100

0801bbbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b083      	sub	sp, #12
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	4603      	mov	r3, r0
 801bbc4:	6039      	str	r1, [r7, #0]
 801bbc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bbc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	db0a      	blt.n	801bbe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	b2da      	uxtb	r2, r3
 801bbd4:	490c      	ldr	r1, [pc, #48]	@ (801bc08 <__NVIC_SetPriority+0x4c>)
 801bbd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bbda:	0112      	lsls	r2, r2, #4
 801bbdc:	b2d2      	uxtb	r2, r2
 801bbde:	440b      	add	r3, r1
 801bbe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801bbe4:	e00a      	b.n	801bbfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	b2da      	uxtb	r2, r3
 801bbea:	4908      	ldr	r1, [pc, #32]	@ (801bc0c <__NVIC_SetPriority+0x50>)
 801bbec:	79fb      	ldrb	r3, [r7, #7]
 801bbee:	f003 030f 	and.w	r3, r3, #15
 801bbf2:	3b04      	subs	r3, #4
 801bbf4:	0112      	lsls	r2, r2, #4
 801bbf6:	b2d2      	uxtb	r2, r2
 801bbf8:	440b      	add	r3, r1
 801bbfa:	761a      	strb	r2, [r3, #24]
}
 801bbfc:	bf00      	nop
 801bbfe:	370c      	adds	r7, #12
 801bc00:	46bd      	mov	sp, r7
 801bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc06:	4770      	bx	lr
 801bc08:	e000e100 	.word	0xe000e100
 801bc0c:	e000ed00 	.word	0xe000ed00

0801bc10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bc10:	b480      	push	{r7}
 801bc12:	b089      	sub	sp, #36	@ 0x24
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	60f8      	str	r0, [r7, #12]
 801bc18:	60b9      	str	r1, [r7, #8]
 801bc1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	f003 0307 	and.w	r3, r3, #7
 801bc22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	f1c3 0307 	rsb	r3, r3, #7
 801bc2a:	2b04      	cmp	r3, #4
 801bc2c:	bf28      	it	cs
 801bc2e:	2304      	movcs	r3, #4
 801bc30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bc32:	69fb      	ldr	r3, [r7, #28]
 801bc34:	3304      	adds	r3, #4
 801bc36:	2b06      	cmp	r3, #6
 801bc38:	d902      	bls.n	801bc40 <NVIC_EncodePriority+0x30>
 801bc3a:	69fb      	ldr	r3, [r7, #28]
 801bc3c:	3b03      	subs	r3, #3
 801bc3e:	e000      	b.n	801bc42 <NVIC_EncodePriority+0x32>
 801bc40:	2300      	movs	r3, #0
 801bc42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bc44:	f04f 32ff 	mov.w	r2, #4294967295
 801bc48:	69bb      	ldr	r3, [r7, #24]
 801bc4a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc4e:	43da      	mvns	r2, r3
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	401a      	ands	r2, r3
 801bc54:	697b      	ldr	r3, [r7, #20]
 801bc56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bc58:	f04f 31ff 	mov.w	r1, #4294967295
 801bc5c:	697b      	ldr	r3, [r7, #20]
 801bc5e:	fa01 f303 	lsl.w	r3, r1, r3
 801bc62:	43d9      	mvns	r1, r3
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bc68:	4313      	orrs	r3, r2
         );
}
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	3724      	adds	r7, #36	@ 0x24
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc74:	4770      	bx	lr
	...

0801bc78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b082      	sub	sp, #8
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	3b01      	subs	r3, #1
 801bc84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bc88:	d301      	bcc.n	801bc8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801bc8a:	2301      	movs	r3, #1
 801bc8c:	e00f      	b.n	801bcae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bc8e:	4a0a      	ldr	r2, [pc, #40]	@ (801bcb8 <SysTick_Config+0x40>)
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	3b01      	subs	r3, #1
 801bc94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bc96:	210f      	movs	r1, #15
 801bc98:	f04f 30ff 	mov.w	r0, #4294967295
 801bc9c:	f7ff ff8e 	bl	801bbbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bca0:	4b05      	ldr	r3, [pc, #20]	@ (801bcb8 <SysTick_Config+0x40>)
 801bca2:	2200      	movs	r2, #0
 801bca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bca6:	4b04      	ldr	r3, [pc, #16]	@ (801bcb8 <SysTick_Config+0x40>)
 801bca8:	2207      	movs	r2, #7
 801bcaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bcac:	2300      	movs	r3, #0
}
 801bcae:	4618      	mov	r0, r3
 801bcb0:	3708      	adds	r7, #8
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	bd80      	pop	{r7, pc}
 801bcb6:	bf00      	nop
 801bcb8:	e000e010 	.word	0xe000e010

0801bcbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b082      	sub	sp, #8
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bcc4:	6878      	ldr	r0, [r7, #4]
 801bcc6:	f7ff ff29 	bl	801bb1c <__NVIC_SetPriorityGrouping>
}
 801bcca:	bf00      	nop
 801bccc:	3708      	adds	r7, #8
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd80      	pop	{r7, pc}

0801bcd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bcd2:	b580      	push	{r7, lr}
 801bcd4:	b086      	sub	sp, #24
 801bcd6:	af00      	add	r7, sp, #0
 801bcd8:	4603      	mov	r3, r0
 801bcda:	60b9      	str	r1, [r7, #8]
 801bcdc:	607a      	str	r2, [r7, #4]
 801bcde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801bce0:	2300      	movs	r3, #0
 801bce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bce4:	f7ff ff3e 	bl	801bb64 <__NVIC_GetPriorityGrouping>
 801bce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bcea:	687a      	ldr	r2, [r7, #4]
 801bcec:	68b9      	ldr	r1, [r7, #8]
 801bcee:	6978      	ldr	r0, [r7, #20]
 801bcf0:	f7ff ff8e 	bl	801bc10 <NVIC_EncodePriority>
 801bcf4:	4602      	mov	r2, r0
 801bcf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcfa:	4611      	mov	r1, r2
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	f7ff ff5d 	bl	801bbbc <__NVIC_SetPriority>
}
 801bd02:	bf00      	nop
 801bd04:	3718      	adds	r7, #24
 801bd06:	46bd      	mov	sp, r7
 801bd08:	bd80      	pop	{r7, pc}

0801bd0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bd0a:	b580      	push	{r7, lr}
 801bd0c:	b082      	sub	sp, #8
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	4603      	mov	r3, r0
 801bd12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bd14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bd18:	4618      	mov	r0, r3
 801bd1a:	f7ff ff31 	bl	801bb80 <__NVIC_EnableIRQ>
}
 801bd1e:	bf00      	nop
 801bd20:	3708      	adds	r7, #8
 801bd22:	46bd      	mov	sp, r7
 801bd24:	bd80      	pop	{r7, pc}

0801bd26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bd26:	b580      	push	{r7, lr}
 801bd28:	b082      	sub	sp, #8
 801bd2a:	af00      	add	r7, sp, #0
 801bd2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bd2e:	6878      	ldr	r0, [r7, #4]
 801bd30:	f7ff ffa2 	bl	801bc78 <SysTick_Config>
 801bd34:	4603      	mov	r3, r0
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	3708      	adds	r7, #8
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	bd80      	pop	{r7, pc}

0801bd3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801bd3e:	b480      	push	{r7}
 801bd40:	b085      	sub	sp, #20
 801bd42:	af00      	add	r7, sp, #0
 801bd44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bd46:	2300      	movs	r3, #0
 801bd48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801bd50:	b2db      	uxtb	r3, r3
 801bd52:	2b02      	cmp	r3, #2
 801bd54:	d008      	beq.n	801bd68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	2204      	movs	r2, #4
 801bd5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	2200      	movs	r2, #0
 801bd60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801bd64:	2301      	movs	r3, #1
 801bd66:	e022      	b.n	801bdae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	681a      	ldr	r2, [r3, #0]
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	f022 020e 	bic.w	r2, r2, #14
 801bd76:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	681a      	ldr	r2, [r3, #0]
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	f022 0201 	bic.w	r2, r2, #1
 801bd86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bd8c:	f003 021c 	and.w	r2, r3, #28
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bd94:	2101      	movs	r1, #1
 801bd96:	fa01 f202 	lsl.w	r2, r1, r2
 801bd9a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	2201      	movs	r2, #1
 801bda0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2200      	movs	r2, #0
 801bda8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 801bdac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801bdae:	4618      	mov	r0, r3
 801bdb0:	3714      	adds	r7, #20
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb8:	4770      	bx	lr

0801bdba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801bdba:	b580      	push	{r7, lr}
 801bdbc:	b084      	sub	sp, #16
 801bdbe:	af00      	add	r7, sp, #0
 801bdc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801bdcc:	b2db      	uxtb	r3, r3
 801bdce:	2b02      	cmp	r3, #2
 801bdd0:	d005      	beq.n	801bdde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	2204      	movs	r2, #4
 801bdd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801bdd8:	2301      	movs	r3, #1
 801bdda:	73fb      	strb	r3, [r7, #15]
 801bddc:	e029      	b.n	801be32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	681a      	ldr	r2, [r3, #0]
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	f022 020e 	bic.w	r2, r2, #14
 801bdec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	681a      	ldr	r2, [r3, #0]
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	f022 0201 	bic.w	r2, r2, #1
 801bdfc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801be02:	f003 021c 	and.w	r2, r3, #28
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801be0a:	2101      	movs	r1, #1
 801be0c:	fa01 f202 	lsl.w	r2, r1, r2
 801be10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2201      	movs	r2, #1
 801be16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	2200      	movs	r2, #0
 801be1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be26:	2b00      	cmp	r3, #0
 801be28:	d003      	beq.n	801be32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be2e:	6878      	ldr	r0, [r7, #4]
 801be30:	4798      	blx	r3
    }
  }
  return status;
 801be32:	7bfb      	ldrb	r3, [r7, #15]
}
 801be34:	4618      	mov	r0, r3
 801be36:	3710      	adds	r7, #16
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd80      	pop	{r7, pc}

0801be3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801be3c:	b480      	push	{r7}
 801be3e:	b087      	sub	sp, #28
 801be40:	af00      	add	r7, sp, #0
 801be42:	6078      	str	r0, [r7, #4]
 801be44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801be46:	2300      	movs	r3, #0
 801be48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801be4a:	e154      	b.n	801c0f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801be4c:	683b      	ldr	r3, [r7, #0]
 801be4e:	681a      	ldr	r2, [r3, #0]
 801be50:	2101      	movs	r1, #1
 801be52:	697b      	ldr	r3, [r7, #20]
 801be54:	fa01 f303 	lsl.w	r3, r1, r3
 801be58:	4013      	ands	r3, r2
 801be5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	f000 8146 	beq.w	801c0f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801be64:	683b      	ldr	r3, [r7, #0]
 801be66:	685b      	ldr	r3, [r3, #4]
 801be68:	f003 0303 	and.w	r3, r3, #3
 801be6c:	2b01      	cmp	r3, #1
 801be6e:	d005      	beq.n	801be7c <HAL_GPIO_Init+0x40>
 801be70:	683b      	ldr	r3, [r7, #0]
 801be72:	685b      	ldr	r3, [r3, #4]
 801be74:	f003 0303 	and.w	r3, r3, #3
 801be78:	2b02      	cmp	r3, #2
 801be7a:	d130      	bne.n	801bede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	689b      	ldr	r3, [r3, #8]
 801be80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801be82:	697b      	ldr	r3, [r7, #20]
 801be84:	005b      	lsls	r3, r3, #1
 801be86:	2203      	movs	r2, #3
 801be88:	fa02 f303 	lsl.w	r3, r2, r3
 801be8c:	43db      	mvns	r3, r3
 801be8e:	693a      	ldr	r2, [r7, #16]
 801be90:	4013      	ands	r3, r2
 801be92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801be94:	683b      	ldr	r3, [r7, #0]
 801be96:	68da      	ldr	r2, [r3, #12]
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	005b      	lsls	r3, r3, #1
 801be9c:	fa02 f303 	lsl.w	r3, r2, r3
 801bea0:	693a      	ldr	r2, [r7, #16]
 801bea2:	4313      	orrs	r3, r2
 801bea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	693a      	ldr	r2, [r7, #16]
 801beaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	685b      	ldr	r3, [r3, #4]
 801beb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801beb2:	2201      	movs	r2, #1
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	fa02 f303 	lsl.w	r3, r2, r3
 801beba:	43db      	mvns	r3, r3
 801bebc:	693a      	ldr	r2, [r7, #16]
 801bebe:	4013      	ands	r3, r2
 801bec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	685b      	ldr	r3, [r3, #4]
 801bec6:	091b      	lsrs	r3, r3, #4
 801bec8:	f003 0201 	and.w	r2, r3, #1
 801becc:	697b      	ldr	r3, [r7, #20]
 801bece:	fa02 f303 	lsl.w	r3, r2, r3
 801bed2:	693a      	ldr	r2, [r7, #16]
 801bed4:	4313      	orrs	r3, r2
 801bed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	693a      	ldr	r2, [r7, #16]
 801bedc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bede:	683b      	ldr	r3, [r7, #0]
 801bee0:	685b      	ldr	r3, [r3, #4]
 801bee2:	f003 0303 	and.w	r3, r3, #3
 801bee6:	2b03      	cmp	r3, #3
 801bee8:	d017      	beq.n	801bf1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	68db      	ldr	r3, [r3, #12]
 801beee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bef0:	697b      	ldr	r3, [r7, #20]
 801bef2:	005b      	lsls	r3, r3, #1
 801bef4:	2203      	movs	r2, #3
 801bef6:	fa02 f303 	lsl.w	r3, r2, r3
 801befa:	43db      	mvns	r3, r3
 801befc:	693a      	ldr	r2, [r7, #16]
 801befe:	4013      	ands	r3, r2
 801bf00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bf02:	683b      	ldr	r3, [r7, #0]
 801bf04:	689a      	ldr	r2, [r3, #8]
 801bf06:	697b      	ldr	r3, [r7, #20]
 801bf08:	005b      	lsls	r3, r3, #1
 801bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf0e:	693a      	ldr	r2, [r7, #16]
 801bf10:	4313      	orrs	r3, r2
 801bf12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	693a      	ldr	r2, [r7, #16]
 801bf18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bf1a:	683b      	ldr	r3, [r7, #0]
 801bf1c:	685b      	ldr	r3, [r3, #4]
 801bf1e:	f003 0303 	and.w	r3, r3, #3
 801bf22:	2b02      	cmp	r3, #2
 801bf24:	d123      	bne.n	801bf6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801bf26:	697b      	ldr	r3, [r7, #20]
 801bf28:	08da      	lsrs	r2, r3, #3
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	3208      	adds	r2, #8
 801bf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801bf34:	697b      	ldr	r3, [r7, #20]
 801bf36:	f003 0307 	and.w	r3, r3, #7
 801bf3a:	009b      	lsls	r3, r3, #2
 801bf3c:	220f      	movs	r2, #15
 801bf3e:	fa02 f303 	lsl.w	r3, r2, r3
 801bf42:	43db      	mvns	r3, r3
 801bf44:	693a      	ldr	r2, [r7, #16]
 801bf46:	4013      	ands	r3, r2
 801bf48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	691a      	ldr	r2, [r3, #16]
 801bf4e:	697b      	ldr	r3, [r7, #20]
 801bf50:	f003 0307 	and.w	r3, r3, #7
 801bf54:	009b      	lsls	r3, r3, #2
 801bf56:	fa02 f303 	lsl.w	r3, r2, r3
 801bf5a:	693a      	ldr	r2, [r7, #16]
 801bf5c:	4313      	orrs	r3, r2
 801bf5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801bf60:	697b      	ldr	r3, [r7, #20]
 801bf62:	08da      	lsrs	r2, r3, #3
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	3208      	adds	r2, #8
 801bf68:	6939      	ldr	r1, [r7, #16]
 801bf6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801bf74:	697b      	ldr	r3, [r7, #20]
 801bf76:	005b      	lsls	r3, r3, #1
 801bf78:	2203      	movs	r2, #3
 801bf7a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf7e:	43db      	mvns	r3, r3
 801bf80:	693a      	ldr	r2, [r7, #16]
 801bf82:	4013      	ands	r3, r2
 801bf84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	685b      	ldr	r3, [r3, #4]
 801bf8a:	f003 0203 	and.w	r2, r3, #3
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	005b      	lsls	r3, r3, #1
 801bf92:	fa02 f303 	lsl.w	r3, r2, r3
 801bf96:	693a      	ldr	r2, [r7, #16]
 801bf98:	4313      	orrs	r3, r2
 801bf9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	693a      	ldr	r2, [r7, #16]
 801bfa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	685b      	ldr	r3, [r3, #4]
 801bfa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	f000 80a0 	beq.w	801c0f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bfb0:	4b58      	ldr	r3, [pc, #352]	@ (801c114 <HAL_GPIO_Init+0x2d8>)
 801bfb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bfb4:	4a57      	ldr	r2, [pc, #348]	@ (801c114 <HAL_GPIO_Init+0x2d8>)
 801bfb6:	f043 0301 	orr.w	r3, r3, #1
 801bfba:	6613      	str	r3, [r2, #96]	@ 0x60
 801bfbc:	4b55      	ldr	r3, [pc, #340]	@ (801c114 <HAL_GPIO_Init+0x2d8>)
 801bfbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bfc0:	f003 0301 	and.w	r3, r3, #1
 801bfc4:	60bb      	str	r3, [r7, #8]
 801bfc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801bfc8:	4a53      	ldr	r2, [pc, #332]	@ (801c118 <HAL_GPIO_Init+0x2dc>)
 801bfca:	697b      	ldr	r3, [r7, #20]
 801bfcc:	089b      	lsrs	r3, r3, #2
 801bfce:	3302      	adds	r3, #2
 801bfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bfd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	f003 0303 	and.w	r3, r3, #3
 801bfdc:	009b      	lsls	r3, r3, #2
 801bfde:	220f      	movs	r2, #15
 801bfe0:	fa02 f303 	lsl.w	r3, r2, r3
 801bfe4:	43db      	mvns	r3, r3
 801bfe6:	693a      	ldr	r2, [r7, #16]
 801bfe8:	4013      	ands	r3, r2
 801bfea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801bff2:	d019      	beq.n	801c028 <HAL_GPIO_Init+0x1ec>
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	4a49      	ldr	r2, [pc, #292]	@ (801c11c <HAL_GPIO_Init+0x2e0>)
 801bff8:	4293      	cmp	r3, r2
 801bffa:	d013      	beq.n	801c024 <HAL_GPIO_Init+0x1e8>
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	4a48      	ldr	r2, [pc, #288]	@ (801c120 <HAL_GPIO_Init+0x2e4>)
 801c000:	4293      	cmp	r3, r2
 801c002:	d00d      	beq.n	801c020 <HAL_GPIO_Init+0x1e4>
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	4a47      	ldr	r2, [pc, #284]	@ (801c124 <HAL_GPIO_Init+0x2e8>)
 801c008:	4293      	cmp	r3, r2
 801c00a:	d007      	beq.n	801c01c <HAL_GPIO_Init+0x1e0>
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	4a46      	ldr	r2, [pc, #280]	@ (801c128 <HAL_GPIO_Init+0x2ec>)
 801c010:	4293      	cmp	r3, r2
 801c012:	d101      	bne.n	801c018 <HAL_GPIO_Init+0x1dc>
 801c014:	2304      	movs	r3, #4
 801c016:	e008      	b.n	801c02a <HAL_GPIO_Init+0x1ee>
 801c018:	2307      	movs	r3, #7
 801c01a:	e006      	b.n	801c02a <HAL_GPIO_Init+0x1ee>
 801c01c:	2303      	movs	r3, #3
 801c01e:	e004      	b.n	801c02a <HAL_GPIO_Init+0x1ee>
 801c020:	2302      	movs	r3, #2
 801c022:	e002      	b.n	801c02a <HAL_GPIO_Init+0x1ee>
 801c024:	2301      	movs	r3, #1
 801c026:	e000      	b.n	801c02a <HAL_GPIO_Init+0x1ee>
 801c028:	2300      	movs	r3, #0
 801c02a:	697a      	ldr	r2, [r7, #20]
 801c02c:	f002 0203 	and.w	r2, r2, #3
 801c030:	0092      	lsls	r2, r2, #2
 801c032:	4093      	lsls	r3, r2
 801c034:	693a      	ldr	r2, [r7, #16]
 801c036:	4313      	orrs	r3, r2
 801c038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801c03a:	4937      	ldr	r1, [pc, #220]	@ (801c118 <HAL_GPIO_Init+0x2dc>)
 801c03c:	697b      	ldr	r3, [r7, #20]
 801c03e:	089b      	lsrs	r3, r3, #2
 801c040:	3302      	adds	r3, #2
 801c042:	693a      	ldr	r2, [r7, #16]
 801c044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c048:	4b38      	ldr	r3, [pc, #224]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c04a:	689b      	ldr	r3, [r3, #8]
 801c04c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	43db      	mvns	r3, r3
 801c052:	693a      	ldr	r2, [r7, #16]
 801c054:	4013      	ands	r3, r2
 801c056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801c058:	683b      	ldr	r3, [r7, #0]
 801c05a:	685b      	ldr	r3, [r3, #4]
 801c05c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c060:	2b00      	cmp	r3, #0
 801c062:	d003      	beq.n	801c06c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801c064:	693a      	ldr	r2, [r7, #16]
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	4313      	orrs	r3, r2
 801c06a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c06c:	4a2f      	ldr	r2, [pc, #188]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c06e:	693b      	ldr	r3, [r7, #16]
 801c070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c072:	4b2e      	ldr	r3, [pc, #184]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c074:	68db      	ldr	r3, [r3, #12]
 801c076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	43db      	mvns	r3, r3
 801c07c:	693a      	ldr	r2, [r7, #16]
 801c07e:	4013      	ands	r3, r2
 801c080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801c082:	683b      	ldr	r3, [r7, #0]
 801c084:	685b      	ldr	r3, [r3, #4]
 801c086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d003      	beq.n	801c096 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801c08e:	693a      	ldr	r2, [r7, #16]
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	4313      	orrs	r3, r2
 801c094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c096:	4a25      	ldr	r2, [pc, #148]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c098:	693b      	ldr	r3, [r7, #16]
 801c09a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801c09c:	4b23      	ldr	r3, [pc, #140]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c09e:	685b      	ldr	r3, [r3, #4]
 801c0a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	43db      	mvns	r3, r3
 801c0a6:	693a      	ldr	r2, [r7, #16]
 801c0a8:	4013      	ands	r3, r2
 801c0aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	685b      	ldr	r3, [r3, #4]
 801c0b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d003      	beq.n	801c0c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 801c0b8:	693a      	ldr	r2, [r7, #16]
 801c0ba:	68fb      	ldr	r3, [r7, #12]
 801c0bc:	4313      	orrs	r3, r2
 801c0be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c0c0:	4a1a      	ldr	r2, [pc, #104]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c0c2:	693b      	ldr	r3, [r7, #16]
 801c0c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 801c0c6:	4b19      	ldr	r3, [pc, #100]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	43db      	mvns	r3, r3
 801c0d0:	693a      	ldr	r2, [r7, #16]
 801c0d2:	4013      	ands	r3, r2
 801c0d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	685b      	ldr	r3, [r3, #4]
 801c0da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d003      	beq.n	801c0ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c0e2:	693a      	ldr	r2, [r7, #16]
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	4313      	orrs	r3, r2
 801c0e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c0ea:	4a10      	ldr	r2, [pc, #64]	@ (801c12c <HAL_GPIO_Init+0x2f0>)
 801c0ec:	693b      	ldr	r3, [r7, #16]
 801c0ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c0f0:	697b      	ldr	r3, [r7, #20]
 801c0f2:	3301      	adds	r3, #1
 801c0f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801c0f6:	683b      	ldr	r3, [r7, #0]
 801c0f8:	681a      	ldr	r2, [r3, #0]
 801c0fa:	697b      	ldr	r3, [r7, #20]
 801c0fc:	fa22 f303 	lsr.w	r3, r2, r3
 801c100:	2b00      	cmp	r3, #0
 801c102:	f47f aea3 	bne.w	801be4c <HAL_GPIO_Init+0x10>
  }
}
 801c106:	bf00      	nop
 801c108:	bf00      	nop
 801c10a:	371c      	adds	r7, #28
 801c10c:	46bd      	mov	sp, r7
 801c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c112:	4770      	bx	lr
 801c114:	40021000 	.word	0x40021000
 801c118:	40010000 	.word	0x40010000
 801c11c:	48000400 	.word	0x48000400
 801c120:	48000800 	.word	0x48000800
 801c124:	48000c00 	.word	0x48000c00
 801c128:	48001000 	.word	0x48001000
 801c12c:	40010400 	.word	0x40010400

0801c130 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801c130:	b480      	push	{r7}
 801c132:	b087      	sub	sp, #28
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
 801c138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801c13a:	2300      	movs	r3, #0
 801c13c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801c13e:	e0b7      	b.n	801c2b0 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801c140:	2201      	movs	r2, #1
 801c142:	697b      	ldr	r3, [r7, #20]
 801c144:	fa02 f303 	lsl.w	r3, r2, r3
 801c148:	683a      	ldr	r2, [r7, #0]
 801c14a:	4013      	ands	r3, r2
 801c14c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801c14e:	693b      	ldr	r3, [r7, #16]
 801c150:	2b00      	cmp	r3, #0
 801c152:	f000 80aa 	beq.w	801c2aa <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801c156:	4a5d      	ldr	r2, [pc, #372]	@ (801c2cc <HAL_GPIO_DeInit+0x19c>)
 801c158:	697b      	ldr	r3, [r7, #20]
 801c15a:	089b      	lsrs	r3, r3, #2
 801c15c:	3302      	adds	r3, #2
 801c15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c162:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 801c164:	697b      	ldr	r3, [r7, #20]
 801c166:	f003 0303 	and.w	r3, r3, #3
 801c16a:	009b      	lsls	r3, r3, #2
 801c16c:	220f      	movs	r2, #15
 801c16e:	fa02 f303 	lsl.w	r3, r2, r3
 801c172:	68fa      	ldr	r2, [r7, #12]
 801c174:	4013      	ands	r3, r2
 801c176:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801c17e:	d019      	beq.n	801c1b4 <HAL_GPIO_DeInit+0x84>
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	4a53      	ldr	r2, [pc, #332]	@ (801c2d0 <HAL_GPIO_DeInit+0x1a0>)
 801c184:	4293      	cmp	r3, r2
 801c186:	d013      	beq.n	801c1b0 <HAL_GPIO_DeInit+0x80>
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	4a52      	ldr	r2, [pc, #328]	@ (801c2d4 <HAL_GPIO_DeInit+0x1a4>)
 801c18c:	4293      	cmp	r3, r2
 801c18e:	d00d      	beq.n	801c1ac <HAL_GPIO_DeInit+0x7c>
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	4a51      	ldr	r2, [pc, #324]	@ (801c2d8 <HAL_GPIO_DeInit+0x1a8>)
 801c194:	4293      	cmp	r3, r2
 801c196:	d007      	beq.n	801c1a8 <HAL_GPIO_DeInit+0x78>
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	4a50      	ldr	r2, [pc, #320]	@ (801c2dc <HAL_GPIO_DeInit+0x1ac>)
 801c19c:	4293      	cmp	r3, r2
 801c19e:	d101      	bne.n	801c1a4 <HAL_GPIO_DeInit+0x74>
 801c1a0:	2304      	movs	r3, #4
 801c1a2:	e008      	b.n	801c1b6 <HAL_GPIO_DeInit+0x86>
 801c1a4:	2307      	movs	r3, #7
 801c1a6:	e006      	b.n	801c1b6 <HAL_GPIO_DeInit+0x86>
 801c1a8:	2303      	movs	r3, #3
 801c1aa:	e004      	b.n	801c1b6 <HAL_GPIO_DeInit+0x86>
 801c1ac:	2302      	movs	r3, #2
 801c1ae:	e002      	b.n	801c1b6 <HAL_GPIO_DeInit+0x86>
 801c1b0:	2301      	movs	r3, #1
 801c1b2:	e000      	b.n	801c1b6 <HAL_GPIO_DeInit+0x86>
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	697a      	ldr	r2, [r7, #20]
 801c1b8:	f002 0203 	and.w	r2, r2, #3
 801c1bc:	0092      	lsls	r2, r2, #2
 801c1be:	4093      	lsls	r3, r2
 801c1c0:	68fa      	ldr	r2, [r7, #12]
 801c1c2:	429a      	cmp	r2, r3
 801c1c4:	d132      	bne.n	801c22c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801c1c6:	4b46      	ldr	r3, [pc, #280]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1c8:	681a      	ldr	r2, [r3, #0]
 801c1ca:	693b      	ldr	r3, [r7, #16]
 801c1cc:	43db      	mvns	r3, r3
 801c1ce:	4944      	ldr	r1, [pc, #272]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1d0:	4013      	ands	r3, r2
 801c1d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 801c1d4:	4b42      	ldr	r3, [pc, #264]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1d6:	685a      	ldr	r2, [r3, #4]
 801c1d8:	693b      	ldr	r3, [r7, #16]
 801c1da:	43db      	mvns	r3, r3
 801c1dc:	4940      	ldr	r1, [pc, #256]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1de:	4013      	ands	r3, r2
 801c1e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801c1e2:	4b3f      	ldr	r3, [pc, #252]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1e4:	68da      	ldr	r2, [r3, #12]
 801c1e6:	693b      	ldr	r3, [r7, #16]
 801c1e8:	43db      	mvns	r3, r3
 801c1ea:	493d      	ldr	r1, [pc, #244]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1ec:	4013      	ands	r3, r2
 801c1ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 801c1f0:	4b3b      	ldr	r3, [pc, #236]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1f2:	689a      	ldr	r2, [r3, #8]
 801c1f4:	693b      	ldr	r3, [r7, #16]
 801c1f6:	43db      	mvns	r3, r3
 801c1f8:	4939      	ldr	r1, [pc, #228]	@ (801c2e0 <HAL_GPIO_DeInit+0x1b0>)
 801c1fa:	4013      	ands	r3, r2
 801c1fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 801c1fe:	697b      	ldr	r3, [r7, #20]
 801c200:	f003 0303 	and.w	r3, r3, #3
 801c204:	009b      	lsls	r3, r3, #2
 801c206:	220f      	movs	r2, #15
 801c208:	fa02 f303 	lsl.w	r3, r2, r3
 801c20c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801c20e:	4a2f      	ldr	r2, [pc, #188]	@ (801c2cc <HAL_GPIO_DeInit+0x19c>)
 801c210:	697b      	ldr	r3, [r7, #20]
 801c212:	089b      	lsrs	r3, r3, #2
 801c214:	3302      	adds	r3, #2
 801c216:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	43da      	mvns	r2, r3
 801c21e:	482b      	ldr	r0, [pc, #172]	@ (801c2cc <HAL_GPIO_DeInit+0x19c>)
 801c220:	697b      	ldr	r3, [r7, #20]
 801c222:	089b      	lsrs	r3, r3, #2
 801c224:	400a      	ands	r2, r1
 801c226:	3302      	adds	r3, #2
 801c228:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681a      	ldr	r2, [r3, #0]
 801c230:	697b      	ldr	r3, [r7, #20]
 801c232:	005b      	lsls	r3, r3, #1
 801c234:	2103      	movs	r1, #3
 801c236:	fa01 f303 	lsl.w	r3, r1, r3
 801c23a:	431a      	orrs	r2, r3
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801c240:	697b      	ldr	r3, [r7, #20]
 801c242:	08da      	lsrs	r2, r3, #3
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	3208      	adds	r2, #8
 801c248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c24c:	697b      	ldr	r3, [r7, #20]
 801c24e:	f003 0307 	and.w	r3, r3, #7
 801c252:	009b      	lsls	r3, r3, #2
 801c254:	220f      	movs	r2, #15
 801c256:	fa02 f303 	lsl.w	r3, r2, r3
 801c25a:	43db      	mvns	r3, r3
 801c25c:	697a      	ldr	r2, [r7, #20]
 801c25e:	08d2      	lsrs	r2, r2, #3
 801c260:	4019      	ands	r1, r3
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	3208      	adds	r2, #8
 801c266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	689a      	ldr	r2, [r3, #8]
 801c26e:	697b      	ldr	r3, [r7, #20]
 801c270:	005b      	lsls	r3, r3, #1
 801c272:	2103      	movs	r1, #3
 801c274:	fa01 f303 	lsl.w	r3, r1, r3
 801c278:	43db      	mvns	r3, r3
 801c27a:	401a      	ands	r2, r3
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	685a      	ldr	r2, [r3, #4]
 801c284:	2101      	movs	r1, #1
 801c286:	697b      	ldr	r3, [r7, #20]
 801c288:	fa01 f303 	lsl.w	r3, r1, r3
 801c28c:	43db      	mvns	r3, r3
 801c28e:	401a      	ands	r2, r3
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	68da      	ldr	r2, [r3, #12]
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	005b      	lsls	r3, r3, #1
 801c29c:	2103      	movs	r1, #3
 801c29e:	fa01 f303 	lsl.w	r3, r1, r3
 801c2a2:	43db      	mvns	r3, r3
 801c2a4:	401a      	ands	r2, r3
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 801c2aa:	697b      	ldr	r3, [r7, #20]
 801c2ac:	3301      	adds	r3, #1
 801c2ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801c2b0:	683a      	ldr	r2, [r7, #0]
 801c2b2:	697b      	ldr	r3, [r7, #20]
 801c2b4:	fa22 f303 	lsr.w	r3, r2, r3
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	f47f af41 	bne.w	801c140 <HAL_GPIO_DeInit+0x10>
  }
}
 801c2be:	bf00      	nop
 801c2c0:	bf00      	nop
 801c2c2:	371c      	adds	r7, #28
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ca:	4770      	bx	lr
 801c2cc:	40010000 	.word	0x40010000
 801c2d0:	48000400 	.word	0x48000400
 801c2d4:	48000800 	.word	0x48000800
 801c2d8:	48000c00 	.word	0x48000c00
 801c2dc:	48001000 	.word	0x48001000
 801c2e0:	40010400 	.word	0x40010400

0801c2e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801c2e4:	b480      	push	{r7}
 801c2e6:	b085      	sub	sp, #20
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	460b      	mov	r3, r1
 801c2ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	691a      	ldr	r2, [r3, #16]
 801c2f4:	887b      	ldrh	r3, [r7, #2]
 801c2f6:	4013      	ands	r3, r2
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d002      	beq.n	801c302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	73fb      	strb	r3, [r7, #15]
 801c300:	e001      	b.n	801c306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801c302:	2300      	movs	r3, #0
 801c304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801c306:	7bfb      	ldrb	r3, [r7, #15]
}
 801c308:	4618      	mov	r0, r3
 801c30a:	3714      	adds	r7, #20
 801c30c:	46bd      	mov	sp, r7
 801c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c312:	4770      	bx	lr

0801c314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c314:	b480      	push	{r7}
 801c316:	b083      	sub	sp, #12
 801c318:	af00      	add	r7, sp, #0
 801c31a:	6078      	str	r0, [r7, #4]
 801c31c:	460b      	mov	r3, r1
 801c31e:	807b      	strh	r3, [r7, #2]
 801c320:	4613      	mov	r3, r2
 801c322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c324:	787b      	ldrb	r3, [r7, #1]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d003      	beq.n	801c332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801c32a:	887a      	ldrh	r2, [r7, #2]
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801c330:	e002      	b.n	801c338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801c332:	887a      	ldrh	r2, [r7, #2]
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801c338:	bf00      	nop
 801c33a:	370c      	adds	r7, #12
 801c33c:	46bd      	mov	sp, r7
 801c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c342:	4770      	bx	lr

0801c344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b082      	sub	sp, #8
 801c348:	af00      	add	r7, sp, #0
 801c34a:	4603      	mov	r3, r0
 801c34c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801c34e:	4b08      	ldr	r3, [pc, #32]	@ (801c370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c350:	695a      	ldr	r2, [r3, #20]
 801c352:	88fb      	ldrh	r3, [r7, #6]
 801c354:	4013      	ands	r3, r2
 801c356:	2b00      	cmp	r3, #0
 801c358:	d006      	beq.n	801c368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801c35a:	4a05      	ldr	r2, [pc, #20]	@ (801c370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c35c:	88fb      	ldrh	r3, [r7, #6]
 801c35e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801c360:	88fb      	ldrh	r3, [r7, #6]
 801c362:	4618      	mov	r0, r3
 801c364:	f000 f806 	bl	801c374 <HAL_GPIO_EXTI_Callback>
  }
}
 801c368:	bf00      	nop
 801c36a:	3708      	adds	r7, #8
 801c36c:	46bd      	mov	sp, r7
 801c36e:	bd80      	pop	{r7, pc}
 801c370:	40010400 	.word	0x40010400

0801c374 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801c374:	b480      	push	{r7}
 801c376:	b083      	sub	sp, #12
 801c378:	af00      	add	r7, sp, #0
 801c37a:	4603      	mov	r3, r0
 801c37c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801c37e:	bf00      	nop
 801c380:	370c      	adds	r7, #12
 801c382:	46bd      	mov	sp, r7
 801c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c388:	4770      	bx	lr
	...

0801c38c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801c38c:	b480      	push	{r7}
 801c38e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 801c390:	4b04      	ldr	r3, [pc, #16]	@ (801c3a4 <HAL_PWREx_GetVoltageRange+0x18>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 801c398:	4618      	mov	r0, r3
 801c39a:	46bd      	mov	sp, r7
 801c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3a0:	4770      	bx	lr
 801c3a2:	bf00      	nop
 801c3a4:	40007000 	.word	0x40007000

0801c3a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801c3a8:	b480      	push	{r7}
 801c3aa:	b085      	sub	sp, #20
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c3b6:	d130      	bne.n	801c41a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801c3b8:	4b23      	ldr	r3, [pc, #140]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801c3c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c3c4:	d038      	beq.n	801c438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c3c6:	4b20      	ldr	r3, [pc, #128]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801c3ce:	4a1e      	ldr	r2, [pc, #120]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c3d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801c3d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c3d6:	4b1d      	ldr	r3, [pc, #116]	@ (801c44c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	2232      	movs	r2, #50	@ 0x32
 801c3dc:	fb02 f303 	mul.w	r3, r2, r3
 801c3e0:	4a1b      	ldr	r2, [pc, #108]	@ (801c450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801c3e2:	fba2 2303 	umull	r2, r3, r2, r3
 801c3e6:	0c9b      	lsrs	r3, r3, #18
 801c3e8:	3301      	adds	r3, #1
 801c3ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c3ec:	e002      	b.n	801c3f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	3b01      	subs	r3, #1
 801c3f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c3f4:	4b14      	ldr	r3, [pc, #80]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c3f6:	695b      	ldr	r3, [r3, #20]
 801c3f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c3fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c400:	d102      	bne.n	801c408 <HAL_PWREx_ControlVoltageScaling+0x60>
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d1f2      	bne.n	801c3ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c408:	4b0f      	ldr	r3, [pc, #60]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c40a:	695b      	ldr	r3, [r3, #20]
 801c40c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c414:	d110      	bne.n	801c438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801c416:	2303      	movs	r3, #3
 801c418:	e00f      	b.n	801c43a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801c41a:	4b0b      	ldr	r3, [pc, #44]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801c422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c426:	d007      	beq.n	801c438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801c428:	4b07      	ldr	r3, [pc, #28]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801c430:	4a05      	ldr	r2, [pc, #20]	@ (801c448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801c436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801c438:	2300      	movs	r3, #0
}
 801c43a:	4618      	mov	r0, r3
 801c43c:	3714      	adds	r7, #20
 801c43e:	46bd      	mov	sp, r7
 801c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c444:	4770      	bx	lr
 801c446:	bf00      	nop
 801c448:	40007000 	.word	0x40007000
 801c44c:	20000000 	.word	0x20000000
 801c450:	431bde83 	.word	0x431bde83

0801c454 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c454:	b580      	push	{r7, lr}
 801c456:	b088      	sub	sp, #32
 801c458:	af00      	add	r7, sp, #0
 801c45a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d102      	bne.n	801c468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c462:	2301      	movs	r3, #1
 801c464:	f000 bc02 	b.w	801cc6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c468:	4b96      	ldr	r3, [pc, #600]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c46a:	689b      	ldr	r3, [r3, #8]
 801c46c:	f003 030c 	and.w	r3, r3, #12
 801c470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c472:	4b94      	ldr	r3, [pc, #592]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c474:	68db      	ldr	r3, [r3, #12]
 801c476:	f003 0303 	and.w	r3, r3, #3
 801c47a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f003 0310 	and.w	r3, r3, #16
 801c484:	2b00      	cmp	r3, #0
 801c486:	f000 80e4 	beq.w	801c652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801c48a:	69bb      	ldr	r3, [r7, #24]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d007      	beq.n	801c4a0 <HAL_RCC_OscConfig+0x4c>
 801c490:	69bb      	ldr	r3, [r7, #24]
 801c492:	2b0c      	cmp	r3, #12
 801c494:	f040 808b 	bne.w	801c5ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801c498:	697b      	ldr	r3, [r7, #20]
 801c49a:	2b01      	cmp	r3, #1
 801c49c:	f040 8087 	bne.w	801c5ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c4a0:	4b88      	ldr	r3, [pc, #544]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	f003 0302 	and.w	r3, r3, #2
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d005      	beq.n	801c4b8 <HAL_RCC_OscConfig+0x64>
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	699b      	ldr	r3, [r3, #24]
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d101      	bne.n	801c4b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801c4b4:	2301      	movs	r3, #1
 801c4b6:	e3d9      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	6a1a      	ldr	r2, [r3, #32]
 801c4bc:	4b81      	ldr	r3, [pc, #516]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	f003 0308 	and.w	r3, r3, #8
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d004      	beq.n	801c4d2 <HAL_RCC_OscConfig+0x7e>
 801c4c8:	4b7e      	ldr	r3, [pc, #504]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c4d0:	e005      	b.n	801c4de <HAL_RCC_OscConfig+0x8a>
 801c4d2:	4b7c      	ldr	r3, [pc, #496]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c4d8:	091b      	lsrs	r3, r3, #4
 801c4da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c4de:	4293      	cmp	r3, r2
 801c4e0:	d223      	bcs.n	801c52a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	6a1b      	ldr	r3, [r3, #32]
 801c4e6:	4618      	mov	r0, r3
 801c4e8:	f000 fd8c 	bl	801d004 <RCC_SetFlashLatencyFromMSIRange>
 801c4ec:	4603      	mov	r3, r0
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d001      	beq.n	801c4f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 801c4f2:	2301      	movs	r3, #1
 801c4f4:	e3ba      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c4f6:	4b73      	ldr	r3, [pc, #460]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	4a72      	ldr	r2, [pc, #456]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c4fc:	f043 0308 	orr.w	r3, r3, #8
 801c500:	6013      	str	r3, [r2, #0]
 801c502:	4b70      	ldr	r3, [pc, #448]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	6a1b      	ldr	r3, [r3, #32]
 801c50e:	496d      	ldr	r1, [pc, #436]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c510:	4313      	orrs	r3, r2
 801c512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c514:	4b6b      	ldr	r3, [pc, #428]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c516:	685b      	ldr	r3, [r3, #4]
 801c518:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	69db      	ldr	r3, [r3, #28]
 801c520:	021b      	lsls	r3, r3, #8
 801c522:	4968      	ldr	r1, [pc, #416]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c524:	4313      	orrs	r3, r2
 801c526:	604b      	str	r3, [r1, #4]
 801c528:	e025      	b.n	801c576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c52a:	4b66      	ldr	r3, [pc, #408]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	4a65      	ldr	r2, [pc, #404]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c530:	f043 0308 	orr.w	r3, r3, #8
 801c534:	6013      	str	r3, [r2, #0]
 801c536:	4b63      	ldr	r3, [pc, #396]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	6a1b      	ldr	r3, [r3, #32]
 801c542:	4960      	ldr	r1, [pc, #384]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c544:	4313      	orrs	r3, r2
 801c546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c548:	4b5e      	ldr	r3, [pc, #376]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	69db      	ldr	r3, [r3, #28]
 801c554:	021b      	lsls	r3, r3, #8
 801c556:	495b      	ldr	r1, [pc, #364]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c558:	4313      	orrs	r3, r2
 801c55a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801c55c:	69bb      	ldr	r3, [r7, #24]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d109      	bne.n	801c576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	6a1b      	ldr	r3, [r3, #32]
 801c566:	4618      	mov	r0, r3
 801c568:	f000 fd4c 	bl	801d004 <RCC_SetFlashLatencyFromMSIRange>
 801c56c:	4603      	mov	r3, r0
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d001      	beq.n	801c576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 801c572:	2301      	movs	r3, #1
 801c574:	e37a      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c576:	f000 fc81 	bl	801ce7c <HAL_RCC_GetSysClockFreq>
 801c57a:	4602      	mov	r2, r0
 801c57c:	4b51      	ldr	r3, [pc, #324]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c57e:	689b      	ldr	r3, [r3, #8]
 801c580:	091b      	lsrs	r3, r3, #4
 801c582:	f003 030f 	and.w	r3, r3, #15
 801c586:	4950      	ldr	r1, [pc, #320]	@ (801c6c8 <HAL_RCC_OscConfig+0x274>)
 801c588:	5ccb      	ldrb	r3, [r1, r3]
 801c58a:	f003 031f 	and.w	r3, r3, #31
 801c58e:	fa22 f303 	lsr.w	r3, r2, r3
 801c592:	4a4e      	ldr	r2, [pc, #312]	@ (801c6cc <HAL_RCC_OscConfig+0x278>)
 801c594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801c596:	4b4e      	ldr	r3, [pc, #312]	@ (801c6d0 <HAL_RCC_OscConfig+0x27c>)
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	4618      	mov	r0, r3
 801c59c:	f7ff fa3e 	bl	801ba1c <HAL_InitTick>
 801c5a0:	4603      	mov	r3, r0
 801c5a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801c5a4:	7bfb      	ldrb	r3, [r7, #15]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d052      	beq.n	801c650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 801c5aa:	7bfb      	ldrb	r3, [r7, #15]
 801c5ac:	e35e      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	699b      	ldr	r3, [r3, #24]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d032      	beq.n	801c61c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801c5b6:	4b43      	ldr	r3, [pc, #268]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	4a42      	ldr	r2, [pc, #264]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c5bc:	f043 0301 	orr.w	r3, r3, #1
 801c5c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c5c2:	f7ff fa7b 	bl	801babc <HAL_GetTick>
 801c5c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c5c8:	e008      	b.n	801c5dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c5ca:	f7ff fa77 	bl	801babc <HAL_GetTick>
 801c5ce:	4602      	mov	r2, r0
 801c5d0:	693b      	ldr	r3, [r7, #16]
 801c5d2:	1ad3      	subs	r3, r2, r3
 801c5d4:	2b02      	cmp	r3, #2
 801c5d6:	d901      	bls.n	801c5dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 801c5d8:	2303      	movs	r3, #3
 801c5da:	e347      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c5dc:	4b39      	ldr	r3, [pc, #228]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	f003 0302 	and.w	r3, r3, #2
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d0f0      	beq.n	801c5ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c5e8:	4b36      	ldr	r3, [pc, #216]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	4a35      	ldr	r2, [pc, #212]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c5ee:	f043 0308 	orr.w	r3, r3, #8
 801c5f2:	6013      	str	r3, [r2, #0]
 801c5f4:	4b33      	ldr	r3, [pc, #204]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	6a1b      	ldr	r3, [r3, #32]
 801c600:	4930      	ldr	r1, [pc, #192]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c602:	4313      	orrs	r3, r2
 801c604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c606:	4b2f      	ldr	r3, [pc, #188]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	69db      	ldr	r3, [r3, #28]
 801c612:	021b      	lsls	r3, r3, #8
 801c614:	492b      	ldr	r1, [pc, #172]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c616:	4313      	orrs	r3, r2
 801c618:	604b      	str	r3, [r1, #4]
 801c61a:	e01a      	b.n	801c652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801c61c:	4b29      	ldr	r3, [pc, #164]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	4a28      	ldr	r2, [pc, #160]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c622:	f023 0301 	bic.w	r3, r3, #1
 801c626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c628:	f7ff fa48 	bl	801babc <HAL_GetTick>
 801c62c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c62e:	e008      	b.n	801c642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c630:	f7ff fa44 	bl	801babc <HAL_GetTick>
 801c634:	4602      	mov	r2, r0
 801c636:	693b      	ldr	r3, [r7, #16]
 801c638:	1ad3      	subs	r3, r2, r3
 801c63a:	2b02      	cmp	r3, #2
 801c63c:	d901      	bls.n	801c642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 801c63e:	2303      	movs	r3, #3
 801c640:	e314      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c642:	4b20      	ldr	r3, [pc, #128]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	f003 0302 	and.w	r3, r3, #2
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d1f0      	bne.n	801c630 <HAL_RCC_OscConfig+0x1dc>
 801c64e:	e000      	b.n	801c652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	f003 0301 	and.w	r3, r3, #1
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d073      	beq.n	801c746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801c65e:	69bb      	ldr	r3, [r7, #24]
 801c660:	2b08      	cmp	r3, #8
 801c662:	d005      	beq.n	801c670 <HAL_RCC_OscConfig+0x21c>
 801c664:	69bb      	ldr	r3, [r7, #24]
 801c666:	2b0c      	cmp	r3, #12
 801c668:	d10e      	bne.n	801c688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801c66a:	697b      	ldr	r3, [r7, #20]
 801c66c:	2b03      	cmp	r3, #3
 801c66e:	d10b      	bne.n	801c688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c670:	4b14      	ldr	r3, [pc, #80]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d063      	beq.n	801c744 <HAL_RCC_OscConfig+0x2f0>
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	685b      	ldr	r3, [r3, #4]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d15f      	bne.n	801c744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801c684:	2301      	movs	r3, #1
 801c686:	e2f1      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	685b      	ldr	r3, [r3, #4]
 801c68c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c690:	d106      	bne.n	801c6a0 <HAL_RCC_OscConfig+0x24c>
 801c692:	4b0c      	ldr	r3, [pc, #48]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	4a0b      	ldr	r2, [pc, #44]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c69c:	6013      	str	r3, [r2, #0]
 801c69e:	e025      	b.n	801c6ec <HAL_RCC_OscConfig+0x298>
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	685b      	ldr	r3, [r3, #4]
 801c6a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c6a8:	d114      	bne.n	801c6d4 <HAL_RCC_OscConfig+0x280>
 801c6aa:	4b06      	ldr	r3, [pc, #24]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	4a05      	ldr	r2, [pc, #20]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c6b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c6b4:	6013      	str	r3, [r2, #0]
 801c6b6:	4b03      	ldr	r3, [pc, #12]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	4a02      	ldr	r2, [pc, #8]	@ (801c6c4 <HAL_RCC_OscConfig+0x270>)
 801c6bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c6c0:	6013      	str	r3, [r2, #0]
 801c6c2:	e013      	b.n	801c6ec <HAL_RCC_OscConfig+0x298>
 801c6c4:	40021000 	.word	0x40021000
 801c6c8:	08025138 	.word	0x08025138
 801c6cc:	20000000 	.word	0x20000000
 801c6d0:	20000070 	.word	0x20000070
 801c6d4:	4ba0      	ldr	r3, [pc, #640]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	4a9f      	ldr	r2, [pc, #636]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c6da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c6de:	6013      	str	r3, [r2, #0]
 801c6e0:	4b9d      	ldr	r3, [pc, #628]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	4a9c      	ldr	r2, [pc, #624]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c6e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c6ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	685b      	ldr	r3, [r3, #4]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d013      	beq.n	801c71c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c6f4:	f7ff f9e2 	bl	801babc <HAL_GetTick>
 801c6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c6fa:	e008      	b.n	801c70e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c6fc:	f7ff f9de 	bl	801babc <HAL_GetTick>
 801c700:	4602      	mov	r2, r0
 801c702:	693b      	ldr	r3, [r7, #16]
 801c704:	1ad3      	subs	r3, r2, r3
 801c706:	2b64      	cmp	r3, #100	@ 0x64
 801c708:	d901      	bls.n	801c70e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801c70a:	2303      	movs	r3, #3
 801c70c:	e2ae      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c70e:	4b92      	ldr	r3, [pc, #584]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c716:	2b00      	cmp	r3, #0
 801c718:	d0f0      	beq.n	801c6fc <HAL_RCC_OscConfig+0x2a8>
 801c71a:	e014      	b.n	801c746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c71c:	f7ff f9ce 	bl	801babc <HAL_GetTick>
 801c720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c722:	e008      	b.n	801c736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c724:	f7ff f9ca 	bl	801babc <HAL_GetTick>
 801c728:	4602      	mov	r2, r0
 801c72a:	693b      	ldr	r3, [r7, #16]
 801c72c:	1ad3      	subs	r3, r2, r3
 801c72e:	2b64      	cmp	r3, #100	@ 0x64
 801c730:	d901      	bls.n	801c736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801c732:	2303      	movs	r3, #3
 801c734:	e29a      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c736:	4b88      	ldr	r3, [pc, #544]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d1f0      	bne.n	801c724 <HAL_RCC_OscConfig+0x2d0>
 801c742:	e000      	b.n	801c746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	f003 0302 	and.w	r3, r3, #2
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d060      	beq.n	801c814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801c752:	69bb      	ldr	r3, [r7, #24]
 801c754:	2b04      	cmp	r3, #4
 801c756:	d005      	beq.n	801c764 <HAL_RCC_OscConfig+0x310>
 801c758:	69bb      	ldr	r3, [r7, #24]
 801c75a:	2b0c      	cmp	r3, #12
 801c75c:	d119      	bne.n	801c792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	2b02      	cmp	r3, #2
 801c762:	d116      	bne.n	801c792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c764:	4b7c      	ldr	r3, [pc, #496]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d005      	beq.n	801c77c <HAL_RCC_OscConfig+0x328>
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	68db      	ldr	r3, [r3, #12]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d101      	bne.n	801c77c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801c778:	2301      	movs	r3, #1
 801c77a:	e277      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c77c:	4b76      	ldr	r3, [pc, #472]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c77e:	685b      	ldr	r3, [r3, #4]
 801c780:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	691b      	ldr	r3, [r3, #16]
 801c788:	061b      	lsls	r3, r3, #24
 801c78a:	4973      	ldr	r1, [pc, #460]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c78c:	4313      	orrs	r3, r2
 801c78e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c790:	e040      	b.n	801c814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	68db      	ldr	r3, [r3, #12]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d023      	beq.n	801c7e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c79a:	4b6f      	ldr	r3, [pc, #444]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	4a6e      	ldr	r2, [pc, #440]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c7a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c7a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7a6:	f7ff f989 	bl	801babc <HAL_GetTick>
 801c7aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c7ac:	e008      	b.n	801c7c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c7ae:	f7ff f985 	bl	801babc <HAL_GetTick>
 801c7b2:	4602      	mov	r2, r0
 801c7b4:	693b      	ldr	r3, [r7, #16]
 801c7b6:	1ad3      	subs	r3, r2, r3
 801c7b8:	2b02      	cmp	r3, #2
 801c7ba:	d901      	bls.n	801c7c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 801c7bc:	2303      	movs	r3, #3
 801c7be:	e255      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c7c0:	4b65      	ldr	r3, [pc, #404]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d0f0      	beq.n	801c7ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c7cc:	4b62      	ldr	r3, [pc, #392]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c7ce:	685b      	ldr	r3, [r3, #4]
 801c7d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	691b      	ldr	r3, [r3, #16]
 801c7d8:	061b      	lsls	r3, r3, #24
 801c7da:	495f      	ldr	r1, [pc, #380]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c7dc:	4313      	orrs	r3, r2
 801c7de:	604b      	str	r3, [r1, #4]
 801c7e0:	e018      	b.n	801c814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c7e2:	4b5d      	ldr	r3, [pc, #372]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	4a5c      	ldr	r2, [pc, #368]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c7e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c7ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7ee:	f7ff f965 	bl	801babc <HAL_GetTick>
 801c7f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c7f4:	e008      	b.n	801c808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c7f6:	f7ff f961 	bl	801babc <HAL_GetTick>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	693b      	ldr	r3, [r7, #16]
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	2b02      	cmp	r3, #2
 801c802:	d901      	bls.n	801c808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801c804:	2303      	movs	r3, #3
 801c806:	e231      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c808:	4b53      	ldr	r3, [pc, #332]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c810:	2b00      	cmp	r3, #0
 801c812:	d1f0      	bne.n	801c7f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	f003 0308 	and.w	r3, r3, #8
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d03c      	beq.n	801c89a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	695b      	ldr	r3, [r3, #20]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d01c      	beq.n	801c862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c828:	4b4b      	ldr	r3, [pc, #300]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c82a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c82e:	4a4a      	ldr	r2, [pc, #296]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c830:	f043 0301 	orr.w	r3, r3, #1
 801c834:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c838:	f7ff f940 	bl	801babc <HAL_GetTick>
 801c83c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c83e:	e008      	b.n	801c852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c840:	f7ff f93c 	bl	801babc <HAL_GetTick>
 801c844:	4602      	mov	r2, r0
 801c846:	693b      	ldr	r3, [r7, #16]
 801c848:	1ad3      	subs	r3, r2, r3
 801c84a:	2b02      	cmp	r3, #2
 801c84c:	d901      	bls.n	801c852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801c84e:	2303      	movs	r3, #3
 801c850:	e20c      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c852:	4b41      	ldr	r3, [pc, #260]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c858:	f003 0302 	and.w	r3, r3, #2
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d0ef      	beq.n	801c840 <HAL_RCC_OscConfig+0x3ec>
 801c860:	e01b      	b.n	801c89a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c862:	4b3d      	ldr	r3, [pc, #244]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c868:	4a3b      	ldr	r2, [pc, #236]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c86a:	f023 0301 	bic.w	r3, r3, #1
 801c86e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c872:	f7ff f923 	bl	801babc <HAL_GetTick>
 801c876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c878:	e008      	b.n	801c88c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c87a:	f7ff f91f 	bl	801babc <HAL_GetTick>
 801c87e:	4602      	mov	r2, r0
 801c880:	693b      	ldr	r3, [r7, #16]
 801c882:	1ad3      	subs	r3, r2, r3
 801c884:	2b02      	cmp	r3, #2
 801c886:	d901      	bls.n	801c88c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801c888:	2303      	movs	r3, #3
 801c88a:	e1ef      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c88c:	4b32      	ldr	r3, [pc, #200]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c88e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c892:	f003 0302 	and.w	r3, r3, #2
 801c896:	2b00      	cmp	r3, #0
 801c898:	d1ef      	bne.n	801c87a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	f003 0304 	and.w	r3, r3, #4
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	f000 80a6 	beq.w	801c9f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801c8ac:	4b2a      	ldr	r3, [pc, #168]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c8ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c8b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d10d      	bne.n	801c8d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c8b8:	4b27      	ldr	r3, [pc, #156]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c8ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c8bc:	4a26      	ldr	r2, [pc, #152]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c8be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c8c2:	6593      	str	r3, [r2, #88]	@ 0x58
 801c8c4:	4b24      	ldr	r3, [pc, #144]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c8c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c8cc:	60bb      	str	r3, [r7, #8]
 801c8ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c8d0:	2301      	movs	r3, #1
 801c8d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c8d4:	4b21      	ldr	r3, [pc, #132]	@ (801c95c <HAL_RCC_OscConfig+0x508>)
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	d118      	bne.n	801c912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c8e0:	4b1e      	ldr	r3, [pc, #120]	@ (801c95c <HAL_RCC_OscConfig+0x508>)
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	4a1d      	ldr	r2, [pc, #116]	@ (801c95c <HAL_RCC_OscConfig+0x508>)
 801c8e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c8ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c8ec:	f7ff f8e6 	bl	801babc <HAL_GetTick>
 801c8f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c8f2:	e008      	b.n	801c906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c8f4:	f7ff f8e2 	bl	801babc <HAL_GetTick>
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	693b      	ldr	r3, [r7, #16]
 801c8fc:	1ad3      	subs	r3, r2, r3
 801c8fe:	2b02      	cmp	r3, #2
 801c900:	d901      	bls.n	801c906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801c902:	2303      	movs	r3, #3
 801c904:	e1b2      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c906:	4b15      	ldr	r3, [pc, #84]	@ (801c95c <HAL_RCC_OscConfig+0x508>)
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d0f0      	beq.n	801c8f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	689b      	ldr	r3, [r3, #8]
 801c916:	2b01      	cmp	r3, #1
 801c918:	d108      	bne.n	801c92c <HAL_RCC_OscConfig+0x4d8>
 801c91a:	4b0f      	ldr	r3, [pc, #60]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c920:	4a0d      	ldr	r2, [pc, #52]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c922:	f043 0301 	orr.w	r3, r3, #1
 801c926:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801c92a:	e029      	b.n	801c980 <HAL_RCC_OscConfig+0x52c>
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	689b      	ldr	r3, [r3, #8]
 801c930:	2b05      	cmp	r3, #5
 801c932:	d115      	bne.n	801c960 <HAL_RCC_OscConfig+0x50c>
 801c934:	4b08      	ldr	r3, [pc, #32]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c93a:	4a07      	ldr	r2, [pc, #28]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c93c:	f043 0304 	orr.w	r3, r3, #4
 801c940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801c944:	4b04      	ldr	r3, [pc, #16]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c94a:	4a03      	ldr	r2, [pc, #12]	@ (801c958 <HAL_RCC_OscConfig+0x504>)
 801c94c:	f043 0301 	orr.w	r3, r3, #1
 801c950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801c954:	e014      	b.n	801c980 <HAL_RCC_OscConfig+0x52c>
 801c956:	bf00      	nop
 801c958:	40021000 	.word	0x40021000
 801c95c:	40007000 	.word	0x40007000
 801c960:	4b9a      	ldr	r3, [pc, #616]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c966:	4a99      	ldr	r2, [pc, #612]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c968:	f023 0301 	bic.w	r3, r3, #1
 801c96c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801c970:	4b96      	ldr	r3, [pc, #600]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c976:	4a95      	ldr	r2, [pc, #596]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c978:	f023 0304 	bic.w	r3, r3, #4
 801c97c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	689b      	ldr	r3, [r3, #8]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d016      	beq.n	801c9b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c988:	f7ff f898 	bl	801babc <HAL_GetTick>
 801c98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c98e:	e00a      	b.n	801c9a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c990:	f7ff f894 	bl	801babc <HAL_GetTick>
 801c994:	4602      	mov	r2, r0
 801c996:	693b      	ldr	r3, [r7, #16]
 801c998:	1ad3      	subs	r3, r2, r3
 801c99a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c99e:	4293      	cmp	r3, r2
 801c9a0:	d901      	bls.n	801c9a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801c9a2:	2303      	movs	r3, #3
 801c9a4:	e162      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c9a6:	4b89      	ldr	r3, [pc, #548]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c9ac:	f003 0302 	and.w	r3, r3, #2
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d0ed      	beq.n	801c990 <HAL_RCC_OscConfig+0x53c>
 801c9b4:	e015      	b.n	801c9e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c9b6:	f7ff f881 	bl	801babc <HAL_GetTick>
 801c9ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c9bc:	e00a      	b.n	801c9d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c9be:	f7ff f87d 	bl	801babc <HAL_GetTick>
 801c9c2:	4602      	mov	r2, r0
 801c9c4:	693b      	ldr	r3, [r7, #16]
 801c9c6:	1ad3      	subs	r3, r2, r3
 801c9c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c9cc:	4293      	cmp	r3, r2
 801c9ce:	d901      	bls.n	801c9d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801c9d0:	2303      	movs	r3, #3
 801c9d2:	e14b      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c9d4:	4b7d      	ldr	r3, [pc, #500]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c9da:	f003 0302 	and.w	r3, r3, #2
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d1ed      	bne.n	801c9be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c9e2:	7ffb      	ldrb	r3, [r7, #31]
 801c9e4:	2b01      	cmp	r3, #1
 801c9e6:	d105      	bne.n	801c9f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c9e8:	4b78      	ldr	r3, [pc, #480]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c9ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c9ec:	4a77      	ldr	r2, [pc, #476]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801c9ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801c9f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	f003 0320 	and.w	r3, r3, #32
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d03c      	beq.n	801ca7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d01c      	beq.n	801ca42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ca08:	4b70      	ldr	r3, [pc, #448]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ca0e:	4a6f      	ldr	r2, [pc, #444]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca10:	f043 0301 	orr.w	r3, r3, #1
 801ca14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ca18:	f7ff f850 	bl	801babc <HAL_GetTick>
 801ca1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801ca1e:	e008      	b.n	801ca32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ca20:	f7ff f84c 	bl	801babc <HAL_GetTick>
 801ca24:	4602      	mov	r2, r0
 801ca26:	693b      	ldr	r3, [r7, #16]
 801ca28:	1ad3      	subs	r3, r2, r3
 801ca2a:	2b02      	cmp	r3, #2
 801ca2c:	d901      	bls.n	801ca32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 801ca2e:	2303      	movs	r3, #3
 801ca30:	e11c      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801ca32:	4b66      	ldr	r3, [pc, #408]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ca38:	f003 0302 	and.w	r3, r3, #2
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d0ef      	beq.n	801ca20 <HAL_RCC_OscConfig+0x5cc>
 801ca40:	e01b      	b.n	801ca7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ca42:	4b62      	ldr	r3, [pc, #392]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ca48:	4a60      	ldr	r2, [pc, #384]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca4a:	f023 0301 	bic.w	r3, r3, #1
 801ca4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ca52:	f7ff f833 	bl	801babc <HAL_GetTick>
 801ca56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801ca58:	e008      	b.n	801ca6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ca5a:	f7ff f82f 	bl	801babc <HAL_GetTick>
 801ca5e:	4602      	mov	r2, r0
 801ca60:	693b      	ldr	r3, [r7, #16]
 801ca62:	1ad3      	subs	r3, r2, r3
 801ca64:	2b02      	cmp	r3, #2
 801ca66:	d901      	bls.n	801ca6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 801ca68:	2303      	movs	r3, #3
 801ca6a:	e0ff      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801ca6c:	4b57      	ldr	r3, [pc, #348]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ca72:	f003 0302 	and.w	r3, r3, #2
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d1ef      	bne.n	801ca5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	f000 80f3 	beq.w	801cc6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca88:	2b02      	cmp	r3, #2
 801ca8a:	f040 80c9 	bne.w	801cc20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801ca8e:	4b4f      	ldr	r3, [pc, #316]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801ca90:	68db      	ldr	r3, [r3, #12]
 801ca92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801ca94:	697b      	ldr	r3, [r7, #20]
 801ca96:	f003 0203 	and.w	r2, r3, #3
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca9e:	429a      	cmp	r2, r3
 801caa0:	d12c      	bne.n	801cafc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801caa2:	697b      	ldr	r3, [r7, #20]
 801caa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801caac:	3b01      	subs	r3, #1
 801caae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801cab0:	429a      	cmp	r2, r3
 801cab2:	d123      	bne.n	801cafc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801cab4:	697b      	ldr	r3, [r7, #20]
 801cab6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cabe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d11b      	bne.n	801cafc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801cac4:	697b      	ldr	r3, [r7, #20]
 801cac6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801cad0:	429a      	cmp	r2, r3
 801cad2:	d113      	bne.n	801cafc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cade:	085b      	lsrs	r3, r3, #1
 801cae0:	3b01      	subs	r3, #1
 801cae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801cae4:	429a      	cmp	r2, r3
 801cae6:	d109      	bne.n	801cafc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801cae8:	697b      	ldr	r3, [r7, #20]
 801caea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801caf2:	085b      	lsrs	r3, r3, #1
 801caf4:	3b01      	subs	r3, #1
 801caf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801caf8:	429a      	cmp	r2, r3
 801cafa:	d06b      	beq.n	801cbd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801cafc:	69bb      	ldr	r3, [r7, #24]
 801cafe:	2b0c      	cmp	r3, #12
 801cb00:	d062      	beq.n	801cbc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801cb02:	4b32      	ldr	r3, [pc, #200]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d001      	beq.n	801cb12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 801cb0e:	2301      	movs	r3, #1
 801cb10:	e0ac      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801cb12:	4b2e      	ldr	r3, [pc, #184]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	4a2d      	ldr	r2, [pc, #180]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cb1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801cb1e:	f7fe ffcd 	bl	801babc <HAL_GetTick>
 801cb22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801cb24:	e008      	b.n	801cb38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cb26:	f7fe ffc9 	bl	801babc <HAL_GetTick>
 801cb2a:	4602      	mov	r2, r0
 801cb2c:	693b      	ldr	r3, [r7, #16]
 801cb2e:	1ad3      	subs	r3, r2, r3
 801cb30:	2b02      	cmp	r3, #2
 801cb32:	d901      	bls.n	801cb38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 801cb34:	2303      	movs	r3, #3
 801cb36:	e099      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801cb38:	4b24      	ldr	r3, [pc, #144]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d1f0      	bne.n	801cb26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801cb44:	4b21      	ldr	r3, [pc, #132]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb46:	68da      	ldr	r2, [r3, #12]
 801cb48:	4b21      	ldr	r3, [pc, #132]	@ (801cbd0 <HAL_RCC_OscConfig+0x77c>)
 801cb4a:	4013      	ands	r3, r2
 801cb4c:	687a      	ldr	r2, [r7, #4]
 801cb4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 801cb50:	687a      	ldr	r2, [r7, #4]
 801cb52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801cb54:	3a01      	subs	r2, #1
 801cb56:	0112      	lsls	r2, r2, #4
 801cb58:	4311      	orrs	r1, r2
 801cb5a:	687a      	ldr	r2, [r7, #4]
 801cb5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801cb5e:	0212      	lsls	r2, r2, #8
 801cb60:	4311      	orrs	r1, r2
 801cb62:	687a      	ldr	r2, [r7, #4]
 801cb64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801cb66:	0852      	lsrs	r2, r2, #1
 801cb68:	3a01      	subs	r2, #1
 801cb6a:	0552      	lsls	r2, r2, #21
 801cb6c:	4311      	orrs	r1, r2
 801cb6e:	687a      	ldr	r2, [r7, #4]
 801cb70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801cb72:	0852      	lsrs	r2, r2, #1
 801cb74:	3a01      	subs	r2, #1
 801cb76:	0652      	lsls	r2, r2, #25
 801cb78:	4311      	orrs	r1, r2
 801cb7a:	687a      	ldr	r2, [r7, #4]
 801cb7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801cb7e:	06d2      	lsls	r2, r2, #27
 801cb80:	430a      	orrs	r2, r1
 801cb82:	4912      	ldr	r1, [pc, #72]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb84:	4313      	orrs	r3, r2
 801cb86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801cb88:	4b10      	ldr	r3, [pc, #64]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	4a0f      	ldr	r2, [pc, #60]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cb92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801cb94:	4b0d      	ldr	r3, [pc, #52]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb96:	68db      	ldr	r3, [r3, #12]
 801cb98:	4a0c      	ldr	r2, [pc, #48]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cb9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cb9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801cba0:	f7fe ff8c 	bl	801babc <HAL_GetTick>
 801cba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cba6:	e008      	b.n	801cbba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cba8:	f7fe ff88 	bl	801babc <HAL_GetTick>
 801cbac:	4602      	mov	r2, r0
 801cbae:	693b      	ldr	r3, [r7, #16]
 801cbb0:	1ad3      	subs	r3, r2, r3
 801cbb2:	2b02      	cmp	r3, #2
 801cbb4:	d901      	bls.n	801cbba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 801cbb6:	2303      	movs	r3, #3
 801cbb8:	e058      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cbba:	4b04      	ldr	r3, [pc, #16]	@ (801cbcc <HAL_RCC_OscConfig+0x778>)
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d0f0      	beq.n	801cba8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801cbc6:	e050      	b.n	801cc6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801cbc8:	2301      	movs	r3, #1
 801cbca:	e04f      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
 801cbcc:	40021000 	.word	0x40021000
 801cbd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cbd4:	4b27      	ldr	r3, [pc, #156]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cbd6:	681b      	ldr	r3, [r3, #0]
 801cbd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d144      	bne.n	801cc6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801cbe0:	4b24      	ldr	r3, [pc, #144]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	4a23      	ldr	r2, [pc, #140]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cbe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cbea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801cbec:	4b21      	ldr	r3, [pc, #132]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cbee:	68db      	ldr	r3, [r3, #12]
 801cbf0:	4a20      	ldr	r2, [pc, #128]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cbf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cbf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801cbf8:	f7fe ff60 	bl	801babc <HAL_GetTick>
 801cbfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cbfe:	e008      	b.n	801cc12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cc00:	f7fe ff5c 	bl	801babc <HAL_GetTick>
 801cc04:	4602      	mov	r2, r0
 801cc06:	693b      	ldr	r3, [r7, #16]
 801cc08:	1ad3      	subs	r3, r2, r3
 801cc0a:	2b02      	cmp	r3, #2
 801cc0c:	d901      	bls.n	801cc12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 801cc0e:	2303      	movs	r3, #3
 801cc10:	e02c      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cc12:	4b18      	ldr	r3, [pc, #96]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d0f0      	beq.n	801cc00 <HAL_RCC_OscConfig+0x7ac>
 801cc1e:	e024      	b.n	801cc6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801cc20:	69bb      	ldr	r3, [r7, #24]
 801cc22:	2b0c      	cmp	r3, #12
 801cc24:	d01f      	beq.n	801cc66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cc26:	4b13      	ldr	r3, [pc, #76]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	4a12      	ldr	r2, [pc, #72]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cc2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cc30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc32:	f7fe ff43 	bl	801babc <HAL_GetTick>
 801cc36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801cc38:	e008      	b.n	801cc4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cc3a:	f7fe ff3f 	bl	801babc <HAL_GetTick>
 801cc3e:	4602      	mov	r2, r0
 801cc40:	693b      	ldr	r3, [r7, #16]
 801cc42:	1ad3      	subs	r3, r2, r3
 801cc44:	2b02      	cmp	r3, #2
 801cc46:	d901      	bls.n	801cc4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 801cc48:	2303      	movs	r3, #3
 801cc4a:	e00f      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801cc4c:	4b09      	ldr	r3, [pc, #36]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d1f0      	bne.n	801cc3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801cc58:	4b06      	ldr	r3, [pc, #24]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cc5a:	68da      	ldr	r2, [r3, #12]
 801cc5c:	4905      	ldr	r1, [pc, #20]	@ (801cc74 <HAL_RCC_OscConfig+0x820>)
 801cc5e:	4b06      	ldr	r3, [pc, #24]	@ (801cc78 <HAL_RCC_OscConfig+0x824>)
 801cc60:	4013      	ands	r3, r2
 801cc62:	60cb      	str	r3, [r1, #12]
 801cc64:	e001      	b.n	801cc6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801cc66:	2301      	movs	r3, #1
 801cc68:	e000      	b.n	801cc6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 801cc6a:	2300      	movs	r3, #0
}
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	3720      	adds	r7, #32
 801cc70:	46bd      	mov	sp, r7
 801cc72:	bd80      	pop	{r7, pc}
 801cc74:	40021000 	.word	0x40021000
 801cc78:	feeefffc 	.word	0xfeeefffc

0801cc7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b084      	sub	sp, #16
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d101      	bne.n	801cc90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	e0e7      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801cc90:	4b75      	ldr	r3, [pc, #468]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	f003 0307 	and.w	r3, r3, #7
 801cc98:	683a      	ldr	r2, [r7, #0]
 801cc9a:	429a      	cmp	r2, r3
 801cc9c:	d910      	bls.n	801ccc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cc9e:	4b72      	ldr	r3, [pc, #456]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	f023 0207 	bic.w	r2, r3, #7
 801cca6:	4970      	ldr	r1, [pc, #448]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	4313      	orrs	r3, r2
 801ccac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801ccae:	4b6e      	ldr	r3, [pc, #440]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	f003 0307 	and.w	r3, r3, #7
 801ccb6:	683a      	ldr	r2, [r7, #0]
 801ccb8:	429a      	cmp	r2, r3
 801ccba:	d001      	beq.n	801ccc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801ccbc:	2301      	movs	r3, #1
 801ccbe:	e0cf      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	f003 0302 	and.w	r3, r3, #2
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d010      	beq.n	801ccee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	689a      	ldr	r2, [r3, #8]
 801ccd0:	4b66      	ldr	r3, [pc, #408]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ccd2:	689b      	ldr	r3, [r3, #8]
 801ccd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ccd8:	429a      	cmp	r2, r3
 801ccda:	d908      	bls.n	801ccee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ccdc:	4b63      	ldr	r3, [pc, #396]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ccde:	689b      	ldr	r3, [r3, #8]
 801cce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	689b      	ldr	r3, [r3, #8]
 801cce8:	4960      	ldr	r1, [pc, #384]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ccea:	4313      	orrs	r3, r2
 801ccec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	681b      	ldr	r3, [r3, #0]
 801ccf2:	f003 0301 	and.w	r3, r3, #1
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d04c      	beq.n	801cd94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	685b      	ldr	r3, [r3, #4]
 801ccfe:	2b03      	cmp	r3, #3
 801cd00:	d107      	bne.n	801cd12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cd02:	4b5a      	ldr	r3, [pc, #360]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d121      	bne.n	801cd52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801cd0e:	2301      	movs	r3, #1
 801cd10:	e0a6      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	685b      	ldr	r3, [r3, #4]
 801cd16:	2b02      	cmp	r3, #2
 801cd18:	d107      	bne.n	801cd2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cd1a:	4b54      	ldr	r3, [pc, #336]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d115      	bne.n	801cd52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801cd26:	2301      	movs	r3, #1
 801cd28:	e09a      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	685b      	ldr	r3, [r3, #4]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d107      	bne.n	801cd42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801cd32:	4b4e      	ldr	r3, [pc, #312]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	f003 0302 	and.w	r3, r3, #2
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d109      	bne.n	801cd52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801cd3e:	2301      	movs	r3, #1
 801cd40:	e08e      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cd42:	4b4a      	ldr	r3, [pc, #296]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d101      	bne.n	801cd52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801cd4e:	2301      	movs	r3, #1
 801cd50:	e086      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cd52:	4b46      	ldr	r3, [pc, #280]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd54:	689b      	ldr	r3, [r3, #8]
 801cd56:	f023 0203 	bic.w	r2, r3, #3
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	685b      	ldr	r3, [r3, #4]
 801cd5e:	4943      	ldr	r1, [pc, #268]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd60:	4313      	orrs	r3, r2
 801cd62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cd64:	f7fe feaa 	bl	801babc <HAL_GetTick>
 801cd68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cd6a:	e00a      	b.n	801cd82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cd6c:	f7fe fea6 	bl	801babc <HAL_GetTick>
 801cd70:	4602      	mov	r2, r0
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	1ad3      	subs	r3, r2, r3
 801cd76:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cd7a:	4293      	cmp	r3, r2
 801cd7c:	d901      	bls.n	801cd82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801cd7e:	2303      	movs	r3, #3
 801cd80:	e06e      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cd82:	4b3a      	ldr	r3, [pc, #232]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cd84:	689b      	ldr	r3, [r3, #8]
 801cd86:	f003 020c 	and.w	r2, r3, #12
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	685b      	ldr	r3, [r3, #4]
 801cd8e:	009b      	lsls	r3, r3, #2
 801cd90:	429a      	cmp	r2, r3
 801cd92:	d1eb      	bne.n	801cd6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	f003 0302 	and.w	r3, r3, #2
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d010      	beq.n	801cdc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	689a      	ldr	r2, [r3, #8]
 801cda4:	4b31      	ldr	r3, [pc, #196]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cda6:	689b      	ldr	r3, [r3, #8]
 801cda8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cdac:	429a      	cmp	r2, r3
 801cdae:	d208      	bcs.n	801cdc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cdb0:	4b2e      	ldr	r3, [pc, #184]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cdb2:	689b      	ldr	r3, [r3, #8]
 801cdb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	689b      	ldr	r3, [r3, #8]
 801cdbc:	492b      	ldr	r1, [pc, #172]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801cdbe:	4313      	orrs	r3, r2
 801cdc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801cdc2:	4b29      	ldr	r3, [pc, #164]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	f003 0307 	and.w	r3, r3, #7
 801cdca:	683a      	ldr	r2, [r7, #0]
 801cdcc:	429a      	cmp	r2, r3
 801cdce:	d210      	bcs.n	801cdf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cdd0:	4b25      	ldr	r3, [pc, #148]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	f023 0207 	bic.w	r2, r3, #7
 801cdd8:	4923      	ldr	r1, [pc, #140]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	4313      	orrs	r3, r2
 801cdde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801cde0:	4b21      	ldr	r3, [pc, #132]	@ (801ce68 <HAL_RCC_ClockConfig+0x1ec>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	f003 0307 	and.w	r3, r3, #7
 801cde8:	683a      	ldr	r2, [r7, #0]
 801cdea:	429a      	cmp	r2, r3
 801cdec:	d001      	beq.n	801cdf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801cdee:	2301      	movs	r3, #1
 801cdf0:	e036      	b.n	801ce60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	f003 0304 	and.w	r3, r3, #4
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d008      	beq.n	801ce10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801cdfe:	4b1b      	ldr	r3, [pc, #108]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ce00:	689b      	ldr	r3, [r3, #8]
 801ce02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	68db      	ldr	r3, [r3, #12]
 801ce0a:	4918      	ldr	r1, [pc, #96]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ce0c:	4313      	orrs	r3, r2
 801ce0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	f003 0308 	and.w	r3, r3, #8
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d009      	beq.n	801ce30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801ce1c:	4b13      	ldr	r3, [pc, #76]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ce1e:	689b      	ldr	r3, [r3, #8]
 801ce20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	691b      	ldr	r3, [r3, #16]
 801ce28:	00db      	lsls	r3, r3, #3
 801ce2a:	4910      	ldr	r1, [pc, #64]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ce2c:	4313      	orrs	r3, r2
 801ce2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801ce30:	f000 f824 	bl	801ce7c <HAL_RCC_GetSysClockFreq>
 801ce34:	4602      	mov	r2, r0
 801ce36:	4b0d      	ldr	r3, [pc, #52]	@ (801ce6c <HAL_RCC_ClockConfig+0x1f0>)
 801ce38:	689b      	ldr	r3, [r3, #8]
 801ce3a:	091b      	lsrs	r3, r3, #4
 801ce3c:	f003 030f 	and.w	r3, r3, #15
 801ce40:	490b      	ldr	r1, [pc, #44]	@ (801ce70 <HAL_RCC_ClockConfig+0x1f4>)
 801ce42:	5ccb      	ldrb	r3, [r1, r3]
 801ce44:	f003 031f 	and.w	r3, r3, #31
 801ce48:	fa22 f303 	lsr.w	r3, r2, r3
 801ce4c:	4a09      	ldr	r2, [pc, #36]	@ (801ce74 <HAL_RCC_ClockConfig+0x1f8>)
 801ce4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801ce50:	4b09      	ldr	r3, [pc, #36]	@ (801ce78 <HAL_RCC_ClockConfig+0x1fc>)
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	4618      	mov	r0, r3
 801ce56:	f7fe fde1 	bl	801ba1c <HAL_InitTick>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	72fb      	strb	r3, [r7, #11]

  return status;
 801ce5e:	7afb      	ldrb	r3, [r7, #11]
}
 801ce60:	4618      	mov	r0, r3
 801ce62:	3710      	adds	r7, #16
 801ce64:	46bd      	mov	sp, r7
 801ce66:	bd80      	pop	{r7, pc}
 801ce68:	40022000 	.word	0x40022000
 801ce6c:	40021000 	.word	0x40021000
 801ce70:	08025138 	.word	0x08025138
 801ce74:	20000000 	.word	0x20000000
 801ce78:	20000070 	.word	0x20000070

0801ce7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ce7c:	b480      	push	{r7}
 801ce7e:	b089      	sub	sp, #36	@ 0x24
 801ce80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801ce82:	2300      	movs	r3, #0
 801ce84:	61fb      	str	r3, [r7, #28]
 801ce86:	2300      	movs	r3, #0
 801ce88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ce8a:	4b3e      	ldr	r3, [pc, #248]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801ce8c:	689b      	ldr	r3, [r3, #8]
 801ce8e:	f003 030c 	and.w	r3, r3, #12
 801ce92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ce94:	4b3b      	ldr	r3, [pc, #236]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801ce96:	68db      	ldr	r3, [r3, #12]
 801ce98:	f003 0303 	and.w	r3, r3, #3
 801ce9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801ce9e:	693b      	ldr	r3, [r7, #16]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d005      	beq.n	801ceb0 <HAL_RCC_GetSysClockFreq+0x34>
 801cea4:	693b      	ldr	r3, [r7, #16]
 801cea6:	2b0c      	cmp	r3, #12
 801cea8:	d121      	bne.n	801ceee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	2b01      	cmp	r3, #1
 801ceae:	d11e      	bne.n	801ceee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801ceb0:	4b34      	ldr	r3, [pc, #208]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	f003 0308 	and.w	r3, r3, #8
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d107      	bne.n	801cecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801cebc:	4b31      	ldr	r3, [pc, #196]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801cebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801cec2:	0a1b      	lsrs	r3, r3, #8
 801cec4:	f003 030f 	and.w	r3, r3, #15
 801cec8:	61fb      	str	r3, [r7, #28]
 801ceca:	e005      	b.n	801ced8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801cecc:	4b2d      	ldr	r3, [pc, #180]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	091b      	lsrs	r3, r3, #4
 801ced2:	f003 030f 	and.w	r3, r3, #15
 801ced6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801ced8:	4a2b      	ldr	r2, [pc, #172]	@ (801cf88 <HAL_RCC_GetSysClockFreq+0x10c>)
 801ceda:	69fb      	ldr	r3, [r7, #28]
 801cedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801cee2:	693b      	ldr	r3, [r7, #16]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d10d      	bne.n	801cf04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801ceec:	e00a      	b.n	801cf04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801ceee:	693b      	ldr	r3, [r7, #16]
 801cef0:	2b04      	cmp	r3, #4
 801cef2:	d102      	bne.n	801cefa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801cef4:	4b25      	ldr	r3, [pc, #148]	@ (801cf8c <HAL_RCC_GetSysClockFreq+0x110>)
 801cef6:	61bb      	str	r3, [r7, #24]
 801cef8:	e004      	b.n	801cf04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801cefa:	693b      	ldr	r3, [r7, #16]
 801cefc:	2b08      	cmp	r3, #8
 801cefe:	d101      	bne.n	801cf04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801cf00:	4b23      	ldr	r3, [pc, #140]	@ (801cf90 <HAL_RCC_GetSysClockFreq+0x114>)
 801cf02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801cf04:	693b      	ldr	r3, [r7, #16]
 801cf06:	2b0c      	cmp	r3, #12
 801cf08:	d134      	bne.n	801cf74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cf0a:	4b1e      	ldr	r3, [pc, #120]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801cf0c:	68db      	ldr	r3, [r3, #12]
 801cf0e:	f003 0303 	and.w	r3, r3, #3
 801cf12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801cf14:	68bb      	ldr	r3, [r7, #8]
 801cf16:	2b02      	cmp	r3, #2
 801cf18:	d003      	beq.n	801cf22 <HAL_RCC_GetSysClockFreq+0xa6>
 801cf1a:	68bb      	ldr	r3, [r7, #8]
 801cf1c:	2b03      	cmp	r3, #3
 801cf1e:	d003      	beq.n	801cf28 <HAL_RCC_GetSysClockFreq+0xac>
 801cf20:	e005      	b.n	801cf2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801cf22:	4b1a      	ldr	r3, [pc, #104]	@ (801cf8c <HAL_RCC_GetSysClockFreq+0x110>)
 801cf24:	617b      	str	r3, [r7, #20]
      break;
 801cf26:	e005      	b.n	801cf34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801cf28:	4b19      	ldr	r3, [pc, #100]	@ (801cf90 <HAL_RCC_GetSysClockFreq+0x114>)
 801cf2a:	617b      	str	r3, [r7, #20]
      break;
 801cf2c:	e002      	b.n	801cf34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801cf2e:	69fb      	ldr	r3, [r7, #28]
 801cf30:	617b      	str	r3, [r7, #20]
      break;
 801cf32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cf34:	4b13      	ldr	r3, [pc, #76]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801cf36:	68db      	ldr	r3, [r3, #12]
 801cf38:	091b      	lsrs	r3, r3, #4
 801cf3a:	f003 0307 	and.w	r3, r3, #7
 801cf3e:	3301      	adds	r3, #1
 801cf40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801cf42:	4b10      	ldr	r3, [pc, #64]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801cf44:	68db      	ldr	r3, [r3, #12]
 801cf46:	0a1b      	lsrs	r3, r3, #8
 801cf48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cf4c:	697a      	ldr	r2, [r7, #20]
 801cf4e:	fb03 f202 	mul.w	r2, r3, r2
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cf5a:	4b0a      	ldr	r3, [pc, #40]	@ (801cf84 <HAL_RCC_GetSysClockFreq+0x108>)
 801cf5c:	68db      	ldr	r3, [r3, #12]
 801cf5e:	0e5b      	lsrs	r3, r3, #25
 801cf60:	f003 0303 	and.w	r3, r3, #3
 801cf64:	3301      	adds	r3, #1
 801cf66:	005b      	lsls	r3, r3, #1
 801cf68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801cf6a:	697a      	ldr	r2, [r7, #20]
 801cf6c:	683b      	ldr	r3, [r7, #0]
 801cf6e:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801cf74:	69bb      	ldr	r3, [r7, #24]
}
 801cf76:	4618      	mov	r0, r3
 801cf78:	3724      	adds	r7, #36	@ 0x24
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf80:	4770      	bx	lr
 801cf82:	bf00      	nop
 801cf84:	40021000 	.word	0x40021000
 801cf88:	08025150 	.word	0x08025150
 801cf8c:	00f42400 	.word	0x00f42400
 801cf90:	007a1200 	.word	0x007a1200

0801cf94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cf94:	b480      	push	{r7}
 801cf96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cf98:	4b03      	ldr	r3, [pc, #12]	@ (801cfa8 <HAL_RCC_GetHCLKFreq+0x14>)
 801cf9a:	681b      	ldr	r3, [r3, #0]
}
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa4:	4770      	bx	lr
 801cfa6:	bf00      	nop
 801cfa8:	20000000 	.word	0x20000000

0801cfac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801cfb0:	f7ff fff0 	bl	801cf94 <HAL_RCC_GetHCLKFreq>
 801cfb4:	4602      	mov	r2, r0
 801cfb6:	4b06      	ldr	r3, [pc, #24]	@ (801cfd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801cfb8:	689b      	ldr	r3, [r3, #8]
 801cfba:	0a1b      	lsrs	r3, r3, #8
 801cfbc:	f003 0307 	and.w	r3, r3, #7
 801cfc0:	4904      	ldr	r1, [pc, #16]	@ (801cfd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801cfc2:	5ccb      	ldrb	r3, [r1, r3]
 801cfc4:	f003 031f 	and.w	r3, r3, #31
 801cfc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	bd80      	pop	{r7, pc}
 801cfd0:	40021000 	.word	0x40021000
 801cfd4:	08025148 	.word	0x08025148

0801cfd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801cfdc:	f7ff ffda 	bl	801cf94 <HAL_RCC_GetHCLKFreq>
 801cfe0:	4602      	mov	r2, r0
 801cfe2:	4b06      	ldr	r3, [pc, #24]	@ (801cffc <HAL_RCC_GetPCLK2Freq+0x24>)
 801cfe4:	689b      	ldr	r3, [r3, #8]
 801cfe6:	0adb      	lsrs	r3, r3, #11
 801cfe8:	f003 0307 	and.w	r3, r3, #7
 801cfec:	4904      	ldr	r1, [pc, #16]	@ (801d000 <HAL_RCC_GetPCLK2Freq+0x28>)
 801cfee:	5ccb      	ldrb	r3, [r1, r3]
 801cff0:	f003 031f 	and.w	r3, r3, #31
 801cff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cff8:	4618      	mov	r0, r3
 801cffa:	bd80      	pop	{r7, pc}
 801cffc:	40021000 	.word	0x40021000
 801d000:	08025148 	.word	0x08025148

0801d004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801d004:	b580      	push	{r7, lr}
 801d006:	b086      	sub	sp, #24
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801d00c:	2300      	movs	r3, #0
 801d00e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801d010:	4b2a      	ldr	r3, [pc, #168]	@ (801d0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d003      	beq.n	801d024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801d01c:	f7ff f9b6 	bl	801c38c <HAL_PWREx_GetVoltageRange>
 801d020:	6178      	str	r0, [r7, #20]
 801d022:	e014      	b.n	801d04e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801d024:	4b25      	ldr	r3, [pc, #148]	@ (801d0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d028:	4a24      	ldr	r2, [pc, #144]	@ (801d0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d02a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d02e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d030:	4b22      	ldr	r3, [pc, #136]	@ (801d0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d038:	60fb      	str	r3, [r7, #12]
 801d03a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801d03c:	f7ff f9a6 	bl	801c38c <HAL_PWREx_GetVoltageRange>
 801d040:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801d042:	4b1e      	ldr	r3, [pc, #120]	@ (801d0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d046:	4a1d      	ldr	r2, [pc, #116]	@ (801d0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d04c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801d04e:	697b      	ldr	r3, [r7, #20]
 801d050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d054:	d10b      	bne.n	801d06e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	2b80      	cmp	r3, #128	@ 0x80
 801d05a:	d919      	bls.n	801d090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	2ba0      	cmp	r3, #160	@ 0xa0
 801d060:	d902      	bls.n	801d068 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801d062:	2302      	movs	r3, #2
 801d064:	613b      	str	r3, [r7, #16]
 801d066:	e013      	b.n	801d090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801d068:	2301      	movs	r3, #1
 801d06a:	613b      	str	r3, [r7, #16]
 801d06c:	e010      	b.n	801d090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	2b80      	cmp	r3, #128	@ 0x80
 801d072:	d902      	bls.n	801d07a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801d074:	2303      	movs	r3, #3
 801d076:	613b      	str	r3, [r7, #16]
 801d078:	e00a      	b.n	801d090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	2b80      	cmp	r3, #128	@ 0x80
 801d07e:	d102      	bne.n	801d086 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801d080:	2302      	movs	r3, #2
 801d082:	613b      	str	r3, [r7, #16]
 801d084:	e004      	b.n	801d090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	2b70      	cmp	r3, #112	@ 0x70
 801d08a:	d101      	bne.n	801d090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801d08c:	2301      	movs	r3, #1
 801d08e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801d090:	4b0b      	ldr	r3, [pc, #44]	@ (801d0c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	f023 0207 	bic.w	r2, r3, #7
 801d098:	4909      	ldr	r1, [pc, #36]	@ (801d0c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	4313      	orrs	r3, r2
 801d09e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801d0a0:	4b07      	ldr	r3, [pc, #28]	@ (801d0c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	f003 0307 	and.w	r3, r3, #7
 801d0a8:	693a      	ldr	r2, [r7, #16]
 801d0aa:	429a      	cmp	r2, r3
 801d0ac:	d001      	beq.n	801d0b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801d0ae:	2301      	movs	r3, #1
 801d0b0:	e000      	b.n	801d0b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801d0b2:	2300      	movs	r3, #0
}
 801d0b4:	4618      	mov	r0, r3
 801d0b6:	3718      	adds	r7, #24
 801d0b8:	46bd      	mov	sp, r7
 801d0ba:	bd80      	pop	{r7, pc}
 801d0bc:	40021000 	.word	0x40021000
 801d0c0:	40022000 	.word	0x40022000

0801d0c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b086      	sub	sp, #24
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d031      	beq.n	801d144 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d0e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801d0e8:	d01a      	beq.n	801d120 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 801d0ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801d0ee:	d814      	bhi.n	801d11a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d009      	beq.n	801d108 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801d0f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d0f8:	d10f      	bne.n	801d11a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 801d0fa:	4b5d      	ldr	r3, [pc, #372]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d0fc:	68db      	ldr	r3, [r3, #12]
 801d0fe:	4a5c      	ldr	r2, [pc, #368]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d104:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801d106:	e00c      	b.n	801d122 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	3304      	adds	r3, #4
 801d10c:	2100      	movs	r1, #0
 801d10e:	4618      	mov	r0, r3
 801d110:	f000 f9f0 	bl	801d4f4 <RCCEx_PLLSAI1_Config>
 801d114:	4603      	mov	r3, r0
 801d116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801d118:	e003      	b.n	801d122 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801d11a:	2301      	movs	r3, #1
 801d11c:	74fb      	strb	r3, [r7, #19]
      break;
 801d11e:	e000      	b.n	801d122 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 801d120:	bf00      	nop
    }

    if(ret == HAL_OK)
 801d122:	7cfb      	ldrb	r3, [r7, #19]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d10b      	bne.n	801d140 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d128:	4b51      	ldr	r3, [pc, #324]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d12e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d136:	494e      	ldr	r1, [pc, #312]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d138:	4313      	orrs	r3, r2
 801d13a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801d13e:	e001      	b.n	801d144 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d140:	7cfb      	ldrb	r3, [r7, #19]
 801d142:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	f000 809e 	beq.w	801d28e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d152:	2300      	movs	r3, #0
 801d154:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801d156:	4b46      	ldr	r3, [pc, #280]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d15a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d101      	bne.n	801d166 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801d162:	2301      	movs	r3, #1
 801d164:	e000      	b.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801d166:	2300      	movs	r3, #0
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d00d      	beq.n	801d188 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d16c:	4b40      	ldr	r3, [pc, #256]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d16e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d170:	4a3f      	ldr	r2, [pc, #252]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d176:	6593      	str	r3, [r2, #88]	@ 0x58
 801d178:	4b3d      	ldr	r3, [pc, #244]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d17a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d17c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d180:	60bb      	str	r3, [r7, #8]
 801d182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d184:	2301      	movs	r3, #1
 801d186:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d188:	4b3a      	ldr	r3, [pc, #232]	@ (801d274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	4a39      	ldr	r2, [pc, #228]	@ (801d274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801d18e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d194:	f7fe fc92 	bl	801babc <HAL_GetTick>
 801d198:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801d19a:	e009      	b.n	801d1b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d19c:	f7fe fc8e 	bl	801babc <HAL_GetTick>
 801d1a0:	4602      	mov	r2, r0
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	1ad3      	subs	r3, r2, r3
 801d1a6:	2b02      	cmp	r3, #2
 801d1a8:	d902      	bls.n	801d1b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 801d1aa:	2303      	movs	r3, #3
 801d1ac:	74fb      	strb	r3, [r7, #19]
        break;
 801d1ae:	e005      	b.n	801d1bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801d1b0:	4b30      	ldr	r3, [pc, #192]	@ (801d274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d0ef      	beq.n	801d19c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 801d1bc:	7cfb      	ldrb	r3, [r7, #19]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d15a      	bne.n	801d278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801d1c2:	4b2b      	ldr	r3, [pc, #172]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d1c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d1cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801d1ce:	697b      	ldr	r3, [r7, #20]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d01e      	beq.n	801d212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d1d8:	697a      	ldr	r2, [r7, #20]
 801d1da:	429a      	cmp	r2, r3
 801d1dc:	d019      	beq.n	801d212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801d1de:	4b24      	ldr	r3, [pc, #144]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d1e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d1e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d1ea:	4b21      	ldr	r3, [pc, #132]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d1f0:	4a1f      	ldr	r2, [pc, #124]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d1f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d1f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d1fa:	4b1d      	ldr	r3, [pc, #116]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d200:	4a1b      	ldr	r2, [pc, #108]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801d20a:	4a19      	ldr	r2, [pc, #100]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d20c:	697b      	ldr	r3, [r7, #20]
 801d20e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801d212:	697b      	ldr	r3, [r7, #20]
 801d214:	f003 0301 	and.w	r3, r3, #1
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d016      	beq.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d21c:	f7fe fc4e 	bl	801babc <HAL_GetTick>
 801d220:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d222:	e00b      	b.n	801d23c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d224:	f7fe fc4a 	bl	801babc <HAL_GetTick>
 801d228:	4602      	mov	r2, r0
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	1ad3      	subs	r3, r2, r3
 801d22e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d232:	4293      	cmp	r3, r2
 801d234:	d902      	bls.n	801d23c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801d236:	2303      	movs	r3, #3
 801d238:	74fb      	strb	r3, [r7, #19]
            break;
 801d23a:	e006      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d23c:	4b0c      	ldr	r3, [pc, #48]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d242:	f003 0302 	and.w	r3, r3, #2
 801d246:	2b00      	cmp	r3, #0
 801d248:	d0ec      	beq.n	801d224 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801d24a:	7cfb      	ldrb	r3, [r7, #19]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d10b      	bne.n	801d268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d250:	4b07      	ldr	r3, [pc, #28]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d256:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d25e:	4904      	ldr	r1, [pc, #16]	@ (801d270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d260:	4313      	orrs	r3, r2
 801d262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801d266:	e009      	b.n	801d27c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d268:	7cfb      	ldrb	r3, [r7, #19]
 801d26a:	74bb      	strb	r3, [r7, #18]
 801d26c:	e006      	b.n	801d27c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 801d26e:	bf00      	nop
 801d270:	40021000 	.word	0x40021000
 801d274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d278:	7cfb      	ldrb	r3, [r7, #19]
 801d27a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801d27c:	7c7b      	ldrb	r3, [r7, #17]
 801d27e:	2b01      	cmp	r3, #1
 801d280:	d105      	bne.n	801d28e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d282:	4b9b      	ldr	r3, [pc, #620]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d286:	4a9a      	ldr	r2, [pc, #616]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d28c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	f003 0301 	and.w	r3, r3, #1
 801d296:	2b00      	cmp	r3, #0
 801d298:	d00a      	beq.n	801d2b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d29a:	4b95      	ldr	r3, [pc, #596]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d2a0:	f023 0203 	bic.w	r2, r3, #3
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	6a1b      	ldr	r3, [r3, #32]
 801d2a8:	4991      	ldr	r1, [pc, #580]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d2aa:	4313      	orrs	r3, r2
 801d2ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	f003 0302 	and.w	r3, r3, #2
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d00a      	beq.n	801d2d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d2bc:	4b8c      	ldr	r3, [pc, #560]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d2c2:	f023 020c 	bic.w	r2, r3, #12
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2ca:	4989      	ldr	r1, [pc, #548]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d2cc:	4313      	orrs	r3, r2
 801d2ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	f003 0304 	and.w	r3, r3, #4
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d00a      	beq.n	801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d2de:	4b84      	ldr	r3, [pc, #528]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d2e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2ec:	4980      	ldr	r1, [pc, #512]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d2ee:	4313      	orrs	r3, r2
 801d2f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	f003 0320 	and.w	r3, r3, #32
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d00a      	beq.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d300:	4b7b      	ldr	r3, [pc, #492]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d306:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d30e:	4978      	ldr	r1, [pc, #480]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d310:	4313      	orrs	r3, r2
 801d312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d00a      	beq.n	801d338 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d322:	4b73      	ldr	r3, [pc, #460]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d328:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d330:	496f      	ldr	r1, [pc, #444]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d332:	4313      	orrs	r3, r2
 801d334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d340:	2b00      	cmp	r3, #0
 801d342:	d00a      	beq.n	801d35a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d344:	4b6a      	ldr	r3, [pc, #424]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d34a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d352:	4967      	ldr	r1, [pc, #412]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d354:	4313      	orrs	r3, r2
 801d356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d362:	2b00      	cmp	r3, #0
 801d364:	d00a      	beq.n	801d37c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d366:	4b62      	ldr	r3, [pc, #392]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d36c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d374:	495e      	ldr	r1, [pc, #376]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d376:	4313      	orrs	r3, r2
 801d378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d384:	2b00      	cmp	r3, #0
 801d386:	d00a      	beq.n	801d39e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d388:	4b59      	ldr	r3, [pc, #356]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d38e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d396:	4956      	ldr	r1, [pc, #344]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d398:	4313      	orrs	r3, r2
 801d39a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d00a      	beq.n	801d3c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d3aa:	4b51      	ldr	r3, [pc, #324]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d3b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d3b8:	494d      	ldr	r1, [pc, #308]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d3ba:	4313      	orrs	r3, r2
 801d3bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d028      	beq.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d3cc:	4b48      	ldr	r3, [pc, #288]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d3d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d3da:	4945      	ldr	r1, [pc, #276]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d3dc:	4313      	orrs	r3, r2
 801d3de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d3e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d3ea:	d106      	bne.n	801d3fa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d3ec:	4b40      	ldr	r3, [pc, #256]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d3ee:	68db      	ldr	r3, [r3, #12]
 801d3f0:	4a3f      	ldr	r2, [pc, #252]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d3f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d3f6:	60d3      	str	r3, [r2, #12]
 801d3f8:	e011      	b.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d3fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d402:	d10c      	bne.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	3304      	adds	r3, #4
 801d408:	2101      	movs	r1, #1
 801d40a:	4618      	mov	r0, r3
 801d40c:	f000 f872 	bl	801d4f4 <RCCEx_PLLSAI1_Config>
 801d410:	4603      	mov	r3, r0
 801d412:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d414:	7cfb      	ldrb	r3, [r7, #19]
 801d416:	2b00      	cmp	r3, #0
 801d418:	d001      	beq.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 801d41a:	7cfb      	ldrb	r3, [r7, #19]
 801d41c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801d426:	2b00      	cmp	r3, #0
 801d428:	d028      	beq.n	801d47c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d42a:	4b31      	ldr	r3, [pc, #196]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d430:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d438:	492d      	ldr	r1, [pc, #180]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d43a:	4313      	orrs	r3, r2
 801d43c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d448:	d106      	bne.n	801d458 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d44a:	4b29      	ldr	r3, [pc, #164]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d44c:	68db      	ldr	r3, [r3, #12]
 801d44e:	4a28      	ldr	r2, [pc, #160]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d454:	60d3      	str	r3, [r2, #12]
 801d456:	e011      	b.n	801d47c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d45c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d460:	d10c      	bne.n	801d47c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	3304      	adds	r3, #4
 801d466:	2101      	movs	r1, #1
 801d468:	4618      	mov	r0, r3
 801d46a:	f000 f843 	bl	801d4f4 <RCCEx_PLLSAI1_Config>
 801d46e:	4603      	mov	r3, r0
 801d470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d472:	7cfb      	ldrb	r3, [r7, #19]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d001      	beq.n	801d47c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 801d478:	7cfb      	ldrb	r3, [r7, #19]
 801d47a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d484:	2b00      	cmp	r3, #0
 801d486:	d01c      	beq.n	801d4c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d488:	4b19      	ldr	r3, [pc, #100]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d48e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d496:	4916      	ldr	r1, [pc, #88]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d498:	4313      	orrs	r3, r2
 801d49a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d4a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d4a6:	d10c      	bne.n	801d4c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	3304      	adds	r3, #4
 801d4ac:	2102      	movs	r1, #2
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	f000 f820 	bl	801d4f4 <RCCEx_PLLSAI1_Config>
 801d4b4:	4603      	mov	r3, r0
 801d4b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d4b8:	7cfb      	ldrb	r3, [r7, #19]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d001      	beq.n	801d4c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 801d4be:	7cfb      	ldrb	r3, [r7, #19]
 801d4c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d00a      	beq.n	801d4e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d4ce:	4b08      	ldr	r3, [pc, #32]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d4d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d4dc:	4904      	ldr	r1, [pc, #16]	@ (801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801d4de:	4313      	orrs	r3, r2
 801d4e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801d4e4:	7cbb      	ldrb	r3, [r7, #18]
}
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	3718      	adds	r7, #24
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	bd80      	pop	{r7, pc}
 801d4ee:	bf00      	nop
 801d4f0:	40021000 	.word	0x40021000

0801d4f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801d4f4:	b580      	push	{r7, lr}
 801d4f6:	b084      	sub	sp, #16
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	6078      	str	r0, [r7, #4]
 801d4fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d4fe:	2300      	movs	r3, #0
 801d500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801d502:	4b74      	ldr	r3, [pc, #464]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d504:	68db      	ldr	r3, [r3, #12]
 801d506:	f003 0303 	and.w	r3, r3, #3
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d018      	beq.n	801d540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801d50e:	4b71      	ldr	r3, [pc, #452]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d510:	68db      	ldr	r3, [r3, #12]
 801d512:	f003 0203 	and.w	r2, r3, #3
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	429a      	cmp	r2, r3
 801d51c:	d10d      	bne.n	801d53a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	681b      	ldr	r3, [r3, #0]
       ||
 801d522:	2b00      	cmp	r3, #0
 801d524:	d009      	beq.n	801d53a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801d526:	4b6b      	ldr	r3, [pc, #428]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d528:	68db      	ldr	r3, [r3, #12]
 801d52a:	091b      	lsrs	r3, r3, #4
 801d52c:	f003 0307 	and.w	r3, r3, #7
 801d530:	1c5a      	adds	r2, r3, #1
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	685b      	ldr	r3, [r3, #4]
       ||
 801d536:	429a      	cmp	r2, r3
 801d538:	d047      	beq.n	801d5ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801d53a:	2301      	movs	r3, #1
 801d53c:	73fb      	strb	r3, [r7, #15]
 801d53e:	e044      	b.n	801d5ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	2b03      	cmp	r3, #3
 801d546:	d018      	beq.n	801d57a <RCCEx_PLLSAI1_Config+0x86>
 801d548:	2b03      	cmp	r3, #3
 801d54a:	d825      	bhi.n	801d598 <RCCEx_PLLSAI1_Config+0xa4>
 801d54c:	2b01      	cmp	r3, #1
 801d54e:	d002      	beq.n	801d556 <RCCEx_PLLSAI1_Config+0x62>
 801d550:	2b02      	cmp	r3, #2
 801d552:	d009      	beq.n	801d568 <RCCEx_PLLSAI1_Config+0x74>
 801d554:	e020      	b.n	801d598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d556:	4b5f      	ldr	r3, [pc, #380]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	f003 0302 	and.w	r3, r3, #2
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d11d      	bne.n	801d59e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801d562:	2301      	movs	r3, #1
 801d564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d566:	e01a      	b.n	801d59e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d568:	4b5a      	ldr	r3, [pc, #360]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d570:	2b00      	cmp	r3, #0
 801d572:	d116      	bne.n	801d5a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801d574:	2301      	movs	r3, #1
 801d576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d578:	e013      	b.n	801d5a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801d57a:	4b56      	ldr	r3, [pc, #344]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d582:	2b00      	cmp	r3, #0
 801d584:	d10f      	bne.n	801d5a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801d586:	4b53      	ldr	r3, [pc, #332]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d109      	bne.n	801d5a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801d592:	2301      	movs	r3, #1
 801d594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801d596:	e006      	b.n	801d5a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801d598:	2301      	movs	r3, #1
 801d59a:	73fb      	strb	r3, [r7, #15]
      break;
 801d59c:	e004      	b.n	801d5a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d59e:	bf00      	nop
 801d5a0:	e002      	b.n	801d5a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d5a2:	bf00      	nop
 801d5a4:	e000      	b.n	801d5a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d5a6:	bf00      	nop
    }

    if(status == HAL_OK)
 801d5a8:	7bfb      	ldrb	r3, [r7, #15]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d10d      	bne.n	801d5ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801d5ae:	4b49      	ldr	r3, [pc, #292]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d5b0:	68db      	ldr	r3, [r3, #12]
 801d5b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	6819      	ldr	r1, [r3, #0]
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	685b      	ldr	r3, [r3, #4]
 801d5be:	3b01      	subs	r3, #1
 801d5c0:	011b      	lsls	r3, r3, #4
 801d5c2:	430b      	orrs	r3, r1
 801d5c4:	4943      	ldr	r1, [pc, #268]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d5c6:	4313      	orrs	r3, r2
 801d5c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801d5ca:	7bfb      	ldrb	r3, [r7, #15]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d17c      	bne.n	801d6ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801d5d0:	4b40      	ldr	r3, [pc, #256]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	4a3f      	ldr	r2, [pc, #252]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d5d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801d5da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d5dc:	f7fe fa6e 	bl	801babc <HAL_GetTick>
 801d5e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d5e2:	e009      	b.n	801d5f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d5e4:	f7fe fa6a 	bl	801babc <HAL_GetTick>
 801d5e8:	4602      	mov	r2, r0
 801d5ea:	68bb      	ldr	r3, [r7, #8]
 801d5ec:	1ad3      	subs	r3, r2, r3
 801d5ee:	2b02      	cmp	r3, #2
 801d5f0:	d902      	bls.n	801d5f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801d5f2:	2303      	movs	r3, #3
 801d5f4:	73fb      	strb	r3, [r7, #15]
        break;
 801d5f6:	e005      	b.n	801d604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d5f8:	4b36      	ldr	r3, [pc, #216]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d600:	2b00      	cmp	r3, #0
 801d602:	d1ef      	bne.n	801d5e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801d604:	7bfb      	ldrb	r3, [r7, #15]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d15f      	bne.n	801d6ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801d60a:	683b      	ldr	r3, [r7, #0]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d110      	bne.n	801d632 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d610:	4b30      	ldr	r3, [pc, #192]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d612:	691b      	ldr	r3, [r3, #16]
 801d614:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 801d618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801d61c:	687a      	ldr	r2, [r7, #4]
 801d61e:	6892      	ldr	r2, [r2, #8]
 801d620:	0211      	lsls	r1, r2, #8
 801d622:	687a      	ldr	r2, [r7, #4]
 801d624:	68d2      	ldr	r2, [r2, #12]
 801d626:	06d2      	lsls	r2, r2, #27
 801d628:	430a      	orrs	r2, r1
 801d62a:	492a      	ldr	r1, [pc, #168]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d62c:	4313      	orrs	r3, r2
 801d62e:	610b      	str	r3, [r1, #16]
 801d630:	e027      	b.n	801d682 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801d632:	683b      	ldr	r3, [r7, #0]
 801d634:	2b01      	cmp	r3, #1
 801d636:	d112      	bne.n	801d65e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d638:	4b26      	ldr	r3, [pc, #152]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d63a:	691b      	ldr	r3, [r3, #16]
 801d63c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801d640:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801d644:	687a      	ldr	r2, [r7, #4]
 801d646:	6892      	ldr	r2, [r2, #8]
 801d648:	0211      	lsls	r1, r2, #8
 801d64a:	687a      	ldr	r2, [r7, #4]
 801d64c:	6912      	ldr	r2, [r2, #16]
 801d64e:	0852      	lsrs	r2, r2, #1
 801d650:	3a01      	subs	r2, #1
 801d652:	0552      	lsls	r2, r2, #21
 801d654:	430a      	orrs	r2, r1
 801d656:	491f      	ldr	r1, [pc, #124]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d658:	4313      	orrs	r3, r2
 801d65a:	610b      	str	r3, [r1, #16]
 801d65c:	e011      	b.n	801d682 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d65e:	4b1d      	ldr	r3, [pc, #116]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d660:	691b      	ldr	r3, [r3, #16]
 801d662:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 801d666:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801d66a:	687a      	ldr	r2, [r7, #4]
 801d66c:	6892      	ldr	r2, [r2, #8]
 801d66e:	0211      	lsls	r1, r2, #8
 801d670:	687a      	ldr	r2, [r7, #4]
 801d672:	6952      	ldr	r2, [r2, #20]
 801d674:	0852      	lsrs	r2, r2, #1
 801d676:	3a01      	subs	r2, #1
 801d678:	0652      	lsls	r2, r2, #25
 801d67a:	430a      	orrs	r2, r1
 801d67c:	4915      	ldr	r1, [pc, #84]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d67e:	4313      	orrs	r3, r2
 801d680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801d682:	4b14      	ldr	r3, [pc, #80]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	4a13      	ldr	r2, [pc, #76]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d688:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801d68c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d68e:	f7fe fa15 	bl	801babc <HAL_GetTick>
 801d692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d694:	e009      	b.n	801d6aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d696:	f7fe fa11 	bl	801babc <HAL_GetTick>
 801d69a:	4602      	mov	r2, r0
 801d69c:	68bb      	ldr	r3, [r7, #8]
 801d69e:	1ad3      	subs	r3, r2, r3
 801d6a0:	2b02      	cmp	r3, #2
 801d6a2:	d902      	bls.n	801d6aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 801d6a4:	2303      	movs	r3, #3
 801d6a6:	73fb      	strb	r3, [r7, #15]
          break;
 801d6a8:	e005      	b.n	801d6b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d6aa:	4b0a      	ldr	r3, [pc, #40]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d0ef      	beq.n	801d696 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801d6b6:	7bfb      	ldrb	r3, [r7, #15]
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d106      	bne.n	801d6ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801d6bc:	4b05      	ldr	r3, [pc, #20]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d6be:	691a      	ldr	r2, [r3, #16]
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	699b      	ldr	r3, [r3, #24]
 801d6c4:	4903      	ldr	r1, [pc, #12]	@ (801d6d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801d6c6:	4313      	orrs	r3, r2
 801d6c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801d6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	3710      	adds	r7, #16
 801d6d0:	46bd      	mov	sp, r7
 801d6d2:	bd80      	pop	{r7, pc}
 801d6d4:	40021000 	.word	0x40021000

0801d6d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d6d8:	b580      	push	{r7, lr}
 801d6da:	b084      	sub	sp, #16
 801d6dc:	af00      	add	r7, sp, #0
 801d6de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d101      	bne.n	801d6ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d6e6:	2301      	movs	r3, #1
 801d6e8:	e095      	b.n	801d816 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d108      	bne.n	801d704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	685b      	ldr	r3, [r3, #4]
 801d6f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801d6fa:	d009      	beq.n	801d710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	2200      	movs	r2, #0
 801d700:	61da      	str	r2, [r3, #28]
 801d702:	e005      	b.n	801d710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	2200      	movs	r2, #0
 801d708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	2200      	movs	r2, #0
 801d70e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	2200      	movs	r2, #0
 801d714:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801d71c:	b2db      	uxtb	r3, r3
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d106      	bne.n	801d730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	2200      	movs	r2, #0
 801d726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d72a:	6878      	ldr	r0, [r7, #4]
 801d72c:	f7e3 fd66 	bl	80011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	2202      	movs	r2, #2
 801d734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	681a      	ldr	r2, [r3, #0]
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801d746:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	68db      	ldr	r3, [r3, #12]
 801d74c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801d750:	d902      	bls.n	801d758 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d752:	2300      	movs	r3, #0
 801d754:	60fb      	str	r3, [r7, #12]
 801d756:	e002      	b.n	801d75e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801d75c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	68db      	ldr	r3, [r3, #12]
 801d762:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801d766:	d007      	beq.n	801d778 <HAL_SPI_Init+0xa0>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	68db      	ldr	r3, [r3, #12]
 801d76c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801d770:	d002      	beq.n	801d778 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	2200      	movs	r2, #0
 801d776:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	685b      	ldr	r3, [r3, #4]
 801d77c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	689b      	ldr	r3, [r3, #8]
 801d784:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801d788:	431a      	orrs	r2, r3
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	691b      	ldr	r3, [r3, #16]
 801d78e:	f003 0302 	and.w	r3, r3, #2
 801d792:	431a      	orrs	r2, r3
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	695b      	ldr	r3, [r3, #20]
 801d798:	f003 0301 	and.w	r3, r3, #1
 801d79c:	431a      	orrs	r2, r3
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	699b      	ldr	r3, [r3, #24]
 801d7a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801d7a6:	431a      	orrs	r2, r3
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	69db      	ldr	r3, [r3, #28]
 801d7ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d7b0:	431a      	orrs	r2, r3
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	6a1b      	ldr	r3, [r3, #32]
 801d7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d7ba:	ea42 0103 	orr.w	r1, r2, r3
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	430a      	orrs	r2, r1
 801d7cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	699b      	ldr	r3, [r3, #24]
 801d7d2:	0c1b      	lsrs	r3, r3, #16
 801d7d4:	f003 0204 	and.w	r2, r3, #4
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7dc:	f003 0310 	and.w	r3, r3, #16
 801d7e0:	431a      	orrs	r2, r3
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d7e6:	f003 0308 	and.w	r3, r3, #8
 801d7ea:	431a      	orrs	r2, r3
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	68db      	ldr	r3, [r3, #12]
 801d7f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801d7f4:	ea42 0103 	orr.w	r1, r2, r3
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	430a      	orrs	r2, r1
 801d804:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	2200      	movs	r2, #0
 801d80a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	2201      	movs	r2, #1
 801d810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801d814:	2300      	movs	r3, #0
}
 801d816:	4618      	mov	r0, r3
 801d818:	3710      	adds	r7, #16
 801d81a:	46bd      	mov	sp, r7
 801d81c:	bd80      	pop	{r7, pc}

0801d81e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801d81e:	b580      	push	{r7, lr}
 801d820:	b08a      	sub	sp, #40	@ 0x28
 801d822:	af00      	add	r7, sp, #0
 801d824:	60f8      	str	r0, [r7, #12]
 801d826:	60b9      	str	r1, [r7, #8]
 801d828:	607a      	str	r2, [r7, #4]
 801d82a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d82c:	2301      	movs	r3, #1
 801d82e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d830:	f7fe f944 	bl	801babc <HAL_GetTick>
 801d834:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801d83c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	685b      	ldr	r3, [r3, #4]
 801d842:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 801d844:	887b      	ldrh	r3, [r7, #2]
 801d846:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 801d848:	887b      	ldrh	r3, [r7, #2]
 801d84a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d84c:	7ffb      	ldrb	r3, [r7, #31]
 801d84e:	2b01      	cmp	r3, #1
 801d850:	d00c      	beq.n	801d86c <HAL_SPI_TransmitReceive+0x4e>
 801d852:	69bb      	ldr	r3, [r7, #24]
 801d854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801d858:	d106      	bne.n	801d868 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	689b      	ldr	r3, [r3, #8]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d102      	bne.n	801d868 <HAL_SPI_TransmitReceive+0x4a>
 801d862:	7ffb      	ldrb	r3, [r7, #31]
 801d864:	2b04      	cmp	r3, #4
 801d866:	d001      	beq.n	801d86c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 801d868:	2302      	movs	r3, #2
 801d86a:	e1f3      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	2b00      	cmp	r3, #0
 801d870:	d005      	beq.n	801d87e <HAL_SPI_TransmitReceive+0x60>
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d002      	beq.n	801d87e <HAL_SPI_TransmitReceive+0x60>
 801d878:	887b      	ldrh	r3, [r7, #2]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d101      	bne.n	801d882 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 801d87e:	2301      	movs	r3, #1
 801d880:	e1e8      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801d888:	2b01      	cmp	r3, #1
 801d88a:	d101      	bne.n	801d890 <HAL_SPI_TransmitReceive+0x72>
 801d88c:	2302      	movs	r3, #2
 801d88e:	e1e1      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	2201      	movs	r2, #1
 801d894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801d89e:	b2db      	uxtb	r3, r3
 801d8a0:	2b04      	cmp	r3, #4
 801d8a2:	d003      	beq.n	801d8ac <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	2205      	movs	r2, #5
 801d8a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	2200      	movs	r2, #0
 801d8b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	687a      	ldr	r2, [r7, #4]
 801d8b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	887a      	ldrh	r2, [r7, #2]
 801d8bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	887a      	ldrh	r2, [r7, #2]
 801d8c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	68ba      	ldr	r2, [r7, #8]
 801d8cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	887a      	ldrh	r2, [r7, #2]
 801d8d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	887a      	ldrh	r2, [r7, #2]
 801d8d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	2200      	movs	r2, #0
 801d8de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	68db      	ldr	r3, [r3, #12]
 801d8ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801d8ee:	d802      	bhi.n	801d8f6 <HAL_SPI_TransmitReceive+0xd8>
 801d8f0:	8abb      	ldrh	r3, [r7, #20]
 801d8f2:	2b01      	cmp	r3, #1
 801d8f4:	d908      	bls.n	801d908 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	685a      	ldr	r2, [r3, #4]
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801d904:	605a      	str	r2, [r3, #4]
 801d906:	e007      	b.n	801d918 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	685a      	ldr	r2, [r3, #4]
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801d916:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d922:	2b40      	cmp	r3, #64	@ 0x40
 801d924:	d007      	beq.n	801d936 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	681a      	ldr	r2, [r3, #0]
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801d934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	68db      	ldr	r3, [r3, #12]
 801d93a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801d93e:	f240 8083 	bls.w	801da48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	685b      	ldr	r3, [r3, #4]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d002      	beq.n	801d950 <HAL_SPI_TransmitReceive+0x132>
 801d94a:	8afb      	ldrh	r3, [r7, #22]
 801d94c:	2b01      	cmp	r3, #1
 801d94e:	d16f      	bne.n	801da30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d954:	881a      	ldrh	r2, [r3, #0]
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d960:	1c9a      	adds	r2, r3, #2
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801d96a:	b29b      	uxth	r3, r3
 801d96c:	3b01      	subs	r3, #1
 801d96e:	b29a      	uxth	r2, r3
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d974:	e05c      	b.n	801da30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	689b      	ldr	r3, [r3, #8]
 801d97c:	f003 0302 	and.w	r3, r3, #2
 801d980:	2b02      	cmp	r3, #2
 801d982:	d11b      	bne.n	801d9bc <HAL_SPI_TransmitReceive+0x19e>
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801d988:	b29b      	uxth	r3, r3
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d016      	beq.n	801d9bc <HAL_SPI_TransmitReceive+0x19e>
 801d98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d990:	2b01      	cmp	r3, #1
 801d992:	d113      	bne.n	801d9bc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d998:	881a      	ldrh	r2, [r3, #0]
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d9a4:	1c9a      	adds	r2, r3, #2
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801d9ae:	b29b      	uxth	r3, r3
 801d9b0:	3b01      	subs	r3, #1
 801d9b2:	b29a      	uxth	r2, r3
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	681b      	ldr	r3, [r3, #0]
 801d9c0:	689b      	ldr	r3, [r3, #8]
 801d9c2:	f003 0301 	and.w	r3, r3, #1
 801d9c6:	2b01      	cmp	r3, #1
 801d9c8:	d11c      	bne.n	801da04 <HAL_SPI_TransmitReceive+0x1e6>
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801d9d0:	b29b      	uxth	r3, r3
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d016      	beq.n	801da04 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	68da      	ldr	r2, [r3, #12]
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d9e0:	b292      	uxth	r2, r2
 801d9e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d9e8:	1c9a      	adds	r2, r3, #2
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	3b01      	subs	r3, #1
 801d9f8:	b29a      	uxth	r2, r3
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801da00:	2301      	movs	r3, #1
 801da02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801da04:	f7fe f85a 	bl	801babc <HAL_GetTick>
 801da08:	4602      	mov	r2, r0
 801da0a:	6a3b      	ldr	r3, [r7, #32]
 801da0c:	1ad3      	subs	r3, r2, r3
 801da0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801da10:	429a      	cmp	r2, r3
 801da12:	d80d      	bhi.n	801da30 <HAL_SPI_TransmitReceive+0x212>
 801da14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801da16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da1a:	d009      	beq.n	801da30 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	2201      	movs	r2, #1
 801da20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	2200      	movs	r2, #0
 801da28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801da2c:	2303      	movs	r3, #3
 801da2e:	e111      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801da34:	b29b      	uxth	r3, r3
 801da36:	2b00      	cmp	r3, #0
 801da38:	d19d      	bne.n	801d976 <HAL_SPI_TransmitReceive+0x158>
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801da40:	b29b      	uxth	r3, r3
 801da42:	2b00      	cmp	r3, #0
 801da44:	d197      	bne.n	801d976 <HAL_SPI_TransmitReceive+0x158>
 801da46:	e0e5      	b.n	801dc14 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	685b      	ldr	r3, [r3, #4]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d003      	beq.n	801da58 <HAL_SPI_TransmitReceive+0x23a>
 801da50:	8afb      	ldrh	r3, [r7, #22]
 801da52:	2b01      	cmp	r3, #1
 801da54:	f040 80d1 	bne.w	801dbfa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801da5c:	b29b      	uxth	r3, r3
 801da5e:	2b01      	cmp	r3, #1
 801da60:	d912      	bls.n	801da88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801da66:	881a      	ldrh	r2, [r3, #0]
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801da72:	1c9a      	adds	r2, r3, #2
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801da7c:	b29b      	uxth	r3, r3
 801da7e:	3b02      	subs	r3, #2
 801da80:	b29a      	uxth	r2, r3
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801da86:	e0b8      	b.n	801dbfa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	330c      	adds	r3, #12
 801da92:	7812      	ldrb	r2, [r2, #0]
 801da94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801da9a:	1c5a      	adds	r2, r3, #1
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801daa4:	b29b      	uxth	r3, r3
 801daa6:	3b01      	subs	r3, #1
 801daa8:	b29a      	uxth	r2, r3
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801daae:	e0a4      	b.n	801dbfa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	689b      	ldr	r3, [r3, #8]
 801dab6:	f003 0302 	and.w	r3, r3, #2
 801daba:	2b02      	cmp	r3, #2
 801dabc:	d134      	bne.n	801db28 <HAL_SPI_TransmitReceive+0x30a>
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801dac2:	b29b      	uxth	r3, r3
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d02f      	beq.n	801db28 <HAL_SPI_TransmitReceive+0x30a>
 801dac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daca:	2b01      	cmp	r3, #1
 801dacc:	d12c      	bne.n	801db28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801dace:	68fb      	ldr	r3, [r7, #12]
 801dad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801dad2:	b29b      	uxth	r3, r3
 801dad4:	2b01      	cmp	r3, #1
 801dad6:	d912      	bls.n	801dafe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dadc:	881a      	ldrh	r2, [r3, #0]
 801dade:	68fb      	ldr	r3, [r7, #12]
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801dae4:	68fb      	ldr	r3, [r7, #12]
 801dae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dae8:	1c9a      	adds	r2, r3, #2
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801daf2:	b29b      	uxth	r3, r3
 801daf4:	3b02      	subs	r3, #2
 801daf6:	b29a      	uxth	r2, r3
 801daf8:	68fb      	ldr	r3, [r7, #12]
 801dafa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801dafc:	e012      	b.n	801db24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	330c      	adds	r3, #12
 801db08:	7812      	ldrb	r2, [r2, #0]
 801db0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db10:	1c5a      	adds	r2, r3, #1
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801db1a:	b29b      	uxth	r3, r3
 801db1c:	3b01      	subs	r3, #1
 801db1e:	b29a      	uxth	r2, r3
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801db24:	2300      	movs	r3, #0
 801db26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	689b      	ldr	r3, [r3, #8]
 801db2e:	f003 0301 	and.w	r3, r3, #1
 801db32:	2b01      	cmp	r3, #1
 801db34:	d148      	bne.n	801dbc8 <HAL_SPI_TransmitReceive+0x3aa>
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801db3c:	b29b      	uxth	r3, r3
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d042      	beq.n	801dbc8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801db48:	b29b      	uxth	r3, r3
 801db4a:	2b01      	cmp	r3, #1
 801db4c:	d923      	bls.n	801db96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	68da      	ldr	r2, [r3, #12]
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801db58:	b292      	uxth	r2, r2
 801db5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801db60:	1c9a      	adds	r2, r3, #2
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801db6c:	b29b      	uxth	r3, r3
 801db6e:	3b02      	subs	r3, #2
 801db70:	b29a      	uxth	r2, r3
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801db7e:	b29b      	uxth	r3, r3
 801db80:	2b01      	cmp	r3, #1
 801db82:	d81f      	bhi.n	801dbc4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	685a      	ldr	r2, [r3, #4]
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801db92:	605a      	str	r2, [r3, #4]
 801db94:	e016      	b.n	801dbc4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	f103 020c 	add.w	r2, r3, #12
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dba2:	7812      	ldrb	r2, [r2, #0]
 801dba4:	b2d2      	uxtb	r2, r2
 801dba6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dbac:	1c5a      	adds	r2, r3, #1
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801dbb8:	b29b      	uxth	r3, r3
 801dbba:	3b01      	subs	r3, #1
 801dbbc:	b29a      	uxth	r2, r3
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801dbc4:	2301      	movs	r3, #1
 801dbc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801dbc8:	f7fd ff78 	bl	801babc <HAL_GetTick>
 801dbcc:	4602      	mov	r2, r0
 801dbce:	6a3b      	ldr	r3, [r7, #32]
 801dbd0:	1ad3      	subs	r3, r2, r3
 801dbd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d803      	bhi.n	801dbe0 <HAL_SPI_TransmitReceive+0x3c2>
 801dbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dbde:	d102      	bne.n	801dbe6 <HAL_SPI_TransmitReceive+0x3c8>
 801dbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d109      	bne.n	801dbfa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	2201      	movs	r2, #1
 801dbea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	2200      	movs	r2, #0
 801dbf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801dbf6:	2303      	movs	r3, #3
 801dbf8:	e02c      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801dbfe:	b29b      	uxth	r3, r3
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	f47f af55 	bne.w	801dab0 <HAL_SPI_TransmitReceive+0x292>
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801dc0c:	b29b      	uxth	r3, r3
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	f47f af4e 	bne.w	801dab0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801dc14:	6a3a      	ldr	r2, [r7, #32]
 801dc16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dc18:	68f8      	ldr	r0, [r7, #12]
 801dc1a:	f000 f93d 	bl	801de98 <SPI_EndRxTxTransaction>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d008      	beq.n	801dc36 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	2220      	movs	r2, #32
 801dc28:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 801dc32:	2301      	movs	r3, #1
 801dc34:	e00e      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	2201      	movs	r2, #1
 801dc3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	2200      	movs	r2, #0
 801dc42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d001      	beq.n	801dc52 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 801dc4e:	2301      	movs	r3, #1
 801dc50:	e000      	b.n	801dc54 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 801dc52:	2300      	movs	r3, #0
  }
}
 801dc54:	4618      	mov	r0, r3
 801dc56:	3728      	adds	r7, #40	@ 0x28
 801dc58:	46bd      	mov	sp, r7
 801dc5a:	bd80      	pop	{r7, pc}

0801dc5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b088      	sub	sp, #32
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	60f8      	str	r0, [r7, #12]
 801dc64:	60b9      	str	r1, [r7, #8]
 801dc66:	603b      	str	r3, [r7, #0]
 801dc68:	4613      	mov	r3, r2
 801dc6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801dc6c:	f7fd ff26 	bl	801babc <HAL_GetTick>
 801dc70:	4602      	mov	r2, r0
 801dc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc74:	1a9b      	subs	r3, r3, r2
 801dc76:	683a      	ldr	r2, [r7, #0]
 801dc78:	4413      	add	r3, r2
 801dc7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801dc7c:	f7fd ff1e 	bl	801babc <HAL_GetTick>
 801dc80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801dc82:	4b39      	ldr	r3, [pc, #228]	@ (801dd68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	015b      	lsls	r3, r3, #5
 801dc88:	0d1b      	lsrs	r3, r3, #20
 801dc8a:	69fa      	ldr	r2, [r7, #28]
 801dc8c:	fb02 f303 	mul.w	r3, r2, r3
 801dc90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dc92:	e054      	b.n	801dd3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc9a:	d050      	beq.n	801dd3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dc9c:	f7fd ff0e 	bl	801babc <HAL_GetTick>
 801dca0:	4602      	mov	r2, r0
 801dca2:	69bb      	ldr	r3, [r7, #24]
 801dca4:	1ad3      	subs	r3, r2, r3
 801dca6:	69fa      	ldr	r2, [r7, #28]
 801dca8:	429a      	cmp	r2, r3
 801dcaa:	d902      	bls.n	801dcb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801dcac:	69fb      	ldr	r3, [r7, #28]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d13d      	bne.n	801dd2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	685a      	ldr	r2, [r3, #4]
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801dcc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	685b      	ldr	r3, [r3, #4]
 801dcc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801dcca:	d111      	bne.n	801dcf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	689b      	ldr	r3, [r3, #8]
 801dcd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801dcd4:	d004      	beq.n	801dce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	689b      	ldr	r3, [r3, #8]
 801dcda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801dcde:	d107      	bne.n	801dcf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	681a      	ldr	r2, [r3, #0]
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801dcee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801dcf8:	d10f      	bne.n	801dd1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801dd08:	601a      	str	r2, [r3, #0]
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	681a      	ldr	r2, [r3, #0]
 801dd10:	68fb      	ldr	r3, [r7, #12]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801dd18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	2201      	movs	r2, #1
 801dd1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	2200      	movs	r2, #0
 801dd26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801dd2a:	2303      	movs	r3, #3
 801dd2c:	e017      	b.n	801dd5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801dd2e:	697b      	ldr	r3, [r7, #20]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d101      	bne.n	801dd38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801dd34:	2300      	movs	r3, #0
 801dd36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801dd38:	697b      	ldr	r3, [r7, #20]
 801dd3a:	3b01      	subs	r3, #1
 801dd3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	689a      	ldr	r2, [r3, #8]
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	4013      	ands	r3, r2
 801dd48:	68ba      	ldr	r2, [r7, #8]
 801dd4a:	429a      	cmp	r2, r3
 801dd4c:	bf0c      	ite	eq
 801dd4e:	2301      	moveq	r3, #1
 801dd50:	2300      	movne	r3, #0
 801dd52:	b2db      	uxtb	r3, r3
 801dd54:	461a      	mov	r2, r3
 801dd56:	79fb      	ldrb	r3, [r7, #7]
 801dd58:	429a      	cmp	r2, r3
 801dd5a:	d19b      	bne.n	801dc94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801dd5c:	2300      	movs	r3, #0
}
 801dd5e:	4618      	mov	r0, r3
 801dd60:	3720      	adds	r7, #32
 801dd62:	46bd      	mov	sp, r7
 801dd64:	bd80      	pop	{r7, pc}
 801dd66:	bf00      	nop
 801dd68:	20000000 	.word	0x20000000

0801dd6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b08a      	sub	sp, #40	@ 0x28
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	60f8      	str	r0, [r7, #12]
 801dd74:	60b9      	str	r1, [r7, #8]
 801dd76:	607a      	str	r2, [r7, #4]
 801dd78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801dd7e:	f7fd fe9d 	bl	801babc <HAL_GetTick>
 801dd82:	4602      	mov	r2, r0
 801dd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd86:	1a9b      	subs	r3, r3, r2
 801dd88:	683a      	ldr	r2, [r7, #0]
 801dd8a:	4413      	add	r3, r2
 801dd8c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801dd8e:	f7fd fe95 	bl	801babc <HAL_GetTick>
 801dd92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	330c      	adds	r3, #12
 801dd9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801dd9c:	4b3d      	ldr	r3, [pc, #244]	@ (801de94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801dd9e:	681a      	ldr	r2, [r3, #0]
 801dda0:	4613      	mov	r3, r2
 801dda2:	009b      	lsls	r3, r3, #2
 801dda4:	4413      	add	r3, r2
 801dda6:	00da      	lsls	r2, r3, #3
 801dda8:	1ad3      	subs	r3, r2, r3
 801ddaa:	0d1b      	lsrs	r3, r3, #20
 801ddac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ddae:	fb02 f303 	mul.w	r3, r2, r3
 801ddb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801ddb4:	e060      	b.n	801de78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801ddb6:	68bb      	ldr	r3, [r7, #8]
 801ddb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801ddbc:	d107      	bne.n	801ddce <SPI_WaitFifoStateUntilTimeout+0x62>
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d104      	bne.n	801ddce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801ddc4:	69fb      	ldr	r3, [r7, #28]
 801ddc6:	781b      	ldrb	r3, [r3, #0]
 801ddc8:	b2db      	uxtb	r3, r3
 801ddca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801ddcc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801ddce:	683b      	ldr	r3, [r7, #0]
 801ddd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ddd4:	d050      	beq.n	801de78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ddd6:	f7fd fe71 	bl	801babc <HAL_GetTick>
 801ddda:	4602      	mov	r2, r0
 801dddc:	6a3b      	ldr	r3, [r7, #32]
 801ddde:	1ad3      	subs	r3, r2, r3
 801dde0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dde2:	429a      	cmp	r2, r3
 801dde4:	d902      	bls.n	801ddec <SPI_WaitFifoStateUntilTimeout+0x80>
 801dde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d13d      	bne.n	801de68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ddec:	68fb      	ldr	r3, [r7, #12]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	685a      	ldr	r2, [r3, #4]
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801ddfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	685b      	ldr	r3, [r3, #4]
 801de00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801de04:	d111      	bne.n	801de2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801de06:	68fb      	ldr	r3, [r7, #12]
 801de08:	689b      	ldr	r3, [r3, #8]
 801de0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801de0e:	d004      	beq.n	801de1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	689b      	ldr	r3, [r3, #8]
 801de14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801de18:	d107      	bne.n	801de2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	681a      	ldr	r2, [r3, #0]
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801de28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801de2a:	68fb      	ldr	r3, [r7, #12]
 801de2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801de32:	d10f      	bne.n	801de54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	681a      	ldr	r2, [r3, #0]
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801de42:	601a      	str	r2, [r3, #0]
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	681a      	ldr	r2, [r3, #0]
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801de52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	2201      	movs	r2, #1
 801de58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	2200      	movs	r2, #0
 801de60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801de64:	2303      	movs	r3, #3
 801de66:	e010      	b.n	801de8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801de68:	69bb      	ldr	r3, [r7, #24]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d101      	bne.n	801de72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801de6e:	2300      	movs	r3, #0
 801de70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801de72:	69bb      	ldr	r3, [r7, #24]
 801de74:	3b01      	subs	r3, #1
 801de76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	689a      	ldr	r2, [r3, #8]
 801de7e:	68bb      	ldr	r3, [r7, #8]
 801de80:	4013      	ands	r3, r2
 801de82:	687a      	ldr	r2, [r7, #4]
 801de84:	429a      	cmp	r2, r3
 801de86:	d196      	bne.n	801ddb6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801de88:	2300      	movs	r3, #0
}
 801de8a:	4618      	mov	r0, r3
 801de8c:	3728      	adds	r7, #40	@ 0x28
 801de8e:	46bd      	mov	sp, r7
 801de90:	bd80      	pop	{r7, pc}
 801de92:	bf00      	nop
 801de94:	20000000 	.word	0x20000000

0801de98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b086      	sub	sp, #24
 801de9c:	af02      	add	r7, sp, #8
 801de9e:	60f8      	str	r0, [r7, #12]
 801dea0:	60b9      	str	r1, [r7, #8]
 801dea2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	9300      	str	r3, [sp, #0]
 801dea8:	68bb      	ldr	r3, [r7, #8]
 801deaa:	2200      	movs	r2, #0
 801deac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801deb0:	68f8      	ldr	r0, [r7, #12]
 801deb2:	f7ff ff5b 	bl	801dd6c <SPI_WaitFifoStateUntilTimeout>
 801deb6:	4603      	mov	r3, r0
 801deb8:	2b00      	cmp	r3, #0
 801deba:	d007      	beq.n	801decc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801debc:	68fb      	ldr	r3, [r7, #12]
 801debe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dec0:	f043 0220 	orr.w	r2, r3, #32
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801dec8:	2303      	movs	r3, #3
 801deca:	e027      	b.n	801df1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	9300      	str	r3, [sp, #0]
 801ded0:	68bb      	ldr	r3, [r7, #8]
 801ded2:	2200      	movs	r2, #0
 801ded4:	2180      	movs	r1, #128	@ 0x80
 801ded6:	68f8      	ldr	r0, [r7, #12]
 801ded8:	f7ff fec0 	bl	801dc5c <SPI_WaitFlagStateUntilTimeout>
 801dedc:	4603      	mov	r3, r0
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d007      	beq.n	801def2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dee6:	f043 0220 	orr.w	r2, r3, #32
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801deee:	2303      	movs	r3, #3
 801def0:	e014      	b.n	801df1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	9300      	str	r3, [sp, #0]
 801def6:	68bb      	ldr	r3, [r7, #8]
 801def8:	2200      	movs	r2, #0
 801defa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801defe:	68f8      	ldr	r0, [r7, #12]
 801df00:	f7ff ff34 	bl	801dd6c <SPI_WaitFifoStateUntilTimeout>
 801df04:	4603      	mov	r3, r0
 801df06:	2b00      	cmp	r3, #0
 801df08:	d007      	beq.n	801df1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801df0e:	f043 0220 	orr.w	r2, r3, #32
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801df16:	2303      	movs	r3, #3
 801df18:	e000      	b.n	801df1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801df1a:	2300      	movs	r3, #0
}
 801df1c:	4618      	mov	r0, r3
 801df1e:	3710      	adds	r7, #16
 801df20:	46bd      	mov	sp, r7
 801df22:	bd80      	pop	{r7, pc}

0801df24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b082      	sub	sp, #8
 801df28:	af00      	add	r7, sp, #0
 801df2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d101      	bne.n	801df36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801df32:	2301      	movs	r3, #1
 801df34:	e049      	b.n	801dfca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801df3c:	b2db      	uxtb	r3, r3
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d106      	bne.n	801df50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	2200      	movs	r2, #0
 801df46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801df4a:	6878      	ldr	r0, [r7, #4]
 801df4c:	f7e3 fc12 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	2202      	movs	r2, #2
 801df54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	681a      	ldr	r2, [r3, #0]
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	3304      	adds	r3, #4
 801df60:	4619      	mov	r1, r3
 801df62:	4610      	mov	r0, r2
 801df64:	f000 fdd4 	bl	801eb10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	2201      	movs	r2, #1
 801df6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	2201      	movs	r2, #1
 801df74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	2201      	movs	r2, #1
 801df7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	2201      	movs	r2, #1
 801df84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	2201      	movs	r2, #1
 801df8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	2201      	movs	r2, #1
 801df94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	2201      	movs	r2, #1
 801df9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	2201      	movs	r2, #1
 801dfa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	2201      	movs	r2, #1
 801dfac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	2201      	movs	r2, #1
 801dfb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	2201      	movs	r2, #1
 801dfbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	2201      	movs	r2, #1
 801dfc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801dfc8:	2300      	movs	r3, #0
}
 801dfca:	4618      	mov	r0, r3
 801dfcc:	3708      	adds	r7, #8
 801dfce:	46bd      	mov	sp, r7
 801dfd0:	bd80      	pop	{r7, pc}
	...

0801dfd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801dfd4:	b480      	push	{r7}
 801dfd6:	b085      	sub	sp, #20
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801dfe2:	b2db      	uxtb	r3, r3
 801dfe4:	2b01      	cmp	r3, #1
 801dfe6:	d001      	beq.n	801dfec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801dfe8:	2301      	movs	r3, #1
 801dfea:	e033      	b.n	801e054 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	2202      	movs	r2, #2
 801dff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	4a19      	ldr	r2, [pc, #100]	@ (801e060 <HAL_TIM_Base_Start+0x8c>)
 801dffa:	4293      	cmp	r3, r2
 801dffc:	d009      	beq.n	801e012 <HAL_TIM_Base_Start+0x3e>
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e006:	d004      	beq.n	801e012 <HAL_TIM_Base_Start+0x3e>
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	4a15      	ldr	r2, [pc, #84]	@ (801e064 <HAL_TIM_Base_Start+0x90>)
 801e00e:	4293      	cmp	r3, r2
 801e010:	d115      	bne.n	801e03e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	689a      	ldr	r2, [r3, #8]
 801e018:	4b13      	ldr	r3, [pc, #76]	@ (801e068 <HAL_TIM_Base_Start+0x94>)
 801e01a:	4013      	ands	r3, r2
 801e01c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	2b06      	cmp	r3, #6
 801e022:	d015      	beq.n	801e050 <HAL_TIM_Base_Start+0x7c>
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e02a:	d011      	beq.n	801e050 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	681a      	ldr	r2, [r3, #0]
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	f042 0201 	orr.w	r2, r2, #1
 801e03a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e03c:	e008      	b.n	801e050 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	681a      	ldr	r2, [r3, #0]
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	f042 0201 	orr.w	r2, r2, #1
 801e04c:	601a      	str	r2, [r3, #0]
 801e04e:	e000      	b.n	801e052 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e052:	2300      	movs	r3, #0
}
 801e054:	4618      	mov	r0, r3
 801e056:	3714      	adds	r7, #20
 801e058:	46bd      	mov	sp, r7
 801e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05e:	4770      	bx	lr
 801e060:	40012c00 	.word	0x40012c00
 801e064:	40014000 	.word	0x40014000
 801e068:	00010007 	.word	0x00010007

0801e06c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801e06c:	b480      	push	{r7}
 801e06e:	b083      	sub	sp, #12
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	6a1a      	ldr	r2, [r3, #32]
 801e07a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801e07e:	4013      	ands	r3, r2
 801e080:	2b00      	cmp	r3, #0
 801e082:	d10f      	bne.n	801e0a4 <HAL_TIM_Base_Stop+0x38>
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	6a1a      	ldr	r2, [r3, #32]
 801e08a:	f240 4344 	movw	r3, #1092	@ 0x444
 801e08e:	4013      	ands	r3, r2
 801e090:	2b00      	cmp	r3, #0
 801e092:	d107      	bne.n	801e0a4 <HAL_TIM_Base_Stop+0x38>
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	681a      	ldr	r2, [r3, #0]
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	f022 0201 	bic.w	r2, r2, #1
 801e0a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	2201      	movs	r2, #1
 801e0a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 801e0ac:	2300      	movs	r3, #0
}
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	370c      	adds	r7, #12
 801e0b2:	46bd      	mov	sp, r7
 801e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b8:	4770      	bx	lr
	...

0801e0bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e0bc:	b480      	push	{r7}
 801e0be:	b085      	sub	sp, #20
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801e0ca:	b2db      	uxtb	r3, r3
 801e0cc:	2b01      	cmp	r3, #1
 801e0ce:	d001      	beq.n	801e0d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e0d0:	2301      	movs	r3, #1
 801e0d2:	e03b      	b.n	801e14c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	2202      	movs	r2, #2
 801e0d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	681b      	ldr	r3, [r3, #0]
 801e0e0:	68da      	ldr	r2, [r3, #12]
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	f042 0201 	orr.w	r2, r2, #1
 801e0ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	4a19      	ldr	r2, [pc, #100]	@ (801e158 <HAL_TIM_Base_Start_IT+0x9c>)
 801e0f2:	4293      	cmp	r3, r2
 801e0f4:	d009      	beq.n	801e10a <HAL_TIM_Base_Start_IT+0x4e>
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e0fe:	d004      	beq.n	801e10a <HAL_TIM_Base_Start_IT+0x4e>
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	4a15      	ldr	r2, [pc, #84]	@ (801e15c <HAL_TIM_Base_Start_IT+0xa0>)
 801e106:	4293      	cmp	r3, r2
 801e108:	d115      	bne.n	801e136 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	689a      	ldr	r2, [r3, #8]
 801e110:	4b13      	ldr	r3, [pc, #76]	@ (801e160 <HAL_TIM_Base_Start_IT+0xa4>)
 801e112:	4013      	ands	r3, r2
 801e114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	2b06      	cmp	r3, #6
 801e11a:	d015      	beq.n	801e148 <HAL_TIM_Base_Start_IT+0x8c>
 801e11c:	68fb      	ldr	r3, [r7, #12]
 801e11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e122:	d011      	beq.n	801e148 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	681a      	ldr	r2, [r3, #0]
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	f042 0201 	orr.w	r2, r2, #1
 801e132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e134:	e008      	b.n	801e148 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	681a      	ldr	r2, [r3, #0]
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	f042 0201 	orr.w	r2, r2, #1
 801e144:	601a      	str	r2, [r3, #0]
 801e146:	e000      	b.n	801e14a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e148:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e14a:	2300      	movs	r3, #0
}
 801e14c:	4618      	mov	r0, r3
 801e14e:	3714      	adds	r7, #20
 801e150:	46bd      	mov	sp, r7
 801e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e156:	4770      	bx	lr
 801e158:	40012c00 	.word	0x40012c00
 801e15c:	40014000 	.word	0x40014000
 801e160:	00010007 	.word	0x00010007

0801e164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e164:	b580      	push	{r7, lr}
 801e166:	b082      	sub	sp, #8
 801e168:	af00      	add	r7, sp, #0
 801e16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d101      	bne.n	801e176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e172:	2301      	movs	r3, #1
 801e174:	e049      	b.n	801e20a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801e17c:	b2db      	uxtb	r3, r3
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d106      	bne.n	801e190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	2200      	movs	r2, #0
 801e186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e18a:	6878      	ldr	r0, [r7, #4]
 801e18c:	f7e3 fad2 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	2202      	movs	r2, #2
 801e194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	681a      	ldr	r2, [r3, #0]
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	3304      	adds	r3, #4
 801e1a0:	4619      	mov	r1, r3
 801e1a2:	4610      	mov	r0, r2
 801e1a4:	f000 fcb4 	bl	801eb10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	2201      	movs	r2, #1
 801e1ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	2201      	movs	r2, #1
 801e1b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	2201      	movs	r2, #1
 801e1bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	2201      	movs	r2, #1
 801e1c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	2201      	movs	r2, #1
 801e1cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	2201      	movs	r2, #1
 801e1d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	2201      	movs	r2, #1
 801e1dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	2201      	movs	r2, #1
 801e1e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	2201      	movs	r2, #1
 801e1ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	2201      	movs	r2, #1
 801e1f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	2201      	movs	r2, #1
 801e1fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2201      	movs	r2, #1
 801e204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801e208:	2300      	movs	r3, #0
}
 801e20a:	4618      	mov	r0, r3
 801e20c:	3708      	adds	r7, #8
 801e20e:	46bd      	mov	sp, r7
 801e210:	bd80      	pop	{r7, pc}
	...

0801e214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e214:	b580      	push	{r7, lr}
 801e216:	b084      	sub	sp, #16
 801e218:	af00      	add	r7, sp, #0
 801e21a:	6078      	str	r0, [r7, #4]
 801e21c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e21e:	683b      	ldr	r3, [r7, #0]
 801e220:	2b00      	cmp	r3, #0
 801e222:	d109      	bne.n	801e238 <HAL_TIM_PWM_Start+0x24>
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801e22a:	b2db      	uxtb	r3, r3
 801e22c:	2b01      	cmp	r3, #1
 801e22e:	bf14      	ite	ne
 801e230:	2301      	movne	r3, #1
 801e232:	2300      	moveq	r3, #0
 801e234:	b2db      	uxtb	r3, r3
 801e236:	e03c      	b.n	801e2b2 <HAL_TIM_PWM_Start+0x9e>
 801e238:	683b      	ldr	r3, [r7, #0]
 801e23a:	2b04      	cmp	r3, #4
 801e23c:	d109      	bne.n	801e252 <HAL_TIM_PWM_Start+0x3e>
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801e244:	b2db      	uxtb	r3, r3
 801e246:	2b01      	cmp	r3, #1
 801e248:	bf14      	ite	ne
 801e24a:	2301      	movne	r3, #1
 801e24c:	2300      	moveq	r3, #0
 801e24e:	b2db      	uxtb	r3, r3
 801e250:	e02f      	b.n	801e2b2 <HAL_TIM_PWM_Start+0x9e>
 801e252:	683b      	ldr	r3, [r7, #0]
 801e254:	2b08      	cmp	r3, #8
 801e256:	d109      	bne.n	801e26c <HAL_TIM_PWM_Start+0x58>
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801e25e:	b2db      	uxtb	r3, r3
 801e260:	2b01      	cmp	r3, #1
 801e262:	bf14      	ite	ne
 801e264:	2301      	movne	r3, #1
 801e266:	2300      	moveq	r3, #0
 801e268:	b2db      	uxtb	r3, r3
 801e26a:	e022      	b.n	801e2b2 <HAL_TIM_PWM_Start+0x9e>
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	2b0c      	cmp	r3, #12
 801e270:	d109      	bne.n	801e286 <HAL_TIM_PWM_Start+0x72>
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801e278:	b2db      	uxtb	r3, r3
 801e27a:	2b01      	cmp	r3, #1
 801e27c:	bf14      	ite	ne
 801e27e:	2301      	movne	r3, #1
 801e280:	2300      	moveq	r3, #0
 801e282:	b2db      	uxtb	r3, r3
 801e284:	e015      	b.n	801e2b2 <HAL_TIM_PWM_Start+0x9e>
 801e286:	683b      	ldr	r3, [r7, #0]
 801e288:	2b10      	cmp	r3, #16
 801e28a:	d109      	bne.n	801e2a0 <HAL_TIM_PWM_Start+0x8c>
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801e292:	b2db      	uxtb	r3, r3
 801e294:	2b01      	cmp	r3, #1
 801e296:	bf14      	ite	ne
 801e298:	2301      	movne	r3, #1
 801e29a:	2300      	moveq	r3, #0
 801e29c:	b2db      	uxtb	r3, r3
 801e29e:	e008      	b.n	801e2b2 <HAL_TIM_PWM_Start+0x9e>
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801e2a6:	b2db      	uxtb	r3, r3
 801e2a8:	2b01      	cmp	r3, #1
 801e2aa:	bf14      	ite	ne
 801e2ac:	2301      	movne	r3, #1
 801e2ae:	2300      	moveq	r3, #0
 801e2b0:	b2db      	uxtb	r3, r3
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d001      	beq.n	801e2ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e2b6:	2301      	movs	r3, #1
 801e2b8:	e07e      	b.n	801e3b8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e2ba:	683b      	ldr	r3, [r7, #0]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d104      	bne.n	801e2ca <HAL_TIM_PWM_Start+0xb6>
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	2202      	movs	r2, #2
 801e2c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801e2c8:	e023      	b.n	801e312 <HAL_TIM_PWM_Start+0xfe>
 801e2ca:	683b      	ldr	r3, [r7, #0]
 801e2cc:	2b04      	cmp	r3, #4
 801e2ce:	d104      	bne.n	801e2da <HAL_TIM_PWM_Start+0xc6>
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	2202      	movs	r2, #2
 801e2d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801e2d8:	e01b      	b.n	801e312 <HAL_TIM_PWM_Start+0xfe>
 801e2da:	683b      	ldr	r3, [r7, #0]
 801e2dc:	2b08      	cmp	r3, #8
 801e2de:	d104      	bne.n	801e2ea <HAL_TIM_PWM_Start+0xd6>
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	2202      	movs	r2, #2
 801e2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801e2e8:	e013      	b.n	801e312 <HAL_TIM_PWM_Start+0xfe>
 801e2ea:	683b      	ldr	r3, [r7, #0]
 801e2ec:	2b0c      	cmp	r3, #12
 801e2ee:	d104      	bne.n	801e2fa <HAL_TIM_PWM_Start+0xe6>
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	2202      	movs	r2, #2
 801e2f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801e2f8:	e00b      	b.n	801e312 <HAL_TIM_PWM_Start+0xfe>
 801e2fa:	683b      	ldr	r3, [r7, #0]
 801e2fc:	2b10      	cmp	r3, #16
 801e2fe:	d104      	bne.n	801e30a <HAL_TIM_PWM_Start+0xf6>
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	2202      	movs	r2, #2
 801e304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801e308:	e003      	b.n	801e312 <HAL_TIM_PWM_Start+0xfe>
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	2202      	movs	r2, #2
 801e30e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	2201      	movs	r2, #1
 801e318:	6839      	ldr	r1, [r7, #0]
 801e31a:	4618      	mov	r0, r3
 801e31c:	f000 ff80 	bl	801f220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	4a26      	ldr	r2, [pc, #152]	@ (801e3c0 <HAL_TIM_PWM_Start+0x1ac>)
 801e326:	4293      	cmp	r3, r2
 801e328:	d009      	beq.n	801e33e <HAL_TIM_PWM_Start+0x12a>
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	4a25      	ldr	r2, [pc, #148]	@ (801e3c4 <HAL_TIM_PWM_Start+0x1b0>)
 801e330:	4293      	cmp	r3, r2
 801e332:	d004      	beq.n	801e33e <HAL_TIM_PWM_Start+0x12a>
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	681b      	ldr	r3, [r3, #0]
 801e338:	4a23      	ldr	r2, [pc, #140]	@ (801e3c8 <HAL_TIM_PWM_Start+0x1b4>)
 801e33a:	4293      	cmp	r3, r2
 801e33c:	d101      	bne.n	801e342 <HAL_TIM_PWM_Start+0x12e>
 801e33e:	2301      	movs	r3, #1
 801e340:	e000      	b.n	801e344 <HAL_TIM_PWM_Start+0x130>
 801e342:	2300      	movs	r3, #0
 801e344:	2b00      	cmp	r3, #0
 801e346:	d007      	beq.n	801e358 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801e356:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	4a18      	ldr	r2, [pc, #96]	@ (801e3c0 <HAL_TIM_PWM_Start+0x1ac>)
 801e35e:	4293      	cmp	r3, r2
 801e360:	d009      	beq.n	801e376 <HAL_TIM_PWM_Start+0x162>
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e36a:	d004      	beq.n	801e376 <HAL_TIM_PWM_Start+0x162>
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	4a14      	ldr	r2, [pc, #80]	@ (801e3c4 <HAL_TIM_PWM_Start+0x1b0>)
 801e372:	4293      	cmp	r3, r2
 801e374:	d115      	bne.n	801e3a2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	689a      	ldr	r2, [r3, #8]
 801e37c:	4b13      	ldr	r3, [pc, #76]	@ (801e3cc <HAL_TIM_PWM_Start+0x1b8>)
 801e37e:	4013      	ands	r3, r2
 801e380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	2b06      	cmp	r3, #6
 801e386:	d015      	beq.n	801e3b4 <HAL_TIM_PWM_Start+0x1a0>
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e38e:	d011      	beq.n	801e3b4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	681a      	ldr	r2, [r3, #0]
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	f042 0201 	orr.w	r2, r2, #1
 801e39e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e3a0:	e008      	b.n	801e3b4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	681a      	ldr	r2, [r3, #0]
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	f042 0201 	orr.w	r2, r2, #1
 801e3b0:	601a      	str	r2, [r3, #0]
 801e3b2:	e000      	b.n	801e3b6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e3b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e3b6:	2300      	movs	r3, #0
}
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	3710      	adds	r7, #16
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	bd80      	pop	{r7, pc}
 801e3c0:	40012c00 	.word	0x40012c00
 801e3c4:	40014000 	.word	0x40014000
 801e3c8:	40014400 	.word	0x40014400
 801e3cc:	00010007 	.word	0x00010007

0801e3d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b082      	sub	sp, #8
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	6078      	str	r0, [r7, #4]
 801e3d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	2200      	movs	r2, #0
 801e3e0:	6839      	ldr	r1, [r7, #0]
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	f000 ff1c 	bl	801f220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	4a39      	ldr	r2, [pc, #228]	@ (801e4d4 <HAL_TIM_PWM_Stop+0x104>)
 801e3ee:	4293      	cmp	r3, r2
 801e3f0:	d009      	beq.n	801e406 <HAL_TIM_PWM_Stop+0x36>
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	4a38      	ldr	r2, [pc, #224]	@ (801e4d8 <HAL_TIM_PWM_Stop+0x108>)
 801e3f8:	4293      	cmp	r3, r2
 801e3fa:	d004      	beq.n	801e406 <HAL_TIM_PWM_Stop+0x36>
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	4a36      	ldr	r2, [pc, #216]	@ (801e4dc <HAL_TIM_PWM_Stop+0x10c>)
 801e402:	4293      	cmp	r3, r2
 801e404:	d101      	bne.n	801e40a <HAL_TIM_PWM_Stop+0x3a>
 801e406:	2301      	movs	r3, #1
 801e408:	e000      	b.n	801e40c <HAL_TIM_PWM_Stop+0x3c>
 801e40a:	2300      	movs	r3, #0
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d017      	beq.n	801e440 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	6a1a      	ldr	r2, [r3, #32]
 801e416:	f241 1311 	movw	r3, #4369	@ 0x1111
 801e41a:	4013      	ands	r3, r2
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d10f      	bne.n	801e440 <HAL_TIM_PWM_Stop+0x70>
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	6a1a      	ldr	r2, [r3, #32]
 801e426:	f240 4344 	movw	r3, #1092	@ 0x444
 801e42a:	4013      	ands	r3, r2
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d107      	bne.n	801e440 <HAL_TIM_PWM_Stop+0x70>
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801e43e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	6a1a      	ldr	r2, [r3, #32]
 801e446:	f241 1311 	movw	r3, #4369	@ 0x1111
 801e44a:	4013      	ands	r3, r2
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d10f      	bne.n	801e470 <HAL_TIM_PWM_Stop+0xa0>
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	6a1a      	ldr	r2, [r3, #32]
 801e456:	f240 4344 	movw	r3, #1092	@ 0x444
 801e45a:	4013      	ands	r3, r2
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d107      	bne.n	801e470 <HAL_TIM_PWM_Stop+0xa0>
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	681a      	ldr	r2, [r3, #0]
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	f022 0201 	bic.w	r2, r2, #1
 801e46e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e470:	683b      	ldr	r3, [r7, #0]
 801e472:	2b00      	cmp	r3, #0
 801e474:	d104      	bne.n	801e480 <HAL_TIM_PWM_Stop+0xb0>
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	2201      	movs	r2, #1
 801e47a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801e47e:	e023      	b.n	801e4c8 <HAL_TIM_PWM_Stop+0xf8>
 801e480:	683b      	ldr	r3, [r7, #0]
 801e482:	2b04      	cmp	r3, #4
 801e484:	d104      	bne.n	801e490 <HAL_TIM_PWM_Stop+0xc0>
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	2201      	movs	r2, #1
 801e48a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801e48e:	e01b      	b.n	801e4c8 <HAL_TIM_PWM_Stop+0xf8>
 801e490:	683b      	ldr	r3, [r7, #0]
 801e492:	2b08      	cmp	r3, #8
 801e494:	d104      	bne.n	801e4a0 <HAL_TIM_PWM_Stop+0xd0>
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	2201      	movs	r2, #1
 801e49a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801e49e:	e013      	b.n	801e4c8 <HAL_TIM_PWM_Stop+0xf8>
 801e4a0:	683b      	ldr	r3, [r7, #0]
 801e4a2:	2b0c      	cmp	r3, #12
 801e4a4:	d104      	bne.n	801e4b0 <HAL_TIM_PWM_Stop+0xe0>
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	2201      	movs	r2, #1
 801e4aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801e4ae:	e00b      	b.n	801e4c8 <HAL_TIM_PWM_Stop+0xf8>
 801e4b0:	683b      	ldr	r3, [r7, #0]
 801e4b2:	2b10      	cmp	r3, #16
 801e4b4:	d104      	bne.n	801e4c0 <HAL_TIM_PWM_Stop+0xf0>
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	2201      	movs	r2, #1
 801e4ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801e4be:	e003      	b.n	801e4c8 <HAL_TIM_PWM_Stop+0xf8>
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	2201      	movs	r2, #1
 801e4c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 801e4c8:	2300      	movs	r3, #0
}
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	3708      	adds	r7, #8
 801e4ce:	46bd      	mov	sp, r7
 801e4d0:	bd80      	pop	{r7, pc}
 801e4d2:	bf00      	nop
 801e4d4:	40012c00 	.word	0x40012c00
 801e4d8:	40014000 	.word	0x40014000
 801e4dc:	40014400 	.word	0x40014400

0801e4e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e4e0:	b580      	push	{r7, lr}
 801e4e2:	b084      	sub	sp, #16
 801e4e4:	af00      	add	r7, sp, #0
 801e4e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	68db      	ldr	r3, [r3, #12]
 801e4ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	691b      	ldr	r3, [r3, #16]
 801e4f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801e4f8:	68bb      	ldr	r3, [r7, #8]
 801e4fa:	f003 0302 	and.w	r3, r3, #2
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d020      	beq.n	801e544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	f003 0302 	and.w	r3, r3, #2
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d01b      	beq.n	801e544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	f06f 0202 	mvn.w	r2, #2
 801e514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	2201      	movs	r2, #1
 801e51a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	699b      	ldr	r3, [r3, #24]
 801e522:	f003 0303 	and.w	r3, r3, #3
 801e526:	2b00      	cmp	r3, #0
 801e528:	d003      	beq.n	801e532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e52a:	6878      	ldr	r0, [r7, #4]
 801e52c:	f000 fad1 	bl	801ead2 <HAL_TIM_IC_CaptureCallback>
 801e530:	e005      	b.n	801e53e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e532:	6878      	ldr	r0, [r7, #4]
 801e534:	f000 fac3 	bl	801eabe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e538:	6878      	ldr	r0, [r7, #4]
 801e53a:	f000 fad4 	bl	801eae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	2200      	movs	r2, #0
 801e542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801e544:	68bb      	ldr	r3, [r7, #8]
 801e546:	f003 0304 	and.w	r3, r3, #4
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d020      	beq.n	801e590 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	f003 0304 	and.w	r3, r3, #4
 801e554:	2b00      	cmp	r3, #0
 801e556:	d01b      	beq.n	801e590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	f06f 0204 	mvn.w	r2, #4
 801e560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	2202      	movs	r2, #2
 801e566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	699b      	ldr	r3, [r3, #24]
 801e56e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e572:	2b00      	cmp	r3, #0
 801e574:	d003      	beq.n	801e57e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e576:	6878      	ldr	r0, [r7, #4]
 801e578:	f000 faab 	bl	801ead2 <HAL_TIM_IC_CaptureCallback>
 801e57c:	e005      	b.n	801e58a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e57e:	6878      	ldr	r0, [r7, #4]
 801e580:	f000 fa9d 	bl	801eabe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e584:	6878      	ldr	r0, [r7, #4]
 801e586:	f000 faae 	bl	801eae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	2200      	movs	r2, #0
 801e58e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801e590:	68bb      	ldr	r3, [r7, #8]
 801e592:	f003 0308 	and.w	r3, r3, #8
 801e596:	2b00      	cmp	r3, #0
 801e598:	d020      	beq.n	801e5dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	f003 0308 	and.w	r3, r3, #8
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d01b      	beq.n	801e5dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	f06f 0208 	mvn.w	r2, #8
 801e5ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	2204      	movs	r2, #4
 801e5b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	69db      	ldr	r3, [r3, #28]
 801e5ba:	f003 0303 	and.w	r3, r3, #3
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d003      	beq.n	801e5ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e5c2:	6878      	ldr	r0, [r7, #4]
 801e5c4:	f000 fa85 	bl	801ead2 <HAL_TIM_IC_CaptureCallback>
 801e5c8:	e005      	b.n	801e5d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e5ca:	6878      	ldr	r0, [r7, #4]
 801e5cc:	f000 fa77 	bl	801eabe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5d0:	6878      	ldr	r0, [r7, #4]
 801e5d2:	f000 fa88 	bl	801eae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	2200      	movs	r2, #0
 801e5da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801e5dc:	68bb      	ldr	r3, [r7, #8]
 801e5de:	f003 0310 	and.w	r3, r3, #16
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d020      	beq.n	801e628 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	f003 0310 	and.w	r3, r3, #16
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d01b      	beq.n	801e628 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	f06f 0210 	mvn.w	r2, #16
 801e5f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	2208      	movs	r2, #8
 801e5fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	69db      	ldr	r3, [r3, #28]
 801e606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d003      	beq.n	801e616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e60e:	6878      	ldr	r0, [r7, #4]
 801e610:	f000 fa5f 	bl	801ead2 <HAL_TIM_IC_CaptureCallback>
 801e614:	e005      	b.n	801e622 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e616:	6878      	ldr	r0, [r7, #4]
 801e618:	f000 fa51 	bl	801eabe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e61c:	6878      	ldr	r0, [r7, #4]
 801e61e:	f000 fa62 	bl	801eae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	2200      	movs	r2, #0
 801e626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801e628:	68bb      	ldr	r3, [r7, #8]
 801e62a:	f003 0301 	and.w	r3, r3, #1
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d00c      	beq.n	801e64c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	f003 0301 	and.w	r3, r3, #1
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d007      	beq.n	801e64c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	f06f 0201 	mvn.w	r2, #1
 801e644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e646:	6878      	ldr	r0, [r7, #4]
 801e648:	f000 fa2f 	bl	801eaaa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e652:	2b00      	cmp	r3, #0
 801e654:	d104      	bne.n	801e660 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801e656:	68bb      	ldr	r3, [r7, #8]
 801e658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d00c      	beq.n	801e67a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e666:	2b00      	cmp	r3, #0
 801e668:	d007      	beq.n	801e67a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801e672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e674:	6878      	ldr	r0, [r7, #4]
 801e676:	f000 fee1 	bl	801f43c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801e67a:	68bb      	ldr	r3, [r7, #8]
 801e67c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e680:	2b00      	cmp	r3, #0
 801e682:	d00c      	beq.n	801e69e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d007      	beq.n	801e69e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801e696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e698:	6878      	ldr	r0, [r7, #4]
 801e69a:	f000 fed9 	bl	801f450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801e69e:	68bb      	ldr	r3, [r7, #8]
 801e6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d00c      	beq.n	801e6c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801e6a8:	68fb      	ldr	r3, [r7, #12]
 801e6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d007      	beq.n	801e6c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	681b      	ldr	r3, [r3, #0]
 801e6b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801e6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e6bc:	6878      	ldr	r0, [r7, #4]
 801e6be:	f000 fa1c 	bl	801eafa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801e6c2:	68bb      	ldr	r3, [r7, #8]
 801e6c4:	f003 0320 	and.w	r3, r3, #32
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d00c      	beq.n	801e6e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	f003 0320 	and.w	r3, r3, #32
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d007      	beq.n	801e6e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	f06f 0220 	mvn.w	r2, #32
 801e6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e6e0:	6878      	ldr	r0, [r7, #4]
 801e6e2:	f000 fea1 	bl	801f428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e6e6:	bf00      	nop
 801e6e8:	3710      	adds	r7, #16
 801e6ea:	46bd      	mov	sp, r7
 801e6ec:	bd80      	pop	{r7, pc}
	...

0801e6f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e6f0:	b580      	push	{r7, lr}
 801e6f2:	b086      	sub	sp, #24
 801e6f4:	af00      	add	r7, sp, #0
 801e6f6:	60f8      	str	r0, [r7, #12]
 801e6f8:	60b9      	str	r1, [r7, #8]
 801e6fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e6fc:	2300      	movs	r3, #0
 801e6fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801e706:	2b01      	cmp	r3, #1
 801e708:	d101      	bne.n	801e70e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e70a:	2302      	movs	r3, #2
 801e70c:	e0ff      	b.n	801e90e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e70e:	68fb      	ldr	r3, [r7, #12]
 801e710:	2201      	movs	r2, #1
 801e712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	2b14      	cmp	r3, #20
 801e71a:	f200 80f0 	bhi.w	801e8fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e71e:	a201      	add	r2, pc, #4	@ (adr r2, 801e724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e724:	0801e779 	.word	0x0801e779
 801e728:	0801e8ff 	.word	0x0801e8ff
 801e72c:	0801e8ff 	.word	0x0801e8ff
 801e730:	0801e8ff 	.word	0x0801e8ff
 801e734:	0801e7b9 	.word	0x0801e7b9
 801e738:	0801e8ff 	.word	0x0801e8ff
 801e73c:	0801e8ff 	.word	0x0801e8ff
 801e740:	0801e8ff 	.word	0x0801e8ff
 801e744:	0801e7fb 	.word	0x0801e7fb
 801e748:	0801e8ff 	.word	0x0801e8ff
 801e74c:	0801e8ff 	.word	0x0801e8ff
 801e750:	0801e8ff 	.word	0x0801e8ff
 801e754:	0801e83b 	.word	0x0801e83b
 801e758:	0801e8ff 	.word	0x0801e8ff
 801e75c:	0801e8ff 	.word	0x0801e8ff
 801e760:	0801e8ff 	.word	0x0801e8ff
 801e764:	0801e87d 	.word	0x0801e87d
 801e768:	0801e8ff 	.word	0x0801e8ff
 801e76c:	0801e8ff 	.word	0x0801e8ff
 801e770:	0801e8ff 	.word	0x0801e8ff
 801e774:	0801e8bd 	.word	0x0801e8bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	68b9      	ldr	r1, [r7, #8]
 801e77e:	4618      	mov	r0, r3
 801e780:	f000 fa36 	bl	801ebf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	699a      	ldr	r2, [r3, #24]
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	f042 0208 	orr.w	r2, r2, #8
 801e792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	699a      	ldr	r2, [r3, #24]
 801e79a:	68fb      	ldr	r3, [r7, #12]
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	f022 0204 	bic.w	r2, r2, #4
 801e7a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e7a4:	68fb      	ldr	r3, [r7, #12]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	6999      	ldr	r1, [r3, #24]
 801e7aa:	68bb      	ldr	r3, [r7, #8]
 801e7ac:	691a      	ldr	r2, [r3, #16]
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	430a      	orrs	r2, r1
 801e7b4:	619a      	str	r2, [r3, #24]
      break;
 801e7b6:	e0a5      	b.n	801e904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	68b9      	ldr	r1, [r7, #8]
 801e7be:	4618      	mov	r0, r3
 801e7c0:	f000 fa92 	bl	801ece8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	699a      	ldr	r2, [r3, #24]
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e7d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	699a      	ldr	r2, [r3, #24]
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801e7e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e7e4:	68fb      	ldr	r3, [r7, #12]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	6999      	ldr	r1, [r3, #24]
 801e7ea:	68bb      	ldr	r3, [r7, #8]
 801e7ec:	691b      	ldr	r3, [r3, #16]
 801e7ee:	021a      	lsls	r2, r3, #8
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	430a      	orrs	r2, r1
 801e7f6:	619a      	str	r2, [r3, #24]
      break;
 801e7f8:	e084      	b.n	801e904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	68b9      	ldr	r1, [r7, #8]
 801e800:	4618      	mov	r0, r3
 801e802:	f000 faeb 	bl	801eddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e806:	68fb      	ldr	r3, [r7, #12]
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	69da      	ldr	r2, [r3, #28]
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	f042 0208 	orr.w	r2, r2, #8
 801e814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	69da      	ldr	r2, [r3, #28]
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	f022 0204 	bic.w	r2, r2, #4
 801e824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	69d9      	ldr	r1, [r3, #28]
 801e82c:	68bb      	ldr	r3, [r7, #8]
 801e82e:	691a      	ldr	r2, [r3, #16]
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	430a      	orrs	r2, r1
 801e836:	61da      	str	r2, [r3, #28]
      break;
 801e838:	e064      	b.n	801e904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	68b9      	ldr	r1, [r7, #8]
 801e840:	4618      	mov	r0, r3
 801e842:	f000 fb43 	bl	801eecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e846:	68fb      	ldr	r3, [r7, #12]
 801e848:	681b      	ldr	r3, [r3, #0]
 801e84a:	69da      	ldr	r2, [r3, #28]
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	681b      	ldr	r3, [r3, #0]
 801e85a:	69da      	ldr	r2, [r3, #28]
 801e85c:	68fb      	ldr	r3, [r7, #12]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801e864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e866:	68fb      	ldr	r3, [r7, #12]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	69d9      	ldr	r1, [r3, #28]
 801e86c:	68bb      	ldr	r3, [r7, #8]
 801e86e:	691b      	ldr	r3, [r3, #16]
 801e870:	021a      	lsls	r2, r3, #8
 801e872:	68fb      	ldr	r3, [r7, #12]
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	430a      	orrs	r2, r1
 801e878:	61da      	str	r2, [r3, #28]
      break;
 801e87a:	e043      	b.n	801e904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	68b9      	ldr	r1, [r7, #8]
 801e882:	4618      	mov	r0, r3
 801e884:	f000 fb80 	bl	801ef88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e88e:	68fb      	ldr	r3, [r7, #12]
 801e890:	681b      	ldr	r3, [r3, #0]
 801e892:	f042 0208 	orr.w	r2, r2, #8
 801e896:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e89e:	68fb      	ldr	r3, [r7, #12]
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	f022 0204 	bic.w	r2, r2, #4
 801e8a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e8a8:	68fb      	ldr	r3, [r7, #12]
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801e8ae:	68bb      	ldr	r3, [r7, #8]
 801e8b0:	691a      	ldr	r2, [r3, #16]
 801e8b2:	68fb      	ldr	r3, [r7, #12]
 801e8b4:	681b      	ldr	r3, [r3, #0]
 801e8b6:	430a      	orrs	r2, r1
 801e8b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801e8ba:	e023      	b.n	801e904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e8bc:	68fb      	ldr	r3, [r7, #12]
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	68b9      	ldr	r1, [r7, #8]
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	f000 fbb8 	bl	801f038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e8d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801e8e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801e8ee:	68bb      	ldr	r3, [r7, #8]
 801e8f0:	691b      	ldr	r3, [r3, #16]
 801e8f2:	021a      	lsls	r2, r3, #8
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	430a      	orrs	r2, r1
 801e8fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801e8fc:	e002      	b.n	801e904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801e8fe:	2301      	movs	r3, #1
 801e900:	75fb      	strb	r3, [r7, #23]
      break;
 801e902:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	2200      	movs	r2, #0
 801e908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801e90c:	7dfb      	ldrb	r3, [r7, #23]
}
 801e90e:	4618      	mov	r0, r3
 801e910:	3718      	adds	r7, #24
 801e912:	46bd      	mov	sp, r7
 801e914:	bd80      	pop	{r7, pc}
 801e916:	bf00      	nop

0801e918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801e918:	b580      	push	{r7, lr}
 801e91a:	b084      	sub	sp, #16
 801e91c:	af00      	add	r7, sp, #0
 801e91e:	6078      	str	r0, [r7, #4]
 801e920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801e922:	2300      	movs	r3, #0
 801e924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801e92c:	2b01      	cmp	r3, #1
 801e92e:	d101      	bne.n	801e934 <HAL_TIM_ConfigClockSource+0x1c>
 801e930:	2302      	movs	r3, #2
 801e932:	e0b6      	b.n	801eaa2 <HAL_TIM_ConfigClockSource+0x18a>
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	2201      	movs	r2, #1
 801e938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	2202      	movs	r2, #2
 801e940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	689b      	ldr	r3, [r3, #8]
 801e94a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801e94c:	68bb      	ldr	r3, [r7, #8]
 801e94e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e952:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801e956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801e958:	68bb      	ldr	r3, [r7, #8]
 801e95a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801e95e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	68ba      	ldr	r2, [r7, #8]
 801e966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801e968:	683b      	ldr	r3, [r7, #0]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e970:	d03e      	beq.n	801e9f0 <HAL_TIM_ConfigClockSource+0xd8>
 801e972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e976:	f200 8087 	bhi.w	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e97a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e97e:	f000 8086 	beq.w	801ea8e <HAL_TIM_ConfigClockSource+0x176>
 801e982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e986:	d87f      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e988:	2b70      	cmp	r3, #112	@ 0x70
 801e98a:	d01a      	beq.n	801e9c2 <HAL_TIM_ConfigClockSource+0xaa>
 801e98c:	2b70      	cmp	r3, #112	@ 0x70
 801e98e:	d87b      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e990:	2b60      	cmp	r3, #96	@ 0x60
 801e992:	d050      	beq.n	801ea36 <HAL_TIM_ConfigClockSource+0x11e>
 801e994:	2b60      	cmp	r3, #96	@ 0x60
 801e996:	d877      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e998:	2b50      	cmp	r3, #80	@ 0x50
 801e99a:	d03c      	beq.n	801ea16 <HAL_TIM_ConfigClockSource+0xfe>
 801e99c:	2b50      	cmp	r3, #80	@ 0x50
 801e99e:	d873      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e9a0:	2b40      	cmp	r3, #64	@ 0x40
 801e9a2:	d058      	beq.n	801ea56 <HAL_TIM_ConfigClockSource+0x13e>
 801e9a4:	2b40      	cmp	r3, #64	@ 0x40
 801e9a6:	d86f      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e9a8:	2b30      	cmp	r3, #48	@ 0x30
 801e9aa:	d064      	beq.n	801ea76 <HAL_TIM_ConfigClockSource+0x15e>
 801e9ac:	2b30      	cmp	r3, #48	@ 0x30
 801e9ae:	d86b      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e9b0:	2b20      	cmp	r3, #32
 801e9b2:	d060      	beq.n	801ea76 <HAL_TIM_ConfigClockSource+0x15e>
 801e9b4:	2b20      	cmp	r3, #32
 801e9b6:	d867      	bhi.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d05c      	beq.n	801ea76 <HAL_TIM_ConfigClockSource+0x15e>
 801e9bc:	2b10      	cmp	r3, #16
 801e9be:	d05a      	beq.n	801ea76 <HAL_TIM_ConfigClockSource+0x15e>
 801e9c0:	e062      	b.n	801ea88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801e9c6:	683b      	ldr	r3, [r7, #0]
 801e9c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801e9ca:	683b      	ldr	r3, [r7, #0]
 801e9cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801e9ce:	683b      	ldr	r3, [r7, #0]
 801e9d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801e9d2:	f000 fc05 	bl	801f1e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	689b      	ldr	r3, [r3, #8]
 801e9dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801e9de:	68bb      	ldr	r3, [r7, #8]
 801e9e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801e9e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	68ba      	ldr	r2, [r7, #8]
 801e9ec:	609a      	str	r2, [r3, #8]
      break;
 801e9ee:	e04f      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801e9f4:	683b      	ldr	r3, [r7, #0]
 801e9f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801e9f8:	683b      	ldr	r3, [r7, #0]
 801e9fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801e9fc:	683b      	ldr	r3, [r7, #0]
 801e9fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801ea00:	f000 fbee 	bl	801f1e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	689a      	ldr	r2, [r3, #8]
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801ea12:	609a      	str	r2, [r3, #8]
      break;
 801ea14:	e03c      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ea1a:	683b      	ldr	r3, [r7, #0]
 801ea1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ea1e:	683b      	ldr	r3, [r7, #0]
 801ea20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ea22:	461a      	mov	r2, r3
 801ea24:	f000 fb62 	bl	801f0ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	2150      	movs	r1, #80	@ 0x50
 801ea2e:	4618      	mov	r0, r3
 801ea30:	f000 fbbb 	bl	801f1aa <TIM_ITRx_SetConfig>
      break;
 801ea34:	e02c      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ea3a:	683b      	ldr	r3, [r7, #0]
 801ea3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801ea42:	461a      	mov	r2, r3
 801ea44:	f000 fb81 	bl	801f14a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	2160      	movs	r1, #96	@ 0x60
 801ea4e:	4618      	mov	r0, r3
 801ea50:	f000 fbab 	bl	801f1aa <TIM_ITRx_SetConfig>
      break;
 801ea54:	e01c      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ea5a:	683b      	ldr	r3, [r7, #0]
 801ea5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ea5e:	683b      	ldr	r3, [r7, #0]
 801ea60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ea62:	461a      	mov	r2, r3
 801ea64:	f000 fb42 	bl	801f0ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	2140      	movs	r1, #64	@ 0x40
 801ea6e:	4618      	mov	r0, r3
 801ea70:	f000 fb9b 	bl	801f1aa <TIM_ITRx_SetConfig>
      break;
 801ea74:	e00c      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	681a      	ldr	r2, [r3, #0]
 801ea7a:	683b      	ldr	r3, [r7, #0]
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	4619      	mov	r1, r3
 801ea80:	4610      	mov	r0, r2
 801ea82:	f000 fb92 	bl	801f1aa <TIM_ITRx_SetConfig>
      break;
 801ea86:	e003      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801ea88:	2301      	movs	r3, #1
 801ea8a:	73fb      	strb	r3, [r7, #15]
      break;
 801ea8c:	e000      	b.n	801ea90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801ea8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	2201      	movs	r2, #1
 801ea94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	3710      	adds	r7, #16
 801eaa6:	46bd      	mov	sp, r7
 801eaa8:	bd80      	pop	{r7, pc}

0801eaaa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801eaaa:	b480      	push	{r7}
 801eaac:	b083      	sub	sp, #12
 801eaae:	af00      	add	r7, sp, #0
 801eab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801eab2:	bf00      	nop
 801eab4:	370c      	adds	r7, #12
 801eab6:	46bd      	mov	sp, r7
 801eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eabc:	4770      	bx	lr

0801eabe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801eabe:	b480      	push	{r7}
 801eac0:	b083      	sub	sp, #12
 801eac2:	af00      	add	r7, sp, #0
 801eac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801eac6:	bf00      	nop
 801eac8:	370c      	adds	r7, #12
 801eaca:	46bd      	mov	sp, r7
 801eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ead0:	4770      	bx	lr

0801ead2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801ead2:	b480      	push	{r7}
 801ead4:	b083      	sub	sp, #12
 801ead6:	af00      	add	r7, sp, #0
 801ead8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801eada:	bf00      	nop
 801eadc:	370c      	adds	r7, #12
 801eade:	46bd      	mov	sp, r7
 801eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eae4:	4770      	bx	lr

0801eae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801eae6:	b480      	push	{r7}
 801eae8:	b083      	sub	sp, #12
 801eaea:	af00      	add	r7, sp, #0
 801eaec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801eaee:	bf00      	nop
 801eaf0:	370c      	adds	r7, #12
 801eaf2:	46bd      	mov	sp, r7
 801eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaf8:	4770      	bx	lr

0801eafa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801eafa:	b480      	push	{r7}
 801eafc:	b083      	sub	sp, #12
 801eafe:	af00      	add	r7, sp, #0
 801eb00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801eb02:	bf00      	nop
 801eb04:	370c      	adds	r7, #12
 801eb06:	46bd      	mov	sp, r7
 801eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb0c:	4770      	bx	lr
	...

0801eb10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801eb10:	b480      	push	{r7}
 801eb12:	b085      	sub	sp, #20
 801eb14:	af00      	add	r7, sp, #0
 801eb16:	6078      	str	r0, [r7, #4]
 801eb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	4a30      	ldr	r2, [pc, #192]	@ (801ebe4 <TIM_Base_SetConfig+0xd4>)
 801eb24:	4293      	cmp	r3, r2
 801eb26:	d003      	beq.n	801eb30 <TIM_Base_SetConfig+0x20>
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb2e:	d108      	bne.n	801eb42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801eb36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801eb38:	683b      	ldr	r3, [r7, #0]
 801eb3a:	685b      	ldr	r3, [r3, #4]
 801eb3c:	68fa      	ldr	r2, [r7, #12]
 801eb3e:	4313      	orrs	r3, r2
 801eb40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	4a27      	ldr	r2, [pc, #156]	@ (801ebe4 <TIM_Base_SetConfig+0xd4>)
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d00b      	beq.n	801eb62 <TIM_Base_SetConfig+0x52>
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb50:	d007      	beq.n	801eb62 <TIM_Base_SetConfig+0x52>
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	4a24      	ldr	r2, [pc, #144]	@ (801ebe8 <TIM_Base_SetConfig+0xd8>)
 801eb56:	4293      	cmp	r3, r2
 801eb58:	d003      	beq.n	801eb62 <TIM_Base_SetConfig+0x52>
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	4a23      	ldr	r2, [pc, #140]	@ (801ebec <TIM_Base_SetConfig+0xdc>)
 801eb5e:	4293      	cmp	r3, r2
 801eb60:	d108      	bne.n	801eb74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801eb62:	68fb      	ldr	r3, [r7, #12]
 801eb64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801eb68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801eb6a:	683b      	ldr	r3, [r7, #0]
 801eb6c:	68db      	ldr	r3, [r3, #12]
 801eb6e:	68fa      	ldr	r2, [r7, #12]
 801eb70:	4313      	orrs	r3, r2
 801eb72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801eb7a:	683b      	ldr	r3, [r7, #0]
 801eb7c:	695b      	ldr	r3, [r3, #20]
 801eb7e:	4313      	orrs	r3, r2
 801eb80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	68fa      	ldr	r2, [r7, #12]
 801eb86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801eb88:	683b      	ldr	r3, [r7, #0]
 801eb8a:	689a      	ldr	r2, [r3, #8]
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801eb90:	683b      	ldr	r3, [r7, #0]
 801eb92:	681a      	ldr	r2, [r3, #0]
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	4a12      	ldr	r2, [pc, #72]	@ (801ebe4 <TIM_Base_SetConfig+0xd4>)
 801eb9c:	4293      	cmp	r3, r2
 801eb9e:	d007      	beq.n	801ebb0 <TIM_Base_SetConfig+0xa0>
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	4a11      	ldr	r2, [pc, #68]	@ (801ebe8 <TIM_Base_SetConfig+0xd8>)
 801eba4:	4293      	cmp	r3, r2
 801eba6:	d003      	beq.n	801ebb0 <TIM_Base_SetConfig+0xa0>
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	4a10      	ldr	r2, [pc, #64]	@ (801ebec <TIM_Base_SetConfig+0xdc>)
 801ebac:	4293      	cmp	r3, r2
 801ebae:	d103      	bne.n	801ebb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801ebb0:	683b      	ldr	r3, [r7, #0]
 801ebb2:	691a      	ldr	r2, [r3, #16]
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	2201      	movs	r2, #1
 801ebbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	691b      	ldr	r3, [r3, #16]
 801ebc2:	f003 0301 	and.w	r3, r3, #1
 801ebc6:	2b01      	cmp	r3, #1
 801ebc8:	d105      	bne.n	801ebd6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	691b      	ldr	r3, [r3, #16]
 801ebce:	f023 0201 	bic.w	r2, r3, #1
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	611a      	str	r2, [r3, #16]
  }
}
 801ebd6:	bf00      	nop
 801ebd8:	3714      	adds	r7, #20
 801ebda:	46bd      	mov	sp, r7
 801ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebe0:	4770      	bx	lr
 801ebe2:	bf00      	nop
 801ebe4:	40012c00 	.word	0x40012c00
 801ebe8:	40014000 	.word	0x40014000
 801ebec:	40014400 	.word	0x40014400

0801ebf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ebf0:	b480      	push	{r7}
 801ebf2:	b087      	sub	sp, #28
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	6078      	str	r0, [r7, #4]
 801ebf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	6a1b      	ldr	r3, [r3, #32]
 801ebfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	6a1b      	ldr	r3, [r3, #32]
 801ec04:	f023 0201 	bic.w	r2, r3, #1
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	685b      	ldr	r3, [r3, #4]
 801ec10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	699b      	ldr	r3, [r3, #24]
 801ec16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ec1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ec22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	f023 0303 	bic.w	r3, r3, #3
 801ec2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ec2c:	683b      	ldr	r3, [r7, #0]
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	68fa      	ldr	r2, [r7, #12]
 801ec32:	4313      	orrs	r3, r2
 801ec34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ec36:	697b      	ldr	r3, [r7, #20]
 801ec38:	f023 0302 	bic.w	r3, r3, #2
 801ec3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ec3e:	683b      	ldr	r3, [r7, #0]
 801ec40:	689b      	ldr	r3, [r3, #8]
 801ec42:	697a      	ldr	r2, [r7, #20]
 801ec44:	4313      	orrs	r3, r2
 801ec46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	4a24      	ldr	r2, [pc, #144]	@ (801ecdc <TIM_OC1_SetConfig+0xec>)
 801ec4c:	4293      	cmp	r3, r2
 801ec4e:	d007      	beq.n	801ec60 <TIM_OC1_SetConfig+0x70>
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	4a23      	ldr	r2, [pc, #140]	@ (801ece0 <TIM_OC1_SetConfig+0xf0>)
 801ec54:	4293      	cmp	r3, r2
 801ec56:	d003      	beq.n	801ec60 <TIM_OC1_SetConfig+0x70>
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	4a22      	ldr	r2, [pc, #136]	@ (801ece4 <TIM_OC1_SetConfig+0xf4>)
 801ec5c:	4293      	cmp	r3, r2
 801ec5e:	d10c      	bne.n	801ec7a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ec60:	697b      	ldr	r3, [r7, #20]
 801ec62:	f023 0308 	bic.w	r3, r3, #8
 801ec66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ec68:	683b      	ldr	r3, [r7, #0]
 801ec6a:	68db      	ldr	r3, [r3, #12]
 801ec6c:	697a      	ldr	r2, [r7, #20]
 801ec6e:	4313      	orrs	r3, r2
 801ec70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ec72:	697b      	ldr	r3, [r7, #20]
 801ec74:	f023 0304 	bic.w	r3, r3, #4
 801ec78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	4a17      	ldr	r2, [pc, #92]	@ (801ecdc <TIM_OC1_SetConfig+0xec>)
 801ec7e:	4293      	cmp	r3, r2
 801ec80:	d007      	beq.n	801ec92 <TIM_OC1_SetConfig+0xa2>
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	4a16      	ldr	r2, [pc, #88]	@ (801ece0 <TIM_OC1_SetConfig+0xf0>)
 801ec86:	4293      	cmp	r3, r2
 801ec88:	d003      	beq.n	801ec92 <TIM_OC1_SetConfig+0xa2>
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	4a15      	ldr	r2, [pc, #84]	@ (801ece4 <TIM_OC1_SetConfig+0xf4>)
 801ec8e:	4293      	cmp	r3, r2
 801ec90:	d111      	bne.n	801ecb6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ec92:	693b      	ldr	r3, [r7, #16]
 801ec94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ec98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ec9a:	693b      	ldr	r3, [r7, #16]
 801ec9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801eca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801eca2:	683b      	ldr	r3, [r7, #0]
 801eca4:	695b      	ldr	r3, [r3, #20]
 801eca6:	693a      	ldr	r2, [r7, #16]
 801eca8:	4313      	orrs	r3, r2
 801ecaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ecac:	683b      	ldr	r3, [r7, #0]
 801ecae:	699b      	ldr	r3, [r3, #24]
 801ecb0:	693a      	ldr	r2, [r7, #16]
 801ecb2:	4313      	orrs	r3, r2
 801ecb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	693a      	ldr	r2, [r7, #16]
 801ecba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	68fa      	ldr	r2, [r7, #12]
 801ecc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ecc2:	683b      	ldr	r3, [r7, #0]
 801ecc4:	685a      	ldr	r2, [r3, #4]
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	697a      	ldr	r2, [r7, #20]
 801ecce:	621a      	str	r2, [r3, #32]
}
 801ecd0:	bf00      	nop
 801ecd2:	371c      	adds	r7, #28
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecda:	4770      	bx	lr
 801ecdc:	40012c00 	.word	0x40012c00
 801ece0:	40014000 	.word	0x40014000
 801ece4:	40014400 	.word	0x40014400

0801ece8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ece8:	b480      	push	{r7}
 801ecea:	b087      	sub	sp, #28
 801ecec:	af00      	add	r7, sp, #0
 801ecee:	6078      	str	r0, [r7, #4]
 801ecf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	6a1b      	ldr	r3, [r3, #32]
 801ecf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	6a1b      	ldr	r3, [r3, #32]
 801ecfc:	f023 0210 	bic.w	r2, r3, #16
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	685b      	ldr	r3, [r3, #4]
 801ed08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	699b      	ldr	r3, [r3, #24]
 801ed0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801ed16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801ed1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ed22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ed24:	683b      	ldr	r3, [r7, #0]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	021b      	lsls	r3, r3, #8
 801ed2a:	68fa      	ldr	r2, [r7, #12]
 801ed2c:	4313      	orrs	r3, r2
 801ed2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ed30:	697b      	ldr	r3, [r7, #20]
 801ed32:	f023 0320 	bic.w	r3, r3, #32
 801ed36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ed38:	683b      	ldr	r3, [r7, #0]
 801ed3a:	689b      	ldr	r3, [r3, #8]
 801ed3c:	011b      	lsls	r3, r3, #4
 801ed3e:	697a      	ldr	r2, [r7, #20]
 801ed40:	4313      	orrs	r3, r2
 801ed42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	4a22      	ldr	r2, [pc, #136]	@ (801edd0 <TIM_OC2_SetConfig+0xe8>)
 801ed48:	4293      	cmp	r3, r2
 801ed4a:	d10d      	bne.n	801ed68 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ed4c:	697b      	ldr	r3, [r7, #20]
 801ed4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ed52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ed54:	683b      	ldr	r3, [r7, #0]
 801ed56:	68db      	ldr	r3, [r3, #12]
 801ed58:	011b      	lsls	r3, r3, #4
 801ed5a:	697a      	ldr	r2, [r7, #20]
 801ed5c:	4313      	orrs	r3, r2
 801ed5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ed60:	697b      	ldr	r3, [r7, #20]
 801ed62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801ed66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	4a19      	ldr	r2, [pc, #100]	@ (801edd0 <TIM_OC2_SetConfig+0xe8>)
 801ed6c:	4293      	cmp	r3, r2
 801ed6e:	d007      	beq.n	801ed80 <TIM_OC2_SetConfig+0x98>
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	4a18      	ldr	r2, [pc, #96]	@ (801edd4 <TIM_OC2_SetConfig+0xec>)
 801ed74:	4293      	cmp	r3, r2
 801ed76:	d003      	beq.n	801ed80 <TIM_OC2_SetConfig+0x98>
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	4a17      	ldr	r2, [pc, #92]	@ (801edd8 <TIM_OC2_SetConfig+0xf0>)
 801ed7c:	4293      	cmp	r3, r2
 801ed7e:	d113      	bne.n	801eda8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ed80:	693b      	ldr	r3, [r7, #16]
 801ed82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801ed86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ed88:	693b      	ldr	r3, [r7, #16]
 801ed8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ed8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ed90:	683b      	ldr	r3, [r7, #0]
 801ed92:	695b      	ldr	r3, [r3, #20]
 801ed94:	009b      	lsls	r3, r3, #2
 801ed96:	693a      	ldr	r2, [r7, #16]
 801ed98:	4313      	orrs	r3, r2
 801ed9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ed9c:	683b      	ldr	r3, [r7, #0]
 801ed9e:	699b      	ldr	r3, [r3, #24]
 801eda0:	009b      	lsls	r3, r3, #2
 801eda2:	693a      	ldr	r2, [r7, #16]
 801eda4:	4313      	orrs	r3, r2
 801eda6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	693a      	ldr	r2, [r7, #16]
 801edac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	68fa      	ldr	r2, [r7, #12]
 801edb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801edb4:	683b      	ldr	r3, [r7, #0]
 801edb6:	685a      	ldr	r2, [r3, #4]
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	697a      	ldr	r2, [r7, #20]
 801edc0:	621a      	str	r2, [r3, #32]
}
 801edc2:	bf00      	nop
 801edc4:	371c      	adds	r7, #28
 801edc6:	46bd      	mov	sp, r7
 801edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edcc:	4770      	bx	lr
 801edce:	bf00      	nop
 801edd0:	40012c00 	.word	0x40012c00
 801edd4:	40014000 	.word	0x40014000
 801edd8:	40014400 	.word	0x40014400

0801eddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801eddc:	b480      	push	{r7}
 801edde:	b087      	sub	sp, #28
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6078      	str	r0, [r7, #4]
 801ede4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	6a1b      	ldr	r3, [r3, #32]
 801edea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	6a1b      	ldr	r3, [r3, #32]
 801edf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	685b      	ldr	r3, [r3, #4]
 801edfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	69db      	ldr	r3, [r3, #28]
 801ee02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ee04:	68fb      	ldr	r3, [r7, #12]
 801ee06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ee0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ee0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	f023 0303 	bic.w	r3, r3, #3
 801ee16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ee18:	683b      	ldr	r3, [r7, #0]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	68fa      	ldr	r2, [r7, #12]
 801ee1e:	4313      	orrs	r3, r2
 801ee20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ee22:	697b      	ldr	r3, [r7, #20]
 801ee24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801ee28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	689b      	ldr	r3, [r3, #8]
 801ee2e:	021b      	lsls	r3, r3, #8
 801ee30:	697a      	ldr	r2, [r7, #20]
 801ee32:	4313      	orrs	r3, r2
 801ee34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	4a21      	ldr	r2, [pc, #132]	@ (801eec0 <TIM_OC3_SetConfig+0xe4>)
 801ee3a:	4293      	cmp	r3, r2
 801ee3c:	d10d      	bne.n	801ee5a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ee3e:	697b      	ldr	r3, [r7, #20]
 801ee40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ee44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ee46:	683b      	ldr	r3, [r7, #0]
 801ee48:	68db      	ldr	r3, [r3, #12]
 801ee4a:	021b      	lsls	r3, r3, #8
 801ee4c:	697a      	ldr	r2, [r7, #20]
 801ee4e:	4313      	orrs	r3, r2
 801ee50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ee52:	697b      	ldr	r3, [r7, #20]
 801ee54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801ee58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	4a18      	ldr	r2, [pc, #96]	@ (801eec0 <TIM_OC3_SetConfig+0xe4>)
 801ee5e:	4293      	cmp	r3, r2
 801ee60:	d007      	beq.n	801ee72 <TIM_OC3_SetConfig+0x96>
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	4a17      	ldr	r2, [pc, #92]	@ (801eec4 <TIM_OC3_SetConfig+0xe8>)
 801ee66:	4293      	cmp	r3, r2
 801ee68:	d003      	beq.n	801ee72 <TIM_OC3_SetConfig+0x96>
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	4a16      	ldr	r2, [pc, #88]	@ (801eec8 <TIM_OC3_SetConfig+0xec>)
 801ee6e:	4293      	cmp	r3, r2
 801ee70:	d113      	bne.n	801ee9a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ee72:	693b      	ldr	r3, [r7, #16]
 801ee74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ee78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ee7a:	693b      	ldr	r3, [r7, #16]
 801ee7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ee80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ee82:	683b      	ldr	r3, [r7, #0]
 801ee84:	695b      	ldr	r3, [r3, #20]
 801ee86:	011b      	lsls	r3, r3, #4
 801ee88:	693a      	ldr	r2, [r7, #16]
 801ee8a:	4313      	orrs	r3, r2
 801ee8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ee8e:	683b      	ldr	r3, [r7, #0]
 801ee90:	699b      	ldr	r3, [r3, #24]
 801ee92:	011b      	lsls	r3, r3, #4
 801ee94:	693a      	ldr	r2, [r7, #16]
 801ee96:	4313      	orrs	r3, r2
 801ee98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	693a      	ldr	r2, [r7, #16]
 801ee9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	68fa      	ldr	r2, [r7, #12]
 801eea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	685a      	ldr	r2, [r3, #4]
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	697a      	ldr	r2, [r7, #20]
 801eeb2:	621a      	str	r2, [r3, #32]
}
 801eeb4:	bf00      	nop
 801eeb6:	371c      	adds	r7, #28
 801eeb8:	46bd      	mov	sp, r7
 801eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eebe:	4770      	bx	lr
 801eec0:	40012c00 	.word	0x40012c00
 801eec4:	40014000 	.word	0x40014000
 801eec8:	40014400 	.word	0x40014400

0801eecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801eecc:	b480      	push	{r7}
 801eece:	b087      	sub	sp, #28
 801eed0:	af00      	add	r7, sp, #0
 801eed2:	6078      	str	r0, [r7, #4]
 801eed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	6a1b      	ldr	r3, [r3, #32]
 801eeda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	6a1b      	ldr	r3, [r3, #32]
 801eee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	685b      	ldr	r3, [r3, #4]
 801eeec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	69db      	ldr	r3, [r3, #28]
 801eef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801eef4:	68fb      	ldr	r3, [r7, #12]
 801eef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801eefa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801eefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ef06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ef08:	683b      	ldr	r3, [r7, #0]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	021b      	lsls	r3, r3, #8
 801ef0e:	68fa      	ldr	r2, [r7, #12]
 801ef10:	4313      	orrs	r3, r2
 801ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ef14:	693b      	ldr	r3, [r7, #16]
 801ef16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ef1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ef1c:	683b      	ldr	r3, [r7, #0]
 801ef1e:	689b      	ldr	r3, [r3, #8]
 801ef20:	031b      	lsls	r3, r3, #12
 801ef22:	693a      	ldr	r2, [r7, #16]
 801ef24:	4313      	orrs	r3, r2
 801ef26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	4a14      	ldr	r2, [pc, #80]	@ (801ef7c <TIM_OC4_SetConfig+0xb0>)
 801ef2c:	4293      	cmp	r3, r2
 801ef2e:	d007      	beq.n	801ef40 <TIM_OC4_SetConfig+0x74>
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	4a13      	ldr	r2, [pc, #76]	@ (801ef80 <TIM_OC4_SetConfig+0xb4>)
 801ef34:	4293      	cmp	r3, r2
 801ef36:	d003      	beq.n	801ef40 <TIM_OC4_SetConfig+0x74>
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	4a12      	ldr	r2, [pc, #72]	@ (801ef84 <TIM_OC4_SetConfig+0xb8>)
 801ef3c:	4293      	cmp	r3, r2
 801ef3e:	d109      	bne.n	801ef54 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ef40:	697b      	ldr	r3, [r7, #20]
 801ef42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801ef46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801ef48:	683b      	ldr	r3, [r7, #0]
 801ef4a:	695b      	ldr	r3, [r3, #20]
 801ef4c:	019b      	lsls	r3, r3, #6
 801ef4e:	697a      	ldr	r2, [r7, #20]
 801ef50:	4313      	orrs	r3, r2
 801ef52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	697a      	ldr	r2, [r7, #20]
 801ef58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	68fa      	ldr	r2, [r7, #12]
 801ef5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ef60:	683b      	ldr	r3, [r7, #0]
 801ef62:	685a      	ldr	r2, [r3, #4]
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	693a      	ldr	r2, [r7, #16]
 801ef6c:	621a      	str	r2, [r3, #32]
}
 801ef6e:	bf00      	nop
 801ef70:	371c      	adds	r7, #28
 801ef72:	46bd      	mov	sp, r7
 801ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef78:	4770      	bx	lr
 801ef7a:	bf00      	nop
 801ef7c:	40012c00 	.word	0x40012c00
 801ef80:	40014000 	.word	0x40014000
 801ef84:	40014400 	.word	0x40014400

0801ef88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801ef88:	b480      	push	{r7}
 801ef8a:	b087      	sub	sp, #28
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	6078      	str	r0, [r7, #4]
 801ef90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	6a1b      	ldr	r3, [r3, #32]
 801ef96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	6a1b      	ldr	r3, [r3, #32]
 801ef9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	685b      	ldr	r3, [r3, #4]
 801efa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801efae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801efb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801efba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801efbc:	683b      	ldr	r3, [r7, #0]
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	68fa      	ldr	r2, [r7, #12]
 801efc2:	4313      	orrs	r3, r2
 801efc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801efc6:	693b      	ldr	r3, [r7, #16]
 801efc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801efcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801efce:	683b      	ldr	r3, [r7, #0]
 801efd0:	689b      	ldr	r3, [r3, #8]
 801efd2:	041b      	lsls	r3, r3, #16
 801efd4:	693a      	ldr	r2, [r7, #16]
 801efd6:	4313      	orrs	r3, r2
 801efd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	4a13      	ldr	r2, [pc, #76]	@ (801f02c <TIM_OC5_SetConfig+0xa4>)
 801efde:	4293      	cmp	r3, r2
 801efe0:	d007      	beq.n	801eff2 <TIM_OC5_SetConfig+0x6a>
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	4a12      	ldr	r2, [pc, #72]	@ (801f030 <TIM_OC5_SetConfig+0xa8>)
 801efe6:	4293      	cmp	r3, r2
 801efe8:	d003      	beq.n	801eff2 <TIM_OC5_SetConfig+0x6a>
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	4a11      	ldr	r2, [pc, #68]	@ (801f034 <TIM_OC5_SetConfig+0xac>)
 801efee:	4293      	cmp	r3, r2
 801eff0:	d109      	bne.n	801f006 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801eff2:	697b      	ldr	r3, [r7, #20]
 801eff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801eff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	695b      	ldr	r3, [r3, #20]
 801effe:	021b      	lsls	r3, r3, #8
 801f000:	697a      	ldr	r2, [r7, #20]
 801f002:	4313      	orrs	r3, r2
 801f004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	697a      	ldr	r2, [r7, #20]
 801f00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	68fa      	ldr	r2, [r7, #12]
 801f010:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801f012:	683b      	ldr	r3, [r7, #0]
 801f014:	685a      	ldr	r2, [r3, #4]
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	693a      	ldr	r2, [r7, #16]
 801f01e:	621a      	str	r2, [r3, #32]
}
 801f020:	bf00      	nop
 801f022:	371c      	adds	r7, #28
 801f024:	46bd      	mov	sp, r7
 801f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f02a:	4770      	bx	lr
 801f02c:	40012c00 	.word	0x40012c00
 801f030:	40014000 	.word	0x40014000
 801f034:	40014400 	.word	0x40014400

0801f038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801f038:	b480      	push	{r7}
 801f03a:	b087      	sub	sp, #28
 801f03c:	af00      	add	r7, sp, #0
 801f03e:	6078      	str	r0, [r7, #4]
 801f040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	6a1b      	ldr	r3, [r3, #32]
 801f046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	6a1b      	ldr	r3, [r3, #32]
 801f04c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	685b      	ldr	r3, [r3, #4]
 801f058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801f06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f06c:	683b      	ldr	r3, [r7, #0]
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	021b      	lsls	r3, r3, #8
 801f072:	68fa      	ldr	r2, [r7, #12]
 801f074:	4313      	orrs	r3, r2
 801f076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801f078:	693b      	ldr	r3, [r7, #16]
 801f07a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801f07e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801f080:	683b      	ldr	r3, [r7, #0]
 801f082:	689b      	ldr	r3, [r3, #8]
 801f084:	051b      	lsls	r3, r3, #20
 801f086:	693a      	ldr	r2, [r7, #16]
 801f088:	4313      	orrs	r3, r2
 801f08a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	4a14      	ldr	r2, [pc, #80]	@ (801f0e0 <TIM_OC6_SetConfig+0xa8>)
 801f090:	4293      	cmp	r3, r2
 801f092:	d007      	beq.n	801f0a4 <TIM_OC6_SetConfig+0x6c>
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	4a13      	ldr	r2, [pc, #76]	@ (801f0e4 <TIM_OC6_SetConfig+0xac>)
 801f098:	4293      	cmp	r3, r2
 801f09a:	d003      	beq.n	801f0a4 <TIM_OC6_SetConfig+0x6c>
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	4a12      	ldr	r2, [pc, #72]	@ (801f0e8 <TIM_OC6_SetConfig+0xb0>)
 801f0a0:	4293      	cmp	r3, r2
 801f0a2:	d109      	bne.n	801f0b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801f0a4:	697b      	ldr	r3, [r7, #20]
 801f0a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801f0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801f0ac:	683b      	ldr	r3, [r7, #0]
 801f0ae:	695b      	ldr	r3, [r3, #20]
 801f0b0:	029b      	lsls	r3, r3, #10
 801f0b2:	697a      	ldr	r2, [r7, #20]
 801f0b4:	4313      	orrs	r3, r2
 801f0b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	697a      	ldr	r2, [r7, #20]
 801f0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	68fa      	ldr	r2, [r7, #12]
 801f0c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801f0c4:	683b      	ldr	r3, [r7, #0]
 801f0c6:	685a      	ldr	r2, [r3, #4]
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	693a      	ldr	r2, [r7, #16]
 801f0d0:	621a      	str	r2, [r3, #32]
}
 801f0d2:	bf00      	nop
 801f0d4:	371c      	adds	r7, #28
 801f0d6:	46bd      	mov	sp, r7
 801f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0dc:	4770      	bx	lr
 801f0de:	bf00      	nop
 801f0e0:	40012c00 	.word	0x40012c00
 801f0e4:	40014000 	.word	0x40014000
 801f0e8:	40014400 	.word	0x40014400

0801f0ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801f0ec:	b480      	push	{r7}
 801f0ee:	b087      	sub	sp, #28
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	60f8      	str	r0, [r7, #12]
 801f0f4:	60b9      	str	r1, [r7, #8]
 801f0f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	6a1b      	ldr	r3, [r3, #32]
 801f0fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f0fe:	68fb      	ldr	r3, [r7, #12]
 801f100:	6a1b      	ldr	r3, [r3, #32]
 801f102:	f023 0201 	bic.w	r2, r3, #1
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	699b      	ldr	r3, [r3, #24]
 801f10e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801f110:	693b      	ldr	r3, [r7, #16]
 801f112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801f116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	011b      	lsls	r3, r3, #4
 801f11c:	693a      	ldr	r2, [r7, #16]
 801f11e:	4313      	orrs	r3, r2
 801f120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801f122:	697b      	ldr	r3, [r7, #20]
 801f124:	f023 030a 	bic.w	r3, r3, #10
 801f128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801f12a:	697a      	ldr	r2, [r7, #20]
 801f12c:	68bb      	ldr	r3, [r7, #8]
 801f12e:	4313      	orrs	r3, r2
 801f130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801f132:	68fb      	ldr	r3, [r7, #12]
 801f134:	693a      	ldr	r2, [r7, #16]
 801f136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	697a      	ldr	r2, [r7, #20]
 801f13c:	621a      	str	r2, [r3, #32]
}
 801f13e:	bf00      	nop
 801f140:	371c      	adds	r7, #28
 801f142:	46bd      	mov	sp, r7
 801f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f148:	4770      	bx	lr

0801f14a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801f14a:	b480      	push	{r7}
 801f14c:	b087      	sub	sp, #28
 801f14e:	af00      	add	r7, sp, #0
 801f150:	60f8      	str	r0, [r7, #12]
 801f152:	60b9      	str	r1, [r7, #8]
 801f154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	6a1b      	ldr	r3, [r3, #32]
 801f15a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	6a1b      	ldr	r3, [r3, #32]
 801f160:	f023 0210 	bic.w	r2, r3, #16
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801f168:	68fb      	ldr	r3, [r7, #12]
 801f16a:	699b      	ldr	r3, [r3, #24]
 801f16c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801f16e:	693b      	ldr	r3, [r7, #16]
 801f170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801f174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	031b      	lsls	r3, r3, #12
 801f17a:	693a      	ldr	r2, [r7, #16]
 801f17c:	4313      	orrs	r3, r2
 801f17e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801f180:	697b      	ldr	r3, [r7, #20]
 801f182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801f186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801f188:	68bb      	ldr	r3, [r7, #8]
 801f18a:	011b      	lsls	r3, r3, #4
 801f18c:	697a      	ldr	r2, [r7, #20]
 801f18e:	4313      	orrs	r3, r2
 801f190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801f192:	68fb      	ldr	r3, [r7, #12]
 801f194:	693a      	ldr	r2, [r7, #16]
 801f196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801f198:	68fb      	ldr	r3, [r7, #12]
 801f19a:	697a      	ldr	r2, [r7, #20]
 801f19c:	621a      	str	r2, [r3, #32]
}
 801f19e:	bf00      	nop
 801f1a0:	371c      	adds	r7, #28
 801f1a2:	46bd      	mov	sp, r7
 801f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a8:	4770      	bx	lr

0801f1aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801f1aa:	b480      	push	{r7}
 801f1ac:	b085      	sub	sp, #20
 801f1ae:	af00      	add	r7, sp, #0
 801f1b0:	6078      	str	r0, [r7, #4]
 801f1b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	689b      	ldr	r3, [r3, #8]
 801f1b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801f1ba:	68fb      	ldr	r3, [r7, #12]
 801f1bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f1c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801f1c2:	683a      	ldr	r2, [r7, #0]
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	4313      	orrs	r3, r2
 801f1c8:	f043 0307 	orr.w	r3, r3, #7
 801f1cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	68fa      	ldr	r2, [r7, #12]
 801f1d2:	609a      	str	r2, [r3, #8]
}
 801f1d4:	bf00      	nop
 801f1d6:	3714      	adds	r7, #20
 801f1d8:	46bd      	mov	sp, r7
 801f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1de:	4770      	bx	lr

0801f1e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801f1e0:	b480      	push	{r7}
 801f1e2:	b087      	sub	sp, #28
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	60f8      	str	r0, [r7, #12]
 801f1e8:	60b9      	str	r1, [r7, #8]
 801f1ea:	607a      	str	r2, [r7, #4]
 801f1ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	689b      	ldr	r3, [r3, #8]
 801f1f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f1f4:	697b      	ldr	r3, [r7, #20]
 801f1f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f1fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801f1fc:	683b      	ldr	r3, [r7, #0]
 801f1fe:	021a      	lsls	r2, r3, #8
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	431a      	orrs	r2, r3
 801f204:	68bb      	ldr	r3, [r7, #8]
 801f206:	4313      	orrs	r3, r2
 801f208:	697a      	ldr	r2, [r7, #20]
 801f20a:	4313      	orrs	r3, r2
 801f20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	697a      	ldr	r2, [r7, #20]
 801f212:	609a      	str	r2, [r3, #8]
}
 801f214:	bf00      	nop
 801f216:	371c      	adds	r7, #28
 801f218:	46bd      	mov	sp, r7
 801f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f21e:	4770      	bx	lr

0801f220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f220:	b480      	push	{r7}
 801f222:	b087      	sub	sp, #28
 801f224:	af00      	add	r7, sp, #0
 801f226:	60f8      	str	r0, [r7, #12]
 801f228:	60b9      	str	r1, [r7, #8]
 801f22a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f22c:	68bb      	ldr	r3, [r7, #8]
 801f22e:	f003 031f 	and.w	r3, r3, #31
 801f232:	2201      	movs	r2, #1
 801f234:	fa02 f303 	lsl.w	r3, r2, r3
 801f238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f23a:	68fb      	ldr	r3, [r7, #12]
 801f23c:	6a1a      	ldr	r2, [r3, #32]
 801f23e:	697b      	ldr	r3, [r7, #20]
 801f240:	43db      	mvns	r3, r3
 801f242:	401a      	ands	r2, r3
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	6a1a      	ldr	r2, [r3, #32]
 801f24c:	68bb      	ldr	r3, [r7, #8]
 801f24e:	f003 031f 	and.w	r3, r3, #31
 801f252:	6879      	ldr	r1, [r7, #4]
 801f254:	fa01 f303 	lsl.w	r3, r1, r3
 801f258:	431a      	orrs	r2, r3
 801f25a:	68fb      	ldr	r3, [r7, #12]
 801f25c:	621a      	str	r2, [r3, #32]
}
 801f25e:	bf00      	nop
 801f260:	371c      	adds	r7, #28
 801f262:	46bd      	mov	sp, r7
 801f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f268:	4770      	bx	lr
	...

0801f26c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f26c:	b480      	push	{r7}
 801f26e:	b085      	sub	sp, #20
 801f270:	af00      	add	r7, sp, #0
 801f272:	6078      	str	r0, [r7, #4]
 801f274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f27c:	2b01      	cmp	r3, #1
 801f27e:	d101      	bne.n	801f284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f280:	2302      	movs	r3, #2
 801f282:	e04f      	b.n	801f324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	2201      	movs	r2, #1
 801f288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	2202      	movs	r2, #2
 801f290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	681b      	ldr	r3, [r3, #0]
 801f298:	685b      	ldr	r3, [r3, #4]
 801f29a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	689b      	ldr	r3, [r3, #8]
 801f2a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	4a21      	ldr	r2, [pc, #132]	@ (801f330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801f2aa:	4293      	cmp	r3, r2
 801f2ac:	d108      	bne.n	801f2c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801f2b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f2b6:	683b      	ldr	r3, [r7, #0]
 801f2b8:	685b      	ldr	r3, [r3, #4]
 801f2ba:	68fa      	ldr	r2, [r7, #12]
 801f2bc:	4313      	orrs	r3, r2
 801f2be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f2c0:	68fb      	ldr	r3, [r7, #12]
 801f2c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f2c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f2c8:	683b      	ldr	r3, [r7, #0]
 801f2ca:	681b      	ldr	r3, [r3, #0]
 801f2cc:	68fa      	ldr	r2, [r7, #12]
 801f2ce:	4313      	orrs	r3, r2
 801f2d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	68fa      	ldr	r2, [r7, #12]
 801f2d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	4a14      	ldr	r2, [pc, #80]	@ (801f330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801f2e0:	4293      	cmp	r3, r2
 801f2e2:	d009      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f2ec:	d004      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	4a10      	ldr	r2, [pc, #64]	@ (801f334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801f2f4:	4293      	cmp	r3, r2
 801f2f6:	d10c      	bne.n	801f312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f2f8:	68bb      	ldr	r3, [r7, #8]
 801f2fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f2fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f300:	683b      	ldr	r3, [r7, #0]
 801f302:	689b      	ldr	r3, [r3, #8]
 801f304:	68ba      	ldr	r2, [r7, #8]
 801f306:	4313      	orrs	r3, r2
 801f308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	68ba      	ldr	r2, [r7, #8]
 801f310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	2201      	movs	r2, #1
 801f316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	2200      	movs	r2, #0
 801f31e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801f322:	2300      	movs	r3, #0
}
 801f324:	4618      	mov	r0, r3
 801f326:	3714      	adds	r7, #20
 801f328:	46bd      	mov	sp, r7
 801f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f32e:	4770      	bx	lr
 801f330:	40012c00 	.word	0x40012c00
 801f334:	40014000 	.word	0x40014000

0801f338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f338:	b480      	push	{r7}
 801f33a:	b085      	sub	sp, #20
 801f33c:	af00      	add	r7, sp, #0
 801f33e:	6078      	str	r0, [r7, #4]
 801f340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f342:	2300      	movs	r3, #0
 801f344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f34c:	2b01      	cmp	r3, #1
 801f34e:	d101      	bne.n	801f354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f350:	2302      	movs	r3, #2
 801f352:	e060      	b.n	801f416 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	2201      	movs	r2, #1
 801f358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801f362:	683b      	ldr	r3, [r7, #0]
 801f364:	68db      	ldr	r3, [r3, #12]
 801f366:	4313      	orrs	r3, r2
 801f368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f36a:	68fb      	ldr	r3, [r7, #12]
 801f36c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801f370:	683b      	ldr	r3, [r7, #0]
 801f372:	689b      	ldr	r3, [r3, #8]
 801f374:	4313      	orrs	r3, r2
 801f376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f378:	68fb      	ldr	r3, [r7, #12]
 801f37a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801f37e:	683b      	ldr	r3, [r7, #0]
 801f380:	685b      	ldr	r3, [r3, #4]
 801f382:	4313      	orrs	r3, r2
 801f384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801f38c:	683b      	ldr	r3, [r7, #0]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	4313      	orrs	r3, r2
 801f392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801f39a:	683b      	ldr	r3, [r7, #0]
 801f39c:	691b      	ldr	r3, [r3, #16]
 801f39e:	4313      	orrs	r3, r2
 801f3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801f3a8:	683b      	ldr	r3, [r7, #0]
 801f3aa:	695b      	ldr	r3, [r3, #20]
 801f3ac:	4313      	orrs	r3, r2
 801f3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801f3b6:	683b      	ldr	r3, [r7, #0]
 801f3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3ba:	4313      	orrs	r3, r2
 801f3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801f3c4:	683b      	ldr	r3, [r7, #0]
 801f3c6:	699b      	ldr	r3, [r3, #24]
 801f3c8:	041b      	lsls	r3, r3, #16
 801f3ca:	4313      	orrs	r3, r2
 801f3cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	4a14      	ldr	r2, [pc, #80]	@ (801f424 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801f3d4:	4293      	cmp	r3, r2
 801f3d6:	d115      	bne.n	801f404 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801f3de:	683b      	ldr	r3, [r7, #0]
 801f3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f3e2:	051b      	lsls	r3, r3, #20
 801f3e4:	4313      	orrs	r3, r2
 801f3e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801f3ee:	683b      	ldr	r3, [r7, #0]
 801f3f0:	69db      	ldr	r3, [r3, #28]
 801f3f2:	4313      	orrs	r3, r2
 801f3f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801f3fc:	683b      	ldr	r3, [r7, #0]
 801f3fe:	6a1b      	ldr	r3, [r3, #32]
 801f400:	4313      	orrs	r3, r2
 801f402:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	68fa      	ldr	r2, [r7, #12]
 801f40a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	2200      	movs	r2, #0
 801f410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801f414:	2300      	movs	r3, #0
}
 801f416:	4618      	mov	r0, r3
 801f418:	3714      	adds	r7, #20
 801f41a:	46bd      	mov	sp, r7
 801f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f420:	4770      	bx	lr
 801f422:	bf00      	nop
 801f424:	40012c00 	.word	0x40012c00

0801f428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f428:	b480      	push	{r7}
 801f42a:	b083      	sub	sp, #12
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f430:	bf00      	nop
 801f432:	370c      	adds	r7, #12
 801f434:	46bd      	mov	sp, r7
 801f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f43a:	4770      	bx	lr

0801f43c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f43c:	b480      	push	{r7}
 801f43e:	b083      	sub	sp, #12
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f444:	bf00      	nop
 801f446:	370c      	adds	r7, #12
 801f448:	46bd      	mov	sp, r7
 801f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f44e:	4770      	bx	lr

0801f450 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f450:	b480      	push	{r7}
 801f452:	b083      	sub	sp, #12
 801f454:	af00      	add	r7, sp, #0
 801f456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f458:	bf00      	nop
 801f45a:	370c      	adds	r7, #12
 801f45c:	46bd      	mov	sp, r7
 801f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f462:	4770      	bx	lr

0801f464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f464:	b580      	push	{r7, lr}
 801f466:	b082      	sub	sp, #8
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d101      	bne.n	801f476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f472:	2301      	movs	r3, #1
 801f474:	e040      	b.n	801f4f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d106      	bne.n	801f48c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	2200      	movs	r2, #0
 801f482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f486:	6878      	ldr	r0, [r7, #4]
 801f488:	f7e2 fa72 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	2224      	movs	r2, #36	@ 0x24
 801f490:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	681b      	ldr	r3, [r3, #0]
 801f496:	681a      	ldr	r2, [r3, #0]
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	f022 0201 	bic.w	r2, r2, #1
 801f4a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d002      	beq.n	801f4b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801f4aa:	6878      	ldr	r0, [r7, #4]
 801f4ac:	f000 ff46 	bl	802033c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f4b0:	6878      	ldr	r0, [r7, #4]
 801f4b2:	f000 fce9 	bl	801fe88 <UART_SetConfig>
 801f4b6:	4603      	mov	r3, r0
 801f4b8:	2b01      	cmp	r3, #1
 801f4ba:	d101      	bne.n	801f4c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801f4bc:	2301      	movs	r3, #1
 801f4be:	e01b      	b.n	801f4f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	685a      	ldr	r2, [r3, #4]
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	681b      	ldr	r3, [r3, #0]
 801f4ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f4ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	689a      	ldr	r2, [r3, #8]
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f4de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	681a      	ldr	r2, [r3, #0]
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	f042 0201 	orr.w	r2, r2, #1
 801f4ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f4f0:	6878      	ldr	r0, [r7, #4]
 801f4f2:	f000 ffc5 	bl	8020480 <UART_CheckIdleState>
 801f4f6:	4603      	mov	r3, r0
}
 801f4f8:	4618      	mov	r0, r3
 801f4fa:	3708      	adds	r7, #8
 801f4fc:	46bd      	mov	sp, r7
 801f4fe:	bd80      	pop	{r7, pc}

0801f500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f500:	b580      	push	{r7, lr}
 801f502:	b08a      	sub	sp, #40	@ 0x28
 801f504:	af02      	add	r7, sp, #8
 801f506:	60f8      	str	r0, [r7, #12]
 801f508:	60b9      	str	r1, [r7, #8]
 801f50a:	603b      	str	r3, [r7, #0]
 801f50c:	4613      	mov	r3, r2
 801f50e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f510:	68fb      	ldr	r3, [r7, #12]
 801f512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f514:	2b20      	cmp	r3, #32
 801f516:	d177      	bne.n	801f608 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801f518:	68bb      	ldr	r3, [r7, #8]
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d002      	beq.n	801f524 <HAL_UART_Transmit+0x24>
 801f51e:	88fb      	ldrh	r3, [r7, #6]
 801f520:	2b00      	cmp	r3, #0
 801f522:	d101      	bne.n	801f528 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801f524:	2301      	movs	r3, #1
 801f526:	e070      	b.n	801f60a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	2200      	movs	r2, #0
 801f52c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f530:	68fb      	ldr	r3, [r7, #12]
 801f532:	2221      	movs	r2, #33	@ 0x21
 801f534:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f536:	f7fc fac1 	bl	801babc <HAL_GetTick>
 801f53a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f53c:	68fb      	ldr	r3, [r7, #12]
 801f53e:	88fa      	ldrh	r2, [r7, #6]
 801f540:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801f544:	68fb      	ldr	r3, [r7, #12]
 801f546:	88fa      	ldrh	r2, [r7, #6]
 801f548:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f54c:	68fb      	ldr	r3, [r7, #12]
 801f54e:	689b      	ldr	r3, [r3, #8]
 801f550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f554:	d108      	bne.n	801f568 <HAL_UART_Transmit+0x68>
 801f556:	68fb      	ldr	r3, [r7, #12]
 801f558:	691b      	ldr	r3, [r3, #16]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d104      	bne.n	801f568 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801f55e:	2300      	movs	r3, #0
 801f560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f562:	68bb      	ldr	r3, [r7, #8]
 801f564:	61bb      	str	r3, [r7, #24]
 801f566:	e003      	b.n	801f570 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801f568:	68bb      	ldr	r3, [r7, #8]
 801f56a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f56c:	2300      	movs	r3, #0
 801f56e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f570:	e02f      	b.n	801f5d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f572:	683b      	ldr	r3, [r7, #0]
 801f574:	9300      	str	r3, [sp, #0]
 801f576:	697b      	ldr	r3, [r7, #20]
 801f578:	2200      	movs	r2, #0
 801f57a:	2180      	movs	r1, #128	@ 0x80
 801f57c:	68f8      	ldr	r0, [r7, #12]
 801f57e:	f001 f827 	bl	80205d0 <UART_WaitOnFlagUntilTimeout>
 801f582:	4603      	mov	r3, r0
 801f584:	2b00      	cmp	r3, #0
 801f586:	d004      	beq.n	801f592 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801f588:	68fb      	ldr	r3, [r7, #12]
 801f58a:	2220      	movs	r2, #32
 801f58c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801f58e:	2303      	movs	r3, #3
 801f590:	e03b      	b.n	801f60a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801f592:	69fb      	ldr	r3, [r7, #28]
 801f594:	2b00      	cmp	r3, #0
 801f596:	d10b      	bne.n	801f5b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f598:	69bb      	ldr	r3, [r7, #24]
 801f59a:	881a      	ldrh	r2, [r3, #0]
 801f59c:	68fb      	ldr	r3, [r7, #12]
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f5a4:	b292      	uxth	r2, r2
 801f5a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801f5a8:	69bb      	ldr	r3, [r7, #24]
 801f5aa:	3302      	adds	r3, #2
 801f5ac:	61bb      	str	r3, [r7, #24]
 801f5ae:	e007      	b.n	801f5c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f5b0:	69fb      	ldr	r3, [r7, #28]
 801f5b2:	781a      	ldrb	r2, [r3, #0]
 801f5b4:	68fb      	ldr	r3, [r7, #12]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801f5ba:	69fb      	ldr	r3, [r7, #28]
 801f5bc:	3301      	adds	r3, #1
 801f5be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f5c0:	68fb      	ldr	r3, [r7, #12]
 801f5c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801f5c6:	b29b      	uxth	r3, r3
 801f5c8:	3b01      	subs	r3, #1
 801f5ca:	b29a      	uxth	r2, r3
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801f5d2:	68fb      	ldr	r3, [r7, #12]
 801f5d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801f5d8:	b29b      	uxth	r3, r3
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d1c9      	bne.n	801f572 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f5de:	683b      	ldr	r3, [r7, #0]
 801f5e0:	9300      	str	r3, [sp, #0]
 801f5e2:	697b      	ldr	r3, [r7, #20]
 801f5e4:	2200      	movs	r2, #0
 801f5e6:	2140      	movs	r1, #64	@ 0x40
 801f5e8:	68f8      	ldr	r0, [r7, #12]
 801f5ea:	f000 fff1 	bl	80205d0 <UART_WaitOnFlagUntilTimeout>
 801f5ee:	4603      	mov	r3, r0
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d004      	beq.n	801f5fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801f5f4:	68fb      	ldr	r3, [r7, #12]
 801f5f6:	2220      	movs	r2, #32
 801f5f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801f5fa:	2303      	movs	r3, #3
 801f5fc:	e005      	b.n	801f60a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	2220      	movs	r2, #32
 801f602:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801f604:	2300      	movs	r3, #0
 801f606:	e000      	b.n	801f60a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801f608:	2302      	movs	r3, #2
  }
}
 801f60a:	4618      	mov	r0, r3
 801f60c:	3720      	adds	r7, #32
 801f60e:	46bd      	mov	sp, r7
 801f610:	bd80      	pop	{r7, pc}

0801f612 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f612:	b580      	push	{r7, lr}
 801f614:	b08a      	sub	sp, #40	@ 0x28
 801f616:	af02      	add	r7, sp, #8
 801f618:	60f8      	str	r0, [r7, #12]
 801f61a:	60b9      	str	r1, [r7, #8]
 801f61c:	603b      	str	r3, [r7, #0]
 801f61e:	4613      	mov	r3, r2
 801f620:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f628:	2b20      	cmp	r3, #32
 801f62a:	f040 80b6 	bne.w	801f79a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 801f62e:	68bb      	ldr	r3, [r7, #8]
 801f630:	2b00      	cmp	r3, #0
 801f632:	d002      	beq.n	801f63a <HAL_UART_Receive+0x28>
 801f634:	88fb      	ldrh	r3, [r7, #6]
 801f636:	2b00      	cmp	r3, #0
 801f638:	d101      	bne.n	801f63e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801f63a:	2301      	movs	r3, #1
 801f63c:	e0ae      	b.n	801f79c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f63e:	68fb      	ldr	r3, [r7, #12]
 801f640:	2200      	movs	r2, #0
 801f642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	2222      	movs	r2, #34	@ 0x22
 801f64a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f64e:	68fb      	ldr	r3, [r7, #12]
 801f650:	2200      	movs	r2, #0
 801f652:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f654:	f7fc fa32 	bl	801babc <HAL_GetTick>
 801f658:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801f65a:	68fb      	ldr	r3, [r7, #12]
 801f65c:	88fa      	ldrh	r2, [r7, #6]
 801f65e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	88fa      	ldrh	r2, [r7, #6]
 801f666:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801f66a:	68fb      	ldr	r3, [r7, #12]
 801f66c:	689b      	ldr	r3, [r3, #8]
 801f66e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f672:	d10e      	bne.n	801f692 <HAL_UART_Receive+0x80>
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	691b      	ldr	r3, [r3, #16]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d105      	bne.n	801f688 <HAL_UART_Receive+0x76>
 801f67c:	68fb      	ldr	r3, [r7, #12]
 801f67e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801f682:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f686:	e02d      	b.n	801f6e4 <HAL_UART_Receive+0xd2>
 801f688:	68fb      	ldr	r3, [r7, #12]
 801f68a:	22ff      	movs	r2, #255	@ 0xff
 801f68c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f690:	e028      	b.n	801f6e4 <HAL_UART_Receive+0xd2>
 801f692:	68fb      	ldr	r3, [r7, #12]
 801f694:	689b      	ldr	r3, [r3, #8]
 801f696:	2b00      	cmp	r3, #0
 801f698:	d10d      	bne.n	801f6b6 <HAL_UART_Receive+0xa4>
 801f69a:	68fb      	ldr	r3, [r7, #12]
 801f69c:	691b      	ldr	r3, [r3, #16]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d104      	bne.n	801f6ac <HAL_UART_Receive+0x9a>
 801f6a2:	68fb      	ldr	r3, [r7, #12]
 801f6a4:	22ff      	movs	r2, #255	@ 0xff
 801f6a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f6aa:	e01b      	b.n	801f6e4 <HAL_UART_Receive+0xd2>
 801f6ac:	68fb      	ldr	r3, [r7, #12]
 801f6ae:	227f      	movs	r2, #127	@ 0x7f
 801f6b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f6b4:	e016      	b.n	801f6e4 <HAL_UART_Receive+0xd2>
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	689b      	ldr	r3, [r3, #8]
 801f6ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f6be:	d10d      	bne.n	801f6dc <HAL_UART_Receive+0xca>
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	691b      	ldr	r3, [r3, #16]
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d104      	bne.n	801f6d2 <HAL_UART_Receive+0xc0>
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	227f      	movs	r2, #127	@ 0x7f
 801f6cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f6d0:	e008      	b.n	801f6e4 <HAL_UART_Receive+0xd2>
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	223f      	movs	r2, #63	@ 0x3f
 801f6d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801f6da:	e003      	b.n	801f6e4 <HAL_UART_Receive+0xd2>
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	2200      	movs	r2, #0
 801f6e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 801f6e4:	68fb      	ldr	r3, [r7, #12]
 801f6e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801f6ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f6ec:	68fb      	ldr	r3, [r7, #12]
 801f6ee:	689b      	ldr	r3, [r3, #8]
 801f6f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f6f4:	d108      	bne.n	801f708 <HAL_UART_Receive+0xf6>
 801f6f6:	68fb      	ldr	r3, [r7, #12]
 801f6f8:	691b      	ldr	r3, [r3, #16]
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	d104      	bne.n	801f708 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801f6fe:	2300      	movs	r3, #0
 801f700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801f702:	68bb      	ldr	r3, [r7, #8]
 801f704:	61bb      	str	r3, [r7, #24]
 801f706:	e003      	b.n	801f710 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801f708:	68bb      	ldr	r3, [r7, #8]
 801f70a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f70c:	2300      	movs	r3, #0
 801f70e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801f710:	e037      	b.n	801f782 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801f712:	683b      	ldr	r3, [r7, #0]
 801f714:	9300      	str	r3, [sp, #0]
 801f716:	697b      	ldr	r3, [r7, #20]
 801f718:	2200      	movs	r2, #0
 801f71a:	2120      	movs	r1, #32
 801f71c:	68f8      	ldr	r0, [r7, #12]
 801f71e:	f000 ff57 	bl	80205d0 <UART_WaitOnFlagUntilTimeout>
 801f722:	4603      	mov	r3, r0
 801f724:	2b00      	cmp	r3, #0
 801f726:	d005      	beq.n	801f734 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	2220      	movs	r2, #32
 801f72c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 801f730:	2303      	movs	r3, #3
 801f732:	e033      	b.n	801f79c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 801f734:	69fb      	ldr	r3, [r7, #28]
 801f736:	2b00      	cmp	r3, #0
 801f738:	d10c      	bne.n	801f754 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f740:	b29a      	uxth	r2, r3
 801f742:	8a7b      	ldrh	r3, [r7, #18]
 801f744:	4013      	ands	r3, r2
 801f746:	b29a      	uxth	r2, r3
 801f748:	69bb      	ldr	r3, [r7, #24]
 801f74a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801f74c:	69bb      	ldr	r3, [r7, #24]
 801f74e:	3302      	adds	r3, #2
 801f750:	61bb      	str	r3, [r7, #24]
 801f752:	e00d      	b.n	801f770 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801f754:	68fb      	ldr	r3, [r7, #12]
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f75a:	b29b      	uxth	r3, r3
 801f75c:	b2da      	uxtb	r2, r3
 801f75e:	8a7b      	ldrh	r3, [r7, #18]
 801f760:	b2db      	uxtb	r3, r3
 801f762:	4013      	ands	r3, r2
 801f764:	b2da      	uxtb	r2, r3
 801f766:	69fb      	ldr	r3, [r7, #28]
 801f768:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801f76a:	69fb      	ldr	r3, [r7, #28]
 801f76c:	3301      	adds	r3, #1
 801f76e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801f776:	b29b      	uxth	r3, r3
 801f778:	3b01      	subs	r3, #1
 801f77a:	b29a      	uxth	r2, r3
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 801f782:	68fb      	ldr	r3, [r7, #12]
 801f784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801f788:	b29b      	uxth	r3, r3
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d1c1      	bne.n	801f712 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	2220      	movs	r2, #32
 801f792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 801f796:	2300      	movs	r3, #0
 801f798:	e000      	b.n	801f79c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 801f79a:	2302      	movs	r3, #2
  }
}
 801f79c:	4618      	mov	r0, r3
 801f79e:	3720      	adds	r7, #32
 801f7a0:	46bd      	mov	sp, r7
 801f7a2:	bd80      	pop	{r7, pc}

0801f7a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801f7a4:	b580      	push	{r7, lr}
 801f7a6:	b08a      	sub	sp, #40	@ 0x28
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	60f8      	str	r0, [r7, #12]
 801f7ac:	60b9      	str	r1, [r7, #8]
 801f7ae:	4613      	mov	r3, r2
 801f7b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f7b2:	68fb      	ldr	r3, [r7, #12]
 801f7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f7b8:	2b20      	cmp	r3, #32
 801f7ba:	d137      	bne.n	801f82c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801f7bc:	68bb      	ldr	r3, [r7, #8]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d002      	beq.n	801f7c8 <HAL_UART_Receive_IT+0x24>
 801f7c2:	88fb      	ldrh	r3, [r7, #6]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d101      	bne.n	801f7cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801f7c8:	2301      	movs	r3, #1
 801f7ca:	e030      	b.n	801f82e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f7cc:	68fb      	ldr	r3, [r7, #12]
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f7d2:	68fb      	ldr	r3, [r7, #12]
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	4a18      	ldr	r2, [pc, #96]	@ (801f838 <HAL_UART_Receive_IT+0x94>)
 801f7d8:	4293      	cmp	r3, r2
 801f7da:	d01f      	beq.n	801f81c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f7dc:	68fb      	ldr	r3, [r7, #12]
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	685b      	ldr	r3, [r3, #4]
 801f7e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d018      	beq.n	801f81c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	681b      	ldr	r3, [r3, #0]
 801f7ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f7f0:	697b      	ldr	r3, [r7, #20]
 801f7f2:	e853 3f00 	ldrex	r3, [r3]
 801f7f6:	613b      	str	r3, [r7, #16]
   return(result);
 801f7f8:	693b      	ldr	r3, [r7, #16]
 801f7fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f7fe:	627b      	str	r3, [r7, #36]	@ 0x24
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	461a      	mov	r2, r3
 801f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f808:	623b      	str	r3, [r7, #32]
 801f80a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f80c:	69f9      	ldr	r1, [r7, #28]
 801f80e:	6a3a      	ldr	r2, [r7, #32]
 801f810:	e841 2300 	strex	r3, r2, [r1]
 801f814:	61bb      	str	r3, [r7, #24]
   return(result);
 801f816:	69bb      	ldr	r3, [r7, #24]
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d1e6      	bne.n	801f7ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801f81c:	88fb      	ldrh	r3, [r7, #6]
 801f81e:	461a      	mov	r2, r3
 801f820:	68b9      	ldr	r1, [r7, #8]
 801f822:	68f8      	ldr	r0, [r7, #12]
 801f824:	f000 ff42 	bl	80206ac <UART_Start_Receive_IT>
 801f828:	4603      	mov	r3, r0
 801f82a:	e000      	b.n	801f82e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801f82c:	2302      	movs	r3, #2
  }
}
 801f82e:	4618      	mov	r0, r3
 801f830:	3728      	adds	r7, #40	@ 0x28
 801f832:	46bd      	mov	sp, r7
 801f834:	bd80      	pop	{r7, pc}
 801f836:	bf00      	nop
 801f838:	40008000 	.word	0x40008000

0801f83c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801f83c:	b580      	push	{r7, lr}
 801f83e:	b0ba      	sub	sp, #232	@ 0xe8
 801f840:	af00      	add	r7, sp, #0
 801f842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	69db      	ldr	r3, [r3, #28]
 801f84a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	689b      	ldr	r3, [r3, #8]
 801f85e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801f862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801f866:	f640 030f 	movw	r3, #2063	@ 0x80f
 801f86a:	4013      	ands	r3, r2
 801f86c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801f870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f874:	2b00      	cmp	r3, #0
 801f876:	d115      	bne.n	801f8a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801f878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f87c:	f003 0320 	and.w	r3, r3, #32
 801f880:	2b00      	cmp	r3, #0
 801f882:	d00f      	beq.n	801f8a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801f888:	f003 0320 	and.w	r3, r3, #32
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d009      	beq.n	801f8a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f894:	2b00      	cmp	r3, #0
 801f896:	f000 82ca 	beq.w	801fe2e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f89e:	6878      	ldr	r0, [r7, #4]
 801f8a0:	4798      	blx	r3
      }
      return;
 801f8a2:	e2c4      	b.n	801fe2e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801f8a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	f000 8117 	beq.w	801fadc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801f8ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801f8b2:	f003 0301 	and.w	r3, r3, #1
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d106      	bne.n	801f8c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801f8ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801f8be:	4b85      	ldr	r3, [pc, #532]	@ (801fad4 <HAL_UART_IRQHandler+0x298>)
 801f8c0:	4013      	ands	r3, r2
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	f000 810a 	beq.w	801fadc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801f8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f8cc:	f003 0301 	and.w	r3, r3, #1
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d011      	beq.n	801f8f8 <HAL_UART_IRQHandler+0xbc>
 801f8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801f8d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d00b      	beq.n	801f8f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	681b      	ldr	r3, [r3, #0]
 801f8e4:	2201      	movs	r2, #1
 801f8e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f8ee:	f043 0201 	orr.w	r2, r3, #1
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f8fc:	f003 0302 	and.w	r3, r3, #2
 801f900:	2b00      	cmp	r3, #0
 801f902:	d011      	beq.n	801f928 <HAL_UART_IRQHandler+0xec>
 801f904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801f908:	f003 0301 	and.w	r3, r3, #1
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d00b      	beq.n	801f928 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	2202      	movs	r2, #2
 801f916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f91e:	f043 0204 	orr.w	r2, r3, #4
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f92c:	f003 0304 	and.w	r3, r3, #4
 801f930:	2b00      	cmp	r3, #0
 801f932:	d011      	beq.n	801f958 <HAL_UART_IRQHandler+0x11c>
 801f934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801f938:	f003 0301 	and.w	r3, r3, #1
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	d00b      	beq.n	801f958 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	2204      	movs	r2, #4
 801f946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f94e:	f043 0202 	orr.w	r2, r3, #2
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801f958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f95c:	f003 0308 	and.w	r3, r3, #8
 801f960:	2b00      	cmp	r3, #0
 801f962:	d017      	beq.n	801f994 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801f968:	f003 0320 	and.w	r3, r3, #32
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	d105      	bne.n	801f97c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801f970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801f974:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d00b      	beq.n	801f994 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	2208      	movs	r2, #8
 801f982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f98a:	f043 0208 	orr.w	r2, r3, #8
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801f994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d012      	beq.n	801f9c6 <HAL_UART_IRQHandler+0x18a>
 801f9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801f9a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d00c      	beq.n	801f9c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801f9b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f9bc:	f043 0220 	orr.w	r2, r3, #32
 801f9c0:	687b      	ldr	r3, [r7, #4]
 801f9c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	f000 8230 	beq.w	801fe32 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801f9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801f9d6:	f003 0320 	and.w	r3, r3, #32
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d00d      	beq.n	801f9fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801f9e2:	f003 0320 	and.w	r3, r3, #32
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d007      	beq.n	801f9fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d003      	beq.n	801f9fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f9f6:	6878      	ldr	r0, [r7, #4]
 801f9f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	689b      	ldr	r3, [r3, #8]
 801fa0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fa0e:	2b40      	cmp	r3, #64	@ 0x40
 801fa10:	d005      	beq.n	801fa1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801fa12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801fa16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d04f      	beq.n	801fabe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801fa1e:	6878      	ldr	r0, [r7, #4]
 801fa20:	f000 ff0a 	bl	8020838 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	689b      	ldr	r3, [r3, #8]
 801fa2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fa2e:	2b40      	cmp	r3, #64	@ 0x40
 801fa30:	d141      	bne.n	801fab6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	3308      	adds	r3, #8
 801fa38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801fa40:	e853 3f00 	ldrex	r3, [r3]
 801fa44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801fa48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801fa4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801fa50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	3308      	adds	r3, #8
 801fa5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801fa5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801fa62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801fa6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801fa6e:	e841 2300 	strex	r3, r2, [r1]
 801fa72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801fa76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d1d9      	bne.n	801fa32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d013      	beq.n	801faae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fa8a:	4a13      	ldr	r2, [pc, #76]	@ (801fad8 <HAL_UART_IRQHandler+0x29c>)
 801fa8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fa92:	4618      	mov	r0, r3
 801fa94:	f7fc f991 	bl	801bdba <HAL_DMA_Abort_IT>
 801fa98:	4603      	mov	r3, r0
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	d017      	beq.n	801face <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801faa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801faa4:	687a      	ldr	r2, [r7, #4]
 801faa6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801faa8:	4610      	mov	r0, r2
 801faaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801faac:	e00f      	b.n	801face <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801faae:	6878      	ldr	r0, [r7, #4]
 801fab0:	f000 f9d4 	bl	801fe5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fab4:	e00b      	b.n	801face <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801fab6:	6878      	ldr	r0, [r7, #4]
 801fab8:	f000 f9d0 	bl	801fe5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fabc:	e007      	b.n	801face <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801fabe:	6878      	ldr	r0, [r7, #4]
 801fac0:	f000 f9cc 	bl	801fe5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	2200      	movs	r2, #0
 801fac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801facc:	e1b1      	b.n	801fe32 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801face:	bf00      	nop
    return;
 801fad0:	e1af      	b.n	801fe32 <HAL_UART_IRQHandler+0x5f6>
 801fad2:	bf00      	nop
 801fad4:	04000120 	.word	0x04000120
 801fad8:	08020901 	.word	0x08020901

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fae0:	2b01      	cmp	r3, #1
 801fae2:	f040 816a 	bne.w	801fdba <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801fae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801faea:	f003 0310 	and.w	r3, r3, #16
 801faee:	2b00      	cmp	r3, #0
 801faf0:	f000 8163 	beq.w	801fdba <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801faf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801faf8:	f003 0310 	and.w	r3, r3, #16
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	f000 815c 	beq.w	801fdba <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	2210      	movs	r2, #16
 801fb08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	689b      	ldr	r3, [r3, #8]
 801fb10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fb14:	2b40      	cmp	r3, #64	@ 0x40
 801fb16:	f040 80d4 	bne.w	801fcc2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	685b      	ldr	r3, [r3, #4]
 801fb22:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801fb26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	f000 80ad 	beq.w	801fc8a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801fb36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801fb3a:	429a      	cmp	r2, r3
 801fb3c:	f080 80a5 	bcs.w	801fc8a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801fb46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	f003 0320 	and.w	r3, r3, #32
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	f040 8086 	bne.w	801fc68 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fb68:	e853 3f00 	ldrex	r3, [r3]
 801fb6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801fb70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801fb74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fb78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	681b      	ldr	r3, [r3, #0]
 801fb80:	461a      	mov	r2, r3
 801fb82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801fb86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801fb8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801fb92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801fb96:	e841 2300 	strex	r3, r2, [r1]
 801fb9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801fb9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d1da      	bne.n	801fb5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	3308      	adds	r3, #8
 801fbac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fbae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801fbb0:	e853 3f00 	ldrex	r3, [r3]
 801fbb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801fbb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801fbb8:	f023 0301 	bic.w	r3, r3, #1
 801fbbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801fbc0:	687b      	ldr	r3, [r7, #4]
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	3308      	adds	r3, #8
 801fbc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801fbca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801fbce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fbd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801fbd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801fbd6:	e841 2300 	strex	r3, r2, [r1]
 801fbda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801fbdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d1e1      	bne.n	801fba6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	3308      	adds	r3, #8
 801fbe8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fbea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801fbec:	e853 3f00 	ldrex	r3, [r3]
 801fbf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801fbf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fbf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801fbf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	3308      	adds	r3, #8
 801fc02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801fc06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801fc08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801fc0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801fc0e:	e841 2300 	strex	r3, r2, [r1]
 801fc12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801fc14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d1e3      	bne.n	801fbe2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	2220      	movs	r2, #32
 801fc1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	2200      	movs	r2, #0
 801fc26:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fc30:	e853 3f00 	ldrex	r3, [r3]
 801fc34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801fc36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fc38:	f023 0310 	bic.w	r3, r3, #16
 801fc3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	461a      	mov	r2, r3
 801fc46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fc4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801fc4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801fc50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801fc52:	e841 2300 	strex	r3, r2, [r1]
 801fc56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801fc58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d1e4      	bne.n	801fc28 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fc62:	4618      	mov	r0, r3
 801fc64:	f7fc f86b 	bl	801bd3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	2202      	movs	r2, #2
 801fc6c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801fc7a:	b29b      	uxth	r3, r3
 801fc7c:	1ad3      	subs	r3, r2, r3
 801fc7e:	b29b      	uxth	r3, r3
 801fc80:	4619      	mov	r1, r3
 801fc82:	6878      	ldr	r0, [r7, #4]
 801fc84:	f000 f8f4 	bl	801fe70 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801fc88:	e0d5      	b.n	801fe36 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801fc90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801fc94:	429a      	cmp	r2, r3
 801fc96:	f040 80ce 	bne.w	801fe36 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	f003 0320 	and.w	r3, r3, #32
 801fca6:	2b20      	cmp	r3, #32
 801fca8:	f040 80c5 	bne.w	801fe36 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	2202      	movs	r2, #2
 801fcb0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801fcb8:	4619      	mov	r1, r3
 801fcba:	6878      	ldr	r0, [r7, #4]
 801fcbc:	f000 f8d8 	bl	801fe70 <HAL_UARTEx_RxEventCallback>
      return;
 801fcc0:	e0b9      	b.n	801fe36 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801fcce:	b29b      	uxth	r3, r3
 801fcd0:	1ad3      	subs	r3, r2, r3
 801fcd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801fcdc:	b29b      	uxth	r3, r3
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	f000 80ab 	beq.w	801fe3a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801fce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	f000 80a6 	beq.w	801fe3a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fcf6:	e853 3f00 	ldrex	r3, [r3]
 801fcfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801fcfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fcfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801fd02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	461a      	mov	r2, r3
 801fd0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801fd10:	647b      	str	r3, [r7, #68]	@ 0x44
 801fd12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fd18:	e841 2300 	strex	r3, r2, [r1]
 801fd1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801fd1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	d1e4      	bne.n	801fcee <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fd24:	687b      	ldr	r3, [r7, #4]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	3308      	adds	r3, #8
 801fd2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd2e:	e853 3f00 	ldrex	r3, [r3]
 801fd32:	623b      	str	r3, [r7, #32]
   return(result);
 801fd34:	6a3b      	ldr	r3, [r7, #32]
 801fd36:	f023 0301 	bic.w	r3, r3, #1
 801fd3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	681b      	ldr	r3, [r3, #0]
 801fd42:	3308      	adds	r3, #8
 801fd44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801fd48:	633a      	str	r2, [r7, #48]	@ 0x30
 801fd4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801fd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fd50:	e841 2300 	strex	r3, r2, [r1]
 801fd54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801fd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d1e3      	bne.n	801fd24 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	2220      	movs	r2, #32
 801fd60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	2200      	movs	r2, #0
 801fd68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	2200      	movs	r2, #0
 801fd6e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd76:	693b      	ldr	r3, [r7, #16]
 801fd78:	e853 3f00 	ldrex	r3, [r3]
 801fd7c:	60fb      	str	r3, [r7, #12]
   return(result);
 801fd7e:	68fb      	ldr	r3, [r7, #12]
 801fd80:	f023 0310 	bic.w	r3, r3, #16
 801fd84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	461a      	mov	r2, r3
 801fd8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801fd92:	61fb      	str	r3, [r7, #28]
 801fd94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd96:	69b9      	ldr	r1, [r7, #24]
 801fd98:	69fa      	ldr	r2, [r7, #28]
 801fd9a:	e841 2300 	strex	r3, r2, [r1]
 801fd9e:	617b      	str	r3, [r7, #20]
   return(result);
 801fda0:	697b      	ldr	r3, [r7, #20]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d1e4      	bne.n	801fd70 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	2202      	movs	r2, #2
 801fdaa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801fdac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801fdb0:	4619      	mov	r1, r3
 801fdb2:	6878      	ldr	r0, [r7, #4]
 801fdb4:	f000 f85c 	bl	801fe70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801fdb8:	e03f      	b.n	801fe3a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801fdba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fdbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d00e      	beq.n	801fde4 <HAL_UART_IRQHandler+0x5a8>
 801fdc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801fdca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d008      	beq.n	801fde4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801fdda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801fddc:	6878      	ldr	r0, [r7, #4]
 801fdde:	f000 ff8b 	bl	8020cf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801fde2:	e02d      	b.n	801fe40 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801fde4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fde8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	d00e      	beq.n	801fe0e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801fdf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fdf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	d008      	beq.n	801fe0e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fe00:	2b00      	cmp	r3, #0
 801fe02:	d01c      	beq.n	801fe3e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fe08:	6878      	ldr	r0, [r7, #4]
 801fe0a:	4798      	blx	r3
    }
    return;
 801fe0c:	e017      	b.n	801fe3e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801fe0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fe12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d012      	beq.n	801fe40 <HAL_UART_IRQHandler+0x604>
 801fe1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fe1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	d00c      	beq.n	801fe40 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801fe26:	6878      	ldr	r0, [r7, #4]
 801fe28:	f000 fd80 	bl	802092c <UART_EndTransmit_IT>
    return;
 801fe2c:	e008      	b.n	801fe40 <HAL_UART_IRQHandler+0x604>
      return;
 801fe2e:	bf00      	nop
 801fe30:	e006      	b.n	801fe40 <HAL_UART_IRQHandler+0x604>
    return;
 801fe32:	bf00      	nop
 801fe34:	e004      	b.n	801fe40 <HAL_UART_IRQHandler+0x604>
      return;
 801fe36:	bf00      	nop
 801fe38:	e002      	b.n	801fe40 <HAL_UART_IRQHandler+0x604>
      return;
 801fe3a:	bf00      	nop
 801fe3c:	e000      	b.n	801fe40 <HAL_UART_IRQHandler+0x604>
    return;
 801fe3e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801fe40:	37e8      	adds	r7, #232	@ 0xe8
 801fe42:	46bd      	mov	sp, r7
 801fe44:	bd80      	pop	{r7, pc}
 801fe46:	bf00      	nop

0801fe48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801fe48:	b480      	push	{r7}
 801fe4a:	b083      	sub	sp, #12
 801fe4c:	af00      	add	r7, sp, #0
 801fe4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801fe50:	bf00      	nop
 801fe52:	370c      	adds	r7, #12
 801fe54:	46bd      	mov	sp, r7
 801fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe5a:	4770      	bx	lr

0801fe5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801fe5c:	b480      	push	{r7}
 801fe5e:	b083      	sub	sp, #12
 801fe60:	af00      	add	r7, sp, #0
 801fe62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801fe64:	bf00      	nop
 801fe66:	370c      	adds	r7, #12
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe6e:	4770      	bx	lr

0801fe70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801fe70:	b480      	push	{r7}
 801fe72:	b083      	sub	sp, #12
 801fe74:	af00      	add	r7, sp, #0
 801fe76:	6078      	str	r0, [r7, #4]
 801fe78:	460b      	mov	r3, r1
 801fe7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801fe7c:	bf00      	nop
 801fe7e:	370c      	adds	r7, #12
 801fe80:	46bd      	mov	sp, r7
 801fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe86:	4770      	bx	lr

0801fe88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801fe88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fe8c:	b08a      	sub	sp, #40	@ 0x28
 801fe8e:	af00      	add	r7, sp, #0
 801fe90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801fe92:	2300      	movs	r3, #0
 801fe94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801fe98:	68fb      	ldr	r3, [r7, #12]
 801fe9a:	689a      	ldr	r2, [r3, #8]
 801fe9c:	68fb      	ldr	r3, [r7, #12]
 801fe9e:	691b      	ldr	r3, [r3, #16]
 801fea0:	431a      	orrs	r2, r3
 801fea2:	68fb      	ldr	r3, [r7, #12]
 801fea4:	695b      	ldr	r3, [r3, #20]
 801fea6:	431a      	orrs	r2, r3
 801fea8:	68fb      	ldr	r3, [r7, #12]
 801feaa:	69db      	ldr	r3, [r3, #28]
 801feac:	4313      	orrs	r3, r2
 801feae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801feb0:	68fb      	ldr	r3, [r7, #12]
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	681a      	ldr	r2, [r3, #0]
 801feb6:	4b9e      	ldr	r3, [pc, #632]	@ (8020130 <UART_SetConfig+0x2a8>)
 801feb8:	4013      	ands	r3, r2
 801feba:	68fa      	ldr	r2, [r7, #12]
 801febc:	6812      	ldr	r2, [r2, #0]
 801febe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801fec0:	430b      	orrs	r3, r1
 801fec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	685b      	ldr	r3, [r3, #4]
 801feca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801fece:	68fb      	ldr	r3, [r7, #12]
 801fed0:	68da      	ldr	r2, [r3, #12]
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	430a      	orrs	r2, r1
 801fed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801feda:	68fb      	ldr	r3, [r7, #12]
 801fedc:	699b      	ldr	r3, [r3, #24]
 801fede:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801fee0:	68fb      	ldr	r3, [r7, #12]
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	4a93      	ldr	r2, [pc, #588]	@ (8020134 <UART_SetConfig+0x2ac>)
 801fee6:	4293      	cmp	r3, r2
 801fee8:	d004      	beq.n	801fef4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	6a1b      	ldr	r3, [r3, #32]
 801feee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fef0:	4313      	orrs	r3, r2
 801fef2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	689b      	ldr	r3, [r3, #8]
 801fefa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff04:	430a      	orrs	r2, r1
 801ff06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	4a8a      	ldr	r2, [pc, #552]	@ (8020138 <UART_SetConfig+0x2b0>)
 801ff0e:	4293      	cmp	r3, r2
 801ff10:	d126      	bne.n	801ff60 <UART_SetConfig+0xd8>
 801ff12:	4b8a      	ldr	r3, [pc, #552]	@ (802013c <UART_SetConfig+0x2b4>)
 801ff14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ff18:	f003 0303 	and.w	r3, r3, #3
 801ff1c:	2b03      	cmp	r3, #3
 801ff1e:	d81b      	bhi.n	801ff58 <UART_SetConfig+0xd0>
 801ff20:	a201      	add	r2, pc, #4	@ (adr r2, 801ff28 <UART_SetConfig+0xa0>)
 801ff22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff26:	bf00      	nop
 801ff28:	0801ff39 	.word	0x0801ff39
 801ff2c:	0801ff49 	.word	0x0801ff49
 801ff30:	0801ff41 	.word	0x0801ff41
 801ff34:	0801ff51 	.word	0x0801ff51
 801ff38:	2301      	movs	r3, #1
 801ff3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ff3e:	e0ab      	b.n	8020098 <UART_SetConfig+0x210>
 801ff40:	2302      	movs	r3, #2
 801ff42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ff46:	e0a7      	b.n	8020098 <UART_SetConfig+0x210>
 801ff48:	2304      	movs	r3, #4
 801ff4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ff4e:	e0a3      	b.n	8020098 <UART_SetConfig+0x210>
 801ff50:	2308      	movs	r3, #8
 801ff52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ff56:	e09f      	b.n	8020098 <UART_SetConfig+0x210>
 801ff58:	2310      	movs	r3, #16
 801ff5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ff5e:	e09b      	b.n	8020098 <UART_SetConfig+0x210>
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	4a76      	ldr	r2, [pc, #472]	@ (8020140 <UART_SetConfig+0x2b8>)
 801ff66:	4293      	cmp	r3, r2
 801ff68:	d138      	bne.n	801ffdc <UART_SetConfig+0x154>
 801ff6a:	4b74      	ldr	r3, [pc, #464]	@ (802013c <UART_SetConfig+0x2b4>)
 801ff6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ff70:	f003 030c 	and.w	r3, r3, #12
 801ff74:	2b0c      	cmp	r3, #12
 801ff76:	d82d      	bhi.n	801ffd4 <UART_SetConfig+0x14c>
 801ff78:	a201      	add	r2, pc, #4	@ (adr r2, 801ff80 <UART_SetConfig+0xf8>)
 801ff7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff7e:	bf00      	nop
 801ff80:	0801ffb5 	.word	0x0801ffb5
 801ff84:	0801ffd5 	.word	0x0801ffd5
 801ff88:	0801ffd5 	.word	0x0801ffd5
 801ff8c:	0801ffd5 	.word	0x0801ffd5
 801ff90:	0801ffc5 	.word	0x0801ffc5
 801ff94:	0801ffd5 	.word	0x0801ffd5
 801ff98:	0801ffd5 	.word	0x0801ffd5
 801ff9c:	0801ffd5 	.word	0x0801ffd5
 801ffa0:	0801ffbd 	.word	0x0801ffbd
 801ffa4:	0801ffd5 	.word	0x0801ffd5
 801ffa8:	0801ffd5 	.word	0x0801ffd5
 801ffac:	0801ffd5 	.word	0x0801ffd5
 801ffb0:	0801ffcd 	.word	0x0801ffcd
 801ffb4:	2300      	movs	r3, #0
 801ffb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ffba:	e06d      	b.n	8020098 <UART_SetConfig+0x210>
 801ffbc:	2302      	movs	r3, #2
 801ffbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ffc2:	e069      	b.n	8020098 <UART_SetConfig+0x210>
 801ffc4:	2304      	movs	r3, #4
 801ffc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ffca:	e065      	b.n	8020098 <UART_SetConfig+0x210>
 801ffcc:	2308      	movs	r3, #8
 801ffce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ffd2:	e061      	b.n	8020098 <UART_SetConfig+0x210>
 801ffd4:	2310      	movs	r3, #16
 801ffd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ffda:	e05d      	b.n	8020098 <UART_SetConfig+0x210>
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	4a58      	ldr	r2, [pc, #352]	@ (8020144 <UART_SetConfig+0x2bc>)
 801ffe2:	4293      	cmp	r3, r2
 801ffe4:	d125      	bne.n	8020032 <UART_SetConfig+0x1aa>
 801ffe6:	4b55      	ldr	r3, [pc, #340]	@ (802013c <UART_SetConfig+0x2b4>)
 801ffe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ffec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801fff0:	2b30      	cmp	r3, #48	@ 0x30
 801fff2:	d016      	beq.n	8020022 <UART_SetConfig+0x19a>
 801fff4:	2b30      	cmp	r3, #48	@ 0x30
 801fff6:	d818      	bhi.n	802002a <UART_SetConfig+0x1a2>
 801fff8:	2b20      	cmp	r3, #32
 801fffa:	d00a      	beq.n	8020012 <UART_SetConfig+0x18a>
 801fffc:	2b20      	cmp	r3, #32
 801fffe:	d814      	bhi.n	802002a <UART_SetConfig+0x1a2>
 8020000:	2b00      	cmp	r3, #0
 8020002:	d002      	beq.n	802000a <UART_SetConfig+0x182>
 8020004:	2b10      	cmp	r3, #16
 8020006:	d008      	beq.n	802001a <UART_SetConfig+0x192>
 8020008:	e00f      	b.n	802002a <UART_SetConfig+0x1a2>
 802000a:	2300      	movs	r3, #0
 802000c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020010:	e042      	b.n	8020098 <UART_SetConfig+0x210>
 8020012:	2302      	movs	r3, #2
 8020014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020018:	e03e      	b.n	8020098 <UART_SetConfig+0x210>
 802001a:	2304      	movs	r3, #4
 802001c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020020:	e03a      	b.n	8020098 <UART_SetConfig+0x210>
 8020022:	2308      	movs	r3, #8
 8020024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020028:	e036      	b.n	8020098 <UART_SetConfig+0x210>
 802002a:	2310      	movs	r3, #16
 802002c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020030:	e032      	b.n	8020098 <UART_SetConfig+0x210>
 8020032:	68fb      	ldr	r3, [r7, #12]
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	4a3f      	ldr	r2, [pc, #252]	@ (8020134 <UART_SetConfig+0x2ac>)
 8020038:	4293      	cmp	r3, r2
 802003a:	d12a      	bne.n	8020092 <UART_SetConfig+0x20a>
 802003c:	4b3f      	ldr	r3, [pc, #252]	@ (802013c <UART_SetConfig+0x2b4>)
 802003e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020042:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8020046:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 802004a:	d01a      	beq.n	8020082 <UART_SetConfig+0x1fa>
 802004c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020050:	d81b      	bhi.n	802008a <UART_SetConfig+0x202>
 8020052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020056:	d00c      	beq.n	8020072 <UART_SetConfig+0x1ea>
 8020058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802005c:	d815      	bhi.n	802008a <UART_SetConfig+0x202>
 802005e:	2b00      	cmp	r3, #0
 8020060:	d003      	beq.n	802006a <UART_SetConfig+0x1e2>
 8020062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020066:	d008      	beq.n	802007a <UART_SetConfig+0x1f2>
 8020068:	e00f      	b.n	802008a <UART_SetConfig+0x202>
 802006a:	2300      	movs	r3, #0
 802006c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020070:	e012      	b.n	8020098 <UART_SetConfig+0x210>
 8020072:	2302      	movs	r3, #2
 8020074:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020078:	e00e      	b.n	8020098 <UART_SetConfig+0x210>
 802007a:	2304      	movs	r3, #4
 802007c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020080:	e00a      	b.n	8020098 <UART_SetConfig+0x210>
 8020082:	2308      	movs	r3, #8
 8020084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020088:	e006      	b.n	8020098 <UART_SetConfig+0x210>
 802008a:	2310      	movs	r3, #16
 802008c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020090:	e002      	b.n	8020098 <UART_SetConfig+0x210>
 8020092:	2310      	movs	r3, #16
 8020094:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	4a25      	ldr	r2, [pc, #148]	@ (8020134 <UART_SetConfig+0x2ac>)
 802009e:	4293      	cmp	r3, r2
 80200a0:	f040 808a 	bne.w	80201b8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80200a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80200a8:	2b08      	cmp	r3, #8
 80200aa:	d824      	bhi.n	80200f6 <UART_SetConfig+0x26e>
 80200ac:	a201      	add	r2, pc, #4	@ (adr r2, 80200b4 <UART_SetConfig+0x22c>)
 80200ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200b2:	bf00      	nop
 80200b4:	080200d9 	.word	0x080200d9
 80200b8:	080200f7 	.word	0x080200f7
 80200bc:	080200e1 	.word	0x080200e1
 80200c0:	080200f7 	.word	0x080200f7
 80200c4:	080200e7 	.word	0x080200e7
 80200c8:	080200f7 	.word	0x080200f7
 80200cc:	080200f7 	.word	0x080200f7
 80200d0:	080200f7 	.word	0x080200f7
 80200d4:	080200ef 	.word	0x080200ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80200d8:	f7fc ff68 	bl	801cfac <HAL_RCC_GetPCLK1Freq>
 80200dc:	61f8      	str	r0, [r7, #28]
        break;
 80200de:	e010      	b.n	8020102 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80200e0:	4b19      	ldr	r3, [pc, #100]	@ (8020148 <UART_SetConfig+0x2c0>)
 80200e2:	61fb      	str	r3, [r7, #28]
        break;
 80200e4:	e00d      	b.n	8020102 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80200e6:	f7fc fec9 	bl	801ce7c <HAL_RCC_GetSysClockFreq>
 80200ea:	61f8      	str	r0, [r7, #28]
        break;
 80200ec:	e009      	b.n	8020102 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80200ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80200f2:	61fb      	str	r3, [r7, #28]
        break;
 80200f4:	e005      	b.n	8020102 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80200f6:	2300      	movs	r3, #0
 80200f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80200fa:	2301      	movs	r3, #1
 80200fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8020100:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020102:	69fb      	ldr	r3, [r7, #28]
 8020104:	2b00      	cmp	r3, #0
 8020106:	f000 8109 	beq.w	802031c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 802010a:	68fb      	ldr	r3, [r7, #12]
 802010c:	685a      	ldr	r2, [r3, #4]
 802010e:	4613      	mov	r3, r2
 8020110:	005b      	lsls	r3, r3, #1
 8020112:	4413      	add	r3, r2
 8020114:	69fa      	ldr	r2, [r7, #28]
 8020116:	429a      	cmp	r2, r3
 8020118:	d305      	bcc.n	8020126 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 802011a:	68fb      	ldr	r3, [r7, #12]
 802011c:	685b      	ldr	r3, [r3, #4]
 802011e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8020120:	69fa      	ldr	r2, [r7, #28]
 8020122:	429a      	cmp	r2, r3
 8020124:	d912      	bls.n	802014c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8020126:	2301      	movs	r3, #1
 8020128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 802012c:	e0f6      	b.n	802031c <UART_SetConfig+0x494>
 802012e:	bf00      	nop
 8020130:	efff69f3 	.word	0xefff69f3
 8020134:	40008000 	.word	0x40008000
 8020138:	40013800 	.word	0x40013800
 802013c:	40021000 	.word	0x40021000
 8020140:	40004400 	.word	0x40004400
 8020144:	40004800 	.word	0x40004800
 8020148:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 802014c:	69fb      	ldr	r3, [r7, #28]
 802014e:	2200      	movs	r2, #0
 8020150:	461c      	mov	r4, r3
 8020152:	4615      	mov	r5, r2
 8020154:	f04f 0200 	mov.w	r2, #0
 8020158:	f04f 0300 	mov.w	r3, #0
 802015c:	022b      	lsls	r3, r5, #8
 802015e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8020162:	0222      	lsls	r2, r4, #8
 8020164:	68f9      	ldr	r1, [r7, #12]
 8020166:	6849      	ldr	r1, [r1, #4]
 8020168:	0849      	lsrs	r1, r1, #1
 802016a:	2000      	movs	r0, #0
 802016c:	4688      	mov	r8, r1
 802016e:	4681      	mov	r9, r0
 8020170:	eb12 0a08 	adds.w	sl, r2, r8
 8020174:	eb43 0b09 	adc.w	fp, r3, r9
 8020178:	68fb      	ldr	r3, [r7, #12]
 802017a:	685b      	ldr	r3, [r3, #4]
 802017c:	2200      	movs	r2, #0
 802017e:	603b      	str	r3, [r7, #0]
 8020180:	607a      	str	r2, [r7, #4]
 8020182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020186:	4650      	mov	r0, sl
 8020188:	4659      	mov	r1, fp
 802018a:	f7e0 fd5d 	bl	8000c48 <__aeabi_uldivmod>
 802018e:	4602      	mov	r2, r0
 8020190:	460b      	mov	r3, r1
 8020192:	4613      	mov	r3, r2
 8020194:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020196:	69bb      	ldr	r3, [r7, #24]
 8020198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802019c:	d308      	bcc.n	80201b0 <UART_SetConfig+0x328>
 802019e:	69bb      	ldr	r3, [r7, #24]
 80201a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80201a4:	d204      	bcs.n	80201b0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	69ba      	ldr	r2, [r7, #24]
 80201ac:	60da      	str	r2, [r3, #12]
 80201ae:	e0b5      	b.n	802031c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80201b0:	2301      	movs	r3, #1
 80201b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80201b6:	e0b1      	b.n	802031c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	69db      	ldr	r3, [r3, #28]
 80201bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80201c0:	d15d      	bne.n	802027e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80201c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80201c6:	2b08      	cmp	r3, #8
 80201c8:	d827      	bhi.n	802021a <UART_SetConfig+0x392>
 80201ca:	a201      	add	r2, pc, #4	@ (adr r2, 80201d0 <UART_SetConfig+0x348>)
 80201cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201d0:	080201f5 	.word	0x080201f5
 80201d4:	080201fd 	.word	0x080201fd
 80201d8:	08020205 	.word	0x08020205
 80201dc:	0802021b 	.word	0x0802021b
 80201e0:	0802020b 	.word	0x0802020b
 80201e4:	0802021b 	.word	0x0802021b
 80201e8:	0802021b 	.word	0x0802021b
 80201ec:	0802021b 	.word	0x0802021b
 80201f0:	08020213 	.word	0x08020213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80201f4:	f7fc feda 	bl	801cfac <HAL_RCC_GetPCLK1Freq>
 80201f8:	61f8      	str	r0, [r7, #28]
        break;
 80201fa:	e014      	b.n	8020226 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80201fc:	f7fc feec 	bl	801cfd8 <HAL_RCC_GetPCLK2Freq>
 8020200:	61f8      	str	r0, [r7, #28]
        break;
 8020202:	e010      	b.n	8020226 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020204:	4b4c      	ldr	r3, [pc, #304]	@ (8020338 <UART_SetConfig+0x4b0>)
 8020206:	61fb      	str	r3, [r7, #28]
        break;
 8020208:	e00d      	b.n	8020226 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802020a:	f7fc fe37 	bl	801ce7c <HAL_RCC_GetSysClockFreq>
 802020e:	61f8      	str	r0, [r7, #28]
        break;
 8020210:	e009      	b.n	8020226 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020216:	61fb      	str	r3, [r7, #28]
        break;
 8020218:	e005      	b.n	8020226 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 802021a:	2300      	movs	r3, #0
 802021c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 802021e:	2301      	movs	r3, #1
 8020220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8020224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020226:	69fb      	ldr	r3, [r7, #28]
 8020228:	2b00      	cmp	r3, #0
 802022a:	d077      	beq.n	802031c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 802022c:	69fb      	ldr	r3, [r7, #28]
 802022e:	005a      	lsls	r2, r3, #1
 8020230:	68fb      	ldr	r3, [r7, #12]
 8020232:	685b      	ldr	r3, [r3, #4]
 8020234:	085b      	lsrs	r3, r3, #1
 8020236:	441a      	add	r2, r3
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	685b      	ldr	r3, [r3, #4]
 802023c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020240:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020242:	69bb      	ldr	r3, [r7, #24]
 8020244:	2b0f      	cmp	r3, #15
 8020246:	d916      	bls.n	8020276 <UART_SetConfig+0x3ee>
 8020248:	69bb      	ldr	r3, [r7, #24]
 802024a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802024e:	d212      	bcs.n	8020276 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020250:	69bb      	ldr	r3, [r7, #24]
 8020252:	b29b      	uxth	r3, r3
 8020254:	f023 030f 	bic.w	r3, r3, #15
 8020258:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802025a:	69bb      	ldr	r3, [r7, #24]
 802025c:	085b      	lsrs	r3, r3, #1
 802025e:	b29b      	uxth	r3, r3
 8020260:	f003 0307 	and.w	r3, r3, #7
 8020264:	b29a      	uxth	r2, r3
 8020266:	8afb      	ldrh	r3, [r7, #22]
 8020268:	4313      	orrs	r3, r2
 802026a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	681b      	ldr	r3, [r3, #0]
 8020270:	8afa      	ldrh	r2, [r7, #22]
 8020272:	60da      	str	r2, [r3, #12]
 8020274:	e052      	b.n	802031c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8020276:	2301      	movs	r3, #1
 8020278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 802027c:	e04e      	b.n	802031c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 802027e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8020282:	2b08      	cmp	r3, #8
 8020284:	d827      	bhi.n	80202d6 <UART_SetConfig+0x44e>
 8020286:	a201      	add	r2, pc, #4	@ (adr r2, 802028c <UART_SetConfig+0x404>)
 8020288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802028c:	080202b1 	.word	0x080202b1
 8020290:	080202b9 	.word	0x080202b9
 8020294:	080202c1 	.word	0x080202c1
 8020298:	080202d7 	.word	0x080202d7
 802029c:	080202c7 	.word	0x080202c7
 80202a0:	080202d7 	.word	0x080202d7
 80202a4:	080202d7 	.word	0x080202d7
 80202a8:	080202d7 	.word	0x080202d7
 80202ac:	080202cf 	.word	0x080202cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80202b0:	f7fc fe7c 	bl	801cfac <HAL_RCC_GetPCLK1Freq>
 80202b4:	61f8      	str	r0, [r7, #28]
        break;
 80202b6:	e014      	b.n	80202e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80202b8:	f7fc fe8e 	bl	801cfd8 <HAL_RCC_GetPCLK2Freq>
 80202bc:	61f8      	str	r0, [r7, #28]
        break;
 80202be:	e010      	b.n	80202e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80202c0:	4b1d      	ldr	r3, [pc, #116]	@ (8020338 <UART_SetConfig+0x4b0>)
 80202c2:	61fb      	str	r3, [r7, #28]
        break;
 80202c4:	e00d      	b.n	80202e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80202c6:	f7fc fdd9 	bl	801ce7c <HAL_RCC_GetSysClockFreq>
 80202ca:	61f8      	str	r0, [r7, #28]
        break;
 80202cc:	e009      	b.n	80202e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80202ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80202d2:	61fb      	str	r3, [r7, #28]
        break;
 80202d4:	e005      	b.n	80202e2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80202d6:	2300      	movs	r3, #0
 80202d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80202da:	2301      	movs	r3, #1
 80202dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80202e0:	bf00      	nop
    }

    if (pclk != 0U)
 80202e2:	69fb      	ldr	r3, [r7, #28]
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d019      	beq.n	802031c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80202e8:	68fb      	ldr	r3, [r7, #12]
 80202ea:	685b      	ldr	r3, [r3, #4]
 80202ec:	085a      	lsrs	r2, r3, #1
 80202ee:	69fb      	ldr	r3, [r7, #28]
 80202f0:	441a      	add	r2, r3
 80202f2:	68fb      	ldr	r3, [r7, #12]
 80202f4:	685b      	ldr	r3, [r3, #4]
 80202f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80202fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80202fc:	69bb      	ldr	r3, [r7, #24]
 80202fe:	2b0f      	cmp	r3, #15
 8020300:	d909      	bls.n	8020316 <UART_SetConfig+0x48e>
 8020302:	69bb      	ldr	r3, [r7, #24]
 8020304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020308:	d205      	bcs.n	8020316 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802030a:	69bb      	ldr	r3, [r7, #24]
 802030c:	b29a      	uxth	r2, r3
 802030e:	68fb      	ldr	r3, [r7, #12]
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	60da      	str	r2, [r3, #12]
 8020314:	e002      	b.n	802031c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8020316:	2301      	movs	r3, #1
 8020318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802031c:	68fb      	ldr	r3, [r7, #12]
 802031e:	2200      	movs	r2, #0
 8020320:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8020322:	68fb      	ldr	r3, [r7, #12]
 8020324:	2200      	movs	r2, #0
 8020326:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8020328:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 802032c:	4618      	mov	r0, r3
 802032e:	3728      	adds	r7, #40	@ 0x28
 8020330:	46bd      	mov	sp, r7
 8020332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020336:	bf00      	nop
 8020338:	00f42400 	.word	0x00f42400

0802033c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802033c:	b480      	push	{r7}
 802033e:	b083      	sub	sp, #12
 8020340:	af00      	add	r7, sp, #0
 8020342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020348:	f003 0308 	and.w	r3, r3, #8
 802034c:	2b00      	cmp	r3, #0
 802034e:	d00a      	beq.n	8020366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	685b      	ldr	r3, [r3, #4]
 8020356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	430a      	orrs	r2, r1
 8020364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8020366:	687b      	ldr	r3, [r7, #4]
 8020368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802036a:	f003 0301 	and.w	r3, r3, #1
 802036e:	2b00      	cmp	r3, #0
 8020370:	d00a      	beq.n	8020388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020372:	687b      	ldr	r3, [r7, #4]
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	685b      	ldr	r3, [r3, #4]
 8020378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	430a      	orrs	r2, r1
 8020386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802038c:	f003 0302 	and.w	r3, r3, #2
 8020390:	2b00      	cmp	r3, #0
 8020392:	d00a      	beq.n	80203aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	685b      	ldr	r3, [r3, #4]
 802039a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	681b      	ldr	r3, [r3, #0]
 80203a6:	430a      	orrs	r2, r1
 80203a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203ae:	f003 0304 	and.w	r3, r3, #4
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	d00a      	beq.n	80203cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	681b      	ldr	r3, [r3, #0]
 80203ba:	685b      	ldr	r3, [r3, #4]
 80203bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	430a      	orrs	r2, r1
 80203ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203d0:	f003 0310 	and.w	r3, r3, #16
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d00a      	beq.n	80203ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	689b      	ldr	r3, [r3, #8]
 80203de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	681b      	ldr	r3, [r3, #0]
 80203ea:	430a      	orrs	r2, r1
 80203ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203f2:	f003 0320 	and.w	r3, r3, #32
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d00a      	beq.n	8020410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	689b      	ldr	r3, [r3, #8]
 8020400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	681b      	ldr	r3, [r3, #0]
 802040c:	430a      	orrs	r2, r1
 802040e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020418:	2b00      	cmp	r3, #0
 802041a:	d01a      	beq.n	8020452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	685b      	ldr	r3, [r3, #4]
 8020422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	430a      	orrs	r2, r1
 8020430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802043a:	d10a      	bne.n	8020452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	685b      	ldr	r3, [r3, #4]
 8020442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	430a      	orrs	r2, r1
 8020450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802045a:	2b00      	cmp	r3, #0
 802045c:	d00a      	beq.n	8020474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	685b      	ldr	r3, [r3, #4]
 8020464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	681b      	ldr	r3, [r3, #0]
 8020470:	430a      	orrs	r2, r1
 8020472:	605a      	str	r2, [r3, #4]
  }
}
 8020474:	bf00      	nop
 8020476:	370c      	adds	r7, #12
 8020478:	46bd      	mov	sp, r7
 802047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802047e:	4770      	bx	lr

08020480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020480:	b580      	push	{r7, lr}
 8020482:	b098      	sub	sp, #96	@ 0x60
 8020484:	af02      	add	r7, sp, #8
 8020486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	2200      	movs	r2, #0
 802048c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020490:	f7fb fb14 	bl	801babc <HAL_GetTick>
 8020494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	f003 0308 	and.w	r3, r3, #8
 80204a0:	2b08      	cmp	r3, #8
 80204a2:	d12e      	bne.n	8020502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80204a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80204a8:	9300      	str	r3, [sp, #0]
 80204aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80204ac:	2200      	movs	r2, #0
 80204ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80204b2:	6878      	ldr	r0, [r7, #4]
 80204b4:	f000 f88c 	bl	80205d0 <UART_WaitOnFlagUntilTimeout>
 80204b8:	4603      	mov	r3, r0
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	d021      	beq.n	8020502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80204c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204c6:	e853 3f00 	ldrex	r3, [r3]
 80204ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80204cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80204d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	461a      	mov	r2, r3
 80204da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80204dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80204de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80204e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80204e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80204e4:	e841 2300 	strex	r3, r2, [r1]
 80204e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80204ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	d1e6      	bne.n	80204be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	2220      	movs	r2, #32
 80204f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	2200      	movs	r2, #0
 80204fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80204fe:	2303      	movs	r3, #3
 8020500:	e062      	b.n	80205c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	f003 0304 	and.w	r3, r3, #4
 802050c:	2b04      	cmp	r3, #4
 802050e:	d149      	bne.n	80205a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020514:	9300      	str	r3, [sp, #0]
 8020516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020518:	2200      	movs	r2, #0
 802051a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 802051e:	6878      	ldr	r0, [r7, #4]
 8020520:	f000 f856 	bl	80205d0 <UART_WaitOnFlagUntilTimeout>
 8020524:	4603      	mov	r3, r0
 8020526:	2b00      	cmp	r3, #0
 8020528:	d03c      	beq.n	80205a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020532:	e853 3f00 	ldrex	r3, [r3]
 8020536:	623b      	str	r3, [r7, #32]
   return(result);
 8020538:	6a3b      	ldr	r3, [r7, #32]
 802053a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802053e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	461a      	mov	r2, r3
 8020546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020548:	633b      	str	r3, [r7, #48]	@ 0x30
 802054a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802054c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802054e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020550:	e841 2300 	strex	r3, r2, [r1]
 8020554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020558:	2b00      	cmp	r3, #0
 802055a:	d1e6      	bne.n	802052a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	3308      	adds	r3, #8
 8020562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020564:	693b      	ldr	r3, [r7, #16]
 8020566:	e853 3f00 	ldrex	r3, [r3]
 802056a:	60fb      	str	r3, [r7, #12]
   return(result);
 802056c:	68fb      	ldr	r3, [r7, #12]
 802056e:	f023 0301 	bic.w	r3, r3, #1
 8020572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	3308      	adds	r3, #8
 802057a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802057c:	61fa      	str	r2, [r7, #28]
 802057e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020580:	69b9      	ldr	r1, [r7, #24]
 8020582:	69fa      	ldr	r2, [r7, #28]
 8020584:	e841 2300 	strex	r3, r2, [r1]
 8020588:	617b      	str	r3, [r7, #20]
   return(result);
 802058a:	697b      	ldr	r3, [r7, #20]
 802058c:	2b00      	cmp	r3, #0
 802058e:	d1e5      	bne.n	802055c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	2220      	movs	r2, #32
 8020594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	2200      	movs	r2, #0
 802059c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80205a0:	2303      	movs	r3, #3
 80205a2:	e011      	b.n	80205c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	2220      	movs	r2, #32
 80205a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	2220      	movs	r2, #32
 80205ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	2200      	movs	r2, #0
 80205b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	2200      	movs	r2, #0
 80205bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80205be:	687b      	ldr	r3, [r7, #4]
 80205c0:	2200      	movs	r2, #0
 80205c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80205c6:	2300      	movs	r3, #0
}
 80205c8:	4618      	mov	r0, r3
 80205ca:	3758      	adds	r7, #88	@ 0x58
 80205cc:	46bd      	mov	sp, r7
 80205ce:	bd80      	pop	{r7, pc}

080205d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80205d0:	b580      	push	{r7, lr}
 80205d2:	b084      	sub	sp, #16
 80205d4:	af00      	add	r7, sp, #0
 80205d6:	60f8      	str	r0, [r7, #12]
 80205d8:	60b9      	str	r1, [r7, #8]
 80205da:	603b      	str	r3, [r7, #0]
 80205dc:	4613      	mov	r3, r2
 80205de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80205e0:	e04f      	b.n	8020682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80205e2:	69bb      	ldr	r3, [r7, #24]
 80205e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205e8:	d04b      	beq.n	8020682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80205ea:	f7fb fa67 	bl	801babc <HAL_GetTick>
 80205ee:	4602      	mov	r2, r0
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	1ad3      	subs	r3, r2, r3
 80205f4:	69ba      	ldr	r2, [r7, #24]
 80205f6:	429a      	cmp	r2, r3
 80205f8:	d302      	bcc.n	8020600 <UART_WaitOnFlagUntilTimeout+0x30>
 80205fa:	69bb      	ldr	r3, [r7, #24]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d101      	bne.n	8020604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8020600:	2303      	movs	r3, #3
 8020602:	e04e      	b.n	80206a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8020604:	68fb      	ldr	r3, [r7, #12]
 8020606:	681b      	ldr	r3, [r3, #0]
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	f003 0304 	and.w	r3, r3, #4
 802060e:	2b00      	cmp	r3, #0
 8020610:	d037      	beq.n	8020682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020612:	68bb      	ldr	r3, [r7, #8]
 8020614:	2b80      	cmp	r3, #128	@ 0x80
 8020616:	d034      	beq.n	8020682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020618:	68bb      	ldr	r3, [r7, #8]
 802061a:	2b40      	cmp	r3, #64	@ 0x40
 802061c:	d031      	beq.n	8020682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802061e:	68fb      	ldr	r3, [r7, #12]
 8020620:	681b      	ldr	r3, [r3, #0]
 8020622:	69db      	ldr	r3, [r3, #28]
 8020624:	f003 0308 	and.w	r3, r3, #8
 8020628:	2b08      	cmp	r3, #8
 802062a:	d110      	bne.n	802064e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802062c:	68fb      	ldr	r3, [r7, #12]
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	2208      	movs	r2, #8
 8020632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020634:	68f8      	ldr	r0, [r7, #12]
 8020636:	f000 f8ff 	bl	8020838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802063a:	68fb      	ldr	r3, [r7, #12]
 802063c:	2208      	movs	r2, #8
 802063e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020642:	68fb      	ldr	r3, [r7, #12]
 8020644:	2200      	movs	r2, #0
 8020646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 802064a:	2301      	movs	r3, #1
 802064c:	e029      	b.n	80206a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	69db      	ldr	r3, [r3, #28]
 8020654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8020658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802065c:	d111      	bne.n	8020682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802065e:	68fb      	ldr	r3, [r7, #12]
 8020660:	681b      	ldr	r3, [r3, #0]
 8020662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8020666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020668:	68f8      	ldr	r0, [r7, #12]
 802066a:	f000 f8e5 	bl	8020838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	2220      	movs	r2, #32
 8020672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	2200      	movs	r2, #0
 802067a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 802067e:	2303      	movs	r3, #3
 8020680:	e00f      	b.n	80206a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	681b      	ldr	r3, [r3, #0]
 8020686:	69da      	ldr	r2, [r3, #28]
 8020688:	68bb      	ldr	r3, [r7, #8]
 802068a:	4013      	ands	r3, r2
 802068c:	68ba      	ldr	r2, [r7, #8]
 802068e:	429a      	cmp	r2, r3
 8020690:	bf0c      	ite	eq
 8020692:	2301      	moveq	r3, #1
 8020694:	2300      	movne	r3, #0
 8020696:	b2db      	uxtb	r3, r3
 8020698:	461a      	mov	r2, r3
 802069a:	79fb      	ldrb	r3, [r7, #7]
 802069c:	429a      	cmp	r2, r3
 802069e:	d0a0      	beq.n	80205e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80206a0:	2300      	movs	r3, #0
}
 80206a2:	4618      	mov	r0, r3
 80206a4:	3710      	adds	r7, #16
 80206a6:	46bd      	mov	sp, r7
 80206a8:	bd80      	pop	{r7, pc}
	...

080206ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80206ac:	b480      	push	{r7}
 80206ae:	b097      	sub	sp, #92	@ 0x5c
 80206b0:	af00      	add	r7, sp, #0
 80206b2:	60f8      	str	r0, [r7, #12]
 80206b4:	60b9      	str	r1, [r7, #8]
 80206b6:	4613      	mov	r3, r2
 80206b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	68ba      	ldr	r2, [r7, #8]
 80206be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80206c0:	68fb      	ldr	r3, [r7, #12]
 80206c2:	88fa      	ldrh	r2, [r7, #6]
 80206c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	88fa      	ldrh	r2, [r7, #6]
 80206cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	2200      	movs	r2, #0
 80206d4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	689b      	ldr	r3, [r3, #8]
 80206da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80206de:	d10e      	bne.n	80206fe <UART_Start_Receive_IT+0x52>
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	691b      	ldr	r3, [r3, #16]
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d105      	bne.n	80206f4 <UART_Start_Receive_IT+0x48>
 80206e8:	68fb      	ldr	r3, [r7, #12]
 80206ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80206ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80206f2:	e02d      	b.n	8020750 <UART_Start_Receive_IT+0xa4>
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	22ff      	movs	r2, #255	@ 0xff
 80206f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80206fc:	e028      	b.n	8020750 <UART_Start_Receive_IT+0xa4>
 80206fe:	68fb      	ldr	r3, [r7, #12]
 8020700:	689b      	ldr	r3, [r3, #8]
 8020702:	2b00      	cmp	r3, #0
 8020704:	d10d      	bne.n	8020722 <UART_Start_Receive_IT+0x76>
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	691b      	ldr	r3, [r3, #16]
 802070a:	2b00      	cmp	r3, #0
 802070c:	d104      	bne.n	8020718 <UART_Start_Receive_IT+0x6c>
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	22ff      	movs	r2, #255	@ 0xff
 8020712:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020716:	e01b      	b.n	8020750 <UART_Start_Receive_IT+0xa4>
 8020718:	68fb      	ldr	r3, [r7, #12]
 802071a:	227f      	movs	r2, #127	@ 0x7f
 802071c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020720:	e016      	b.n	8020750 <UART_Start_Receive_IT+0xa4>
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	689b      	ldr	r3, [r3, #8]
 8020726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802072a:	d10d      	bne.n	8020748 <UART_Start_Receive_IT+0x9c>
 802072c:	68fb      	ldr	r3, [r7, #12]
 802072e:	691b      	ldr	r3, [r3, #16]
 8020730:	2b00      	cmp	r3, #0
 8020732:	d104      	bne.n	802073e <UART_Start_Receive_IT+0x92>
 8020734:	68fb      	ldr	r3, [r7, #12]
 8020736:	227f      	movs	r2, #127	@ 0x7f
 8020738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 802073c:	e008      	b.n	8020750 <UART_Start_Receive_IT+0xa4>
 802073e:	68fb      	ldr	r3, [r7, #12]
 8020740:	223f      	movs	r2, #63	@ 0x3f
 8020742:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020746:	e003      	b.n	8020750 <UART_Start_Receive_IT+0xa4>
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	2200      	movs	r2, #0
 802074c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020750:	68fb      	ldr	r3, [r7, #12]
 8020752:	2200      	movs	r2, #0
 8020754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	2222      	movs	r2, #34	@ 0x22
 802075c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020760:	68fb      	ldr	r3, [r7, #12]
 8020762:	681b      	ldr	r3, [r3, #0]
 8020764:	3308      	adds	r3, #8
 8020766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802076a:	e853 3f00 	ldrex	r3, [r3]
 802076e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020772:	f043 0301 	orr.w	r3, r3, #1
 8020776:	657b      	str	r3, [r7, #84]	@ 0x54
 8020778:	68fb      	ldr	r3, [r7, #12]
 802077a:	681b      	ldr	r3, [r3, #0]
 802077c:	3308      	adds	r3, #8
 802077e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8020780:	64ba      	str	r2, [r7, #72]	@ 0x48
 8020782:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020784:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020788:	e841 2300 	strex	r3, r2, [r1]
 802078c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 802078e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020790:	2b00      	cmp	r3, #0
 8020792:	d1e5      	bne.n	8020760 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	689b      	ldr	r3, [r3, #8]
 8020798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802079c:	d107      	bne.n	80207ae <UART_Start_Receive_IT+0x102>
 802079e:	68fb      	ldr	r3, [r7, #12]
 80207a0:	691b      	ldr	r3, [r3, #16]
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d103      	bne.n	80207ae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80207a6:	68fb      	ldr	r3, [r7, #12]
 80207a8:	4a21      	ldr	r2, [pc, #132]	@ (8020830 <UART_Start_Receive_IT+0x184>)
 80207aa:	669a      	str	r2, [r3, #104]	@ 0x68
 80207ac:	e002      	b.n	80207b4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80207ae:	68fb      	ldr	r3, [r7, #12]
 80207b0:	4a20      	ldr	r2, [pc, #128]	@ (8020834 <UART_Start_Receive_IT+0x188>)
 80207b2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	691b      	ldr	r3, [r3, #16]
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d019      	beq.n	80207f0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80207c4:	e853 3f00 	ldrex	r3, [r3]
 80207c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80207ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207cc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80207d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80207d2:	68fb      	ldr	r3, [r7, #12]
 80207d4:	681b      	ldr	r3, [r3, #0]
 80207d6:	461a      	mov	r2, r3
 80207d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80207da:	637b      	str	r3, [r7, #52]	@ 0x34
 80207dc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80207e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80207e2:	e841 2300 	strex	r3, r2, [r1]
 80207e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80207e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	d1e6      	bne.n	80207bc <UART_Start_Receive_IT+0x110>
 80207ee:	e018      	b.n	8020822 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	681b      	ldr	r3, [r3, #0]
 80207f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207f6:	697b      	ldr	r3, [r7, #20]
 80207f8:	e853 3f00 	ldrex	r3, [r3]
 80207fc:	613b      	str	r3, [r7, #16]
   return(result);
 80207fe:	693b      	ldr	r3, [r7, #16]
 8020800:	f043 0320 	orr.w	r3, r3, #32
 8020804:	653b      	str	r3, [r7, #80]	@ 0x50
 8020806:	68fb      	ldr	r3, [r7, #12]
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	461a      	mov	r2, r3
 802080c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802080e:	623b      	str	r3, [r7, #32]
 8020810:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020812:	69f9      	ldr	r1, [r7, #28]
 8020814:	6a3a      	ldr	r2, [r7, #32]
 8020816:	e841 2300 	strex	r3, r2, [r1]
 802081a:	61bb      	str	r3, [r7, #24]
   return(result);
 802081c:	69bb      	ldr	r3, [r7, #24]
 802081e:	2b00      	cmp	r3, #0
 8020820:	d1e6      	bne.n	80207f0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8020822:	2300      	movs	r3, #0
}
 8020824:	4618      	mov	r0, r3
 8020826:	375c      	adds	r7, #92	@ 0x5c
 8020828:	46bd      	mov	sp, r7
 802082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802082e:	4770      	bx	lr
 8020830:	08020b3d 	.word	0x08020b3d
 8020834:	08020981 	.word	0x08020981

08020838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020838:	b480      	push	{r7}
 802083a:	b095      	sub	sp, #84	@ 0x54
 802083c:	af00      	add	r7, sp, #0
 802083e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	681b      	ldr	r3, [r3, #0]
 8020844:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020848:	e853 3f00 	ldrex	r3, [r3]
 802084c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	461a      	mov	r2, r3
 802085c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802085e:	643b      	str	r3, [r7, #64]	@ 0x40
 8020860:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020862:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020866:	e841 2300 	strex	r3, r2, [r1]
 802086a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802086c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802086e:	2b00      	cmp	r3, #0
 8020870:	d1e6      	bne.n	8020840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	3308      	adds	r3, #8
 8020878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802087a:	6a3b      	ldr	r3, [r7, #32]
 802087c:	e853 3f00 	ldrex	r3, [r3]
 8020880:	61fb      	str	r3, [r7, #28]
   return(result);
 8020882:	69fb      	ldr	r3, [r7, #28]
 8020884:	f023 0301 	bic.w	r3, r3, #1
 8020888:	64bb      	str	r3, [r7, #72]	@ 0x48
 802088a:	687b      	ldr	r3, [r7, #4]
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	3308      	adds	r3, #8
 8020890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8020894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802089a:	e841 2300 	strex	r3, r2, [r1]
 802089e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80208a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d1e5      	bne.n	8020872 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80208a6:	687b      	ldr	r3, [r7, #4]
 80208a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80208aa:	2b01      	cmp	r3, #1
 80208ac:	d118      	bne.n	80208e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	681b      	ldr	r3, [r3, #0]
 80208b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	e853 3f00 	ldrex	r3, [r3]
 80208ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80208bc:	68bb      	ldr	r3, [r7, #8]
 80208be:	f023 0310 	bic.w	r3, r3, #16
 80208c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	461a      	mov	r2, r3
 80208ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80208cc:	61bb      	str	r3, [r7, #24]
 80208ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208d0:	6979      	ldr	r1, [r7, #20]
 80208d2:	69ba      	ldr	r2, [r7, #24]
 80208d4:	e841 2300 	strex	r3, r2, [r1]
 80208d8:	613b      	str	r3, [r7, #16]
   return(result);
 80208da:	693b      	ldr	r3, [r7, #16]
 80208dc:	2b00      	cmp	r3, #0
 80208de:	d1e6      	bne.n	80208ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	2220      	movs	r2, #32
 80208e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	2200      	movs	r2, #0
 80208ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	2200      	movs	r2, #0
 80208f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80208f4:	bf00      	nop
 80208f6:	3754      	adds	r7, #84	@ 0x54
 80208f8:	46bd      	mov	sp, r7
 80208fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208fe:	4770      	bx	lr

08020900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020900:	b580      	push	{r7, lr}
 8020902:	b084      	sub	sp, #16
 8020904:	af00      	add	r7, sp, #0
 8020906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802090c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 802090e:	68fb      	ldr	r3, [r7, #12]
 8020910:	2200      	movs	r2, #0
 8020912:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8020916:	68fb      	ldr	r3, [r7, #12]
 8020918:	2200      	movs	r2, #0
 802091a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802091e:	68f8      	ldr	r0, [r7, #12]
 8020920:	f7ff fa9c 	bl	801fe5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8020924:	bf00      	nop
 8020926:	3710      	adds	r7, #16
 8020928:	46bd      	mov	sp, r7
 802092a:	bd80      	pop	{r7, pc}

0802092c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802092c:	b580      	push	{r7, lr}
 802092e:	b088      	sub	sp, #32
 8020930:	af00      	add	r7, sp, #0
 8020932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	e853 3f00 	ldrex	r3, [r3]
 8020940:	60bb      	str	r3, [r7, #8]
   return(result);
 8020942:	68bb      	ldr	r3, [r7, #8]
 8020944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020948:	61fb      	str	r3, [r7, #28]
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	461a      	mov	r2, r3
 8020950:	69fb      	ldr	r3, [r7, #28]
 8020952:	61bb      	str	r3, [r7, #24]
 8020954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020956:	6979      	ldr	r1, [r7, #20]
 8020958:	69ba      	ldr	r2, [r7, #24]
 802095a:	e841 2300 	strex	r3, r2, [r1]
 802095e:	613b      	str	r3, [r7, #16]
   return(result);
 8020960:	693b      	ldr	r3, [r7, #16]
 8020962:	2b00      	cmp	r3, #0
 8020964:	d1e6      	bne.n	8020934 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	2220      	movs	r2, #32
 802096a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	2200      	movs	r2, #0
 8020970:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8020972:	6878      	ldr	r0, [r7, #4]
 8020974:	f7ff fa68 	bl	801fe48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8020978:	bf00      	nop
 802097a:	3720      	adds	r7, #32
 802097c:	46bd      	mov	sp, r7
 802097e:	bd80      	pop	{r7, pc}

08020980 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8020980:	b580      	push	{r7, lr}
 8020982:	b09c      	sub	sp, #112	@ 0x70
 8020984:	af00      	add	r7, sp, #0
 8020986:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 802098e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020998:	2b22      	cmp	r3, #34	@ 0x22
 802099a:	f040 80be 	bne.w	8020b1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80209a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80209a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80209ac:	b2d9      	uxtb	r1, r3
 80209ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80209b2:	b2da      	uxtb	r2, r3
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80209b8:	400a      	ands	r2, r1
 80209ba:	b2d2      	uxtb	r2, r2
 80209bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80209c2:	1c5a      	adds	r2, r3, #1
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80209ce:	b29b      	uxth	r3, r3
 80209d0:	3b01      	subs	r3, #1
 80209d2:	b29a      	uxth	r2, r3
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80209e0:	b29b      	uxth	r3, r3
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	f040 80a3 	bne.w	8020b2e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80209ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80209f0:	e853 3f00 	ldrex	r3, [r3]
 80209f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80209f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80209f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80209fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	461a      	mov	r2, r3
 8020a04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020a06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020a08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020a0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8020a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8020a0e:	e841 2300 	strex	r3, r2, [r1]
 8020a12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8020a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d1e6      	bne.n	80209e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	3308      	adds	r3, #8
 8020a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a24:	e853 3f00 	ldrex	r3, [r3]
 8020a28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8020a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020a2c:	f023 0301 	bic.w	r3, r3, #1
 8020a30:	667b      	str	r3, [r7, #100]	@ 0x64
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	3308      	adds	r3, #8
 8020a38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8020a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8020a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020a3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020a42:	e841 2300 	strex	r3, r2, [r1]
 8020a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8020a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	d1e5      	bne.n	8020a1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	2220      	movs	r2, #32
 8020a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	2200      	movs	r2, #0
 8020a5a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	2200      	movs	r2, #0
 8020a60:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	4a34      	ldr	r2, [pc, #208]	@ (8020b38 <UART_RxISR_8BIT+0x1b8>)
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	d01f      	beq.n	8020aac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	685b      	ldr	r3, [r3, #4]
 8020a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d018      	beq.n	8020aac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a82:	e853 3f00 	ldrex	r3, [r3]
 8020a86:	623b      	str	r3, [r7, #32]
   return(result);
 8020a88:	6a3b      	ldr	r3, [r7, #32]
 8020a8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8020a8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	681b      	ldr	r3, [r3, #0]
 8020a94:	461a      	mov	r2, r3
 8020a96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8020a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020aa0:	e841 2300 	strex	r3, r2, [r1]
 8020aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d1e6      	bne.n	8020a7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020ab0:	2b01      	cmp	r3, #1
 8020ab2:	d12e      	bne.n	8020b12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	2200      	movs	r2, #0
 8020ab8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	681b      	ldr	r3, [r3, #0]
 8020abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ac0:	693b      	ldr	r3, [r7, #16]
 8020ac2:	e853 3f00 	ldrex	r3, [r3]
 8020ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8020ac8:	68fb      	ldr	r3, [r7, #12]
 8020aca:	f023 0310 	bic.w	r3, r3, #16
 8020ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	461a      	mov	r2, r3
 8020ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020ad8:	61fb      	str	r3, [r7, #28]
 8020ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020adc:	69b9      	ldr	r1, [r7, #24]
 8020ade:	69fa      	ldr	r2, [r7, #28]
 8020ae0:	e841 2300 	strex	r3, r2, [r1]
 8020ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8020ae6:	697b      	ldr	r3, [r7, #20]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d1e6      	bne.n	8020aba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	681b      	ldr	r3, [r3, #0]
 8020af0:	69db      	ldr	r3, [r3, #28]
 8020af2:	f003 0310 	and.w	r3, r3, #16
 8020af6:	2b10      	cmp	r3, #16
 8020af8:	d103      	bne.n	8020b02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	2210      	movs	r2, #16
 8020b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8020b08:	4619      	mov	r1, r3
 8020b0a:	6878      	ldr	r0, [r7, #4]
 8020b0c:	f7ff f9b0 	bl	801fe70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020b10:	e00d      	b.n	8020b2e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8020b12:	6878      	ldr	r0, [r7, #4]
 8020b14:	f7e0 ff9e 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 8020b18:	e009      	b.n	8020b2e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	681b      	ldr	r3, [r3, #0]
 8020b1e:	8b1b      	ldrh	r3, [r3, #24]
 8020b20:	b29a      	uxth	r2, r3
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	f042 0208 	orr.w	r2, r2, #8
 8020b2a:	b292      	uxth	r2, r2
 8020b2c:	831a      	strh	r2, [r3, #24]
}
 8020b2e:	bf00      	nop
 8020b30:	3770      	adds	r7, #112	@ 0x70
 8020b32:	46bd      	mov	sp, r7
 8020b34:	bd80      	pop	{r7, pc}
 8020b36:	bf00      	nop
 8020b38:	40008000 	.word	0x40008000

08020b3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	b09c      	sub	sp, #112	@ 0x70
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8020b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020b54:	2b22      	cmp	r3, #34	@ 0x22
 8020b56:	f040 80be 	bne.w	8020cd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	681b      	ldr	r3, [r3, #0]
 8020b5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8020b60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020b68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8020b6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8020b6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8020b72:	4013      	ands	r3, r2
 8020b74:	b29a      	uxth	r2, r3
 8020b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020b78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020b7e:	1c9a      	adds	r2, r3, #2
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8020b8a:	b29b      	uxth	r3, r3
 8020b8c:	3b01      	subs	r3, #1
 8020b8e:	b29a      	uxth	r2, r3
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8020b9c:	b29b      	uxth	r3, r3
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	f040 80a3 	bne.w	8020cea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	681b      	ldr	r3, [r3, #0]
 8020ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020bac:	e853 3f00 	ldrex	r3, [r3]
 8020bb0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8020bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020bb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	681b      	ldr	r3, [r3, #0]
 8020bbe:	461a      	mov	r2, r3
 8020bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8020bc4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020bc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8020bc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8020bca:	e841 2300 	strex	r3, r2, [r1]
 8020bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8020bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d1e6      	bne.n	8020ba4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	3308      	adds	r3, #8
 8020bdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020be0:	e853 3f00 	ldrex	r3, [r3]
 8020be4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8020be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020be8:	f023 0301 	bic.w	r3, r3, #1
 8020bec:	663b      	str	r3, [r7, #96]	@ 0x60
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	3308      	adds	r3, #8
 8020bf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8020bf6:	643a      	str	r2, [r7, #64]	@ 0x40
 8020bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020bfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020bfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020bfe:	e841 2300 	strex	r3, r2, [r1]
 8020c02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	d1e5      	bne.n	8020bd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8020c0a:	687b      	ldr	r3, [r7, #4]
 8020c0c:	2220      	movs	r2, #32
 8020c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	2200      	movs	r2, #0
 8020c16:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	4a34      	ldr	r2, [pc, #208]	@ (8020cf4 <UART_RxISR_16BIT+0x1b8>)
 8020c24:	4293      	cmp	r3, r2
 8020c26:	d01f      	beq.n	8020c68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	681b      	ldr	r3, [r3, #0]
 8020c2c:	685b      	ldr	r3, [r3, #4]
 8020c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d018      	beq.n	8020c68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c3c:	6a3b      	ldr	r3, [r7, #32]
 8020c3e:	e853 3f00 	ldrex	r3, [r3]
 8020c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8020c44:	69fb      	ldr	r3, [r7, #28]
 8020c46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8020c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020c4c:	687b      	ldr	r3, [r7, #4]
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	461a      	mov	r2, r3
 8020c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020c56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020c5c:	e841 2300 	strex	r3, r2, [r1]
 8020c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8020c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c64:	2b00      	cmp	r3, #0
 8020c66:	d1e6      	bne.n	8020c36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020c6c:	2b01      	cmp	r3, #1
 8020c6e:	d12e      	bne.n	8020cce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	2200      	movs	r2, #0
 8020c74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c7c:	68fb      	ldr	r3, [r7, #12]
 8020c7e:	e853 3f00 	ldrex	r3, [r3]
 8020c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8020c84:	68bb      	ldr	r3, [r7, #8]
 8020c86:	f023 0310 	bic.w	r3, r3, #16
 8020c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	461a      	mov	r2, r3
 8020c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020c94:	61bb      	str	r3, [r7, #24]
 8020c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c98:	6979      	ldr	r1, [r7, #20]
 8020c9a:	69ba      	ldr	r2, [r7, #24]
 8020c9c:	e841 2300 	strex	r3, r2, [r1]
 8020ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8020ca2:	693b      	ldr	r3, [r7, #16]
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	d1e6      	bne.n	8020c76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	69db      	ldr	r3, [r3, #28]
 8020cae:	f003 0310 	and.w	r3, r3, #16
 8020cb2:	2b10      	cmp	r3, #16
 8020cb4:	d103      	bne.n	8020cbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	2210      	movs	r2, #16
 8020cbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8020cc4:	4619      	mov	r1, r3
 8020cc6:	6878      	ldr	r0, [r7, #4]
 8020cc8:	f7ff f8d2 	bl	801fe70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020ccc:	e00d      	b.n	8020cea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8020cce:	6878      	ldr	r0, [r7, #4]
 8020cd0:	f7e0 fec0 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 8020cd4:	e009      	b.n	8020cea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	681b      	ldr	r3, [r3, #0]
 8020cda:	8b1b      	ldrh	r3, [r3, #24]
 8020cdc:	b29a      	uxth	r2, r3
 8020cde:	687b      	ldr	r3, [r7, #4]
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	f042 0208 	orr.w	r2, r2, #8
 8020ce6:	b292      	uxth	r2, r2
 8020ce8:	831a      	strh	r2, [r3, #24]
}
 8020cea:	bf00      	nop
 8020cec:	3770      	adds	r7, #112	@ 0x70
 8020cee:	46bd      	mov	sp, r7
 8020cf0:	bd80      	pop	{r7, pc}
 8020cf2:	bf00      	nop
 8020cf4:	40008000 	.word	0x40008000

08020cf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8020cf8:	b480      	push	{r7}
 8020cfa:	b083      	sub	sp, #12
 8020cfc:	af00      	add	r7, sp, #0
 8020cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8020d00:	bf00      	nop
 8020d02:	370c      	adds	r7, #12
 8020d04:	46bd      	mov	sp, r7
 8020d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0a:	4770      	bx	lr

08020d0c <__cvt>:
 8020d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020d10:	ec57 6b10 	vmov	r6, r7, d0
 8020d14:	2f00      	cmp	r7, #0
 8020d16:	460c      	mov	r4, r1
 8020d18:	4619      	mov	r1, r3
 8020d1a:	463b      	mov	r3, r7
 8020d1c:	bfbb      	ittet	lt
 8020d1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8020d22:	461f      	movlt	r7, r3
 8020d24:	2300      	movge	r3, #0
 8020d26:	232d      	movlt	r3, #45	@ 0x2d
 8020d28:	700b      	strb	r3, [r1, #0]
 8020d2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8020d30:	4691      	mov	r9, r2
 8020d32:	f023 0820 	bic.w	r8, r3, #32
 8020d36:	bfbc      	itt	lt
 8020d38:	4632      	movlt	r2, r6
 8020d3a:	4616      	movlt	r6, r2
 8020d3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8020d40:	d005      	beq.n	8020d4e <__cvt+0x42>
 8020d42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8020d46:	d100      	bne.n	8020d4a <__cvt+0x3e>
 8020d48:	3401      	adds	r4, #1
 8020d4a:	2102      	movs	r1, #2
 8020d4c:	e000      	b.n	8020d50 <__cvt+0x44>
 8020d4e:	2103      	movs	r1, #3
 8020d50:	ab03      	add	r3, sp, #12
 8020d52:	9301      	str	r3, [sp, #4]
 8020d54:	ab02      	add	r3, sp, #8
 8020d56:	9300      	str	r3, [sp, #0]
 8020d58:	ec47 6b10 	vmov	d0, r6, r7
 8020d5c:	4653      	mov	r3, sl
 8020d5e:	4622      	mov	r2, r4
 8020d60:	f001 f876 	bl	8021e50 <_dtoa_r>
 8020d64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8020d68:	4605      	mov	r5, r0
 8020d6a:	d119      	bne.n	8020da0 <__cvt+0x94>
 8020d6c:	f019 0f01 	tst.w	r9, #1
 8020d70:	d00e      	beq.n	8020d90 <__cvt+0x84>
 8020d72:	eb00 0904 	add.w	r9, r0, r4
 8020d76:	2200      	movs	r2, #0
 8020d78:	2300      	movs	r3, #0
 8020d7a:	4630      	mov	r0, r6
 8020d7c:	4639      	mov	r1, r7
 8020d7e:	f7df fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 8020d82:	b108      	cbz	r0, 8020d88 <__cvt+0x7c>
 8020d84:	f8cd 900c 	str.w	r9, [sp, #12]
 8020d88:	2230      	movs	r2, #48	@ 0x30
 8020d8a:	9b03      	ldr	r3, [sp, #12]
 8020d8c:	454b      	cmp	r3, r9
 8020d8e:	d31e      	bcc.n	8020dce <__cvt+0xc2>
 8020d90:	9b03      	ldr	r3, [sp, #12]
 8020d92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020d94:	1b5b      	subs	r3, r3, r5
 8020d96:	4628      	mov	r0, r5
 8020d98:	6013      	str	r3, [r2, #0]
 8020d9a:	b004      	add	sp, #16
 8020d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020da0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8020da4:	eb00 0904 	add.w	r9, r0, r4
 8020da8:	d1e5      	bne.n	8020d76 <__cvt+0x6a>
 8020daa:	7803      	ldrb	r3, [r0, #0]
 8020dac:	2b30      	cmp	r3, #48	@ 0x30
 8020dae:	d10a      	bne.n	8020dc6 <__cvt+0xba>
 8020db0:	2200      	movs	r2, #0
 8020db2:	2300      	movs	r3, #0
 8020db4:	4630      	mov	r0, r6
 8020db6:	4639      	mov	r1, r7
 8020db8:	f7df fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8020dbc:	b918      	cbnz	r0, 8020dc6 <__cvt+0xba>
 8020dbe:	f1c4 0401 	rsb	r4, r4, #1
 8020dc2:	f8ca 4000 	str.w	r4, [sl]
 8020dc6:	f8da 3000 	ldr.w	r3, [sl]
 8020dca:	4499      	add	r9, r3
 8020dcc:	e7d3      	b.n	8020d76 <__cvt+0x6a>
 8020dce:	1c59      	adds	r1, r3, #1
 8020dd0:	9103      	str	r1, [sp, #12]
 8020dd2:	701a      	strb	r2, [r3, #0]
 8020dd4:	e7d9      	b.n	8020d8a <__cvt+0x7e>

08020dd6 <__exponent>:
 8020dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020dd8:	2900      	cmp	r1, #0
 8020dda:	bfba      	itte	lt
 8020ddc:	4249      	neglt	r1, r1
 8020dde:	232d      	movlt	r3, #45	@ 0x2d
 8020de0:	232b      	movge	r3, #43	@ 0x2b
 8020de2:	2909      	cmp	r1, #9
 8020de4:	7002      	strb	r2, [r0, #0]
 8020de6:	7043      	strb	r3, [r0, #1]
 8020de8:	dd29      	ble.n	8020e3e <__exponent+0x68>
 8020dea:	f10d 0307 	add.w	r3, sp, #7
 8020dee:	461d      	mov	r5, r3
 8020df0:	270a      	movs	r7, #10
 8020df2:	461a      	mov	r2, r3
 8020df4:	fbb1 f6f7 	udiv	r6, r1, r7
 8020df8:	fb07 1416 	mls	r4, r7, r6, r1
 8020dfc:	3430      	adds	r4, #48	@ 0x30
 8020dfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8020e02:	460c      	mov	r4, r1
 8020e04:	2c63      	cmp	r4, #99	@ 0x63
 8020e06:	f103 33ff 	add.w	r3, r3, #4294967295
 8020e0a:	4631      	mov	r1, r6
 8020e0c:	dcf1      	bgt.n	8020df2 <__exponent+0x1c>
 8020e0e:	3130      	adds	r1, #48	@ 0x30
 8020e10:	1e94      	subs	r4, r2, #2
 8020e12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8020e16:	1c41      	adds	r1, r0, #1
 8020e18:	4623      	mov	r3, r4
 8020e1a:	42ab      	cmp	r3, r5
 8020e1c:	d30a      	bcc.n	8020e34 <__exponent+0x5e>
 8020e1e:	f10d 0309 	add.w	r3, sp, #9
 8020e22:	1a9b      	subs	r3, r3, r2
 8020e24:	42ac      	cmp	r4, r5
 8020e26:	bf88      	it	hi
 8020e28:	2300      	movhi	r3, #0
 8020e2a:	3302      	adds	r3, #2
 8020e2c:	4403      	add	r3, r0
 8020e2e:	1a18      	subs	r0, r3, r0
 8020e30:	b003      	add	sp, #12
 8020e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8020e38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8020e3c:	e7ed      	b.n	8020e1a <__exponent+0x44>
 8020e3e:	2330      	movs	r3, #48	@ 0x30
 8020e40:	3130      	adds	r1, #48	@ 0x30
 8020e42:	7083      	strb	r3, [r0, #2]
 8020e44:	70c1      	strb	r1, [r0, #3]
 8020e46:	1d03      	adds	r3, r0, #4
 8020e48:	e7f1      	b.n	8020e2e <__exponent+0x58>
	...

08020e4c <_printf_float>:
 8020e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e50:	b08d      	sub	sp, #52	@ 0x34
 8020e52:	460c      	mov	r4, r1
 8020e54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020e58:	4616      	mov	r6, r2
 8020e5a:	461f      	mov	r7, r3
 8020e5c:	4605      	mov	r5, r0
 8020e5e:	f000 fee7 	bl	8021c30 <_localeconv_r>
 8020e62:	6803      	ldr	r3, [r0, #0]
 8020e64:	9304      	str	r3, [sp, #16]
 8020e66:	4618      	mov	r0, r3
 8020e68:	f7df fa02 	bl	8000270 <strlen>
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020e70:	f8d8 3000 	ldr.w	r3, [r8]
 8020e74:	9005      	str	r0, [sp, #20]
 8020e76:	3307      	adds	r3, #7
 8020e78:	f023 0307 	bic.w	r3, r3, #7
 8020e7c:	f103 0208 	add.w	r2, r3, #8
 8020e80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8020e84:	f8d4 b000 	ldr.w	fp, [r4]
 8020e88:	f8c8 2000 	str.w	r2, [r8]
 8020e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020e90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8020e94:	9307      	str	r3, [sp, #28]
 8020e96:	f8cd 8018 	str.w	r8, [sp, #24]
 8020e9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8020e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020ea2:	4b9c      	ldr	r3, [pc, #624]	@ (8021114 <_printf_float+0x2c8>)
 8020ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8020ea8:	f7df fe40 	bl	8000b2c <__aeabi_dcmpun>
 8020eac:	bb70      	cbnz	r0, 8020f0c <_printf_float+0xc0>
 8020eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020eb2:	4b98      	ldr	r3, [pc, #608]	@ (8021114 <_printf_float+0x2c8>)
 8020eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8020eb8:	f7df fe1a 	bl	8000af0 <__aeabi_dcmple>
 8020ebc:	bb30      	cbnz	r0, 8020f0c <_printf_float+0xc0>
 8020ebe:	2200      	movs	r2, #0
 8020ec0:	2300      	movs	r3, #0
 8020ec2:	4640      	mov	r0, r8
 8020ec4:	4649      	mov	r1, r9
 8020ec6:	f7df fe09 	bl	8000adc <__aeabi_dcmplt>
 8020eca:	b110      	cbz	r0, 8020ed2 <_printf_float+0x86>
 8020ecc:	232d      	movs	r3, #45	@ 0x2d
 8020ece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020ed2:	4a91      	ldr	r2, [pc, #580]	@ (8021118 <_printf_float+0x2cc>)
 8020ed4:	4b91      	ldr	r3, [pc, #580]	@ (802111c <_printf_float+0x2d0>)
 8020ed6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8020eda:	bf8c      	ite	hi
 8020edc:	4690      	movhi	r8, r2
 8020ede:	4698      	movls	r8, r3
 8020ee0:	2303      	movs	r3, #3
 8020ee2:	6123      	str	r3, [r4, #16]
 8020ee4:	f02b 0304 	bic.w	r3, fp, #4
 8020ee8:	6023      	str	r3, [r4, #0]
 8020eea:	f04f 0900 	mov.w	r9, #0
 8020eee:	9700      	str	r7, [sp, #0]
 8020ef0:	4633      	mov	r3, r6
 8020ef2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8020ef4:	4621      	mov	r1, r4
 8020ef6:	4628      	mov	r0, r5
 8020ef8:	f000 f9d2 	bl	80212a0 <_printf_common>
 8020efc:	3001      	adds	r0, #1
 8020efe:	f040 808d 	bne.w	802101c <_printf_float+0x1d0>
 8020f02:	f04f 30ff 	mov.w	r0, #4294967295
 8020f06:	b00d      	add	sp, #52	@ 0x34
 8020f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f0c:	4642      	mov	r2, r8
 8020f0e:	464b      	mov	r3, r9
 8020f10:	4640      	mov	r0, r8
 8020f12:	4649      	mov	r1, r9
 8020f14:	f7df fe0a 	bl	8000b2c <__aeabi_dcmpun>
 8020f18:	b140      	cbz	r0, 8020f2c <_printf_float+0xe0>
 8020f1a:	464b      	mov	r3, r9
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	bfbc      	itt	lt
 8020f20:	232d      	movlt	r3, #45	@ 0x2d
 8020f22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8020f26:	4a7e      	ldr	r2, [pc, #504]	@ (8021120 <_printf_float+0x2d4>)
 8020f28:	4b7e      	ldr	r3, [pc, #504]	@ (8021124 <_printf_float+0x2d8>)
 8020f2a:	e7d4      	b.n	8020ed6 <_printf_float+0x8a>
 8020f2c:	6863      	ldr	r3, [r4, #4]
 8020f2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8020f32:	9206      	str	r2, [sp, #24]
 8020f34:	1c5a      	adds	r2, r3, #1
 8020f36:	d13b      	bne.n	8020fb0 <_printf_float+0x164>
 8020f38:	2306      	movs	r3, #6
 8020f3a:	6063      	str	r3, [r4, #4]
 8020f3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8020f40:	2300      	movs	r3, #0
 8020f42:	6022      	str	r2, [r4, #0]
 8020f44:	9303      	str	r3, [sp, #12]
 8020f46:	ab0a      	add	r3, sp, #40	@ 0x28
 8020f48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8020f4c:	ab09      	add	r3, sp, #36	@ 0x24
 8020f4e:	9300      	str	r3, [sp, #0]
 8020f50:	6861      	ldr	r1, [r4, #4]
 8020f52:	ec49 8b10 	vmov	d0, r8, r9
 8020f56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8020f5a:	4628      	mov	r0, r5
 8020f5c:	f7ff fed6 	bl	8020d0c <__cvt>
 8020f60:	9b06      	ldr	r3, [sp, #24]
 8020f62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020f64:	2b47      	cmp	r3, #71	@ 0x47
 8020f66:	4680      	mov	r8, r0
 8020f68:	d129      	bne.n	8020fbe <_printf_float+0x172>
 8020f6a:	1cc8      	adds	r0, r1, #3
 8020f6c:	db02      	blt.n	8020f74 <_printf_float+0x128>
 8020f6e:	6863      	ldr	r3, [r4, #4]
 8020f70:	4299      	cmp	r1, r3
 8020f72:	dd41      	ble.n	8020ff8 <_printf_float+0x1ac>
 8020f74:	f1aa 0a02 	sub.w	sl, sl, #2
 8020f78:	fa5f fa8a 	uxtb.w	sl, sl
 8020f7c:	3901      	subs	r1, #1
 8020f7e:	4652      	mov	r2, sl
 8020f80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8020f84:	9109      	str	r1, [sp, #36]	@ 0x24
 8020f86:	f7ff ff26 	bl	8020dd6 <__exponent>
 8020f8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020f8c:	1813      	adds	r3, r2, r0
 8020f8e:	2a01      	cmp	r2, #1
 8020f90:	4681      	mov	r9, r0
 8020f92:	6123      	str	r3, [r4, #16]
 8020f94:	dc02      	bgt.n	8020f9c <_printf_float+0x150>
 8020f96:	6822      	ldr	r2, [r4, #0]
 8020f98:	07d2      	lsls	r2, r2, #31
 8020f9a:	d501      	bpl.n	8020fa0 <_printf_float+0x154>
 8020f9c:	3301      	adds	r3, #1
 8020f9e:	6123      	str	r3, [r4, #16]
 8020fa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d0a2      	beq.n	8020eee <_printf_float+0xa2>
 8020fa8:	232d      	movs	r3, #45	@ 0x2d
 8020faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020fae:	e79e      	b.n	8020eee <_printf_float+0xa2>
 8020fb0:	9a06      	ldr	r2, [sp, #24]
 8020fb2:	2a47      	cmp	r2, #71	@ 0x47
 8020fb4:	d1c2      	bne.n	8020f3c <_printf_float+0xf0>
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d1c0      	bne.n	8020f3c <_printf_float+0xf0>
 8020fba:	2301      	movs	r3, #1
 8020fbc:	e7bd      	b.n	8020f3a <_printf_float+0xee>
 8020fbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8020fc2:	d9db      	bls.n	8020f7c <_printf_float+0x130>
 8020fc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8020fc8:	d118      	bne.n	8020ffc <_printf_float+0x1b0>
 8020fca:	2900      	cmp	r1, #0
 8020fcc:	6863      	ldr	r3, [r4, #4]
 8020fce:	dd0b      	ble.n	8020fe8 <_printf_float+0x19c>
 8020fd0:	6121      	str	r1, [r4, #16]
 8020fd2:	b913      	cbnz	r3, 8020fda <_printf_float+0x18e>
 8020fd4:	6822      	ldr	r2, [r4, #0]
 8020fd6:	07d0      	lsls	r0, r2, #31
 8020fd8:	d502      	bpl.n	8020fe0 <_printf_float+0x194>
 8020fda:	3301      	adds	r3, #1
 8020fdc:	440b      	add	r3, r1
 8020fde:	6123      	str	r3, [r4, #16]
 8020fe0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8020fe2:	f04f 0900 	mov.w	r9, #0
 8020fe6:	e7db      	b.n	8020fa0 <_printf_float+0x154>
 8020fe8:	b913      	cbnz	r3, 8020ff0 <_printf_float+0x1a4>
 8020fea:	6822      	ldr	r2, [r4, #0]
 8020fec:	07d2      	lsls	r2, r2, #31
 8020fee:	d501      	bpl.n	8020ff4 <_printf_float+0x1a8>
 8020ff0:	3302      	adds	r3, #2
 8020ff2:	e7f4      	b.n	8020fde <_printf_float+0x192>
 8020ff4:	2301      	movs	r3, #1
 8020ff6:	e7f2      	b.n	8020fde <_printf_float+0x192>
 8020ff8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8020ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ffe:	4299      	cmp	r1, r3
 8021000:	db05      	blt.n	802100e <_printf_float+0x1c2>
 8021002:	6823      	ldr	r3, [r4, #0]
 8021004:	6121      	str	r1, [r4, #16]
 8021006:	07d8      	lsls	r0, r3, #31
 8021008:	d5ea      	bpl.n	8020fe0 <_printf_float+0x194>
 802100a:	1c4b      	adds	r3, r1, #1
 802100c:	e7e7      	b.n	8020fde <_printf_float+0x192>
 802100e:	2900      	cmp	r1, #0
 8021010:	bfd4      	ite	le
 8021012:	f1c1 0202 	rsble	r2, r1, #2
 8021016:	2201      	movgt	r2, #1
 8021018:	4413      	add	r3, r2
 802101a:	e7e0      	b.n	8020fde <_printf_float+0x192>
 802101c:	6823      	ldr	r3, [r4, #0]
 802101e:	055a      	lsls	r2, r3, #21
 8021020:	d407      	bmi.n	8021032 <_printf_float+0x1e6>
 8021022:	6923      	ldr	r3, [r4, #16]
 8021024:	4642      	mov	r2, r8
 8021026:	4631      	mov	r1, r6
 8021028:	4628      	mov	r0, r5
 802102a:	47b8      	blx	r7
 802102c:	3001      	adds	r0, #1
 802102e:	d12b      	bne.n	8021088 <_printf_float+0x23c>
 8021030:	e767      	b.n	8020f02 <_printf_float+0xb6>
 8021032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021036:	f240 80dd 	bls.w	80211f4 <_printf_float+0x3a8>
 802103a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802103e:	2200      	movs	r2, #0
 8021040:	2300      	movs	r3, #0
 8021042:	f7df fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 8021046:	2800      	cmp	r0, #0
 8021048:	d033      	beq.n	80210b2 <_printf_float+0x266>
 802104a:	4a37      	ldr	r2, [pc, #220]	@ (8021128 <_printf_float+0x2dc>)
 802104c:	2301      	movs	r3, #1
 802104e:	4631      	mov	r1, r6
 8021050:	4628      	mov	r0, r5
 8021052:	47b8      	blx	r7
 8021054:	3001      	adds	r0, #1
 8021056:	f43f af54 	beq.w	8020f02 <_printf_float+0xb6>
 802105a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802105e:	4543      	cmp	r3, r8
 8021060:	db02      	blt.n	8021068 <_printf_float+0x21c>
 8021062:	6823      	ldr	r3, [r4, #0]
 8021064:	07d8      	lsls	r0, r3, #31
 8021066:	d50f      	bpl.n	8021088 <_printf_float+0x23c>
 8021068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802106c:	4631      	mov	r1, r6
 802106e:	4628      	mov	r0, r5
 8021070:	47b8      	blx	r7
 8021072:	3001      	adds	r0, #1
 8021074:	f43f af45 	beq.w	8020f02 <_printf_float+0xb6>
 8021078:	f04f 0900 	mov.w	r9, #0
 802107c:	f108 38ff 	add.w	r8, r8, #4294967295
 8021080:	f104 0a1a 	add.w	sl, r4, #26
 8021084:	45c8      	cmp	r8, r9
 8021086:	dc09      	bgt.n	802109c <_printf_float+0x250>
 8021088:	6823      	ldr	r3, [r4, #0]
 802108a:	079b      	lsls	r3, r3, #30
 802108c:	f100 8103 	bmi.w	8021296 <_printf_float+0x44a>
 8021090:	68e0      	ldr	r0, [r4, #12]
 8021092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021094:	4298      	cmp	r0, r3
 8021096:	bfb8      	it	lt
 8021098:	4618      	movlt	r0, r3
 802109a:	e734      	b.n	8020f06 <_printf_float+0xba>
 802109c:	2301      	movs	r3, #1
 802109e:	4652      	mov	r2, sl
 80210a0:	4631      	mov	r1, r6
 80210a2:	4628      	mov	r0, r5
 80210a4:	47b8      	blx	r7
 80210a6:	3001      	adds	r0, #1
 80210a8:	f43f af2b 	beq.w	8020f02 <_printf_float+0xb6>
 80210ac:	f109 0901 	add.w	r9, r9, #1
 80210b0:	e7e8      	b.n	8021084 <_printf_float+0x238>
 80210b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	dc39      	bgt.n	802112c <_printf_float+0x2e0>
 80210b8:	4a1b      	ldr	r2, [pc, #108]	@ (8021128 <_printf_float+0x2dc>)
 80210ba:	2301      	movs	r3, #1
 80210bc:	4631      	mov	r1, r6
 80210be:	4628      	mov	r0, r5
 80210c0:	47b8      	blx	r7
 80210c2:	3001      	adds	r0, #1
 80210c4:	f43f af1d 	beq.w	8020f02 <_printf_float+0xb6>
 80210c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80210cc:	ea59 0303 	orrs.w	r3, r9, r3
 80210d0:	d102      	bne.n	80210d8 <_printf_float+0x28c>
 80210d2:	6823      	ldr	r3, [r4, #0]
 80210d4:	07d9      	lsls	r1, r3, #31
 80210d6:	d5d7      	bpl.n	8021088 <_printf_float+0x23c>
 80210d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80210dc:	4631      	mov	r1, r6
 80210de:	4628      	mov	r0, r5
 80210e0:	47b8      	blx	r7
 80210e2:	3001      	adds	r0, #1
 80210e4:	f43f af0d 	beq.w	8020f02 <_printf_float+0xb6>
 80210e8:	f04f 0a00 	mov.w	sl, #0
 80210ec:	f104 0b1a 	add.w	fp, r4, #26
 80210f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210f2:	425b      	negs	r3, r3
 80210f4:	4553      	cmp	r3, sl
 80210f6:	dc01      	bgt.n	80210fc <_printf_float+0x2b0>
 80210f8:	464b      	mov	r3, r9
 80210fa:	e793      	b.n	8021024 <_printf_float+0x1d8>
 80210fc:	2301      	movs	r3, #1
 80210fe:	465a      	mov	r2, fp
 8021100:	4631      	mov	r1, r6
 8021102:	4628      	mov	r0, r5
 8021104:	47b8      	blx	r7
 8021106:	3001      	adds	r0, #1
 8021108:	f43f aefb 	beq.w	8020f02 <_printf_float+0xb6>
 802110c:	f10a 0a01 	add.w	sl, sl, #1
 8021110:	e7ee      	b.n	80210f0 <_printf_float+0x2a4>
 8021112:	bf00      	nop
 8021114:	7fefffff 	.word	0x7fefffff
 8021118:	08025b30 	.word	0x08025b30
 802111c:	08025b2c 	.word	0x08025b2c
 8021120:	08025b38 	.word	0x08025b38
 8021124:	08025b34 	.word	0x08025b34
 8021128:	08025b3c 	.word	0x08025b3c
 802112c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802112e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8021132:	4553      	cmp	r3, sl
 8021134:	bfa8      	it	ge
 8021136:	4653      	movge	r3, sl
 8021138:	2b00      	cmp	r3, #0
 802113a:	4699      	mov	r9, r3
 802113c:	dc36      	bgt.n	80211ac <_printf_float+0x360>
 802113e:	f04f 0b00 	mov.w	fp, #0
 8021142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021146:	f104 021a 	add.w	r2, r4, #26
 802114a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802114c:	9306      	str	r3, [sp, #24]
 802114e:	eba3 0309 	sub.w	r3, r3, r9
 8021152:	455b      	cmp	r3, fp
 8021154:	dc31      	bgt.n	80211ba <_printf_float+0x36e>
 8021156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021158:	459a      	cmp	sl, r3
 802115a:	dc3a      	bgt.n	80211d2 <_printf_float+0x386>
 802115c:	6823      	ldr	r3, [r4, #0]
 802115e:	07da      	lsls	r2, r3, #31
 8021160:	d437      	bmi.n	80211d2 <_printf_float+0x386>
 8021162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021164:	ebaa 0903 	sub.w	r9, sl, r3
 8021168:	9b06      	ldr	r3, [sp, #24]
 802116a:	ebaa 0303 	sub.w	r3, sl, r3
 802116e:	4599      	cmp	r9, r3
 8021170:	bfa8      	it	ge
 8021172:	4699      	movge	r9, r3
 8021174:	f1b9 0f00 	cmp.w	r9, #0
 8021178:	dc33      	bgt.n	80211e2 <_printf_float+0x396>
 802117a:	f04f 0800 	mov.w	r8, #0
 802117e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021182:	f104 0b1a 	add.w	fp, r4, #26
 8021186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021188:	ebaa 0303 	sub.w	r3, sl, r3
 802118c:	eba3 0309 	sub.w	r3, r3, r9
 8021190:	4543      	cmp	r3, r8
 8021192:	f77f af79 	ble.w	8021088 <_printf_float+0x23c>
 8021196:	2301      	movs	r3, #1
 8021198:	465a      	mov	r2, fp
 802119a:	4631      	mov	r1, r6
 802119c:	4628      	mov	r0, r5
 802119e:	47b8      	blx	r7
 80211a0:	3001      	adds	r0, #1
 80211a2:	f43f aeae 	beq.w	8020f02 <_printf_float+0xb6>
 80211a6:	f108 0801 	add.w	r8, r8, #1
 80211aa:	e7ec      	b.n	8021186 <_printf_float+0x33a>
 80211ac:	4642      	mov	r2, r8
 80211ae:	4631      	mov	r1, r6
 80211b0:	4628      	mov	r0, r5
 80211b2:	47b8      	blx	r7
 80211b4:	3001      	adds	r0, #1
 80211b6:	d1c2      	bne.n	802113e <_printf_float+0x2f2>
 80211b8:	e6a3      	b.n	8020f02 <_printf_float+0xb6>
 80211ba:	2301      	movs	r3, #1
 80211bc:	4631      	mov	r1, r6
 80211be:	4628      	mov	r0, r5
 80211c0:	9206      	str	r2, [sp, #24]
 80211c2:	47b8      	blx	r7
 80211c4:	3001      	adds	r0, #1
 80211c6:	f43f ae9c 	beq.w	8020f02 <_printf_float+0xb6>
 80211ca:	9a06      	ldr	r2, [sp, #24]
 80211cc:	f10b 0b01 	add.w	fp, fp, #1
 80211d0:	e7bb      	b.n	802114a <_printf_float+0x2fe>
 80211d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80211d6:	4631      	mov	r1, r6
 80211d8:	4628      	mov	r0, r5
 80211da:	47b8      	blx	r7
 80211dc:	3001      	adds	r0, #1
 80211de:	d1c0      	bne.n	8021162 <_printf_float+0x316>
 80211e0:	e68f      	b.n	8020f02 <_printf_float+0xb6>
 80211e2:	9a06      	ldr	r2, [sp, #24]
 80211e4:	464b      	mov	r3, r9
 80211e6:	4442      	add	r2, r8
 80211e8:	4631      	mov	r1, r6
 80211ea:	4628      	mov	r0, r5
 80211ec:	47b8      	blx	r7
 80211ee:	3001      	adds	r0, #1
 80211f0:	d1c3      	bne.n	802117a <_printf_float+0x32e>
 80211f2:	e686      	b.n	8020f02 <_printf_float+0xb6>
 80211f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80211f8:	f1ba 0f01 	cmp.w	sl, #1
 80211fc:	dc01      	bgt.n	8021202 <_printf_float+0x3b6>
 80211fe:	07db      	lsls	r3, r3, #31
 8021200:	d536      	bpl.n	8021270 <_printf_float+0x424>
 8021202:	2301      	movs	r3, #1
 8021204:	4642      	mov	r2, r8
 8021206:	4631      	mov	r1, r6
 8021208:	4628      	mov	r0, r5
 802120a:	47b8      	blx	r7
 802120c:	3001      	adds	r0, #1
 802120e:	f43f ae78 	beq.w	8020f02 <_printf_float+0xb6>
 8021212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021216:	4631      	mov	r1, r6
 8021218:	4628      	mov	r0, r5
 802121a:	47b8      	blx	r7
 802121c:	3001      	adds	r0, #1
 802121e:	f43f ae70 	beq.w	8020f02 <_printf_float+0xb6>
 8021222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021226:	2200      	movs	r2, #0
 8021228:	2300      	movs	r3, #0
 802122a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802122e:	f7df fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8021232:	b9c0      	cbnz	r0, 8021266 <_printf_float+0x41a>
 8021234:	4653      	mov	r3, sl
 8021236:	f108 0201 	add.w	r2, r8, #1
 802123a:	4631      	mov	r1, r6
 802123c:	4628      	mov	r0, r5
 802123e:	47b8      	blx	r7
 8021240:	3001      	adds	r0, #1
 8021242:	d10c      	bne.n	802125e <_printf_float+0x412>
 8021244:	e65d      	b.n	8020f02 <_printf_float+0xb6>
 8021246:	2301      	movs	r3, #1
 8021248:	465a      	mov	r2, fp
 802124a:	4631      	mov	r1, r6
 802124c:	4628      	mov	r0, r5
 802124e:	47b8      	blx	r7
 8021250:	3001      	adds	r0, #1
 8021252:	f43f ae56 	beq.w	8020f02 <_printf_float+0xb6>
 8021256:	f108 0801 	add.w	r8, r8, #1
 802125a:	45d0      	cmp	r8, sl
 802125c:	dbf3      	blt.n	8021246 <_printf_float+0x3fa>
 802125e:	464b      	mov	r3, r9
 8021260:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8021264:	e6df      	b.n	8021026 <_printf_float+0x1da>
 8021266:	f04f 0800 	mov.w	r8, #0
 802126a:	f104 0b1a 	add.w	fp, r4, #26
 802126e:	e7f4      	b.n	802125a <_printf_float+0x40e>
 8021270:	2301      	movs	r3, #1
 8021272:	4642      	mov	r2, r8
 8021274:	e7e1      	b.n	802123a <_printf_float+0x3ee>
 8021276:	2301      	movs	r3, #1
 8021278:	464a      	mov	r2, r9
 802127a:	4631      	mov	r1, r6
 802127c:	4628      	mov	r0, r5
 802127e:	47b8      	blx	r7
 8021280:	3001      	adds	r0, #1
 8021282:	f43f ae3e 	beq.w	8020f02 <_printf_float+0xb6>
 8021286:	f108 0801 	add.w	r8, r8, #1
 802128a:	68e3      	ldr	r3, [r4, #12]
 802128c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802128e:	1a5b      	subs	r3, r3, r1
 8021290:	4543      	cmp	r3, r8
 8021292:	dcf0      	bgt.n	8021276 <_printf_float+0x42a>
 8021294:	e6fc      	b.n	8021090 <_printf_float+0x244>
 8021296:	f04f 0800 	mov.w	r8, #0
 802129a:	f104 0919 	add.w	r9, r4, #25
 802129e:	e7f4      	b.n	802128a <_printf_float+0x43e>

080212a0 <_printf_common>:
 80212a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212a4:	4616      	mov	r6, r2
 80212a6:	4698      	mov	r8, r3
 80212a8:	688a      	ldr	r2, [r1, #8]
 80212aa:	690b      	ldr	r3, [r1, #16]
 80212ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80212b0:	4293      	cmp	r3, r2
 80212b2:	bfb8      	it	lt
 80212b4:	4613      	movlt	r3, r2
 80212b6:	6033      	str	r3, [r6, #0]
 80212b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80212bc:	4607      	mov	r7, r0
 80212be:	460c      	mov	r4, r1
 80212c0:	b10a      	cbz	r2, 80212c6 <_printf_common+0x26>
 80212c2:	3301      	adds	r3, #1
 80212c4:	6033      	str	r3, [r6, #0]
 80212c6:	6823      	ldr	r3, [r4, #0]
 80212c8:	0699      	lsls	r1, r3, #26
 80212ca:	bf42      	ittt	mi
 80212cc:	6833      	ldrmi	r3, [r6, #0]
 80212ce:	3302      	addmi	r3, #2
 80212d0:	6033      	strmi	r3, [r6, #0]
 80212d2:	6825      	ldr	r5, [r4, #0]
 80212d4:	f015 0506 	ands.w	r5, r5, #6
 80212d8:	d106      	bne.n	80212e8 <_printf_common+0x48>
 80212da:	f104 0a19 	add.w	sl, r4, #25
 80212de:	68e3      	ldr	r3, [r4, #12]
 80212e0:	6832      	ldr	r2, [r6, #0]
 80212e2:	1a9b      	subs	r3, r3, r2
 80212e4:	42ab      	cmp	r3, r5
 80212e6:	dc26      	bgt.n	8021336 <_printf_common+0x96>
 80212e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80212ec:	6822      	ldr	r2, [r4, #0]
 80212ee:	3b00      	subs	r3, #0
 80212f0:	bf18      	it	ne
 80212f2:	2301      	movne	r3, #1
 80212f4:	0692      	lsls	r2, r2, #26
 80212f6:	d42b      	bmi.n	8021350 <_printf_common+0xb0>
 80212f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80212fc:	4641      	mov	r1, r8
 80212fe:	4638      	mov	r0, r7
 8021300:	47c8      	blx	r9
 8021302:	3001      	adds	r0, #1
 8021304:	d01e      	beq.n	8021344 <_printf_common+0xa4>
 8021306:	6823      	ldr	r3, [r4, #0]
 8021308:	6922      	ldr	r2, [r4, #16]
 802130a:	f003 0306 	and.w	r3, r3, #6
 802130e:	2b04      	cmp	r3, #4
 8021310:	bf02      	ittt	eq
 8021312:	68e5      	ldreq	r5, [r4, #12]
 8021314:	6833      	ldreq	r3, [r6, #0]
 8021316:	1aed      	subeq	r5, r5, r3
 8021318:	68a3      	ldr	r3, [r4, #8]
 802131a:	bf0c      	ite	eq
 802131c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021320:	2500      	movne	r5, #0
 8021322:	4293      	cmp	r3, r2
 8021324:	bfc4      	itt	gt
 8021326:	1a9b      	subgt	r3, r3, r2
 8021328:	18ed      	addgt	r5, r5, r3
 802132a:	2600      	movs	r6, #0
 802132c:	341a      	adds	r4, #26
 802132e:	42b5      	cmp	r5, r6
 8021330:	d11a      	bne.n	8021368 <_printf_common+0xc8>
 8021332:	2000      	movs	r0, #0
 8021334:	e008      	b.n	8021348 <_printf_common+0xa8>
 8021336:	2301      	movs	r3, #1
 8021338:	4652      	mov	r2, sl
 802133a:	4641      	mov	r1, r8
 802133c:	4638      	mov	r0, r7
 802133e:	47c8      	blx	r9
 8021340:	3001      	adds	r0, #1
 8021342:	d103      	bne.n	802134c <_printf_common+0xac>
 8021344:	f04f 30ff 	mov.w	r0, #4294967295
 8021348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802134c:	3501      	adds	r5, #1
 802134e:	e7c6      	b.n	80212de <_printf_common+0x3e>
 8021350:	18e1      	adds	r1, r4, r3
 8021352:	1c5a      	adds	r2, r3, #1
 8021354:	2030      	movs	r0, #48	@ 0x30
 8021356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802135a:	4422      	add	r2, r4
 802135c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021364:	3302      	adds	r3, #2
 8021366:	e7c7      	b.n	80212f8 <_printf_common+0x58>
 8021368:	2301      	movs	r3, #1
 802136a:	4622      	mov	r2, r4
 802136c:	4641      	mov	r1, r8
 802136e:	4638      	mov	r0, r7
 8021370:	47c8      	blx	r9
 8021372:	3001      	adds	r0, #1
 8021374:	d0e6      	beq.n	8021344 <_printf_common+0xa4>
 8021376:	3601      	adds	r6, #1
 8021378:	e7d9      	b.n	802132e <_printf_common+0x8e>
	...

0802137c <_printf_i>:
 802137c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021380:	7e0f      	ldrb	r7, [r1, #24]
 8021382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021384:	2f78      	cmp	r7, #120	@ 0x78
 8021386:	4691      	mov	r9, r2
 8021388:	4680      	mov	r8, r0
 802138a:	460c      	mov	r4, r1
 802138c:	469a      	mov	sl, r3
 802138e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021392:	d807      	bhi.n	80213a4 <_printf_i+0x28>
 8021394:	2f62      	cmp	r7, #98	@ 0x62
 8021396:	d80a      	bhi.n	80213ae <_printf_i+0x32>
 8021398:	2f00      	cmp	r7, #0
 802139a:	f000 80d1 	beq.w	8021540 <_printf_i+0x1c4>
 802139e:	2f58      	cmp	r7, #88	@ 0x58
 80213a0:	f000 80b8 	beq.w	8021514 <_printf_i+0x198>
 80213a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80213a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80213ac:	e03a      	b.n	8021424 <_printf_i+0xa8>
 80213ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80213b2:	2b15      	cmp	r3, #21
 80213b4:	d8f6      	bhi.n	80213a4 <_printf_i+0x28>
 80213b6:	a101      	add	r1, pc, #4	@ (adr r1, 80213bc <_printf_i+0x40>)
 80213b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80213bc:	08021415 	.word	0x08021415
 80213c0:	08021429 	.word	0x08021429
 80213c4:	080213a5 	.word	0x080213a5
 80213c8:	080213a5 	.word	0x080213a5
 80213cc:	080213a5 	.word	0x080213a5
 80213d0:	080213a5 	.word	0x080213a5
 80213d4:	08021429 	.word	0x08021429
 80213d8:	080213a5 	.word	0x080213a5
 80213dc:	080213a5 	.word	0x080213a5
 80213e0:	080213a5 	.word	0x080213a5
 80213e4:	080213a5 	.word	0x080213a5
 80213e8:	08021527 	.word	0x08021527
 80213ec:	08021453 	.word	0x08021453
 80213f0:	080214e1 	.word	0x080214e1
 80213f4:	080213a5 	.word	0x080213a5
 80213f8:	080213a5 	.word	0x080213a5
 80213fc:	08021549 	.word	0x08021549
 8021400:	080213a5 	.word	0x080213a5
 8021404:	08021453 	.word	0x08021453
 8021408:	080213a5 	.word	0x080213a5
 802140c:	080213a5 	.word	0x080213a5
 8021410:	080214e9 	.word	0x080214e9
 8021414:	6833      	ldr	r3, [r6, #0]
 8021416:	1d1a      	adds	r2, r3, #4
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	6032      	str	r2, [r6, #0]
 802141c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021424:	2301      	movs	r3, #1
 8021426:	e09c      	b.n	8021562 <_printf_i+0x1e6>
 8021428:	6833      	ldr	r3, [r6, #0]
 802142a:	6820      	ldr	r0, [r4, #0]
 802142c:	1d19      	adds	r1, r3, #4
 802142e:	6031      	str	r1, [r6, #0]
 8021430:	0606      	lsls	r6, r0, #24
 8021432:	d501      	bpl.n	8021438 <_printf_i+0xbc>
 8021434:	681d      	ldr	r5, [r3, #0]
 8021436:	e003      	b.n	8021440 <_printf_i+0xc4>
 8021438:	0645      	lsls	r5, r0, #25
 802143a:	d5fb      	bpl.n	8021434 <_printf_i+0xb8>
 802143c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021440:	2d00      	cmp	r5, #0
 8021442:	da03      	bge.n	802144c <_printf_i+0xd0>
 8021444:	232d      	movs	r3, #45	@ 0x2d
 8021446:	426d      	negs	r5, r5
 8021448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802144c:	4858      	ldr	r0, [pc, #352]	@ (80215b0 <_printf_i+0x234>)
 802144e:	230a      	movs	r3, #10
 8021450:	e011      	b.n	8021476 <_printf_i+0xfa>
 8021452:	6821      	ldr	r1, [r4, #0]
 8021454:	6833      	ldr	r3, [r6, #0]
 8021456:	0608      	lsls	r0, r1, #24
 8021458:	f853 5b04 	ldr.w	r5, [r3], #4
 802145c:	d402      	bmi.n	8021464 <_printf_i+0xe8>
 802145e:	0649      	lsls	r1, r1, #25
 8021460:	bf48      	it	mi
 8021462:	b2ad      	uxthmi	r5, r5
 8021464:	2f6f      	cmp	r7, #111	@ 0x6f
 8021466:	4852      	ldr	r0, [pc, #328]	@ (80215b0 <_printf_i+0x234>)
 8021468:	6033      	str	r3, [r6, #0]
 802146a:	bf14      	ite	ne
 802146c:	230a      	movne	r3, #10
 802146e:	2308      	moveq	r3, #8
 8021470:	2100      	movs	r1, #0
 8021472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021476:	6866      	ldr	r6, [r4, #4]
 8021478:	60a6      	str	r6, [r4, #8]
 802147a:	2e00      	cmp	r6, #0
 802147c:	db05      	blt.n	802148a <_printf_i+0x10e>
 802147e:	6821      	ldr	r1, [r4, #0]
 8021480:	432e      	orrs	r6, r5
 8021482:	f021 0104 	bic.w	r1, r1, #4
 8021486:	6021      	str	r1, [r4, #0]
 8021488:	d04b      	beq.n	8021522 <_printf_i+0x1a6>
 802148a:	4616      	mov	r6, r2
 802148c:	fbb5 f1f3 	udiv	r1, r5, r3
 8021490:	fb03 5711 	mls	r7, r3, r1, r5
 8021494:	5dc7      	ldrb	r7, [r0, r7]
 8021496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802149a:	462f      	mov	r7, r5
 802149c:	42bb      	cmp	r3, r7
 802149e:	460d      	mov	r5, r1
 80214a0:	d9f4      	bls.n	802148c <_printf_i+0x110>
 80214a2:	2b08      	cmp	r3, #8
 80214a4:	d10b      	bne.n	80214be <_printf_i+0x142>
 80214a6:	6823      	ldr	r3, [r4, #0]
 80214a8:	07df      	lsls	r7, r3, #31
 80214aa:	d508      	bpl.n	80214be <_printf_i+0x142>
 80214ac:	6923      	ldr	r3, [r4, #16]
 80214ae:	6861      	ldr	r1, [r4, #4]
 80214b0:	4299      	cmp	r1, r3
 80214b2:	bfde      	ittt	le
 80214b4:	2330      	movle	r3, #48	@ 0x30
 80214b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80214ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80214be:	1b92      	subs	r2, r2, r6
 80214c0:	6122      	str	r2, [r4, #16]
 80214c2:	f8cd a000 	str.w	sl, [sp]
 80214c6:	464b      	mov	r3, r9
 80214c8:	aa03      	add	r2, sp, #12
 80214ca:	4621      	mov	r1, r4
 80214cc:	4640      	mov	r0, r8
 80214ce:	f7ff fee7 	bl	80212a0 <_printf_common>
 80214d2:	3001      	adds	r0, #1
 80214d4:	d14a      	bne.n	802156c <_printf_i+0x1f0>
 80214d6:	f04f 30ff 	mov.w	r0, #4294967295
 80214da:	b004      	add	sp, #16
 80214dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214e0:	6823      	ldr	r3, [r4, #0]
 80214e2:	f043 0320 	orr.w	r3, r3, #32
 80214e6:	6023      	str	r3, [r4, #0]
 80214e8:	4832      	ldr	r0, [pc, #200]	@ (80215b4 <_printf_i+0x238>)
 80214ea:	2778      	movs	r7, #120	@ 0x78
 80214ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80214f0:	6823      	ldr	r3, [r4, #0]
 80214f2:	6831      	ldr	r1, [r6, #0]
 80214f4:	061f      	lsls	r7, r3, #24
 80214f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80214fa:	d402      	bmi.n	8021502 <_printf_i+0x186>
 80214fc:	065f      	lsls	r7, r3, #25
 80214fe:	bf48      	it	mi
 8021500:	b2ad      	uxthmi	r5, r5
 8021502:	6031      	str	r1, [r6, #0]
 8021504:	07d9      	lsls	r1, r3, #31
 8021506:	bf44      	itt	mi
 8021508:	f043 0320 	orrmi.w	r3, r3, #32
 802150c:	6023      	strmi	r3, [r4, #0]
 802150e:	b11d      	cbz	r5, 8021518 <_printf_i+0x19c>
 8021510:	2310      	movs	r3, #16
 8021512:	e7ad      	b.n	8021470 <_printf_i+0xf4>
 8021514:	4826      	ldr	r0, [pc, #152]	@ (80215b0 <_printf_i+0x234>)
 8021516:	e7e9      	b.n	80214ec <_printf_i+0x170>
 8021518:	6823      	ldr	r3, [r4, #0]
 802151a:	f023 0320 	bic.w	r3, r3, #32
 802151e:	6023      	str	r3, [r4, #0]
 8021520:	e7f6      	b.n	8021510 <_printf_i+0x194>
 8021522:	4616      	mov	r6, r2
 8021524:	e7bd      	b.n	80214a2 <_printf_i+0x126>
 8021526:	6833      	ldr	r3, [r6, #0]
 8021528:	6825      	ldr	r5, [r4, #0]
 802152a:	6961      	ldr	r1, [r4, #20]
 802152c:	1d18      	adds	r0, r3, #4
 802152e:	6030      	str	r0, [r6, #0]
 8021530:	062e      	lsls	r6, r5, #24
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	d501      	bpl.n	802153a <_printf_i+0x1be>
 8021536:	6019      	str	r1, [r3, #0]
 8021538:	e002      	b.n	8021540 <_printf_i+0x1c4>
 802153a:	0668      	lsls	r0, r5, #25
 802153c:	d5fb      	bpl.n	8021536 <_printf_i+0x1ba>
 802153e:	8019      	strh	r1, [r3, #0]
 8021540:	2300      	movs	r3, #0
 8021542:	6123      	str	r3, [r4, #16]
 8021544:	4616      	mov	r6, r2
 8021546:	e7bc      	b.n	80214c2 <_printf_i+0x146>
 8021548:	6833      	ldr	r3, [r6, #0]
 802154a:	1d1a      	adds	r2, r3, #4
 802154c:	6032      	str	r2, [r6, #0]
 802154e:	681e      	ldr	r6, [r3, #0]
 8021550:	6862      	ldr	r2, [r4, #4]
 8021552:	2100      	movs	r1, #0
 8021554:	4630      	mov	r0, r6
 8021556:	f7de fe3b 	bl	80001d0 <memchr>
 802155a:	b108      	cbz	r0, 8021560 <_printf_i+0x1e4>
 802155c:	1b80      	subs	r0, r0, r6
 802155e:	6060      	str	r0, [r4, #4]
 8021560:	6863      	ldr	r3, [r4, #4]
 8021562:	6123      	str	r3, [r4, #16]
 8021564:	2300      	movs	r3, #0
 8021566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802156a:	e7aa      	b.n	80214c2 <_printf_i+0x146>
 802156c:	6923      	ldr	r3, [r4, #16]
 802156e:	4632      	mov	r2, r6
 8021570:	4649      	mov	r1, r9
 8021572:	4640      	mov	r0, r8
 8021574:	47d0      	blx	sl
 8021576:	3001      	adds	r0, #1
 8021578:	d0ad      	beq.n	80214d6 <_printf_i+0x15a>
 802157a:	6823      	ldr	r3, [r4, #0]
 802157c:	079b      	lsls	r3, r3, #30
 802157e:	d413      	bmi.n	80215a8 <_printf_i+0x22c>
 8021580:	68e0      	ldr	r0, [r4, #12]
 8021582:	9b03      	ldr	r3, [sp, #12]
 8021584:	4298      	cmp	r0, r3
 8021586:	bfb8      	it	lt
 8021588:	4618      	movlt	r0, r3
 802158a:	e7a6      	b.n	80214da <_printf_i+0x15e>
 802158c:	2301      	movs	r3, #1
 802158e:	4632      	mov	r2, r6
 8021590:	4649      	mov	r1, r9
 8021592:	4640      	mov	r0, r8
 8021594:	47d0      	blx	sl
 8021596:	3001      	adds	r0, #1
 8021598:	d09d      	beq.n	80214d6 <_printf_i+0x15a>
 802159a:	3501      	adds	r5, #1
 802159c:	68e3      	ldr	r3, [r4, #12]
 802159e:	9903      	ldr	r1, [sp, #12]
 80215a0:	1a5b      	subs	r3, r3, r1
 80215a2:	42ab      	cmp	r3, r5
 80215a4:	dcf2      	bgt.n	802158c <_printf_i+0x210>
 80215a6:	e7eb      	b.n	8021580 <_printf_i+0x204>
 80215a8:	2500      	movs	r5, #0
 80215aa:	f104 0619 	add.w	r6, r4, #25
 80215ae:	e7f5      	b.n	802159c <_printf_i+0x220>
 80215b0:	08025b3e 	.word	0x08025b3e
 80215b4:	08025b4f 	.word	0x08025b4f

080215b8 <__sflush_r>:
 80215b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80215bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215c0:	0716      	lsls	r6, r2, #28
 80215c2:	4605      	mov	r5, r0
 80215c4:	460c      	mov	r4, r1
 80215c6:	d454      	bmi.n	8021672 <__sflush_r+0xba>
 80215c8:	684b      	ldr	r3, [r1, #4]
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	dc02      	bgt.n	80215d4 <__sflush_r+0x1c>
 80215ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	dd48      	ble.n	8021666 <__sflush_r+0xae>
 80215d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80215d6:	2e00      	cmp	r6, #0
 80215d8:	d045      	beq.n	8021666 <__sflush_r+0xae>
 80215da:	2300      	movs	r3, #0
 80215dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80215e0:	682f      	ldr	r7, [r5, #0]
 80215e2:	6a21      	ldr	r1, [r4, #32]
 80215e4:	602b      	str	r3, [r5, #0]
 80215e6:	d030      	beq.n	802164a <__sflush_r+0x92>
 80215e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80215ea:	89a3      	ldrh	r3, [r4, #12]
 80215ec:	0759      	lsls	r1, r3, #29
 80215ee:	d505      	bpl.n	80215fc <__sflush_r+0x44>
 80215f0:	6863      	ldr	r3, [r4, #4]
 80215f2:	1ad2      	subs	r2, r2, r3
 80215f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80215f6:	b10b      	cbz	r3, 80215fc <__sflush_r+0x44>
 80215f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80215fa:	1ad2      	subs	r2, r2, r3
 80215fc:	2300      	movs	r3, #0
 80215fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021600:	6a21      	ldr	r1, [r4, #32]
 8021602:	4628      	mov	r0, r5
 8021604:	47b0      	blx	r6
 8021606:	1c43      	adds	r3, r0, #1
 8021608:	89a3      	ldrh	r3, [r4, #12]
 802160a:	d106      	bne.n	802161a <__sflush_r+0x62>
 802160c:	6829      	ldr	r1, [r5, #0]
 802160e:	291d      	cmp	r1, #29
 8021610:	d82b      	bhi.n	802166a <__sflush_r+0xb2>
 8021612:	4a2a      	ldr	r2, [pc, #168]	@ (80216bc <__sflush_r+0x104>)
 8021614:	40ca      	lsrs	r2, r1
 8021616:	07d6      	lsls	r6, r2, #31
 8021618:	d527      	bpl.n	802166a <__sflush_r+0xb2>
 802161a:	2200      	movs	r2, #0
 802161c:	6062      	str	r2, [r4, #4]
 802161e:	04d9      	lsls	r1, r3, #19
 8021620:	6922      	ldr	r2, [r4, #16]
 8021622:	6022      	str	r2, [r4, #0]
 8021624:	d504      	bpl.n	8021630 <__sflush_r+0x78>
 8021626:	1c42      	adds	r2, r0, #1
 8021628:	d101      	bne.n	802162e <__sflush_r+0x76>
 802162a:	682b      	ldr	r3, [r5, #0]
 802162c:	b903      	cbnz	r3, 8021630 <__sflush_r+0x78>
 802162e:	6560      	str	r0, [r4, #84]	@ 0x54
 8021630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021632:	602f      	str	r7, [r5, #0]
 8021634:	b1b9      	cbz	r1, 8021666 <__sflush_r+0xae>
 8021636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802163a:	4299      	cmp	r1, r3
 802163c:	d002      	beq.n	8021644 <__sflush_r+0x8c>
 802163e:	4628      	mov	r0, r5
 8021640:	f001 f9d6 	bl	80229f0 <_free_r>
 8021644:	2300      	movs	r3, #0
 8021646:	6363      	str	r3, [r4, #52]	@ 0x34
 8021648:	e00d      	b.n	8021666 <__sflush_r+0xae>
 802164a:	2301      	movs	r3, #1
 802164c:	4628      	mov	r0, r5
 802164e:	47b0      	blx	r6
 8021650:	4602      	mov	r2, r0
 8021652:	1c50      	adds	r0, r2, #1
 8021654:	d1c9      	bne.n	80215ea <__sflush_r+0x32>
 8021656:	682b      	ldr	r3, [r5, #0]
 8021658:	2b00      	cmp	r3, #0
 802165a:	d0c6      	beq.n	80215ea <__sflush_r+0x32>
 802165c:	2b1d      	cmp	r3, #29
 802165e:	d001      	beq.n	8021664 <__sflush_r+0xac>
 8021660:	2b16      	cmp	r3, #22
 8021662:	d11e      	bne.n	80216a2 <__sflush_r+0xea>
 8021664:	602f      	str	r7, [r5, #0]
 8021666:	2000      	movs	r0, #0
 8021668:	e022      	b.n	80216b0 <__sflush_r+0xf8>
 802166a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802166e:	b21b      	sxth	r3, r3
 8021670:	e01b      	b.n	80216aa <__sflush_r+0xf2>
 8021672:	690f      	ldr	r7, [r1, #16]
 8021674:	2f00      	cmp	r7, #0
 8021676:	d0f6      	beq.n	8021666 <__sflush_r+0xae>
 8021678:	0793      	lsls	r3, r2, #30
 802167a:	680e      	ldr	r6, [r1, #0]
 802167c:	bf08      	it	eq
 802167e:	694b      	ldreq	r3, [r1, #20]
 8021680:	600f      	str	r7, [r1, #0]
 8021682:	bf18      	it	ne
 8021684:	2300      	movne	r3, #0
 8021686:	eba6 0807 	sub.w	r8, r6, r7
 802168a:	608b      	str	r3, [r1, #8]
 802168c:	f1b8 0f00 	cmp.w	r8, #0
 8021690:	dde9      	ble.n	8021666 <__sflush_r+0xae>
 8021692:	6a21      	ldr	r1, [r4, #32]
 8021694:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021696:	4643      	mov	r3, r8
 8021698:	463a      	mov	r2, r7
 802169a:	4628      	mov	r0, r5
 802169c:	47b0      	blx	r6
 802169e:	2800      	cmp	r0, #0
 80216a0:	dc08      	bgt.n	80216b4 <__sflush_r+0xfc>
 80216a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80216aa:	81a3      	strh	r3, [r4, #12]
 80216ac:	f04f 30ff 	mov.w	r0, #4294967295
 80216b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216b4:	4407      	add	r7, r0
 80216b6:	eba8 0800 	sub.w	r8, r8, r0
 80216ba:	e7e7      	b.n	802168c <__sflush_r+0xd4>
 80216bc:	20400001 	.word	0x20400001

080216c0 <_fflush_r>:
 80216c0:	b538      	push	{r3, r4, r5, lr}
 80216c2:	690b      	ldr	r3, [r1, #16]
 80216c4:	4605      	mov	r5, r0
 80216c6:	460c      	mov	r4, r1
 80216c8:	b913      	cbnz	r3, 80216d0 <_fflush_r+0x10>
 80216ca:	2500      	movs	r5, #0
 80216cc:	4628      	mov	r0, r5
 80216ce:	bd38      	pop	{r3, r4, r5, pc}
 80216d0:	b118      	cbz	r0, 80216da <_fflush_r+0x1a>
 80216d2:	6a03      	ldr	r3, [r0, #32]
 80216d4:	b90b      	cbnz	r3, 80216da <_fflush_r+0x1a>
 80216d6:	f000 f8bb 	bl	8021850 <__sinit>
 80216da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d0f3      	beq.n	80216ca <_fflush_r+0xa>
 80216e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80216e4:	07d0      	lsls	r0, r2, #31
 80216e6:	d404      	bmi.n	80216f2 <_fflush_r+0x32>
 80216e8:	0599      	lsls	r1, r3, #22
 80216ea:	d402      	bmi.n	80216f2 <_fflush_r+0x32>
 80216ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216ee:	f000 fb14 	bl	8021d1a <__retarget_lock_acquire_recursive>
 80216f2:	4628      	mov	r0, r5
 80216f4:	4621      	mov	r1, r4
 80216f6:	f7ff ff5f 	bl	80215b8 <__sflush_r>
 80216fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80216fc:	07da      	lsls	r2, r3, #31
 80216fe:	4605      	mov	r5, r0
 8021700:	d4e4      	bmi.n	80216cc <_fflush_r+0xc>
 8021702:	89a3      	ldrh	r3, [r4, #12]
 8021704:	059b      	lsls	r3, r3, #22
 8021706:	d4e1      	bmi.n	80216cc <_fflush_r+0xc>
 8021708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802170a:	f000 fb07 	bl	8021d1c <__retarget_lock_release_recursive>
 802170e:	e7dd      	b.n	80216cc <_fflush_r+0xc>

08021710 <fflush>:
 8021710:	4601      	mov	r1, r0
 8021712:	b920      	cbnz	r0, 802171e <fflush+0xe>
 8021714:	4a04      	ldr	r2, [pc, #16]	@ (8021728 <fflush+0x18>)
 8021716:	4905      	ldr	r1, [pc, #20]	@ (802172c <fflush+0x1c>)
 8021718:	4805      	ldr	r0, [pc, #20]	@ (8021730 <fflush+0x20>)
 802171a:	f000 b8b1 	b.w	8021880 <_fwalk_sglue>
 802171e:	4b05      	ldr	r3, [pc, #20]	@ (8021734 <fflush+0x24>)
 8021720:	6818      	ldr	r0, [r3, #0]
 8021722:	f7ff bfcd 	b.w	80216c0 <_fflush_r>
 8021726:	bf00      	nop
 8021728:	20000078 	.word	0x20000078
 802172c:	080216c1 	.word	0x080216c1
 8021730:	20000088 	.word	0x20000088
 8021734:	20000084 	.word	0x20000084

08021738 <std>:
 8021738:	2300      	movs	r3, #0
 802173a:	b510      	push	{r4, lr}
 802173c:	4604      	mov	r4, r0
 802173e:	e9c0 3300 	strd	r3, r3, [r0]
 8021742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021746:	6083      	str	r3, [r0, #8]
 8021748:	8181      	strh	r1, [r0, #12]
 802174a:	6643      	str	r3, [r0, #100]	@ 0x64
 802174c:	81c2      	strh	r2, [r0, #14]
 802174e:	6183      	str	r3, [r0, #24]
 8021750:	4619      	mov	r1, r3
 8021752:	2208      	movs	r2, #8
 8021754:	305c      	adds	r0, #92	@ 0x5c
 8021756:	f000 fa4d 	bl	8021bf4 <memset>
 802175a:	4b0d      	ldr	r3, [pc, #52]	@ (8021790 <std+0x58>)
 802175c:	6263      	str	r3, [r4, #36]	@ 0x24
 802175e:	4b0d      	ldr	r3, [pc, #52]	@ (8021794 <std+0x5c>)
 8021760:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021762:	4b0d      	ldr	r3, [pc, #52]	@ (8021798 <std+0x60>)
 8021764:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021766:	4b0d      	ldr	r3, [pc, #52]	@ (802179c <std+0x64>)
 8021768:	6323      	str	r3, [r4, #48]	@ 0x30
 802176a:	4b0d      	ldr	r3, [pc, #52]	@ (80217a0 <std+0x68>)
 802176c:	6224      	str	r4, [r4, #32]
 802176e:	429c      	cmp	r4, r3
 8021770:	d006      	beq.n	8021780 <std+0x48>
 8021772:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021776:	4294      	cmp	r4, r2
 8021778:	d002      	beq.n	8021780 <std+0x48>
 802177a:	33d0      	adds	r3, #208	@ 0xd0
 802177c:	429c      	cmp	r4, r3
 802177e:	d105      	bne.n	802178c <std+0x54>
 8021780:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021788:	f000 bac6 	b.w	8021d18 <__retarget_lock_init_recursive>
 802178c:	bd10      	pop	{r4, pc}
 802178e:	bf00      	nop
 8021790:	080219f1 	.word	0x080219f1
 8021794:	08021a13 	.word	0x08021a13
 8021798:	08021a4b 	.word	0x08021a4b
 802179c:	08021a6f 	.word	0x08021a6f
 80217a0:	20001c08 	.word	0x20001c08

080217a4 <stdio_exit_handler>:
 80217a4:	4a02      	ldr	r2, [pc, #8]	@ (80217b0 <stdio_exit_handler+0xc>)
 80217a6:	4903      	ldr	r1, [pc, #12]	@ (80217b4 <stdio_exit_handler+0x10>)
 80217a8:	4803      	ldr	r0, [pc, #12]	@ (80217b8 <stdio_exit_handler+0x14>)
 80217aa:	f000 b869 	b.w	8021880 <_fwalk_sglue>
 80217ae:	bf00      	nop
 80217b0:	20000078 	.word	0x20000078
 80217b4:	080216c1 	.word	0x080216c1
 80217b8:	20000088 	.word	0x20000088

080217bc <cleanup_stdio>:
 80217bc:	6841      	ldr	r1, [r0, #4]
 80217be:	4b0c      	ldr	r3, [pc, #48]	@ (80217f0 <cleanup_stdio+0x34>)
 80217c0:	4299      	cmp	r1, r3
 80217c2:	b510      	push	{r4, lr}
 80217c4:	4604      	mov	r4, r0
 80217c6:	d001      	beq.n	80217cc <cleanup_stdio+0x10>
 80217c8:	f7ff ff7a 	bl	80216c0 <_fflush_r>
 80217cc:	68a1      	ldr	r1, [r4, #8]
 80217ce:	4b09      	ldr	r3, [pc, #36]	@ (80217f4 <cleanup_stdio+0x38>)
 80217d0:	4299      	cmp	r1, r3
 80217d2:	d002      	beq.n	80217da <cleanup_stdio+0x1e>
 80217d4:	4620      	mov	r0, r4
 80217d6:	f7ff ff73 	bl	80216c0 <_fflush_r>
 80217da:	68e1      	ldr	r1, [r4, #12]
 80217dc:	4b06      	ldr	r3, [pc, #24]	@ (80217f8 <cleanup_stdio+0x3c>)
 80217de:	4299      	cmp	r1, r3
 80217e0:	d004      	beq.n	80217ec <cleanup_stdio+0x30>
 80217e2:	4620      	mov	r0, r4
 80217e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217e8:	f7ff bf6a 	b.w	80216c0 <_fflush_r>
 80217ec:	bd10      	pop	{r4, pc}
 80217ee:	bf00      	nop
 80217f0:	20001c08 	.word	0x20001c08
 80217f4:	20001c70 	.word	0x20001c70
 80217f8:	20001cd8 	.word	0x20001cd8

080217fc <global_stdio_init.part.0>:
 80217fc:	b510      	push	{r4, lr}
 80217fe:	4b0b      	ldr	r3, [pc, #44]	@ (802182c <global_stdio_init.part.0+0x30>)
 8021800:	4c0b      	ldr	r4, [pc, #44]	@ (8021830 <global_stdio_init.part.0+0x34>)
 8021802:	4a0c      	ldr	r2, [pc, #48]	@ (8021834 <global_stdio_init.part.0+0x38>)
 8021804:	601a      	str	r2, [r3, #0]
 8021806:	4620      	mov	r0, r4
 8021808:	2200      	movs	r2, #0
 802180a:	2104      	movs	r1, #4
 802180c:	f7ff ff94 	bl	8021738 <std>
 8021810:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021814:	2201      	movs	r2, #1
 8021816:	2109      	movs	r1, #9
 8021818:	f7ff ff8e 	bl	8021738 <std>
 802181c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021820:	2202      	movs	r2, #2
 8021822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021826:	2112      	movs	r1, #18
 8021828:	f7ff bf86 	b.w	8021738 <std>
 802182c:	20001d40 	.word	0x20001d40
 8021830:	20001c08 	.word	0x20001c08
 8021834:	080217a5 	.word	0x080217a5

08021838 <__sfp_lock_acquire>:
 8021838:	4801      	ldr	r0, [pc, #4]	@ (8021840 <__sfp_lock_acquire+0x8>)
 802183a:	f000 ba6e 	b.w	8021d1a <__retarget_lock_acquire_recursive>
 802183e:	bf00      	nop
 8021840:	20001d49 	.word	0x20001d49

08021844 <__sfp_lock_release>:
 8021844:	4801      	ldr	r0, [pc, #4]	@ (802184c <__sfp_lock_release+0x8>)
 8021846:	f000 ba69 	b.w	8021d1c <__retarget_lock_release_recursive>
 802184a:	bf00      	nop
 802184c:	20001d49 	.word	0x20001d49

08021850 <__sinit>:
 8021850:	b510      	push	{r4, lr}
 8021852:	4604      	mov	r4, r0
 8021854:	f7ff fff0 	bl	8021838 <__sfp_lock_acquire>
 8021858:	6a23      	ldr	r3, [r4, #32]
 802185a:	b11b      	cbz	r3, 8021864 <__sinit+0x14>
 802185c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021860:	f7ff bff0 	b.w	8021844 <__sfp_lock_release>
 8021864:	4b04      	ldr	r3, [pc, #16]	@ (8021878 <__sinit+0x28>)
 8021866:	6223      	str	r3, [r4, #32]
 8021868:	4b04      	ldr	r3, [pc, #16]	@ (802187c <__sinit+0x2c>)
 802186a:	681b      	ldr	r3, [r3, #0]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d1f5      	bne.n	802185c <__sinit+0xc>
 8021870:	f7ff ffc4 	bl	80217fc <global_stdio_init.part.0>
 8021874:	e7f2      	b.n	802185c <__sinit+0xc>
 8021876:	bf00      	nop
 8021878:	080217bd 	.word	0x080217bd
 802187c:	20001d40 	.word	0x20001d40

08021880 <_fwalk_sglue>:
 8021880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021884:	4607      	mov	r7, r0
 8021886:	4688      	mov	r8, r1
 8021888:	4614      	mov	r4, r2
 802188a:	2600      	movs	r6, #0
 802188c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021890:	f1b9 0901 	subs.w	r9, r9, #1
 8021894:	d505      	bpl.n	80218a2 <_fwalk_sglue+0x22>
 8021896:	6824      	ldr	r4, [r4, #0]
 8021898:	2c00      	cmp	r4, #0
 802189a:	d1f7      	bne.n	802188c <_fwalk_sglue+0xc>
 802189c:	4630      	mov	r0, r6
 802189e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80218a2:	89ab      	ldrh	r3, [r5, #12]
 80218a4:	2b01      	cmp	r3, #1
 80218a6:	d907      	bls.n	80218b8 <_fwalk_sglue+0x38>
 80218a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80218ac:	3301      	adds	r3, #1
 80218ae:	d003      	beq.n	80218b8 <_fwalk_sglue+0x38>
 80218b0:	4629      	mov	r1, r5
 80218b2:	4638      	mov	r0, r7
 80218b4:	47c0      	blx	r8
 80218b6:	4306      	orrs	r6, r0
 80218b8:	3568      	adds	r5, #104	@ 0x68
 80218ba:	e7e9      	b.n	8021890 <_fwalk_sglue+0x10>

080218bc <iprintf>:
 80218bc:	b40f      	push	{r0, r1, r2, r3}
 80218be:	b507      	push	{r0, r1, r2, lr}
 80218c0:	4906      	ldr	r1, [pc, #24]	@ (80218dc <iprintf+0x20>)
 80218c2:	ab04      	add	r3, sp, #16
 80218c4:	6808      	ldr	r0, [r1, #0]
 80218c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80218ca:	6881      	ldr	r1, [r0, #8]
 80218cc:	9301      	str	r3, [sp, #4]
 80218ce:	f001 fe8b 	bl	80235e8 <_vfiprintf_r>
 80218d2:	b003      	add	sp, #12
 80218d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80218d8:	b004      	add	sp, #16
 80218da:	4770      	bx	lr
 80218dc:	20000084 	.word	0x20000084

080218e0 <putchar>:
 80218e0:	4b02      	ldr	r3, [pc, #8]	@ (80218ec <putchar+0xc>)
 80218e2:	4601      	mov	r1, r0
 80218e4:	6818      	ldr	r0, [r3, #0]
 80218e6:	6882      	ldr	r2, [r0, #8]
 80218e8:	f001 bff8 	b.w	80238dc <_putc_r>
 80218ec:	20000084 	.word	0x20000084

080218f0 <_puts_r>:
 80218f0:	6a03      	ldr	r3, [r0, #32]
 80218f2:	b570      	push	{r4, r5, r6, lr}
 80218f4:	6884      	ldr	r4, [r0, #8]
 80218f6:	4605      	mov	r5, r0
 80218f8:	460e      	mov	r6, r1
 80218fa:	b90b      	cbnz	r3, 8021900 <_puts_r+0x10>
 80218fc:	f7ff ffa8 	bl	8021850 <__sinit>
 8021900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021902:	07db      	lsls	r3, r3, #31
 8021904:	d405      	bmi.n	8021912 <_puts_r+0x22>
 8021906:	89a3      	ldrh	r3, [r4, #12]
 8021908:	0598      	lsls	r0, r3, #22
 802190a:	d402      	bmi.n	8021912 <_puts_r+0x22>
 802190c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802190e:	f000 fa04 	bl	8021d1a <__retarget_lock_acquire_recursive>
 8021912:	89a3      	ldrh	r3, [r4, #12]
 8021914:	0719      	lsls	r1, r3, #28
 8021916:	d502      	bpl.n	802191e <_puts_r+0x2e>
 8021918:	6923      	ldr	r3, [r4, #16]
 802191a:	2b00      	cmp	r3, #0
 802191c:	d135      	bne.n	802198a <_puts_r+0x9a>
 802191e:	4621      	mov	r1, r4
 8021920:	4628      	mov	r0, r5
 8021922:	f000 f8e7 	bl	8021af4 <__swsetup_r>
 8021926:	b380      	cbz	r0, 802198a <_puts_r+0x9a>
 8021928:	f04f 35ff 	mov.w	r5, #4294967295
 802192c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802192e:	07da      	lsls	r2, r3, #31
 8021930:	d405      	bmi.n	802193e <_puts_r+0x4e>
 8021932:	89a3      	ldrh	r3, [r4, #12]
 8021934:	059b      	lsls	r3, r3, #22
 8021936:	d402      	bmi.n	802193e <_puts_r+0x4e>
 8021938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802193a:	f000 f9ef 	bl	8021d1c <__retarget_lock_release_recursive>
 802193e:	4628      	mov	r0, r5
 8021940:	bd70      	pop	{r4, r5, r6, pc}
 8021942:	2b00      	cmp	r3, #0
 8021944:	da04      	bge.n	8021950 <_puts_r+0x60>
 8021946:	69a2      	ldr	r2, [r4, #24]
 8021948:	429a      	cmp	r2, r3
 802194a:	dc17      	bgt.n	802197c <_puts_r+0x8c>
 802194c:	290a      	cmp	r1, #10
 802194e:	d015      	beq.n	802197c <_puts_r+0x8c>
 8021950:	6823      	ldr	r3, [r4, #0]
 8021952:	1c5a      	adds	r2, r3, #1
 8021954:	6022      	str	r2, [r4, #0]
 8021956:	7019      	strb	r1, [r3, #0]
 8021958:	68a3      	ldr	r3, [r4, #8]
 802195a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802195e:	3b01      	subs	r3, #1
 8021960:	60a3      	str	r3, [r4, #8]
 8021962:	2900      	cmp	r1, #0
 8021964:	d1ed      	bne.n	8021942 <_puts_r+0x52>
 8021966:	2b00      	cmp	r3, #0
 8021968:	da11      	bge.n	802198e <_puts_r+0x9e>
 802196a:	4622      	mov	r2, r4
 802196c:	210a      	movs	r1, #10
 802196e:	4628      	mov	r0, r5
 8021970:	f000 f881 	bl	8021a76 <__swbuf_r>
 8021974:	3001      	adds	r0, #1
 8021976:	d0d7      	beq.n	8021928 <_puts_r+0x38>
 8021978:	250a      	movs	r5, #10
 802197a:	e7d7      	b.n	802192c <_puts_r+0x3c>
 802197c:	4622      	mov	r2, r4
 802197e:	4628      	mov	r0, r5
 8021980:	f000 f879 	bl	8021a76 <__swbuf_r>
 8021984:	3001      	adds	r0, #1
 8021986:	d1e7      	bne.n	8021958 <_puts_r+0x68>
 8021988:	e7ce      	b.n	8021928 <_puts_r+0x38>
 802198a:	3e01      	subs	r6, #1
 802198c:	e7e4      	b.n	8021958 <_puts_r+0x68>
 802198e:	6823      	ldr	r3, [r4, #0]
 8021990:	1c5a      	adds	r2, r3, #1
 8021992:	6022      	str	r2, [r4, #0]
 8021994:	220a      	movs	r2, #10
 8021996:	701a      	strb	r2, [r3, #0]
 8021998:	e7ee      	b.n	8021978 <_puts_r+0x88>
	...

0802199c <puts>:
 802199c:	4b02      	ldr	r3, [pc, #8]	@ (80219a8 <puts+0xc>)
 802199e:	4601      	mov	r1, r0
 80219a0:	6818      	ldr	r0, [r3, #0]
 80219a2:	f7ff bfa5 	b.w	80218f0 <_puts_r>
 80219a6:	bf00      	nop
 80219a8:	20000084 	.word	0x20000084

080219ac <siprintf>:
 80219ac:	b40e      	push	{r1, r2, r3}
 80219ae:	b510      	push	{r4, lr}
 80219b0:	b09d      	sub	sp, #116	@ 0x74
 80219b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80219b4:	9002      	str	r0, [sp, #8]
 80219b6:	9006      	str	r0, [sp, #24]
 80219b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80219bc:	480a      	ldr	r0, [pc, #40]	@ (80219e8 <siprintf+0x3c>)
 80219be:	9107      	str	r1, [sp, #28]
 80219c0:	9104      	str	r1, [sp, #16]
 80219c2:	490a      	ldr	r1, [pc, #40]	@ (80219ec <siprintf+0x40>)
 80219c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80219c8:	9105      	str	r1, [sp, #20]
 80219ca:	2400      	movs	r4, #0
 80219cc:	a902      	add	r1, sp, #8
 80219ce:	6800      	ldr	r0, [r0, #0]
 80219d0:	9301      	str	r3, [sp, #4]
 80219d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80219d4:	f001 fce2 	bl	802339c <_svfiprintf_r>
 80219d8:	9b02      	ldr	r3, [sp, #8]
 80219da:	701c      	strb	r4, [r3, #0]
 80219dc:	b01d      	add	sp, #116	@ 0x74
 80219de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219e2:	b003      	add	sp, #12
 80219e4:	4770      	bx	lr
 80219e6:	bf00      	nop
 80219e8:	20000084 	.word	0x20000084
 80219ec:	ffff0208 	.word	0xffff0208

080219f0 <__sread>:
 80219f0:	b510      	push	{r4, lr}
 80219f2:	460c      	mov	r4, r1
 80219f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219f8:	f000 f940 	bl	8021c7c <_read_r>
 80219fc:	2800      	cmp	r0, #0
 80219fe:	bfab      	itete	ge
 8021a00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021a02:	89a3      	ldrhlt	r3, [r4, #12]
 8021a04:	181b      	addge	r3, r3, r0
 8021a06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021a0a:	bfac      	ite	ge
 8021a0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021a0e:	81a3      	strhlt	r3, [r4, #12]
 8021a10:	bd10      	pop	{r4, pc}

08021a12 <__swrite>:
 8021a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a16:	461f      	mov	r7, r3
 8021a18:	898b      	ldrh	r3, [r1, #12]
 8021a1a:	05db      	lsls	r3, r3, #23
 8021a1c:	4605      	mov	r5, r0
 8021a1e:	460c      	mov	r4, r1
 8021a20:	4616      	mov	r6, r2
 8021a22:	d505      	bpl.n	8021a30 <__swrite+0x1e>
 8021a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a28:	2302      	movs	r3, #2
 8021a2a:	2200      	movs	r2, #0
 8021a2c:	f000 f914 	bl	8021c58 <_lseek_r>
 8021a30:	89a3      	ldrh	r3, [r4, #12]
 8021a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021a3a:	81a3      	strh	r3, [r4, #12]
 8021a3c:	4632      	mov	r2, r6
 8021a3e:	463b      	mov	r3, r7
 8021a40:	4628      	mov	r0, r5
 8021a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021a46:	f000 b92b 	b.w	8021ca0 <_write_r>

08021a4a <__sseek>:
 8021a4a:	b510      	push	{r4, lr}
 8021a4c:	460c      	mov	r4, r1
 8021a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a52:	f000 f901 	bl	8021c58 <_lseek_r>
 8021a56:	1c43      	adds	r3, r0, #1
 8021a58:	89a3      	ldrh	r3, [r4, #12]
 8021a5a:	bf15      	itete	ne
 8021a5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021a5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021a62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021a66:	81a3      	strheq	r3, [r4, #12]
 8021a68:	bf18      	it	ne
 8021a6a:	81a3      	strhne	r3, [r4, #12]
 8021a6c:	bd10      	pop	{r4, pc}

08021a6e <__sclose>:
 8021a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a72:	f000 b8e1 	b.w	8021c38 <_close_r>

08021a76 <__swbuf_r>:
 8021a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a78:	460e      	mov	r6, r1
 8021a7a:	4614      	mov	r4, r2
 8021a7c:	4605      	mov	r5, r0
 8021a7e:	b118      	cbz	r0, 8021a88 <__swbuf_r+0x12>
 8021a80:	6a03      	ldr	r3, [r0, #32]
 8021a82:	b90b      	cbnz	r3, 8021a88 <__swbuf_r+0x12>
 8021a84:	f7ff fee4 	bl	8021850 <__sinit>
 8021a88:	69a3      	ldr	r3, [r4, #24]
 8021a8a:	60a3      	str	r3, [r4, #8]
 8021a8c:	89a3      	ldrh	r3, [r4, #12]
 8021a8e:	071a      	lsls	r2, r3, #28
 8021a90:	d501      	bpl.n	8021a96 <__swbuf_r+0x20>
 8021a92:	6923      	ldr	r3, [r4, #16]
 8021a94:	b943      	cbnz	r3, 8021aa8 <__swbuf_r+0x32>
 8021a96:	4621      	mov	r1, r4
 8021a98:	4628      	mov	r0, r5
 8021a9a:	f000 f82b 	bl	8021af4 <__swsetup_r>
 8021a9e:	b118      	cbz	r0, 8021aa8 <__swbuf_r+0x32>
 8021aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8021aa4:	4638      	mov	r0, r7
 8021aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021aa8:	6823      	ldr	r3, [r4, #0]
 8021aaa:	6922      	ldr	r2, [r4, #16]
 8021aac:	1a98      	subs	r0, r3, r2
 8021aae:	6963      	ldr	r3, [r4, #20]
 8021ab0:	b2f6      	uxtb	r6, r6
 8021ab2:	4283      	cmp	r3, r0
 8021ab4:	4637      	mov	r7, r6
 8021ab6:	dc05      	bgt.n	8021ac4 <__swbuf_r+0x4e>
 8021ab8:	4621      	mov	r1, r4
 8021aba:	4628      	mov	r0, r5
 8021abc:	f7ff fe00 	bl	80216c0 <_fflush_r>
 8021ac0:	2800      	cmp	r0, #0
 8021ac2:	d1ed      	bne.n	8021aa0 <__swbuf_r+0x2a>
 8021ac4:	68a3      	ldr	r3, [r4, #8]
 8021ac6:	3b01      	subs	r3, #1
 8021ac8:	60a3      	str	r3, [r4, #8]
 8021aca:	6823      	ldr	r3, [r4, #0]
 8021acc:	1c5a      	adds	r2, r3, #1
 8021ace:	6022      	str	r2, [r4, #0]
 8021ad0:	701e      	strb	r6, [r3, #0]
 8021ad2:	6962      	ldr	r2, [r4, #20]
 8021ad4:	1c43      	adds	r3, r0, #1
 8021ad6:	429a      	cmp	r2, r3
 8021ad8:	d004      	beq.n	8021ae4 <__swbuf_r+0x6e>
 8021ada:	89a3      	ldrh	r3, [r4, #12]
 8021adc:	07db      	lsls	r3, r3, #31
 8021ade:	d5e1      	bpl.n	8021aa4 <__swbuf_r+0x2e>
 8021ae0:	2e0a      	cmp	r6, #10
 8021ae2:	d1df      	bne.n	8021aa4 <__swbuf_r+0x2e>
 8021ae4:	4621      	mov	r1, r4
 8021ae6:	4628      	mov	r0, r5
 8021ae8:	f7ff fdea 	bl	80216c0 <_fflush_r>
 8021aec:	2800      	cmp	r0, #0
 8021aee:	d0d9      	beq.n	8021aa4 <__swbuf_r+0x2e>
 8021af0:	e7d6      	b.n	8021aa0 <__swbuf_r+0x2a>
	...

08021af4 <__swsetup_r>:
 8021af4:	b538      	push	{r3, r4, r5, lr}
 8021af6:	4b29      	ldr	r3, [pc, #164]	@ (8021b9c <__swsetup_r+0xa8>)
 8021af8:	4605      	mov	r5, r0
 8021afa:	6818      	ldr	r0, [r3, #0]
 8021afc:	460c      	mov	r4, r1
 8021afe:	b118      	cbz	r0, 8021b08 <__swsetup_r+0x14>
 8021b00:	6a03      	ldr	r3, [r0, #32]
 8021b02:	b90b      	cbnz	r3, 8021b08 <__swsetup_r+0x14>
 8021b04:	f7ff fea4 	bl	8021850 <__sinit>
 8021b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b0c:	0719      	lsls	r1, r3, #28
 8021b0e:	d422      	bmi.n	8021b56 <__swsetup_r+0x62>
 8021b10:	06da      	lsls	r2, r3, #27
 8021b12:	d407      	bmi.n	8021b24 <__swsetup_r+0x30>
 8021b14:	2209      	movs	r2, #9
 8021b16:	602a      	str	r2, [r5, #0]
 8021b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b1c:	81a3      	strh	r3, [r4, #12]
 8021b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8021b22:	e033      	b.n	8021b8c <__swsetup_r+0x98>
 8021b24:	0758      	lsls	r0, r3, #29
 8021b26:	d512      	bpl.n	8021b4e <__swsetup_r+0x5a>
 8021b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021b2a:	b141      	cbz	r1, 8021b3e <__swsetup_r+0x4a>
 8021b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021b30:	4299      	cmp	r1, r3
 8021b32:	d002      	beq.n	8021b3a <__swsetup_r+0x46>
 8021b34:	4628      	mov	r0, r5
 8021b36:	f000 ff5b 	bl	80229f0 <_free_r>
 8021b3a:	2300      	movs	r3, #0
 8021b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8021b3e:	89a3      	ldrh	r3, [r4, #12]
 8021b40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021b44:	81a3      	strh	r3, [r4, #12]
 8021b46:	2300      	movs	r3, #0
 8021b48:	6063      	str	r3, [r4, #4]
 8021b4a:	6923      	ldr	r3, [r4, #16]
 8021b4c:	6023      	str	r3, [r4, #0]
 8021b4e:	89a3      	ldrh	r3, [r4, #12]
 8021b50:	f043 0308 	orr.w	r3, r3, #8
 8021b54:	81a3      	strh	r3, [r4, #12]
 8021b56:	6923      	ldr	r3, [r4, #16]
 8021b58:	b94b      	cbnz	r3, 8021b6e <__swsetup_r+0x7a>
 8021b5a:	89a3      	ldrh	r3, [r4, #12]
 8021b5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021b64:	d003      	beq.n	8021b6e <__swsetup_r+0x7a>
 8021b66:	4621      	mov	r1, r4
 8021b68:	4628      	mov	r0, r5
 8021b6a:	f001 fe7b 	bl	8023864 <__smakebuf_r>
 8021b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b72:	f013 0201 	ands.w	r2, r3, #1
 8021b76:	d00a      	beq.n	8021b8e <__swsetup_r+0x9a>
 8021b78:	2200      	movs	r2, #0
 8021b7a:	60a2      	str	r2, [r4, #8]
 8021b7c:	6962      	ldr	r2, [r4, #20]
 8021b7e:	4252      	negs	r2, r2
 8021b80:	61a2      	str	r2, [r4, #24]
 8021b82:	6922      	ldr	r2, [r4, #16]
 8021b84:	b942      	cbnz	r2, 8021b98 <__swsetup_r+0xa4>
 8021b86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021b8a:	d1c5      	bne.n	8021b18 <__swsetup_r+0x24>
 8021b8c:	bd38      	pop	{r3, r4, r5, pc}
 8021b8e:	0799      	lsls	r1, r3, #30
 8021b90:	bf58      	it	pl
 8021b92:	6962      	ldrpl	r2, [r4, #20]
 8021b94:	60a2      	str	r2, [r4, #8]
 8021b96:	e7f4      	b.n	8021b82 <__swsetup_r+0x8e>
 8021b98:	2000      	movs	r0, #0
 8021b9a:	e7f7      	b.n	8021b8c <__swsetup_r+0x98>
 8021b9c:	20000084 	.word	0x20000084

08021ba0 <memcmp>:
 8021ba0:	b510      	push	{r4, lr}
 8021ba2:	3901      	subs	r1, #1
 8021ba4:	4402      	add	r2, r0
 8021ba6:	4290      	cmp	r0, r2
 8021ba8:	d101      	bne.n	8021bae <memcmp+0xe>
 8021baa:	2000      	movs	r0, #0
 8021bac:	e005      	b.n	8021bba <memcmp+0x1a>
 8021bae:	7803      	ldrb	r3, [r0, #0]
 8021bb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021bb4:	42a3      	cmp	r3, r4
 8021bb6:	d001      	beq.n	8021bbc <memcmp+0x1c>
 8021bb8:	1b18      	subs	r0, r3, r4
 8021bba:	bd10      	pop	{r4, pc}
 8021bbc:	3001      	adds	r0, #1
 8021bbe:	e7f2      	b.n	8021ba6 <memcmp+0x6>

08021bc0 <memmove>:
 8021bc0:	4288      	cmp	r0, r1
 8021bc2:	b510      	push	{r4, lr}
 8021bc4:	eb01 0402 	add.w	r4, r1, r2
 8021bc8:	d902      	bls.n	8021bd0 <memmove+0x10>
 8021bca:	4284      	cmp	r4, r0
 8021bcc:	4623      	mov	r3, r4
 8021bce:	d807      	bhi.n	8021be0 <memmove+0x20>
 8021bd0:	1e43      	subs	r3, r0, #1
 8021bd2:	42a1      	cmp	r1, r4
 8021bd4:	d008      	beq.n	8021be8 <memmove+0x28>
 8021bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021bde:	e7f8      	b.n	8021bd2 <memmove+0x12>
 8021be0:	4402      	add	r2, r0
 8021be2:	4601      	mov	r1, r0
 8021be4:	428a      	cmp	r2, r1
 8021be6:	d100      	bne.n	8021bea <memmove+0x2a>
 8021be8:	bd10      	pop	{r4, pc}
 8021bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021bf2:	e7f7      	b.n	8021be4 <memmove+0x24>

08021bf4 <memset>:
 8021bf4:	4402      	add	r2, r0
 8021bf6:	4603      	mov	r3, r0
 8021bf8:	4293      	cmp	r3, r2
 8021bfa:	d100      	bne.n	8021bfe <memset+0xa>
 8021bfc:	4770      	bx	lr
 8021bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8021c02:	e7f9      	b.n	8021bf8 <memset+0x4>

08021c04 <strstr>:
 8021c04:	780a      	ldrb	r2, [r1, #0]
 8021c06:	b570      	push	{r4, r5, r6, lr}
 8021c08:	b96a      	cbnz	r2, 8021c26 <strstr+0x22>
 8021c0a:	bd70      	pop	{r4, r5, r6, pc}
 8021c0c:	429a      	cmp	r2, r3
 8021c0e:	d109      	bne.n	8021c24 <strstr+0x20>
 8021c10:	460c      	mov	r4, r1
 8021c12:	4605      	mov	r5, r0
 8021c14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	d0f6      	beq.n	8021c0a <strstr+0x6>
 8021c1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021c20:	429e      	cmp	r6, r3
 8021c22:	d0f7      	beq.n	8021c14 <strstr+0x10>
 8021c24:	3001      	adds	r0, #1
 8021c26:	7803      	ldrb	r3, [r0, #0]
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d1ef      	bne.n	8021c0c <strstr+0x8>
 8021c2c:	4618      	mov	r0, r3
 8021c2e:	e7ec      	b.n	8021c0a <strstr+0x6>

08021c30 <_localeconv_r>:
 8021c30:	4800      	ldr	r0, [pc, #0]	@ (8021c34 <_localeconv_r+0x4>)
 8021c32:	4770      	bx	lr
 8021c34:	200001c4 	.word	0x200001c4

08021c38 <_close_r>:
 8021c38:	b538      	push	{r3, r4, r5, lr}
 8021c3a:	4d06      	ldr	r5, [pc, #24]	@ (8021c54 <_close_r+0x1c>)
 8021c3c:	2300      	movs	r3, #0
 8021c3e:	4604      	mov	r4, r0
 8021c40:	4608      	mov	r0, r1
 8021c42:	602b      	str	r3, [r5, #0]
 8021c44:	f7df fbe8 	bl	8001418 <_close>
 8021c48:	1c43      	adds	r3, r0, #1
 8021c4a:	d102      	bne.n	8021c52 <_close_r+0x1a>
 8021c4c:	682b      	ldr	r3, [r5, #0]
 8021c4e:	b103      	cbz	r3, 8021c52 <_close_r+0x1a>
 8021c50:	6023      	str	r3, [r4, #0]
 8021c52:	bd38      	pop	{r3, r4, r5, pc}
 8021c54:	20001d44 	.word	0x20001d44

08021c58 <_lseek_r>:
 8021c58:	b538      	push	{r3, r4, r5, lr}
 8021c5a:	4d07      	ldr	r5, [pc, #28]	@ (8021c78 <_lseek_r+0x20>)
 8021c5c:	4604      	mov	r4, r0
 8021c5e:	4608      	mov	r0, r1
 8021c60:	4611      	mov	r1, r2
 8021c62:	2200      	movs	r2, #0
 8021c64:	602a      	str	r2, [r5, #0]
 8021c66:	461a      	mov	r2, r3
 8021c68:	f7df fbfd 	bl	8001466 <_lseek>
 8021c6c:	1c43      	adds	r3, r0, #1
 8021c6e:	d102      	bne.n	8021c76 <_lseek_r+0x1e>
 8021c70:	682b      	ldr	r3, [r5, #0]
 8021c72:	b103      	cbz	r3, 8021c76 <_lseek_r+0x1e>
 8021c74:	6023      	str	r3, [r4, #0]
 8021c76:	bd38      	pop	{r3, r4, r5, pc}
 8021c78:	20001d44 	.word	0x20001d44

08021c7c <_read_r>:
 8021c7c:	b538      	push	{r3, r4, r5, lr}
 8021c7e:	4d07      	ldr	r5, [pc, #28]	@ (8021c9c <_read_r+0x20>)
 8021c80:	4604      	mov	r4, r0
 8021c82:	4608      	mov	r0, r1
 8021c84:	4611      	mov	r1, r2
 8021c86:	2200      	movs	r2, #0
 8021c88:	602a      	str	r2, [r5, #0]
 8021c8a:	461a      	mov	r2, r3
 8021c8c:	f7df fb8b 	bl	80013a6 <_read>
 8021c90:	1c43      	adds	r3, r0, #1
 8021c92:	d102      	bne.n	8021c9a <_read_r+0x1e>
 8021c94:	682b      	ldr	r3, [r5, #0]
 8021c96:	b103      	cbz	r3, 8021c9a <_read_r+0x1e>
 8021c98:	6023      	str	r3, [r4, #0]
 8021c9a:	bd38      	pop	{r3, r4, r5, pc}
 8021c9c:	20001d44 	.word	0x20001d44

08021ca0 <_write_r>:
 8021ca0:	b538      	push	{r3, r4, r5, lr}
 8021ca2:	4d07      	ldr	r5, [pc, #28]	@ (8021cc0 <_write_r+0x20>)
 8021ca4:	4604      	mov	r4, r0
 8021ca6:	4608      	mov	r0, r1
 8021ca8:	4611      	mov	r1, r2
 8021caa:	2200      	movs	r2, #0
 8021cac:	602a      	str	r2, [r5, #0]
 8021cae:	461a      	mov	r2, r3
 8021cb0:	f7df fb96 	bl	80013e0 <_write>
 8021cb4:	1c43      	adds	r3, r0, #1
 8021cb6:	d102      	bne.n	8021cbe <_write_r+0x1e>
 8021cb8:	682b      	ldr	r3, [r5, #0]
 8021cba:	b103      	cbz	r3, 8021cbe <_write_r+0x1e>
 8021cbc:	6023      	str	r3, [r4, #0]
 8021cbe:	bd38      	pop	{r3, r4, r5, pc}
 8021cc0:	20001d44 	.word	0x20001d44

08021cc4 <__errno>:
 8021cc4:	4b01      	ldr	r3, [pc, #4]	@ (8021ccc <__errno+0x8>)
 8021cc6:	6818      	ldr	r0, [r3, #0]
 8021cc8:	4770      	bx	lr
 8021cca:	bf00      	nop
 8021ccc:	20000084 	.word	0x20000084

08021cd0 <__libc_init_array>:
 8021cd0:	b570      	push	{r4, r5, r6, lr}
 8021cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8021d08 <__libc_init_array+0x38>)
 8021cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8021d0c <__libc_init_array+0x3c>)
 8021cd6:	1b64      	subs	r4, r4, r5
 8021cd8:	10a4      	asrs	r4, r4, #2
 8021cda:	2600      	movs	r6, #0
 8021cdc:	42a6      	cmp	r6, r4
 8021cde:	d109      	bne.n	8021cf4 <__libc_init_array+0x24>
 8021ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8021d10 <__libc_init_array+0x40>)
 8021ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8021d14 <__libc_init_array+0x44>)
 8021ce4:	f001 ff46 	bl	8023b74 <_init>
 8021ce8:	1b64      	subs	r4, r4, r5
 8021cea:	10a4      	asrs	r4, r4, #2
 8021cec:	2600      	movs	r6, #0
 8021cee:	42a6      	cmp	r6, r4
 8021cf0:	d105      	bne.n	8021cfe <__libc_init_array+0x2e>
 8021cf2:	bd70      	pop	{r4, r5, r6, pc}
 8021cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8021cf8:	4798      	blx	r3
 8021cfa:	3601      	adds	r6, #1
 8021cfc:	e7ee      	b.n	8021cdc <__libc_init_array+0xc>
 8021cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d02:	4798      	blx	r3
 8021d04:	3601      	adds	r6, #1
 8021d06:	e7f2      	b.n	8021cee <__libc_init_array+0x1e>
 8021d08:	08025eac 	.word	0x08025eac
 8021d0c:	08025eac 	.word	0x08025eac
 8021d10:	08025eac 	.word	0x08025eac
 8021d14:	08025eb0 	.word	0x08025eb0

08021d18 <__retarget_lock_init_recursive>:
 8021d18:	4770      	bx	lr

08021d1a <__retarget_lock_acquire_recursive>:
 8021d1a:	4770      	bx	lr

08021d1c <__retarget_lock_release_recursive>:
 8021d1c:	4770      	bx	lr

08021d1e <memcpy>:
 8021d1e:	440a      	add	r2, r1
 8021d20:	4291      	cmp	r1, r2
 8021d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8021d26:	d100      	bne.n	8021d2a <memcpy+0xc>
 8021d28:	4770      	bx	lr
 8021d2a:	b510      	push	{r4, lr}
 8021d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021d34:	4291      	cmp	r1, r2
 8021d36:	d1f9      	bne.n	8021d2c <memcpy+0xe>
 8021d38:	bd10      	pop	{r4, pc}

08021d3a <quorem>:
 8021d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d3e:	6903      	ldr	r3, [r0, #16]
 8021d40:	690c      	ldr	r4, [r1, #16]
 8021d42:	42a3      	cmp	r3, r4
 8021d44:	4607      	mov	r7, r0
 8021d46:	db7e      	blt.n	8021e46 <quorem+0x10c>
 8021d48:	3c01      	subs	r4, #1
 8021d4a:	f101 0814 	add.w	r8, r1, #20
 8021d4e:	00a3      	lsls	r3, r4, #2
 8021d50:	f100 0514 	add.w	r5, r0, #20
 8021d54:	9300      	str	r3, [sp, #0]
 8021d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021d5a:	9301      	str	r3, [sp, #4]
 8021d5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021d60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021d64:	3301      	adds	r3, #1
 8021d66:	429a      	cmp	r2, r3
 8021d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021d6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8021d70:	d32e      	bcc.n	8021dd0 <quorem+0x96>
 8021d72:	f04f 0a00 	mov.w	sl, #0
 8021d76:	46c4      	mov	ip, r8
 8021d78:	46ae      	mov	lr, r5
 8021d7a:	46d3      	mov	fp, sl
 8021d7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8021d80:	b298      	uxth	r0, r3
 8021d82:	fb06 a000 	mla	r0, r6, r0, sl
 8021d86:	0c02      	lsrs	r2, r0, #16
 8021d88:	0c1b      	lsrs	r3, r3, #16
 8021d8a:	fb06 2303 	mla	r3, r6, r3, r2
 8021d8e:	f8de 2000 	ldr.w	r2, [lr]
 8021d92:	b280      	uxth	r0, r0
 8021d94:	b292      	uxth	r2, r2
 8021d96:	1a12      	subs	r2, r2, r0
 8021d98:	445a      	add	r2, fp
 8021d9a:	f8de 0000 	ldr.w	r0, [lr]
 8021d9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021da2:	b29b      	uxth	r3, r3
 8021da4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8021da8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8021dac:	b292      	uxth	r2, r2
 8021dae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8021db2:	45e1      	cmp	r9, ip
 8021db4:	f84e 2b04 	str.w	r2, [lr], #4
 8021db8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8021dbc:	d2de      	bcs.n	8021d7c <quorem+0x42>
 8021dbe:	9b00      	ldr	r3, [sp, #0]
 8021dc0:	58eb      	ldr	r3, [r5, r3]
 8021dc2:	b92b      	cbnz	r3, 8021dd0 <quorem+0x96>
 8021dc4:	9b01      	ldr	r3, [sp, #4]
 8021dc6:	3b04      	subs	r3, #4
 8021dc8:	429d      	cmp	r5, r3
 8021dca:	461a      	mov	r2, r3
 8021dcc:	d32f      	bcc.n	8021e2e <quorem+0xf4>
 8021dce:	613c      	str	r4, [r7, #16]
 8021dd0:	4638      	mov	r0, r7
 8021dd2:	f001 f97f 	bl	80230d4 <__mcmp>
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	db25      	blt.n	8021e26 <quorem+0xec>
 8021dda:	4629      	mov	r1, r5
 8021ddc:	2000      	movs	r0, #0
 8021dde:	f858 2b04 	ldr.w	r2, [r8], #4
 8021de2:	f8d1 c000 	ldr.w	ip, [r1]
 8021de6:	fa1f fe82 	uxth.w	lr, r2
 8021dea:	fa1f f38c 	uxth.w	r3, ip
 8021dee:	eba3 030e 	sub.w	r3, r3, lr
 8021df2:	4403      	add	r3, r0
 8021df4:	0c12      	lsrs	r2, r2, #16
 8021df6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8021dfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8021dfe:	b29b      	uxth	r3, r3
 8021e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021e04:	45c1      	cmp	r9, r8
 8021e06:	f841 3b04 	str.w	r3, [r1], #4
 8021e0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8021e0e:	d2e6      	bcs.n	8021dde <quorem+0xa4>
 8021e10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021e14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021e18:	b922      	cbnz	r2, 8021e24 <quorem+0xea>
 8021e1a:	3b04      	subs	r3, #4
 8021e1c:	429d      	cmp	r5, r3
 8021e1e:	461a      	mov	r2, r3
 8021e20:	d30b      	bcc.n	8021e3a <quorem+0x100>
 8021e22:	613c      	str	r4, [r7, #16]
 8021e24:	3601      	adds	r6, #1
 8021e26:	4630      	mov	r0, r6
 8021e28:	b003      	add	sp, #12
 8021e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e2e:	6812      	ldr	r2, [r2, #0]
 8021e30:	3b04      	subs	r3, #4
 8021e32:	2a00      	cmp	r2, #0
 8021e34:	d1cb      	bne.n	8021dce <quorem+0x94>
 8021e36:	3c01      	subs	r4, #1
 8021e38:	e7c6      	b.n	8021dc8 <quorem+0x8e>
 8021e3a:	6812      	ldr	r2, [r2, #0]
 8021e3c:	3b04      	subs	r3, #4
 8021e3e:	2a00      	cmp	r2, #0
 8021e40:	d1ef      	bne.n	8021e22 <quorem+0xe8>
 8021e42:	3c01      	subs	r4, #1
 8021e44:	e7ea      	b.n	8021e1c <quorem+0xe2>
 8021e46:	2000      	movs	r0, #0
 8021e48:	e7ee      	b.n	8021e28 <quorem+0xee>
 8021e4a:	0000      	movs	r0, r0
 8021e4c:	0000      	movs	r0, r0
	...

08021e50 <_dtoa_r>:
 8021e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e54:	69c7      	ldr	r7, [r0, #28]
 8021e56:	b097      	sub	sp, #92	@ 0x5c
 8021e58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8021e5c:	ec55 4b10 	vmov	r4, r5, d0
 8021e60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8021e62:	9107      	str	r1, [sp, #28]
 8021e64:	4681      	mov	r9, r0
 8021e66:	920c      	str	r2, [sp, #48]	@ 0x30
 8021e68:	9311      	str	r3, [sp, #68]	@ 0x44
 8021e6a:	b97f      	cbnz	r7, 8021e8c <_dtoa_r+0x3c>
 8021e6c:	2010      	movs	r0, #16
 8021e6e:	f000 fe09 	bl	8022a84 <malloc>
 8021e72:	4602      	mov	r2, r0
 8021e74:	f8c9 001c 	str.w	r0, [r9, #28]
 8021e78:	b920      	cbnz	r0, 8021e84 <_dtoa_r+0x34>
 8021e7a:	4ba9      	ldr	r3, [pc, #676]	@ (8022120 <_dtoa_r+0x2d0>)
 8021e7c:	21ef      	movs	r1, #239	@ 0xef
 8021e7e:	48a9      	ldr	r0, [pc, #676]	@ (8022124 <_dtoa_r+0x2d4>)
 8021e80:	f001 fd92 	bl	80239a8 <__assert_func>
 8021e84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8021e88:	6007      	str	r7, [r0, #0]
 8021e8a:	60c7      	str	r7, [r0, #12]
 8021e8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8021e90:	6819      	ldr	r1, [r3, #0]
 8021e92:	b159      	cbz	r1, 8021eac <_dtoa_r+0x5c>
 8021e94:	685a      	ldr	r2, [r3, #4]
 8021e96:	604a      	str	r2, [r1, #4]
 8021e98:	2301      	movs	r3, #1
 8021e9a:	4093      	lsls	r3, r2
 8021e9c:	608b      	str	r3, [r1, #8]
 8021e9e:	4648      	mov	r0, r9
 8021ea0:	f000 fee6 	bl	8022c70 <_Bfree>
 8021ea4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8021ea8:	2200      	movs	r2, #0
 8021eaa:	601a      	str	r2, [r3, #0]
 8021eac:	1e2b      	subs	r3, r5, #0
 8021eae:	bfb9      	ittee	lt
 8021eb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8021eb4:	9305      	strlt	r3, [sp, #20]
 8021eb6:	2300      	movge	r3, #0
 8021eb8:	6033      	strge	r3, [r6, #0]
 8021eba:	9f05      	ldr	r7, [sp, #20]
 8021ebc:	4b9a      	ldr	r3, [pc, #616]	@ (8022128 <_dtoa_r+0x2d8>)
 8021ebe:	bfbc      	itt	lt
 8021ec0:	2201      	movlt	r2, #1
 8021ec2:	6032      	strlt	r2, [r6, #0]
 8021ec4:	43bb      	bics	r3, r7
 8021ec6:	d112      	bne.n	8021eee <_dtoa_r+0x9e>
 8021ec8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021eca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8021ece:	6013      	str	r3, [r2, #0]
 8021ed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021ed4:	4323      	orrs	r3, r4
 8021ed6:	f000 855a 	beq.w	802298e <_dtoa_r+0xb3e>
 8021eda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021edc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 802213c <_dtoa_r+0x2ec>
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	f000 855c 	beq.w	802299e <_dtoa_r+0xb4e>
 8021ee6:	f10a 0303 	add.w	r3, sl, #3
 8021eea:	f000 bd56 	b.w	802299a <_dtoa_r+0xb4a>
 8021eee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8021ef2:	2200      	movs	r2, #0
 8021ef4:	ec51 0b17 	vmov	r0, r1, d7
 8021ef8:	2300      	movs	r3, #0
 8021efa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8021efe:	f7de fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8021f02:	4680      	mov	r8, r0
 8021f04:	b158      	cbz	r0, 8021f1e <_dtoa_r+0xce>
 8021f06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021f08:	2301      	movs	r3, #1
 8021f0a:	6013      	str	r3, [r2, #0]
 8021f0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021f0e:	b113      	cbz	r3, 8021f16 <_dtoa_r+0xc6>
 8021f10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021f12:	4b86      	ldr	r3, [pc, #536]	@ (802212c <_dtoa_r+0x2dc>)
 8021f14:	6013      	str	r3, [r2, #0]
 8021f16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8022140 <_dtoa_r+0x2f0>
 8021f1a:	f000 bd40 	b.w	802299e <_dtoa_r+0xb4e>
 8021f1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8021f22:	aa14      	add	r2, sp, #80	@ 0x50
 8021f24:	a915      	add	r1, sp, #84	@ 0x54
 8021f26:	4648      	mov	r0, r9
 8021f28:	f001 f984 	bl	8023234 <__d2b>
 8021f2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8021f30:	9002      	str	r0, [sp, #8]
 8021f32:	2e00      	cmp	r6, #0
 8021f34:	d078      	beq.n	8022028 <_dtoa_r+0x1d8>
 8021f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8021f44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8021f48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8021f4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8021f50:	4619      	mov	r1, r3
 8021f52:	2200      	movs	r2, #0
 8021f54:	4b76      	ldr	r3, [pc, #472]	@ (8022130 <_dtoa_r+0x2e0>)
 8021f56:	f7de f997 	bl	8000288 <__aeabi_dsub>
 8021f5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8022108 <_dtoa_r+0x2b8>)
 8021f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f60:	f7de fb4a 	bl	80005f8 <__aeabi_dmul>
 8021f64:	a36a      	add	r3, pc, #424	@ (adr r3, 8022110 <_dtoa_r+0x2c0>)
 8021f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f6a:	f7de f98f 	bl	800028c <__adddf3>
 8021f6e:	4604      	mov	r4, r0
 8021f70:	4630      	mov	r0, r6
 8021f72:	460d      	mov	r5, r1
 8021f74:	f7de fad6 	bl	8000524 <__aeabi_i2d>
 8021f78:	a367      	add	r3, pc, #412	@ (adr r3, 8022118 <_dtoa_r+0x2c8>)
 8021f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f7e:	f7de fb3b 	bl	80005f8 <__aeabi_dmul>
 8021f82:	4602      	mov	r2, r0
 8021f84:	460b      	mov	r3, r1
 8021f86:	4620      	mov	r0, r4
 8021f88:	4629      	mov	r1, r5
 8021f8a:	f7de f97f 	bl	800028c <__adddf3>
 8021f8e:	4604      	mov	r4, r0
 8021f90:	460d      	mov	r5, r1
 8021f92:	f7de fde1 	bl	8000b58 <__aeabi_d2iz>
 8021f96:	2200      	movs	r2, #0
 8021f98:	4607      	mov	r7, r0
 8021f9a:	2300      	movs	r3, #0
 8021f9c:	4620      	mov	r0, r4
 8021f9e:	4629      	mov	r1, r5
 8021fa0:	f7de fd9c 	bl	8000adc <__aeabi_dcmplt>
 8021fa4:	b140      	cbz	r0, 8021fb8 <_dtoa_r+0x168>
 8021fa6:	4638      	mov	r0, r7
 8021fa8:	f7de fabc 	bl	8000524 <__aeabi_i2d>
 8021fac:	4622      	mov	r2, r4
 8021fae:	462b      	mov	r3, r5
 8021fb0:	f7de fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8021fb4:	b900      	cbnz	r0, 8021fb8 <_dtoa_r+0x168>
 8021fb6:	3f01      	subs	r7, #1
 8021fb8:	2f16      	cmp	r7, #22
 8021fba:	d852      	bhi.n	8022062 <_dtoa_r+0x212>
 8021fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8022134 <_dtoa_r+0x2e4>)
 8021fbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8021fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8021fca:	f7de fd87 	bl	8000adc <__aeabi_dcmplt>
 8021fce:	2800      	cmp	r0, #0
 8021fd0:	d049      	beq.n	8022066 <_dtoa_r+0x216>
 8021fd2:	3f01      	subs	r7, #1
 8021fd4:	2300      	movs	r3, #0
 8021fd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8021fd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021fda:	1b9b      	subs	r3, r3, r6
 8021fdc:	1e5a      	subs	r2, r3, #1
 8021fde:	bf45      	ittet	mi
 8021fe0:	f1c3 0301 	rsbmi	r3, r3, #1
 8021fe4:	9300      	strmi	r3, [sp, #0]
 8021fe6:	2300      	movpl	r3, #0
 8021fe8:	2300      	movmi	r3, #0
 8021fea:	9206      	str	r2, [sp, #24]
 8021fec:	bf54      	ite	pl
 8021fee:	9300      	strpl	r3, [sp, #0]
 8021ff0:	9306      	strmi	r3, [sp, #24]
 8021ff2:	2f00      	cmp	r7, #0
 8021ff4:	db39      	blt.n	802206a <_dtoa_r+0x21a>
 8021ff6:	9b06      	ldr	r3, [sp, #24]
 8021ff8:	970d      	str	r7, [sp, #52]	@ 0x34
 8021ffa:	443b      	add	r3, r7
 8021ffc:	9306      	str	r3, [sp, #24]
 8021ffe:	2300      	movs	r3, #0
 8022000:	9308      	str	r3, [sp, #32]
 8022002:	9b07      	ldr	r3, [sp, #28]
 8022004:	2b09      	cmp	r3, #9
 8022006:	d863      	bhi.n	80220d0 <_dtoa_r+0x280>
 8022008:	2b05      	cmp	r3, #5
 802200a:	bfc4      	itt	gt
 802200c:	3b04      	subgt	r3, #4
 802200e:	9307      	strgt	r3, [sp, #28]
 8022010:	9b07      	ldr	r3, [sp, #28]
 8022012:	f1a3 0302 	sub.w	r3, r3, #2
 8022016:	bfcc      	ite	gt
 8022018:	2400      	movgt	r4, #0
 802201a:	2401      	movle	r4, #1
 802201c:	2b03      	cmp	r3, #3
 802201e:	d863      	bhi.n	80220e8 <_dtoa_r+0x298>
 8022020:	e8df f003 	tbb	[pc, r3]
 8022024:	2b375452 	.word	0x2b375452
 8022028:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 802202c:	441e      	add	r6, r3
 802202e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8022032:	2b20      	cmp	r3, #32
 8022034:	bfc1      	itttt	gt
 8022036:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802203a:	409f      	lslgt	r7, r3
 802203c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8022040:	fa24 f303 	lsrgt.w	r3, r4, r3
 8022044:	bfd6      	itet	le
 8022046:	f1c3 0320 	rsble	r3, r3, #32
 802204a:	ea47 0003 	orrgt.w	r0, r7, r3
 802204e:	fa04 f003 	lslle.w	r0, r4, r3
 8022052:	f7de fa57 	bl	8000504 <__aeabi_ui2d>
 8022056:	2201      	movs	r2, #1
 8022058:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802205c:	3e01      	subs	r6, #1
 802205e:	9212      	str	r2, [sp, #72]	@ 0x48
 8022060:	e776      	b.n	8021f50 <_dtoa_r+0x100>
 8022062:	2301      	movs	r3, #1
 8022064:	e7b7      	b.n	8021fd6 <_dtoa_r+0x186>
 8022066:	9010      	str	r0, [sp, #64]	@ 0x40
 8022068:	e7b6      	b.n	8021fd8 <_dtoa_r+0x188>
 802206a:	9b00      	ldr	r3, [sp, #0]
 802206c:	1bdb      	subs	r3, r3, r7
 802206e:	9300      	str	r3, [sp, #0]
 8022070:	427b      	negs	r3, r7
 8022072:	9308      	str	r3, [sp, #32]
 8022074:	2300      	movs	r3, #0
 8022076:	930d      	str	r3, [sp, #52]	@ 0x34
 8022078:	e7c3      	b.n	8022002 <_dtoa_r+0x1b2>
 802207a:	2301      	movs	r3, #1
 802207c:	9309      	str	r3, [sp, #36]	@ 0x24
 802207e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022080:	eb07 0b03 	add.w	fp, r7, r3
 8022084:	f10b 0301 	add.w	r3, fp, #1
 8022088:	2b01      	cmp	r3, #1
 802208a:	9303      	str	r3, [sp, #12]
 802208c:	bfb8      	it	lt
 802208e:	2301      	movlt	r3, #1
 8022090:	e006      	b.n	80220a0 <_dtoa_r+0x250>
 8022092:	2301      	movs	r3, #1
 8022094:	9309      	str	r3, [sp, #36]	@ 0x24
 8022096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022098:	2b00      	cmp	r3, #0
 802209a:	dd28      	ble.n	80220ee <_dtoa_r+0x29e>
 802209c:	469b      	mov	fp, r3
 802209e:	9303      	str	r3, [sp, #12]
 80220a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80220a4:	2100      	movs	r1, #0
 80220a6:	2204      	movs	r2, #4
 80220a8:	f102 0514 	add.w	r5, r2, #20
 80220ac:	429d      	cmp	r5, r3
 80220ae:	d926      	bls.n	80220fe <_dtoa_r+0x2ae>
 80220b0:	6041      	str	r1, [r0, #4]
 80220b2:	4648      	mov	r0, r9
 80220b4:	f000 fd9c 	bl	8022bf0 <_Balloc>
 80220b8:	4682      	mov	sl, r0
 80220ba:	2800      	cmp	r0, #0
 80220bc:	d142      	bne.n	8022144 <_dtoa_r+0x2f4>
 80220be:	4b1e      	ldr	r3, [pc, #120]	@ (8022138 <_dtoa_r+0x2e8>)
 80220c0:	4602      	mov	r2, r0
 80220c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80220c6:	e6da      	b.n	8021e7e <_dtoa_r+0x2e>
 80220c8:	2300      	movs	r3, #0
 80220ca:	e7e3      	b.n	8022094 <_dtoa_r+0x244>
 80220cc:	2300      	movs	r3, #0
 80220ce:	e7d5      	b.n	802207c <_dtoa_r+0x22c>
 80220d0:	2401      	movs	r4, #1
 80220d2:	2300      	movs	r3, #0
 80220d4:	9307      	str	r3, [sp, #28]
 80220d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80220d8:	f04f 3bff 	mov.w	fp, #4294967295
 80220dc:	2200      	movs	r2, #0
 80220de:	f8cd b00c 	str.w	fp, [sp, #12]
 80220e2:	2312      	movs	r3, #18
 80220e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80220e6:	e7db      	b.n	80220a0 <_dtoa_r+0x250>
 80220e8:	2301      	movs	r3, #1
 80220ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80220ec:	e7f4      	b.n	80220d8 <_dtoa_r+0x288>
 80220ee:	f04f 0b01 	mov.w	fp, #1
 80220f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80220f6:	465b      	mov	r3, fp
 80220f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80220fc:	e7d0      	b.n	80220a0 <_dtoa_r+0x250>
 80220fe:	3101      	adds	r1, #1
 8022100:	0052      	lsls	r2, r2, #1
 8022102:	e7d1      	b.n	80220a8 <_dtoa_r+0x258>
 8022104:	f3af 8000 	nop.w
 8022108:	636f4361 	.word	0x636f4361
 802210c:	3fd287a7 	.word	0x3fd287a7
 8022110:	8b60c8b3 	.word	0x8b60c8b3
 8022114:	3fc68a28 	.word	0x3fc68a28
 8022118:	509f79fb 	.word	0x509f79fb
 802211c:	3fd34413 	.word	0x3fd34413
 8022120:	08025b6d 	.word	0x08025b6d
 8022124:	08025b84 	.word	0x08025b84
 8022128:	7ff00000 	.word	0x7ff00000
 802212c:	08025b3d 	.word	0x08025b3d
 8022130:	3ff80000 	.word	0x3ff80000
 8022134:	08025cd8 	.word	0x08025cd8
 8022138:	08025bdc 	.word	0x08025bdc
 802213c:	08025b69 	.word	0x08025b69
 8022140:	08025b3c 	.word	0x08025b3c
 8022144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022148:	6018      	str	r0, [r3, #0]
 802214a:	9b03      	ldr	r3, [sp, #12]
 802214c:	2b0e      	cmp	r3, #14
 802214e:	f200 80a1 	bhi.w	8022294 <_dtoa_r+0x444>
 8022152:	2c00      	cmp	r4, #0
 8022154:	f000 809e 	beq.w	8022294 <_dtoa_r+0x444>
 8022158:	2f00      	cmp	r7, #0
 802215a:	dd33      	ble.n	80221c4 <_dtoa_r+0x374>
 802215c:	4b9c      	ldr	r3, [pc, #624]	@ (80223d0 <_dtoa_r+0x580>)
 802215e:	f007 020f 	and.w	r2, r7, #15
 8022162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022166:	ed93 7b00 	vldr	d7, [r3]
 802216a:	05f8      	lsls	r0, r7, #23
 802216c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8022170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8022174:	d516      	bpl.n	80221a4 <_dtoa_r+0x354>
 8022176:	4b97      	ldr	r3, [pc, #604]	@ (80223d4 <_dtoa_r+0x584>)
 8022178:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802217c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022180:	f7de fb64 	bl	800084c <__aeabi_ddiv>
 8022184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022188:	f004 040f 	and.w	r4, r4, #15
 802218c:	2603      	movs	r6, #3
 802218e:	4d91      	ldr	r5, [pc, #580]	@ (80223d4 <_dtoa_r+0x584>)
 8022190:	b954      	cbnz	r4, 80221a8 <_dtoa_r+0x358>
 8022192:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8022196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802219a:	f7de fb57 	bl	800084c <__aeabi_ddiv>
 802219e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80221a2:	e028      	b.n	80221f6 <_dtoa_r+0x3a6>
 80221a4:	2602      	movs	r6, #2
 80221a6:	e7f2      	b.n	802218e <_dtoa_r+0x33e>
 80221a8:	07e1      	lsls	r1, r4, #31
 80221aa:	d508      	bpl.n	80221be <_dtoa_r+0x36e>
 80221ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80221b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80221b4:	f7de fa20 	bl	80005f8 <__aeabi_dmul>
 80221b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80221bc:	3601      	adds	r6, #1
 80221be:	1064      	asrs	r4, r4, #1
 80221c0:	3508      	adds	r5, #8
 80221c2:	e7e5      	b.n	8022190 <_dtoa_r+0x340>
 80221c4:	f000 80af 	beq.w	8022326 <_dtoa_r+0x4d6>
 80221c8:	427c      	negs	r4, r7
 80221ca:	4b81      	ldr	r3, [pc, #516]	@ (80223d0 <_dtoa_r+0x580>)
 80221cc:	4d81      	ldr	r5, [pc, #516]	@ (80223d4 <_dtoa_r+0x584>)
 80221ce:	f004 020f 	and.w	r2, r4, #15
 80221d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80221d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80221de:	f7de fa0b 	bl	80005f8 <__aeabi_dmul>
 80221e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80221e6:	1124      	asrs	r4, r4, #4
 80221e8:	2300      	movs	r3, #0
 80221ea:	2602      	movs	r6, #2
 80221ec:	2c00      	cmp	r4, #0
 80221ee:	f040 808f 	bne.w	8022310 <_dtoa_r+0x4c0>
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d1d3      	bne.n	802219e <_dtoa_r+0x34e>
 80221f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80221f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	f000 8094 	beq.w	802232a <_dtoa_r+0x4da>
 8022202:	4b75      	ldr	r3, [pc, #468]	@ (80223d8 <_dtoa_r+0x588>)
 8022204:	2200      	movs	r2, #0
 8022206:	4620      	mov	r0, r4
 8022208:	4629      	mov	r1, r5
 802220a:	f7de fc67 	bl	8000adc <__aeabi_dcmplt>
 802220e:	2800      	cmp	r0, #0
 8022210:	f000 808b 	beq.w	802232a <_dtoa_r+0x4da>
 8022214:	9b03      	ldr	r3, [sp, #12]
 8022216:	2b00      	cmp	r3, #0
 8022218:	f000 8087 	beq.w	802232a <_dtoa_r+0x4da>
 802221c:	f1bb 0f00 	cmp.w	fp, #0
 8022220:	dd34      	ble.n	802228c <_dtoa_r+0x43c>
 8022222:	4620      	mov	r0, r4
 8022224:	4b6d      	ldr	r3, [pc, #436]	@ (80223dc <_dtoa_r+0x58c>)
 8022226:	2200      	movs	r2, #0
 8022228:	4629      	mov	r1, r5
 802222a:	f7de f9e5 	bl	80005f8 <__aeabi_dmul>
 802222e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022232:	f107 38ff 	add.w	r8, r7, #4294967295
 8022236:	3601      	adds	r6, #1
 8022238:	465c      	mov	r4, fp
 802223a:	4630      	mov	r0, r6
 802223c:	f7de f972 	bl	8000524 <__aeabi_i2d>
 8022240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022244:	f7de f9d8 	bl	80005f8 <__aeabi_dmul>
 8022248:	4b65      	ldr	r3, [pc, #404]	@ (80223e0 <_dtoa_r+0x590>)
 802224a:	2200      	movs	r2, #0
 802224c:	f7de f81e 	bl	800028c <__adddf3>
 8022250:	4605      	mov	r5, r0
 8022252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8022256:	2c00      	cmp	r4, #0
 8022258:	d16a      	bne.n	8022330 <_dtoa_r+0x4e0>
 802225a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802225e:	4b61      	ldr	r3, [pc, #388]	@ (80223e4 <_dtoa_r+0x594>)
 8022260:	2200      	movs	r2, #0
 8022262:	f7de f811 	bl	8000288 <__aeabi_dsub>
 8022266:	4602      	mov	r2, r0
 8022268:	460b      	mov	r3, r1
 802226a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802226e:	462a      	mov	r2, r5
 8022270:	4633      	mov	r3, r6
 8022272:	f7de fc51 	bl	8000b18 <__aeabi_dcmpgt>
 8022276:	2800      	cmp	r0, #0
 8022278:	f040 8298 	bne.w	80227ac <_dtoa_r+0x95c>
 802227c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022280:	462a      	mov	r2, r5
 8022282:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8022286:	f7de fc29 	bl	8000adc <__aeabi_dcmplt>
 802228a:	bb38      	cbnz	r0, 80222dc <_dtoa_r+0x48c>
 802228c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8022290:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8022294:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022296:	2b00      	cmp	r3, #0
 8022298:	f2c0 8157 	blt.w	802254a <_dtoa_r+0x6fa>
 802229c:	2f0e      	cmp	r7, #14
 802229e:	f300 8154 	bgt.w	802254a <_dtoa_r+0x6fa>
 80222a2:	4b4b      	ldr	r3, [pc, #300]	@ (80223d0 <_dtoa_r+0x580>)
 80222a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80222a8:	ed93 7b00 	vldr	d7, [r3]
 80222ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	ed8d 7b00 	vstr	d7, [sp]
 80222b4:	f280 80e5 	bge.w	8022482 <_dtoa_r+0x632>
 80222b8:	9b03      	ldr	r3, [sp, #12]
 80222ba:	2b00      	cmp	r3, #0
 80222bc:	f300 80e1 	bgt.w	8022482 <_dtoa_r+0x632>
 80222c0:	d10c      	bne.n	80222dc <_dtoa_r+0x48c>
 80222c2:	4b48      	ldr	r3, [pc, #288]	@ (80223e4 <_dtoa_r+0x594>)
 80222c4:	2200      	movs	r2, #0
 80222c6:	ec51 0b17 	vmov	r0, r1, d7
 80222ca:	f7de f995 	bl	80005f8 <__aeabi_dmul>
 80222ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80222d2:	f7de fc17 	bl	8000b04 <__aeabi_dcmpge>
 80222d6:	2800      	cmp	r0, #0
 80222d8:	f000 8266 	beq.w	80227a8 <_dtoa_r+0x958>
 80222dc:	2400      	movs	r4, #0
 80222de:	4625      	mov	r5, r4
 80222e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222e2:	4656      	mov	r6, sl
 80222e4:	ea6f 0803 	mvn.w	r8, r3
 80222e8:	2700      	movs	r7, #0
 80222ea:	4621      	mov	r1, r4
 80222ec:	4648      	mov	r0, r9
 80222ee:	f000 fcbf 	bl	8022c70 <_Bfree>
 80222f2:	2d00      	cmp	r5, #0
 80222f4:	f000 80bd 	beq.w	8022472 <_dtoa_r+0x622>
 80222f8:	b12f      	cbz	r7, 8022306 <_dtoa_r+0x4b6>
 80222fa:	42af      	cmp	r7, r5
 80222fc:	d003      	beq.n	8022306 <_dtoa_r+0x4b6>
 80222fe:	4639      	mov	r1, r7
 8022300:	4648      	mov	r0, r9
 8022302:	f000 fcb5 	bl	8022c70 <_Bfree>
 8022306:	4629      	mov	r1, r5
 8022308:	4648      	mov	r0, r9
 802230a:	f000 fcb1 	bl	8022c70 <_Bfree>
 802230e:	e0b0      	b.n	8022472 <_dtoa_r+0x622>
 8022310:	07e2      	lsls	r2, r4, #31
 8022312:	d505      	bpl.n	8022320 <_dtoa_r+0x4d0>
 8022314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022318:	f7de f96e 	bl	80005f8 <__aeabi_dmul>
 802231c:	3601      	adds	r6, #1
 802231e:	2301      	movs	r3, #1
 8022320:	1064      	asrs	r4, r4, #1
 8022322:	3508      	adds	r5, #8
 8022324:	e762      	b.n	80221ec <_dtoa_r+0x39c>
 8022326:	2602      	movs	r6, #2
 8022328:	e765      	b.n	80221f6 <_dtoa_r+0x3a6>
 802232a:	9c03      	ldr	r4, [sp, #12]
 802232c:	46b8      	mov	r8, r7
 802232e:	e784      	b.n	802223a <_dtoa_r+0x3ea>
 8022330:	4b27      	ldr	r3, [pc, #156]	@ (80223d0 <_dtoa_r+0x580>)
 8022332:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022334:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802233c:	4454      	add	r4, sl
 802233e:	2900      	cmp	r1, #0
 8022340:	d054      	beq.n	80223ec <_dtoa_r+0x59c>
 8022342:	4929      	ldr	r1, [pc, #164]	@ (80223e8 <_dtoa_r+0x598>)
 8022344:	2000      	movs	r0, #0
 8022346:	f7de fa81 	bl	800084c <__aeabi_ddiv>
 802234a:	4633      	mov	r3, r6
 802234c:	462a      	mov	r2, r5
 802234e:	f7dd ff9b 	bl	8000288 <__aeabi_dsub>
 8022352:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8022356:	4656      	mov	r6, sl
 8022358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802235c:	f7de fbfc 	bl	8000b58 <__aeabi_d2iz>
 8022360:	4605      	mov	r5, r0
 8022362:	f7de f8df 	bl	8000524 <__aeabi_i2d>
 8022366:	4602      	mov	r2, r0
 8022368:	460b      	mov	r3, r1
 802236a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802236e:	f7dd ff8b 	bl	8000288 <__aeabi_dsub>
 8022372:	3530      	adds	r5, #48	@ 0x30
 8022374:	4602      	mov	r2, r0
 8022376:	460b      	mov	r3, r1
 8022378:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802237c:	f806 5b01 	strb.w	r5, [r6], #1
 8022380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8022384:	f7de fbaa 	bl	8000adc <__aeabi_dcmplt>
 8022388:	2800      	cmp	r0, #0
 802238a:	d172      	bne.n	8022472 <_dtoa_r+0x622>
 802238c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022390:	4911      	ldr	r1, [pc, #68]	@ (80223d8 <_dtoa_r+0x588>)
 8022392:	2000      	movs	r0, #0
 8022394:	f7dd ff78 	bl	8000288 <__aeabi_dsub>
 8022398:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802239c:	f7de fb9e 	bl	8000adc <__aeabi_dcmplt>
 80223a0:	2800      	cmp	r0, #0
 80223a2:	f040 80b4 	bne.w	802250e <_dtoa_r+0x6be>
 80223a6:	42a6      	cmp	r6, r4
 80223a8:	f43f af70 	beq.w	802228c <_dtoa_r+0x43c>
 80223ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80223b0:	4b0a      	ldr	r3, [pc, #40]	@ (80223dc <_dtoa_r+0x58c>)
 80223b2:	2200      	movs	r2, #0
 80223b4:	f7de f920 	bl	80005f8 <__aeabi_dmul>
 80223b8:	4b08      	ldr	r3, [pc, #32]	@ (80223dc <_dtoa_r+0x58c>)
 80223ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80223be:	2200      	movs	r2, #0
 80223c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80223c4:	f7de f918 	bl	80005f8 <__aeabi_dmul>
 80223c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80223cc:	e7c4      	b.n	8022358 <_dtoa_r+0x508>
 80223ce:	bf00      	nop
 80223d0:	08025cd8 	.word	0x08025cd8
 80223d4:	08025cb0 	.word	0x08025cb0
 80223d8:	3ff00000 	.word	0x3ff00000
 80223dc:	40240000 	.word	0x40240000
 80223e0:	401c0000 	.word	0x401c0000
 80223e4:	40140000 	.word	0x40140000
 80223e8:	3fe00000 	.word	0x3fe00000
 80223ec:	4631      	mov	r1, r6
 80223ee:	4628      	mov	r0, r5
 80223f0:	f7de f902 	bl	80005f8 <__aeabi_dmul>
 80223f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80223f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80223fa:	4656      	mov	r6, sl
 80223fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022400:	f7de fbaa 	bl	8000b58 <__aeabi_d2iz>
 8022404:	4605      	mov	r5, r0
 8022406:	f7de f88d 	bl	8000524 <__aeabi_i2d>
 802240a:	4602      	mov	r2, r0
 802240c:	460b      	mov	r3, r1
 802240e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022412:	f7dd ff39 	bl	8000288 <__aeabi_dsub>
 8022416:	3530      	adds	r5, #48	@ 0x30
 8022418:	f806 5b01 	strb.w	r5, [r6], #1
 802241c:	4602      	mov	r2, r0
 802241e:	460b      	mov	r3, r1
 8022420:	42a6      	cmp	r6, r4
 8022422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022426:	f04f 0200 	mov.w	r2, #0
 802242a:	d124      	bne.n	8022476 <_dtoa_r+0x626>
 802242c:	4baf      	ldr	r3, [pc, #700]	@ (80226ec <_dtoa_r+0x89c>)
 802242e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8022432:	f7dd ff2b 	bl	800028c <__adddf3>
 8022436:	4602      	mov	r2, r0
 8022438:	460b      	mov	r3, r1
 802243a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802243e:	f7de fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 8022442:	2800      	cmp	r0, #0
 8022444:	d163      	bne.n	802250e <_dtoa_r+0x6be>
 8022446:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802244a:	49a8      	ldr	r1, [pc, #672]	@ (80226ec <_dtoa_r+0x89c>)
 802244c:	2000      	movs	r0, #0
 802244e:	f7dd ff1b 	bl	8000288 <__aeabi_dsub>
 8022452:	4602      	mov	r2, r0
 8022454:	460b      	mov	r3, r1
 8022456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802245a:	f7de fb3f 	bl	8000adc <__aeabi_dcmplt>
 802245e:	2800      	cmp	r0, #0
 8022460:	f43f af14 	beq.w	802228c <_dtoa_r+0x43c>
 8022464:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8022466:	1e73      	subs	r3, r6, #1
 8022468:	9313      	str	r3, [sp, #76]	@ 0x4c
 802246a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802246e:	2b30      	cmp	r3, #48	@ 0x30
 8022470:	d0f8      	beq.n	8022464 <_dtoa_r+0x614>
 8022472:	4647      	mov	r7, r8
 8022474:	e03b      	b.n	80224ee <_dtoa_r+0x69e>
 8022476:	4b9e      	ldr	r3, [pc, #632]	@ (80226f0 <_dtoa_r+0x8a0>)
 8022478:	f7de f8be 	bl	80005f8 <__aeabi_dmul>
 802247c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022480:	e7bc      	b.n	80223fc <_dtoa_r+0x5ac>
 8022482:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8022486:	4656      	mov	r6, sl
 8022488:	e9dd 2300 	ldrd	r2, r3, [sp]
 802248c:	4620      	mov	r0, r4
 802248e:	4629      	mov	r1, r5
 8022490:	f7de f9dc 	bl	800084c <__aeabi_ddiv>
 8022494:	f7de fb60 	bl	8000b58 <__aeabi_d2iz>
 8022498:	4680      	mov	r8, r0
 802249a:	f7de f843 	bl	8000524 <__aeabi_i2d>
 802249e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80224a2:	f7de f8a9 	bl	80005f8 <__aeabi_dmul>
 80224a6:	4602      	mov	r2, r0
 80224a8:	460b      	mov	r3, r1
 80224aa:	4620      	mov	r0, r4
 80224ac:	4629      	mov	r1, r5
 80224ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80224b2:	f7dd fee9 	bl	8000288 <__aeabi_dsub>
 80224b6:	f806 4b01 	strb.w	r4, [r6], #1
 80224ba:	9d03      	ldr	r5, [sp, #12]
 80224bc:	eba6 040a 	sub.w	r4, r6, sl
 80224c0:	42a5      	cmp	r5, r4
 80224c2:	4602      	mov	r2, r0
 80224c4:	460b      	mov	r3, r1
 80224c6:	d133      	bne.n	8022530 <_dtoa_r+0x6e0>
 80224c8:	f7dd fee0 	bl	800028c <__adddf3>
 80224cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80224d0:	4604      	mov	r4, r0
 80224d2:	460d      	mov	r5, r1
 80224d4:	f7de fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80224d8:	b9c0      	cbnz	r0, 802250c <_dtoa_r+0x6bc>
 80224da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80224de:	4620      	mov	r0, r4
 80224e0:	4629      	mov	r1, r5
 80224e2:	f7de faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80224e6:	b110      	cbz	r0, 80224ee <_dtoa_r+0x69e>
 80224e8:	f018 0f01 	tst.w	r8, #1
 80224ec:	d10e      	bne.n	802250c <_dtoa_r+0x6bc>
 80224ee:	9902      	ldr	r1, [sp, #8]
 80224f0:	4648      	mov	r0, r9
 80224f2:	f000 fbbd 	bl	8022c70 <_Bfree>
 80224f6:	2300      	movs	r3, #0
 80224f8:	7033      	strb	r3, [r6, #0]
 80224fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80224fc:	3701      	adds	r7, #1
 80224fe:	601f      	str	r7, [r3, #0]
 8022500:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022502:	2b00      	cmp	r3, #0
 8022504:	f000 824b 	beq.w	802299e <_dtoa_r+0xb4e>
 8022508:	601e      	str	r6, [r3, #0]
 802250a:	e248      	b.n	802299e <_dtoa_r+0xb4e>
 802250c:	46b8      	mov	r8, r7
 802250e:	4633      	mov	r3, r6
 8022510:	461e      	mov	r6, r3
 8022512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022516:	2a39      	cmp	r2, #57	@ 0x39
 8022518:	d106      	bne.n	8022528 <_dtoa_r+0x6d8>
 802251a:	459a      	cmp	sl, r3
 802251c:	d1f8      	bne.n	8022510 <_dtoa_r+0x6c0>
 802251e:	2230      	movs	r2, #48	@ 0x30
 8022520:	f108 0801 	add.w	r8, r8, #1
 8022524:	f88a 2000 	strb.w	r2, [sl]
 8022528:	781a      	ldrb	r2, [r3, #0]
 802252a:	3201      	adds	r2, #1
 802252c:	701a      	strb	r2, [r3, #0]
 802252e:	e7a0      	b.n	8022472 <_dtoa_r+0x622>
 8022530:	4b6f      	ldr	r3, [pc, #444]	@ (80226f0 <_dtoa_r+0x8a0>)
 8022532:	2200      	movs	r2, #0
 8022534:	f7de f860 	bl	80005f8 <__aeabi_dmul>
 8022538:	2200      	movs	r2, #0
 802253a:	2300      	movs	r3, #0
 802253c:	4604      	mov	r4, r0
 802253e:	460d      	mov	r5, r1
 8022540:	f7de fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8022544:	2800      	cmp	r0, #0
 8022546:	d09f      	beq.n	8022488 <_dtoa_r+0x638>
 8022548:	e7d1      	b.n	80224ee <_dtoa_r+0x69e>
 802254a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802254c:	2a00      	cmp	r2, #0
 802254e:	f000 80ea 	beq.w	8022726 <_dtoa_r+0x8d6>
 8022552:	9a07      	ldr	r2, [sp, #28]
 8022554:	2a01      	cmp	r2, #1
 8022556:	f300 80cd 	bgt.w	80226f4 <_dtoa_r+0x8a4>
 802255a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802255c:	2a00      	cmp	r2, #0
 802255e:	f000 80c1 	beq.w	80226e4 <_dtoa_r+0x894>
 8022562:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8022566:	9c08      	ldr	r4, [sp, #32]
 8022568:	9e00      	ldr	r6, [sp, #0]
 802256a:	9a00      	ldr	r2, [sp, #0]
 802256c:	441a      	add	r2, r3
 802256e:	9200      	str	r2, [sp, #0]
 8022570:	9a06      	ldr	r2, [sp, #24]
 8022572:	2101      	movs	r1, #1
 8022574:	441a      	add	r2, r3
 8022576:	4648      	mov	r0, r9
 8022578:	9206      	str	r2, [sp, #24]
 802257a:	f000 fc2d 	bl	8022dd8 <__i2b>
 802257e:	4605      	mov	r5, r0
 8022580:	b166      	cbz	r6, 802259c <_dtoa_r+0x74c>
 8022582:	9b06      	ldr	r3, [sp, #24]
 8022584:	2b00      	cmp	r3, #0
 8022586:	dd09      	ble.n	802259c <_dtoa_r+0x74c>
 8022588:	42b3      	cmp	r3, r6
 802258a:	9a00      	ldr	r2, [sp, #0]
 802258c:	bfa8      	it	ge
 802258e:	4633      	movge	r3, r6
 8022590:	1ad2      	subs	r2, r2, r3
 8022592:	9200      	str	r2, [sp, #0]
 8022594:	9a06      	ldr	r2, [sp, #24]
 8022596:	1af6      	subs	r6, r6, r3
 8022598:	1ad3      	subs	r3, r2, r3
 802259a:	9306      	str	r3, [sp, #24]
 802259c:	9b08      	ldr	r3, [sp, #32]
 802259e:	b30b      	cbz	r3, 80225e4 <_dtoa_r+0x794>
 80225a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	f000 80c6 	beq.w	8022734 <_dtoa_r+0x8e4>
 80225a8:	2c00      	cmp	r4, #0
 80225aa:	f000 80c0 	beq.w	802272e <_dtoa_r+0x8de>
 80225ae:	4629      	mov	r1, r5
 80225b0:	4622      	mov	r2, r4
 80225b2:	4648      	mov	r0, r9
 80225b4:	f000 fcc8 	bl	8022f48 <__pow5mult>
 80225b8:	9a02      	ldr	r2, [sp, #8]
 80225ba:	4601      	mov	r1, r0
 80225bc:	4605      	mov	r5, r0
 80225be:	4648      	mov	r0, r9
 80225c0:	f000 fc20 	bl	8022e04 <__multiply>
 80225c4:	9902      	ldr	r1, [sp, #8]
 80225c6:	4680      	mov	r8, r0
 80225c8:	4648      	mov	r0, r9
 80225ca:	f000 fb51 	bl	8022c70 <_Bfree>
 80225ce:	9b08      	ldr	r3, [sp, #32]
 80225d0:	1b1b      	subs	r3, r3, r4
 80225d2:	9308      	str	r3, [sp, #32]
 80225d4:	f000 80b1 	beq.w	802273a <_dtoa_r+0x8ea>
 80225d8:	9a08      	ldr	r2, [sp, #32]
 80225da:	4641      	mov	r1, r8
 80225dc:	4648      	mov	r0, r9
 80225de:	f000 fcb3 	bl	8022f48 <__pow5mult>
 80225e2:	9002      	str	r0, [sp, #8]
 80225e4:	2101      	movs	r1, #1
 80225e6:	4648      	mov	r0, r9
 80225e8:	f000 fbf6 	bl	8022dd8 <__i2b>
 80225ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80225ee:	4604      	mov	r4, r0
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	f000 81d8 	beq.w	80229a6 <_dtoa_r+0xb56>
 80225f6:	461a      	mov	r2, r3
 80225f8:	4601      	mov	r1, r0
 80225fa:	4648      	mov	r0, r9
 80225fc:	f000 fca4 	bl	8022f48 <__pow5mult>
 8022600:	9b07      	ldr	r3, [sp, #28]
 8022602:	2b01      	cmp	r3, #1
 8022604:	4604      	mov	r4, r0
 8022606:	f300 809f 	bgt.w	8022748 <_dtoa_r+0x8f8>
 802260a:	9b04      	ldr	r3, [sp, #16]
 802260c:	2b00      	cmp	r3, #0
 802260e:	f040 8097 	bne.w	8022740 <_dtoa_r+0x8f0>
 8022612:	9b05      	ldr	r3, [sp, #20]
 8022614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022618:	2b00      	cmp	r3, #0
 802261a:	f040 8093 	bne.w	8022744 <_dtoa_r+0x8f4>
 802261e:	9b05      	ldr	r3, [sp, #20]
 8022620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022624:	0d1b      	lsrs	r3, r3, #20
 8022626:	051b      	lsls	r3, r3, #20
 8022628:	b133      	cbz	r3, 8022638 <_dtoa_r+0x7e8>
 802262a:	9b00      	ldr	r3, [sp, #0]
 802262c:	3301      	adds	r3, #1
 802262e:	9300      	str	r3, [sp, #0]
 8022630:	9b06      	ldr	r3, [sp, #24]
 8022632:	3301      	adds	r3, #1
 8022634:	9306      	str	r3, [sp, #24]
 8022636:	2301      	movs	r3, #1
 8022638:	9308      	str	r3, [sp, #32]
 802263a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802263c:	2b00      	cmp	r3, #0
 802263e:	f000 81b8 	beq.w	80229b2 <_dtoa_r+0xb62>
 8022642:	6923      	ldr	r3, [r4, #16]
 8022644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022648:	6918      	ldr	r0, [r3, #16]
 802264a:	f000 fb79 	bl	8022d40 <__hi0bits>
 802264e:	f1c0 0020 	rsb	r0, r0, #32
 8022652:	9b06      	ldr	r3, [sp, #24]
 8022654:	4418      	add	r0, r3
 8022656:	f010 001f 	ands.w	r0, r0, #31
 802265a:	f000 8082 	beq.w	8022762 <_dtoa_r+0x912>
 802265e:	f1c0 0320 	rsb	r3, r0, #32
 8022662:	2b04      	cmp	r3, #4
 8022664:	dd73      	ble.n	802274e <_dtoa_r+0x8fe>
 8022666:	9b00      	ldr	r3, [sp, #0]
 8022668:	f1c0 001c 	rsb	r0, r0, #28
 802266c:	4403      	add	r3, r0
 802266e:	9300      	str	r3, [sp, #0]
 8022670:	9b06      	ldr	r3, [sp, #24]
 8022672:	4403      	add	r3, r0
 8022674:	4406      	add	r6, r0
 8022676:	9306      	str	r3, [sp, #24]
 8022678:	9b00      	ldr	r3, [sp, #0]
 802267a:	2b00      	cmp	r3, #0
 802267c:	dd05      	ble.n	802268a <_dtoa_r+0x83a>
 802267e:	9902      	ldr	r1, [sp, #8]
 8022680:	461a      	mov	r2, r3
 8022682:	4648      	mov	r0, r9
 8022684:	f000 fcba 	bl	8022ffc <__lshift>
 8022688:	9002      	str	r0, [sp, #8]
 802268a:	9b06      	ldr	r3, [sp, #24]
 802268c:	2b00      	cmp	r3, #0
 802268e:	dd05      	ble.n	802269c <_dtoa_r+0x84c>
 8022690:	4621      	mov	r1, r4
 8022692:	461a      	mov	r2, r3
 8022694:	4648      	mov	r0, r9
 8022696:	f000 fcb1 	bl	8022ffc <__lshift>
 802269a:	4604      	mov	r4, r0
 802269c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d061      	beq.n	8022766 <_dtoa_r+0x916>
 80226a2:	9802      	ldr	r0, [sp, #8]
 80226a4:	4621      	mov	r1, r4
 80226a6:	f000 fd15 	bl	80230d4 <__mcmp>
 80226aa:	2800      	cmp	r0, #0
 80226ac:	da5b      	bge.n	8022766 <_dtoa_r+0x916>
 80226ae:	2300      	movs	r3, #0
 80226b0:	9902      	ldr	r1, [sp, #8]
 80226b2:	220a      	movs	r2, #10
 80226b4:	4648      	mov	r0, r9
 80226b6:	f000 fafd 	bl	8022cb4 <__multadd>
 80226ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226bc:	9002      	str	r0, [sp, #8]
 80226be:	f107 38ff 	add.w	r8, r7, #4294967295
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	f000 8177 	beq.w	80229b6 <_dtoa_r+0xb66>
 80226c8:	4629      	mov	r1, r5
 80226ca:	2300      	movs	r3, #0
 80226cc:	220a      	movs	r2, #10
 80226ce:	4648      	mov	r0, r9
 80226d0:	f000 faf0 	bl	8022cb4 <__multadd>
 80226d4:	f1bb 0f00 	cmp.w	fp, #0
 80226d8:	4605      	mov	r5, r0
 80226da:	dc6f      	bgt.n	80227bc <_dtoa_r+0x96c>
 80226dc:	9b07      	ldr	r3, [sp, #28]
 80226de:	2b02      	cmp	r3, #2
 80226e0:	dc49      	bgt.n	8022776 <_dtoa_r+0x926>
 80226e2:	e06b      	b.n	80227bc <_dtoa_r+0x96c>
 80226e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80226e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80226ea:	e73c      	b.n	8022566 <_dtoa_r+0x716>
 80226ec:	3fe00000 	.word	0x3fe00000
 80226f0:	40240000 	.word	0x40240000
 80226f4:	9b03      	ldr	r3, [sp, #12]
 80226f6:	1e5c      	subs	r4, r3, #1
 80226f8:	9b08      	ldr	r3, [sp, #32]
 80226fa:	42a3      	cmp	r3, r4
 80226fc:	db09      	blt.n	8022712 <_dtoa_r+0x8c2>
 80226fe:	1b1c      	subs	r4, r3, r4
 8022700:	9b03      	ldr	r3, [sp, #12]
 8022702:	2b00      	cmp	r3, #0
 8022704:	f6bf af30 	bge.w	8022568 <_dtoa_r+0x718>
 8022708:	9b00      	ldr	r3, [sp, #0]
 802270a:	9a03      	ldr	r2, [sp, #12]
 802270c:	1a9e      	subs	r6, r3, r2
 802270e:	2300      	movs	r3, #0
 8022710:	e72b      	b.n	802256a <_dtoa_r+0x71a>
 8022712:	9b08      	ldr	r3, [sp, #32]
 8022714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022716:	9408      	str	r4, [sp, #32]
 8022718:	1ae3      	subs	r3, r4, r3
 802271a:	441a      	add	r2, r3
 802271c:	9e00      	ldr	r6, [sp, #0]
 802271e:	9b03      	ldr	r3, [sp, #12]
 8022720:	920d      	str	r2, [sp, #52]	@ 0x34
 8022722:	2400      	movs	r4, #0
 8022724:	e721      	b.n	802256a <_dtoa_r+0x71a>
 8022726:	9c08      	ldr	r4, [sp, #32]
 8022728:	9e00      	ldr	r6, [sp, #0]
 802272a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802272c:	e728      	b.n	8022580 <_dtoa_r+0x730>
 802272e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8022732:	e751      	b.n	80225d8 <_dtoa_r+0x788>
 8022734:	9a08      	ldr	r2, [sp, #32]
 8022736:	9902      	ldr	r1, [sp, #8]
 8022738:	e750      	b.n	80225dc <_dtoa_r+0x78c>
 802273a:	f8cd 8008 	str.w	r8, [sp, #8]
 802273e:	e751      	b.n	80225e4 <_dtoa_r+0x794>
 8022740:	2300      	movs	r3, #0
 8022742:	e779      	b.n	8022638 <_dtoa_r+0x7e8>
 8022744:	9b04      	ldr	r3, [sp, #16]
 8022746:	e777      	b.n	8022638 <_dtoa_r+0x7e8>
 8022748:	2300      	movs	r3, #0
 802274a:	9308      	str	r3, [sp, #32]
 802274c:	e779      	b.n	8022642 <_dtoa_r+0x7f2>
 802274e:	d093      	beq.n	8022678 <_dtoa_r+0x828>
 8022750:	9a00      	ldr	r2, [sp, #0]
 8022752:	331c      	adds	r3, #28
 8022754:	441a      	add	r2, r3
 8022756:	9200      	str	r2, [sp, #0]
 8022758:	9a06      	ldr	r2, [sp, #24]
 802275a:	441a      	add	r2, r3
 802275c:	441e      	add	r6, r3
 802275e:	9206      	str	r2, [sp, #24]
 8022760:	e78a      	b.n	8022678 <_dtoa_r+0x828>
 8022762:	4603      	mov	r3, r0
 8022764:	e7f4      	b.n	8022750 <_dtoa_r+0x900>
 8022766:	9b03      	ldr	r3, [sp, #12]
 8022768:	2b00      	cmp	r3, #0
 802276a:	46b8      	mov	r8, r7
 802276c:	dc20      	bgt.n	80227b0 <_dtoa_r+0x960>
 802276e:	469b      	mov	fp, r3
 8022770:	9b07      	ldr	r3, [sp, #28]
 8022772:	2b02      	cmp	r3, #2
 8022774:	dd1e      	ble.n	80227b4 <_dtoa_r+0x964>
 8022776:	f1bb 0f00 	cmp.w	fp, #0
 802277a:	f47f adb1 	bne.w	80222e0 <_dtoa_r+0x490>
 802277e:	4621      	mov	r1, r4
 8022780:	465b      	mov	r3, fp
 8022782:	2205      	movs	r2, #5
 8022784:	4648      	mov	r0, r9
 8022786:	f000 fa95 	bl	8022cb4 <__multadd>
 802278a:	4601      	mov	r1, r0
 802278c:	4604      	mov	r4, r0
 802278e:	9802      	ldr	r0, [sp, #8]
 8022790:	f000 fca0 	bl	80230d4 <__mcmp>
 8022794:	2800      	cmp	r0, #0
 8022796:	f77f ada3 	ble.w	80222e0 <_dtoa_r+0x490>
 802279a:	4656      	mov	r6, sl
 802279c:	2331      	movs	r3, #49	@ 0x31
 802279e:	f806 3b01 	strb.w	r3, [r6], #1
 80227a2:	f108 0801 	add.w	r8, r8, #1
 80227a6:	e59f      	b.n	80222e8 <_dtoa_r+0x498>
 80227a8:	9c03      	ldr	r4, [sp, #12]
 80227aa:	46b8      	mov	r8, r7
 80227ac:	4625      	mov	r5, r4
 80227ae:	e7f4      	b.n	802279a <_dtoa_r+0x94a>
 80227b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	f000 8101 	beq.w	80229be <_dtoa_r+0xb6e>
 80227bc:	2e00      	cmp	r6, #0
 80227be:	dd05      	ble.n	80227cc <_dtoa_r+0x97c>
 80227c0:	4629      	mov	r1, r5
 80227c2:	4632      	mov	r2, r6
 80227c4:	4648      	mov	r0, r9
 80227c6:	f000 fc19 	bl	8022ffc <__lshift>
 80227ca:	4605      	mov	r5, r0
 80227cc:	9b08      	ldr	r3, [sp, #32]
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	d05c      	beq.n	802288c <_dtoa_r+0xa3c>
 80227d2:	6869      	ldr	r1, [r5, #4]
 80227d4:	4648      	mov	r0, r9
 80227d6:	f000 fa0b 	bl	8022bf0 <_Balloc>
 80227da:	4606      	mov	r6, r0
 80227dc:	b928      	cbnz	r0, 80227ea <_dtoa_r+0x99a>
 80227de:	4b82      	ldr	r3, [pc, #520]	@ (80229e8 <_dtoa_r+0xb98>)
 80227e0:	4602      	mov	r2, r0
 80227e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80227e6:	f7ff bb4a 	b.w	8021e7e <_dtoa_r+0x2e>
 80227ea:	692a      	ldr	r2, [r5, #16]
 80227ec:	3202      	adds	r2, #2
 80227ee:	0092      	lsls	r2, r2, #2
 80227f0:	f105 010c 	add.w	r1, r5, #12
 80227f4:	300c      	adds	r0, #12
 80227f6:	f7ff fa92 	bl	8021d1e <memcpy>
 80227fa:	2201      	movs	r2, #1
 80227fc:	4631      	mov	r1, r6
 80227fe:	4648      	mov	r0, r9
 8022800:	f000 fbfc 	bl	8022ffc <__lshift>
 8022804:	f10a 0301 	add.w	r3, sl, #1
 8022808:	9300      	str	r3, [sp, #0]
 802280a:	eb0a 030b 	add.w	r3, sl, fp
 802280e:	9308      	str	r3, [sp, #32]
 8022810:	9b04      	ldr	r3, [sp, #16]
 8022812:	f003 0301 	and.w	r3, r3, #1
 8022816:	462f      	mov	r7, r5
 8022818:	9306      	str	r3, [sp, #24]
 802281a:	4605      	mov	r5, r0
 802281c:	9b00      	ldr	r3, [sp, #0]
 802281e:	9802      	ldr	r0, [sp, #8]
 8022820:	4621      	mov	r1, r4
 8022822:	f103 3bff 	add.w	fp, r3, #4294967295
 8022826:	f7ff fa88 	bl	8021d3a <quorem>
 802282a:	4603      	mov	r3, r0
 802282c:	3330      	adds	r3, #48	@ 0x30
 802282e:	9003      	str	r0, [sp, #12]
 8022830:	4639      	mov	r1, r7
 8022832:	9802      	ldr	r0, [sp, #8]
 8022834:	9309      	str	r3, [sp, #36]	@ 0x24
 8022836:	f000 fc4d 	bl	80230d4 <__mcmp>
 802283a:	462a      	mov	r2, r5
 802283c:	9004      	str	r0, [sp, #16]
 802283e:	4621      	mov	r1, r4
 8022840:	4648      	mov	r0, r9
 8022842:	f000 fc63 	bl	802310c <__mdiff>
 8022846:	68c2      	ldr	r2, [r0, #12]
 8022848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802284a:	4606      	mov	r6, r0
 802284c:	bb02      	cbnz	r2, 8022890 <_dtoa_r+0xa40>
 802284e:	4601      	mov	r1, r0
 8022850:	9802      	ldr	r0, [sp, #8]
 8022852:	f000 fc3f 	bl	80230d4 <__mcmp>
 8022856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022858:	4602      	mov	r2, r0
 802285a:	4631      	mov	r1, r6
 802285c:	4648      	mov	r0, r9
 802285e:	920c      	str	r2, [sp, #48]	@ 0x30
 8022860:	9309      	str	r3, [sp, #36]	@ 0x24
 8022862:	f000 fa05 	bl	8022c70 <_Bfree>
 8022866:	9b07      	ldr	r3, [sp, #28]
 8022868:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802286a:	9e00      	ldr	r6, [sp, #0]
 802286c:	ea42 0103 	orr.w	r1, r2, r3
 8022870:	9b06      	ldr	r3, [sp, #24]
 8022872:	4319      	orrs	r1, r3
 8022874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022876:	d10d      	bne.n	8022894 <_dtoa_r+0xa44>
 8022878:	2b39      	cmp	r3, #57	@ 0x39
 802287a:	d027      	beq.n	80228cc <_dtoa_r+0xa7c>
 802287c:	9a04      	ldr	r2, [sp, #16]
 802287e:	2a00      	cmp	r2, #0
 8022880:	dd01      	ble.n	8022886 <_dtoa_r+0xa36>
 8022882:	9b03      	ldr	r3, [sp, #12]
 8022884:	3331      	adds	r3, #49	@ 0x31
 8022886:	f88b 3000 	strb.w	r3, [fp]
 802288a:	e52e      	b.n	80222ea <_dtoa_r+0x49a>
 802288c:	4628      	mov	r0, r5
 802288e:	e7b9      	b.n	8022804 <_dtoa_r+0x9b4>
 8022890:	2201      	movs	r2, #1
 8022892:	e7e2      	b.n	802285a <_dtoa_r+0xa0a>
 8022894:	9904      	ldr	r1, [sp, #16]
 8022896:	2900      	cmp	r1, #0
 8022898:	db04      	blt.n	80228a4 <_dtoa_r+0xa54>
 802289a:	9807      	ldr	r0, [sp, #28]
 802289c:	4301      	orrs	r1, r0
 802289e:	9806      	ldr	r0, [sp, #24]
 80228a0:	4301      	orrs	r1, r0
 80228a2:	d120      	bne.n	80228e6 <_dtoa_r+0xa96>
 80228a4:	2a00      	cmp	r2, #0
 80228a6:	ddee      	ble.n	8022886 <_dtoa_r+0xa36>
 80228a8:	9902      	ldr	r1, [sp, #8]
 80228aa:	9300      	str	r3, [sp, #0]
 80228ac:	2201      	movs	r2, #1
 80228ae:	4648      	mov	r0, r9
 80228b0:	f000 fba4 	bl	8022ffc <__lshift>
 80228b4:	4621      	mov	r1, r4
 80228b6:	9002      	str	r0, [sp, #8]
 80228b8:	f000 fc0c 	bl	80230d4 <__mcmp>
 80228bc:	2800      	cmp	r0, #0
 80228be:	9b00      	ldr	r3, [sp, #0]
 80228c0:	dc02      	bgt.n	80228c8 <_dtoa_r+0xa78>
 80228c2:	d1e0      	bne.n	8022886 <_dtoa_r+0xa36>
 80228c4:	07da      	lsls	r2, r3, #31
 80228c6:	d5de      	bpl.n	8022886 <_dtoa_r+0xa36>
 80228c8:	2b39      	cmp	r3, #57	@ 0x39
 80228ca:	d1da      	bne.n	8022882 <_dtoa_r+0xa32>
 80228cc:	2339      	movs	r3, #57	@ 0x39
 80228ce:	f88b 3000 	strb.w	r3, [fp]
 80228d2:	4633      	mov	r3, r6
 80228d4:	461e      	mov	r6, r3
 80228d6:	3b01      	subs	r3, #1
 80228d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80228dc:	2a39      	cmp	r2, #57	@ 0x39
 80228de:	d04e      	beq.n	802297e <_dtoa_r+0xb2e>
 80228e0:	3201      	adds	r2, #1
 80228e2:	701a      	strb	r2, [r3, #0]
 80228e4:	e501      	b.n	80222ea <_dtoa_r+0x49a>
 80228e6:	2a00      	cmp	r2, #0
 80228e8:	dd03      	ble.n	80228f2 <_dtoa_r+0xaa2>
 80228ea:	2b39      	cmp	r3, #57	@ 0x39
 80228ec:	d0ee      	beq.n	80228cc <_dtoa_r+0xa7c>
 80228ee:	3301      	adds	r3, #1
 80228f0:	e7c9      	b.n	8022886 <_dtoa_r+0xa36>
 80228f2:	9a00      	ldr	r2, [sp, #0]
 80228f4:	9908      	ldr	r1, [sp, #32]
 80228f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80228fa:	428a      	cmp	r2, r1
 80228fc:	d028      	beq.n	8022950 <_dtoa_r+0xb00>
 80228fe:	9902      	ldr	r1, [sp, #8]
 8022900:	2300      	movs	r3, #0
 8022902:	220a      	movs	r2, #10
 8022904:	4648      	mov	r0, r9
 8022906:	f000 f9d5 	bl	8022cb4 <__multadd>
 802290a:	42af      	cmp	r7, r5
 802290c:	9002      	str	r0, [sp, #8]
 802290e:	f04f 0300 	mov.w	r3, #0
 8022912:	f04f 020a 	mov.w	r2, #10
 8022916:	4639      	mov	r1, r7
 8022918:	4648      	mov	r0, r9
 802291a:	d107      	bne.n	802292c <_dtoa_r+0xadc>
 802291c:	f000 f9ca 	bl	8022cb4 <__multadd>
 8022920:	4607      	mov	r7, r0
 8022922:	4605      	mov	r5, r0
 8022924:	9b00      	ldr	r3, [sp, #0]
 8022926:	3301      	adds	r3, #1
 8022928:	9300      	str	r3, [sp, #0]
 802292a:	e777      	b.n	802281c <_dtoa_r+0x9cc>
 802292c:	f000 f9c2 	bl	8022cb4 <__multadd>
 8022930:	4629      	mov	r1, r5
 8022932:	4607      	mov	r7, r0
 8022934:	2300      	movs	r3, #0
 8022936:	220a      	movs	r2, #10
 8022938:	4648      	mov	r0, r9
 802293a:	f000 f9bb 	bl	8022cb4 <__multadd>
 802293e:	4605      	mov	r5, r0
 8022940:	e7f0      	b.n	8022924 <_dtoa_r+0xad4>
 8022942:	f1bb 0f00 	cmp.w	fp, #0
 8022946:	bfcc      	ite	gt
 8022948:	465e      	movgt	r6, fp
 802294a:	2601      	movle	r6, #1
 802294c:	4456      	add	r6, sl
 802294e:	2700      	movs	r7, #0
 8022950:	9902      	ldr	r1, [sp, #8]
 8022952:	9300      	str	r3, [sp, #0]
 8022954:	2201      	movs	r2, #1
 8022956:	4648      	mov	r0, r9
 8022958:	f000 fb50 	bl	8022ffc <__lshift>
 802295c:	4621      	mov	r1, r4
 802295e:	9002      	str	r0, [sp, #8]
 8022960:	f000 fbb8 	bl	80230d4 <__mcmp>
 8022964:	2800      	cmp	r0, #0
 8022966:	dcb4      	bgt.n	80228d2 <_dtoa_r+0xa82>
 8022968:	d102      	bne.n	8022970 <_dtoa_r+0xb20>
 802296a:	9b00      	ldr	r3, [sp, #0]
 802296c:	07db      	lsls	r3, r3, #31
 802296e:	d4b0      	bmi.n	80228d2 <_dtoa_r+0xa82>
 8022970:	4633      	mov	r3, r6
 8022972:	461e      	mov	r6, r3
 8022974:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022978:	2a30      	cmp	r2, #48	@ 0x30
 802297a:	d0fa      	beq.n	8022972 <_dtoa_r+0xb22>
 802297c:	e4b5      	b.n	80222ea <_dtoa_r+0x49a>
 802297e:	459a      	cmp	sl, r3
 8022980:	d1a8      	bne.n	80228d4 <_dtoa_r+0xa84>
 8022982:	2331      	movs	r3, #49	@ 0x31
 8022984:	f108 0801 	add.w	r8, r8, #1
 8022988:	f88a 3000 	strb.w	r3, [sl]
 802298c:	e4ad      	b.n	80222ea <_dtoa_r+0x49a>
 802298e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022990:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80229ec <_dtoa_r+0xb9c>
 8022994:	b11b      	cbz	r3, 802299e <_dtoa_r+0xb4e>
 8022996:	f10a 0308 	add.w	r3, sl, #8
 802299a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802299c:	6013      	str	r3, [r2, #0]
 802299e:	4650      	mov	r0, sl
 80229a0:	b017      	add	sp, #92	@ 0x5c
 80229a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229a6:	9b07      	ldr	r3, [sp, #28]
 80229a8:	2b01      	cmp	r3, #1
 80229aa:	f77f ae2e 	ble.w	802260a <_dtoa_r+0x7ba>
 80229ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80229b0:	9308      	str	r3, [sp, #32]
 80229b2:	2001      	movs	r0, #1
 80229b4:	e64d      	b.n	8022652 <_dtoa_r+0x802>
 80229b6:	f1bb 0f00 	cmp.w	fp, #0
 80229ba:	f77f aed9 	ble.w	8022770 <_dtoa_r+0x920>
 80229be:	4656      	mov	r6, sl
 80229c0:	9802      	ldr	r0, [sp, #8]
 80229c2:	4621      	mov	r1, r4
 80229c4:	f7ff f9b9 	bl	8021d3a <quorem>
 80229c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80229cc:	f806 3b01 	strb.w	r3, [r6], #1
 80229d0:	eba6 020a 	sub.w	r2, r6, sl
 80229d4:	4593      	cmp	fp, r2
 80229d6:	ddb4      	ble.n	8022942 <_dtoa_r+0xaf2>
 80229d8:	9902      	ldr	r1, [sp, #8]
 80229da:	2300      	movs	r3, #0
 80229dc:	220a      	movs	r2, #10
 80229de:	4648      	mov	r0, r9
 80229e0:	f000 f968 	bl	8022cb4 <__multadd>
 80229e4:	9002      	str	r0, [sp, #8]
 80229e6:	e7eb      	b.n	80229c0 <_dtoa_r+0xb70>
 80229e8:	08025bdc 	.word	0x08025bdc
 80229ec:	08025b60 	.word	0x08025b60

080229f0 <_free_r>:
 80229f0:	b538      	push	{r3, r4, r5, lr}
 80229f2:	4605      	mov	r5, r0
 80229f4:	2900      	cmp	r1, #0
 80229f6:	d041      	beq.n	8022a7c <_free_r+0x8c>
 80229f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80229fc:	1f0c      	subs	r4, r1, #4
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	bfb8      	it	lt
 8022a02:	18e4      	addlt	r4, r4, r3
 8022a04:	f000 f8e8 	bl	8022bd8 <__malloc_lock>
 8022a08:	4a1d      	ldr	r2, [pc, #116]	@ (8022a80 <_free_r+0x90>)
 8022a0a:	6813      	ldr	r3, [r2, #0]
 8022a0c:	b933      	cbnz	r3, 8022a1c <_free_r+0x2c>
 8022a0e:	6063      	str	r3, [r4, #4]
 8022a10:	6014      	str	r4, [r2, #0]
 8022a12:	4628      	mov	r0, r5
 8022a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022a18:	f000 b8e4 	b.w	8022be4 <__malloc_unlock>
 8022a1c:	42a3      	cmp	r3, r4
 8022a1e:	d908      	bls.n	8022a32 <_free_r+0x42>
 8022a20:	6820      	ldr	r0, [r4, #0]
 8022a22:	1821      	adds	r1, r4, r0
 8022a24:	428b      	cmp	r3, r1
 8022a26:	bf01      	itttt	eq
 8022a28:	6819      	ldreq	r1, [r3, #0]
 8022a2a:	685b      	ldreq	r3, [r3, #4]
 8022a2c:	1809      	addeq	r1, r1, r0
 8022a2e:	6021      	streq	r1, [r4, #0]
 8022a30:	e7ed      	b.n	8022a0e <_free_r+0x1e>
 8022a32:	461a      	mov	r2, r3
 8022a34:	685b      	ldr	r3, [r3, #4]
 8022a36:	b10b      	cbz	r3, 8022a3c <_free_r+0x4c>
 8022a38:	42a3      	cmp	r3, r4
 8022a3a:	d9fa      	bls.n	8022a32 <_free_r+0x42>
 8022a3c:	6811      	ldr	r1, [r2, #0]
 8022a3e:	1850      	adds	r0, r2, r1
 8022a40:	42a0      	cmp	r0, r4
 8022a42:	d10b      	bne.n	8022a5c <_free_r+0x6c>
 8022a44:	6820      	ldr	r0, [r4, #0]
 8022a46:	4401      	add	r1, r0
 8022a48:	1850      	adds	r0, r2, r1
 8022a4a:	4283      	cmp	r3, r0
 8022a4c:	6011      	str	r1, [r2, #0]
 8022a4e:	d1e0      	bne.n	8022a12 <_free_r+0x22>
 8022a50:	6818      	ldr	r0, [r3, #0]
 8022a52:	685b      	ldr	r3, [r3, #4]
 8022a54:	6053      	str	r3, [r2, #4]
 8022a56:	4408      	add	r0, r1
 8022a58:	6010      	str	r0, [r2, #0]
 8022a5a:	e7da      	b.n	8022a12 <_free_r+0x22>
 8022a5c:	d902      	bls.n	8022a64 <_free_r+0x74>
 8022a5e:	230c      	movs	r3, #12
 8022a60:	602b      	str	r3, [r5, #0]
 8022a62:	e7d6      	b.n	8022a12 <_free_r+0x22>
 8022a64:	6820      	ldr	r0, [r4, #0]
 8022a66:	1821      	adds	r1, r4, r0
 8022a68:	428b      	cmp	r3, r1
 8022a6a:	bf04      	itt	eq
 8022a6c:	6819      	ldreq	r1, [r3, #0]
 8022a6e:	685b      	ldreq	r3, [r3, #4]
 8022a70:	6063      	str	r3, [r4, #4]
 8022a72:	bf04      	itt	eq
 8022a74:	1809      	addeq	r1, r1, r0
 8022a76:	6021      	streq	r1, [r4, #0]
 8022a78:	6054      	str	r4, [r2, #4]
 8022a7a:	e7ca      	b.n	8022a12 <_free_r+0x22>
 8022a7c:	bd38      	pop	{r3, r4, r5, pc}
 8022a7e:	bf00      	nop
 8022a80:	20001d50 	.word	0x20001d50

08022a84 <malloc>:
 8022a84:	4b02      	ldr	r3, [pc, #8]	@ (8022a90 <malloc+0xc>)
 8022a86:	4601      	mov	r1, r0
 8022a88:	6818      	ldr	r0, [r3, #0]
 8022a8a:	f000 b825 	b.w	8022ad8 <_malloc_r>
 8022a8e:	bf00      	nop
 8022a90:	20000084 	.word	0x20000084

08022a94 <sbrk_aligned>:
 8022a94:	b570      	push	{r4, r5, r6, lr}
 8022a96:	4e0f      	ldr	r6, [pc, #60]	@ (8022ad4 <sbrk_aligned+0x40>)
 8022a98:	460c      	mov	r4, r1
 8022a9a:	6831      	ldr	r1, [r6, #0]
 8022a9c:	4605      	mov	r5, r0
 8022a9e:	b911      	cbnz	r1, 8022aa6 <sbrk_aligned+0x12>
 8022aa0:	f000 ff72 	bl	8023988 <_sbrk_r>
 8022aa4:	6030      	str	r0, [r6, #0]
 8022aa6:	4621      	mov	r1, r4
 8022aa8:	4628      	mov	r0, r5
 8022aaa:	f000 ff6d 	bl	8023988 <_sbrk_r>
 8022aae:	1c43      	adds	r3, r0, #1
 8022ab0:	d103      	bne.n	8022aba <sbrk_aligned+0x26>
 8022ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8022ab6:	4620      	mov	r0, r4
 8022ab8:	bd70      	pop	{r4, r5, r6, pc}
 8022aba:	1cc4      	adds	r4, r0, #3
 8022abc:	f024 0403 	bic.w	r4, r4, #3
 8022ac0:	42a0      	cmp	r0, r4
 8022ac2:	d0f8      	beq.n	8022ab6 <sbrk_aligned+0x22>
 8022ac4:	1a21      	subs	r1, r4, r0
 8022ac6:	4628      	mov	r0, r5
 8022ac8:	f000 ff5e 	bl	8023988 <_sbrk_r>
 8022acc:	3001      	adds	r0, #1
 8022ace:	d1f2      	bne.n	8022ab6 <sbrk_aligned+0x22>
 8022ad0:	e7ef      	b.n	8022ab2 <sbrk_aligned+0x1e>
 8022ad2:	bf00      	nop
 8022ad4:	20001d4c 	.word	0x20001d4c

08022ad8 <_malloc_r>:
 8022ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022adc:	1ccd      	adds	r5, r1, #3
 8022ade:	f025 0503 	bic.w	r5, r5, #3
 8022ae2:	3508      	adds	r5, #8
 8022ae4:	2d0c      	cmp	r5, #12
 8022ae6:	bf38      	it	cc
 8022ae8:	250c      	movcc	r5, #12
 8022aea:	2d00      	cmp	r5, #0
 8022aec:	4606      	mov	r6, r0
 8022aee:	db01      	blt.n	8022af4 <_malloc_r+0x1c>
 8022af0:	42a9      	cmp	r1, r5
 8022af2:	d904      	bls.n	8022afe <_malloc_r+0x26>
 8022af4:	230c      	movs	r3, #12
 8022af6:	6033      	str	r3, [r6, #0]
 8022af8:	2000      	movs	r0, #0
 8022afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022bd4 <_malloc_r+0xfc>
 8022b02:	f000 f869 	bl	8022bd8 <__malloc_lock>
 8022b06:	f8d8 3000 	ldr.w	r3, [r8]
 8022b0a:	461c      	mov	r4, r3
 8022b0c:	bb44      	cbnz	r4, 8022b60 <_malloc_r+0x88>
 8022b0e:	4629      	mov	r1, r5
 8022b10:	4630      	mov	r0, r6
 8022b12:	f7ff ffbf 	bl	8022a94 <sbrk_aligned>
 8022b16:	1c43      	adds	r3, r0, #1
 8022b18:	4604      	mov	r4, r0
 8022b1a:	d158      	bne.n	8022bce <_malloc_r+0xf6>
 8022b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8022b20:	4627      	mov	r7, r4
 8022b22:	2f00      	cmp	r7, #0
 8022b24:	d143      	bne.n	8022bae <_malloc_r+0xd6>
 8022b26:	2c00      	cmp	r4, #0
 8022b28:	d04b      	beq.n	8022bc2 <_malloc_r+0xea>
 8022b2a:	6823      	ldr	r3, [r4, #0]
 8022b2c:	4639      	mov	r1, r7
 8022b2e:	4630      	mov	r0, r6
 8022b30:	eb04 0903 	add.w	r9, r4, r3
 8022b34:	f000 ff28 	bl	8023988 <_sbrk_r>
 8022b38:	4581      	cmp	r9, r0
 8022b3a:	d142      	bne.n	8022bc2 <_malloc_r+0xea>
 8022b3c:	6821      	ldr	r1, [r4, #0]
 8022b3e:	1a6d      	subs	r5, r5, r1
 8022b40:	4629      	mov	r1, r5
 8022b42:	4630      	mov	r0, r6
 8022b44:	f7ff ffa6 	bl	8022a94 <sbrk_aligned>
 8022b48:	3001      	adds	r0, #1
 8022b4a:	d03a      	beq.n	8022bc2 <_malloc_r+0xea>
 8022b4c:	6823      	ldr	r3, [r4, #0]
 8022b4e:	442b      	add	r3, r5
 8022b50:	6023      	str	r3, [r4, #0]
 8022b52:	f8d8 3000 	ldr.w	r3, [r8]
 8022b56:	685a      	ldr	r2, [r3, #4]
 8022b58:	bb62      	cbnz	r2, 8022bb4 <_malloc_r+0xdc>
 8022b5a:	f8c8 7000 	str.w	r7, [r8]
 8022b5e:	e00f      	b.n	8022b80 <_malloc_r+0xa8>
 8022b60:	6822      	ldr	r2, [r4, #0]
 8022b62:	1b52      	subs	r2, r2, r5
 8022b64:	d420      	bmi.n	8022ba8 <_malloc_r+0xd0>
 8022b66:	2a0b      	cmp	r2, #11
 8022b68:	d917      	bls.n	8022b9a <_malloc_r+0xc2>
 8022b6a:	1961      	adds	r1, r4, r5
 8022b6c:	42a3      	cmp	r3, r4
 8022b6e:	6025      	str	r5, [r4, #0]
 8022b70:	bf18      	it	ne
 8022b72:	6059      	strne	r1, [r3, #4]
 8022b74:	6863      	ldr	r3, [r4, #4]
 8022b76:	bf08      	it	eq
 8022b78:	f8c8 1000 	streq.w	r1, [r8]
 8022b7c:	5162      	str	r2, [r4, r5]
 8022b7e:	604b      	str	r3, [r1, #4]
 8022b80:	4630      	mov	r0, r6
 8022b82:	f000 f82f 	bl	8022be4 <__malloc_unlock>
 8022b86:	f104 000b 	add.w	r0, r4, #11
 8022b8a:	1d23      	adds	r3, r4, #4
 8022b8c:	f020 0007 	bic.w	r0, r0, #7
 8022b90:	1ac2      	subs	r2, r0, r3
 8022b92:	bf1c      	itt	ne
 8022b94:	1a1b      	subne	r3, r3, r0
 8022b96:	50a3      	strne	r3, [r4, r2]
 8022b98:	e7af      	b.n	8022afa <_malloc_r+0x22>
 8022b9a:	6862      	ldr	r2, [r4, #4]
 8022b9c:	42a3      	cmp	r3, r4
 8022b9e:	bf0c      	ite	eq
 8022ba0:	f8c8 2000 	streq.w	r2, [r8]
 8022ba4:	605a      	strne	r2, [r3, #4]
 8022ba6:	e7eb      	b.n	8022b80 <_malloc_r+0xa8>
 8022ba8:	4623      	mov	r3, r4
 8022baa:	6864      	ldr	r4, [r4, #4]
 8022bac:	e7ae      	b.n	8022b0c <_malloc_r+0x34>
 8022bae:	463c      	mov	r4, r7
 8022bb0:	687f      	ldr	r7, [r7, #4]
 8022bb2:	e7b6      	b.n	8022b22 <_malloc_r+0x4a>
 8022bb4:	461a      	mov	r2, r3
 8022bb6:	685b      	ldr	r3, [r3, #4]
 8022bb8:	42a3      	cmp	r3, r4
 8022bba:	d1fb      	bne.n	8022bb4 <_malloc_r+0xdc>
 8022bbc:	2300      	movs	r3, #0
 8022bbe:	6053      	str	r3, [r2, #4]
 8022bc0:	e7de      	b.n	8022b80 <_malloc_r+0xa8>
 8022bc2:	230c      	movs	r3, #12
 8022bc4:	6033      	str	r3, [r6, #0]
 8022bc6:	4630      	mov	r0, r6
 8022bc8:	f000 f80c 	bl	8022be4 <__malloc_unlock>
 8022bcc:	e794      	b.n	8022af8 <_malloc_r+0x20>
 8022bce:	6005      	str	r5, [r0, #0]
 8022bd0:	e7d6      	b.n	8022b80 <_malloc_r+0xa8>
 8022bd2:	bf00      	nop
 8022bd4:	20001d50 	.word	0x20001d50

08022bd8 <__malloc_lock>:
 8022bd8:	4801      	ldr	r0, [pc, #4]	@ (8022be0 <__malloc_lock+0x8>)
 8022bda:	f7ff b89e 	b.w	8021d1a <__retarget_lock_acquire_recursive>
 8022bde:	bf00      	nop
 8022be0:	20001d48 	.word	0x20001d48

08022be4 <__malloc_unlock>:
 8022be4:	4801      	ldr	r0, [pc, #4]	@ (8022bec <__malloc_unlock+0x8>)
 8022be6:	f7ff b899 	b.w	8021d1c <__retarget_lock_release_recursive>
 8022bea:	bf00      	nop
 8022bec:	20001d48 	.word	0x20001d48

08022bf0 <_Balloc>:
 8022bf0:	b570      	push	{r4, r5, r6, lr}
 8022bf2:	69c6      	ldr	r6, [r0, #28]
 8022bf4:	4604      	mov	r4, r0
 8022bf6:	460d      	mov	r5, r1
 8022bf8:	b976      	cbnz	r6, 8022c18 <_Balloc+0x28>
 8022bfa:	2010      	movs	r0, #16
 8022bfc:	f7ff ff42 	bl	8022a84 <malloc>
 8022c00:	4602      	mov	r2, r0
 8022c02:	61e0      	str	r0, [r4, #28]
 8022c04:	b920      	cbnz	r0, 8022c10 <_Balloc+0x20>
 8022c06:	4b18      	ldr	r3, [pc, #96]	@ (8022c68 <_Balloc+0x78>)
 8022c08:	4818      	ldr	r0, [pc, #96]	@ (8022c6c <_Balloc+0x7c>)
 8022c0a:	216b      	movs	r1, #107	@ 0x6b
 8022c0c:	f000 fecc 	bl	80239a8 <__assert_func>
 8022c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022c14:	6006      	str	r6, [r0, #0]
 8022c16:	60c6      	str	r6, [r0, #12]
 8022c18:	69e6      	ldr	r6, [r4, #28]
 8022c1a:	68f3      	ldr	r3, [r6, #12]
 8022c1c:	b183      	cbz	r3, 8022c40 <_Balloc+0x50>
 8022c1e:	69e3      	ldr	r3, [r4, #28]
 8022c20:	68db      	ldr	r3, [r3, #12]
 8022c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022c26:	b9b8      	cbnz	r0, 8022c58 <_Balloc+0x68>
 8022c28:	2101      	movs	r1, #1
 8022c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8022c2e:	1d72      	adds	r2, r6, #5
 8022c30:	0092      	lsls	r2, r2, #2
 8022c32:	4620      	mov	r0, r4
 8022c34:	f000 fed6 	bl	80239e4 <_calloc_r>
 8022c38:	b160      	cbz	r0, 8022c54 <_Balloc+0x64>
 8022c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022c3e:	e00e      	b.n	8022c5e <_Balloc+0x6e>
 8022c40:	2221      	movs	r2, #33	@ 0x21
 8022c42:	2104      	movs	r1, #4
 8022c44:	4620      	mov	r0, r4
 8022c46:	f000 fecd 	bl	80239e4 <_calloc_r>
 8022c4a:	69e3      	ldr	r3, [r4, #28]
 8022c4c:	60f0      	str	r0, [r6, #12]
 8022c4e:	68db      	ldr	r3, [r3, #12]
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d1e4      	bne.n	8022c1e <_Balloc+0x2e>
 8022c54:	2000      	movs	r0, #0
 8022c56:	bd70      	pop	{r4, r5, r6, pc}
 8022c58:	6802      	ldr	r2, [r0, #0]
 8022c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022c5e:	2300      	movs	r3, #0
 8022c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022c64:	e7f7      	b.n	8022c56 <_Balloc+0x66>
 8022c66:	bf00      	nop
 8022c68:	08025b6d 	.word	0x08025b6d
 8022c6c:	08025bed 	.word	0x08025bed

08022c70 <_Bfree>:
 8022c70:	b570      	push	{r4, r5, r6, lr}
 8022c72:	69c6      	ldr	r6, [r0, #28]
 8022c74:	4605      	mov	r5, r0
 8022c76:	460c      	mov	r4, r1
 8022c78:	b976      	cbnz	r6, 8022c98 <_Bfree+0x28>
 8022c7a:	2010      	movs	r0, #16
 8022c7c:	f7ff ff02 	bl	8022a84 <malloc>
 8022c80:	4602      	mov	r2, r0
 8022c82:	61e8      	str	r0, [r5, #28]
 8022c84:	b920      	cbnz	r0, 8022c90 <_Bfree+0x20>
 8022c86:	4b09      	ldr	r3, [pc, #36]	@ (8022cac <_Bfree+0x3c>)
 8022c88:	4809      	ldr	r0, [pc, #36]	@ (8022cb0 <_Bfree+0x40>)
 8022c8a:	218f      	movs	r1, #143	@ 0x8f
 8022c8c:	f000 fe8c 	bl	80239a8 <__assert_func>
 8022c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022c94:	6006      	str	r6, [r0, #0]
 8022c96:	60c6      	str	r6, [r0, #12]
 8022c98:	b13c      	cbz	r4, 8022caa <_Bfree+0x3a>
 8022c9a:	69eb      	ldr	r3, [r5, #28]
 8022c9c:	6862      	ldr	r2, [r4, #4]
 8022c9e:	68db      	ldr	r3, [r3, #12]
 8022ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022ca4:	6021      	str	r1, [r4, #0]
 8022ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022caa:	bd70      	pop	{r4, r5, r6, pc}
 8022cac:	08025b6d 	.word	0x08025b6d
 8022cb0:	08025bed 	.word	0x08025bed

08022cb4 <__multadd>:
 8022cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022cb8:	690d      	ldr	r5, [r1, #16]
 8022cba:	4607      	mov	r7, r0
 8022cbc:	460c      	mov	r4, r1
 8022cbe:	461e      	mov	r6, r3
 8022cc0:	f101 0c14 	add.w	ip, r1, #20
 8022cc4:	2000      	movs	r0, #0
 8022cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8022cca:	b299      	uxth	r1, r3
 8022ccc:	fb02 6101 	mla	r1, r2, r1, r6
 8022cd0:	0c1e      	lsrs	r6, r3, #16
 8022cd2:	0c0b      	lsrs	r3, r1, #16
 8022cd4:	fb02 3306 	mla	r3, r2, r6, r3
 8022cd8:	b289      	uxth	r1, r1
 8022cda:	3001      	adds	r0, #1
 8022cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022ce0:	4285      	cmp	r5, r0
 8022ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8022ce6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022cea:	dcec      	bgt.n	8022cc6 <__multadd+0x12>
 8022cec:	b30e      	cbz	r6, 8022d32 <__multadd+0x7e>
 8022cee:	68a3      	ldr	r3, [r4, #8]
 8022cf0:	42ab      	cmp	r3, r5
 8022cf2:	dc19      	bgt.n	8022d28 <__multadd+0x74>
 8022cf4:	6861      	ldr	r1, [r4, #4]
 8022cf6:	4638      	mov	r0, r7
 8022cf8:	3101      	adds	r1, #1
 8022cfa:	f7ff ff79 	bl	8022bf0 <_Balloc>
 8022cfe:	4680      	mov	r8, r0
 8022d00:	b928      	cbnz	r0, 8022d0e <__multadd+0x5a>
 8022d02:	4602      	mov	r2, r0
 8022d04:	4b0c      	ldr	r3, [pc, #48]	@ (8022d38 <__multadd+0x84>)
 8022d06:	480d      	ldr	r0, [pc, #52]	@ (8022d3c <__multadd+0x88>)
 8022d08:	21ba      	movs	r1, #186	@ 0xba
 8022d0a:	f000 fe4d 	bl	80239a8 <__assert_func>
 8022d0e:	6922      	ldr	r2, [r4, #16]
 8022d10:	3202      	adds	r2, #2
 8022d12:	f104 010c 	add.w	r1, r4, #12
 8022d16:	0092      	lsls	r2, r2, #2
 8022d18:	300c      	adds	r0, #12
 8022d1a:	f7ff f800 	bl	8021d1e <memcpy>
 8022d1e:	4621      	mov	r1, r4
 8022d20:	4638      	mov	r0, r7
 8022d22:	f7ff ffa5 	bl	8022c70 <_Bfree>
 8022d26:	4644      	mov	r4, r8
 8022d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022d2c:	3501      	adds	r5, #1
 8022d2e:	615e      	str	r6, [r3, #20]
 8022d30:	6125      	str	r5, [r4, #16]
 8022d32:	4620      	mov	r0, r4
 8022d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d38:	08025bdc 	.word	0x08025bdc
 8022d3c:	08025bed 	.word	0x08025bed

08022d40 <__hi0bits>:
 8022d40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8022d44:	4603      	mov	r3, r0
 8022d46:	bf36      	itet	cc
 8022d48:	0403      	lslcc	r3, r0, #16
 8022d4a:	2000      	movcs	r0, #0
 8022d4c:	2010      	movcc	r0, #16
 8022d4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8022d52:	bf3c      	itt	cc
 8022d54:	021b      	lslcc	r3, r3, #8
 8022d56:	3008      	addcc	r0, #8
 8022d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8022d5c:	bf3c      	itt	cc
 8022d5e:	011b      	lslcc	r3, r3, #4
 8022d60:	3004      	addcc	r0, #4
 8022d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022d66:	bf3c      	itt	cc
 8022d68:	009b      	lslcc	r3, r3, #2
 8022d6a:	3002      	addcc	r0, #2
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	db05      	blt.n	8022d7c <__hi0bits+0x3c>
 8022d70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8022d74:	f100 0001 	add.w	r0, r0, #1
 8022d78:	bf08      	it	eq
 8022d7a:	2020      	moveq	r0, #32
 8022d7c:	4770      	bx	lr

08022d7e <__lo0bits>:
 8022d7e:	6803      	ldr	r3, [r0, #0]
 8022d80:	4602      	mov	r2, r0
 8022d82:	f013 0007 	ands.w	r0, r3, #7
 8022d86:	d00b      	beq.n	8022da0 <__lo0bits+0x22>
 8022d88:	07d9      	lsls	r1, r3, #31
 8022d8a:	d421      	bmi.n	8022dd0 <__lo0bits+0x52>
 8022d8c:	0798      	lsls	r0, r3, #30
 8022d8e:	bf49      	itett	mi
 8022d90:	085b      	lsrmi	r3, r3, #1
 8022d92:	089b      	lsrpl	r3, r3, #2
 8022d94:	2001      	movmi	r0, #1
 8022d96:	6013      	strmi	r3, [r2, #0]
 8022d98:	bf5c      	itt	pl
 8022d9a:	6013      	strpl	r3, [r2, #0]
 8022d9c:	2002      	movpl	r0, #2
 8022d9e:	4770      	bx	lr
 8022da0:	b299      	uxth	r1, r3
 8022da2:	b909      	cbnz	r1, 8022da8 <__lo0bits+0x2a>
 8022da4:	0c1b      	lsrs	r3, r3, #16
 8022da6:	2010      	movs	r0, #16
 8022da8:	b2d9      	uxtb	r1, r3
 8022daa:	b909      	cbnz	r1, 8022db0 <__lo0bits+0x32>
 8022dac:	3008      	adds	r0, #8
 8022dae:	0a1b      	lsrs	r3, r3, #8
 8022db0:	0719      	lsls	r1, r3, #28
 8022db2:	bf04      	itt	eq
 8022db4:	091b      	lsreq	r3, r3, #4
 8022db6:	3004      	addeq	r0, #4
 8022db8:	0799      	lsls	r1, r3, #30
 8022dba:	bf04      	itt	eq
 8022dbc:	089b      	lsreq	r3, r3, #2
 8022dbe:	3002      	addeq	r0, #2
 8022dc0:	07d9      	lsls	r1, r3, #31
 8022dc2:	d403      	bmi.n	8022dcc <__lo0bits+0x4e>
 8022dc4:	085b      	lsrs	r3, r3, #1
 8022dc6:	f100 0001 	add.w	r0, r0, #1
 8022dca:	d003      	beq.n	8022dd4 <__lo0bits+0x56>
 8022dcc:	6013      	str	r3, [r2, #0]
 8022dce:	4770      	bx	lr
 8022dd0:	2000      	movs	r0, #0
 8022dd2:	4770      	bx	lr
 8022dd4:	2020      	movs	r0, #32
 8022dd6:	4770      	bx	lr

08022dd8 <__i2b>:
 8022dd8:	b510      	push	{r4, lr}
 8022dda:	460c      	mov	r4, r1
 8022ddc:	2101      	movs	r1, #1
 8022dde:	f7ff ff07 	bl	8022bf0 <_Balloc>
 8022de2:	4602      	mov	r2, r0
 8022de4:	b928      	cbnz	r0, 8022df2 <__i2b+0x1a>
 8022de6:	4b05      	ldr	r3, [pc, #20]	@ (8022dfc <__i2b+0x24>)
 8022de8:	4805      	ldr	r0, [pc, #20]	@ (8022e00 <__i2b+0x28>)
 8022dea:	f240 1145 	movw	r1, #325	@ 0x145
 8022dee:	f000 fddb 	bl	80239a8 <__assert_func>
 8022df2:	2301      	movs	r3, #1
 8022df4:	6144      	str	r4, [r0, #20]
 8022df6:	6103      	str	r3, [r0, #16]
 8022df8:	bd10      	pop	{r4, pc}
 8022dfa:	bf00      	nop
 8022dfc:	08025bdc 	.word	0x08025bdc
 8022e00:	08025bed 	.word	0x08025bed

08022e04 <__multiply>:
 8022e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e08:	4617      	mov	r7, r2
 8022e0a:	690a      	ldr	r2, [r1, #16]
 8022e0c:	693b      	ldr	r3, [r7, #16]
 8022e0e:	429a      	cmp	r2, r3
 8022e10:	bfa8      	it	ge
 8022e12:	463b      	movge	r3, r7
 8022e14:	4689      	mov	r9, r1
 8022e16:	bfa4      	itt	ge
 8022e18:	460f      	movge	r7, r1
 8022e1a:	4699      	movge	r9, r3
 8022e1c:	693d      	ldr	r5, [r7, #16]
 8022e1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022e22:	68bb      	ldr	r3, [r7, #8]
 8022e24:	6879      	ldr	r1, [r7, #4]
 8022e26:	eb05 060a 	add.w	r6, r5, sl
 8022e2a:	42b3      	cmp	r3, r6
 8022e2c:	b085      	sub	sp, #20
 8022e2e:	bfb8      	it	lt
 8022e30:	3101      	addlt	r1, #1
 8022e32:	f7ff fedd 	bl	8022bf0 <_Balloc>
 8022e36:	b930      	cbnz	r0, 8022e46 <__multiply+0x42>
 8022e38:	4602      	mov	r2, r0
 8022e3a:	4b41      	ldr	r3, [pc, #260]	@ (8022f40 <__multiply+0x13c>)
 8022e3c:	4841      	ldr	r0, [pc, #260]	@ (8022f44 <__multiply+0x140>)
 8022e3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8022e42:	f000 fdb1 	bl	80239a8 <__assert_func>
 8022e46:	f100 0414 	add.w	r4, r0, #20
 8022e4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8022e4e:	4623      	mov	r3, r4
 8022e50:	2200      	movs	r2, #0
 8022e52:	4573      	cmp	r3, lr
 8022e54:	d320      	bcc.n	8022e98 <__multiply+0x94>
 8022e56:	f107 0814 	add.w	r8, r7, #20
 8022e5a:	f109 0114 	add.w	r1, r9, #20
 8022e5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8022e62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8022e66:	9302      	str	r3, [sp, #8]
 8022e68:	1beb      	subs	r3, r5, r7
 8022e6a:	3b15      	subs	r3, #21
 8022e6c:	f023 0303 	bic.w	r3, r3, #3
 8022e70:	3304      	adds	r3, #4
 8022e72:	3715      	adds	r7, #21
 8022e74:	42bd      	cmp	r5, r7
 8022e76:	bf38      	it	cc
 8022e78:	2304      	movcc	r3, #4
 8022e7a:	9301      	str	r3, [sp, #4]
 8022e7c:	9b02      	ldr	r3, [sp, #8]
 8022e7e:	9103      	str	r1, [sp, #12]
 8022e80:	428b      	cmp	r3, r1
 8022e82:	d80c      	bhi.n	8022e9e <__multiply+0x9a>
 8022e84:	2e00      	cmp	r6, #0
 8022e86:	dd03      	ble.n	8022e90 <__multiply+0x8c>
 8022e88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	d055      	beq.n	8022f3c <__multiply+0x138>
 8022e90:	6106      	str	r6, [r0, #16]
 8022e92:	b005      	add	sp, #20
 8022e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e98:	f843 2b04 	str.w	r2, [r3], #4
 8022e9c:	e7d9      	b.n	8022e52 <__multiply+0x4e>
 8022e9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8022ea2:	f1ba 0f00 	cmp.w	sl, #0
 8022ea6:	d01f      	beq.n	8022ee8 <__multiply+0xe4>
 8022ea8:	46c4      	mov	ip, r8
 8022eaa:	46a1      	mov	r9, r4
 8022eac:	2700      	movs	r7, #0
 8022eae:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022eb2:	f8d9 3000 	ldr.w	r3, [r9]
 8022eb6:	fa1f fb82 	uxth.w	fp, r2
 8022eba:	b29b      	uxth	r3, r3
 8022ebc:	fb0a 330b 	mla	r3, sl, fp, r3
 8022ec0:	443b      	add	r3, r7
 8022ec2:	f8d9 7000 	ldr.w	r7, [r9]
 8022ec6:	0c12      	lsrs	r2, r2, #16
 8022ec8:	0c3f      	lsrs	r7, r7, #16
 8022eca:	fb0a 7202 	mla	r2, sl, r2, r7
 8022ece:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8022ed2:	b29b      	uxth	r3, r3
 8022ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022ed8:	4565      	cmp	r5, ip
 8022eda:	f849 3b04 	str.w	r3, [r9], #4
 8022ede:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8022ee2:	d8e4      	bhi.n	8022eae <__multiply+0xaa>
 8022ee4:	9b01      	ldr	r3, [sp, #4]
 8022ee6:	50e7      	str	r7, [r4, r3]
 8022ee8:	9b03      	ldr	r3, [sp, #12]
 8022eea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8022eee:	3104      	adds	r1, #4
 8022ef0:	f1b9 0f00 	cmp.w	r9, #0
 8022ef4:	d020      	beq.n	8022f38 <__multiply+0x134>
 8022ef6:	6823      	ldr	r3, [r4, #0]
 8022ef8:	4647      	mov	r7, r8
 8022efa:	46a4      	mov	ip, r4
 8022efc:	f04f 0a00 	mov.w	sl, #0
 8022f00:	f8b7 b000 	ldrh.w	fp, [r7]
 8022f04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8022f08:	fb09 220b 	mla	r2, r9, fp, r2
 8022f0c:	4452      	add	r2, sl
 8022f0e:	b29b      	uxth	r3, r3
 8022f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022f14:	f84c 3b04 	str.w	r3, [ip], #4
 8022f18:	f857 3b04 	ldr.w	r3, [r7], #4
 8022f1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022f20:	f8bc 3000 	ldrh.w	r3, [ip]
 8022f24:	fb09 330a 	mla	r3, r9, sl, r3
 8022f28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8022f2c:	42bd      	cmp	r5, r7
 8022f2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022f32:	d8e5      	bhi.n	8022f00 <__multiply+0xfc>
 8022f34:	9a01      	ldr	r2, [sp, #4]
 8022f36:	50a3      	str	r3, [r4, r2]
 8022f38:	3404      	adds	r4, #4
 8022f3a:	e79f      	b.n	8022e7c <__multiply+0x78>
 8022f3c:	3e01      	subs	r6, #1
 8022f3e:	e7a1      	b.n	8022e84 <__multiply+0x80>
 8022f40:	08025bdc 	.word	0x08025bdc
 8022f44:	08025bed 	.word	0x08025bed

08022f48 <__pow5mult>:
 8022f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022f4c:	4615      	mov	r5, r2
 8022f4e:	f012 0203 	ands.w	r2, r2, #3
 8022f52:	4607      	mov	r7, r0
 8022f54:	460e      	mov	r6, r1
 8022f56:	d007      	beq.n	8022f68 <__pow5mult+0x20>
 8022f58:	4c25      	ldr	r4, [pc, #148]	@ (8022ff0 <__pow5mult+0xa8>)
 8022f5a:	3a01      	subs	r2, #1
 8022f5c:	2300      	movs	r3, #0
 8022f5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022f62:	f7ff fea7 	bl	8022cb4 <__multadd>
 8022f66:	4606      	mov	r6, r0
 8022f68:	10ad      	asrs	r5, r5, #2
 8022f6a:	d03d      	beq.n	8022fe8 <__pow5mult+0xa0>
 8022f6c:	69fc      	ldr	r4, [r7, #28]
 8022f6e:	b97c      	cbnz	r4, 8022f90 <__pow5mult+0x48>
 8022f70:	2010      	movs	r0, #16
 8022f72:	f7ff fd87 	bl	8022a84 <malloc>
 8022f76:	4602      	mov	r2, r0
 8022f78:	61f8      	str	r0, [r7, #28]
 8022f7a:	b928      	cbnz	r0, 8022f88 <__pow5mult+0x40>
 8022f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8022ff4 <__pow5mult+0xac>)
 8022f7e:	481e      	ldr	r0, [pc, #120]	@ (8022ff8 <__pow5mult+0xb0>)
 8022f80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8022f84:	f000 fd10 	bl	80239a8 <__assert_func>
 8022f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022f8c:	6004      	str	r4, [r0, #0]
 8022f8e:	60c4      	str	r4, [r0, #12]
 8022f90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8022f94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022f98:	b94c      	cbnz	r4, 8022fae <__pow5mult+0x66>
 8022f9a:	f240 2171 	movw	r1, #625	@ 0x271
 8022f9e:	4638      	mov	r0, r7
 8022fa0:	f7ff ff1a 	bl	8022dd8 <__i2b>
 8022fa4:	2300      	movs	r3, #0
 8022fa6:	f8c8 0008 	str.w	r0, [r8, #8]
 8022faa:	4604      	mov	r4, r0
 8022fac:	6003      	str	r3, [r0, #0]
 8022fae:	f04f 0900 	mov.w	r9, #0
 8022fb2:	07eb      	lsls	r3, r5, #31
 8022fb4:	d50a      	bpl.n	8022fcc <__pow5mult+0x84>
 8022fb6:	4631      	mov	r1, r6
 8022fb8:	4622      	mov	r2, r4
 8022fba:	4638      	mov	r0, r7
 8022fbc:	f7ff ff22 	bl	8022e04 <__multiply>
 8022fc0:	4631      	mov	r1, r6
 8022fc2:	4680      	mov	r8, r0
 8022fc4:	4638      	mov	r0, r7
 8022fc6:	f7ff fe53 	bl	8022c70 <_Bfree>
 8022fca:	4646      	mov	r6, r8
 8022fcc:	106d      	asrs	r5, r5, #1
 8022fce:	d00b      	beq.n	8022fe8 <__pow5mult+0xa0>
 8022fd0:	6820      	ldr	r0, [r4, #0]
 8022fd2:	b938      	cbnz	r0, 8022fe4 <__pow5mult+0x9c>
 8022fd4:	4622      	mov	r2, r4
 8022fd6:	4621      	mov	r1, r4
 8022fd8:	4638      	mov	r0, r7
 8022fda:	f7ff ff13 	bl	8022e04 <__multiply>
 8022fde:	6020      	str	r0, [r4, #0]
 8022fe0:	f8c0 9000 	str.w	r9, [r0]
 8022fe4:	4604      	mov	r4, r0
 8022fe6:	e7e4      	b.n	8022fb2 <__pow5mult+0x6a>
 8022fe8:	4630      	mov	r0, r6
 8022fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022fee:	bf00      	nop
 8022ff0:	08025ca0 	.word	0x08025ca0
 8022ff4:	08025b6d 	.word	0x08025b6d
 8022ff8:	08025bed 	.word	0x08025bed

08022ffc <__lshift>:
 8022ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023000:	460c      	mov	r4, r1
 8023002:	6849      	ldr	r1, [r1, #4]
 8023004:	6923      	ldr	r3, [r4, #16]
 8023006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802300a:	68a3      	ldr	r3, [r4, #8]
 802300c:	4607      	mov	r7, r0
 802300e:	4691      	mov	r9, r2
 8023010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023014:	f108 0601 	add.w	r6, r8, #1
 8023018:	42b3      	cmp	r3, r6
 802301a:	db0b      	blt.n	8023034 <__lshift+0x38>
 802301c:	4638      	mov	r0, r7
 802301e:	f7ff fde7 	bl	8022bf0 <_Balloc>
 8023022:	4605      	mov	r5, r0
 8023024:	b948      	cbnz	r0, 802303a <__lshift+0x3e>
 8023026:	4602      	mov	r2, r0
 8023028:	4b28      	ldr	r3, [pc, #160]	@ (80230cc <__lshift+0xd0>)
 802302a:	4829      	ldr	r0, [pc, #164]	@ (80230d0 <__lshift+0xd4>)
 802302c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8023030:	f000 fcba 	bl	80239a8 <__assert_func>
 8023034:	3101      	adds	r1, #1
 8023036:	005b      	lsls	r3, r3, #1
 8023038:	e7ee      	b.n	8023018 <__lshift+0x1c>
 802303a:	2300      	movs	r3, #0
 802303c:	f100 0114 	add.w	r1, r0, #20
 8023040:	f100 0210 	add.w	r2, r0, #16
 8023044:	4618      	mov	r0, r3
 8023046:	4553      	cmp	r3, sl
 8023048:	db33      	blt.n	80230b2 <__lshift+0xb6>
 802304a:	6920      	ldr	r0, [r4, #16]
 802304c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023050:	f104 0314 	add.w	r3, r4, #20
 8023054:	f019 091f 	ands.w	r9, r9, #31
 8023058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802305c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023060:	d02b      	beq.n	80230ba <__lshift+0xbe>
 8023062:	f1c9 0e20 	rsb	lr, r9, #32
 8023066:	468a      	mov	sl, r1
 8023068:	2200      	movs	r2, #0
 802306a:	6818      	ldr	r0, [r3, #0]
 802306c:	fa00 f009 	lsl.w	r0, r0, r9
 8023070:	4310      	orrs	r0, r2
 8023072:	f84a 0b04 	str.w	r0, [sl], #4
 8023076:	f853 2b04 	ldr.w	r2, [r3], #4
 802307a:	459c      	cmp	ip, r3
 802307c:	fa22 f20e 	lsr.w	r2, r2, lr
 8023080:	d8f3      	bhi.n	802306a <__lshift+0x6e>
 8023082:	ebac 0304 	sub.w	r3, ip, r4
 8023086:	3b15      	subs	r3, #21
 8023088:	f023 0303 	bic.w	r3, r3, #3
 802308c:	3304      	adds	r3, #4
 802308e:	f104 0015 	add.w	r0, r4, #21
 8023092:	4560      	cmp	r0, ip
 8023094:	bf88      	it	hi
 8023096:	2304      	movhi	r3, #4
 8023098:	50ca      	str	r2, [r1, r3]
 802309a:	b10a      	cbz	r2, 80230a0 <__lshift+0xa4>
 802309c:	f108 0602 	add.w	r6, r8, #2
 80230a0:	3e01      	subs	r6, #1
 80230a2:	4638      	mov	r0, r7
 80230a4:	612e      	str	r6, [r5, #16]
 80230a6:	4621      	mov	r1, r4
 80230a8:	f7ff fde2 	bl	8022c70 <_Bfree>
 80230ac:	4628      	mov	r0, r5
 80230ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80230b6:	3301      	adds	r3, #1
 80230b8:	e7c5      	b.n	8023046 <__lshift+0x4a>
 80230ba:	3904      	subs	r1, #4
 80230bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80230c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80230c4:	459c      	cmp	ip, r3
 80230c6:	d8f9      	bhi.n	80230bc <__lshift+0xc0>
 80230c8:	e7ea      	b.n	80230a0 <__lshift+0xa4>
 80230ca:	bf00      	nop
 80230cc:	08025bdc 	.word	0x08025bdc
 80230d0:	08025bed 	.word	0x08025bed

080230d4 <__mcmp>:
 80230d4:	690a      	ldr	r2, [r1, #16]
 80230d6:	4603      	mov	r3, r0
 80230d8:	6900      	ldr	r0, [r0, #16]
 80230da:	1a80      	subs	r0, r0, r2
 80230dc:	b530      	push	{r4, r5, lr}
 80230de:	d10e      	bne.n	80230fe <__mcmp+0x2a>
 80230e0:	3314      	adds	r3, #20
 80230e2:	3114      	adds	r1, #20
 80230e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80230e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80230ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80230f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80230f4:	4295      	cmp	r5, r2
 80230f6:	d003      	beq.n	8023100 <__mcmp+0x2c>
 80230f8:	d205      	bcs.n	8023106 <__mcmp+0x32>
 80230fa:	f04f 30ff 	mov.w	r0, #4294967295
 80230fe:	bd30      	pop	{r4, r5, pc}
 8023100:	42a3      	cmp	r3, r4
 8023102:	d3f3      	bcc.n	80230ec <__mcmp+0x18>
 8023104:	e7fb      	b.n	80230fe <__mcmp+0x2a>
 8023106:	2001      	movs	r0, #1
 8023108:	e7f9      	b.n	80230fe <__mcmp+0x2a>
	...

0802310c <__mdiff>:
 802310c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023110:	4689      	mov	r9, r1
 8023112:	4606      	mov	r6, r0
 8023114:	4611      	mov	r1, r2
 8023116:	4648      	mov	r0, r9
 8023118:	4614      	mov	r4, r2
 802311a:	f7ff ffdb 	bl	80230d4 <__mcmp>
 802311e:	1e05      	subs	r5, r0, #0
 8023120:	d112      	bne.n	8023148 <__mdiff+0x3c>
 8023122:	4629      	mov	r1, r5
 8023124:	4630      	mov	r0, r6
 8023126:	f7ff fd63 	bl	8022bf0 <_Balloc>
 802312a:	4602      	mov	r2, r0
 802312c:	b928      	cbnz	r0, 802313a <__mdiff+0x2e>
 802312e:	4b3f      	ldr	r3, [pc, #252]	@ (802322c <__mdiff+0x120>)
 8023130:	f240 2137 	movw	r1, #567	@ 0x237
 8023134:	483e      	ldr	r0, [pc, #248]	@ (8023230 <__mdiff+0x124>)
 8023136:	f000 fc37 	bl	80239a8 <__assert_func>
 802313a:	2301      	movs	r3, #1
 802313c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023140:	4610      	mov	r0, r2
 8023142:	b003      	add	sp, #12
 8023144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023148:	bfbc      	itt	lt
 802314a:	464b      	movlt	r3, r9
 802314c:	46a1      	movlt	r9, r4
 802314e:	4630      	mov	r0, r6
 8023150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023154:	bfba      	itte	lt
 8023156:	461c      	movlt	r4, r3
 8023158:	2501      	movlt	r5, #1
 802315a:	2500      	movge	r5, #0
 802315c:	f7ff fd48 	bl	8022bf0 <_Balloc>
 8023160:	4602      	mov	r2, r0
 8023162:	b918      	cbnz	r0, 802316c <__mdiff+0x60>
 8023164:	4b31      	ldr	r3, [pc, #196]	@ (802322c <__mdiff+0x120>)
 8023166:	f240 2145 	movw	r1, #581	@ 0x245
 802316a:	e7e3      	b.n	8023134 <__mdiff+0x28>
 802316c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023170:	6926      	ldr	r6, [r4, #16]
 8023172:	60c5      	str	r5, [r0, #12]
 8023174:	f109 0310 	add.w	r3, r9, #16
 8023178:	f109 0514 	add.w	r5, r9, #20
 802317c:	f104 0e14 	add.w	lr, r4, #20
 8023180:	f100 0b14 	add.w	fp, r0, #20
 8023184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8023188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802318c:	9301      	str	r3, [sp, #4]
 802318e:	46d9      	mov	r9, fp
 8023190:	f04f 0c00 	mov.w	ip, #0
 8023194:	9b01      	ldr	r3, [sp, #4]
 8023196:	f85e 0b04 	ldr.w	r0, [lr], #4
 802319a:	f853 af04 	ldr.w	sl, [r3, #4]!
 802319e:	9301      	str	r3, [sp, #4]
 80231a0:	fa1f f38a 	uxth.w	r3, sl
 80231a4:	4619      	mov	r1, r3
 80231a6:	b283      	uxth	r3, r0
 80231a8:	1acb      	subs	r3, r1, r3
 80231aa:	0c00      	lsrs	r0, r0, #16
 80231ac:	4463      	add	r3, ip
 80231ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80231b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80231b6:	b29b      	uxth	r3, r3
 80231b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80231bc:	4576      	cmp	r6, lr
 80231be:	f849 3b04 	str.w	r3, [r9], #4
 80231c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80231c6:	d8e5      	bhi.n	8023194 <__mdiff+0x88>
 80231c8:	1b33      	subs	r3, r6, r4
 80231ca:	3b15      	subs	r3, #21
 80231cc:	f023 0303 	bic.w	r3, r3, #3
 80231d0:	3415      	adds	r4, #21
 80231d2:	3304      	adds	r3, #4
 80231d4:	42a6      	cmp	r6, r4
 80231d6:	bf38      	it	cc
 80231d8:	2304      	movcc	r3, #4
 80231da:	441d      	add	r5, r3
 80231dc:	445b      	add	r3, fp
 80231de:	461e      	mov	r6, r3
 80231e0:	462c      	mov	r4, r5
 80231e2:	4544      	cmp	r4, r8
 80231e4:	d30e      	bcc.n	8023204 <__mdiff+0xf8>
 80231e6:	f108 0103 	add.w	r1, r8, #3
 80231ea:	1b49      	subs	r1, r1, r5
 80231ec:	f021 0103 	bic.w	r1, r1, #3
 80231f0:	3d03      	subs	r5, #3
 80231f2:	45a8      	cmp	r8, r5
 80231f4:	bf38      	it	cc
 80231f6:	2100      	movcc	r1, #0
 80231f8:	440b      	add	r3, r1
 80231fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80231fe:	b191      	cbz	r1, 8023226 <__mdiff+0x11a>
 8023200:	6117      	str	r7, [r2, #16]
 8023202:	e79d      	b.n	8023140 <__mdiff+0x34>
 8023204:	f854 1b04 	ldr.w	r1, [r4], #4
 8023208:	46e6      	mov	lr, ip
 802320a:	0c08      	lsrs	r0, r1, #16
 802320c:	fa1c fc81 	uxtah	ip, ip, r1
 8023210:	4471      	add	r1, lr
 8023212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8023216:	b289      	uxth	r1, r1
 8023218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802321c:	f846 1b04 	str.w	r1, [r6], #4
 8023220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023224:	e7dd      	b.n	80231e2 <__mdiff+0xd6>
 8023226:	3f01      	subs	r7, #1
 8023228:	e7e7      	b.n	80231fa <__mdiff+0xee>
 802322a:	bf00      	nop
 802322c:	08025bdc 	.word	0x08025bdc
 8023230:	08025bed 	.word	0x08025bed

08023234 <__d2b>:
 8023234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023238:	460f      	mov	r7, r1
 802323a:	2101      	movs	r1, #1
 802323c:	ec59 8b10 	vmov	r8, r9, d0
 8023240:	4616      	mov	r6, r2
 8023242:	f7ff fcd5 	bl	8022bf0 <_Balloc>
 8023246:	4604      	mov	r4, r0
 8023248:	b930      	cbnz	r0, 8023258 <__d2b+0x24>
 802324a:	4602      	mov	r2, r0
 802324c:	4b23      	ldr	r3, [pc, #140]	@ (80232dc <__d2b+0xa8>)
 802324e:	4824      	ldr	r0, [pc, #144]	@ (80232e0 <__d2b+0xac>)
 8023250:	f240 310f 	movw	r1, #783	@ 0x30f
 8023254:	f000 fba8 	bl	80239a8 <__assert_func>
 8023258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802325c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023260:	b10d      	cbz	r5, 8023266 <__d2b+0x32>
 8023262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023266:	9301      	str	r3, [sp, #4]
 8023268:	f1b8 0300 	subs.w	r3, r8, #0
 802326c:	d023      	beq.n	80232b6 <__d2b+0x82>
 802326e:	4668      	mov	r0, sp
 8023270:	9300      	str	r3, [sp, #0]
 8023272:	f7ff fd84 	bl	8022d7e <__lo0bits>
 8023276:	e9dd 1200 	ldrd	r1, r2, [sp]
 802327a:	b1d0      	cbz	r0, 80232b2 <__d2b+0x7e>
 802327c:	f1c0 0320 	rsb	r3, r0, #32
 8023280:	fa02 f303 	lsl.w	r3, r2, r3
 8023284:	430b      	orrs	r3, r1
 8023286:	40c2      	lsrs	r2, r0
 8023288:	6163      	str	r3, [r4, #20]
 802328a:	9201      	str	r2, [sp, #4]
 802328c:	9b01      	ldr	r3, [sp, #4]
 802328e:	61a3      	str	r3, [r4, #24]
 8023290:	2b00      	cmp	r3, #0
 8023292:	bf0c      	ite	eq
 8023294:	2201      	moveq	r2, #1
 8023296:	2202      	movne	r2, #2
 8023298:	6122      	str	r2, [r4, #16]
 802329a:	b1a5      	cbz	r5, 80232c6 <__d2b+0x92>
 802329c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80232a0:	4405      	add	r5, r0
 80232a2:	603d      	str	r5, [r7, #0]
 80232a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80232a8:	6030      	str	r0, [r6, #0]
 80232aa:	4620      	mov	r0, r4
 80232ac:	b003      	add	sp, #12
 80232ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80232b2:	6161      	str	r1, [r4, #20]
 80232b4:	e7ea      	b.n	802328c <__d2b+0x58>
 80232b6:	a801      	add	r0, sp, #4
 80232b8:	f7ff fd61 	bl	8022d7e <__lo0bits>
 80232bc:	9b01      	ldr	r3, [sp, #4]
 80232be:	6163      	str	r3, [r4, #20]
 80232c0:	3020      	adds	r0, #32
 80232c2:	2201      	movs	r2, #1
 80232c4:	e7e8      	b.n	8023298 <__d2b+0x64>
 80232c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80232ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80232ce:	6038      	str	r0, [r7, #0]
 80232d0:	6918      	ldr	r0, [r3, #16]
 80232d2:	f7ff fd35 	bl	8022d40 <__hi0bits>
 80232d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80232da:	e7e5      	b.n	80232a8 <__d2b+0x74>
 80232dc:	08025bdc 	.word	0x08025bdc
 80232e0:	08025bed 	.word	0x08025bed

080232e4 <__ssputs_r>:
 80232e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80232e8:	688e      	ldr	r6, [r1, #8]
 80232ea:	461f      	mov	r7, r3
 80232ec:	42be      	cmp	r6, r7
 80232ee:	680b      	ldr	r3, [r1, #0]
 80232f0:	4682      	mov	sl, r0
 80232f2:	460c      	mov	r4, r1
 80232f4:	4690      	mov	r8, r2
 80232f6:	d82d      	bhi.n	8023354 <__ssputs_r+0x70>
 80232f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80232fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8023300:	d026      	beq.n	8023350 <__ssputs_r+0x6c>
 8023302:	6965      	ldr	r5, [r4, #20]
 8023304:	6909      	ldr	r1, [r1, #16]
 8023306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802330a:	eba3 0901 	sub.w	r9, r3, r1
 802330e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023312:	1c7b      	adds	r3, r7, #1
 8023314:	444b      	add	r3, r9
 8023316:	106d      	asrs	r5, r5, #1
 8023318:	429d      	cmp	r5, r3
 802331a:	bf38      	it	cc
 802331c:	461d      	movcc	r5, r3
 802331e:	0553      	lsls	r3, r2, #21
 8023320:	d527      	bpl.n	8023372 <__ssputs_r+0x8e>
 8023322:	4629      	mov	r1, r5
 8023324:	f7ff fbd8 	bl	8022ad8 <_malloc_r>
 8023328:	4606      	mov	r6, r0
 802332a:	b360      	cbz	r0, 8023386 <__ssputs_r+0xa2>
 802332c:	6921      	ldr	r1, [r4, #16]
 802332e:	464a      	mov	r2, r9
 8023330:	f7fe fcf5 	bl	8021d1e <memcpy>
 8023334:	89a3      	ldrh	r3, [r4, #12]
 8023336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802333a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802333e:	81a3      	strh	r3, [r4, #12]
 8023340:	6126      	str	r6, [r4, #16]
 8023342:	6165      	str	r5, [r4, #20]
 8023344:	444e      	add	r6, r9
 8023346:	eba5 0509 	sub.w	r5, r5, r9
 802334a:	6026      	str	r6, [r4, #0]
 802334c:	60a5      	str	r5, [r4, #8]
 802334e:	463e      	mov	r6, r7
 8023350:	42be      	cmp	r6, r7
 8023352:	d900      	bls.n	8023356 <__ssputs_r+0x72>
 8023354:	463e      	mov	r6, r7
 8023356:	6820      	ldr	r0, [r4, #0]
 8023358:	4632      	mov	r2, r6
 802335a:	4641      	mov	r1, r8
 802335c:	f7fe fc30 	bl	8021bc0 <memmove>
 8023360:	68a3      	ldr	r3, [r4, #8]
 8023362:	1b9b      	subs	r3, r3, r6
 8023364:	60a3      	str	r3, [r4, #8]
 8023366:	6823      	ldr	r3, [r4, #0]
 8023368:	4433      	add	r3, r6
 802336a:	6023      	str	r3, [r4, #0]
 802336c:	2000      	movs	r0, #0
 802336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023372:	462a      	mov	r2, r5
 8023374:	f000 fb5c 	bl	8023a30 <_realloc_r>
 8023378:	4606      	mov	r6, r0
 802337a:	2800      	cmp	r0, #0
 802337c:	d1e0      	bne.n	8023340 <__ssputs_r+0x5c>
 802337e:	6921      	ldr	r1, [r4, #16]
 8023380:	4650      	mov	r0, sl
 8023382:	f7ff fb35 	bl	80229f0 <_free_r>
 8023386:	230c      	movs	r3, #12
 8023388:	f8ca 3000 	str.w	r3, [sl]
 802338c:	89a3      	ldrh	r3, [r4, #12]
 802338e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023392:	81a3      	strh	r3, [r4, #12]
 8023394:	f04f 30ff 	mov.w	r0, #4294967295
 8023398:	e7e9      	b.n	802336e <__ssputs_r+0x8a>
	...

0802339c <_svfiprintf_r>:
 802339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a0:	4698      	mov	r8, r3
 80233a2:	898b      	ldrh	r3, [r1, #12]
 80233a4:	061b      	lsls	r3, r3, #24
 80233a6:	b09d      	sub	sp, #116	@ 0x74
 80233a8:	4607      	mov	r7, r0
 80233aa:	460d      	mov	r5, r1
 80233ac:	4614      	mov	r4, r2
 80233ae:	d510      	bpl.n	80233d2 <_svfiprintf_r+0x36>
 80233b0:	690b      	ldr	r3, [r1, #16]
 80233b2:	b973      	cbnz	r3, 80233d2 <_svfiprintf_r+0x36>
 80233b4:	2140      	movs	r1, #64	@ 0x40
 80233b6:	f7ff fb8f 	bl	8022ad8 <_malloc_r>
 80233ba:	6028      	str	r0, [r5, #0]
 80233bc:	6128      	str	r0, [r5, #16]
 80233be:	b930      	cbnz	r0, 80233ce <_svfiprintf_r+0x32>
 80233c0:	230c      	movs	r3, #12
 80233c2:	603b      	str	r3, [r7, #0]
 80233c4:	f04f 30ff 	mov.w	r0, #4294967295
 80233c8:	b01d      	add	sp, #116	@ 0x74
 80233ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233ce:	2340      	movs	r3, #64	@ 0x40
 80233d0:	616b      	str	r3, [r5, #20]
 80233d2:	2300      	movs	r3, #0
 80233d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80233d6:	2320      	movs	r3, #32
 80233d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80233dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80233e0:	2330      	movs	r3, #48	@ 0x30
 80233e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8023580 <_svfiprintf_r+0x1e4>
 80233e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80233ea:	f04f 0901 	mov.w	r9, #1
 80233ee:	4623      	mov	r3, r4
 80233f0:	469a      	mov	sl, r3
 80233f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80233f6:	b10a      	cbz	r2, 80233fc <_svfiprintf_r+0x60>
 80233f8:	2a25      	cmp	r2, #37	@ 0x25
 80233fa:	d1f9      	bne.n	80233f0 <_svfiprintf_r+0x54>
 80233fc:	ebba 0b04 	subs.w	fp, sl, r4
 8023400:	d00b      	beq.n	802341a <_svfiprintf_r+0x7e>
 8023402:	465b      	mov	r3, fp
 8023404:	4622      	mov	r2, r4
 8023406:	4629      	mov	r1, r5
 8023408:	4638      	mov	r0, r7
 802340a:	f7ff ff6b 	bl	80232e4 <__ssputs_r>
 802340e:	3001      	adds	r0, #1
 8023410:	f000 80a7 	beq.w	8023562 <_svfiprintf_r+0x1c6>
 8023414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023416:	445a      	add	r2, fp
 8023418:	9209      	str	r2, [sp, #36]	@ 0x24
 802341a:	f89a 3000 	ldrb.w	r3, [sl]
 802341e:	2b00      	cmp	r3, #0
 8023420:	f000 809f 	beq.w	8023562 <_svfiprintf_r+0x1c6>
 8023424:	2300      	movs	r3, #0
 8023426:	f04f 32ff 	mov.w	r2, #4294967295
 802342a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802342e:	f10a 0a01 	add.w	sl, sl, #1
 8023432:	9304      	str	r3, [sp, #16]
 8023434:	9307      	str	r3, [sp, #28]
 8023436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802343a:	931a      	str	r3, [sp, #104]	@ 0x68
 802343c:	4654      	mov	r4, sl
 802343e:	2205      	movs	r2, #5
 8023440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023444:	484e      	ldr	r0, [pc, #312]	@ (8023580 <_svfiprintf_r+0x1e4>)
 8023446:	f7dc fec3 	bl	80001d0 <memchr>
 802344a:	9a04      	ldr	r2, [sp, #16]
 802344c:	b9d8      	cbnz	r0, 8023486 <_svfiprintf_r+0xea>
 802344e:	06d0      	lsls	r0, r2, #27
 8023450:	bf44      	itt	mi
 8023452:	2320      	movmi	r3, #32
 8023454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023458:	0711      	lsls	r1, r2, #28
 802345a:	bf44      	itt	mi
 802345c:	232b      	movmi	r3, #43	@ 0x2b
 802345e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023462:	f89a 3000 	ldrb.w	r3, [sl]
 8023466:	2b2a      	cmp	r3, #42	@ 0x2a
 8023468:	d015      	beq.n	8023496 <_svfiprintf_r+0xfa>
 802346a:	9a07      	ldr	r2, [sp, #28]
 802346c:	4654      	mov	r4, sl
 802346e:	2000      	movs	r0, #0
 8023470:	f04f 0c0a 	mov.w	ip, #10
 8023474:	4621      	mov	r1, r4
 8023476:	f811 3b01 	ldrb.w	r3, [r1], #1
 802347a:	3b30      	subs	r3, #48	@ 0x30
 802347c:	2b09      	cmp	r3, #9
 802347e:	d94b      	bls.n	8023518 <_svfiprintf_r+0x17c>
 8023480:	b1b0      	cbz	r0, 80234b0 <_svfiprintf_r+0x114>
 8023482:	9207      	str	r2, [sp, #28]
 8023484:	e014      	b.n	80234b0 <_svfiprintf_r+0x114>
 8023486:	eba0 0308 	sub.w	r3, r0, r8
 802348a:	fa09 f303 	lsl.w	r3, r9, r3
 802348e:	4313      	orrs	r3, r2
 8023490:	9304      	str	r3, [sp, #16]
 8023492:	46a2      	mov	sl, r4
 8023494:	e7d2      	b.n	802343c <_svfiprintf_r+0xa0>
 8023496:	9b03      	ldr	r3, [sp, #12]
 8023498:	1d19      	adds	r1, r3, #4
 802349a:	681b      	ldr	r3, [r3, #0]
 802349c:	9103      	str	r1, [sp, #12]
 802349e:	2b00      	cmp	r3, #0
 80234a0:	bfbb      	ittet	lt
 80234a2:	425b      	neglt	r3, r3
 80234a4:	f042 0202 	orrlt.w	r2, r2, #2
 80234a8:	9307      	strge	r3, [sp, #28]
 80234aa:	9307      	strlt	r3, [sp, #28]
 80234ac:	bfb8      	it	lt
 80234ae:	9204      	strlt	r2, [sp, #16]
 80234b0:	7823      	ldrb	r3, [r4, #0]
 80234b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80234b4:	d10a      	bne.n	80234cc <_svfiprintf_r+0x130>
 80234b6:	7863      	ldrb	r3, [r4, #1]
 80234b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80234ba:	d132      	bne.n	8023522 <_svfiprintf_r+0x186>
 80234bc:	9b03      	ldr	r3, [sp, #12]
 80234be:	1d1a      	adds	r2, r3, #4
 80234c0:	681b      	ldr	r3, [r3, #0]
 80234c2:	9203      	str	r2, [sp, #12]
 80234c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80234c8:	3402      	adds	r4, #2
 80234ca:	9305      	str	r3, [sp, #20]
 80234cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8023590 <_svfiprintf_r+0x1f4>
 80234d0:	7821      	ldrb	r1, [r4, #0]
 80234d2:	2203      	movs	r2, #3
 80234d4:	4650      	mov	r0, sl
 80234d6:	f7dc fe7b 	bl	80001d0 <memchr>
 80234da:	b138      	cbz	r0, 80234ec <_svfiprintf_r+0x150>
 80234dc:	9b04      	ldr	r3, [sp, #16]
 80234de:	eba0 000a 	sub.w	r0, r0, sl
 80234e2:	2240      	movs	r2, #64	@ 0x40
 80234e4:	4082      	lsls	r2, r0
 80234e6:	4313      	orrs	r3, r2
 80234e8:	3401      	adds	r4, #1
 80234ea:	9304      	str	r3, [sp, #16]
 80234ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234f0:	4824      	ldr	r0, [pc, #144]	@ (8023584 <_svfiprintf_r+0x1e8>)
 80234f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80234f6:	2206      	movs	r2, #6
 80234f8:	f7dc fe6a 	bl	80001d0 <memchr>
 80234fc:	2800      	cmp	r0, #0
 80234fe:	d036      	beq.n	802356e <_svfiprintf_r+0x1d2>
 8023500:	4b21      	ldr	r3, [pc, #132]	@ (8023588 <_svfiprintf_r+0x1ec>)
 8023502:	bb1b      	cbnz	r3, 802354c <_svfiprintf_r+0x1b0>
 8023504:	9b03      	ldr	r3, [sp, #12]
 8023506:	3307      	adds	r3, #7
 8023508:	f023 0307 	bic.w	r3, r3, #7
 802350c:	3308      	adds	r3, #8
 802350e:	9303      	str	r3, [sp, #12]
 8023510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023512:	4433      	add	r3, r6
 8023514:	9309      	str	r3, [sp, #36]	@ 0x24
 8023516:	e76a      	b.n	80233ee <_svfiprintf_r+0x52>
 8023518:	fb0c 3202 	mla	r2, ip, r2, r3
 802351c:	460c      	mov	r4, r1
 802351e:	2001      	movs	r0, #1
 8023520:	e7a8      	b.n	8023474 <_svfiprintf_r+0xd8>
 8023522:	2300      	movs	r3, #0
 8023524:	3401      	adds	r4, #1
 8023526:	9305      	str	r3, [sp, #20]
 8023528:	4619      	mov	r1, r3
 802352a:	f04f 0c0a 	mov.w	ip, #10
 802352e:	4620      	mov	r0, r4
 8023530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023534:	3a30      	subs	r2, #48	@ 0x30
 8023536:	2a09      	cmp	r2, #9
 8023538:	d903      	bls.n	8023542 <_svfiprintf_r+0x1a6>
 802353a:	2b00      	cmp	r3, #0
 802353c:	d0c6      	beq.n	80234cc <_svfiprintf_r+0x130>
 802353e:	9105      	str	r1, [sp, #20]
 8023540:	e7c4      	b.n	80234cc <_svfiprintf_r+0x130>
 8023542:	fb0c 2101 	mla	r1, ip, r1, r2
 8023546:	4604      	mov	r4, r0
 8023548:	2301      	movs	r3, #1
 802354a:	e7f0      	b.n	802352e <_svfiprintf_r+0x192>
 802354c:	ab03      	add	r3, sp, #12
 802354e:	9300      	str	r3, [sp, #0]
 8023550:	462a      	mov	r2, r5
 8023552:	4b0e      	ldr	r3, [pc, #56]	@ (802358c <_svfiprintf_r+0x1f0>)
 8023554:	a904      	add	r1, sp, #16
 8023556:	4638      	mov	r0, r7
 8023558:	f7fd fc78 	bl	8020e4c <_printf_float>
 802355c:	1c42      	adds	r2, r0, #1
 802355e:	4606      	mov	r6, r0
 8023560:	d1d6      	bne.n	8023510 <_svfiprintf_r+0x174>
 8023562:	89ab      	ldrh	r3, [r5, #12]
 8023564:	065b      	lsls	r3, r3, #25
 8023566:	f53f af2d 	bmi.w	80233c4 <_svfiprintf_r+0x28>
 802356a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802356c:	e72c      	b.n	80233c8 <_svfiprintf_r+0x2c>
 802356e:	ab03      	add	r3, sp, #12
 8023570:	9300      	str	r3, [sp, #0]
 8023572:	462a      	mov	r2, r5
 8023574:	4b05      	ldr	r3, [pc, #20]	@ (802358c <_svfiprintf_r+0x1f0>)
 8023576:	a904      	add	r1, sp, #16
 8023578:	4638      	mov	r0, r7
 802357a:	f7fd feff 	bl	802137c <_printf_i>
 802357e:	e7ed      	b.n	802355c <_svfiprintf_r+0x1c0>
 8023580:	08025c46 	.word	0x08025c46
 8023584:	08025c50 	.word	0x08025c50
 8023588:	08020e4d 	.word	0x08020e4d
 802358c:	080232e5 	.word	0x080232e5
 8023590:	08025c4c 	.word	0x08025c4c

08023594 <__sfputc_r>:
 8023594:	6893      	ldr	r3, [r2, #8]
 8023596:	3b01      	subs	r3, #1
 8023598:	2b00      	cmp	r3, #0
 802359a:	b410      	push	{r4}
 802359c:	6093      	str	r3, [r2, #8]
 802359e:	da08      	bge.n	80235b2 <__sfputc_r+0x1e>
 80235a0:	6994      	ldr	r4, [r2, #24]
 80235a2:	42a3      	cmp	r3, r4
 80235a4:	db01      	blt.n	80235aa <__sfputc_r+0x16>
 80235a6:	290a      	cmp	r1, #10
 80235a8:	d103      	bne.n	80235b2 <__sfputc_r+0x1e>
 80235aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80235ae:	f7fe ba62 	b.w	8021a76 <__swbuf_r>
 80235b2:	6813      	ldr	r3, [r2, #0]
 80235b4:	1c58      	adds	r0, r3, #1
 80235b6:	6010      	str	r0, [r2, #0]
 80235b8:	7019      	strb	r1, [r3, #0]
 80235ba:	4608      	mov	r0, r1
 80235bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80235c0:	4770      	bx	lr

080235c2 <__sfputs_r>:
 80235c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80235c4:	4606      	mov	r6, r0
 80235c6:	460f      	mov	r7, r1
 80235c8:	4614      	mov	r4, r2
 80235ca:	18d5      	adds	r5, r2, r3
 80235cc:	42ac      	cmp	r4, r5
 80235ce:	d101      	bne.n	80235d4 <__sfputs_r+0x12>
 80235d0:	2000      	movs	r0, #0
 80235d2:	e007      	b.n	80235e4 <__sfputs_r+0x22>
 80235d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235d8:	463a      	mov	r2, r7
 80235da:	4630      	mov	r0, r6
 80235dc:	f7ff ffda 	bl	8023594 <__sfputc_r>
 80235e0:	1c43      	adds	r3, r0, #1
 80235e2:	d1f3      	bne.n	80235cc <__sfputs_r+0xa>
 80235e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080235e8 <_vfiprintf_r>:
 80235e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235ec:	460d      	mov	r5, r1
 80235ee:	b09d      	sub	sp, #116	@ 0x74
 80235f0:	4614      	mov	r4, r2
 80235f2:	4698      	mov	r8, r3
 80235f4:	4606      	mov	r6, r0
 80235f6:	b118      	cbz	r0, 8023600 <_vfiprintf_r+0x18>
 80235f8:	6a03      	ldr	r3, [r0, #32]
 80235fa:	b90b      	cbnz	r3, 8023600 <_vfiprintf_r+0x18>
 80235fc:	f7fe f928 	bl	8021850 <__sinit>
 8023600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023602:	07d9      	lsls	r1, r3, #31
 8023604:	d405      	bmi.n	8023612 <_vfiprintf_r+0x2a>
 8023606:	89ab      	ldrh	r3, [r5, #12]
 8023608:	059a      	lsls	r2, r3, #22
 802360a:	d402      	bmi.n	8023612 <_vfiprintf_r+0x2a>
 802360c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802360e:	f7fe fb84 	bl	8021d1a <__retarget_lock_acquire_recursive>
 8023612:	89ab      	ldrh	r3, [r5, #12]
 8023614:	071b      	lsls	r3, r3, #28
 8023616:	d501      	bpl.n	802361c <_vfiprintf_r+0x34>
 8023618:	692b      	ldr	r3, [r5, #16]
 802361a:	b99b      	cbnz	r3, 8023644 <_vfiprintf_r+0x5c>
 802361c:	4629      	mov	r1, r5
 802361e:	4630      	mov	r0, r6
 8023620:	f7fe fa68 	bl	8021af4 <__swsetup_r>
 8023624:	b170      	cbz	r0, 8023644 <_vfiprintf_r+0x5c>
 8023626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023628:	07dc      	lsls	r4, r3, #31
 802362a:	d504      	bpl.n	8023636 <_vfiprintf_r+0x4e>
 802362c:	f04f 30ff 	mov.w	r0, #4294967295
 8023630:	b01d      	add	sp, #116	@ 0x74
 8023632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023636:	89ab      	ldrh	r3, [r5, #12]
 8023638:	0598      	lsls	r0, r3, #22
 802363a:	d4f7      	bmi.n	802362c <_vfiprintf_r+0x44>
 802363c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802363e:	f7fe fb6d 	bl	8021d1c <__retarget_lock_release_recursive>
 8023642:	e7f3      	b.n	802362c <_vfiprintf_r+0x44>
 8023644:	2300      	movs	r3, #0
 8023646:	9309      	str	r3, [sp, #36]	@ 0x24
 8023648:	2320      	movs	r3, #32
 802364a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802364e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023652:	2330      	movs	r3, #48	@ 0x30
 8023654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023804 <_vfiprintf_r+0x21c>
 8023658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802365c:	f04f 0901 	mov.w	r9, #1
 8023660:	4623      	mov	r3, r4
 8023662:	469a      	mov	sl, r3
 8023664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023668:	b10a      	cbz	r2, 802366e <_vfiprintf_r+0x86>
 802366a:	2a25      	cmp	r2, #37	@ 0x25
 802366c:	d1f9      	bne.n	8023662 <_vfiprintf_r+0x7a>
 802366e:	ebba 0b04 	subs.w	fp, sl, r4
 8023672:	d00b      	beq.n	802368c <_vfiprintf_r+0xa4>
 8023674:	465b      	mov	r3, fp
 8023676:	4622      	mov	r2, r4
 8023678:	4629      	mov	r1, r5
 802367a:	4630      	mov	r0, r6
 802367c:	f7ff ffa1 	bl	80235c2 <__sfputs_r>
 8023680:	3001      	adds	r0, #1
 8023682:	f000 80a7 	beq.w	80237d4 <_vfiprintf_r+0x1ec>
 8023686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023688:	445a      	add	r2, fp
 802368a:	9209      	str	r2, [sp, #36]	@ 0x24
 802368c:	f89a 3000 	ldrb.w	r3, [sl]
 8023690:	2b00      	cmp	r3, #0
 8023692:	f000 809f 	beq.w	80237d4 <_vfiprintf_r+0x1ec>
 8023696:	2300      	movs	r3, #0
 8023698:	f04f 32ff 	mov.w	r2, #4294967295
 802369c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80236a0:	f10a 0a01 	add.w	sl, sl, #1
 80236a4:	9304      	str	r3, [sp, #16]
 80236a6:	9307      	str	r3, [sp, #28]
 80236a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80236ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80236ae:	4654      	mov	r4, sl
 80236b0:	2205      	movs	r2, #5
 80236b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236b6:	4853      	ldr	r0, [pc, #332]	@ (8023804 <_vfiprintf_r+0x21c>)
 80236b8:	f7dc fd8a 	bl	80001d0 <memchr>
 80236bc:	9a04      	ldr	r2, [sp, #16]
 80236be:	b9d8      	cbnz	r0, 80236f8 <_vfiprintf_r+0x110>
 80236c0:	06d1      	lsls	r1, r2, #27
 80236c2:	bf44      	itt	mi
 80236c4:	2320      	movmi	r3, #32
 80236c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80236ca:	0713      	lsls	r3, r2, #28
 80236cc:	bf44      	itt	mi
 80236ce:	232b      	movmi	r3, #43	@ 0x2b
 80236d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80236d4:	f89a 3000 	ldrb.w	r3, [sl]
 80236d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80236da:	d015      	beq.n	8023708 <_vfiprintf_r+0x120>
 80236dc:	9a07      	ldr	r2, [sp, #28]
 80236de:	4654      	mov	r4, sl
 80236e0:	2000      	movs	r0, #0
 80236e2:	f04f 0c0a 	mov.w	ip, #10
 80236e6:	4621      	mov	r1, r4
 80236e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80236ec:	3b30      	subs	r3, #48	@ 0x30
 80236ee:	2b09      	cmp	r3, #9
 80236f0:	d94b      	bls.n	802378a <_vfiprintf_r+0x1a2>
 80236f2:	b1b0      	cbz	r0, 8023722 <_vfiprintf_r+0x13a>
 80236f4:	9207      	str	r2, [sp, #28]
 80236f6:	e014      	b.n	8023722 <_vfiprintf_r+0x13a>
 80236f8:	eba0 0308 	sub.w	r3, r0, r8
 80236fc:	fa09 f303 	lsl.w	r3, r9, r3
 8023700:	4313      	orrs	r3, r2
 8023702:	9304      	str	r3, [sp, #16]
 8023704:	46a2      	mov	sl, r4
 8023706:	e7d2      	b.n	80236ae <_vfiprintf_r+0xc6>
 8023708:	9b03      	ldr	r3, [sp, #12]
 802370a:	1d19      	adds	r1, r3, #4
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	9103      	str	r1, [sp, #12]
 8023710:	2b00      	cmp	r3, #0
 8023712:	bfbb      	ittet	lt
 8023714:	425b      	neglt	r3, r3
 8023716:	f042 0202 	orrlt.w	r2, r2, #2
 802371a:	9307      	strge	r3, [sp, #28]
 802371c:	9307      	strlt	r3, [sp, #28]
 802371e:	bfb8      	it	lt
 8023720:	9204      	strlt	r2, [sp, #16]
 8023722:	7823      	ldrb	r3, [r4, #0]
 8023724:	2b2e      	cmp	r3, #46	@ 0x2e
 8023726:	d10a      	bne.n	802373e <_vfiprintf_r+0x156>
 8023728:	7863      	ldrb	r3, [r4, #1]
 802372a:	2b2a      	cmp	r3, #42	@ 0x2a
 802372c:	d132      	bne.n	8023794 <_vfiprintf_r+0x1ac>
 802372e:	9b03      	ldr	r3, [sp, #12]
 8023730:	1d1a      	adds	r2, r3, #4
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	9203      	str	r2, [sp, #12]
 8023736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802373a:	3402      	adds	r4, #2
 802373c:	9305      	str	r3, [sp, #20]
 802373e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023814 <_vfiprintf_r+0x22c>
 8023742:	7821      	ldrb	r1, [r4, #0]
 8023744:	2203      	movs	r2, #3
 8023746:	4650      	mov	r0, sl
 8023748:	f7dc fd42 	bl	80001d0 <memchr>
 802374c:	b138      	cbz	r0, 802375e <_vfiprintf_r+0x176>
 802374e:	9b04      	ldr	r3, [sp, #16]
 8023750:	eba0 000a 	sub.w	r0, r0, sl
 8023754:	2240      	movs	r2, #64	@ 0x40
 8023756:	4082      	lsls	r2, r0
 8023758:	4313      	orrs	r3, r2
 802375a:	3401      	adds	r4, #1
 802375c:	9304      	str	r3, [sp, #16]
 802375e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023762:	4829      	ldr	r0, [pc, #164]	@ (8023808 <_vfiprintf_r+0x220>)
 8023764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023768:	2206      	movs	r2, #6
 802376a:	f7dc fd31 	bl	80001d0 <memchr>
 802376e:	2800      	cmp	r0, #0
 8023770:	d03f      	beq.n	80237f2 <_vfiprintf_r+0x20a>
 8023772:	4b26      	ldr	r3, [pc, #152]	@ (802380c <_vfiprintf_r+0x224>)
 8023774:	bb1b      	cbnz	r3, 80237be <_vfiprintf_r+0x1d6>
 8023776:	9b03      	ldr	r3, [sp, #12]
 8023778:	3307      	adds	r3, #7
 802377a:	f023 0307 	bic.w	r3, r3, #7
 802377e:	3308      	adds	r3, #8
 8023780:	9303      	str	r3, [sp, #12]
 8023782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023784:	443b      	add	r3, r7
 8023786:	9309      	str	r3, [sp, #36]	@ 0x24
 8023788:	e76a      	b.n	8023660 <_vfiprintf_r+0x78>
 802378a:	fb0c 3202 	mla	r2, ip, r2, r3
 802378e:	460c      	mov	r4, r1
 8023790:	2001      	movs	r0, #1
 8023792:	e7a8      	b.n	80236e6 <_vfiprintf_r+0xfe>
 8023794:	2300      	movs	r3, #0
 8023796:	3401      	adds	r4, #1
 8023798:	9305      	str	r3, [sp, #20]
 802379a:	4619      	mov	r1, r3
 802379c:	f04f 0c0a 	mov.w	ip, #10
 80237a0:	4620      	mov	r0, r4
 80237a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80237a6:	3a30      	subs	r2, #48	@ 0x30
 80237a8:	2a09      	cmp	r2, #9
 80237aa:	d903      	bls.n	80237b4 <_vfiprintf_r+0x1cc>
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d0c6      	beq.n	802373e <_vfiprintf_r+0x156>
 80237b0:	9105      	str	r1, [sp, #20]
 80237b2:	e7c4      	b.n	802373e <_vfiprintf_r+0x156>
 80237b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80237b8:	4604      	mov	r4, r0
 80237ba:	2301      	movs	r3, #1
 80237bc:	e7f0      	b.n	80237a0 <_vfiprintf_r+0x1b8>
 80237be:	ab03      	add	r3, sp, #12
 80237c0:	9300      	str	r3, [sp, #0]
 80237c2:	462a      	mov	r2, r5
 80237c4:	4b12      	ldr	r3, [pc, #72]	@ (8023810 <_vfiprintf_r+0x228>)
 80237c6:	a904      	add	r1, sp, #16
 80237c8:	4630      	mov	r0, r6
 80237ca:	f7fd fb3f 	bl	8020e4c <_printf_float>
 80237ce:	4607      	mov	r7, r0
 80237d0:	1c78      	adds	r0, r7, #1
 80237d2:	d1d6      	bne.n	8023782 <_vfiprintf_r+0x19a>
 80237d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80237d6:	07d9      	lsls	r1, r3, #31
 80237d8:	d405      	bmi.n	80237e6 <_vfiprintf_r+0x1fe>
 80237da:	89ab      	ldrh	r3, [r5, #12]
 80237dc:	059a      	lsls	r2, r3, #22
 80237de:	d402      	bmi.n	80237e6 <_vfiprintf_r+0x1fe>
 80237e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80237e2:	f7fe fa9b 	bl	8021d1c <__retarget_lock_release_recursive>
 80237e6:	89ab      	ldrh	r3, [r5, #12]
 80237e8:	065b      	lsls	r3, r3, #25
 80237ea:	f53f af1f 	bmi.w	802362c <_vfiprintf_r+0x44>
 80237ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80237f0:	e71e      	b.n	8023630 <_vfiprintf_r+0x48>
 80237f2:	ab03      	add	r3, sp, #12
 80237f4:	9300      	str	r3, [sp, #0]
 80237f6:	462a      	mov	r2, r5
 80237f8:	4b05      	ldr	r3, [pc, #20]	@ (8023810 <_vfiprintf_r+0x228>)
 80237fa:	a904      	add	r1, sp, #16
 80237fc:	4630      	mov	r0, r6
 80237fe:	f7fd fdbd 	bl	802137c <_printf_i>
 8023802:	e7e4      	b.n	80237ce <_vfiprintf_r+0x1e6>
 8023804:	08025c46 	.word	0x08025c46
 8023808:	08025c50 	.word	0x08025c50
 802380c:	08020e4d 	.word	0x08020e4d
 8023810:	080235c3 	.word	0x080235c3
 8023814:	08025c4c 	.word	0x08025c4c

08023818 <__swhatbuf_r>:
 8023818:	b570      	push	{r4, r5, r6, lr}
 802381a:	460c      	mov	r4, r1
 802381c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023820:	2900      	cmp	r1, #0
 8023822:	b096      	sub	sp, #88	@ 0x58
 8023824:	4615      	mov	r5, r2
 8023826:	461e      	mov	r6, r3
 8023828:	da0d      	bge.n	8023846 <__swhatbuf_r+0x2e>
 802382a:	89a3      	ldrh	r3, [r4, #12]
 802382c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023830:	f04f 0100 	mov.w	r1, #0
 8023834:	bf14      	ite	ne
 8023836:	2340      	movne	r3, #64	@ 0x40
 8023838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802383c:	2000      	movs	r0, #0
 802383e:	6031      	str	r1, [r6, #0]
 8023840:	602b      	str	r3, [r5, #0]
 8023842:	b016      	add	sp, #88	@ 0x58
 8023844:	bd70      	pop	{r4, r5, r6, pc}
 8023846:	466a      	mov	r2, sp
 8023848:	f000 f87c 	bl	8023944 <_fstat_r>
 802384c:	2800      	cmp	r0, #0
 802384e:	dbec      	blt.n	802382a <__swhatbuf_r+0x12>
 8023850:	9901      	ldr	r1, [sp, #4]
 8023852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802385a:	4259      	negs	r1, r3
 802385c:	4159      	adcs	r1, r3
 802385e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023862:	e7eb      	b.n	802383c <__swhatbuf_r+0x24>

08023864 <__smakebuf_r>:
 8023864:	898b      	ldrh	r3, [r1, #12]
 8023866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023868:	079d      	lsls	r5, r3, #30
 802386a:	4606      	mov	r6, r0
 802386c:	460c      	mov	r4, r1
 802386e:	d507      	bpl.n	8023880 <__smakebuf_r+0x1c>
 8023870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023874:	6023      	str	r3, [r4, #0]
 8023876:	6123      	str	r3, [r4, #16]
 8023878:	2301      	movs	r3, #1
 802387a:	6163      	str	r3, [r4, #20]
 802387c:	b003      	add	sp, #12
 802387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023880:	ab01      	add	r3, sp, #4
 8023882:	466a      	mov	r2, sp
 8023884:	f7ff ffc8 	bl	8023818 <__swhatbuf_r>
 8023888:	9f00      	ldr	r7, [sp, #0]
 802388a:	4605      	mov	r5, r0
 802388c:	4639      	mov	r1, r7
 802388e:	4630      	mov	r0, r6
 8023890:	f7ff f922 	bl	8022ad8 <_malloc_r>
 8023894:	b948      	cbnz	r0, 80238aa <__smakebuf_r+0x46>
 8023896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802389a:	059a      	lsls	r2, r3, #22
 802389c:	d4ee      	bmi.n	802387c <__smakebuf_r+0x18>
 802389e:	f023 0303 	bic.w	r3, r3, #3
 80238a2:	f043 0302 	orr.w	r3, r3, #2
 80238a6:	81a3      	strh	r3, [r4, #12]
 80238a8:	e7e2      	b.n	8023870 <__smakebuf_r+0xc>
 80238aa:	89a3      	ldrh	r3, [r4, #12]
 80238ac:	6020      	str	r0, [r4, #0]
 80238ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80238b2:	81a3      	strh	r3, [r4, #12]
 80238b4:	9b01      	ldr	r3, [sp, #4]
 80238b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80238ba:	b15b      	cbz	r3, 80238d4 <__smakebuf_r+0x70>
 80238bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238c0:	4630      	mov	r0, r6
 80238c2:	f000 f851 	bl	8023968 <_isatty_r>
 80238c6:	b128      	cbz	r0, 80238d4 <__smakebuf_r+0x70>
 80238c8:	89a3      	ldrh	r3, [r4, #12]
 80238ca:	f023 0303 	bic.w	r3, r3, #3
 80238ce:	f043 0301 	orr.w	r3, r3, #1
 80238d2:	81a3      	strh	r3, [r4, #12]
 80238d4:	89a3      	ldrh	r3, [r4, #12]
 80238d6:	431d      	orrs	r5, r3
 80238d8:	81a5      	strh	r5, [r4, #12]
 80238da:	e7cf      	b.n	802387c <__smakebuf_r+0x18>

080238dc <_putc_r>:
 80238dc:	b570      	push	{r4, r5, r6, lr}
 80238de:	460d      	mov	r5, r1
 80238e0:	4614      	mov	r4, r2
 80238e2:	4606      	mov	r6, r0
 80238e4:	b118      	cbz	r0, 80238ee <_putc_r+0x12>
 80238e6:	6a03      	ldr	r3, [r0, #32]
 80238e8:	b90b      	cbnz	r3, 80238ee <_putc_r+0x12>
 80238ea:	f7fd ffb1 	bl	8021850 <__sinit>
 80238ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80238f0:	07d8      	lsls	r0, r3, #31
 80238f2:	d405      	bmi.n	8023900 <_putc_r+0x24>
 80238f4:	89a3      	ldrh	r3, [r4, #12]
 80238f6:	0599      	lsls	r1, r3, #22
 80238f8:	d402      	bmi.n	8023900 <_putc_r+0x24>
 80238fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80238fc:	f7fe fa0d 	bl	8021d1a <__retarget_lock_acquire_recursive>
 8023900:	68a3      	ldr	r3, [r4, #8]
 8023902:	3b01      	subs	r3, #1
 8023904:	2b00      	cmp	r3, #0
 8023906:	60a3      	str	r3, [r4, #8]
 8023908:	da05      	bge.n	8023916 <_putc_r+0x3a>
 802390a:	69a2      	ldr	r2, [r4, #24]
 802390c:	4293      	cmp	r3, r2
 802390e:	db12      	blt.n	8023936 <_putc_r+0x5a>
 8023910:	b2eb      	uxtb	r3, r5
 8023912:	2b0a      	cmp	r3, #10
 8023914:	d00f      	beq.n	8023936 <_putc_r+0x5a>
 8023916:	6823      	ldr	r3, [r4, #0]
 8023918:	1c5a      	adds	r2, r3, #1
 802391a:	6022      	str	r2, [r4, #0]
 802391c:	701d      	strb	r5, [r3, #0]
 802391e:	b2ed      	uxtb	r5, r5
 8023920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023922:	07da      	lsls	r2, r3, #31
 8023924:	d405      	bmi.n	8023932 <_putc_r+0x56>
 8023926:	89a3      	ldrh	r3, [r4, #12]
 8023928:	059b      	lsls	r3, r3, #22
 802392a:	d402      	bmi.n	8023932 <_putc_r+0x56>
 802392c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802392e:	f7fe f9f5 	bl	8021d1c <__retarget_lock_release_recursive>
 8023932:	4628      	mov	r0, r5
 8023934:	bd70      	pop	{r4, r5, r6, pc}
 8023936:	4629      	mov	r1, r5
 8023938:	4622      	mov	r2, r4
 802393a:	4630      	mov	r0, r6
 802393c:	f7fe f89b 	bl	8021a76 <__swbuf_r>
 8023940:	4605      	mov	r5, r0
 8023942:	e7ed      	b.n	8023920 <_putc_r+0x44>

08023944 <_fstat_r>:
 8023944:	b538      	push	{r3, r4, r5, lr}
 8023946:	4d07      	ldr	r5, [pc, #28]	@ (8023964 <_fstat_r+0x20>)
 8023948:	2300      	movs	r3, #0
 802394a:	4604      	mov	r4, r0
 802394c:	4608      	mov	r0, r1
 802394e:	4611      	mov	r1, r2
 8023950:	602b      	str	r3, [r5, #0]
 8023952:	f7dd fd6d 	bl	8001430 <_fstat>
 8023956:	1c43      	adds	r3, r0, #1
 8023958:	d102      	bne.n	8023960 <_fstat_r+0x1c>
 802395a:	682b      	ldr	r3, [r5, #0]
 802395c:	b103      	cbz	r3, 8023960 <_fstat_r+0x1c>
 802395e:	6023      	str	r3, [r4, #0]
 8023960:	bd38      	pop	{r3, r4, r5, pc}
 8023962:	bf00      	nop
 8023964:	20001d44 	.word	0x20001d44

08023968 <_isatty_r>:
 8023968:	b538      	push	{r3, r4, r5, lr}
 802396a:	4d06      	ldr	r5, [pc, #24]	@ (8023984 <_isatty_r+0x1c>)
 802396c:	2300      	movs	r3, #0
 802396e:	4604      	mov	r4, r0
 8023970:	4608      	mov	r0, r1
 8023972:	602b      	str	r3, [r5, #0]
 8023974:	f7dd fd6c 	bl	8001450 <_isatty>
 8023978:	1c43      	adds	r3, r0, #1
 802397a:	d102      	bne.n	8023982 <_isatty_r+0x1a>
 802397c:	682b      	ldr	r3, [r5, #0]
 802397e:	b103      	cbz	r3, 8023982 <_isatty_r+0x1a>
 8023980:	6023      	str	r3, [r4, #0]
 8023982:	bd38      	pop	{r3, r4, r5, pc}
 8023984:	20001d44 	.word	0x20001d44

08023988 <_sbrk_r>:
 8023988:	b538      	push	{r3, r4, r5, lr}
 802398a:	4d06      	ldr	r5, [pc, #24]	@ (80239a4 <_sbrk_r+0x1c>)
 802398c:	2300      	movs	r3, #0
 802398e:	4604      	mov	r4, r0
 8023990:	4608      	mov	r0, r1
 8023992:	602b      	str	r3, [r5, #0]
 8023994:	f7dd fd74 	bl	8001480 <_sbrk>
 8023998:	1c43      	adds	r3, r0, #1
 802399a:	d102      	bne.n	80239a2 <_sbrk_r+0x1a>
 802399c:	682b      	ldr	r3, [r5, #0]
 802399e:	b103      	cbz	r3, 80239a2 <_sbrk_r+0x1a>
 80239a0:	6023      	str	r3, [r4, #0]
 80239a2:	bd38      	pop	{r3, r4, r5, pc}
 80239a4:	20001d44 	.word	0x20001d44

080239a8 <__assert_func>:
 80239a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80239aa:	4614      	mov	r4, r2
 80239ac:	461a      	mov	r2, r3
 80239ae:	4b09      	ldr	r3, [pc, #36]	@ (80239d4 <__assert_func+0x2c>)
 80239b0:	681b      	ldr	r3, [r3, #0]
 80239b2:	4605      	mov	r5, r0
 80239b4:	68d8      	ldr	r0, [r3, #12]
 80239b6:	b14c      	cbz	r4, 80239cc <__assert_func+0x24>
 80239b8:	4b07      	ldr	r3, [pc, #28]	@ (80239d8 <__assert_func+0x30>)
 80239ba:	9100      	str	r1, [sp, #0]
 80239bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80239c0:	4906      	ldr	r1, [pc, #24]	@ (80239dc <__assert_func+0x34>)
 80239c2:	462b      	mov	r3, r5
 80239c4:	f000 f870 	bl	8023aa8 <fiprintf>
 80239c8:	f000 f880 	bl	8023acc <abort>
 80239cc:	4b04      	ldr	r3, [pc, #16]	@ (80239e0 <__assert_func+0x38>)
 80239ce:	461c      	mov	r4, r3
 80239d0:	e7f3      	b.n	80239ba <__assert_func+0x12>
 80239d2:	bf00      	nop
 80239d4:	20000084 	.word	0x20000084
 80239d8:	08025c61 	.word	0x08025c61
 80239dc:	08025c6e 	.word	0x08025c6e
 80239e0:	08025c9c 	.word	0x08025c9c

080239e4 <_calloc_r>:
 80239e4:	b570      	push	{r4, r5, r6, lr}
 80239e6:	fba1 5402 	umull	r5, r4, r1, r2
 80239ea:	b934      	cbnz	r4, 80239fa <_calloc_r+0x16>
 80239ec:	4629      	mov	r1, r5
 80239ee:	f7ff f873 	bl	8022ad8 <_malloc_r>
 80239f2:	4606      	mov	r6, r0
 80239f4:	b928      	cbnz	r0, 8023a02 <_calloc_r+0x1e>
 80239f6:	4630      	mov	r0, r6
 80239f8:	bd70      	pop	{r4, r5, r6, pc}
 80239fa:	220c      	movs	r2, #12
 80239fc:	6002      	str	r2, [r0, #0]
 80239fe:	2600      	movs	r6, #0
 8023a00:	e7f9      	b.n	80239f6 <_calloc_r+0x12>
 8023a02:	462a      	mov	r2, r5
 8023a04:	4621      	mov	r1, r4
 8023a06:	f7fe f8f5 	bl	8021bf4 <memset>
 8023a0a:	e7f4      	b.n	80239f6 <_calloc_r+0x12>

08023a0c <__ascii_mbtowc>:
 8023a0c:	b082      	sub	sp, #8
 8023a0e:	b901      	cbnz	r1, 8023a12 <__ascii_mbtowc+0x6>
 8023a10:	a901      	add	r1, sp, #4
 8023a12:	b142      	cbz	r2, 8023a26 <__ascii_mbtowc+0x1a>
 8023a14:	b14b      	cbz	r3, 8023a2a <__ascii_mbtowc+0x1e>
 8023a16:	7813      	ldrb	r3, [r2, #0]
 8023a18:	600b      	str	r3, [r1, #0]
 8023a1a:	7812      	ldrb	r2, [r2, #0]
 8023a1c:	1e10      	subs	r0, r2, #0
 8023a1e:	bf18      	it	ne
 8023a20:	2001      	movne	r0, #1
 8023a22:	b002      	add	sp, #8
 8023a24:	4770      	bx	lr
 8023a26:	4610      	mov	r0, r2
 8023a28:	e7fb      	b.n	8023a22 <__ascii_mbtowc+0x16>
 8023a2a:	f06f 0001 	mvn.w	r0, #1
 8023a2e:	e7f8      	b.n	8023a22 <__ascii_mbtowc+0x16>

08023a30 <_realloc_r>:
 8023a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a34:	4607      	mov	r7, r0
 8023a36:	4614      	mov	r4, r2
 8023a38:	460d      	mov	r5, r1
 8023a3a:	b921      	cbnz	r1, 8023a46 <_realloc_r+0x16>
 8023a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a40:	4611      	mov	r1, r2
 8023a42:	f7ff b849 	b.w	8022ad8 <_malloc_r>
 8023a46:	b92a      	cbnz	r2, 8023a54 <_realloc_r+0x24>
 8023a48:	f7fe ffd2 	bl	80229f0 <_free_r>
 8023a4c:	4625      	mov	r5, r4
 8023a4e:	4628      	mov	r0, r5
 8023a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a54:	f000 f841 	bl	8023ada <_malloc_usable_size_r>
 8023a58:	4284      	cmp	r4, r0
 8023a5a:	4606      	mov	r6, r0
 8023a5c:	d802      	bhi.n	8023a64 <_realloc_r+0x34>
 8023a5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023a62:	d8f4      	bhi.n	8023a4e <_realloc_r+0x1e>
 8023a64:	4621      	mov	r1, r4
 8023a66:	4638      	mov	r0, r7
 8023a68:	f7ff f836 	bl	8022ad8 <_malloc_r>
 8023a6c:	4680      	mov	r8, r0
 8023a6e:	b908      	cbnz	r0, 8023a74 <_realloc_r+0x44>
 8023a70:	4645      	mov	r5, r8
 8023a72:	e7ec      	b.n	8023a4e <_realloc_r+0x1e>
 8023a74:	42b4      	cmp	r4, r6
 8023a76:	4622      	mov	r2, r4
 8023a78:	4629      	mov	r1, r5
 8023a7a:	bf28      	it	cs
 8023a7c:	4632      	movcs	r2, r6
 8023a7e:	f7fe f94e 	bl	8021d1e <memcpy>
 8023a82:	4629      	mov	r1, r5
 8023a84:	4638      	mov	r0, r7
 8023a86:	f7fe ffb3 	bl	80229f0 <_free_r>
 8023a8a:	e7f1      	b.n	8023a70 <_realloc_r+0x40>

08023a8c <__ascii_wctomb>:
 8023a8c:	4603      	mov	r3, r0
 8023a8e:	4608      	mov	r0, r1
 8023a90:	b141      	cbz	r1, 8023aa4 <__ascii_wctomb+0x18>
 8023a92:	2aff      	cmp	r2, #255	@ 0xff
 8023a94:	d904      	bls.n	8023aa0 <__ascii_wctomb+0x14>
 8023a96:	228a      	movs	r2, #138	@ 0x8a
 8023a98:	601a      	str	r2, [r3, #0]
 8023a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8023a9e:	4770      	bx	lr
 8023aa0:	700a      	strb	r2, [r1, #0]
 8023aa2:	2001      	movs	r0, #1
 8023aa4:	4770      	bx	lr
	...

08023aa8 <fiprintf>:
 8023aa8:	b40e      	push	{r1, r2, r3}
 8023aaa:	b503      	push	{r0, r1, lr}
 8023aac:	4601      	mov	r1, r0
 8023aae:	ab03      	add	r3, sp, #12
 8023ab0:	4805      	ldr	r0, [pc, #20]	@ (8023ac8 <fiprintf+0x20>)
 8023ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8023ab6:	6800      	ldr	r0, [r0, #0]
 8023ab8:	9301      	str	r3, [sp, #4]
 8023aba:	f7ff fd95 	bl	80235e8 <_vfiprintf_r>
 8023abe:	b002      	add	sp, #8
 8023ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ac4:	b003      	add	sp, #12
 8023ac6:	4770      	bx	lr
 8023ac8:	20000084 	.word	0x20000084

08023acc <abort>:
 8023acc:	b508      	push	{r3, lr}
 8023ace:	2006      	movs	r0, #6
 8023ad0:	f000 f834 	bl	8023b3c <raise>
 8023ad4:	2001      	movs	r0, #1
 8023ad6:	f7dd fc5b 	bl	8001390 <_exit>

08023ada <_malloc_usable_size_r>:
 8023ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ade:	1f18      	subs	r0, r3, #4
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	bfbc      	itt	lt
 8023ae4:	580b      	ldrlt	r3, [r1, r0]
 8023ae6:	18c0      	addlt	r0, r0, r3
 8023ae8:	4770      	bx	lr

08023aea <_raise_r>:
 8023aea:	291f      	cmp	r1, #31
 8023aec:	b538      	push	{r3, r4, r5, lr}
 8023aee:	4605      	mov	r5, r0
 8023af0:	460c      	mov	r4, r1
 8023af2:	d904      	bls.n	8023afe <_raise_r+0x14>
 8023af4:	2316      	movs	r3, #22
 8023af6:	6003      	str	r3, [r0, #0]
 8023af8:	f04f 30ff 	mov.w	r0, #4294967295
 8023afc:	bd38      	pop	{r3, r4, r5, pc}
 8023afe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023b00:	b112      	cbz	r2, 8023b08 <_raise_r+0x1e>
 8023b02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023b06:	b94b      	cbnz	r3, 8023b1c <_raise_r+0x32>
 8023b08:	4628      	mov	r0, r5
 8023b0a:	f000 f831 	bl	8023b70 <_getpid_r>
 8023b0e:	4622      	mov	r2, r4
 8023b10:	4601      	mov	r1, r0
 8023b12:	4628      	mov	r0, r5
 8023b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023b18:	f000 b818 	b.w	8023b4c <_kill_r>
 8023b1c:	2b01      	cmp	r3, #1
 8023b1e:	d00a      	beq.n	8023b36 <_raise_r+0x4c>
 8023b20:	1c59      	adds	r1, r3, #1
 8023b22:	d103      	bne.n	8023b2c <_raise_r+0x42>
 8023b24:	2316      	movs	r3, #22
 8023b26:	6003      	str	r3, [r0, #0]
 8023b28:	2001      	movs	r0, #1
 8023b2a:	e7e7      	b.n	8023afc <_raise_r+0x12>
 8023b2c:	2100      	movs	r1, #0
 8023b2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023b32:	4620      	mov	r0, r4
 8023b34:	4798      	blx	r3
 8023b36:	2000      	movs	r0, #0
 8023b38:	e7e0      	b.n	8023afc <_raise_r+0x12>
	...

08023b3c <raise>:
 8023b3c:	4b02      	ldr	r3, [pc, #8]	@ (8023b48 <raise+0xc>)
 8023b3e:	4601      	mov	r1, r0
 8023b40:	6818      	ldr	r0, [r3, #0]
 8023b42:	f7ff bfd2 	b.w	8023aea <_raise_r>
 8023b46:	bf00      	nop
 8023b48:	20000084 	.word	0x20000084

08023b4c <_kill_r>:
 8023b4c:	b538      	push	{r3, r4, r5, lr}
 8023b4e:	4d07      	ldr	r5, [pc, #28]	@ (8023b6c <_kill_r+0x20>)
 8023b50:	2300      	movs	r3, #0
 8023b52:	4604      	mov	r4, r0
 8023b54:	4608      	mov	r0, r1
 8023b56:	4611      	mov	r1, r2
 8023b58:	602b      	str	r3, [r5, #0]
 8023b5a:	f7dd fc09 	bl	8001370 <_kill>
 8023b5e:	1c43      	adds	r3, r0, #1
 8023b60:	d102      	bne.n	8023b68 <_kill_r+0x1c>
 8023b62:	682b      	ldr	r3, [r5, #0]
 8023b64:	b103      	cbz	r3, 8023b68 <_kill_r+0x1c>
 8023b66:	6023      	str	r3, [r4, #0]
 8023b68:	bd38      	pop	{r3, r4, r5, pc}
 8023b6a:	bf00      	nop
 8023b6c:	20001d44 	.word	0x20001d44

08023b70 <_getpid_r>:
 8023b70:	f7dd bbf6 	b.w	8001360 <_getpid>

08023b74 <_init>:
 8023b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b76:	bf00      	nop
 8023b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b7a:	bc08      	pop	{r3}
 8023b7c:	469e      	mov	lr, r3
 8023b7e:	4770      	bx	lr

08023b80 <_fini>:
 8023b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b82:	bf00      	nop
 8023b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b86:	bc08      	pop	{r3}
 8023b88:	469e      	mov	lr, r3
 8023b8a:	4770      	bx	lr
