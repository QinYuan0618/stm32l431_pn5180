
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001efd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019bc  0801f160  0801f160  00020160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020b1c  08020b1c  000221e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020b1c  08020b1c  00021b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020b24  08020b24  000221e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020b24  08020b24  00021b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020b28  08020b28  00021b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08020b2c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001724  200001e8  08020d14  000221e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  08020d14  0002290c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000492e3  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009549  00000000  00000000  0006b4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003028  00000000  00000000  00074a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002536  00000000  00000000  00077a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036d8d  00000000  00000000  00079fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00058812  00000000  00000000  000b0d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001187c0  00000000  00000000  00109545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00221d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d710  00000000  00000000  00221d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0022f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f148 	.word	0x0801f148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801f148 	.word	0x0801f148

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a50      	ldr	r2, [pc, #320]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b48      	ldr	r3, [pc, #288]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b45      	ldr	r3, [pc, #276]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a44      	ldr	r2, [pc, #272]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b42      	ldr	r3, [pc, #264]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a3e      	ldr	r2, [pc, #248]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b3c      	ldr	r3, [pc, #240]	@ (80010d0 <MX_GPIO_Init+0x15c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_DWL_GPIO_Port, PN5180_DWL_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2108      	movs	r1, #8
 8000fee:	4839      	ldr	r0, [pc, #228]	@ (80010d4 <MX_GPIO_Init+0x160>)
 8000ff0:	f016 ff2e 	bl	8017e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f016 ff27 	bl	8017e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2120      	movs	r1, #32
 8001006:	4834      	ldr	r0, [pc, #208]	@ (80010d8 <MX_GPIO_Init+0x164>)
 8001008:	f016 ff22 	bl	8017e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_DWL_Pin */
  GPIO_InitStruct.Pin = PN5180_DWL_Pin;
 800100c:	2308      	movs	r3, #8
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_DWL_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	482c      	ldr	r0, [pc, #176]	@ (80010d4 <MX_GPIO_Init+0x160>)
 8001024:	f016 fd82 	bl	8017b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 8001028:	2302      	movs	r3, #2
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f016 fd75 	bl	8017b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 8001042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f016 fd65 	bl	8017b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_IRQ_Pin */
  GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 8001062:	2310      	movs	r3, #16
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001066:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4818      	ldr	r0, [pc, #96]	@ (80010d8 <MX_GPIO_Init+0x164>)
 8001078:	f016 fd58 	bl	8017b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 800107c:	2320      	movs	r3, #32
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <MX_GPIO_Init+0x164>)
 8001094:	f016 fd4a 	bl	8017b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001098:	23c0      	movs	r3, #192	@ 0xc0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a8:	2304      	movs	r3, #4
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <MX_GPIO_Init+0x164>)
 80010b4:	f016 fd3a 	bl	8017b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2105      	movs	r1, #5
 80010bc:	200a      	movs	r0, #10
 80010be:	f016 fc80 	bl	80179c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f016 fc99 	bl	80179fa <HAL_NVIC_EnableIRQ>

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	@ 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000400 	.word	0x48000400

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f016 fafc 	bl	80176dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f81a 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f7ff ff44 	bl	8000f74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ec:	f001 f940 	bl	8002370 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80010f0:	f001 f820 	bl	8002134 <MX_TIM6_Init>
  MX_TIM1_Init();
 80010f4:	f000 ff42 	bl	8001f7c <MX_TIM1_Init>
  MX_SPI3_Init();
 80010f8:	f000 fd78 	bl	8001bec <MX_SPI3_Init>
  MX_TIM2_Init();
 80010fc:	f000 ffcc 	bl	8002098 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <main+0x3c>)
 8001102:	f01c f915 	bl	801d330 <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 8001106:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800110a:	2001      	movs	r0, #1
 800110c:	f001 f900 	bl	8002310 <beep_start>

  iso15693_test();
 8001110:	f000 f880 	bl	8001214 <iso15693_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <main+0x38>
 8001118:	0801f160 	.word	0x0801f160

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	@ 0x58
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2244      	movs	r2, #68	@ 0x44
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f01c f9f0 	bl	801d510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001142:	f016 fec3 	bl	8017ecc <HAL_PWREx_ControlVoltageScaling>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800114c:	f000 f85c 	bl	8001208 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	2303      	movs	r3, #3
 8001160:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001166:	2314      	movs	r3, #20
 8001168:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f016 fefc 	bl	8017f78 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001186:	f000 f83f 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f017 fafc 	bl	80187a0 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ae:	f000 f82b 	bl	8001208 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3758      	adds	r7, #88	@ 0x58
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_EXTI_Callback>:
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]

    printf("IRQ triggered!\r\n"); // debug
 80011c6:	480d      	ldr	r0, [pc, #52]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x40>)
 80011c8:	f01c f8b2 	bl	801d330 <puts>

    if (phDriver_PinRead(PHDRIVER_PIN_IRQ, PH_DRIVER_PINFUNC_INTERRUPT))
 80011cc:	2204      	movs	r2, #4
 80011ce:	2110      	movs	r1, #16
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <HAL_GPIO_EXTI_Callback+0x44>)
 80011d2:	f015 ff2b 	bl	801702c <phDriver_PinRead>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <HAL_GPIO_EXTI_Callback+0x38>
    {
        /* Call application registered callback. */
        if (pHal->pRFISRCallback != NULL)
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x48>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_GPIO_EXTI_Callback+0x38>
        {
            pHal->pRFISRCallback(pHal);
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x48>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ec:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x48>)
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	4798      	blx	r3
        }
    }
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	0801f1a4 	.word	0x0801f1a4
 8001200:	48000400 	.word	0x48000400
 8001204:	2000052c 	.word	0x2000052c

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <iso15693_test>:
/*******************************************************************************
**   Code
*******************************************************************************/

int iso15693_test(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 800121a:	237f      	movs	r3, #127	@ 0x7f
 800121c:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
        phNfcLib_AppContext_t AppContext = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init();   // -> temp remove this to avoid conflict with sysTick

        /* Print Example application name */
        printf("\n *** ISO 15693 Example *** \n");
 8001228:	486c      	ldr	r0, [pc, #432]	@ (80013dc <iso15693_test+0x1c8>)
 800122a:	f01c f881 	bl	801d330 <puts>

        /* Hardware abstraction layer initialization */
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));	// set id and bus kind
 800122e:	2104      	movs	r1, #4
 8001230:	486b      	ldr	r0, [pc, #428]	@ (80013e0 <iso15693_test+0x1cc>)
 8001232:	f015 ff87 	bl	8017144 <phbalReg_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800123a:	8afb      	ldrh	r3, [r7, #22]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00c      	beq.n	800125a <iso15693_test+0x46>
 8001240:	8afb      	ldrh	r3, [r7, #22]
 8001242:	461a      	mov	r2, r3
 8001244:	217f      	movs	r1, #127	@ 0x7f
 8001246:	4867      	ldr	r0, [pc, #412]	@ (80013e4 <iso15693_test+0x1d0>)
 8001248:	f01c f802 	bl	801d250 <iprintf>
 800124c:	4b66      	ldr	r3, [pc, #408]	@ (80013e8 <iso15693_test+0x1d4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4618      	mov	r0, r3
 8001254:	f01b ff26 	bl	801d0a4 <fflush>
 8001258:	e00b      	b.n	8001272 <iso15693_test+0x5e>
 800125a:	8afb      	ldrh	r3, [r7, #22]
 800125c:	461a      	mov	r2, r3
 800125e:	217f      	movs	r1, #127	@ 0x7f
 8001260:	4862      	ldr	r0, [pc, #392]	@ (80013ec <iso15693_test+0x1d8>)
 8001262:	f01b fff5 	bl	801d250 <iprintf>
 8001266:	4b60      	ldr	r3, [pc, #384]	@ (80013e8 <iso15693_test+0x1d4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f01b ff19 	bl	801d0a4 <fflush>

        /* Set NFC library context */
        AppContext.pBalDataparams = &sBalParams;
 8001272:	4b5b      	ldr	r3, [pc, #364]	@ (80013e0 <iso15693_test+0x1cc>)
 8001274:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fc6f 	bl	8005b5c <phNfcLib_SetContext>
 800127e:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <iso15693_test+0x8a>
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	2184      	movs	r1, #132	@ 0x84
 800128a:	4859      	ldr	r0, [pc, #356]	@ (80013f0 <iso15693_test+0x1dc>)
 800128c:	f01b ffe0 	bl	801d250 <iprintf>
 8001290:	4b55      	ldr	r3, [pc, #340]	@ (80013e8 <iso15693_test+0x1d4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4618      	mov	r0, r3
 8001298:	f01b ff04 	bl	801d0a4 <fflush>
 800129c:	e00a      	b.n	80012b4 <iso15693_test+0xa0>
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	2184      	movs	r1, #132	@ 0x84
 80012a2:	4854      	ldr	r0, [pc, #336]	@ (80013f4 <iso15693_test+0x1e0>)
 80012a4:	f01b ffd4 	bl	801d250 <iprintf>
 80012a8:	4b4f      	ldr	r3, [pc, #316]	@ (80013e8 <iso15693_test+0x1d4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f01b fef8 	bl	801d0a4 <fflush>

        /* NFC library initialization */
        dwStatus = phNfcLib_Init();
 80012b4:	f004 febc 	bl	8006030 <phNfcLib_Init>
 80012b8:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <iso15693_test+0xc4>
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	2188      	movs	r1, #136	@ 0x88
 80012c4:	484a      	ldr	r0, [pc, #296]	@ (80013f0 <iso15693_test+0x1dc>)
 80012c6:	f01b ffc3 	bl	801d250 <iprintf>
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <iso15693_test+0x1d4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f01b fee7 	bl	801d0a4 <fflush>
 80012d6:	e00a      	b.n	80012ee <iso15693_test+0xda>
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	2188      	movs	r1, #136	@ 0x88
 80012dc:	4845      	ldr	r0, [pc, #276]	@ (80013f4 <iso15693_test+0x1e0>)
 80012de:	f01b ffb7 	bl	801d250 <iprintf>
 80012e2:	4b41      	ldr	r3, [pc, #260]	@ (80013e8 <iso15693_test+0x1d4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f01b fedb 	bl	801d0a4 <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d163      	bne.n	80013bc <iso15693_test+0x1a8>

        /* Set the generic pointer */
        /* Get the parameter pointer of each component */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);
 80012f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012f8:	f004 ff58 	bl	80061ac <phNfcLib_GetDataParams>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a3e      	ldr	r2, [pc, #248]	@ (80013f8 <iso15693_test+0x1e4>)
 8001300:	6013      	str	r3, [r2, #0]
        psalI15693 = phNfcLib_GetDataParams(PH_COMP_AL_ICODE);
 8001302:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001306:	f004 ff51 	bl	80061ac <phNfcLib_GetDataParams>
 800130a:	4603      	mov	r3, r0
 800130c:	4a3b      	ldr	r2, [pc, #236]	@ (80013fc <iso15693_test+0x1e8>)
 800130e:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP);
 8001310:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001314:	f004 ff4a 	bl	80061ac <phNfcLib_GetDataParams>
 8001318:	4603      	mov	r3, r0
 800131a:	4a39      	ldr	r2, [pc, #228]	@ (8001400 <iso15693_test+0x1ec>)
 800131c:	6013      	str	r3, [r2, #0]

        /* Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 800131e:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <iso15693_test+0x1ec>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f94c 	bl	80025c0 <phApp_Comp_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <iso15693_test+0x138>
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	461a      	mov	r2, r3
 8001336:	2193      	movs	r1, #147	@ 0x93
 8001338:	482a      	ldr	r0, [pc, #168]	@ (80013e4 <iso15693_test+0x1d0>)
 800133a:	f01b ff89 	bl	801d250 <iprintf>
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <iso15693_test+0x1d4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f01b fead 	bl	801d0a4 <fflush>
 800134a:	e00b      	b.n	8001364 <iso15693_test+0x150>
 800134c:	8afb      	ldrh	r3, [r7, #22]
 800134e:	461a      	mov	r2, r3
 8001350:	2193      	movs	r1, #147	@ 0x93
 8001352:	4826      	ldr	r0, [pc, #152]	@ (80013ec <iso15693_test+0x1d8>)
 8001354:	f01b ff7c 	bl	801d250 <iprintf>
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <iso15693_test+0x1d4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4618      	mov	r0, r3
 8001360:	f01b fea0 	bl	801d0a4 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001364:	8afb      	ldrh	r3, [r7, #22]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d12a      	bne.n	80013c0 <iso15693_test+0x1ac>

        /* Perform Platform Init */
        status = phApp_Configure_IRQ();
 800136a:	f001 f93d 	bl	80025e8 <phApp_Configure_IRQ>
 800136e:	4603      	mov	r3, r0
 8001370:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001372:	8afb      	ldrh	r3, [r7, #22]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00c      	beq.n	8001392 <iso15693_test+0x17e>
 8001378:	8afb      	ldrh	r3, [r7, #22]
 800137a:	461a      	mov	r2, r3
 800137c:	2198      	movs	r1, #152	@ 0x98
 800137e:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <iso15693_test+0x1d0>)
 8001380:	f01b ff66 	bl	801d250 <iprintf>
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <iso15693_test+0x1d4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4618      	mov	r0, r3
 800138c:	f01b fe8a 	bl	801d0a4 <fflush>
 8001390:	e00b      	b.n	80013aa <iso15693_test+0x196>
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	461a      	mov	r2, r3
 8001396:	2198      	movs	r1, #152	@ 0x98
 8001398:	4814      	ldr	r0, [pc, #80]	@ (80013ec <iso15693_test+0x1d8>)
 800139a:	f01b ff59 	bl	801d250 <iprintf>
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <iso15693_test+0x1d4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f01b fe7d 	bl	801d0a4 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 80013aa:	8afb      	ldrh	r3, [r7, #22]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <iso15693_test+0x1b0>

        /* debug if spi communication read eeprom & register is ok */
//        test_pn5180_spi_communication(pHal);

        (void)NfcrdlibEx5_ISO15693(pDiscLoop);
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <iso15693_test+0x1ec>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f827 	bl	8001408 <NfcrdlibEx5_ISO15693>
 80013ba:	e004      	b.n	80013c6 <iso15693_test+0x1b2>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <iso15693_test+0x1b2>
        if(status != PH_ERR_SUCCESS) break;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <iso15693_test+0x1b2>
        if(status != PH_ERR_SUCCESS) break;
 80013c4:	bf00      	nop
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 80013c6:	bf00      	nop
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <iso15693_test+0x1f0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1fa      	bne.n	80013c8 <iso15693_test+0x1b4>

    return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0801f1b4 	.word	0x0801f1b4
 80013e0:	20000528 	.word	0x20000528
 80013e4:	0801f1d4 	.word	0x0801f1d4
 80013e8:	2000002c 	.word	0x2000002c
 80013ec:	0801f23c 	.word	0x0801f23c
 80013f0:	0801f278 	.word	0x0801f278
 80013f4:	0801f2b0 	.word	0x0801f2b0
 80013f8:	2000052c 	.word	0x2000052c
 80013fc:	20000208 	.word	0x20000208
 8001400:	20000204 	.word	0x20000204
 8001404:	20000000 	.word	0x20000000

08001408 <NfcrdlibEx5_ISO15693>:
 * \brief   This function demonstrates the Type V (ISO 15693) card detection, Block Read and Write operation.
 * \param   *pParams
 * \return  This function will never return
 **********************************************************************************************/
void NfcrdlibEx5_ISO15693(void *pParams)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b090      	sub	sp, #64	@ 0x40
 800140c:	af04      	add	r7, sp, #16
 800140e:	6078      	str	r0, [r7, #4]
    phStatus_t  status = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    wTagsDetected = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t     bBlock = 0x03;
 8001418:	2303      	movs	r3, #3
 800141a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t     *pRxbuffer;
    uint16_t    bDataLength;
    uint8_t     aTempUid[8];
    uint8_t     aReceivedUid[8];
    uint8_t     bDsfid = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
    uint8_t     bNTag5_State;

    /* This call shall allocate secure context before calling any secure function,
     * when FreeRtos trust zone is enabled.
     * */
    phOsal_ThreadSecureStack( 512 );
 8001422:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001426:	f016 f879 	bl	801751c <phOsal_ThreadSecureStack>

    /* Initialize library */
    status = phExample_Init();
 800142a:	f000 fa49 	bl	80018c0 <phExample_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    CHECK_STATUS(status);
 8001432:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <NfcrdlibEx5_ISO15693+0x4a>
 8001438:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800143a:	461a      	mov	r2, r3
 800143c:	21be      	movs	r1, #190	@ 0xbe
 800143e:	488e      	ldr	r0, [pc, #568]	@ (8001678 <NfcrdlibEx5_ISO15693+0x270>)
 8001440:	f01b ff06 	bl	801d250 <iprintf>
 8001444:	4b8d      	ldr	r3, [pc, #564]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4618      	mov	r0, r3
 800144c:	f01b fe2a 	bl	801d0a4 <fflush>
 8001450:	e00b      	b.n	800146a <NfcrdlibEx5_ISO15693+0x62>
 8001452:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001454:	461a      	mov	r2, r3
 8001456:	21be      	movs	r1, #190	@ 0xbe
 8001458:	4889      	ldr	r0, [pc, #548]	@ (8001680 <NfcrdlibEx5_ISO15693+0x278>)
 800145a:	f01b fef9 	bl	801d250 <iprintf>
 800145e:	4b87      	ldr	r3, [pc, #540]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4618      	mov	r0, r3
 8001466:	f01b fe1d 	bl	801d0a4 <fflush>

    while(1)    /* Continuous loop */
    {
        bNTag5_State = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	73bb      	strb	r3, [r7, #14]
        DEBUG_PRINTF("\nReady to detect");
 800146e:	4885      	ldr	r0, [pc, #532]	@ (8001684 <NfcrdlibEx5_ISO15693+0x27c>)
 8001470:	f01b feee 	bl	801d250 <iprintf>
 8001474:	4b81      	ldr	r3, [pc, #516]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f01b fe12 	bl	801d0a4 <fflush>
        DEBUG_PRINTF("\n");
 8001480:	200a      	movs	r0, #10
 8001482:	f01b fef7 	bl	801d274 <putchar>
 8001486:	4b7d      	ldr	r3, [pc, #500]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4618      	mov	r0, r3
 800148e:	f01b fe09 	bl	801d0a4 <fflush>

        do
        {
            /* Field OFF */
            status = phhalHw_FieldOff(pHal);
 8001492:	4b7d      	ldr	r3, [pc, #500]	@ (8001688 <NfcrdlibEx5_ISO15693+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f00b fed6 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 800149c:	4603      	mov	r3, r0
 800149e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 80014a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <NfcrdlibEx5_ISO15693+0xb8>
 80014a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014a8:	461a      	mov	r2, r3
 80014aa:	21ca      	movs	r1, #202	@ 0xca
 80014ac:	4872      	ldr	r0, [pc, #456]	@ (8001678 <NfcrdlibEx5_ISO15693+0x270>)
 80014ae:	f01b fecf 	bl	801d250 <iprintf>
 80014b2:	4b72      	ldr	r3, [pc, #456]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f01b fdf3 	bl	801d0a4 <fflush>
 80014be:	e00b      	b.n	80014d8 <NfcrdlibEx5_ISO15693+0xd0>
 80014c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014c2:	461a      	mov	r2, r3
 80014c4:	21ca      	movs	r1, #202	@ 0xca
 80014c6:	486e      	ldr	r0, [pc, #440]	@ (8001680 <NfcrdlibEx5_ISO15693+0x278>)
 80014c8:	f01b fec2 	bl	801d250 <iprintf>
 80014cc:	4b6b      	ldr	r3, [pc, #428]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f01b fde6 	bl	801d0a4 <fflush>

            /* !program stock at here! */
            status = phhalHw_Wait(pDiscLoop->pHalDataParams,PHHAL_HW_TIME_MICROSECONDS, 5100); // 设置超时时间5.1s
 80014d8:	4b6c      	ldr	r3, [pc, #432]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014de:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00b fed3 	bl	800d290 <phhalHw_Pn5180_Wait>
 80014ea:	4603      	mov	r3, r0
 80014ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 80014ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00c      	beq.n	800150e <NfcrdlibEx5_ISO15693+0x106>
 80014f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014f6:	461a      	mov	r2, r3
 80014f8:	21ce      	movs	r1, #206	@ 0xce
 80014fa:	485f      	ldr	r0, [pc, #380]	@ (8001678 <NfcrdlibEx5_ISO15693+0x270>)
 80014fc:	f01b fea8 	bl	801d250 <iprintf>
 8001500:	4b5e      	ldr	r3, [pc, #376]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4618      	mov	r0, r3
 8001508:	f01b fdcc 	bl	801d0a4 <fflush>
 800150c:	e00b      	b.n	8001526 <NfcrdlibEx5_ISO15693+0x11e>
 800150e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001510:	461a      	mov	r2, r3
 8001512:	21ce      	movs	r1, #206	@ 0xce
 8001514:	485a      	ldr	r0, [pc, #360]	@ (8001680 <NfcrdlibEx5_ISO15693+0x278>)
 8001516:	f01b fe9b 	bl	801d250 <iprintf>
 800151a:	4b58      	ldr	r3, [pc, #352]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4618      	mov	r0, r3
 8001522:	f01b fdbf 	bl	801d0a4 <fflush>

            /* Configure Discovery loop for Poll Mode */
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8001526:	4b59      	ldr	r3, [pc, #356]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	2184      	movs	r1, #132	@ 0x84
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fbf4 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 8001538:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00c      	beq.n	8001558 <NfcrdlibEx5_ISO15693+0x150>
 800153e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001540:	461a      	mov	r2, r3
 8001542:	21d2      	movs	r1, #210	@ 0xd2
 8001544:	484c      	ldr	r0, [pc, #304]	@ (8001678 <NfcrdlibEx5_ISO15693+0x270>)
 8001546:	f01b fe83 	bl	801d250 <iprintf>
 800154a:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f01b fda7 	bl	801d0a4 <fflush>
 8001556:	e00b      	b.n	8001570 <NfcrdlibEx5_ISO15693+0x168>
 8001558:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800155a:	461a      	mov	r2, r3
 800155c:	21d2      	movs	r1, #210	@ 0xd2
 800155e:	4848      	ldr	r0, [pc, #288]	@ (8001680 <NfcrdlibEx5_ISO15693+0x278>)
 8001560:	f01b fe76 	bl	801d250 <iprintf>
 8001564:	4b45      	ldr	r3, [pc, #276]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4618      	mov	r0, r3
 800156c:	f01b fd9a 	bl	801d0a4 <fflush>

            /* Run Discovery loop */
            status = phacDiscLoop_Run(pDiscLoop, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 8001570:	4b46      	ldr	r3, [pc, #280]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f005 fafe 	bl	8006b78 <phacDiscLoop_Sw_Run>
 800157c:	4603      	mov	r3, r0
 800157e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        }while((status & PH_ERR_MASK) != PHAC_DISCLOOP_DEVICE_ACTIVATED); /* Exit on Card detection */
 8001580:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b8b      	cmp	r3, #139	@ 0x8b
 8001586:	d184      	bne.n	8001492 <NfcrdlibEx5_ISO15693+0x8a>

        /* Card detected */
        /* Get the tag types detected info */
        status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTagsDetected);
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 8001590:	2187      	movs	r1, #135	@ 0x87
 8001592:	4618      	mov	r0, r3
 8001594:	f005 ffcc 	bl	8007530 <phacDiscLoop_Sw_GetConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Check for Status */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800159c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f af62 	bne.w	800146a <NfcrdlibEx5_ISO15693+0x62>
        {
            /* Check for Type V(ISO 15693) tag detection */
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 80015a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f43f af5c 	beq.w	800146a <NfcrdlibEx5_ISO15693+0x62>
            {
                DEBUG_PRINTF("\nType V / ISO 15693 / T5T Detected \n");
 80015b2:	4837      	ldr	r0, [pc, #220]	@ (8001690 <NfcrdlibEx5_ISO15693+0x288>)
 80015b4:	f01b febc 	bl	801d330 <puts>
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4618      	mov	r0, r3
 80015c0:	f01b fd70 	bl	801d0a4 <fflush>

                /* Print UID */
                DEBUG_PRINTF ("\nUID: ");
 80015c4:	4833      	ldr	r0, [pc, #204]	@ (8001694 <NfcrdlibEx5_ISO15693+0x28c>)
 80015c6:	f01b fe43 	bl	801d250 <iprintf>
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f01b fd67 	bl	801d0a4 <fflush>
                phApp_Print_Buff(pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, 0x08);
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	33b8      	adds	r3, #184	@ 0xb8
 80015dc:	2108      	movs	r1, #8
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 ffc6 	bl	8002570 <phApp_Print_Buff>

                /* Copy UID */
                memcpy(aReceivedUid, pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, 0x08);
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	6810      	ldr	r0, [r2, #0]
 80015f2:	6851      	ldr	r1, [r2, #4]
 80015f4:	c303      	stmia	r3!, {r0, r1}

                /* Check and display Card type info */
                if (DisplayCardTypeInfo(pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, &bNTag5_State) == PH_ERR_SUCCESS)
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <NfcrdlibEx5_ISO15693+0x284>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	33b8      	adds	r3, #184	@ 0xb8
 80015fc:	f107 020e 	add.w	r2, r7, #14
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f9e2 	bl	80019cc <DisplayCardTypeInfo>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 80c0 	bne.w	8001790 <NfcrdlibEx5_ISO15693+0x388>
                {
                    do
                    {
                        /* Data length */
                        bDataLength = 0x04;
 8001610:	2304      	movs	r3, #4
 8001612:	847b      	strh	r3, [r7, #34]	@ 0x22

                        /* Block Read */
                        DEBUG_PRINTF("\nRead Data from Block %d", bBlock);
 8001614:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001618:	4619      	mov	r1, r3
 800161a:	481f      	ldr	r0, [pc, #124]	@ (8001698 <NfcrdlibEx5_ISO15693+0x290>)
 800161c:	f01b fe18 	bl	801d250 <iprintf>
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f01b fd3c 	bl	801d0a4 <fflush>

                        /* Read single block */
                        status = phalICode_ReadSingleBlock(psalI15693,
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <NfcrdlibEx5_ISO15693+0x294>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001634:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001638:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	460b      	mov	r3, r1
 8001640:	2100      	movs	r1, #0
 8001642:	f009 fd9c 	bl	800b17e <phalICode_Sw_ReadSingleBlock>
 8001646:	4603      	mov	r3, r0
 8001648:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                            PHAL_ICODE_OPTION_OFF,
                            bBlock,
                            &pRxbuffer,
                            &bDataLength);
                        /* Check for Status */
                        if(status != PH_ERR_SUCCESS)
 800164a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800164c:	2b00      	cmp	r3, #0
 800164e:	d02b      	beq.n	80016a8 <NfcrdlibEx5_ISO15693+0x2a0>
                        {
                            /* Print Error info */
                            DEBUG_PRINTF ("\nRead operation Failed!!!");
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <NfcrdlibEx5_ISO15693+0x298>)
 8001652:	f01b fdfd 	bl	801d250 <iprintf>
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f01b fd21 	bl	801d0a4 <fflush>
                            DEBUG_PRINTF("\nExecution aborted!!!\n");
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <NfcrdlibEx5_ISO15693+0x29c>)
 8001664:	f01b fe64 	bl	801d330 <puts>
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <NfcrdlibEx5_ISO15693+0x274>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4618      	mov	r0, r3
 8001670:	f01b fd18 	bl	801d0a4 <fflush>
                            break;
 8001674:	e08c      	b.n	8001790 <NfcrdlibEx5_ISO15693+0x388>
 8001676:	bf00      	nop
 8001678:	0801f1d4 	.word	0x0801f1d4
 800167c:	2000002c 	.word	0x2000002c
 8001680:	0801f23c 	.word	0x0801f23c
 8001684:	0801f2d8 	.word	0x0801f2d8
 8001688:	2000052c 	.word	0x2000052c
 800168c:	20000204 	.word	0x20000204
 8001690:	0801f2ec 	.word	0x0801f2ec
 8001694:	0801f310 	.word	0x0801f310
 8001698:	0801f318 	.word	0x0801f318
 800169c:	20000208 	.word	0x20000208
 80016a0:	0801f334 	.word	0x0801f334
 80016a4:	0801f350 	.word	0x0801f350
                        }

                        /* Read Success */
                        DEBUG_PRINTF("\nRead Success");
 80016a8:	4875      	ldr	r0, [pc, #468]	@ (8001880 <NfcrdlibEx5_ISO15693+0x478>)
 80016aa:	f01b fdd1 	bl	801d250 <iprintf>
 80016ae:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f01b fcf5 	bl	801d0a4 <fflush>
                        DEBUG_PRINTF("\nThe content of Block %d is:", bBlock);
 80016ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80016be:	4619      	mov	r1, r3
 80016c0:	4871      	ldr	r0, [pc, #452]	@ (8001888 <NfcrdlibEx5_ISO15693+0x480>)
 80016c2:	f01b fdc5 	bl	801d250 <iprintf>
 80016c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f01b fce9 	bl	801d0a4 <fflush>
                        phApp_Print_Buff (pRxbuffer, bDataLength);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 ff48 	bl	8002570 <phApp_Print_Buff>
                        DEBUG_PRINTF("\n\n --- End of Read Operation ---");
 80016e0:	486a      	ldr	r0, [pc, #424]	@ (800188c <NfcrdlibEx5_ISO15693+0x484>)
 80016e2:	f01b fdb5 	bl	801d250 <iprintf>
 80016e6:	4b67      	ldr	r3, [pc, #412]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f01b fcd9 	bl	801d0a4 <fflush>

                        /* Block Write */
                        DEBUG_PRINTF("\n\nWrite data to Block %d", bBlock);
 80016f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80016f6:	4619      	mov	r1, r3
 80016f8:	4865      	ldr	r0, [pc, #404]	@ (8001890 <NfcrdlibEx5_ISO15693+0x488>)
 80016fa:	f01b fda9 	bl	801d250 <iprintf>
 80016fe:	4b61      	ldr	r3, [pc, #388]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4618      	mov	r0, r3
 8001706:	f01b fccd 	bl	801d0a4 <fflush>

                        /* Write single block */
                        status = phalICode_WriteSingleBlock(psalI15693,
 800170a:	4b62      	ldr	r3, [pc, #392]	@ (8001894 <NfcrdlibEx5_ISO15693+0x48c>)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001710:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	460b      	mov	r3, r1
 800171c:	2100      	movs	r1, #0
 800171e:	f009 fd6e 	bl	800b1fe <phalICode_Sw_WriteSingleBlock>
 8001722:	4603      	mov	r3, r0
 8001724:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                            PHAL_ICODE_OPTION_OFF,
                            bBlock,
                            pRxbuffer,
                            bDataLength);
                        /* Check for Status */
                        if(status != PH_ERR_SUCCESS)
 8001726:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001728:	2b00      	cmp	r3, #0
 800172a:	d012      	beq.n	8001752 <NfcrdlibEx5_ISO15693+0x34a>
                        {
                            /* Print Error info */
                            DEBUG_PRINTF ("\nWrite operation Failed!!!");
 800172c:	485a      	ldr	r0, [pc, #360]	@ (8001898 <NfcrdlibEx5_ISO15693+0x490>)
 800172e:	f01b fd8f 	bl	801d250 <iprintf>
 8001732:	4b54      	ldr	r3, [pc, #336]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4618      	mov	r0, r3
 800173a:	f01b fcb3 	bl	801d0a4 <fflush>
                            DEBUG_PRINTF("\nExecution aborted!!!\n");
 800173e:	4857      	ldr	r0, [pc, #348]	@ (800189c <NfcrdlibEx5_ISO15693+0x494>)
 8001740:	f01b fdf6 	bl	801d330 <puts>
 8001744:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4618      	mov	r0, r3
 800174c:	f01b fcaa 	bl	801d0a4 <fflush>
                            break;
 8001750:	e01e      	b.n	8001790 <NfcrdlibEx5_ISO15693+0x388>
                        }

                        /* Write Success */
                        DEBUG_PRINTF ("\nWrite Success");
 8001752:	4853      	ldr	r0, [pc, #332]	@ (80018a0 <NfcrdlibEx5_ISO15693+0x498>)
 8001754:	f01b fd7c 	bl	801d250 <iprintf>
 8001758:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	f01b fca0 	bl	801d0a4 <fflush>
                        DEBUG_PRINTF("\n\n --- End of Write Operation ---");
 8001764:	484f      	ldr	r0, [pc, #316]	@ (80018a4 <NfcrdlibEx5_ISO15693+0x49c>)
 8001766:	f01b fd73 	bl	801d250 <iprintf>
 800176a:	4b46      	ldr	r3, [pc, #280]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4618      	mov	r0, r3
 8001772:	f01b fc97 	bl	801d0a4 <fflush>

                        ReadMultipleBlock_HighDataRate(bNTag5_State);
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fa2b 	bl	8001bd4 <ReadMultipleBlock_HighDataRate>

                        DEBUG_PRINTF("\n\n --- End of Example ---\n\n");
 800177e:	484a      	ldr	r0, [pc, #296]	@ (80018a8 <NfcrdlibEx5_ISO15693+0x4a0>)
 8001780:	f01b fdd6 	bl	801d330 <puts>
 8001784:	4b3f      	ldr	r3, [pc, #252]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f01b fc8a 	bl	801d0a4 <fflush>
                    }while(0);
                }

                DEBUG_PRINTF("\nPlease Remove the Card\n\n");
 8001790:	4846      	ldr	r0, [pc, #280]	@ (80018ac <NfcrdlibEx5_ISO15693+0x4a4>)
 8001792:	f01b fdcd 	bl	801d330 <puts>
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4618      	mov	r0, r3
 800179e:	f01b fc81 	bl	801d0a4 <fflush>

                /* Field RESET */
                status = phhalHw_FieldReset(pHal);
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <NfcrdlibEx5_ISO15693+0x4a8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00b fe0c 	bl	800d3c4 <phhalHw_Pn5180_FieldReset>
 80017ac:	4603      	mov	r3, r0
 80017ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                CHECK_STATUS(status);
 80017b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <NfcrdlibEx5_ISO15693+0x3ca>
 80017b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017b8:	461a      	mov	r2, r3
 80017ba:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80017be:	483d      	ldr	r0, [pc, #244]	@ (80018b4 <NfcrdlibEx5_ISO15693+0x4ac>)
 80017c0:	f01b fd46 	bl	801d250 <iprintf>
 80017c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f01b fc6a 	bl	801d0a4 <fflush>
 80017d0:	e00c      	b.n	80017ec <NfcrdlibEx5_ISO15693+0x3e4>
 80017d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017d4:	461a      	mov	r2, r3
 80017d6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80017da:	4837      	ldr	r0, [pc, #220]	@ (80018b8 <NfcrdlibEx5_ISO15693+0x4b0>)
 80017dc:	f01b fd38 	bl	801d250 <iprintf>
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f01b fc5c 	bl	801d0a4 <fflush>

                /* Make sure that example application is not detecting the same card continuously */
                do
                {
                    /* Clear UID buffer */
                    memset(aTempUid, 0x00, 0x08);
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	2208      	movs	r2, #8
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f01b fe8b 	bl	801d510 <memset>

                    /* Inventory request */
                    status = phpalSli15693_Inventory(pDiscLoop->pPalSli15693DataParams,
 80017fa:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <NfcrdlibEx5_ISO15693+0x4b4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	f107 030f 	add.w	r3, r7, #15
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2340      	movs	r3, #64	@ 0x40
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	2200      	movs	r2, #0
 8001818:	2126      	movs	r1, #38	@ 0x26
 800181a:	f014 f9c2 	bl	8015ba2 <phpalSli15693_Sw_Inventory>
 800181e:	4603      	mov	r3, r0
 8001820:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                        ISO15693_UID_SIZE_BITS,
                        &bDsfid,
                        aTempUid);

                    /* Check for Status */
                    if (status != PH_ERR_SUCCESS)
 8001822:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001824:	2b00      	cmp	r3, #0
 8001826:	d128      	bne.n	800187a <NfcrdlibEx5_ISO15693+0x472>
                    {
                        break; /* Card Removed, break from the loop */
                    }

                    /* Delay - 5 milli seconds*/
                    status = phhalHw_Wait(pDiscLoop->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, 5);
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <NfcrdlibEx5_ISO15693+0x4b4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	2205      	movs	r2, #5
 8001830:	2101      	movs	r1, #1
 8001832:	4618      	mov	r0, r3
 8001834:	f00b fd2c 	bl	800d290 <phhalHw_Pn5180_Wait>
 8001838:	4603      	mov	r3, r0
 800183a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    CHECK_STATUS(status);
 800183c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00d      	beq.n	800185e <NfcrdlibEx5_ISO15693+0x456>
 8001842:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001844:	461a      	mov	r2, r3
 8001846:	f240 1145 	movw	r1, #325	@ 0x145
 800184a:	481a      	ldr	r0, [pc, #104]	@ (80018b4 <NfcrdlibEx5_ISO15693+0x4ac>)
 800184c:	f01b fd00 	bl	801d250 <iprintf>
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4618      	mov	r0, r3
 8001858:	f01b fc24 	bl	801d0a4 <fflush>
 800185c:	e7c6      	b.n	80017ec <NfcrdlibEx5_ISO15693+0x3e4>
 800185e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001860:	461a      	mov	r2, r3
 8001862:	f240 1145 	movw	r1, #325	@ 0x145
 8001866:	4814      	ldr	r0, [pc, #80]	@ (80018b8 <NfcrdlibEx5_ISO15693+0x4b0>)
 8001868:	f01b fcf2 	bl	801d250 <iprintf>
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <NfcrdlibEx5_ISO15693+0x47c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	f01b fc16 	bl	801d0a4 <fflush>
                    memset(aTempUid, 0x00, 0x08);
 8001878:	e7b8      	b.n	80017ec <NfcrdlibEx5_ISO15693+0x3e4>
                        break; /* Card Removed, break from the loop */
 800187a:	bf00      	nop
        bNTag5_State = 0;
 800187c:	e5f5      	b.n	800146a <NfcrdlibEx5_ISO15693+0x62>
 800187e:	bf00      	nop
 8001880:	0801f368 	.word	0x0801f368
 8001884:	2000002c 	.word	0x2000002c
 8001888:	0801f378 	.word	0x0801f378
 800188c:	0801f398 	.word	0x0801f398
 8001890:	0801f3bc 	.word	0x0801f3bc
 8001894:	20000208 	.word	0x20000208
 8001898:	0801f3d8 	.word	0x0801f3d8
 800189c:	0801f350 	.word	0x0801f350
 80018a0:	0801f3f4 	.word	0x0801f3f4
 80018a4:	0801f404 	.word	0x0801f404
 80018a8:	0801f428 	.word	0x0801f428
 80018ac:	0801f444 	.word	0x0801f444
 80018b0:	2000052c 	.word	0x2000052c
 80018b4:	0801f1d4 	.word	0x0801f1d4
 80018b8:	0801f23c 	.word	0x0801f23c
 80018bc:	20000204 	.word	0x20000204

080018c0 <phExample_Init>:
 * \brief   Initializes the Reader Library
 * \param   none
 * \return  status  Returns the function status
 **********************************************************************************************/
static phStatus_t phExample_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
#if defined NXPBUILD__PHHAL_HW_RC663
    uint8_t bChipVersion;
#endif /* NXPBUILD__PHHAL_HW_RC663 */

    /* Device limit for Type V (ISO 15693) */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <phExample_Init+0xfc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	2113      	movs	r1, #19
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 fa24 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <phExample_Init+0x3a>
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f240 115b 	movw	r1, #347	@ 0x15b
 80018e6:	4836      	ldr	r0, [pc, #216]	@ (80019c0 <phExample_Init+0x100>)
 80018e8:	f01b fcb2 	bl	801d250 <iprintf>
 80018ec:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <phExample_Init+0x104>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f01b fbd6 	bl	801d0a4 <fflush>
 80018f8:	e00c      	b.n	8001914 <phExample_Init+0x54>
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	461a      	mov	r2, r3
 80018fe:	f240 115b 	movw	r1, #347	@ 0x15b
 8001902:	4831      	ldr	r0, [pc, #196]	@ (80019c8 <phExample_Init+0x108>)
 8001904:	f01b fca4 	bl	801d250 <iprintf>
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <phExample_Init+0x104>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4618      	mov	r0, r3
 8001910:	f01b fbc8 	bl	801d0a4 <fflush>

    /* Passive polling Tx Guard times in micro seconds. */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5000);
 8001914:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <phExample_Init+0xfc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191c:	2104      	movs	r1, #4
 800191e:	4618      	mov	r0, r3
 8001920:	f005 f9fc 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00d      	beq.n	800194a <phExample_Init+0x8a>
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	461a      	mov	r2, r3
 8001932:	f240 115f 	movw	r1, #351	@ 0x15f
 8001936:	4822      	ldr	r0, [pc, #136]	@ (80019c0 <phExample_Init+0x100>)
 8001938:	f01b fc8a 	bl	801d250 <iprintf>
 800193c:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <phExample_Init+0x104>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f01b fbae 	bl	801d0a4 <fflush>
 8001948:	e00c      	b.n	8001964 <phExample_Init+0xa4>
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	461a      	mov	r2, r3
 800194e:	f240 115f 	movw	r1, #351	@ 0x15f
 8001952:	481d      	ldr	r0, [pc, #116]	@ (80019c8 <phExample_Init+0x108>)
 8001954:	f01b fc7c 	bl	801d250 <iprintf>
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <phExample_Init+0x104>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f01b fba0 	bl	801d0a4 <fflush>

    /* Bailout on Type V (ISO 15693) detect */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, PHAC_DISCLOOP_POS_BIT_MASK_V);
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <phExample_Init+0xfc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	2186      	movs	r1, #134	@ 0x86
 800196c:	4618      	mov	r0, r3
 800196e:	f005 f9d5 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00d      	beq.n	8001998 <phExample_Init+0xd8>
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	461a      	mov	r2, r3
 8001980:	f240 1163 	movw	r1, #355	@ 0x163
 8001984:	480e      	ldr	r0, [pc, #56]	@ (80019c0 <phExample_Init+0x100>)
 8001986:	f01b fc63 	bl	801d250 <iprintf>
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <phExample_Init+0x104>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4618      	mov	r0, r3
 8001992:	f01b fb87 	bl	801d0a4 <fflush>
 8001996:	e00c      	b.n	80019b2 <phExample_Init+0xf2>
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	461a      	mov	r2, r3
 800199c:	f240 1163 	movw	r1, #355	@ 0x163
 80019a0:	4809      	ldr	r0, [pc, #36]	@ (80019c8 <phExample_Init+0x108>)
 80019a2:	f01b fc55 	bl	801d250 <iprintf>
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <phExample_Init+0x104>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f01b fb79 	bl	801d0a4 <fflush>
    CHECK_STATUS(status);
    DEBUG_PRINTF("\nReader chip RC663: 0x%02x\n", bChipVersion);
#endif /* NXPBUILD__PHHAL_HW_RC663 */

    /* Return Success */
    return PH_ERR_SUCCESS;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000204 	.word	0x20000204
 80019c0:	0801f1d4 	.word	0x0801f1d4
 80019c4:	2000002c 	.word	0x2000002c
 80019c8:	0801f23c 	.word	0x0801f23c

080019cc <DisplayCardTypeInfo>:
 * \brief   This functions prints the Card type information like SLI, SLIX etc.
 * \param   *pUID   UID Pointer
 * \return  status  Returns the function status
 **********************************************************************************************/
static phStatus_t DisplayCardTypeInfo(uint8_t *pUID, uint8_t *pNTag5_State)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    uint8_t bCardType;
    phStatus_t  status = PH_ERR_SUCCESS;
 80019d6:	2300      	movs	r3, #0
 80019d8:	81fb      	strh	r3, [r7, #14]

    /* Check for ISO15693 NXP TAG */
    if (pUID[ISO15693_UID_NXP_IDPOS] != ISO15693_NXP_TAG_ID)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3306      	adds	r3, #6
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d00b      	beq.n	80019fc <DisplayCardTypeInfo+0x30>
    {
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: Non NXP ISO15693 Tag Detected\n");
 80019e4:	486f      	ldr	r0, [pc, #444]	@ (8001ba4 <DisplayCardTypeInfo+0x1d8>)
 80019e6:	f01b fca3 	bl	801d330 <puts>
 80019ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f01b fb57 	bl	801d0a4 <fflush>

        /* Return Status */
        return (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 80019f6:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 80019fa:	e0cf      	b.n	8001b9c <DisplayCardTypeInfo+0x1d0>
    }

    /* Read SLI Card type information from UID (Byte 4) */
    bCardType = ((pUID[ISO15693_MFGID_CARDSEL_IDPOS] & ISO15693_MFGID_CARDSEL_MSK) >> ISO15693_MFGID_CARDSEL_BITPOS);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	10db      	asrs	r3, r3, #3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	737b      	strb	r3, [r7, #13]

    /* Switch based on Card Type(SLI/SLIX/SLIX2) */
    switch (bCardType)
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	f200 80b6 	bhi.w	8001b80 <DisplayCardTypeInfo+0x1b4>
 8001a14:	a201      	add	r2, pc, #4	@ (adr r2, 8001a1c <DisplayCardTypeInfo+0x50>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001b0d 	.word	0x08001b0d
 8001a24:	08001a9d 	.word	0x08001a9d
 8001a28:	08001b21 	.word	0x08001b21
    {
    case ISO15693_MFGID_SLI_STATE:          /* SLI Card state */
        /* Switch based on Card Type(SLI/SLI-S/SLI-L) */
        switch (pUID[ISO15693_UID_CARDSEL_IDPOS])
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3305      	adds	r3, #5
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d01a      	beq.n	8001a6c <DisplayCardTypeInfo+0xa0>
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	dc22      	bgt.n	8001a80 <DisplayCardTypeInfo+0xb4>
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d002      	beq.n	8001a44 <DisplayCardTypeInfo+0x78>
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d00a      	beq.n	8001a58 <DisplayCardTypeInfo+0x8c>
 8001a42:	e01d      	b.n	8001a80 <DisplayCardTypeInfo+0xb4>
        {
        case ISO15693_UID_SLI_STATE:        /* SLI Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI\n");
 8001a44:	4859      	ldr	r0, [pc, #356]	@ (8001bac <DisplayCardTypeInfo+0x1e0>)
 8001a46:	f01b fc73 	bl	801d330 <puts>
 8001a4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f01b fb27 	bl	801d0a4 <fflush>
            break;
 8001a56:	e020      	b.n	8001a9a <DisplayCardTypeInfo+0xce>

        case ISO15693_UID_SLI_S_STATE:      /* SLI-S Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI-S\n");
 8001a58:	4855      	ldr	r0, [pc, #340]	@ (8001bb0 <DisplayCardTypeInfo+0x1e4>)
 8001a5a:	f01b fc69 	bl	801d330 <puts>
 8001a5e:	4b52      	ldr	r3, [pc, #328]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f01b fb1d 	bl	801d0a4 <fflush>
            break;
 8001a6a:	e016      	b.n	8001a9a <DisplayCardTypeInfo+0xce>

        case ISO15693_UID_SLI_L_STATE:      /* SLI-L Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI-L\n");
 8001a6c:	4851      	ldr	r0, [pc, #324]	@ (8001bb4 <DisplayCardTypeInfo+0x1e8>)
 8001a6e:	f01b fc5f 	bl	801d330 <puts>
 8001a72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f01b fb13 	bl	801d0a4 <fflush>
            break;
 8001a7e:	e00c      	b.n	8001a9a <DisplayCardTypeInfo+0xce>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001a80:	484d      	ldr	r0, [pc, #308]	@ (8001bb8 <DisplayCardTypeInfo+0x1ec>)
 8001a82:	f01b fc55 	bl	801d330 <puts>
 8001a86:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f01b fb09 	bl	801d0a4 <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001a92:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001a96:	81fb      	strh	r3, [r7, #14]
            break;
 8001a98:	bf00      	nop
        }
        break;
 8001a9a:	e07e      	b.n	8001b9a <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_SLIX_STATE:         /* SLIX Card state */
        /* Switch based on Card Type(SLIX/SLIX-S/SLIX-L) */
        switch (pUID[ISO15693_UID_CARDSEL_IDPOS])
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3305      	adds	r3, #5
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d01a      	beq.n	8001adc <DisplayCardTypeInfo+0x110>
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	dc22      	bgt.n	8001af0 <DisplayCardTypeInfo+0x124>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d002      	beq.n	8001ab4 <DisplayCardTypeInfo+0xe8>
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d00a      	beq.n	8001ac8 <DisplayCardTypeInfo+0xfc>
 8001ab2:	e01d      	b.n	8001af0 <DisplayCardTypeInfo+0x124>
        {
        case ISO15693_UID_SLIX_STATE:       /* SLIX Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX\n");
 8001ab4:	4841      	ldr	r0, [pc, #260]	@ (8001bbc <DisplayCardTypeInfo+0x1f0>)
 8001ab6:	f01b fc3b 	bl	801d330 <puts>
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f01b faef 	bl	801d0a4 <fflush>
            break;
 8001ac6:	e020      	b.n	8001b0a <DisplayCardTypeInfo+0x13e>

        case ISO15693_UID_SLIX_S_STATE:     /* SLIX-S Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX-S\n");
 8001ac8:	483d      	ldr	r0, [pc, #244]	@ (8001bc0 <DisplayCardTypeInfo+0x1f4>)
 8001aca:	f01b fc31 	bl	801d330 <puts>
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f01b fae5 	bl	801d0a4 <fflush>
            break;
 8001ada:	e016      	b.n	8001b0a <DisplayCardTypeInfo+0x13e>

        case ISO15693_UID_SLIX_L_STATE:     /* SLIX-L Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX-L\n");
 8001adc:	4839      	ldr	r0, [pc, #228]	@ (8001bc4 <DisplayCardTypeInfo+0x1f8>)
 8001ade:	f01b fc27 	bl	801d330 <puts>
 8001ae2:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f01b fadb 	bl	801d0a4 <fflush>
            break;
 8001aee:	e00c      	b.n	8001b0a <DisplayCardTypeInfo+0x13e>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001af0:	4831      	ldr	r0, [pc, #196]	@ (8001bb8 <DisplayCardTypeInfo+0x1ec>)
 8001af2:	f01b fc1d 	bl	801d330 <puts>
 8001af6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f01b fad1 	bl	801d0a4 <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001b02:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001b06:	81fb      	strh	r3, [r7, #14]
            break;
 8001b08:	bf00      	nop
        }
        break;
 8001b0a:	e046      	b.n	8001b9a <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_SLIX2_STATE:        /* SLIX2 Card state */
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: ICODE SLIX2\n");
 8001b0c:	482e      	ldr	r0, [pc, #184]	@ (8001bc8 <DisplayCardTypeInfo+0x1fc>)
 8001b0e:	f01b fc0f 	bl	801d330 <puts>
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f01b fac3 	bl	801d0a4 <fflush>
        break;
 8001b1e:	e03c      	b.n	8001b9a <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_DNA_STATE:
        /* Switch based on Card Type(ICode DNA or NTag 5 Series) */
        switch ((pUID[ISO15693_MFGID_CARDSEL_IDPOS] & ISO15693_MFGID_DNA_CARDSEL_MSK) >> ISO15693_MFGID_DNA_CARDSEL_BITPOS)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3304      	adds	r3, #4
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	119b      	asrs	r3, r3, #6
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <DisplayCardTypeInfo+0x16a>
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d00a      	beq.n	8001b4a <DisplayCardTypeInfo+0x17e>
 8001b34:	e016      	b.n	8001b64 <DisplayCardTypeInfo+0x198>
        {
        case ISO15693_UID_ICODE_DNA_STATE:  /* ICode DNA Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE DNA\n");
 8001b36:	4825      	ldr	r0, [pc, #148]	@ (8001bcc <DisplayCardTypeInfo+0x200>)
 8001b38:	f01b fbfa 	bl	801d330 <puts>
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f01b faae 	bl	801d0a4 <fflush>
            break;
 8001b48:	e019      	b.n	8001b7e <DisplayCardTypeInfo+0x1b2>

        case ISO15693_UID_NTAG_5_SERIES:    /* NTag 5 Series */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: NTag 5 Series\n");
 8001b4a:	4821      	ldr	r0, [pc, #132]	@ (8001bd0 <DisplayCardTypeInfo+0x204>)
 8001b4c:	f01b fbf0 	bl	801d330 <puts>
 8001b50:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f01b faa4 	bl	801d0a4 <fflush>
            *pNTag5_State = 1;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
            break;
 8001b62:	e00c      	b.n	8001b7e <DisplayCardTypeInfo+0x1b2>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001b64:	4814      	ldr	r0, [pc, #80]	@ (8001bb8 <DisplayCardTypeInfo+0x1ec>)
 8001b66:	f01b fbe3 	bl	801d330 <puts>
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f01b fa97 	bl	801d0a4 <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001b76:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001b7a:	81fb      	strh	r3, [r7, #14]
            break;
 8001b7c:	bf00      	nop
        }
        break;
 8001b7e:	e00c      	b.n	8001b9a <DisplayCardTypeInfo+0x1ce>

    default:                                /* default */
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <DisplayCardTypeInfo+0x1ec>)
 8001b82:	f01b fbd5 	bl	801d330 <puts>
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <DisplayCardTypeInfo+0x1dc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f01b fa89 	bl	801d0a4 <fflush>
        /* Update status */
        status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001b92:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001b96:	81fb      	strh	r3, [r7, #14]
        break;
 8001b98:	bf00      	nop
    }

    /* Return Status */
    return status;
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	0801f460 	.word	0x0801f460
 8001ba8:	2000002c 	.word	0x2000002c
 8001bac:	0801f488 	.word	0x0801f488
 8001bb0:	0801f49c 	.word	0x0801f49c
 8001bb4:	0801f4b4 	.word	0x0801f4b4
 8001bb8:	0801f4cc 	.word	0x0801f4cc
 8001bbc:	0801f4e8 	.word	0x0801f4e8
 8001bc0:	0801f500 	.word	0x0801f500
 8001bc4:	0801f518 	.word	0x0801f518
 8001bc8:	0801f530 	.word	0x0801f530
 8001bcc:	0801f548 	.word	0x0801f548
 8001bd0:	0801f55c 	.word	0x0801f55c

08001bd4 <ReadMultipleBlock_HighDataRate>:
 * \brief   This functions performs Read Multiple Blocks at higher data rates with NTag 5.
 * \param   *pUID   UID Pointer
 * \return  status  Returns the function status
 **********************************************************************************************/
static void ReadMultipleBlock_HighDataRate(uint8_t bNTag5_State)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
            DEBUG_PRINTF("\nFailed to switch to selected higher baud rate using Parameter Select Exchange");
            DEBUG_PRINTF("\n!!!!!!!!!!!!Try with NTag 5 Cards supporting higer data rates!!!!!!!!!!!!");
        }
    }
#endif /* CUSTOM_HIGH_DATA_RATE_DEMO */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <MX_SPI3_Init+0x78>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c22:	2218      	movs	r2, #24
 8001c24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c46:	2208      	movs	r2, #8
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_SPI3_Init+0x74>)
 8001c4c:	f017 fad6 	bl	80191fc <HAL_SPI_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001c56:	f7ff fad7 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000020c 	.word	0x2000020c
 8001c64:	40003c00 	.word	0x40003c00

08001c68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_SPI_MspInit+0x7c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d128      	bne.n	8001cdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 8001cba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ccc:	2306      	movs	r3, #6
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <HAL_SPI_MspInit+0x84>)
 8001cd8:	f015 ff28 	bl	8017b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	@ 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40003c00 	.word	0x40003c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48000800 	.word	0x48000800

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <HAL_MspInit+0x44>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <HAL_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <HAL_MspInit+0x44>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <MemManage_Handler+0x4>

08001d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f015 fcf9 	bl	8017784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PN5180_IRQ_Pin);
 8001d9a:	2010      	movs	r0, #16
 8001d9c:	f016 f870 	bl	8017e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <TIM2_IRQHandler+0x10>)
 8001daa:	f018 f92b 	bl	801a004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200002c0 	.word	0x200002c0

08001db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <USART1_IRQHandler+0x10>)
 8001dbe:	f019 fa07 	bl	801b1d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000460 	.word	0x20000460

08001dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_kill>:

int _kill(int pid, int sig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de6:	f01b fbe5 	bl	801d5b4 <__errno>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2216      	movs	r2, #22
 8001dee:	601a      	str	r2, [r3, #0]
  return -1;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_exit>:

void _exit (int status)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ffe7 	bl	8001ddc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e0e:	bf00      	nop
 8001e10:	e7fd      	b.n	8001e0e <_exit+0x12>

08001e12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00a      	b.n	8001e3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e24:	f3af 8000 	nop.w
 8001e28:	4601      	mov	r1, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	b2ca      	uxtb	r2, r1
 8001e32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dbf0      	blt.n	8001e24 <_read+0x12>
  }

  return len;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e009      	b.n	8001e72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	60ba      	str	r2, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fb18 	bl	800249c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf1      	blt.n	8001e5e <_write+0x12>
  }
  return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_close>:

int _close(int file)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eac:	605a      	str	r2, [r3, #4]
  return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_isatty>:

int _isatty(int file)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f01b fb4a 	bl	801d5b4 <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2000c000 	.word	0x2000c000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	20000270 	.word	0x20000270
 8001f54:	20001910 	.word	0x20001910

08001f58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <SystemInit+0x20>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <SystemInit+0x20>)
 8001f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b096      	sub	sp, #88	@ 0x58
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	222c      	movs	r2, #44	@ 0x2c
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f01b fab1 	bl	801d510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fae:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fb0:	4a38      	ldr	r2, [pc, #224]	@ (8002094 <MX_TIM1_Init+0x118>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001fb4:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fb6:	224f      	movs	r2, #79	@ 0x4f
 8001fb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001fc0:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fc2:	f240 1271 	movw	r2, #369	@ 0x171
 8001fc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fce:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fda:	482d      	ldr	r0, [pc, #180]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001fdc:	f017 fe54 	bl	8019c88 <HAL_TIM_PWM_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001fe6:	f7ff f90f 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4824      	ldr	r0, [pc, #144]	@ (8002090 <MX_TIM1_Init+0x114>)
 8001ffe:	f018 fec7 	bl	801ad90 <HAL_TIMEx_MasterConfigSynchronization>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002008:	f7ff f8fe 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200c:	2360      	movs	r3, #96	@ 0x60
 800200e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 8002010:	23b9      	movs	r3, #185	@ 0xb9
 8002012:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002014:	2300      	movs	r3, #0
 8002016:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002024:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002028:	220c      	movs	r2, #12
 800202a:	4619      	mov	r1, r3
 800202c:	4818      	ldr	r0, [pc, #96]	@ (8002090 <MX_TIM1_Init+0x114>)
 800202e:	f018 f8f1 	bl	801a214 <HAL_TIM_PWM_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002038:	f7ff f8e6 	bl	8001208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002050:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002054:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800205e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <MX_TIM1_Init+0x114>)
 8002072:	f018 fef3 	bl	801ae5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800207c:	f7ff f8c4 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <MX_TIM1_Init+0x114>)
 8002082:	f000 f8e5 	bl	8002250 <HAL_TIM_MspPostInit>

}
 8002086:	bf00      	nop
 8002088:	3758      	adds	r7, #88	@ 0x58
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000274 	.word	0x20000274
 8002094:	40012c00 	.word	0x40012c00

08002098 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80020be:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020c0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80020c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80020cc:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020ce:	f241 3287 	movw	r2, #4999	@ 0x1387
 80020d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e0:	4813      	ldr	r0, [pc, #76]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020e2:	f017 fcb1 	bl	8019a48 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020ec:	f7ff f88c 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	@ (8002130 <MX_TIM2_Init+0x98>)
 80020fe:	f018 f99d 	bl	801a43c <HAL_TIM_ConfigClockSource>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002108:	f7ff f87e 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_TIM2_Init+0x98>)
 800211a:	f018 fe39 	bl	801ad90 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002124:	f7ff f870 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200002c0 	.word	0x200002c0

08002134 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <MX_TIM6_Init+0x64>)
 8002146:	4a15      	ldr	r2, [pc, #84]	@ (800219c <MX_TIM6_Init+0x68>)
 8002148:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <MX_TIM6_Init+0x64>)
 800214c:	224f      	movs	r2, #79	@ 0x4f
 800214e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_TIM6_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <MX_TIM6_Init+0x64>)
 8002158:	2201      	movs	r2, #1
 800215a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <MX_TIM6_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002162:	480d      	ldr	r0, [pc, #52]	@ (8002198 <MX_TIM6_Init+0x64>)
 8002164:	f017 fc70 	bl	8019a48 <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800216e:	f7ff f84b 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <MX_TIM6_Init+0x64>)
 8002180:	f018 fe06 	bl	801ad90 <HAL_TIMEx_MasterConfigSynchronization>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800218a:	f7ff f83d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000030c 	.word	0x2000030c
 800219c:	40001000 	.word	0x40001000

080021a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_TIM_PWM_MspInit+0x38>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10b      	bne.n	80021ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_TIM_PWM_MspInit+0x3c>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <HAL_TIM_PWM_MspInit+0x3c>)
 80021b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <HAL_TIM_PWM_MspInit+0x3c>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f0:	d114      	bne.n	800221c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_TIM_Base_MspInit+0x68>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <HAL_TIM_Base_MspInit+0x68>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_TIM_Base_MspInit+0x68>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2102      	movs	r1, #2
 800220e:	201c      	movs	r0, #28
 8002210:	f015 fbd7 	bl	80179c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f015 fbf0 	bl	80179fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800221a:	e010      	b.n	800223e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <HAL_TIM_Base_MspInit+0x6c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10b      	bne.n	800223e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002226:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <HAL_TIM_Base_MspInit+0x68>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	4a07      	ldr	r2, [pc, #28]	@ (8002248 <HAL_TIM_Base_MspInit+0x68>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6593      	str	r3, [r2, #88]	@ 0x58
 8002232:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_TIM_Base_MspInit+0x68>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40001000 	.word	0x40001000

08002250 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_TIM_MspPostInit+0x68>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11d      	bne.n	80022ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <HAL_TIM_MspPostInit+0x6c>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <HAL_TIM_MspPostInit+0x6c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <HAL_TIM_MspPostInit+0x6c>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 800228a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800228e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002294:	2302      	movs	r3, #2
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800229c:	2301      	movs	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022aa:	f015 fc3f 	bl	8017b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40021000 	.word	0x40021000

080022c0 <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 80022d0:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80022d4:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80022d8:	3360      	adds	r3, #96	@ 0x60
 80022da:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 80022dc:	480b      	ldr	r0, [pc, #44]	@ (800230c <delay_us+0x4c>)
 80022de:	f017 fc0b 	bl	8019af8 <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <delay_us+0x4c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	89fa      	ldrh	r2, [r7, #14]
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 80022ea:	e003      	b.n	80022f4 <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 80022ec:	4b07      	ldr	r3, [pc, #28]	@ (800230c <delay_us+0x4c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d9f6      	bls.n	80022ec <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 80022fe:	4803      	ldr	r0, [pc, #12]	@ (800230c <delay_us+0x4c>)
 8002300:	f017 fc46 	bl	8019b90 <HAL_TIM_Base_Stop>
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000030c 	.word	0x2000030c

08002310 <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	460a      	mov	r2, r1
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	4613      	mov	r3, r2
 800231e:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 8002320:	e019      	b.n	8002356 <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 8002322:	210c      	movs	r1, #12
 8002324:	4811      	ldr	r0, [pc, #68]	@ (800236c <beep_start+0x5c>)
 8002326:	f017 fd07 	bl	8019d38 <HAL_TIM_PWM_Start>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 8002330:	f7fe ff6a 	bl	8001208 <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 8002334:	88bb      	ldrh	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	f015 fa44 	bl	80177c4 <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 800233c:	210c      	movs	r1, #12
 800233e:	480b      	ldr	r0, [pc, #44]	@ (800236c <beep_start+0x5c>)
 8002340:	f017 fdd8 	bl	8019ef4 <HAL_TIM_PWM_Stop>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 800234a:	f7fe ff5d 	bl	8001208 <Error_Handler>
		}
		HAL_Delay(interval);
 800234e:	88bb      	ldrh	r3, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f015 fa37 	bl	80177c4 <HAL_Delay>
	while( times -- )
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	71fa      	strb	r2, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e0      	bne.n	8002322 <beep_start+0x12>
	}
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000274 	.word	0x20000274

08002370 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002374:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <MX_USART1_UART_Init+0x64>)
 8002378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 800237c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b2:	4807      	ldr	r0, [pc, #28]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 80023b4:	f018 fde8 	bl	801af88 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023be:	f7fe ff23 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 80023c2:	2201      	movs	r2, #1
 80023c4:	4904      	ldr	r1, [pc, #16]	@ (80023d8 <MX_USART1_UART_Init+0x68>)
 80023c6:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <MX_USART1_UART_Init+0x60>)
 80023c8:	f018 feb6 	bl	801b138 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000460 	.word	0x20000460
 80023d4:	40013800 	.word	0x40013800
 80023d8:	20000358 	.word	0x20000358

080023dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a0      	sub	sp, #128	@ 0x80
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	225c      	movs	r2, #92	@ 0x5c
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f01b f887 	bl	801d510 <memset>
  if(uartHandle->Instance==USART1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <HAL_UART_MspInit+0xb8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d13f      	bne.n	800248c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800240c:	2301      	movs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4618      	mov	r0, r3
 800241a:	f016 fbe5 	bl	8018be8 <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002424:	f7fe fef0 	bl	8001208 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_UART_MspInit+0xbc>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242c:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_UART_MspInit+0xbc>)
 800242e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002432:	6613      	str	r3, [r2, #96]	@ 0x60
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_UART_MspInit+0xbc>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_UART_MspInit+0xbc>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <HAL_UART_MspInit+0xbc>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244c:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_UART_MspInit+0xbc>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002458:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800245c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246a:	2307      	movs	r3, #7
 800246c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002478:	f015 fb58 	bl	8017b2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2025      	movs	r0, #37	@ 0x25
 8002482:	f015 fa9e 	bl	80179c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002486:	2025      	movs	r0, #37	@ 0x25
 8002488:	f015 fab7 	bl	80179fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800248c:	bf00      	nop
 800248e:	3780      	adds	r7, #128	@ 0x80
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40013800 	.word	0x40013800
 8002498:	40021000 	.word	0x40021000

0800249c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80024a4:	1d39      	adds	r1, r7, #4
 80024a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024aa:	2201      	movs	r2, #1
 80024ac:	4803      	ldr	r0, [pc, #12]	@ (80024bc <__io_putchar+0x20>)
 80024ae:	f018 fdb9 	bl	801b024 <HAL_UART_Transmit>
	return ch;
 80024b2:	687b      	ldr	r3, [r7, #4]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000460 	.word	0x20000460

080024c0 <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <HAL_UART_RxCpltCallback+0x44>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d113      	bne.n	80024fa <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 80024d2:	490d      	ldr	r1, [pc, #52]	@ (8002508 <HAL_UART_RxCpltCallback+0x48>)
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <HAL_UART_RxCpltCallback+0x4c>)
 80024d6:	f01a febb 	bl	801d250 <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <HAL_UART_RxCpltCallback+0x50>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	b2d1      	uxtb	r1, r2
 80024e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002510 <HAL_UART_RxCpltCallback+0x50>)
 80024e4:	7011      	strb	r1, [r2, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_UART_RxCpltCallback+0x54>)
 80024ea:	7819      	ldrb	r1, [r3, #0]
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_UART_RxCpltCallback+0x48>)
 80024ee:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 80024f0:	2201      	movs	r2, #1
 80024f2:	4908      	ldr	r1, [pc, #32]	@ (8002514 <HAL_UART_RxCpltCallback+0x54>)
 80024f4:	4808      	ldr	r0, [pc, #32]	@ (8002518 <HAL_UART_RxCpltCallback+0x58>)
 80024f6:	f018 fe1f 	bl	801b138 <HAL_UART_Receive_IT>
	}
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40013800 	.word	0x40013800
 8002508:	2000035c 	.word	0x2000035c
 800250c:	0801f574 	.word	0x0801f574
 8002510:	2000045c 	.word	0x2000045c
 8002514:	20000358 	.word	0x20000358
 8002518:	20000460 	.word	0x20000460

0800251c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002554 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002520:	f7ff fd1a 	bl	8001f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002524:	480c      	ldr	r0, [pc, #48]	@ (8002558 <LoopForever+0x6>)
  ldr r1, =_edata
 8002526:	490d      	ldr	r1, [pc, #52]	@ (800255c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <LoopForever+0xe>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <LoopForever+0x16>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254a:	f01b f839 	bl	801d5c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800254e:	f7fe fdc5 	bl	80010dc <main>

08002552 <LoopForever>:

LoopForever:
    b LoopForever
 8002552:	e7fe      	b.n	8002552 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002554:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002560:	08020b2c 	.word	0x08020b2c
  ldr r2, =_sbss
 8002564:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002568:	2000190c 	.word	0x2000190c

0800256c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC1_IRQHandler>
	...

08002570 <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e010      	b.n	80025a4 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	480a      	ldr	r0, [pc, #40]	@ (80025b8 <phApp_Print_Buff+0x48>)
 800258e:	f01a fe5f 	bl	801d250 <iprintf>
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <phApp_Print_Buff+0x4c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f01a fd83 	bl	801d0a4 <fflush>
    for(i = 0; i < num; i++)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3ea      	bcc.n	8002582 <phApp_Print_Buff+0x12>
    }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0801f62c 	.word	0x0801f62c
 80025bc:	2000002c 	.word	0x2000002c

080025c0 <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80025c8:	2300      	movs	r3, #0
 80025ca:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60bb      	str	r3, [r7, #8]
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <phApp_Comp_Init+0x24>)
 80025d4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 80025d6:	89fb      	ldrh	r3, [r7, #14]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	200004e8 	.word	0x200004e8

080025e8 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0

#ifdef PH_PLATFORM_HAS_ICFRONTEND
#if !(defined(PH_OSAL_LINUX) && defined(NXPBUILD__PHHAL_HW_PN5190))
    phDriver_Pin_Config_t pinCfg;

    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	717b      	strb	r3, [r7, #5]
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;
 80025f2:	2301      	movs	r3, #1
 80025f4:	713b      	strb	r3, [r7, #4]

    pinCfg.eInterruptConfig = PIN_IRQ_TRIGGER_TYPE;
 80025f6:	2304      	movs	r3, #4
 80025f8:	71bb      	strb	r3, [r7, #6]
    phDriver_PinConfig(PHDRIVER_PIN_IRQ, PH_DRIVER_PINFUNC_INTERRUPT, &pinCfg);
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2204      	movs	r2, #4
 80025fe:	2110      	movs	r1, #16
 8002600:	4803      	ldr	r0, [pc, #12]	@ (8002610 <phApp_Configure_IRQ+0x28>)
 8002602:	f014 fd03 	bl	801700c <phDriver_PinConfig>
    EnableIRQ(EINT_IRQn);
#endif /* PHDRIVER_KINETIS_K82 */

#endif /* #ifdef PH_PLATFORM_HAS_ICFRONTEND */

    return PH_ERR_SUCCESS;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	48000400 	.word	0x48000400

08002614 <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	460b      	mov	r3, r1
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	2b20      	cmp	r3, #32
 8002626:	d002      	beq.n	800262e <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002628:	f24e 4320 	movw	r3, #58400	@ 0xe420
 800262c:	e01b      	b.n	8002666 <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <phCryptoRng_Sw_Init+0x24>
 8002634:	2321      	movs	r3, #33	@ 0x21
 8002636:	e016      	b.n	8002666 <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <phCryptoRng_Sw_Init+0x2e>
 800263e:	2321      	movs	r3, #33	@ 0x21
 8002640:	e011      	b.n	8002666 <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f24e 4201 	movw	r2, #58369	@ 0xe401
 8002648:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3308      	adds	r3, #8
 8002654:	2210      	movs	r2, #16
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f01a ff59 	bl	801d510 <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b092      	sub	sp, #72	@ 0x48
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	4613      	mov	r3, r2
 800267c:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2b20      	cmp	r3, #32
 8002682:	d90e      	bls.n	80026a2 <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f107 0414 	add.w	r4, r7, #20
 800268a:	461d      	mov	r5, r3
 800268c:	6828      	ldr	r0, [r5, #0]
 800268e:	6869      	ldr	r1, [r5, #4]
 8002690:	68aa      	ldr	r2, [r5, #8]
 8002692:	68eb      	ldr	r3, [r5, #12]
 8002694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002696:	6928      	ldr	r0, [r5, #16]
 8002698:	6969      	ldr	r1, [r5, #20]
 800269a:	69aa      	ldr	r2, [r5, #24]
 800269c:	69eb      	ldr	r3, [r5, #28]
 800269e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a0:	e006      	b.n	80026b0 <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 80026a2:	79fa      	ldrb	r2, [r7, #7]
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f01a ffaf 	bl	801d60e <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	7f1b      	ldrb	r3, [r3, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10f      	bne.n	80026d8 <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 80026b8:	f107 0114 	add.w	r1, r7, #20
 80026bc:	2300      	movs	r3, #0
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	2300      	movs	r3, #0
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2300      	movs	r3, #0
 80026ca:	2220      	movs	r2, #32
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f8a9 	bl	8002824 <phCryptoRng_Sw_Instantiate>
 80026d2:	4603      	mov	r3, r0
 80026d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80026d6:	e00a      	b.n	80026ee <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 80026d8:	f107 0114 	add.w	r1, r7, #20
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	2220      	movs	r2, #32
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f914 	bl	8002912 <phCryptoRng_Sw_Reseed>
 80026ea:	4603      	mov	r3, r0
 80026ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 80026ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <phCryptoRng_Sw_Seed+0x9c>
 80026f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80026f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <phCryptoRng_Sw_Seed+0x9c>
 80026fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002700:	b2db      	uxtb	r3, r3
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <phCryptoRng_Sw_Seed+0xa8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	e000      	b.n	800270e <phCryptoRng_Sw_Seed+0x9e>
 800270c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800270e:	4618      	mov	r0, r3
 8002710:	3738      	adds	r7, #56	@ 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bdb0      	pop	{r4, r5, r7, pc}
 8002716:	bf00      	nop
 8002718:	ffffe400 	.word	0xffffe400

0800271c <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af02      	add	r7, sp, #8
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9fa 	bl	8002b20 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6858      	ldr	r0, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f103 0208 	add.w	r2, r3, #8
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2310      	movs	r3, #16
 800273e:	2100      	movs	r1, #0
 8002740:	f002 ff4e 	bl	80055e0 <phCryptoSym_Encrypt>
 8002744:	4603      	mov	r3, r0
 8002746:	83bb      	strh	r3, [r7, #28]
 8002748:	8bbb      	ldrh	r3, [r7, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <phCryptoRng_Sw_Update+0x36>
 800274e:	8bbb      	ldrh	r3, [r7, #28]
 8002750:	e064      	b.n	800281c <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d018      	beq.n	800278a <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]
 800275c:	e012      	b.n	8002784 <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 800275e:	7ffb      	ldrb	r3, [r7, #31]
 8002760:	3320      	adds	r3, #32
 8002762:	443b      	add	r3, r7
 8002764:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8002768:	7ffb      	ldrb	r3, [r7, #31]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	404a      	eors	r2, r1
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	3320      	adds	r3, #32
 8002778:	443b      	add	r3, r7
 800277a:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 800277e:	7ffb      	ldrb	r3, [r7, #31]
 8002780:	3301      	adds	r3, #1
 8002782:	77fb      	strb	r3, [r7, #31]
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d9e9      	bls.n	800275e <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f9c8 	bl	8002b20 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6858      	ldr	r0, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0208 	add.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3308      	adds	r3, #8
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2310      	movs	r3, #16
 80027a2:	2100      	movs	r1, #0
 80027a4:	f002 ff1c 	bl	80055e0 <phCryptoSym_Encrypt>
 80027a8:	4603      	mov	r3, r0
 80027aa:	83bb      	strh	r3, [r7, #28]
 80027ac:	8bbb      	ldrh	r3, [r7, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <phCryptoRng_Sw_Update+0x9a>
 80027b2:	8bbb      	ldrh	r3, [r7, #28]
 80027b4:	e032      	b.n	800281c <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 80027bc:	2300      	movs	r3, #0
 80027be:	77fb      	strb	r3, [r7, #31]
 80027c0:	e012      	b.n	80027e8 <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	7a19      	ldrb	r1, [r3, #8]
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	3310      	adds	r3, #16
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	404a      	eors	r2, r1
 80027d8:	b2d1      	uxtb	r1, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	460a      	mov	r2, r1
 80027e0:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	3301      	adds	r3, #1
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	d9e9      	bls.n	80027c2 <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f107 010c 	add.w	r1, r7, #12
 80027f6:	2200      	movs	r2, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 ffb6 	bl	800576a <phCryptoSym_LoadKeyDirect>
 80027fe:	4603      	mov	r3, r0
 8002800:	83bb      	strh	r3, [r7, #28]
 8002802:	8bbb      	ldrh	r3, [r7, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <phCryptoRng_Sw_Update+0xf0>
 8002808:	8bbb      	ldrh	r3, [r7, #28]
 800280a:	e007      	b.n	800281c <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	2210      	movs	r2, #16
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f01a fe7b 	bl	801d510 <memset>
    return PH_ERR_SUCCESS;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08e      	sub	sp, #56	@ 0x38
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002840:	441a      	add	r2, r3
 8002842:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002846:	4413      	add	r3, r2
 8002848:	2b20      	cmp	r3, #32
 800284a:	d002      	beq.n	8002852 <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 800284c:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8002850:	e05b      	b.n	800290a <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f01a fed7 	bl	801d60e <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	f107 0214 	add.w	r2, r7, #20
 8002866:	4413      	add	r3, r2
 8002868:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f01a fecd 	bl	801d60e <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800287a:	4413      	add	r3, r2
 800287c:	f107 0214 	add.w	r2, r7, #20
 8002880:	4413      	add	r3, r2
 8002882:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8002886:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002888:	4618      	mov	r0, r3
 800288a:	f01a fec0 	bl	801d60e <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f88f 	bl	80029b8 <phCryptoRng_Sw_BlockCipherDf>
 800289a:	4603      	mov	r3, r0
 800289c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800289e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <phCryptoRng_Sw_Instantiate+0x84>
 80028a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028a6:	e030      	b.n	800290a <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3308      	adds	r3, #8
 80028ac:	2210      	movs	r2, #16
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f01a fe2d 	bl	801d510 <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6858      	ldr	r0, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3308      	adds	r3, #8
 80028be:	2200      	movs	r2, #0
 80028c0:	4619      	mov	r1, r3
 80028c2:	f002 ff52 	bl	800576a <phCryptoSym_LoadKeyDirect>
 80028c6:	4603      	mov	r3, r0
 80028c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80028ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <phCryptoRng_Sw_Instantiate+0xb0>
 80028d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028d2:	e01a      	b.n	800290a <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff ff1e 	bl	800271c <phCryptoRng_Sw_Update>
 80028e0:	4603      	mov	r3, r0
 80028e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80028e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <phCryptoRng_Sw_Instantiate+0xca>
 80028ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028ec:	e00d      	b.n	800290a <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	2220      	movs	r2, #32
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f01a fe04 	bl	801d510 <memset>

    return PH_ERR_SUCCESS;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3738      	adds	r7, #56	@ 0x38
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b08e      	sub	sp, #56	@ 0x38
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	7f1b      	ldrb	r3, [r3, #28]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d002      	beq.n	8002930 <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 800292a:	f24e 4325 	movw	r3, #58405	@ 0xe425
 800292e:	e03e      	b.n	80029ae <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002936:	4413      	add	r3, r2
 8002938:	2b20      	cmp	r3, #32
 800293a:	d002      	beq.n	8002942 <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 800293c:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8002940:	e035      	b.n	80029ae <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f01a fe5f 	bl	801d60e <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	f107 0214 	add.w	r2, r7, #20
 8002956:	4413      	add	r3, r2
 8002958:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f01a fe55 	bl	801d60e <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f824 	bl	80029b8 <phCryptoRng_Sw_BlockCipherDf>
 8002970:	4603      	mov	r3, r0
 8002972:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <phCryptoRng_Sw_Reseed+0x6c>
 800297a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800297c:	e017      	b.n	80029ae <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4619      	mov	r1, r3
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fec9 	bl	800271c <phCryptoRng_Sw_Update>
 800298a:	4603      	mov	r3, r0
 800298c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800298e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <phCryptoRng_Sw_Reseed+0x86>
 8002994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002996:	e00a      	b.n	80029ae <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	2220      	movs	r2, #32
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f01a fdb2 	bl	801d510 <memset>

    return PH_ERR_SUCCESS;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3738      	adds	r7, #56	@ 0x38
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b096      	sub	sp, #88	@ 0x58
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	4954      	ldr	r1, [pc, #336]	@ (8002b1c <phCryptoRng_Sw_BlockCipherDf+0x164>)
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fecd 	bl	800576a <phCryptoSym_LoadKeyDirect>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <phCryptoRng_Sw_BlockCipherDf+0x2c>
 80029de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029e2:	e097      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f01a fd8f 	bl	801d510 <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 80029f2:	2320      	movs	r3, #32
 80029f4:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 80029f6:	2320      	movs	r3, #32
 80029f8:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 80029fc:	f107 030c 	add.w	r3, r7, #12
 8002a00:	3318      	adds	r3, #24
 8002a02:	2220      	movs	r2, #32
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f01a fe01 	bl	801d60e <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f107 010c 	add.w	r1, r7, #12
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 fe6e 	bl	80056fe <phCryptoSym_LoadIv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <phCryptoRng_Sw_BlockCipherDf+0x7e>
 8002a30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a34:	e06e      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6858      	ldr	r0, [r3, #4]
 8002a3a:	f107 020c 	add.w	r2, r7, #12
 8002a3e:	f107 030b 	add.w	r3, r7, #11
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2340      	movs	r3, #64	@ 0x40
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	f002 fe0a 	bl	8005664 <phCryptoSym_CalculateMac>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0xac>
 8002a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a62:	e057      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 8002a64:	2301      	movs	r3, #1
 8002a66:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6858      	ldr	r0, [r3, #4]
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	f107 010c 	add.w	r1, r7, #12
 8002a78:	f107 020b 	add.w	r2, r7, #11
 8002a7c:	9201      	str	r2, [sp, #4]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2340      	movs	r3, #64	@ 0x40
 8002a82:	460a      	mov	r2, r1
 8002a84:	2101      	movs	r1, #1
 8002a86:	f002 fded 	bl	8005664 <phCryptoSym_CalculateMac>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <phCryptoRng_Sw_BlockCipherDf+0xe6>
 8002a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a9c:	e03a      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fe5f 	bl	800576a <phCryptoSym_LoadKeyDirect>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <phCryptoRng_Sw_BlockCipherDf+0x108>
 8002aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002abe:	e029      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6858      	ldr	r0, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f103 0210 	add.w	r2, r3, #16
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2310      	movs	r3, #16
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f002 fd85 	bl	80055e0 <phCryptoSym_Encrypt>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <phCryptoRng_Sw_BlockCipherDf+0x132>
 8002ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ae8:	e014      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6858      	ldr	r0, [r3, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	3310      	adds	r3, #16
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2310      	movs	r3, #16
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	2100      	movs	r1, #0
 8002afa:	f002 fd71 	bl	80055e0 <phCryptoSym_Encrypt>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8002b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b10:	e000      	b.n	8002b14 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3750      	adds	r7, #80	@ 0x50
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	0801fe20 	.word	0x0801fe20

08002b20 <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e018      	b.n	8002b60 <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	7a1b      	ldrb	r3, [r3, #8]
 8002b36:	2bff      	cmp	r3, #255	@ 0xff
 8002b38:	d00a      	beq.n	8002b50 <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	441a      	add	r2, r3
 8002b40:	7a12      	ldrb	r2, [r2, #8]
 8002b42:	3201      	adds	r2, #1
 8002b44:	b2d1      	uxtb	r1, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	460a      	mov	r2, r1
 8002b4c:	721a      	strb	r2, [r3, #8]
            break;
 8002b4e:	e00b      	b.n	8002b68 <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	2200      	movs	r2, #0
 8002b58:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	d9e3      	bls.n	8002b2e <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <phCryptoRng_Seed+0x1a>
 8002b88:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002b8c:	e027      	b.n	8002bde <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <phCryptoRng_Seed+0x2c>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <phCryptoRng_Seed+0x2c>
 8002b9a:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8002b9e:	e01e      	b.n	8002bde <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ba8:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8002bac:	d004      	beq.n	8002bb8 <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002bae:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002bb2:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8002bb4:	8afb      	ldrh	r3, [r7, #22]
 8002bb6:	e012      	b.n	8002bde <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff fd51 	bl	8002670 <phCryptoRng_Sw_Seed>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	82fb      	strh	r3, [r7, #22]
            break;
 8002bd2:	e003      	b.n	8002bdc <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002bd4:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002bd8:	82fb      	strh	r3, [r7, #22]
            break;
 8002bda:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8002bdc:	8afb      	ldrh	r3, [r7, #22]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d002      	beq.n	8002c04 <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8002bfe:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8002c02:	e016      	b.n	8002c32 <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <phCryptoSym_Sw_Init+0x28>
 8002c0a:	2321      	movs	r3, #33	@ 0x21
 8002c0c:	e011      	b.n	8002c32 <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8002c14:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f80c 	bl	8002c3a <phCryptoSym_Sw_InvalidateKey>
 8002c22:	4603      	mov	r3, r0
 8002c24:	82fb      	strh	r3, [r7, #22]
 8002c26:	8afb      	ldrh	r3, [r7, #22]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <phCryptoSym_Sw_Init+0x4a>
 8002c2c:	8afb      	ldrh	r3, [r7, #22]
 8002c2e:	e000      	b.n	8002c32 <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3308      	adds	r3, #8
 8002c46:	2220      	movs	r2, #32
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f01a fc60 	bl	801d510 <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3328      	adds	r3, #40	@ 0x28
 8002c54:	2210      	movs	r2, #16
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f01a fc59 	bl	801d510 <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c64:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	461a      	mov	r2, r3
 8002c88:	460b      	mov	r3, r1
 8002c8a:	817b      	strh	r3, [r7, #10]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2102      	movs	r1, #2
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fb13 	bl	80032d8 <phCryptoSym_Sw_GetConfig>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	82fb      	strh	r3, [r7, #22]
 8002cb6:	8afb      	ldrh	r3, [r7, #22]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <phCryptoSym_Sw_Encrypt+0x44>
 8002cbc:	8afb      	ldrh	r3, [r7, #22]
 8002cbe:	e097      	b.n	8002df0 <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 8002cc0:	8aba      	ldrh	r2, [r7, #20]
 8002cc2:	893b      	ldrh	r3, [r7, #8]
 8002cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cc8:	fb01 f202 	mul.w	r2, r1, r2
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8002cd4:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8002cd8:	e08a      	b.n	8002df0 <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3328      	adds	r3, #40	@ 0x28
 8002cde:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8002ce4:	e070      	b.n	8002dc8 <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d009      	beq.n	8002d02 <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 8002cee:	8bfb      	ldrh	r3, [r7, #30]
 8002cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cf2:	18d0      	adds	r0, r2, r3
 8002cf4:	8bfb      	ldrh	r3, [r7, #30]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	8aba      	ldrh	r2, [r7, #20]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f01a fc86 	bl	801d60e <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d027      	beq.n	8002d5a <phCryptoSym_Sw_Encrypt+0xde>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db22      	blt.n	8002d54 <phCryptoSym_Sw_Encrypt+0xd8>
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d81f      	bhi.n	8002d54 <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	777b      	strb	r3, [r7, #29]
 8002d18:	e016      	b.n	8002d48 <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 8002d1a:	7f7a      	ldrb	r2, [r7, #29]
 8002d1c:	8bfb      	ldrh	r3, [r7, #30]
 8002d1e:	4413      	add	r3, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	4413      	add	r3, r2
 8002d26:	7819      	ldrb	r1, [r3, #0]
 8002d28:	7f7b      	ldrb	r3, [r7, #29]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	7f78      	ldrb	r0, [r7, #29]
 8002d32:	8bfb      	ldrh	r3, [r7, #30]
 8002d34:	4403      	add	r3, r0
 8002d36:	4618      	mov	r0, r3
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	4403      	add	r3, r0
 8002d3c:	404a      	eors	r2, r1
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002d42:	7f7b      	ldrb	r3, [r7, #29]
 8002d44:	3301      	adds	r3, #1
 8002d46:	777b      	strb	r3, [r7, #29]
 8002d48:	7f7b      	ldrb	r3, [r7, #29]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	8abb      	ldrh	r3, [r7, #20]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3e3      	bcc.n	8002d1a <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 8002d52:	e003      	b.n	8002d5c <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002d54:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002d58:	e04a      	b.n	8002df0 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8002d5a:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8002d5c:	897b      	ldrh	r3, [r7, #10]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d10d      	bne.n	8002d80 <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8002d64:	8bfb      	ldrh	r3, [r7, #30]
 8002d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d68:	4413      	add	r3, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f002 fb91 	bl	8005494 <phCryptoSym_Sw_DecryptBlock>
 8002d72:	4603      	mov	r3, r0
 8002d74:	82fb      	strh	r3, [r7, #22]
 8002d76:	8afb      	ldrh	r3, [r7, #22]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00f      	beq.n	8002d9c <phCryptoSym_Sw_Encrypt+0x120>
 8002d7c:	8afb      	ldrh	r3, [r7, #22]
 8002d7e:	e037      	b.n	8002df0 <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8002d80:	8bfb      	ldrh	r3, [r7, #30]
 8002d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d84:	4413      	add	r3, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f002 fadd 	bl	8005348 <phCryptoSym_Sw_EncryptBlock>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	82fb      	strh	r3, [r7, #22]
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <phCryptoSym_Sw_Encrypt+0x120>
 8002d98:	8afb      	ldrh	r3, [r7, #22]
 8002d9a:	e029      	b.n	8002df0 <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <phCryptoSym_Sw_Encrypt+0x142>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db07      	blt.n	8002db8 <phCryptoSym_Sw_Encrypt+0x13c>
 8002da8:	3b01      	subs	r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d804      	bhi.n	8002db8 <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 8002dae:	8bfb      	ldrh	r3, [r7, #30]
 8002db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002db2:	4413      	add	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
                break;
 8002db6:	e003      	b.n	8002dc0 <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002db8:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002dbc:	e018      	b.n	8002df0 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8002dbe:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8002dc0:	8aba      	ldrh	r2, [r7, #20]
 8002dc2:	8bfb      	ldrh	r3, [r7, #30]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8002dc8:	8bfa      	ldrh	r2, [r7, #30]
 8002dca:	893b      	ldrh	r3, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d38a      	bcc.n	8002ce6 <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d003      	beq.n	8002de0 <phCryptoSym_Sw_Encrypt+0x164>
 8002dd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da06      	bge.n	8002dee <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3328      	adds	r3, #40	@ 0x28
 8002de4:	8aba      	ldrh	r2, [r7, #20]
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f01a fc10 	bl	801d60e <memcpy>
    }

    return PH_ERR_SUCCESS;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b094      	sub	sp, #80	@ 0x50
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	2210      	movs	r2, #16
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f01a fb6a 	bl	801d510 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	2210      	movs	r2, #16
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f01a fb63 	bl	801d510 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 8002e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 8002e50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e54:	2210      	movs	r2, #16
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f01a fb59 	bl	801d510 <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8002e5e:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002e62:	461a      	mov	r2, r3
 8002e64:	2102      	movs	r1, #2
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fa36 	bl	80032d8 <phCryptoSym_Sw_GetConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002e72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <phCryptoSym_Sw_CalculateMac+0x88>
 8002e7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e7e:	e175      	b.n	800316c <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3328      	adds	r3, #40	@ 0x28
 8002e96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f01a fb37 	bl	801d510 <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8002ea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0e      	bge.n	8002ec8 <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 8002eaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002eae:	893b      	ldrh	r3, [r7, #8]
 8002eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002eb4:	fb01 f202 	mul.w	r2, r1, r2
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80ac 	beq.w	800301a <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8002ec2:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8002ec6:	e151      	b.n	800316c <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <phCryptoSym_Sw_CalculateMac+0xde>
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d015      	beq.n	8002f00 <phCryptoSym_Sw_CalculateMac+0x108>
 8002ed4:	e011      	b.n	8002efa <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 8002ed6:	f107 0210 	add.w	r2, r7, #16
 8002eda:	f107 0320 	add.w	r3, r7, #32
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f002 f987 	bl	80051f4 <phCryptoSym_Sw_CMAC_GenerateK1K2>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002eec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <phCryptoSym_Sw_CalculateMac+0x10c>
 8002ef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ef8:	e138      	b.n	800316c <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002efa:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002efe:	e135      	b.n	800316c <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 8002f00:	bf00      	nop
 8002f02:	e000      	b.n	8002f06 <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 8002f04:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 8002f06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f10:	fb01 f202 	mul.w	r2, r1, r2
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 8002f1c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <phCryptoSym_Sw_CalculateMac+0x132>
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d13f      	bne.n	8002faa <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 8002f2a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	893a      	ldrh	r2, [r7, #8]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 8002f36:	893b      	ldrh	r3, [r7, #8]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	18d1      	adds	r1, r2, r3
 8002f3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f44:	4618      	mov	r0, r3
 8002f46:	f01a fb62 	bl	801d60e <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 8002f4a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002f4e:	3350      	adds	r3, #80	@ 0x50
 8002f50:	443b      	add	r3, r7
 8002f52:	2280      	movs	r2, #128	@ 0x80
 8002f54:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d15c      	bne.n	800301a <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f66:	e018      	b.n	8002f9a <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 8002f68:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f6c:	3350      	adds	r3, #80	@ 0x50
 8002f6e:	443b      	add	r3, r7
 8002f70:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8002f74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f78:	3350      	adds	r3, #80	@ 0x50
 8002f7a:	443b      	add	r3, r7
 8002f7c:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8002f80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f84:	404a      	eors	r2, r1
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	3350      	adds	r3, #80	@ 0x50
 8002f8a:	443b      	add	r3, r7
 8002f8c:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f94:	3301      	adds	r3, #1
 8002f96:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f9a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3df      	bcc.n	8002f68 <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002fa8:	e037      	b.n	800301a <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 8002faa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fae:	893a      	ldrh	r2, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 8002fb4:	893b      	ldrh	r3, [r7, #8]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	18d1      	adds	r1, r2, r3
 8002fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f01a fb22 	bl	801d60e <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d123      	bne.n	800301a <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002fd8:	e018      	b.n	800300c <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 8002fda:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fde:	3350      	adds	r3, #80	@ 0x50
 8002fe0:	443b      	add	r3, r7
 8002fe2:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8002fe6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fea:	3350      	adds	r3, #80	@ 0x50
 8002fec:	443b      	add	r3, r7
 8002fee:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8002ff2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ff6:	404a      	eors	r2, r1
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	3350      	adds	r3, #80	@ 0x50
 8002ffc:	443b      	add	r3, r7
 8002ffe:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003002:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003006:	3301      	adds	r3, #1
 8003008:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800300c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003010:	b29a      	uxth	r2, r3
 8003012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003016:	429a      	cmp	r2, r3
 8003018:	d3df      	bcc.n	8002fda <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3328      	adds	r3, #40	@ 0x28
 800301e:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8003026:	e03b      	b.n	80030a0 <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003028:	2300      	movs	r3, #0
 800302a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800302e:	e019      	b.n	8003064 <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 8003030:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003036:	4413      	add	r3, r2
 8003038:	7819      	ldrb	r1, [r3, #0]
 800303a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800303e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003042:	4413      	add	r3, r2
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003050:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003052:	4403      	add	r3, r0
 8003054:	404a      	eors	r2, r1
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800305a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800305e:	3301      	adds	r3, #1
 8003060:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003064:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003068:	b29a      	uxth	r2, r3
 800306a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800306e:	429a      	cmp	r2, r3
 8003070:	d3de      	bcc.n	8003030 <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8003072:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f002 f967 	bl	8005348 <phCryptoSym_Sw_EncryptBlock>
 800307a:	4603      	mov	r3, r0
 800307c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <phCryptoSym_Sw_CalculateMac+0x296>
 8003088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800308c:	e06e      	b.n	800316c <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 800308e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003090:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8003092:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8003096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800309a:	4413      	add	r3, r2
 800309c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 80030a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80030a4:	893b      	ldrh	r3, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d3be      	bcc.n	8003028 <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 80030aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db2f      	blt.n	8003112 <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80030b8:	e016      	b.n	80030e8 <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 80030ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c0:	4413      	add	r3, r2
 80030c2:	7819      	ldrb	r1, [r3, #0]
 80030c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030c8:	3350      	adds	r3, #80	@ 0x50
 80030ca:	443b      	add	r3, r7
 80030cc:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80030d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030d4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030d6:	4403      	add	r3, r0
 80030d8:	404a      	eors	r2, r1
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80030de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030e2:	3301      	adds	r3, #1
 80030e4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80030e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3e1      	bcc.n	80030ba <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 80030f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f002 f925 	bl	8005348 <phCryptoSym_Sw_EncryptBlock>
 80030fe:	4603      	mov	r3, r0
 8003100:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003104:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <phCryptoSym_Sw_CalculateMac+0x31a>
 800310c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003110:	e02c      	b.n	800316c <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003116:	2b01      	cmp	r3, #1
 8003118:	d003      	beq.n	8003122 <phCryptoSym_Sw_CalculateMac+0x32a>
 800311a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800311e:	2b00      	cmp	r3, #0
 8003120:	da08      	bge.n	8003134 <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3328      	adds	r3, #40	@ 0x28
 8003126:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800312a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800312c:	4618      	mov	r0, r3
 800312e:	f01a fa6e 	bl	801d60e <memcpy>
 8003132:	e007      	b.n	8003144 <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3328      	adds	r3, #40	@ 0x28
 8003138:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f01a f9e6 	bl	801d510 <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8003144:	f107 0320 	add.w	r3, r7, #32
 8003148:	2210      	movs	r2, #16
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f01a f9df 	bl	801d510 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8003152:	f107 0310 	add.w	r3, r7, #16
 8003156:	2210      	movs	r2, #16
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f01a f9d8 	bl	801d510 <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 8003160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003164:	b2da      	uxtb	r2, r3
 8003166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003168:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3750      	adds	r7, #80	@ 0x50
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	461a      	mov	r2, r3
 8003190:	2102      	movs	r1, #2
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8a0 	bl	80032d8 <phCryptoSym_Sw_GetConfig>
 8003198:	4603      	mov	r3, r0
 800319a:	82fb      	strh	r3, [r7, #22]
 800319c:	8afb      	ldrh	r3, [r7, #22]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <phCryptoSym_Sw_LoadIv+0x32>
 80031a2:	8afb      	ldrh	r3, [r7, #22]
 80031a4:	e00f      	b.n	80031c6 <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	8abb      	ldrh	r3, [r7, #20]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d002      	beq.n	80031b6 <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80031b0:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80031b4:	e007      	b.n	80031c6 <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3328      	adds	r3, #40	@ 0x28
 80031ba:	8aba      	ldrh	r2, [r7, #20]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	4618      	mov	r0, r3
 80031c0:	f01a fa25 	bl	801d60e <memcpy>

    return PH_ERR_SUCCESS;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3308      	adds	r3, #8
 80031e6:	2220      	movs	r2, #32
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f01a f990 	bl	801d510 <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d859      	bhi.n	80032aa <phCryptoSym_Sw_LoadKeyDirect+0xda>
 80031f6:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003215 	.word	0x08003215
 8003200:	0800322f 	.word	0x0800322f
 8003204:	08003249 	.word	0x08003249
 8003208:	08003263 	.word	0x08003263
 800320c:	0800327b 	.word	0x0800327b
 8003210:	08003293 	.word	0x08003293
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8003214:	232c      	movs	r3, #44	@ 0x2c
 8003216:	2204      	movs	r2, #4
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8d8 	bl	80033d0 <phCryptoSym_Sw_Aes_KeyExpansion>
 8003220:	4603      	mov	r3, r0
 8003222:	82fb      	strh	r3, [r7, #22]
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d042      	beq.n	80032b0 <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 800322a:	8afb      	ldrh	r3, [r7, #22]
 800322c:	e04f      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 800322e:	2334      	movs	r3, #52	@ 0x34
 8003230:	2206      	movs	r2, #6
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8cb 	bl	80033d0 <phCryptoSym_Sw_Aes_KeyExpansion>
 800323a:	4603      	mov	r3, r0
 800323c:	82fb      	strh	r3, [r7, #22]
 800323e:	8afb      	ldrh	r3, [r7, #22]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d037      	beq.n	80032b4 <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 8003244:	8afb      	ldrh	r3, [r7, #22]
 8003246:	e042      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8003248:	233c      	movs	r3, #60	@ 0x3c
 800324a:	2208      	movs	r2, #8
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f8be 	bl	80033d0 <phCryptoSym_Sw_Aes_KeyExpansion>
 8003254:	4603      	mov	r3, r0
 8003256:	82fb      	strh	r3, [r7, #22]
 8003258:	8afb      	ldrh	r3, [r7, #22]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02c      	beq.n	80032b8 <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 800325e:	8afb      	ldrh	r3, [r7, #22]
 8003260:	e035      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 8003262:	2201      	movs	r2, #1
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fe62 	bl	8003f30 <phCryptoSym_Sw_Des_KeyInit>
 800326c:	4603      	mov	r3, r0
 800326e:	82fb      	strh	r3, [r7, #22]
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d022      	beq.n	80032bc <phCryptoSym_Sw_LoadKeyDirect+0xec>
 8003276:	8afb      	ldrh	r3, [r7, #22]
 8003278:	e029      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 800327a:	2202      	movs	r2, #2
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fe56 	bl	8003f30 <phCryptoSym_Sw_Des_KeyInit>
 8003284:	4603      	mov	r3, r0
 8003286:	82fb      	strh	r3, [r7, #22]
 8003288:	8afb      	ldrh	r3, [r7, #22]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 800328e:	8afb      	ldrh	r3, [r7, #22]
 8003290:	e01d      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 8003292:	2203      	movs	r2, #3
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fe4a 	bl	8003f30 <phCryptoSym_Sw_Des_KeyInit>
 800329c:	4603      	mov	r3, r0
 800329e:	82fb      	strh	r3, [r7, #22]
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 80032a6:	8afb      	ldrh	r3, [r7, #22]
 80032a8:	e011      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80032aa:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80032ae:	e00e      	b.n	80032ce <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 80032b0:	bf00      	nop
 80032b2:	e008      	b.n	80032c6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80032b4:	bf00      	nop
 80032b6:	e006      	b.n	80032c6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80032b8:	bf00      	nop
 80032ba:	e004      	b.n	80032c6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80032bc:	bf00      	nop
 80032be:	e002      	b.n	80032c6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80032c4:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop

080032d8 <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	460b      	mov	r3, r1
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	d867      	bhi.n	80033bc <phCryptoSym_Sw_GetConfig+0xe4>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <phCryptoSym_Sw_GetConfig+0x1c>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	0800339f 	.word	0x0800339f
 80032f8:	08003311 	.word	0x08003311
 80032fc:	08003371 	.word	0x08003371
 8003300:	080033a9 	.word	0x080033a9
 8003304:	080033bd 	.word	0x080033bd
 8003308:	080033bd 	.word	0x080033bd
 800330c:	080033b3 	.word	0x080033b3
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003314:	2b05      	cmp	r3, #5
 8003316:	d827      	bhi.n	8003368 <phCryptoSym_Sw_GetConfig+0x90>
 8003318:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <phCryptoSym_Sw_GetConfig+0x48>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003339 	.word	0x08003339
 8003324:	08003341 	.word	0x08003341
 8003328:	08003349 	.word	0x08003349
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2210      	movs	r2, #16
 800333c:	801a      	strh	r2, [r3, #0]
                    break;
 800333e:	e016      	b.n	800336e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2218      	movs	r2, #24
 8003344:	801a      	strh	r2, [r3, #0]
                    break;
 8003346:	e012      	b.n	800336e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	801a      	strh	r2, [r3, #0]
                    break;
 800334e:	e00e      	b.n	800336e <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2208      	movs	r2, #8
 8003354:	801a      	strh	r2, [r3, #0]
                    break;
 8003356:	e00a      	b.n	800336e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2210      	movs	r2, #16
 800335c:	801a      	strh	r2, [r3, #0]
                    break;
 800335e:	e006      	b.n	800336e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2218      	movs	r2, #24
 8003364:	801a      	strh	r2, [r3, #0]
                    break;
 8003366:	e002      	b.n	800336e <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8003368:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800336c:	e02a      	b.n	80033c4 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 800336e:	e028      	b.n	80033c2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003374:	2b02      	cmp	r3, #2
 8003376:	dc02      	bgt.n	800337e <phCryptoSym_Sw_GetConfig+0xa6>
 8003378:	2b00      	cmp	r3, #0
 800337a:	da04      	bge.n	8003386 <phCryptoSym_Sw_GetConfig+0xae>
 800337c:	e00b      	b.n	8003396 <phCryptoSym_Sw_GetConfig+0xbe>
 800337e:	3b03      	subs	r3, #3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d808      	bhi.n	8003396 <phCryptoSym_Sw_GetConfig+0xbe>
 8003384:	e003      	b.n	800338e <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2210      	movs	r2, #16
 800338a:	801a      	strh	r2, [r3, #0]
                    break;
 800338c:	e006      	b.n	800339c <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2208      	movs	r2, #8
 8003392:	801a      	strh	r2, [r3, #0]
                    break;
 8003394:	e002      	b.n	800339c <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8003396:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800339a:	e013      	b.n	80033c4 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 800339c:	e011      	b.n	80033c2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	801a      	strh	r2, [r3, #0]
            break;
 80033a6:	e00c      	b.n	80033c2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	801a      	strh	r2, [r3, #0]
            break;
 80033b0:	e007      	b.n	80033c2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	801a      	strh	r2, [r3, #0]
            break;
 80033ba:	e002      	b.n	80033c2 <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80033bc:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80033c0:	e000      	b.n	80033c4 <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4611      	mov	r1, r2
 80033dc:	461a      	mov	r2, r3
 80033de:	460b      	mov	r3, r1
 80033e0:	71fb      	strb	r3, [r7, #7]
 80033e2:	4613      	mov	r3, r2
 80033e4:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f103 0008 	add.w	r0, r3, #8
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	f01a f90b 	bl	801d60e <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b090      	sub	sp, #64	@ 0x40
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	4613      	mov	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800341a:	2b02      	cmp	r3, #2
 800341c:	d00e      	beq.n	800343c <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 800341e:	2b02      	cmp	r3, #2
 8003420:	dc10      	bgt.n	8003444 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 8003426:	2b01      	cmp	r3, #1
 8003428:	d004      	beq.n	8003434 <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 800342a:	e00b      	b.n	8003444 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 800342c:	2304      	movs	r3, #4
 800342e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8003432:	e00a      	b.n	800344a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8003434:	2306      	movs	r3, #6
 8003436:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800343a:	e006      	b.n	800344a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 800343c:	2308      	movs	r3, #8
 800343e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8003442:	e002      	b.n	800344a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8003444:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8003448:	e04a      	b.n	80034e0 <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f103 0108 	add.w	r1, r3, #8
 8003450:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	4618      	mov	r0, r3
 800345c:	f01a f8d7 	bl	801d60e <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 8003460:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003464:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003468:	f107 0114 	add.w	r1, r7, #20
 800346c:	200f      	movs	r0, #15
 800346e:	9000      	str	r0, [sp, #0]
 8003470:	68b8      	ldr	r0, [r7, #8]
 8003472:	f000 fba9 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800347c:	e015      	b.n	80034aa <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f000 f8c8 	bl	8003614 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	f000 fa09 	bl	800389c <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800348a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800348e:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003492:	f107 0114 	add.w	r1, r7, #20
 8003496:	200f      	movs	r0, #15
 8003498:	9000      	str	r0, [sp, #0]
 800349a:	68b8      	ldr	r0, [r7, #8]
 800349c:	f000 fb94 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 80034a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80034a4:	3301      	adds	r3, #1
 80034a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80034aa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d3e4      	bcc.n	800347e <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 80034b4:	68b8      	ldr	r0, [r7, #8]
 80034b6:	f000 f8ad 	bl	8003614 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80034ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80034be:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80034c2:	f107 0114 	add.w	r1, r7, #20
 80034c6:	200f      	movs	r0, #15
 80034c8:	9000      	str	r0, [sp, #0]
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f000 fb7c 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	2220      	movs	r2, #32
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f01a f819 	bl	801d510 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3738      	adds	r7, #56	@ 0x38
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b090      	sub	sp, #64	@ 0x40
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d014      	beq.n	8003528 <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 80034fe:	2b02      	cmp	r3, #2
 8003500:	dc19      	bgt.n	8003536 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 8003506:	2b01      	cmp	r3, #1
 8003508:	d007      	beq.n	800351a <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 800350a:	e014      	b.n	8003536 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 8003512:	232b      	movs	r3, #43	@ 0x2b
 8003514:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8003518:	e010      	b.n	800353c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 800351a:	2306      	movs	r3, #6
 800351c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 8003520:	2333      	movs	r3, #51	@ 0x33
 8003522:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8003526:	e009      	b.n	800353c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8003528:	2308      	movs	r3, #8
 800352a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 800352e:	233b      	movs	r3, #59	@ 0x3b
 8003530:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8003534:	e002      	b.n	800353c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8003536:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 800353a:	e066      	b.n	800360a <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f103 0108 	add.w	r1, r3, #8
 8003542:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4618      	mov	r0, r3
 800354e:	f01a f85e 	bl	801d60e <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800355e:	e00f      	b.n	8003580 <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 8003560:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003564:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003568:	f107 0114 	add.w	r1, r7, #20
 800356c:	2030      	movs	r0, #48	@ 0x30
 800356e:	9000      	str	r0, [sp, #0]
 8003570:	68b8      	ldr	r0, [r7, #8]
 8003572:	f000 fb29 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 8003576:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800357a:	3301      	adds	r3, #1
 800357c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003580:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	d9ea      	bls.n	8003560 <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 800358a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800358e:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003592:	f107 0114 	add.w	r1, r7, #20
 8003596:	20c0      	movs	r0, #192	@ 0xc0
 8003598:	9000      	str	r0, [sp, #0]
 800359a:	68b8      	ldr	r0, [r7, #8]
 800359c:	f000 fb14 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80035a8:	e015      	b.n	80035d6 <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80035aa:	68b8      	ldr	r0, [r7, #8]
 80035ac:	f000 f8d4 	bl	8003758 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80035b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80035b4:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80035b8:	f107 0114 	add.w	r1, r7, #20
 80035bc:	20c0      	movs	r0, #192	@ 0xc0
 80035be:	9000      	str	r0, [sp, #0]
 80035c0:	68b8      	ldr	r0, [r7, #8]
 80035c2:	f000 fb01 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 80035c6:	68b8      	ldr	r0, [r7, #8]
 80035c8:	f000 fa06 	bl	80039d8 <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 80035cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80035d0:	3b01      	subs	r3, #1
 80035d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80035d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e5      	bne.n	80035aa <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f000 f8ba 	bl	8003758 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80035e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80035e8:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80035ec:	f107 0114 	add.w	r1, r7, #20
 80035f0:	20c0      	movs	r0, #192	@ 0xc0
 80035f2:	9000      	str	r0, [sp, #0]
 80035f4:	68b8      	ldr	r0, [r7, #8]
 80035f6:	f000 fae7 	bl	8003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	2220      	movs	r2, #32
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f019 ff84 	bl	801d510 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3738      	adds	r7, #56	@ 0x38
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	4b4c      	ldr	r3, [pc, #304]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003624:	5c9a      	ldrb	r2, [r3, r2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	4a47      	ldr	r2, [pc, #284]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003638:	5c52      	ldrb	r2, [r2, r1]
 800363a:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3308      	adds	r3, #8
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3308      	adds	r3, #8
 8003648:	4a42      	ldr	r2, [pc, #264]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800364a:	5c52      	ldrb	r2, [r2, r1]
 800364c:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	330c      	adds	r3, #12
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	330c      	adds	r3, #12
 800365a:	4a3e      	ldr	r2, [pc, #248]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800365c:	5c52      	ldrb	r2, [r2, r1]
 800365e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3301      	adds	r3, #1
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3305      	adds	r3, #5
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3301      	adds	r3, #1
 800367a:	4a36      	ldr	r2, [pc, #216]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800367c:	5c52      	ldrb	r2, [r2, r1]
 800367e:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3309      	adds	r3, #9
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3305      	adds	r3, #5
 800368c:	4a31      	ldr	r2, [pc, #196]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800368e:	5c52      	ldrb	r2, [r2, r1]
 8003690:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	330d      	adds	r3, #13
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3309      	adds	r3, #9
 800369e:	4a2d      	ldr	r2, [pc, #180]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036a0:	5c52      	ldrb	r2, [r2, r1]
 80036a2:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	330d      	adds	r3, #13
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3302      	adds	r3, #2
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	330a      	adds	r3, #10
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3302      	adds	r3, #2
 80036c6:	4a23      	ldr	r2, [pc, #140]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036c8:	5c52      	ldrb	r2, [r2, r1]
 80036ca:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	330a      	adds	r3, #10
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3306      	adds	r3, #6
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036de:	5c9b      	ldrb	r3, [r3, r2]
 80036e0:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	330e      	adds	r3, #14
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3306      	adds	r3, #6
 80036ee:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80036f0:	5c52      	ldrb	r2, [r2, r1]
 80036f2:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	330e      	adds	r3, #14
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	330f      	adds	r3, #15
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	330b      	adds	r3, #11
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	330f      	adds	r3, #15
 8003716:	4a0f      	ldr	r2, [pc, #60]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003718:	5c52      	ldrb	r2, [r2, r1]
 800371a:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3307      	adds	r3, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	4619      	mov	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	330b      	adds	r3, #11
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800372a:	5c52      	ldrb	r2, [r2, r1]
 800372c:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3303      	adds	r3, #3
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3307      	adds	r3, #7
 800373a:	4a06      	ldr	r2, [pc, #24]	@ (8003754 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800373c:	5c52      	ldrb	r2, [r2, r1]
 800373e:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3303      	adds	r3, #3
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	701a      	strb	r2, [r3, #0]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	0801fe30 	.word	0x0801fe30

08003758 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b4c      	ldr	r3, [pc, #304]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003768:	5c9a      	ldrb	r2, [r3, r2]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800377c:	5c52      	ldrb	r2, [r2, r1]
 800377e:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3308      	adds	r3, #8
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3308      	adds	r3, #8
 800378c:	4a42      	ldr	r2, [pc, #264]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800378e:	5c52      	ldrb	r2, [r2, r1]
 8003790:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	330c      	adds	r3, #12
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	330c      	adds	r3, #12
 800379e:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037a0:	5c52      	ldrb	r2, [r2, r1]
 80037a2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	330d      	adds	r3, #13
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3309      	adds	r3, #9
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	330d      	adds	r3, #13
 80037be:	4a36      	ldr	r2, [pc, #216]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037c0:	5c52      	ldrb	r2, [r2, r1]
 80037c2:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3305      	adds	r3, #5
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3309      	adds	r3, #9
 80037d0:	4a31      	ldr	r2, [pc, #196]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037d2:	5c52      	ldrb	r2, [r2, r1]
 80037d4:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3301      	adds	r3, #1
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3305      	adds	r3, #5
 80037e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037e4:	5c52      	ldrb	r2, [r2, r1]
 80037e6:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3302      	adds	r3, #2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037fa:	5c9b      	ldrb	r3, [r3, r2]
 80037fc:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	330a      	adds	r3, #10
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	4619      	mov	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3302      	adds	r3, #2
 800380a:	4a23      	ldr	r2, [pc, #140]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800380c:	5c52      	ldrb	r2, [r2, r1]
 800380e:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	330a      	adds	r3, #10
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3306      	adds	r3, #6
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003822:	5c9b      	ldrb	r3, [r3, r2]
 8003824:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	330e      	adds	r3, #14
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3306      	adds	r3, #6
 8003832:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003834:	5c52      	ldrb	r2, [r2, r1]
 8003836:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	330e      	adds	r3, #14
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3303      	adds	r3, #3
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3307      	adds	r3, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3303      	adds	r3, #3
 800385a:	4a0f      	ldr	r2, [pc, #60]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800385c:	5c52      	ldrb	r2, [r2, r1]
 800385e:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	330b      	adds	r3, #11
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	4619      	mov	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3307      	adds	r3, #7
 800386c:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800386e:	5c52      	ldrb	r2, [r2, r1]
 8003870:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	330f      	adds	r3, #15
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	330b      	adds	r3, #11
 800387e:	4a06      	ldr	r2, [pc, #24]	@ (8003898 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003880:	5c52      	ldrb	r2, [r2, r1]
 8003882:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	330f      	adds	r3, #15
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	0801ff30 	.word	0x0801ff30

0800389c <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	e089      	b.n	80039be <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b48      	ldr	r3, [pc, #288]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038b2:	5c9a      	ldrb	r2, [r3, r2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3301      	adds	r3, #1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4b45      	ldr	r3, [pc, #276]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038be:	5c59      	ldrb	r1, [r3, r1]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	404b      	eors	r3, r1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	4053      	eors	r3, r2
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3302      	adds	r3, #2
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4053      	eors	r3, r2
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3303      	adds	r3, #3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	4053      	eors	r3, r2
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	4619      	mov	r1, r3
 80038f0:	4b38      	ldr	r3, [pc, #224]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038f2:	5c5b      	ldrb	r3, [r3, r1]
 80038f4:	4053      	eors	r3, r2
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3302      	adds	r3, #2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4b34      	ldr	r3, [pc, #208]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003902:	5c59      	ldrb	r1, [r3, r1]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3302      	adds	r3, #2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	404b      	eors	r3, r1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4053      	eors	r3, r2
 8003910:	b2da      	uxtb	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3303      	adds	r3, #3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	4053      	eors	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3301      	adds	r3, #1
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4053      	eors	r3, r2
 800392a:	b2da      	uxtb	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3302      	adds	r3, #2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003936:	5c5b      	ldrb	r3, [r3, r1]
 8003938:	4053      	eors	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3303      	adds	r3, #3
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	4b23      	ldr	r3, [pc, #140]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003946:	5c59      	ldrb	r1, [r3, r1]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3303      	adds	r3, #3
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	404b      	eors	r3, r1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4053      	eors	r3, r2
 8003954:	b2db      	uxtb	r3, r3
 8003956:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003960:	5c9a      	ldrb	r2, [r3, r2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4053      	eors	r3, r2
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3301      	adds	r3, #1
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4053      	eors	r3, r2
 8003972:	b2da      	uxtb	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3302      	adds	r3, #2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	4053      	eors	r3, r2
 800397c:	b2da      	uxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3303      	adds	r3, #3
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003988:	5c5b      	ldrb	r3, [r3, r1]
 800398a:	4053      	eors	r3, r2
 800398c:	b2db      	uxtb	r3, r3
 800398e:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	7a3a      	ldrb	r2, [r7, #8]
 8003998:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	7a7a      	ldrb	r2, [r7, #9]
 80039a2:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	7aba      	ldrb	r2, [r7, #10]
 80039ac:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	7afa      	ldrb	r2, [r7, #11]
 80039b6:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	3301      	adds	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	f67f af72 	bls.w	80038aa <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	08020030 	.word	0x08020030

080039d8 <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	e0df      	b.n	8003ba6 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80039ee:	5c9a      	ldrb	r2, [r3, r2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	4b72      	ldr	r3, [pc, #456]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 80039f8:	5c5b      	ldrb	r3, [r3, r1]
 80039fa:	4053      	eors	r3, r2
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3301      	adds	r3, #1
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a08:	5c59      	ldrb	r1, [r3, r1]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	4b6b      	ldr	r3, [pc, #428]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a14:	5c1b      	ldrb	r3, [r3, r0]
 8003a16:	404b      	eors	r3, r1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4053      	eors	r3, r2
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3302      	adds	r3, #2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4619      	mov	r1, r3
 8003a26:	4b65      	ldr	r3, [pc, #404]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a28:	5c59      	ldrb	r1, [r3, r1]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	404b      	eors	r3, r1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	4053      	eors	r3, r2
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4b60      	ldr	r3, [pc, #384]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a42:	5c5b      	ldrb	r3, [r3, r1]
 8003a44:	4053      	eors	r3, r2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b5c      	ldr	r3, [pc, #368]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a52:	5c9a      	ldrb	r2, [r3, r2]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3301      	adds	r3, #1
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4b57      	ldr	r3, [pc, #348]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a5e:	5c59      	ldrb	r1, [r3, r1]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3301      	adds	r3, #1
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	4b55      	ldr	r3, [pc, #340]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a6a:	5c1b      	ldrb	r3, [r3, r0]
 8003a6c:	404b      	eors	r3, r1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4053      	eors	r3, r2
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3302      	adds	r3, #2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4b51      	ldr	r3, [pc, #324]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a7e:	5c59      	ldrb	r1, [r3, r1]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3302      	adds	r3, #2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a8a:	5c1b      	ldrb	r3, [r3, r0]
 8003a8c:	404b      	eors	r3, r1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4053      	eors	r3, r2
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3303      	adds	r3, #3
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4b47      	ldr	r3, [pc, #284]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a9e:	5c59      	ldrb	r1, [r3, r1]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3303      	adds	r3, #3
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	404b      	eors	r3, r1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	4053      	eors	r3, r2
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003ab8:	5c9a      	ldrb	r2, [r3, r2]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	4053      	eors	r3, r2
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003acc:	5c5b      	ldrb	r3, [r3, r1]
 8003ace:	4053      	eors	r3, r2
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003adc:	5c59      	ldrb	r1, [r3, r1]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003ae8:	5c1b      	ldrb	r3, [r3, r0]
 8003aea:	404b      	eors	r3, r1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	4053      	eors	r3, r2
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3303      	adds	r3, #3
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4b32      	ldr	r3, [pc, #200]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003afc:	5c59      	ldrb	r1, [r3, r1]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3303      	adds	r3, #3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003b08:	5c1b      	ldrb	r3, [r3, r0]
 8003b0a:	404b      	eors	r3, r1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4053      	eors	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003b1c:	5c9a      	ldrb	r2, [r3, r2]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	4619      	mov	r1, r3
 8003b24:	4b26      	ldr	r3, [pc, #152]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003b26:	5c5b      	ldrb	r3, [r3, r1]
 8003b28:	4053      	eors	r3, r2
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003b36:	5c59      	ldrb	r1, [r3, r1]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	404b      	eors	r3, r1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4053      	eors	r3, r2
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3302      	adds	r3, #2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003b50:	5c5b      	ldrb	r3, [r3, r1]
 8003b52:	4053      	eors	r3, r2
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3303      	adds	r3, #3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003b60:	5c59      	ldrb	r1, [r3, r1]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3303      	adds	r3, #3
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003b6c:	5c1b      	ldrb	r3, [r3, r0]
 8003b6e:	404b      	eors	r3, r1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	4053      	eors	r3, r2
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	7a3a      	ldrb	r2, [r7, #8]
 8003b80:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	7a7a      	ldrb	r2, [r7, #9]
 8003b8a:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	7aba      	ldrb	r2, [r7, #10]
 8003b94:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	7afa      	ldrb	r2, [r7, #11]
 8003b9e:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	f67f af1c 	bls.w	80039e6 <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	08020230 	.word	0x08020230
 8003bc0:	08020030 	.word	0x08020030
 8003bc4:	08020130 	.word	0x08020130

08003bc8 <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e197      	b.n	8003f10 <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bea:	fb01 f202 	mul.w	r2, r1, r2
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8003bfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c00:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c02:	d150      	bne.n	8003ca6 <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 8003c04:	7ffb      	ldrb	r3, [r7, #31]
 8003c06:	f1c3 0303 	rsb	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	7819      	ldrb	r1, [r3, #0]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	7ffb      	ldrb	r3, [r7, #31]
 8003c18:	f1c3 0303 	rsb	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	4403      	add	r3, r0
 8003c22:	404a      	eors	r2, r1
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	f1c3 0303 	rsb	r3, r3, #3
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3301      	adds	r3, #1
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	7819      	ldrb	r1, [r3, #0]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	7ffb      	ldrb	r3, [r7, #31]
 8003c40:	f1c3 0303 	rsb	r3, r3, #3
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	3301      	adds	r3, #1
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	4403      	add	r3, r0
 8003c4c:	404a      	eors	r2, r1
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	f1c3 0303 	rsb	r3, r3, #3
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	7819      	ldrb	r1, [r3, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	3302      	adds	r3, #2
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	7ffb      	ldrb	r3, [r7, #31]
 8003c6a:	f1c3 0303 	rsb	r3, r3, #3
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	4403      	add	r3, r0
 8003c76:	404a      	eors	r2, r1
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
 8003c7e:	f1c3 0303 	rsb	r3, r3, #3
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	3303      	adds	r3, #3
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	7819      	ldrb	r1, [r3, #0]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	7ffb      	ldrb	r3, [r7, #31]
 8003c94:	f1c3 0303 	rsb	r3, r3, #3
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	4403      	add	r3, r0
 8003ca0:	404a      	eors	r2, r1
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d903      	bls.n	8003cb8 <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e0d1      	b.n	8003e5c <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d153      	bne.n	8003d66 <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	7dbb      	ldrb	r3, [r7, #22]
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	440b      	add	r3, r1
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4b93      	ldr	r3, [pc, #588]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003cdc:	5c59      	ldrb	r1, [r3, r1]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7818      	ldrb	r0, [r3, #0]
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	488f      	ldr	r0, [pc, #572]	@ (8003f2c <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 8003cee:	5cc3      	ldrb	r3, [r0, r3]
 8003cf0:	404b      	eors	r3, r1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	4053      	eors	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	7dbb      	ldrb	r3, [r7, #22]
 8003d08:	69b9      	ldr	r1, [r7, #24]
 8003d0a:	440b      	add	r3, r1
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4b85      	ldr	r3, [pc, #532]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d12:	5c5b      	ldrb	r3, [r3, r1]
 8003d14:	4053      	eors	r3, r2
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	7dbb      	ldrb	r3, [r7, #22]
 8003d28:	69b9      	ldr	r1, [r7, #24]
 8003d2a:	440b      	add	r3, r1
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4b7d      	ldr	r3, [pc, #500]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d32:	5c5b      	ldrb	r3, [r3, r1]
 8003d34:	4053      	eors	r3, r2
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	7dbb      	ldrb	r3, [r7, #22]
 8003d48:	3b04      	subs	r3, #4
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	440b      	add	r3, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d54:	5c5b      	ldrb	r3, [r3, r1]
 8003d56:	4053      	eors	r3, r2
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e07a      	b.n	8003e5c <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d147      	bne.n	8003dfc <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d76:	fb01 f202 	mul.w	r2, r1, r2
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d13c      	bne.n	8003dfc <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4b66      	ldr	r3, [pc, #408]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d90:	5c5b      	ldrb	r3, [r3, r1]
 8003d92:	4053      	eors	r3, r2
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3b04      	subs	r3, #4
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	4619      	mov	r1, r3
 8003dac:	4b5e      	ldr	r3, [pc, #376]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003dae:	5c5b      	ldrb	r3, [r3, r1]
 8003db0:	4053      	eors	r3, r2
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	3b04      	subs	r3, #4
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4b57      	ldr	r3, [pc, #348]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003dcc:	5c5b      	ldrb	r3, [r3, r1]
 8003dce:	4053      	eors	r3, r2
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3b04      	subs	r3, #4
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	4619      	mov	r1, r3
 8003de8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003dea:	5c5b      	ldrb	r3, [r3, r1]
 8003dec:	4053      	eors	r3, r2
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e02f      	b.n	8003e5c <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	3b04      	subs	r3, #4
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	4053      	eors	r3, r2
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	4053      	eors	r3, r2
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3b04      	subs	r3, #4
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	4053      	eors	r3, r2
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3301      	adds	r3, #1
 8003e42:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4053      	eors	r3, r2
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8003e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e60:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e62:	d006      	beq.n	8003e72 <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e005      	b.n	8003e7e <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 8003e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e82:	2b0f      	cmp	r3, #15
 8003e84:	d141      	bne.n	8003f0a <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 8003e86:	7ffb      	ldrb	r3, [r7, #31]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	7819      	ldrb	r1, [r3, #0]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	3b04      	subs	r3, #4
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	4403      	add	r3, r0
 8003e9e:	404a      	eors	r2, r1
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	7819      	ldrb	r1, [r3, #0]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	3b03      	subs	r3, #3
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	3301      	adds	r3, #1
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	4403      	add	r3, r0
 8003ec0:	404a      	eors	r2, r1
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 8003ec6:	7ffb      	ldrb	r3, [r7, #31]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	7819      	ldrb	r1, [r3, #0]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	3b02      	subs	r3, #2
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	3302      	adds	r3, #2
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	4403      	add	r3, r0
 8003ee2:	404a      	eors	r2, r1
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	3303      	adds	r3, #3
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	7819      	ldrb	r1, [r3, #0]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3303      	adds	r3, #3
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	4403      	add	r3, r0
 8003f04:	404a      	eors	r2, r1
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	f67f ae64 	bls.w	8003be0 <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	@ 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	0801fe30 	.word	0x0801fe30
 8003f2c:	08020330 	.word	0x08020330

08003f30 <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 8003f3e:	e00b      	b.n	8003f58 <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	18d0      	adds	r0, r2, r3
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	f000 f9f0 	bl	8004338 <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	71fa      	strb	r2, [r7, #7]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ee      	bne.n	8003f40 <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	3308      	adds	r3, #8
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f000 f887 	bl	80040a0 <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e021      	b.n	8003fdc <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8003f9c:	5cd3      	ldrb	r3, [r2, r3]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	69b8      	ldr	r0, [r7, #24]
 8003fa2:	f000 fd8f 	bl	8004ac4 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	1d1a      	adds	r2, r3, #4
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	4915      	ldr	r1, [pc, #84]	@ (8004004 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 fd86 	bl	8004ac4 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3320      	adds	r3, #32
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	69b8      	ldr	r0, [r7, #24]
 8003fc0:	f000 fa3f 	bl	8004442 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f103 0220 	add.w	r2, r3, #32
 8003fca:	f107 0310 	add.w	r3, r7, #16
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fdc2 	bl	8004b5a <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	7ffb      	ldrb	r3, [r7, #31]
 8003fde:	2b0f      	cmp	r3, #15
 8003fe0:	d9da      	bls.n	8003f98 <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 8003fe2:	f107 0310 	add.w	r3, r7, #16
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fdf3 	bl	8004bd2 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 8003fec:	f107 0310 	add.w	r3, r7, #16
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f8f3 	bl	80041de <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	0802033c 	.word	0x0802033c

08004008 <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	3308      	adds	r3, #8
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	4619      	mov	r1, r3
 8004028:	68b8      	ldr	r0, [r7, #8]
 800402a:	f000 f839 	bl	80040a0 <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 800402e:	230f      	movs	r3, #15
 8004030:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3320      	adds	r3, #32
 8004036:	4619      	mov	r1, r3
 8004038:	69b8      	ldr	r0, [r7, #24]
 800403a:	f000 fa02 	bl	8004442 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	4a16      	ldr	r2, [pc, #88]	@ (800409c <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	4619      	mov	r1, r3
 8004046:	69b8      	ldr	r0, [r7, #24]
 8004048:	f000 fce5 	bl	8004a16 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	4912      	ldr	r1, [pc, #72]	@ (800409c <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f000 fcdc 	bl	8004a16 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f103 0220 	add.w	r2, r3, #32
 8004064:	f107 0310 	add.w	r3, r7, #16
 8004068:	4611      	mov	r1, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fd75 	bl	8004b5a <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	1e5a      	subs	r2, r3, #1
 8004074:	77fa      	strb	r2, [r7, #31]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1db      	bne.n	8004032 <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 800407a:	f107 0310 	add.w	r3, r7, #16
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fda7 	bl	8004bd2 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f8a7 	bl	80041de <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	0802033c 	.word	0x0802033c

080040a0 <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	e089      	b.n	80041c8 <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3304      	adds	r3, #4
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	73bb      	strb	r3, [r7, #14]
 80040c6:	e046      	b.n	8004156 <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3304      	adds	r3, #4
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b25a      	sxtb	r2, r3
 80040d0:	7bbb      	ldrb	r3, [r7, #14]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	440b      	add	r3, r1
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040de:	b25b      	sxtb	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b25a      	sxtb	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3304      	adds	r3, #4
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3304      	adds	r3, #4
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3304      	adds	r3, #4
 80040f6:	0852      	lsrs	r2, r2, #1
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 80040fc:	7bbb      	ldrb	r3, [r7, #14]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	7bbb      	ldrb	r3, [r7, #14]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	440b      	add	r3, r1
 800410a:	0052      	lsls	r2, r2, #1
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b25a      	sxtb	r2, r3
 8004116:	7bbb      	ldrb	r3, [r7, #14]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	440b      	add	r3, r1
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b25b      	sxtb	r3, r3
 8004120:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004124:	b25b      	sxtb	r3, r3
 8004126:	4313      	orrs	r3, r2
 8004128:	b25b      	sxtb	r3, r3
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	7bbb      	ldrb	r3, [r7, #14]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	440b      	add	r3, r1
 800414a:	0052      	lsls	r2, r2, #1
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	3301      	adds	r3, #1
 8004154:	73bb      	strb	r3, [r7, #14]
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d9b5      	bls.n	80040c8 <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3304      	adds	r3, #4
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b25a      	sxtb	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3307      	adds	r3, #7
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	b25b      	sxtb	r3, r3
 800416c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004170:	b25b      	sxtb	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b25a      	sxtb	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3304      	adds	r3, #4
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3307      	adds	r3, #7
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3307      	adds	r3, #7
 8004188:	0052      	lsls	r2, r2, #1
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b25a      	sxtb	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3307      	adds	r3, #7
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	4313      	orrs	r3, r2
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3307      	adds	r3, #7
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3307      	adds	r3, #7
 80041b6:	0052      	lsls	r2, r2, #1
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3301      	adds	r3, #1
 80041c0:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3301      	adds	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f67f af72 	bls.w	80040b4 <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	72fb      	strb	r3, [r7, #11]
 80041ec:	e099      	b.n	8004322 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	4413      	add	r3, r2
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	72bb      	strb	r3, [r7, #10]
 8004200:	e04c      	b.n	800429c <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b25a      	sxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3304      	adds	r3, #4
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b25b      	sxtb	r3, r3
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	b25b      	sxtb	r3, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	b259      	sxtb	r1, r3
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	4413      	add	r3, r2
 8004224:	b2ca      	uxtb	r2, r1
 8004226:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8004228:	7afb      	ldrb	r3, [r7, #11]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	7afb      	ldrb	r3, [r7, #11]
 8004232:	6839      	ldr	r1, [r7, #0]
 8004234:	440b      	add	r3, r1
 8004236:	0052      	lsls	r2, r2, #1
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 800423c:	7afb      	ldrb	r3, [r7, #11]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4413      	add	r3, r2
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b25a      	sxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b25b      	sxtb	r3, r3
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	b25b      	sxtb	r3, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	b259      	sxtb	r1, r3
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	4413      	add	r3, r2
 800425c:	b2ca      	uxtb	r2, r1
 800425e:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4413      	add	r3, r2
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	440b      	add	r3, r1
 800426e:	0052      	lsls	r2, r2, #1
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3304      	adds	r3, #4
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3304      	adds	r3, #4
 800428a:	0852      	lsrs	r2, r2, #1
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
            inTmp++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 8004296:	7abb      	ldrb	r3, [r7, #10]
 8004298:	3301      	adds	r3, #1
 800429a:	72bb      	strb	r3, [r7, #10]
 800429c:	7abb      	ldrb	r3, [r7, #10]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d9af      	bls.n	8004202 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 80042a2:	7afb      	ldrb	r3, [r7, #11]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b25a      	sxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3304      	adds	r3, #4
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b259      	sxtb	r1, r3
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	b2ca      	uxtb	r2, r1
 80042c6:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4413      	add	r3, r2
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	440b      	add	r3, r1
 80042d6:	0052      	lsls	r2, r2, #1
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b25a      	sxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b25b      	sxtb	r3, r3
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b25b      	sxtb	r3, r3
 80042f2:	4313      	orrs	r3, r2
 80042f4:	b259      	sxtb	r1, r3
 80042f6:	7afb      	ldrb	r3, [r7, #11]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	4413      	add	r3, r2
 80042fc:	b2ca      	uxtb	r2, r1
 80042fe:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3304      	adds	r3, #4
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3304      	adds	r3, #4
 8004316:	0852      	lsrs	r2, r2, #1
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	3301      	adds	r3, #1
 8004320:	72fb      	strb	r3, [r7, #11]
 8004322:	7afb      	ldrb	r3, [r7, #11]
 8004324:	2b07      	cmp	r3, #7
 8004326:	f67f af62 	bls.w	80041ee <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	f107 030c 	add.w	r3, r7, #12
 8004348:	6810      	ldr	r0, [r2, #0]
 800434a:	6851      	ldr	r1, [r2, #4]
 800434c:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]
 8004352:	e050      	b.n	80043f6 <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4413      	add	r3, r2
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 800435e:	2300      	movs	r3, #0
 8004360:	75bb      	strb	r3, [r7, #22]
 8004362:	e02d      	b.n	80043c0 <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4413      	add	r3, r2
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b25a      	sxtb	r2, r3
 800436e:	7dbb      	ldrb	r3, [r7, #22]
 8004370:	3318      	adds	r3, #24
 8004372:	443b      	add	r3, r7
 8004374:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004378:	b25b      	sxtb	r3, r3
 800437a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800437e:	b25b      	sxtb	r3, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	b259      	sxtb	r1, r3
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	4413      	add	r3, r2
 800438a:	b2ca      	uxtb	r2, r1
 800438c:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	4413      	add	r3, r2
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	440b      	add	r3, r1
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 80043a2:	7dbb      	ldrb	r3, [r7, #22]
 80043a4:	3318      	adds	r3, #24
 80043a6:	443b      	add	r3, r7
 80043a8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80043ac:	7dbb      	ldrb	r3, [r7, #22]
 80043ae:	0052      	lsls	r2, r2, #1
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	3318      	adds	r3, #24
 80043b4:	443b      	add	r3, r7
 80043b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 80043ba:	7dbb      	ldrb	r3, [r7, #22]
 80043bc:	3301      	adds	r3, #1
 80043be:	75bb      	strb	r3, [r7, #22]
 80043c0:	7dbb      	ldrb	r3, [r7, #22]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d9ce      	bls.n	8004364 <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b25a      	sxtb	r2, r3
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	b259      	sxtb	r1, r3
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	b2ca      	uxtb	r2, r1
 80043e6:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	3301      	adds	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d9ab      	bls.n	8004354 <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	3303      	adds	r3, #3
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	3307      	adds	r3, #7
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	3303      	adds	r3, #3
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3303      	adds	r3, #3
 8004416:	f022 020f 	bic.w	r2, r2, #15
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	799b      	ldrb	r3, [r3, #6]
 8004422:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	3306      	adds	r3, #6
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	7912      	ldrb	r2, [r2, #4]
 800442c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	3304      	adds	r3, #4
 8004432:	7dfa      	ldrb	r2, [r7, #23]
 8004434:	701a      	strb	r2, [r3, #0]

}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3301      	adds	r3, #1
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3302      	adds	r3, #2
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b2da      	uxtb	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3301      	adds	r3, #1
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	b2db      	uxtb	r3, r3
 8004490:	4313      	orrs	r3, r2
 8004492:	b2da      	uxtb	r2, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b25a      	sxtb	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3302      	adds	r3, #2
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	b25b      	sxtb	r3, r3
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781a      	ldrb	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4313      	orrs	r3, r2
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	f002 0220 	and.w	r2, r2, #32
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b25a      	sxtb	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3303      	adds	r3, #3
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b25b      	sxtb	r3, r3
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	b25b      	sxtb	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b25a      	sxtb	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b25a      	sxtb	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3301      	adds	r3, #1
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b25b      	sxtb	r3, r3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	b25b      	sxtb	r3, r3
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	b25b      	sxtb	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b25a      	sxtb	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b25a      	sxtb	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b25b      	sxtb	r3, r3
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	b25b      	sxtb	r3, r3
 800455a:	4313      	orrs	r3, r2
 800455c:	b25a      	sxtb	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	7819      	ldrb	r1, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3302      	adds	r3, #2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	b2da      	uxtb	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	430a      	orrs	r2, r1
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3301      	adds	r3, #1
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	099b      	lsrs	r3, r3, #6
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3302      	adds	r3, #2
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	3302      	adds	r3, #2
 80045b4:	f002 0220 	and.w	r2, r2, #32
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	3302      	adds	r3, #2
 80045c0:	7819      	ldrb	r1, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3302      	adds	r3, #2
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	3302      	adds	r3, #2
 80045d6:	430a      	orrs	r2, r1
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	3302      	adds	r3, #2
 80045e0:	7819      	ldrb	r1, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3301      	adds	r3, #1
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3302      	adds	r3, #2
 80045f6:	430a      	orrs	r2, r1
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	3302      	adds	r3, #2
 8004600:	7819      	ldrb	r1, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	b2da      	uxtb	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	3302      	adds	r3, #2
 8004614:	430a      	orrs	r2, r1
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	3302      	adds	r3, #2
 800461e:	7819      	ldrb	r1, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3303      	adds	r3, #3
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	b2da      	uxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	3302      	adds	r3, #2
 8004634:	430a      	orrs	r2, r1
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	3302      	adds	r3, #2
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b25a      	sxtb	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b25b      	sxtb	r3, r3
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	b25b      	sxtb	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b25a      	sxtb	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	3302      	adds	r3, #2
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3301      	adds	r3, #1
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	015b      	lsls	r3, r3, #5
 8004662:	b2da      	uxtb	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3303      	adds	r3, #3
 8004668:	f002 0220 	and.w	r2, r2, #32
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	3303      	adds	r3, #3
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b25a      	sxtb	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	b25b      	sxtb	r3, r3
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	b25b      	sxtb	r3, r3
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	b25b      	sxtb	r3, r3
 8004688:	4313      	orrs	r3, r2
 800468a:	b25a      	sxtb	r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	3303      	adds	r3, #3
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	3303      	adds	r3, #3
 8004698:	7819      	ldrb	r1, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3303      	adds	r3, #3
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	3303      	adds	r3, #3
 80046ae:	430a      	orrs	r2, r1
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3303      	adds	r3, #3
 80046b8:	7819      	ldrb	r1, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3302      	adds	r3, #2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	3303      	adds	r3, #3
 80046ce:	430a      	orrs	r2, r1
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3303      	adds	r3, #3
 80046d8:	7819      	ldrb	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3301      	adds	r3, #1
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3303      	adds	r3, #3
 80046ee:	430a      	orrs	r2, r1
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3303      	adds	r3, #3
 80046f8:	7819      	ldrb	r1, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	b2da      	uxtb	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	3303      	adds	r3, #3
 800470c:	430a      	orrs	r2, r1
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3305      	adds	r3, #5
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	b2da      	uxtb	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3304      	adds	r3, #4
 8004720:	f002 0220 	and.w	r2, r2, #32
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	3304      	adds	r3, #4
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b25a      	sxtb	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3306      	adds	r3, #6
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b25b      	sxtb	r3, r3
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	b25b      	sxtb	r3, r3
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	b25b      	sxtb	r3, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	b25a      	sxtb	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	3304      	adds	r3, #4
 8004752:	7819      	ldrb	r1, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	b2da      	uxtb	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	430a      	orrs	r2, r1
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3304      	adds	r3, #4
 8004772:	7819      	ldrb	r1, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3305      	adds	r3, #5
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	b2da      	uxtb	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	3304      	adds	r3, #4
 8004788:	430a      	orrs	r2, r1
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	3304      	adds	r3, #4
 8004792:	7819      	ldrb	r1, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3306      	adds	r3, #6
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3304      	adds	r3, #4
 80047a8:	430a      	orrs	r2, r1
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	7819      	ldrb	r1, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3307      	adds	r3, #7
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	3304      	adds	r3, #4
 80047c8:	430a      	orrs	r2, r1
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	3305      	adds	r3, #5
 80047dc:	f002 0220 	and.w	r2, r2, #32
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	3305      	adds	r3, #5
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	b25a      	sxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3305      	adds	r3, #5
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	b25b      	sxtb	r3, r3
 80047fa:	4313      	orrs	r3, r2
 80047fc:	b25a      	sxtb	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	3305      	adds	r3, #5
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	3305      	adds	r3, #5
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b25a      	sxtb	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3306      	adds	r3, #6
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b25b      	sxtb	r3, r3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	b25b      	sxtb	r3, r3
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	b25b      	sxtb	r3, r3
 8004820:	4313      	orrs	r3, r2
 8004822:	b25a      	sxtb	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	3305      	adds	r3, #5
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	3305      	adds	r3, #5
 8004830:	7819      	ldrb	r1, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3306      	adds	r3, #6
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	b2da      	uxtb	r2, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	3305      	adds	r3, #5
 8004846:	430a      	orrs	r2, r1
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	3305      	adds	r3, #5
 8004850:	7819      	ldrb	r1, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	3305      	adds	r3, #5
 8004866:	430a      	orrs	r2, r1
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	3305      	adds	r3, #5
 8004870:	7819      	ldrb	r1, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3306      	adds	r3, #6
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	b2da      	uxtb	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3305      	adds	r3, #5
 8004886:	430a      	orrs	r2, r1
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3305      	adds	r3, #5
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	015b      	lsls	r3, r3, #5
 8004894:	b2da      	uxtb	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	3306      	adds	r3, #6
 800489a:	f002 0220 	and.w	r2, r2, #32
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	3306      	adds	r3, #6
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b25a      	sxtb	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3306      	adds	r3, #6
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b25b      	sxtb	r3, r3
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	b25b      	sxtb	r3, r3
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	b25b      	sxtb	r3, r3
 80048bc:	4313      	orrs	r3, r2
 80048be:	b25a      	sxtb	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	3306      	adds	r3, #6
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3306      	adds	r3, #6
 80048cc:	7819      	ldrb	r1, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3305      	adds	r3, #5
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	3306      	adds	r3, #6
 80048e2:	430a      	orrs	r2, r1
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	3306      	adds	r3, #6
 80048ec:	7819      	ldrb	r1, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3307      	adds	r3, #7
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3306      	adds	r3, #6
 8004902:	430a      	orrs	r2, r1
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	3306      	adds	r3, #6
 800490c:	7819      	ldrb	r1, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	b2da      	uxtb	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	3306      	adds	r3, #6
 8004922:	430a      	orrs	r2, r1
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	3306      	adds	r3, #6
 800492c:	7819      	ldrb	r1, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3307      	adds	r3, #7
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	09db      	lsrs	r3, r3, #7
 8004936:	b2da      	uxtb	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	3306      	adds	r3, #6
 800493c:	430a      	orrs	r2, r1
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3306      	adds	r3, #6
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	3307      	adds	r3, #7
 8004950:	f002 0220 	and.w	r2, r2, #32
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	3307      	adds	r3, #7
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b25a      	sxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3305      	adds	r3, #5
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b25b      	sxtb	r3, r3
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	b25b      	sxtb	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	b25a      	sxtb	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	3307      	adds	r3, #7
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	3307      	adds	r3, #7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b25a      	sxtb	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3306      	adds	r3, #6
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	b25b      	sxtb	r3, r3
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	b25b      	sxtb	r3, r3
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	b25b      	sxtb	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	b25a      	sxtb	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	3307      	adds	r3, #7
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	3307      	adds	r3, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b25a      	sxtb	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b25b      	sxtb	r3, r3
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	b25b      	sxtb	r3, r3
 80049be:	4313      	orrs	r3, r2
 80049c0:	b25a      	sxtb	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	3307      	adds	r3, #7
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	3307      	adds	r3, #7
 80049ce:	7819      	ldrb	r1, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	3307      	adds	r3, #7
 80049e4:	430a      	orrs	r2, r1
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3307      	adds	r3, #7
 80049ee:	7819      	ldrb	r1, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	3307      	adds	r3, #7
 8004a04:	430a      	orrs	r2, r1
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 8004a2a:	e041      	b.n	8004ab0 <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e01f      	b.n	8004a72 <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	440b      	add	r3, r1
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	7819      	ldrb	r1, [r3, #0]
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	7bba      	ldrb	r2, [r7, #14]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8004a68:	7b7b      	ldrb	r3, [r7, #13]
 8004a6a:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d9dc      	bls.n	8004a32 <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3303      	adds	r3, #3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00f      	beq.n	8004aa6 <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3303      	adds	r3, #3
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3303      	adds	r3, #3
 8004a9e:	f022 020f 	bic.w	r2, r2, #15
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ba      	bne.n	8004a2c <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 8004ad8:	e035      	b.n	8004b46 <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 8004ada:	2304      	movs	r3, #4
 8004adc:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	440b      	add	r3, r1
 8004afe:	0052      	lsls	r2, r2, #1
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	7819      	ldrb	r1, [r3, #0]
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	7bba      	ldrb	r2, [r7, #14]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8004b1a:	7b7b      	ldrb	r3, [r7, #13]
 8004b1c:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1dc      	bne.n	8004ade <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3303      	adds	r3, #3
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3303      	adds	r3, #3
 8004b34:	f042 0210 	orr.w	r2, r2, #16
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1c6      	bne.n	8004ada <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f83f 	bl	8004c00 <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	7819      	ldrb	r1, [r3, #0]
 8004b88:	7b3a      	ldrb	r2, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	404a      	eors	r2, r1
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3305      	adds	r3, #5
 8004b98:	7819      	ldrb	r1, [r3, #0]
 8004b9a:	7b7a      	ldrb	r2, [r7, #13]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3305      	adds	r3, #5
 8004ba0:	404a      	eors	r2, r1
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3306      	adds	r3, #6
 8004baa:	7819      	ldrb	r1, [r3, #0]
 8004bac:	7bba      	ldrb	r2, [r7, #14]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3306      	adds	r3, #6
 8004bb2:	404a      	eors	r2, r1
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3307      	adds	r3, #7
 8004bbc:	7819      	ldrb	r1, [r3, #0]
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3307      	adds	r3, #7
 8004bc4:	404a      	eors	r2, r1
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8004c0a:	f107 030c 	add.w	r3, r7, #12
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fa4d 	bl	80050b0 <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	75fb      	strb	r3, [r7, #23]
 8004c1a:	e06d      	b.n	8004cf8 <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	3318      	adds	r3, #24
 8004c22:	443b      	add	r3, r7
 8004c24:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	440b      	add	r3, r1
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4053      	eors	r3, r2
 8004c34:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8004c36:	7dbb      	ldrb	r3, [r7, #22]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7dbb      	ldrb	r3, [r7, #22]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	7dbb      	ldrb	r3, [r7, #22]
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	7dbb      	ldrb	r3, [r7, #22]
 8004c64:	4923      	ldr	r1, [pc, #140]	@ (8004cf4 <phCryptoSym_Sw_Des_F+0xf4>)
 8004c66:	0192      	lsls	r2, r2, #6
 8004c68:	440a      	add	r2, r1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	781a      	ldrb	r2, [r3, #0]
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	3318      	adds	r3, #24
 8004c76:	443b      	add	r3, r7
 8004c78:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	3301      	adds	r3, #1
 8004c82:	3318      	adds	r3, #24
 8004c84:	443b      	add	r3, r7
 8004c86:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	3301      	adds	r3, #1
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	440b      	add	r3, r1
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	4053      	eors	r3, r2
 8004c98:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8004c9a:	7dbb      	ldrb	r3, [r7, #22]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	7dbb      	ldrb	r3, [r7, #22]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	7dbb      	ldrb	r3, [r7, #22]
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	3318      	adds	r3, #24
 8004cc6:	443b      	add	r3, r7
 8004cc8:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	7dbb      	ldrb	r3, [r7, #22]
 8004cd4:	4807      	ldr	r0, [pc, #28]	@ (8004cf4 <phCryptoSym_Sw_Des_F+0xf4>)
 8004cd6:	0192      	lsls	r2, r2, #6
 8004cd8:	4402      	add	r2, r0
 8004cda:	4413      	add	r3, r2
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	443b      	add	r3, r7
 8004ce8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
 8004cf2:	e001      	b.n	8004cf8 <phCryptoSym_Sw_Des_F+0xf8>
 8004cf4:	0802034c 	.word	0x0802034c
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d98e      	bls.n	8004c1c <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 8004cfe:	7b3a      	ldrb	r2, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3301      	adds	r3, #1
 8004d04:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 8004d0c:	7b3b      	ldrb	r3, [r7, #12]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 8004d14:	7b3a      	ldrb	r2, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3302      	adds	r3, #2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b25a      	sxtb	r2, r3
 8004d2a:	7b3b      	ldrb	r3, [r7, #12]
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	015b      	lsls	r3, r3, #5
 8004d30:	b25b      	sxtb	r3, r3
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b25a      	sxtb	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3302      	adds	r3, #2
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8004d44:	7b3b      	ldrb	r3, [r7, #12]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8004d54:	7b3b      	ldrb	r3, [r7, #12]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3303      	adds	r3, #3
 8004d5e:	f002 0210 	and.w	r2, r2, #16
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 8004d66:	7b3b      	ldrb	r3, [r7, #12]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3303      	adds	r3, #3
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b25a      	sxtb	r2, r3
 8004d76:	7b3b      	ldrb	r3, [r7, #12]
 8004d78:	b25b      	sxtb	r3, r3
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	b25b      	sxtb	r3, r3
 8004d80:	4313      	orrs	r3, r2
 8004d82:	b25a      	sxtb	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3303      	adds	r3, #3
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 8004d8c:	7b3b      	ldrb	r3, [r7, #12]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3302      	adds	r3, #2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b25a      	sxtb	r2, r3
 8004d9c:	7b3b      	ldrb	r3, [r7, #12]
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	4313      	orrs	r3, r2
 8004da8:	b25a      	sxtb	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3302      	adds	r3, #2
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	7b7b      	ldrb	r3, [r7, #13]
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	b25a      	sxtb	r2, r3
 8004dcc:	7b7b      	ldrb	r3, [r7, #13]
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	015b      	lsls	r3, r3, #5
 8004dd2:	b25b      	sxtb	r3, r3
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	b25a      	sxtb	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3301      	adds	r3, #1
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3302      	adds	r3, #2
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b25a      	sxtb	r2, r3
 8004dee:	7b7b      	ldrb	r3, [r7, #13]
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	b25a      	sxtb	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3302      	adds	r3, #2
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3303      	adds	r3, #3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25a      	sxtb	r2, r3
 8004e10:	7b7b      	ldrb	r3, [r7, #13]
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	b25b      	sxtb	r3, r3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b25a      	sxtb	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3303      	adds	r3, #3
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 8004e2a:	7b7b      	ldrb	r3, [r7, #13]
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b25a      	sxtb	r2, r3
 8004e38:	7b7b      	ldrb	r3, [r7, #13]
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8004e4c:	7b7b      	ldrb	r3, [r7, #13]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3303      	adds	r3, #3
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b25a      	sxtb	r2, r3
 8004e5c:	7b7b      	ldrb	r3, [r7, #13]
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b25a      	sxtb	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3303      	adds	r3, #3
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 8004e72:	7b7b      	ldrb	r3, [r7, #13]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b25a      	sxtb	r2, r3
 8004e82:	7b7b      	ldrb	r3, [r7, #13]
 8004e84:	b25b      	sxtb	r3, r3
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b25a      	sxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3301      	adds	r3, #1
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8004e98:	7b7b      	ldrb	r3, [r7, #13]
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b25a      	sxtb	r2, r3
 8004ea8:	7b7b      	ldrb	r3, [r7, #13]
 8004eaa:	b25b      	sxtb	r3, r3
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b25a      	sxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3302      	adds	r3, #2
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	781a      	ldrb	r2, [r3, #0]
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	09db      	lsrs	r3, r3, #7
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	7819      	ldrb	r1, [r3, #0]
 8004ed6:	7bbb      	ldrb	r3, [r7, #14]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b25a      	sxtb	r2, r3
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	b25a      	sxtb	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b25a      	sxtb	r2, r3
 8004f1c:	7bbb      	ldrb	r3, [r7, #14]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b25a      	sxtb	r2, r3
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	b25b      	sxtb	r3, r3
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3303      	adds	r3, #3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b25a      	sxtb	r2, r3
 8004f52:	7bbb      	ldrb	r3, [r7, #14]
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	b25b      	sxtb	r3, r3
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	b25a      	sxtb	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3303      	adds	r3, #3
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 8004f68:	7bbb      	ldrb	r3, [r7, #14]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3301      	adds	r3, #1
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b25a      	sxtb	r2, r3
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	b25b      	sxtb	r3, r3
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	b25b      	sxtb	r3, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	b25a      	sxtb	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3302      	adds	r3, #2
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b25a      	sxtb	r2, r3
 8004f96:	7bbb      	ldrb	r3, [r7, #14]
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	b25b      	sxtb	r3, r3
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b25a      	sxtb	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3302      	adds	r3, #2
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b25a      	sxtb	r2, r3
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	b25b      	sxtb	r3, r3
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b25a      	sxtb	r2, r3
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	b25b      	sxtb	r3, r3
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	b25a      	sxtb	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3303      	adds	r3, #3
 8004fec:	7819      	ldrb	r1, [r3, #0]
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	09db      	lsrs	r3, r3, #7
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3303      	adds	r3, #3
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3302      	adds	r3, #2
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b25a      	sxtb	r2, r3
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	b25b      	sxtb	r3, r3
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	b25b      	sxtb	r3, r3
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	b25b      	sxtb	r3, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	b25a      	sxtb	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3302      	adds	r3, #2
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3303      	adds	r3, #3
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	b25a      	sxtb	r2, r3
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	b25b      	sxtb	r3, r3
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	b25b      	sxtb	r3, r3
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	b25b      	sxtb	r3, r3
 8005036:	4313      	orrs	r3, r2
 8005038:	b25a      	sxtb	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3303      	adds	r3, #3
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	b2db      	uxtb	r3, r3
 8005048:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3301      	adds	r3, #1
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b25a      	sxtb	r2, r3
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	b25b      	sxtb	r3, r3
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	b25b      	sxtb	r3, r3
 800505c:	4313      	orrs	r3, r2
 800505e:	b25a      	sxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3302      	adds	r3, #2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b25a      	sxtb	r2, r3
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	b25b      	sxtb	r3, r3
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	b25b      	sxtb	r3, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	b25a      	sxtb	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3302      	adds	r3, #2
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b25a      	sxtb	r2, r3
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	b25b      	sxtb	r3, r3
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	b25b      	sxtb	r3, r3
 800509e:	4313      	orrs	r3, r2
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	701a      	strb	r2, [r3, #0]

}
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3303      	adds	r3, #3
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	015b      	lsls	r3, r3, #5
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	08db      	lsrs	r3, r3, #3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	4313      	orrs	r3, r2
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3301      	adds	r3, #1
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	015b      	lsls	r3, r3, #5
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	b2da      	uxtb	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3301      	adds	r3, #1
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	08db      	lsrs	r3, r3, #3
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4313      	orrs	r3, r2
 800511c:	b2da      	uxtb	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3302      	adds	r3, #2
 8005122:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3301      	adds	r3, #1
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3302      	adds	r3, #2
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	09db      	lsrs	r3, r3, #7
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b2da      	uxtb	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	3303      	adds	r3, #3
 8005146:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3301      	adds	r3, #1
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	b2da      	uxtb	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3302      	adds	r3, #2
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	4313      	orrs	r3, r2
 800516a:	b2da      	uxtb	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	3304      	adds	r3, #4
 8005170:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3302      	adds	r3, #2
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3303      	adds	r3, #3
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	09db      	lsrs	r3, r3, #7
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b2da      	uxtb	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	3305      	adds	r3, #5
 8005194:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3302      	adds	r3, #2
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	015b      	lsls	r3, r3, #5
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3303      	adds	r3, #3
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	3306      	adds	r3, #6
 80051be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3303      	adds	r3, #3
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	3307      	adds	r3, #7
 80051e0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	@ 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	2210      	movs	r2, #16
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f018 f981 	bl	801d510 <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800520e:	f107 0312 	add.w	r3, r7, #18
 8005212:	461a      	mov	r2, r3
 8005214:	2102      	movs	r1, #2
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7fe f85e 	bl	80032d8 <phCryptoSym_Sw_GetConfig>
 800521c:	4603      	mov	r3, r0
 800521e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 8005226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005228:	e058      	b.n	80052dc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 800522a:	8a7b      	ldrh	r3, [r7, #18]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d005      	beq.n	800523c <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 8005230:	2b10      	cmp	r3, #16
 8005232:	d107      	bne.n	8005244 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 8005234:	2387      	movs	r3, #135	@ 0x87
 8005236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800523a:	e006      	b.n	800524a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 800523c:	231b      	movs	r3, #27
 800523e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8005242:	e002      	b.n	800524a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8005244:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8005248:	e048      	b.n	80052dc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f879 	bl	8005348 <phCryptoSym_Sw_EncryptBlock>
 8005256:	4603      	mov	r3, r0
 8005258:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800525a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 8005260:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005262:	e03b      	b.n	80052dc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 8005264:	8a7b      	ldrh	r3, [r7, #18]
 8005266:	b2d9      	uxtb	r1, r3
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f838 	bl	80052e4 <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 8005274:	7d3b      	ldrb	r3, [r7, #20]
 8005276:	b25b      	sxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	da0d      	bge.n	8005298 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	3b01      	subs	r3, #1
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4413      	add	r3, r2
 8005284:	7819      	ldrb	r1, [r3, #0]
 8005286:	8a7b      	ldrh	r3, [r7, #18]
 8005288:	3b01      	subs	r3, #1
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005292:	404a      	eors	r2, r1
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 8005298:	8a7b      	ldrh	r3, [r7, #18]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4619      	mov	r1, r3
 80052a0:	68b8      	ldr	r0, [r7, #8]
 80052a2:	f000 f81f 	bl	80052e4 <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	da0d      	bge.n	80052cc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 80052b0:	8a7b      	ldrh	r3, [r7, #18]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4413      	add	r3, r2
 80052b8:	7819      	ldrb	r1, [r3, #0]
 80052ba:	8a7b      	ldrh	r3, [r7, #18]
 80052bc:	3b01      	subs	r3, #1
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80052c6:	404a      	eors	r2, r1
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80052cc:	f107 0314 	add.w	r3, r7, #20
 80052d0:	2210      	movs	r2, #16
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f018 f91b 	bl	801d510 <memset>

    return PH_ERR_SUCCESS;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	@ 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	460b      	mov	r3, r1
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 80052f6:	7afb      	ldrb	r3, [r7, #11]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 80052fc:	7afb      	ldrb	r3, [r7, #11]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	440b      	add	r3, r1
 800530a:	0052      	lsls	r2, r2, #1
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 8005310:	7afb      	ldrb	r3, [r7, #11]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	7819      	ldrb	r1, [r3, #0]
 8005318:	7afb      	ldrb	r3, [r7, #11]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	7dfa      	ldrb	r2, [r7, #23]
 8005320:	430a      	orrs	r2, r1
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	09db      	lsrs	r3, r3, #7
 8005330:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 8005332:	7afb      	ldrb	r3, [r7, #11]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1de      	bne.n	80052f6 <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005356:	2b05      	cmp	r3, #5
 8005358:	f200 8088 	bhi.w	800546c <phCryptoSym_Sw_EncryptBlock+0x124>
 800535c:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <phCryptoSym_Sw_EncryptBlock+0x1c>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	0800537d 	.word	0x0800537d
 8005368:	08005395 	.word	0x08005395
 800536c:	080053ad 	.word	0x080053ad
 8005370:	080053c5 	.word	0x080053c5
 8005374:	080053dd 	.word	0x080053dd
 8005378:	08005425 	.word	0x08005425
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 800537c:	220a      	movs	r2, #10
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fe f83e 	bl	8003402 <phCryptoSym_Sw_Aes_EncryptBlock>
 8005386:	4603      	mov	r3, r0
 8005388:	81fb      	strh	r3, [r7, #14]
 800538a:	89fb      	ldrh	r3, [r7, #14]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d070      	beq.n	8005472 <phCryptoSym_Sw_EncryptBlock+0x12a>
 8005390:	89fb      	ldrh	r3, [r7, #14]
 8005392:	e07a      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8005394:	220c      	movs	r2, #12
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fe f832 	bl	8003402 <phCryptoSym_Sw_Aes_EncryptBlock>
 800539e:	4603      	mov	r3, r0
 80053a0:	81fb      	strh	r3, [r7, #14]
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d066      	beq.n	8005476 <phCryptoSym_Sw_EncryptBlock+0x12e>
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	e06e      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80053ac:	220e      	movs	r2, #14
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fe f826 	bl	8003402 <phCryptoSym_Sw_Aes_EncryptBlock>
 80053b6:	4603      	mov	r3, r0
 80053b8:	81fb      	strh	r3, [r7, #14]
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05c      	beq.n	800547a <phCryptoSym_Sw_EncryptBlock+0x132>
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	e062      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80053c4:	2200      	movs	r2, #0
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fe fdcf 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 80053ce:	4603      	mov	r3, r0
 80053d0:	81fb      	strh	r3, [r7, #14]
 80053d2:	89fb      	ldrh	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d052      	beq.n	800547e <phCryptoSym_Sw_EncryptBlock+0x136>
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	e056      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80053dc:	2200      	movs	r2, #0
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fe fdc3 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 80053e6:	4603      	mov	r3, r0
 80053e8:	81fb      	strh	r3, [r7, #14]
 80053ea:	89fb      	ldrh	r3, [r7, #14]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <phCryptoSym_Sw_EncryptBlock+0xac>
 80053f0:	89fb      	ldrh	r3, [r7, #14]
 80053f2:	e04a      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80053f4:	2201      	movs	r2, #1
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fe fe05 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 80053fe:	4603      	mov	r3, r0
 8005400:	81fb      	strh	r3, [r7, #14]
 8005402:	89fb      	ldrh	r3, [r7, #14]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <phCryptoSym_Sw_EncryptBlock+0xc4>
 8005408:	89fb      	ldrh	r3, [r7, #14]
 800540a:	e03e      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800540c:	2200      	movs	r2, #0
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fe fdab 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 8005416:	4603      	mov	r3, r0
 8005418:	81fb      	strh	r3, [r7, #14]
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d030      	beq.n	8005482 <phCryptoSym_Sw_EncryptBlock+0x13a>
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	e032      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005424:	2200      	movs	r2, #0
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fe fd9f 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 800542e:	4603      	mov	r3, r0
 8005430:	81fb      	strh	r3, [r7, #14]
 8005432:	89fb      	ldrh	r3, [r7, #14]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <phCryptoSym_Sw_EncryptBlock+0xf4>
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	e026      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 800543c:	2201      	movs	r2, #1
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fe fde1 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 8005446:	4603      	mov	r3, r0
 8005448:	81fb      	strh	r3, [r7, #14]
 800544a:	89fb      	ldrh	r3, [r7, #14]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <phCryptoSym_Sw_EncryptBlock+0x10c>
 8005450:	89fb      	ldrh	r3, [r7, #14]
 8005452:	e01a      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005454:	2202      	movs	r2, #2
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fe fd87 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 800545e:	4603      	mov	r3, r0
 8005460:	81fb      	strh	r3, [r7, #14]
 8005462:	89fb      	ldrh	r3, [r7, #14]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <phCryptoSym_Sw_EncryptBlock+0x13e>
 8005468:	89fb      	ldrh	r3, [r7, #14]
 800546a:	e00e      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800546c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005470:	e00b      	b.n	800548a <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 8005472:	bf00      	nop
 8005474:	e008      	b.n	8005488 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8005476:	bf00      	nop
 8005478:	e006      	b.n	8005488 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800547a:	bf00      	nop
 800547c:	e004      	b.n	8005488 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800547e:	bf00      	nop
 8005480:	e002      	b.n	8005488 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8005482:	bf00      	nop
 8005484:	e000      	b.n	8005488 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8005486:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop

08005494 <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	f200 8088 	bhi.w	80055b8 <phCryptoSym_Sw_DecryptBlock+0x124>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <phCryptoSym_Sw_DecryptBlock+0x1c>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	08005511 	.word	0x08005511
 80054c0:	08005529 	.word	0x08005529
 80054c4:	08005571 	.word	0x08005571
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80054c8:	220a      	movs	r2, #10
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fe f80b 	bl	80034e8 <phCryptoSym_Sw_Aes_DecryptBlock>
 80054d2:	4603      	mov	r3, r0
 80054d4:	81fb      	strh	r3, [r7, #14]
 80054d6:	89fb      	ldrh	r3, [r7, #14]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d070      	beq.n	80055be <phCryptoSym_Sw_DecryptBlock+0x12a>
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	e07a      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80054e0:	220c      	movs	r2, #12
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fd ffff 	bl	80034e8 <phCryptoSym_Sw_Aes_DecryptBlock>
 80054ea:	4603      	mov	r3, r0
 80054ec:	81fb      	strh	r3, [r7, #14]
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d066      	beq.n	80055c2 <phCryptoSym_Sw_DecryptBlock+0x12e>
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	e06e      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80054f8:	220e      	movs	r2, #14
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fd fff3 	bl	80034e8 <phCryptoSym_Sw_Aes_DecryptBlock>
 8005502:	4603      	mov	r3, r0
 8005504:	81fb      	strh	r3, [r7, #14]
 8005506:	89fb      	ldrh	r3, [r7, #14]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05c      	beq.n	80055c6 <phCryptoSym_Sw_DecryptBlock+0x132>
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	e062      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005510:	2200      	movs	r2, #0
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7fe fd77 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 800551a:	4603      	mov	r3, r0
 800551c:	81fb      	strh	r3, [r7, #14]
 800551e:	89fb      	ldrh	r3, [r7, #14]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d052      	beq.n	80055ca <phCryptoSym_Sw_DecryptBlock+0x136>
 8005524:	89fb      	ldrh	r3, [r7, #14]
 8005526:	e056      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005528:	2200      	movs	r2, #0
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fe fd6b 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 8005532:	4603      	mov	r3, r0
 8005534:	81fb      	strh	r3, [r7, #14]
 8005536:	89fb      	ldrh	r3, [r7, #14]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <phCryptoSym_Sw_DecryptBlock+0xac>
 800553c:	89fb      	ldrh	r3, [r7, #14]
 800553e:	e04a      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005540:	2201      	movs	r2, #1
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fe fd11 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 800554a:	4603      	mov	r3, r0
 800554c:	81fb      	strh	r3, [r7, #14]
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <phCryptoSym_Sw_DecryptBlock+0xc4>
 8005554:	89fb      	ldrh	r3, [r7, #14]
 8005556:	e03e      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005558:	2200      	movs	r2, #0
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fe fd53 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 8005562:	4603      	mov	r3, r0
 8005564:	81fb      	strh	r3, [r7, #14]
 8005566:	89fb      	ldrh	r3, [r7, #14]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d030      	beq.n	80055ce <phCryptoSym_Sw_DecryptBlock+0x13a>
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	e032      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005570:	2202      	movs	r2, #2
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7fe fd47 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 800557a:	4603      	mov	r3, r0
 800557c:	81fb      	strh	r3, [r7, #14]
 800557e:	89fb      	ldrh	r3, [r7, #14]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <phCryptoSym_Sw_DecryptBlock+0xf4>
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	e026      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005588:	2201      	movs	r2, #1
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fe fced 	bl	8003f6c <phCryptoSym_Sw_Des_EncryptBlock>
 8005592:	4603      	mov	r3, r0
 8005594:	81fb      	strh	r3, [r7, #14]
 8005596:	89fb      	ldrh	r3, [r7, #14]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <phCryptoSym_Sw_DecryptBlock+0x10c>
 800559c:	89fb      	ldrh	r3, [r7, #14]
 800559e:	e01a      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80055a0:	2200      	movs	r2, #0
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fe fd2f 	bl	8004008 <phCryptoSym_Sw_Des_DecryptBlock>
 80055aa:	4603      	mov	r3, r0
 80055ac:	81fb      	strh	r3, [r7, #14]
 80055ae:	89fb      	ldrh	r3, [r7, #14]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00e      	beq.n	80055d2 <phCryptoSym_Sw_DecryptBlock+0x13e>
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	e00e      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80055b8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80055bc:	e00b      	b.n	80055d6 <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 80055be:	bf00      	nop
 80055c0:	e008      	b.n	80055d4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80055c2:	bf00      	nop
 80055c4:	e006      	b.n	80055d4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80055c6:	bf00      	nop
 80055c8:	e004      	b.n	80055d4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80055d2:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop

080055e0 <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	461a      	mov	r2, r3
 80055ec:	460b      	mov	r3, r1
 80055ee:	817b      	strh	r3, [r7, #10]
 80055f0:	4613      	mov	r3, r2
 80055f2:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <phCryptoSym_Encrypt+0x20>
 80055fa:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80055fe:	e02d      	b.n	800565c <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <phCryptoSym_Encrypt+0x2c>
 8005606:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800560a:	e027      	b.n	800565c <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <phCryptoSym_Encrypt+0x38>
 8005612:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005616:	e021      	b.n	800565c <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005620:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8005624:	d004      	beq.n	8005630 <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005626:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800562a:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 800562c:	8afb      	ldrh	r3, [r7, #22]
 800562e:	e015      	b.n	800565c <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d10b      	bne.n	8005652 <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 800563a:	893a      	ldrh	r2, [r7, #8]
 800563c:	8979      	ldrh	r1, [r7, #10]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	4613      	mov	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7fd fb18 	bl	8002c7c <phCryptoSym_Sw_Encrypt>
 800564c:	4603      	mov	r3, r0
 800564e:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 8005650:	e003      	b.n	800565a <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005652:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005656:	82fb      	strh	r3, [r7, #22]
            break;
 8005658:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 800565a:	8afb      	ldrh	r3, [r7, #22]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	461a      	mov	r2, r3
 8005670:	460b      	mov	r3, r1
 8005672:	817b      	strh	r3, [r7, #10]
 8005674:	4613      	mov	r3, r2
 8005676:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <phCryptoSym_CalculateMac+0x20>
 800567e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005682:	e038      	b.n	80056f6 <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 8005684:	893b      	ldrh	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <phCryptoSym_CalculateMac+0x32>
 8005690:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005694:	e02f      	b.n	80056f6 <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <phCryptoSym_CalculateMac+0x3e>
 800569c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80056a0:	e029      	b.n	80056f6 <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <phCryptoSym_CalculateMac+0x4a>
 80056a8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80056ac:	e023      	b.n	80056f6 <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80056b6:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80056ba:	d004      	beq.n	80056c6 <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80056bc:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056c0:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80056c2:	8afb      	ldrh	r3, [r7, #22]
 80056c4:	e017      	b.n	80056f6 <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10d      	bne.n	80056ec <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 80056d0:	893a      	ldrh	r2, [r7, #8]
 80056d2:	8979      	ldrh	r1, [r7, #10]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7fd fb89 	bl	8002df8 <phCryptoSym_Sw_CalculateMac>
 80056e6:	4603      	mov	r3, r0
 80056e8:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 80056ea:	e003      	b.n	80056f4 <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80056ec:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056f0:	82fb      	strh	r3, [r7, #22]
            break;
 80056f2:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80056f4:	8afb      	ldrh	r3, [r7, #22]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <phCryptoSym_LoadIv+0x1a>
 8005712:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005716:	e024      	b.n	8005762 <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <phCryptoSym_LoadIv+0x26>
 800571e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005722:	e01e      	b.n	8005762 <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800572c:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8005730:	d004      	beq.n	800573c <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005732:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005736:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	e012      	b.n	8005762 <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d108      	bne.n	8005758 <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	461a      	mov	r2, r3
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7fd fd11 	bl	8003174 <phCryptoSym_Sw_LoadIv>
 8005752:	4603      	mov	r3, r0
 8005754:	82fb      	strh	r3, [r7, #22]
            break;
 8005756:	e003      	b.n	8005760 <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005758:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800575c:	82fb      	strh	r3, [r7, #22]
            break;
 800575e:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8005760:	8afb      	ldrh	r3, [r7, #22]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	4613      	mov	r3, r2
 8005776:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <phCryptoSym_LoadKeyDirect+0x1a>
 800577e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005782:	e024      	b.n	80057ce <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <phCryptoSym_LoadKeyDirect+0x26>
 800578a:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800578e:	e01e      	b.n	80057ce <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005798:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800579c:	d004      	beq.n	80057a8 <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800579e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80057a2:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80057a4:	8afb      	ldrh	r3, [r7, #22]
 80057a6:	e012      	b.n	80057ce <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d108      	bne.n	80057c4 <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	461a      	mov	r2, r3
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7fd fd09 	bl	80031d0 <phCryptoSym_Sw_LoadKeyDirect>
 80057be:	4603      	mov	r3, r0
 80057c0:	82fb      	strh	r3, [r7, #22]
            break;
 80057c2:	e003      	b.n	80057cc <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80057c4:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80057c8:	82fb      	strh	r3, [r7, #22]
            break;
 80057ca:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80057cc:	8afb      	ldrh	r3, [r7, #22]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b088      	sub	sp, #32
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	461a      	mov	r2, r3
 80057e2:	460b      	mov	r3, r1
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	4613      	mov	r3, r2
 80057e8:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	2b18      	cmp	r3, #24
 80057ee:	d002      	beq.n	80057f6 <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 80057f0:	f24e 2320 	movw	r3, #57888	@ 0xe220
 80057f4:	e07b      	b.n	80058ee <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <phKeyStore_Sw_Init+0x2a>
 80057fc:	2321      	movs	r3, #33	@ 0x21
 80057fe:	e076      	b.n	80058ee <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <phKeyStore_Sw_Init+0x34>
 8005806:	2321      	movs	r3, #33	@ 0x21
 8005808:	e071      	b.n	80058ee <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <phKeyStore_Sw_Init+0x3e>
 8005810:	2321      	movs	r3, #33	@ 0x21
 8005812:	e06c      	b.n	80058ee <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <phKeyStore_Sw_Init+0x48>
 800581a:	2321      	movs	r3, #33	@ 0x21
 800581c:	e067      	b.n	80058ee <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f24e 2201 	movw	r2, #57857	@ 0xe201
 8005824:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005830:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	893a      	ldrh	r2, [r7, #8]
 8005836:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800583c:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005842:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005848:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 800584a:	2300      	movs	r3, #0
 800584c:	83fb      	strh	r3, [r7, #30]
 800584e:	e02e      	b.n	80058ae <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	8bfb      	ldrh	r3, [r7, #30]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800585e:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	8bfb      	ldrh	r3, [r7, #30]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800586e:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8005870:	2300      	movs	r3, #0
 8005872:	83bb      	strh	r3, [r7, #28]
 8005874:	e013      	b.n	800589e <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 8005876:	f107 0314 	add.w	r3, r7, #20
 800587a:	8bba      	ldrh	r2, [r7, #28]
 800587c:	8bf9      	ldrh	r1, [r7, #30]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f90a 	bl	8005a98 <phKeyStore_Sw_GetKeyValuePtrPos>
 8005884:	4603      	mov	r3, r0
 8005886:	837b      	strh	r3, [r7, #26]
 8005888:	8b7b      	ldrh	r3, [r7, #26]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <phKeyStore_Sw_Init+0xbc>
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	e02d      	b.n	80058ee <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8005898:	8bbb      	ldrh	r3, [r7, #28]
 800589a:	3301      	adds	r3, #1
 800589c:	83bb      	strh	r3, [r7, #28]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	89db      	ldrh	r3, [r3, #14]
 80058a2:	8bba      	ldrh	r2, [r7, #28]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3e6      	bcc.n	8005876 <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 80058a8:	8bfb      	ldrh	r3, [r7, #30]
 80058aa:	3301      	adds	r3, #1
 80058ac:	83fb      	strh	r3, [r7, #30]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	899b      	ldrh	r3, [r3, #12]
 80058b2:	8bfa      	ldrh	r2, [r7, #30]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3cb      	bcc.n	8005850 <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	83fb      	strh	r3, [r7, #30]
 80058bc:	e011      	b.n	80058e2 <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	8bfb      	ldrh	r3, [r7, #30]
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	8bfb      	ldrh	r3, [r7, #30]
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	4413      	add	r3, r2
 80058d8:	2200      	movs	r2, #0
 80058da:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 80058dc:	8bfb      	ldrh	r3, [r7, #30]
 80058de:	3301      	adds	r3, #1
 80058e0:	83fb      	strh	r3, [r7, #30]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8a9b      	ldrh	r3, [r3, #20]
 80058e6:	8bfa      	ldrh	r2, [r7, #30]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3e8      	bcc.n	80058be <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	807b      	strh	r3, [r7, #2]
 8005902:	4613      	mov	r3, r2
 8005904:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	899b      	ldrh	r3, [r3, #12]
 800590a:	887a      	ldrh	r2, [r7, #2]
 800590c:	429a      	cmp	r2, r3
 800590e:	d302      	bcc.n	8005916 <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005910:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005914:	e038      	b.n	8005988 <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 8005916:	883b      	ldrh	r3, [r7, #0]
 8005918:	2b06      	cmp	r3, #6
 800591a:	d902      	bls.n	8005922 <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 800591c:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005920:	e032      	b.n	8005988 <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 8005922:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	887b      	ldrh	r3, [r7, #2]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	883a      	ldrh	r2, [r7, #0]
 8005930:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005940:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8005942:	2300      	movs	r3, #0
 8005944:	81fb      	strh	r3, [r7, #14]
 8005946:	e019      	b.n	800597c <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 8005948:	f107 0308 	add.w	r3, r7, #8
 800594c:	89fa      	ldrh	r2, [r7, #14]
 800594e:	8879      	ldrh	r1, [r7, #2]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8a1 	bl	8005a98 <phKeyStore_Sw_GetKeyValuePtrPos>
 8005956:	4603      	mov	r3, r0
 8005958:	81bb      	strh	r3, [r7, #12]
 800595a:	89bb      	ldrh	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <phKeyStore_Sw_FormatKeyEntry+0x6e>
 8005960:	89bb      	ldrh	r3, [r7, #12]
 8005962:	e011      	b.n	8005988 <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2220      	movs	r2, #32
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f017 fdcd 	bl	801d510 <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	3301      	adds	r3, #1
 800597a:	81fb      	strh	r3, [r7, #14]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	89db      	ldrh	r3, [r3, #14]
 8005980:	89fa      	ldrh	r2, [r7, #14]
 8005982:	429a      	cmp	r2, r3
 8005984:	d3e0      	bcc.n	8005948 <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	461a      	mov	r2, r3
 800599e:	4603      	mov	r3, r0
 80059a0:	817b      	strh	r3, [r7, #10]
 80059a2:	460b      	mov	r3, r1
 80059a4:	813b      	strh	r3, [r7, #8]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	893a      	ldrh	r2, [r7, #8]
 80059b0:	8979      	ldrh	r1, [r7, #10]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f827 	bl	8005a06 <phKeyStore_Sw_GetKeyValuePtrVersion>
 80059b8:	4603      	mov	r3, r0
 80059ba:	82fb      	strh	r3, [r7, #22]
 80059bc:	8afb      	ldrh	r3, [r7, #22]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <phKeyStore_Sw_SetKey+0x36>
 80059c2:	8afb      	ldrh	r3, [r7, #22]
 80059c4:	e01b      	b.n	80059fe <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	897b      	ldrh	r3, [r7, #10]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d002      	beq.n	80059de <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80059d8:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80059dc:	e00f      	b.n	80059fe <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	461c      	mov	r4, r3
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f88d 	bl	8005b04 <phKeyStore_GetKeySize>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059f0:	4620      	mov	r0, r4
 80059f2:	f017 fe0c 	bl	801d60e <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80059fa:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd90      	pop	{r4, r7, pc}

08005a06 <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	817b      	strh	r3, [r7, #10]
 8005a14:	4613      	mov	r3, r2
 8005a16:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	899b      	ldrh	r3, [r3, #12]
 8005a22:	897a      	ldrh	r2, [r7, #10]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a28:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a2c:	e02e      	b.n	8005a8c <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8005a2e:	2300      	movs	r3, #0
 8005a30:	82fb      	strh	r3, [r7, #22]
 8005a32:	e01b      	b.n	8005a6c <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	89db      	ldrh	r3, [r3, #14]
 8005a3c:	8979      	ldrh	r1, [r7, #10]
 8005a3e:	fb11 f303 	smulbb	r3, r1, r3
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4619      	mov	r1, r3
 8005a46:	8afb      	ldrh	r3, [r7, #22]
 8005a48:	440b      	add	r3, r1
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	440b      	add	r3, r1
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	8c1b      	ldrh	r3, [r3, #32]
 8005a60:	893a      	ldrh	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d008      	beq.n	8005a78 <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8005a66:	8afb      	ldrh	r3, [r7, #22]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	82fb      	strh	r3, [r7, #22]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	89db      	ldrh	r3, [r3, #14]
 8005a70:	8afa      	ldrh	r2, [r7, #22]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3de      	bcc.n	8005a34 <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 8005a76:	e000      	b.n	8005a7a <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 8005a78:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	89db      	ldrh	r3, [r3, #14]
 8005a7e:	8afa      	ldrh	r2, [r7, #22]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d102      	bne.n	8005a8a <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a84:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a88:	e000      	b.n	8005a8c <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	899b      	ldrh	r3, [r3, #12]
 8005ab4:	897a      	ldrh	r2, [r7, #10]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005aba:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005abe:	e01b      	b.n	8005af8 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	89db      	ldrh	r3, [r3, #14]
 8005ac4:	893a      	ldrh	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d302      	bcc.n	8005ad0 <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005aca:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005ace:	e013      	b.n	8005af8 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	89db      	ldrh	r3, [r3, #14]
 8005ad8:	8979      	ldrh	r1, [r7, #10]
 8005ada:	fb11 f303 	smulbb	r3, r1, r3
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	893b      	ldrh	r3, [r7, #8]
 8005ae4:	440b      	add	r3, r1
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	460b      	mov	r3, r1
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	440b      	add	r3, r1
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d81b      	bhi.n	8005b4c <phKeyStore_GetKeySize+0x48>
 8005b14:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <phKeyStore_GetKeySize+0x18>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b3d 	.word	0x08005b3d
 8005b2c:	08005b41 	.word	0x08005b41
 8005b30:	08005b45 	.word	0x08005b45
 8005b34:	08005b39 	.word	0x08005b39
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8005b38:	230c      	movs	r3, #12
 8005b3a:	e008      	b.n	8005b4e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	e006      	b.n	8005b4e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 8005b40:	2310      	movs	r3, #16
 8005b42:	e004      	b.n	8005b4e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 8005b44:	2318      	movs	r3, #24
 8005b46:	e002      	b.n	8005b4e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8005b48:	2320      	movs	r3, #32
 8005b4a:	e000      	b.n	8005b4e <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8005b4c:	2300      	movs	r3, #0
    }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop

08005b5c <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e00a      	b.n	8005b84 <phNfcLib_SetContext+0x28>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a07      	ldr	r2, [pc, #28]	@ (8005b90 <phNfcLib_SetContext+0x34>)
 8005b74:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <phNfcLib_SetContext+0x34>)
 8005b7e:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000530 	.word	0x20000530

08005b94 <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	9303      	str	r3, [sp, #12]
 8005ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8005c94 <phNfcLib_CommonLayer_Init+0x100>)
 8005ba4:	9302      	str	r3, [sp, #8]
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	4b3b      	ldr	r3, [pc, #236]	@ (8005c98 <phNfcLib_CommonLayer_Init+0x104>)
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	2308      	movs	r3, #8
 8005bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8005c9c <phNfcLib_CommonLayer_Init+0x108>)
 8005bb2:	2118      	movs	r1, #24
 8005bb4:	483a      	ldr	r0, [pc, #232]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005bb6:	f7ff fe0e 	bl	80057d6 <phKeyStore_Sw_Init>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d162      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 8005bc4:	2206      	movs	r2, #6
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4835      	ldr	r0, [pc, #212]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005bca:	f7ff fe94 	bl	80058f6 <phKeyStore_Sw_FormatKeyEntry>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	80fb      	strh	r3, [r7, #6]
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d158      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	4b31      	ldr	r3, [pc, #196]	@ (8005ca4 <phNfcLib_CommonLayer_Init+0x110>)
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	2306      	movs	r3, #6
 8005be2:	2200      	movs	r2, #0
 8005be4:	2101      	movs	r1, #1
 8005be6:	482e      	ldr	r0, [pc, #184]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005be8:	f7ff fed2 	bl	8005990 <phKeyStore_Sw_SetKey>
 8005bec:	4603      	mov	r3, r0
 8005bee:	80fb      	strh	r3, [r7, #6]
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d149      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005bf8:	2140      	movs	r1, #64	@ 0x40
 8005bfa:	482b      	ldr	r0, [pc, #172]	@ (8005ca8 <phNfcLib_CommonLayer_Init+0x114>)
 8005bfc:	f7fc fff3 	bl	8002be6 <phCryptoSym_Sw_Init>
 8005c00:	4603      	mov	r3, r0
 8005c02:	80fb      	strh	r3, [r7, #6]
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d13f      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005c0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005c0c:	2140      	movs	r1, #64	@ 0x40
 8005c0e:	4827      	ldr	r0, [pc, #156]	@ (8005cac <phNfcLib_CommonLayer_Init+0x118>)
 8005c10:	f7fc ffe9 	bl	8002be6 <phCryptoSym_Sw_Init>
 8005c14:	4603      	mov	r3, r0
 8005c16:	80fb      	strh	r3, [r7, #6]
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d135      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005c1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005c20:	2140      	movs	r1, #64	@ 0x40
 8005c22:	4823      	ldr	r0, [pc, #140]	@ (8005cb0 <phNfcLib_CommonLayer_Init+0x11c>)
 8005c24:	f7fc ffdf 	bl	8002be6 <phCryptoSym_Sw_Init>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	80fb      	strh	r3, [r7, #6]
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d12b      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 8005c32:	22ff      	movs	r2, #255	@ 0xff
 8005c34:	2100      	movs	r1, #0
 8005c36:	481f      	ldr	r0, [pc, #124]	@ (8005cb4 <phNfcLib_CommonLayer_Init+0x120>)
 8005c38:	f017 fc6a 	bl	801d510 <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 8005c3c:	22ff      	movs	r2, #255	@ 0xff
 8005c3e:	491d      	ldr	r1, [pc, #116]	@ (8005cb4 <phNfcLib_CommonLayer_Init+0x120>)
 8005c40:	481d      	ldr	r0, [pc, #116]	@ (8005cb8 <phNfcLib_CommonLayer_Init+0x124>)
 8005c42:	f000 fc0f 	bl	8006464 <phTMIUtils_Init>
 8005c46:	4603      	mov	r3, r0
 8005c48:	80fb      	strh	r3, [r7, #6]
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11c      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005c50:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005c52:	2140      	movs	r1, #64	@ 0x40
 8005c54:	4819      	ldr	r0, [pc, #100]	@ (8005cbc <phNfcLib_CommonLayer_Init+0x128>)
 8005c56:	f7fc ffc6 	bl	8002be6 <phCryptoSym_Sw_Init>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d112      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 8005c64:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <phNfcLib_CommonLayer_Init+0x128>)
 8005c66:	2120      	movs	r1, #32
 8005c68:	4815      	ldr	r0, [pc, #84]	@ (8005cc0 <phNfcLib_CommonLayer_Init+0x12c>)
 8005c6a:	f7fc fcd3 	bl	8002614 <phCryptoRng_Sw_Init>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80fb      	strh	r3, [r7, #6]
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d108      	bne.n	8005c8a <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 8005c78:	2208      	movs	r2, #8
 8005c7a:	4912      	ldr	r1, [pc, #72]	@ (8005cc4 <phNfcLib_CommonLayer_Init+0x130>)
 8005c7c:	4810      	ldr	r0, [pc, #64]	@ (8005cc0 <phNfcLib_CommonLayer_Init+0x12c>)
 8005c7e:	f7fc ff79 	bl	8002b74 <phCryptoRng_Seed>
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20001784 	.word	0x20001784
 8005c98:	20001564 	.word	0x20001564
 8005c9c:	20001544 	.word	0x20001544
 8005ca0:	200006cc 	.word	0x200006cc
 8005ca4:	2000000c 	.word	0x2000000c
 8005ca8:	20000cd0 	.word	0x20000cd0
 8005cac:	20000d10 	.word	0x20000d10
 8005cb0:	20000d50 	.word	0x20000d50
 8005cb4:	20001160 	.word	0x20001160
 8005cb8:	200014f0 	.word	0x200014f0
 8005cbc:	20001504 	.word	0x20001504
 8005cc0:	20000d90 	.word	0x20000d90
 8005cc4:	20001158 	.word	0x20001158

08005cc8 <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 8005cd2:	4a31      	ldr	r2, [pc, #196]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005cd4:	2118      	movs	r1, #24
 8005cd6:	4831      	ldr	r0, [pc, #196]	@ (8005d9c <phNfcLib_PAL_Init+0xd4>)
 8005cd8:	f00d f9ac 	bl	8013034 <phpalI14443p3a_Sw_Init>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	80fb      	strh	r3, [r7, #6]
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d152      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 8005ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005ce8:	212c      	movs	r1, #44	@ 0x2c
 8005cea:	482d      	ldr	r0, [pc, #180]	@ (8005da0 <phNfcLib_PAL_Init+0xd8>)
 8005cec:	f00d ffa2 	bl	8013c34 <phpalI14443p3b_Sw_Init>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	80fb      	strh	r3, [r7, #6]
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d148      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 8005cfa:	4a27      	ldr	r2, [pc, #156]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005cfc:	2114      	movs	r1, #20
 8005cfe:	4829      	ldr	r0, [pc, #164]	@ (8005da4 <phNfcLib_PAL_Init+0xdc>)
 8005d00:	f00e ff24 	bl	8014b4c <phpalI14443p4a_Sw_Init>
 8005d04:	4603      	mov	r3, r0
 8005d06:	80fb      	strh	r3, [r7, #6]
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d13e      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 8005d0e:	4a22      	ldr	r2, [pc, #136]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005d10:	2114      	movs	r1, #20
 8005d12:	4825      	ldr	r0, [pc, #148]	@ (8005da8 <phNfcLib_PAL_Init+0xe0>)
 8005d14:	f00e fe00 	bl	8014918 <phpalI14443p4_Sw_Init>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	80fb      	strh	r3, [r7, #6]
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d134      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 8005d22:	4b21      	ldr	r3, [pc, #132]	@ (8005da8 <phNfcLib_PAL_Init+0xe0>)
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005d26:	210c      	movs	r1, #12
 8005d28:	4820      	ldr	r0, [pc, #128]	@ (8005dac <phNfcLib_PAL_Init+0xe4>)
 8005d2a:	f00f fed1 	bl	8015ad0 <phpalMifare_Sw_Init>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	80fb      	strh	r3, [r7, #6]
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d129      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005d3a:	2120      	movs	r1, #32
 8005d3c:	481c      	ldr	r0, [pc, #112]	@ (8005db0 <phNfcLib_PAL_Init+0xe8>)
 8005d3e:	f00c ff1f 	bl	8012b80 <phpalFelica_Sw_Init>
 8005d42:	4603      	mov	r3, r0
 8005d44:	80fb      	strh	r3, [r7, #6]
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11f      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 8005d4c:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005d4e:	211c      	movs	r1, #28
 8005d50:	4818      	ldr	r0, [pc, #96]	@ (8005db4 <phNfcLib_PAL_Init+0xec>)
 8005d52:	f00f fee6 	bl	8015b22 <phpalSli15693_Sw_Init>
 8005d56:	4603      	mov	r3, r0
 8005d58:	80fb      	strh	r3, [r7, #6]
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d115      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8005d60:	4a0d      	ldr	r2, [pc, #52]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005d62:	210c      	movs	r1, #12
 8005d64:	4814      	ldr	r0, [pc, #80]	@ (8005db8 <phNfcLib_PAL_Init+0xf0>)
 8005d66:	f00f fccc 	bl	8015702 <phpalI18000p3m3_Sw_Init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	80fb      	strh	r3, [r7, #6]
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 8005d74:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <phNfcLib_PAL_Init+0xf4>)
 8005d76:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8005d7a:	4a07      	ldr	r2, [pc, #28]	@ (8005d98 <phNfcLib_PAL_Init+0xd0>)
 8005d7c:	2134      	movs	r1, #52	@ 0x34
 8005d7e:	4810      	ldr	r0, [pc, #64]	@ (8005dc0 <phNfcLib_PAL_Init+0xf8>)
 8005d80:	f00f fc18 	bl	80155b4 <phpalI14443p4mC_Sw_Init>
 8005d84:	4603      	mov	r3, r0
 8005d86:	80fb      	strh	r3, [r7, #6]
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000538 	.word	0x20000538
 8005d9c:	200006e8 	.word	0x200006e8
 8005da0:	20000700 	.word	0x20000700
 8005da4:	2000072c 	.word	0x2000072c
 8005da8:	20000740 	.word	0x20000740
 8005dac:	200007d4 	.word	0x200007d4
 8005db0:	2000077c 	.word	0x2000077c
 8005db4:	20000754 	.word	0x20000754
 8005db8:	20000770 	.word	0x20000770
 8005dbc:	20000530 	.word	0x20000530
 8005dc0:	2000079c 	.word	0x2000079c

08005dc4 <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 8005dce:	4a7b      	ldr	r2, [pc, #492]	@ (8005fbc <phNfcLib_AL_Init+0x1f8>)
 8005dd0:	210c      	movs	r1, #12
 8005dd2:	487b      	ldr	r0, [pc, #492]	@ (8005fc0 <phNfcLib_AL_Init+0x1fc>)
 8005dd4:	f005 f92f 	bl	800b036 <phalFelica_Sw_Init>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	80fb      	strh	r3, [r7, #6]
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 80e6 	bne.w	8005fb0 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 8005de4:	4b77      	ldr	r3, [pc, #476]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005de6:	4a78      	ldr	r2, [pc, #480]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005de8:	210c      	movs	r1, #12
 8005dea:	4878      	ldr	r0, [pc, #480]	@ (8005fcc <phNfcLib_AL_Init+0x208>)
 8005dec:	f005 fd61 	bl	800b8b2 <phalMfc_Sw_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	80fb      	strh	r3, [r7, #6]
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 80da 	bne.w	8005fb0 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8005dfc:	4b74      	ldr	r3, [pc, #464]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	2300      	movs	r3, #0
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005e06:	4a70      	ldr	r2, [pc, #448]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005e08:	211c      	movs	r1, #28
 8005e0a:	4872      	ldr	r0, [pc, #456]	@ (8005fd4 <phNfcLib_AL_Init+0x210>)
 8005e0c:	f006 f851 	bl	800beb2 <phalMful_Sw_Init>
 8005e10:	4603      	mov	r3, r0
 8005e12:	80fb      	strh	r3, [r7, #6]
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 80ca 	bne.w	8005fb0 <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8005e1c:	4b6e      	ldr	r3, [pc, #440]	@ (8005fd8 <phNfcLib_AL_Init+0x214>)
 8005e1e:	9302      	str	r3, [sp, #8]
 8005e20:	4b6b      	ldr	r3, [pc, #428]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	2300      	movs	r3, #0
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4b66      	ldr	r3, [pc, #408]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005e2a:	4a67      	ldr	r2, [pc, #412]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005e2c:	2168      	movs	r1, #104	@ 0x68
 8005e2e:	486b      	ldr	r0, [pc, #428]	@ (8005fdc <phNfcLib_AL_Init+0x218>)
 8005e30:	f005 fd68 	bl	800b904 <phalMfdf_Sw_Init>
 8005e34:	4603      	mov	r3, r0
 8005e36:	80fb      	strh	r3, [r7, #6]
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 80b8 	bne.w	8005fb0 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 8005e40:	4b67      	ldr	r3, [pc, #412]	@ (8005fe0 <phNfcLib_AL_Init+0x21c>)
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	4a67      	ldr	r2, [pc, #412]	@ (8005fe4 <phNfcLib_AL_Init+0x220>)
 8005e46:	8812      	ldrh	r2, [r2, #0]
 8005e48:	9205      	str	r2, [sp, #20]
 8005e4a:	4a67      	ldr	r2, [pc, #412]	@ (8005fe8 <phNfcLib_AL_Init+0x224>)
 8005e4c:	9204      	str	r2, [sp, #16]
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	4b66      	ldr	r3, [pc, #408]	@ (8005fec <phNfcLib_AL_Init+0x228>)
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	4b5e      	ldr	r3, [pc, #376]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	4b65      	ldr	r3, [pc, #404]	@ (8005ff0 <phNfcLib_AL_Init+0x22c>)
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4b59      	ldr	r3, [pc, #356]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005e60:	2154      	movs	r1, #84	@ 0x54
 8005e62:	4864      	ldr	r0, [pc, #400]	@ (8005ff4 <phNfcLib_AL_Init+0x230>)
 8005e64:	f006 f95a 	bl	800c11c <phalVca_Sw_Init>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	80fb      	strh	r3, [r7, #6]
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 809e 	bne.w	8005fb0 <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 8005e74:	4b58      	ldr	r3, [pc, #352]	@ (8005fd8 <phNfcLib_AL_Init+0x214>)
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	4b5e      	ldr	r3, [pc, #376]	@ (8005ff4 <phNfcLib_AL_Init+0x230>)
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ff8 <phNfcLib_AL_Init+0x234>)
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	4b53      	ldr	r3, [pc, #332]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005e82:	9302      	str	r3, [sp, #8]
 8005e84:	4b5d      	ldr	r3, [pc, #372]	@ (8005ffc <phNfcLib_AL_Init+0x238>)
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	4b59      	ldr	r3, [pc, #356]	@ (8005ff0 <phNfcLib_AL_Init+0x22c>)
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005e8e:	4a4e      	ldr	r2, [pc, #312]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005e90:	21b4      	movs	r1, #180	@ 0xb4
 8005e92:	485b      	ldr	r0, [pc, #364]	@ (8006000 <phNfcLib_AL_Init+0x23c>)
 8005e94:	f005 fda0 	bl	800b9d8 <phalMfdfEVx_Sw_Init>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	80fb      	strh	r3, [r7, #6]
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 8086 	bne.w	8005fb0 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8005ea4:	4956      	ldr	r1, [pc, #344]	@ (8006000 <phNfcLib_AL_Init+0x23c>)
 8005ea6:	4853      	ldr	r0, [pc, #332]	@ (8005ff4 <phNfcLib_AL_Init+0x230>)
 8005ea8:	f006 faad 	bl	800c406 <phalVca_SetApplicationType>
 8005eac:	4603      	mov	r3, r0
 8005eae:	80fb      	strh	r3, [r7, #6]
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d17c      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 8005eb6:	4b48      	ldr	r3, [pc, #288]	@ (8005fd8 <phNfcLib_AL_Init+0x214>)
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	4b4f      	ldr	r3, [pc, #316]	@ (8005ff8 <phNfcLib_AL_Init+0x234>)
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	4b44      	ldr	r3, [pc, #272]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8005ffc <phNfcLib_AL_Init+0x238>)
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff0 <phNfcLib_AL_Init+0x22c>)
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005ece:	21ac      	movs	r1, #172	@ 0xac
 8005ed0:	484c      	ldr	r0, [pc, #304]	@ (8006004 <phNfcLib_AL_Init+0x240>)
 8005ed2:	f005 fe33 	bl	800bb3c <phalMfdfLight_Sw_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80fb      	strh	r3, [r7, #6]
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d167      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 8005ee0:	4b44      	ldr	r3, [pc, #272]	@ (8005ff4 <phNfcLib_AL_Init+0x230>)
 8005ee2:	9305      	str	r3, [sp, #20]
 8005ee4:	4b44      	ldr	r3, [pc, #272]	@ (8005ff8 <phNfcLib_AL_Init+0x234>)
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	4b47      	ldr	r3, [pc, #284]	@ (8006008 <phNfcLib_AL_Init+0x244>)
 8005eea:	9303      	str	r3, [sp, #12]
 8005eec:	4b38      	ldr	r3, [pc, #224]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005eee:	9302      	str	r3, [sp, #8]
 8005ef0:	4b42      	ldr	r3, [pc, #264]	@ (8005ffc <phNfcLib_AL_Init+0x238>)
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <phNfcLib_AL_Init+0x22c>)
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4b32      	ldr	r3, [pc, #200]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005efa:	4a33      	ldr	r2, [pc, #204]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005efc:	2184      	movs	r1, #132	@ 0x84
 8005efe:	4843      	ldr	r0, [pc, #268]	@ (800600c <phNfcLib_AL_Init+0x248>)
 8005f00:	f005 feda 	bl	800bcb8 <phalMfpEVx_Sw_Init>
 8005f04:	4603      	mov	r3, r0
 8005f06:	80fb      	strh	r3, [r7, #6]
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d150      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8005f0e:	493f      	ldr	r1, [pc, #252]	@ (800600c <phNfcLib_AL_Init+0x248>)
 8005f10:	4838      	ldr	r0, [pc, #224]	@ (8005ff4 <phNfcLib_AL_Init+0x230>)
 8005f12:	f006 fa78 	bl	800c406 <phalVca_SetApplicationType>
 8005f16:	4603      	mov	r3, r0
 8005f18:	80fb      	strh	r3, [r7, #6]
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d147      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 8005f20:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd8 <phNfcLib_AL_Init+0x214>)
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005f26:	9302      	str	r3, [sp, #8]
 8005f28:	4b34      	ldr	r3, [pc, #208]	@ (8005ffc <phNfcLib_AL_Init+0x238>)
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	4b30      	ldr	r3, [pc, #192]	@ (8005ff0 <phNfcLib_AL_Init+0x22c>)
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	4b24      	ldr	r3, [pc, #144]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005f32:	4a25      	ldr	r2, [pc, #148]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005f34:	21a8      	movs	r1, #168	@ 0xa8
 8005f36:	4836      	ldr	r0, [pc, #216]	@ (8006010 <phNfcLib_AL_Init+0x24c>)
 8005f38:	f005 fc07 	bl	800b74a <phalMfNtag42XDna_Sw_Init>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	80fb      	strh	r3, [r7, #6]
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d134      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 8005f46:	4a33      	ldr	r2, [pc, #204]	@ (8006014 <phNfcLib_AL_Init+0x250>)
 8005f48:	2110      	movs	r1, #16
 8005f4a:	4833      	ldr	r0, [pc, #204]	@ (8006018 <phNfcLib_AL_Init+0x254>)
 8005f4c:	f005 ffec 	bl	800bf28 <phalT1T_Sw_Init>
 8005f50:	4603      	mov	r3, r0
 8005f52:	80fb      	strh	r3, [r7, #6]
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d12a      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <phNfcLib_AL_Init+0x200>)
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd0 <phNfcLib_AL_Init+0x20c>)
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	2300      	movs	r3, #0
 8005f64:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <phNfcLib_AL_Init+0x258>)
 8005f66:	2120      	movs	r1, #32
 8005f68:	482d      	ldr	r0, [pc, #180]	@ (8006020 <phNfcLib_AL_Init+0x25c>)
 8005f6a:	f005 f8cf 	bl	800b10c <phalICode_Sw_Init>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	80fb      	strh	r3, [r7, #6]
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11b      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 8005f78:	4b26      	ldr	r3, [pc, #152]	@ (8006014 <phNfcLib_AL_Init+0x250>)
 8005f7a:	9303      	str	r3, [sp, #12]
 8005f7c:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <phNfcLib_AL_Init+0x25c>)
 8005f7e:	9302      	str	r3, [sp, #8]
 8005f80:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <phNfcLib_AL_Init+0x204>)
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc0 <phNfcLib_AL_Init+0x1fc>)
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4b12      	ldr	r3, [pc, #72]	@ (8005fd4 <phNfcLib_AL_Init+0x210>)
 8005f8a:	4a23      	ldr	r2, [pc, #140]	@ (8006018 <phNfcLib_AL_Init+0x254>)
 8005f8c:	2180      	movs	r1, #128	@ 0x80
 8005f8e:	4825      	ldr	r0, [pc, #148]	@ (8006024 <phNfcLib_AL_Init+0x260>)
 8005f90:	f006 f874 	bl	800c07c <phalTop_Sw_Init>
 8005f94:	4603      	mov	r3, r0
 8005f96:	80fb      	strh	r3, [r7, #6]
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 8005f9e:	4a22      	ldr	r2, [pc, #136]	@ (8006028 <phNfcLib_AL_Init+0x264>)
 8005fa0:	210c      	movs	r1, #12
 8005fa2:	4822      	ldr	r0, [pc, #136]	@ (800602c <phNfcLib_AL_Init+0x268>)
 8005fa4:	f005 f86f 	bl	800b086 <phalI18000p3m3_Sw_Init>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	80fb      	strh	r3, [r7, #6]
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000077c 	.word	0x2000077c
 8005fc0:	200007ec 	.word	0x200007ec
 8005fc4:	200006cc 	.word	0x200006cc
 8005fc8:	200007d4 	.word	0x200007d4
 8005fcc:	20000818 	.word	0x20000818
 8005fd0:	20000d90 	.word	0x20000d90
 8005fd4:	20000a70 	.word	0x20000a70
 8005fd8:	20000538 	.word	0x20000538
 8005fdc:	20000824 	.word	0x20000824
 8005fe0:	20000008 	.word	0x20000008
 8005fe4:	2000000a 	.word	0x2000000a
 8005fe8:	20001320 	.word	0x20001320
 8005fec:	20001260 	.word	0x20001260
 8005ff0:	20000cd0 	.word	0x20000cd0
 8005ff4:	2000149c 	.word	0x2000149c
 8005ff8:	200014f0 	.word	0x200014f0
 8005ffc:	20000d10 	.word	0x20000d10
 8006000:	2000088c 	.word	0x2000088c
 8006004:	20000940 	.word	0x20000940
 8006008:	20000d50 	.word	0x20000d50
 800600c:	200009ec 	.word	0x200009ec
 8006010:	20000a8c 	.word	0x20000a8c
 8006014:	200006e8 	.word	0x200006e8
 8006018:	20000b34 	.word	0x20000b34
 800601c:	20000754 	.word	0x20000754
 8006020:	200007f8 	.word	0x200007f8
 8006024:	20000b44 	.word	0x20000b44
 8006028:	20000770 	.word	0x20000770
 800602c:	200007e0 	.word	0x200007e0

08006030 <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 8006036:	2300      	movs	r3, #0
 8006038:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 800603a:	2301      	movs	r3, #1
 800603c:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 800603e:	4b4b      	ldr	r3, [pc, #300]	@ (800616c <phNfcLib_Init+0x13c>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 808d 	bne.w	8006162 <phNfcLib_Init+0x132>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 8006048:	f7ff fda4 	bl	8005b94 <phNfcLib_CommonLayer_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	80fb      	strh	r3, [r7, #6]
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d159      	bne.n	800610a <phNfcLib_Init+0xda>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 8006056:	4b46      	ldr	r3, [pc, #280]	@ (8006170 <phNfcLib_Init+0x140>)
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	4b44      	ldr	r3, [pc, #272]	@ (8006174 <phNfcLib_Init+0x144>)
 8006062:	9302      	str	r3, [sp, #8]
 8006064:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	4b43      	ldr	r3, [pc, #268]	@ (8006178 <phNfcLib_Init+0x148>)
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	4b43      	ldr	r3, [pc, #268]	@ (800617c <phNfcLib_Init+0x14c>)
 8006070:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006074:	4842      	ldr	r0, [pc, #264]	@ (8006180 <phNfcLib_Init+0x150>)
 8006076:	f006 fa23 	bl	800c4c0 <phhalHw_Pn5180_Init>
 800607a:	4603      	mov	r3, r0
 800607c:	80fb      	strh	r3, [r7, #6]
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <phNfcLib_Init+0x58>
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	e06d      	b.n	8006164 <phNfcLib_Init+0x134>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 8006088:	f7ff fe1e 	bl	8005cc8 <phNfcLib_PAL_Init>
 800608c:	4603      	mov	r3, r0
 800608e:	80fb      	strh	r3, [r7, #6]
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d139      	bne.n	800610a <phNfcLib_Init+0xda>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 8006096:	f7ff fe95 	bl	8005dc4 <phNfcLib_AL_Init>
 800609a:	4603      	mov	r3, r0
 800609c:	80fb      	strh	r3, [r7, #6]
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d132      	bne.n	800610a <phNfcLib_Init+0xda>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 80060a4:	4a36      	ldr	r2, [pc, #216]	@ (8006180 <phNfcLib_Init+0x150>)
 80060a6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80060aa:	4836      	ldr	r0, [pc, #216]	@ (8006184 <phNfcLib_Init+0x154>)
 80060ac:	f000 fbf8 	bl	80068a0 <phacDiscLoop_Sw_Init>
 80060b0:	4603      	mov	r3, r0
 80060b2:	80fb      	strh	r3, [r7, #6]
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d127      	bne.n	800610a <phNfcLib_Init+0xda>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 80060ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006170 <phNfcLib_Init+0x140>)
 80060bc:	4a30      	ldr	r2, [pc, #192]	@ (8006180 <phNfcLib_Init+0x150>)
 80060be:	f8c3 26bc 	str.w	r2, [r3, #1724]	@ 0x6bc

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 80060c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006170 <phNfcLib_Init+0x140>)
 80060c4:	4a30      	ldr	r2, [pc, #192]	@ (8006188 <phNfcLib_Init+0x158>)
 80060c6:	f8c3 26c0 	str.w	r2, [r3, #1728]	@ 0x6c0
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 80060ca:	4b29      	ldr	r3, [pc, #164]	@ (8006170 <phNfcLib_Init+0x140>)
 80060cc:	4a2f      	ldr	r2, [pc, #188]	@ (800618c <phNfcLib_Init+0x15c>)
 80060ce:	f8c3 26c8 	str.w	r2, [r3, #1736]	@ 0x6c8
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <phNfcLib_Init+0x140>)
 80060d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006190 <phNfcLib_Init+0x160>)
 80060d6:	f8c3 26d0 	str.w	r2, [r3, #1744]	@ 0x6d0
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 80060da:	4b25      	ldr	r3, [pc, #148]	@ (8006170 <phNfcLib_Init+0x140>)
 80060dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006194 <phNfcLib_Init+0x164>)
 80060de:	f8c3 26cc 	str.w	r2, [r3, #1740]	@ 0x6cc
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 80060e2:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <phNfcLib_Init+0x140>)
 80060e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006198 <phNfcLib_Init+0x168>)
 80060e6:	f8c3 26c4 	str.w	r2, [r3, #1732]	@ 0x6c4
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 80060ea:	4b21      	ldr	r3, [pc, #132]	@ (8006170 <phNfcLib_Init+0x140>)
 80060ec:	4a2b      	ldr	r2, [pc, #172]	@ (800619c <phNfcLib_Init+0x16c>)
 80060ee:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 80060f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006170 <phNfcLib_Init+0x140>)
 80060f4:	4a2a      	ldr	r2, [pc, #168]	@ (80061a0 <phNfcLib_Init+0x170>)
 80060f6:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 80060fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <phNfcLib_Init+0x140>)
 80060fc:	4a29      	ldr	r2, [pc, #164]	@ (80061a4 <phNfcLib_Init+0x174>)
 80060fe:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 8006102:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <phNfcLib_Init+0x140>)
 8006104:	4a28      	ldr	r2, [pc, #160]	@ (80061a8 <phNfcLib_Init+0x178>)
 8006106:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <phNfcLib_Init+0xe6>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 8006110:	2310      	movs	r3, #16
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	e025      	b.n	8006162 <phNfcLib_Init+0x132>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 8006116:	4b15      	ldr	r3, [pc, #84]	@ (800616c <phNfcLib_Init+0x13c>)
 8006118:	2201      	movs	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 800611c:	4b13      	ldr	r3, [pc, #76]	@ (800616c <phNfcLib_Init+0x13c>)
 800611e:	2200      	movs	r2, #0
 8006120:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 8006122:	4b12      	ldr	r3, [pc, #72]	@ (800616c <phNfcLib_Init+0x13c>)
 8006124:	2200      	movs	r2, #0
 8006126:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 8006128:	4b10      	ldr	r3, [pc, #64]	@ (800616c <phNfcLib_Init+0x13c>)
 800612a:	2201      	movs	r2, #1
 800612c:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 800612e:	4b0f      	ldr	r3, [pc, #60]	@ (800616c <phNfcLib_Init+0x13c>)
 8006130:	2201      	movs	r2, #1
 8006132:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 8006134:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <phNfcLib_Init+0x13c>)
 8006136:	2200      	movs	r2, #0
 8006138:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 800613a:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <phNfcLib_Init+0x13c>)
 800613c:	2200      	movs	r2, #0
 800613e:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 8006140:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <phNfcLib_Init+0x13c>)
 8006142:	2200      	movs	r2, #0
 8006144:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 8006146:	4b09      	ldr	r3, [pc, #36]	@ (800616c <phNfcLib_Init+0x13c>)
 8006148:	22ff      	movs	r2, #255	@ 0xff
 800614a:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 800614e:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <phNfcLib_Init+0x140>)
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 8006156:	4b05      	ldr	r3, [pc, #20]	@ (800616c <phNfcLib_Init+0x13c>)
 8006158:	2208      	movs	r2, #8
 800615a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 800615e:	2300      	movs	r3, #0
 8006160:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 8006162:	683b      	ldr	r3, [r7, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000db0 	.word	0x20000db0
 8006170:	20000530 	.word	0x20000530
 8006174:	20000ef4 	.word	0x20000ef4
 8006178:	20000dc8 	.word	0x20000dc8
 800617c:	200006cc 	.word	0x200006cc
 8006180:	20000538 	.word	0x20000538
 8006184:	20000bc4 	.word	0x20000bc4
 8006188:	200006e8 	.word	0x200006e8
 800618c:	20000700 	.word	0x20000700
 8006190:	2000072c 	.word	0x2000072c
 8006194:	20000740 	.word	0x20000740
 8006198:	2000077c 	.word	0x2000077c
 800619c:	20000754 	.word	0x20000754
 80061a0:	20000770 	.word	0x20000770
 80061a4:	200007e0 	.word	0x200007e0
 80061a8:	20000b34 	.word	0x20000b34

080061ac <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 80061ba:	4b8f      	ldr	r3, [pc, #572]	@ (80063f8 <phNfcLib_GetDataParams+0x24c>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8112 	beq.w	80063e8 <phNfcLib_GetDataParams+0x23c>
    {
        switch(wComponent & PH_COMP_MASK)
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80061ca:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 80061ce:	f000 8107 	beq.w	80063e0 <phNfcLib_GetDataParams+0x234>
 80061d2:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 80061d6:	f300 8106 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80061da:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 80061de:	f000 80fc 	beq.w	80063da <phNfcLib_GetDataParams+0x22e>
 80061e2:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 80061e6:	f300 80fe 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80061ea:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 80061ee:	f000 80ee 	beq.w	80063ce <phNfcLib_GetDataParams+0x222>
 80061f2:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 80061f6:	f300 80f6 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80061fa:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80061fe:	f000 80e9 	beq.w	80063d4 <phNfcLib_GetDataParams+0x228>
 8006202:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006206:	f300 80ee 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800620a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800620e:	f000 80db 	beq.w	80063c8 <phNfcLib_GetDataParams+0x21c>
 8006212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006216:	f300 80e6 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800621a:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 800621e:	f000 80be 	beq.w	800639e <phNfcLib_GetDataParams+0x1f2>
 8006222:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8006226:	f300 80de 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800622a:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800622e:	f000 80b0 	beq.w	8006392 <phNfcLib_GetDataParams+0x1e6>
 8006232:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 8006236:	f300 80d6 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800623a:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 800623e:	f000 80ab 	beq.w	8006398 <phNfcLib_GetDataParams+0x1ec>
 8006242:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 8006246:	f300 80ce 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624e:	f000 809d 	beq.w	800638c <phNfcLib_GetDataParams+0x1e0>
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006256:	f300 80c6 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800625a:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 800625e:	f000 80ad 	beq.w	80063bc <phNfcLib_GetDataParams+0x210>
 8006262:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 8006266:	f300 80be 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800626a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800626e:	f000 80a2 	beq.w	80063b6 <phNfcLib_GetDataParams+0x20a>
 8006272:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006276:	f300 80b6 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800627a:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 800627e:	f000 8082 	beq.w	8006386 <phNfcLib_GetDataParams+0x1da>
 8006282:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8006286:	f300 80ae 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800628a:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800628e:	f000 8098 	beq.w	80063c2 <phNfcLib_GetDataParams+0x216>
 8006292:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006296:	f300 80a6 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 800629a:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 800629e:	f000 8087 	beq.w	80063b0 <phNfcLib_GetDataParams+0x204>
 80062a2:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80062a6:	f300 809e 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062ae:	d07c      	beq.n	80063aa <phNfcLib_GetDataParams+0x1fe>
 80062b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062b4:	f300 8097 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062b8:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 80062bc:	d072      	beq.n	80063a4 <phNfcLib_GetDataParams+0x1f8>
 80062be:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 80062c2:	f300 8090 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ca:	d059      	beq.n	8006380 <phNfcLib_GetDataParams+0x1d4>
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d0:	f300 8089 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062d4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062d8:	d04f      	beq.n	800637a <phNfcLib_GetDataParams+0x1ce>
 80062da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062de:	f300 8082 	bgt.w	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062e2:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80062e6:	d042      	beq.n	800636e <phNfcLib_GetDataParams+0x1c2>
 80062e8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80062ec:	dc7b      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062ee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80062f2:	d039      	beq.n	8006368 <phNfcLib_GetDataParams+0x1bc>
 80062f4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80062f8:	dc75      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fe:	d039      	beq.n	8006374 <phNfcLib_GetDataParams+0x1c8>
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006304:	dc6f      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 8006306:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800630a:	d02a      	beq.n	8006362 <phNfcLib_GetDataParams+0x1b6>
 800630c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006310:	dc69      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 8006312:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006316:	d021      	beq.n	800635c <phNfcLib_GetDataParams+0x1b0>
 8006318:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800631c:	dc63      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 800631e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006322:	d018      	beq.n	8006356 <phNfcLib_GetDataParams+0x1aa>
 8006324:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006328:	dc5d      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800632e:	d00f      	beq.n	8006350 <phNfcLib_GetDataParams+0x1a4>
 8006330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006334:	dc57      	bgt.n	80063e6 <phNfcLib_GetDataParams+0x23a>
 8006336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800633a:	d003      	beq.n	8006344 <phNfcLib_GetDataParams+0x198>
 800633c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006340:	d003      	beq.n	800634a <phNfcLib_GetDataParams+0x19e>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 8006342:	e050      	b.n	80063e6 <phNfcLib_GetDataParams+0x23a>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 8006344:	4b2d      	ldr	r3, [pc, #180]	@ (80063fc <phNfcLib_GetDataParams+0x250>)
 8006346:	60fb      	str	r3, [r7, #12]
            break;
 8006348:	e04e      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 800634a:	4b2d      	ldr	r3, [pc, #180]	@ (8006400 <phNfcLib_GetDataParams+0x254>)
 800634c:	60fb      	str	r3, [r7, #12]
            break;
 800634e:	e04b      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 8006350:	4b2c      	ldr	r3, [pc, #176]	@ (8006404 <phNfcLib_GetDataParams+0x258>)
 8006352:	60fb      	str	r3, [r7, #12]
            break;
 8006354:	e048      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 8006356:	4b2c      	ldr	r3, [pc, #176]	@ (8006408 <phNfcLib_GetDataParams+0x25c>)
 8006358:	60fb      	str	r3, [r7, #12]
            break;
 800635a:	e045      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 800635c:	4b2b      	ldr	r3, [pc, #172]	@ (800640c <phNfcLib_GetDataParams+0x260>)
 800635e:	60fb      	str	r3, [r7, #12]
            break;
 8006360:	e042      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 8006362:	4b2b      	ldr	r3, [pc, #172]	@ (8006410 <phNfcLib_GetDataParams+0x264>)
 8006364:	60fb      	str	r3, [r7, #12]
            break;
 8006366:	e03f      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 8006368:	4b2a      	ldr	r3, [pc, #168]	@ (8006414 <phNfcLib_GetDataParams+0x268>)
 800636a:	60fb      	str	r3, [r7, #12]
            break;
 800636c:	e03c      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 800636e:	4b2a      	ldr	r3, [pc, #168]	@ (8006418 <phNfcLib_GetDataParams+0x26c>)
 8006370:	60fb      	str	r3, [r7, #12]
            break;
 8006372:	e039      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 8006374:	4b29      	ldr	r3, [pc, #164]	@ (800641c <phNfcLib_GetDataParams+0x270>)
 8006376:	60fb      	str	r3, [r7, #12]
            break;
 8006378:	e036      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 800637a:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <phNfcLib_GetDataParams+0x274>)
 800637c:	60fb      	str	r3, [r7, #12]
            break;
 800637e:	e033      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 8006380:	4b28      	ldr	r3, [pc, #160]	@ (8006424 <phNfcLib_GetDataParams+0x278>)
 8006382:	60fb      	str	r3, [r7, #12]
            break;
 8006384:	e030      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 8006386:	4b28      	ldr	r3, [pc, #160]	@ (8006428 <phNfcLib_GetDataParams+0x27c>)
 8006388:	60fb      	str	r3, [r7, #12]
            break;
 800638a:	e02d      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 800638c:	4b27      	ldr	r3, [pc, #156]	@ (800642c <phNfcLib_GetDataParams+0x280>)
 800638e:	60fb      	str	r3, [r7, #12]
            break;
 8006390:	e02a      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 8006392:	4b27      	ldr	r3, [pc, #156]	@ (8006430 <phNfcLib_GetDataParams+0x284>)
 8006394:	60fb      	str	r3, [r7, #12]
            break;
 8006396:	e027      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 8006398:	4b26      	ldr	r3, [pc, #152]	@ (8006434 <phNfcLib_GetDataParams+0x288>)
 800639a:	60fb      	str	r3, [r7, #12]
            break;
 800639c:	e024      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 800639e:	4b26      	ldr	r3, [pc, #152]	@ (8006438 <phNfcLib_GetDataParams+0x28c>)
 80063a0:	60fb      	str	r3, [r7, #12]
            break;
 80063a2:	e021      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 80063a4:	4b25      	ldr	r3, [pc, #148]	@ (800643c <phNfcLib_GetDataParams+0x290>)
 80063a6:	60fb      	str	r3, [r7, #12]
            break;
 80063a8:	e01e      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 80063aa:	4b25      	ldr	r3, [pc, #148]	@ (8006440 <phNfcLib_GetDataParams+0x294>)
 80063ac:	60fb      	str	r3, [r7, #12]
            break;
 80063ae:	e01b      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 80063b0:	4b24      	ldr	r3, [pc, #144]	@ (8006444 <phNfcLib_GetDataParams+0x298>)
 80063b2:	60fb      	str	r3, [r7, #12]
            break;
 80063b4:	e018      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 80063b6:	4b24      	ldr	r3, [pc, #144]	@ (8006448 <phNfcLib_GetDataParams+0x29c>)
 80063b8:	60fb      	str	r3, [r7, #12]
            break;
 80063ba:	e015      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 80063bc:	4b23      	ldr	r3, [pc, #140]	@ (800644c <phNfcLib_GetDataParams+0x2a0>)
 80063be:	60fb      	str	r3, [r7, #12]
            break;
 80063c0:	e012      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 80063c2:	4b23      	ldr	r3, [pc, #140]	@ (8006450 <phNfcLib_GetDataParams+0x2a4>)
 80063c4:	60fb      	str	r3, [r7, #12]
            break;
 80063c6:	e00f      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 80063c8:	4b22      	ldr	r3, [pc, #136]	@ (8006454 <phNfcLib_GetDataParams+0x2a8>)
 80063ca:	60fb      	str	r3, [r7, #12]
            break;
 80063cc:	e00c      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sKeyStore;
 80063ce:	4b22      	ldr	r3, [pc, #136]	@ (8006458 <phNfcLib_GetDataParams+0x2ac>)
 80063d0:	60fb      	str	r3, [r7, #12]
            break;
 80063d2:	e009      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sCryptoSym;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
            break;
 80063d8:	e006      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sCryptoRng;
 80063da:	4b20      	ldr	r3, [pc, #128]	@ (800645c <phNfcLib_GetDataParams+0x2b0>)
 80063dc:	60fb      	str	r3, [r7, #12]
            break;
 80063de:	e003      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            pDataparam = &sTMI;
 80063e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006460 <phNfcLib_GetDataParams+0x2b4>)
 80063e2:	60fb      	str	r3, [r7, #12]
            break;
 80063e4:	e000      	b.n	80063e8 <phNfcLib_GetDataParams+0x23c>
            break;
 80063e6:	bf00      	nop
        }
    }
    return pDataparam;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000db0 	.word	0x20000db0
 80063fc:	20000538 	.word	0x20000538
 8006400:	200006e8 	.word	0x200006e8
 8006404:	20000700 	.word	0x20000700
 8006408:	2000072c 	.word	0x2000072c
 800640c:	20000740 	.word	0x20000740
 8006410:	200007d4 	.word	0x200007d4
 8006414:	20000754 	.word	0x20000754
 8006418:	20000770 	.word	0x20000770
 800641c:	2000077c 	.word	0x2000077c
 8006420:	2000079c 	.word	0x2000079c
 8006424:	20000818 	.word	0x20000818
 8006428:	20000824 	.word	0x20000824
 800642c:	2000088c 	.word	0x2000088c
 8006430:	20000940 	.word	0x20000940
 8006434:	200009ec 	.word	0x200009ec
 8006438:	20000a8c 	.word	0x20000a8c
 800643c:	20000a70 	.word	0x20000a70
 8006440:	200007ec 	.word	0x200007ec
 8006444:	200007f8 	.word	0x200007f8
 8006448:	20000b34 	.word	0x20000b34
 800644c:	20000b44 	.word	0x20000b44
 8006450:	200007e0 	.word	0x200007e0
 8006454:	20000bc4 	.word	0x20000bc4
 8006458:	200006cc 	.word	0x200006cc
 800645c:	20000d90 	.word	0x20000d90
 8006460:	200014f0 	.word	0x200014f0

08006464 <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <phTMIUtils_Init+0x16>
 8006476:	2321      	movs	r3, #33	@ 0x21
 8006478:	e018      	b.n	80064ac <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <phTMIUtils_Init+0x22>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8006486:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800648a:	e00f      	b.n	80064ac <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <phTMIUtils_ActivateTMICollection+0x1a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80064d2:	f24e 5321 	movw	r3, #58657	@ 0xe521
 80064d6:	e02c      	b.n	8006532 <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d825      	bhi.n	800652a <phTMIUtils_ActivateTMICollection+0x72>
 80064de:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <phTMIUtils_ActivateTMICollection+0x2c>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064f9 	.word	0x080064f9
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	0800651d 	.word	0x0800651d
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	731a      	strb	r2, [r3, #12]
        break;
 800650a:	e011      	b.n	8006530 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	731a      	strb	r2, [r3, #12]
        break;
 8006512:	e00d      	b.n	8006530 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	731a      	strb	r2, [r3, #12]
        break;
 800651a:	e009      	b.n	8006530 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	611a      	str	r2, [r3, #16]
        break;
 8006528:	e002      	b.n	8006530 <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 800652a:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800652e:	e000      	b.n	8006532 <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop

08006540 <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6039      	str	r1, [r7, #0]
 8006548:	4611      	mov	r1, r2
 800654a:	461a      	mov	r2, r3
 800654c:	4603      	mov	r3, r0
 800654e:	71fb      	strb	r3, [r7, #7]
 8006550:	460b      	mov	r3, r1
 8006552:	80bb      	strh	r3, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <phTools_DecodeParity+0x24>
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d102      	bne.n	800656a <phTools_DecodeParity+0x2a>
 8006564:	79bb      	ldrb	r3, [r7, #6]
 8006566:	2b07      	cmp	r3, #7
 8006568:	d902      	bls.n	8006570 <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 800656a:	f24e 3321 	movw	r3, #58145	@ 0xe321
 800656e:	e0fa      	b.n	8006766 <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 8006570:	88bb      	ldrh	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10d      	bne.n	8006592 <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 8006576:	79bb      	ldrb	r3, [r7, #6]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	2200      	movs	r2, #0
 8006580:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 8006588:	2300      	movs	r3, #0
 800658a:	e0ec      	b.n	8006766 <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 800658c:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8006590:	e0e9      	b.n	8006766 <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 8006592:	79bb      	ldrb	r3, [r7, #6]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d111      	bne.n	80065bc <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 8006598:	88bb      	ldrh	r3, [r7, #4]
 800659a:	4a75      	ldr	r2, [pc, #468]	@ (8006770 <phTools_DecodeParity+0x230>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 80065a4:	88ba      	ldrh	r2, [r7, #4]
 80065a6:	4b72      	ldr	r3, [pc, #456]	@ (8006770 <phTools_DecodeParity+0x230>)
 80065a8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ac:	0859      	lsrs	r1, r3, #1
 80065ae:	460b      	mov	r3, r1
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	440b      	add	r3, r1
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	73fb      	strb	r3, [r7, #15]
 80065ba:	e012      	b.n	80065e2 <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	3b01      	subs	r3, #1
 80065c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006770 <phTools_DecodeParity+0x230>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 80065ca:	88bb      	ldrh	r3, [r7, #4]
 80065cc:	1e59      	subs	r1, r3, #1
 80065ce:	4b68      	ldr	r3, [pc, #416]	@ (8006770 <phTools_DecodeParity+0x230>)
 80065d0:	fba3 2301 	umull	r2, r3, r3, r1
 80065d4:	085a      	lsrs	r2, r3, #1
 80065d6:	4613      	mov	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	4413      	add	r3, r2
 80065dc:	1aca      	subs	r2, r1, r3
 80065de:	4613      	mov	r3, r2
 80065e0:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 80065e2:	8a3b      	ldrh	r3, [r7, #16]
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 80065f4:	7bfa      	ldrb	r2, [r7, #15]
 80065f6:	79bb      	ldrb	r3, [r7, #6]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d905      	bls.n	8006608 <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 8006608:	79bb      	ldrb	r3, [r7, #6]
 800660a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	b2da      	uxtb	r2, r3
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	8c3a      	ldrh	r2, [r7, #32]
 8006636:	429a      	cmp	r2, r3
 8006638:	d205      	bcs.n	8006646 <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	2200      	movs	r2, #0
 800663e:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 8006640:	f24e 3304 	movw	r3, #58116	@ 0xe304
 8006644:	e08f      	b.n	8006766 <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 800664e:	2307      	movs	r3, #7
 8006650:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8006652:	e068      	b.n	8006726 <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 8006654:	8afb      	ldrh	r3, [r7, #22]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	4413      	add	r3, r2
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	7cfb      	ldrb	r3, [r7, #19]
 8006660:	f1c3 0307 	rsb	r3, r3, #7
 8006664:	fa42 f103 	asr.w	r1, r2, r3
 8006668:	8abb      	ldrh	r3, [r7, #20]
 800666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666c:	4413      	add	r3, r2
 800666e:	b2ca      	uxtb	r2, r1
 8006670:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 8006672:	8afb      	ldrh	r3, [r7, #22]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	88bb      	ldrh	r3, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d243      	bcs.n	8006704 <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 800667c:	8abb      	ldrh	r3, [r7, #20]
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	4413      	add	r3, r2
 8006682:	7819      	ldrb	r1, [r3, #0]
 8006684:	8afb      	ldrh	r3, [r7, #22]
 8006686:	3301      	adds	r3, #1
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	4413      	add	r3, r2
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	3301      	adds	r3, #1
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	b2da      	uxtb	r2, r3
 800669a:	8abb      	ldrh	r3, [r7, #20]
 800669c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800669e:	4403      	add	r3, r0
 80066a0:	430a      	orrs	r2, r1
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 80066ae:	8abb      	ldrh	r3, [r7, #20]
 80066b0:	3301      	adds	r3, #1
 80066b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066b4:	8812      	ldrh	r2, [r2, #0]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d224      	bcs.n	8006704 <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 80066ba:	8abb      	ldrh	r3, [r7, #20]
 80066bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066be:	4413      	add	r3, r2
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	79fa      	ldrb	r2, [r7, #7]
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f854 	bl	8006774 <phTools_CalcParity>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 80066d0:	8afb      	ldrh	r3, [r7, #22]
 80066d2:	3301      	adds	r3, #1
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	4413      	add	r3, r2
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	f1c3 0307 	rsb	r3, r3, #7
 80066e0:	2101      	movs	r1, #1
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4013      	ands	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	7bba      	ldrb	r2, [r7, #14]
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	f1c3 0307 	rsb	r3, r3, #7
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	4299      	cmp	r1, r3
 80066fc:	d002      	beq.n	8006704 <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 80066fe:	f24e 3302 	movw	r3, #58114	@ 0xe302
 8006702:	e030      	b.n	8006766 <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 800670a:	2308      	movs	r3, #8
 800670c:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 800670e:	8afb      	ldrh	r3, [r7, #22]
 8006710:	3301      	adds	r3, #1
 8006712:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8006714:	8abb      	ldrh	r3, [r7, #20]
 8006716:	3301      	adds	r3, #1
 8006718:	82bb      	strh	r3, [r7, #20]
 800671a:	8afb      	ldrh	r3, [r7, #22]
 800671c:	3301      	adds	r3, #1
 800671e:	82fb      	strh	r3, [r7, #22]
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	3b01      	subs	r3, #1
 8006724:	74fb      	strb	r3, [r7, #19]
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	8aba      	ldrh	r2, [r7, #20]
 800672c:	429a      	cmp	r2, r3
 800672e:	d391      	bcc.n	8006654 <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d015      	beq.n	8006764 <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	4413      	add	r3, r2
 8006742:	7819      	ldrb	r1, [r3, #0]
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f1c3 0308 	rsb	r3, r3, #8
 800674c:	22ff      	movs	r2, #255	@ 0xff
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	b2da      	uxtb	r2, r3
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	3b01      	subs	r3, #1
 800675a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800675c:	4403      	add	r3, r0
 800675e:	400a      	ands	r2, r1
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	38e38e39 	.word	0x38e38e39

08006774 <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	460a      	mov	r2, r1
 800677e:	71fb      	strb	r3, [r7, #7]
 8006780:	4613      	mov	r3, r2
 8006782:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 8006784:	79bb      	ldrb	r3, [r7, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 800678a:	2300      	movs	r3, #0
 800678c:	73bb      	strb	r3, [r7, #14]
 800678e:	e001      	b.n	8006794 <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 8006790:	2301      	movs	r3, #1
 8006792:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
 8006798:	e00f      	b.n	80067ba <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2201      	movs	r2, #1
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	4013      	ands	r3, r2
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <phTools_CalcParity+0x40>
        {
            ++bParity;
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	3301      	adds	r3, #1
 80067b2:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	3301      	adds	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b07      	cmp	r3, #7
 80067be:	d9ec      	bls.n	800679a <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	4053      	eors	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 80067ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	b25a      	sxtb	r2, r3
 80067f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f8:	4053      	eors	r3, r2
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b29b      	uxth	r3, r3
 8006806:	b21a      	sxth	r2, r3
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	b21b      	sxth	r3, r3
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	b21b      	sxth	r3, r3
 8006810:	4053      	eors	r3, r2
 8006812:	b21a      	sxth	r2, r3
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	b21b      	sxth	r3, r3
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	b21b      	sxth	r3, r3
 800681c:	4053      	eors	r3, r2
 800681e:	b21a      	sxth	r2, r3
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	b2db      	uxtb	r3, r3
 8006826:	b21b      	sxth	r3, r3
 8006828:	4053      	eors	r3, r2
 800682a:	b21b      	sxth	r3, r3
 800682c:	b29a      	uxth	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	801a      	strh	r2, [r3, #0]
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b086      	sub	sp, #24
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 800684e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006852:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	60fa      	str	r2, [r7, #12]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 800685e:	f107 0214 	add.w	r2, r7, #20
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff ffb4 	bl	80067d4 <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3b01      	subs	r3, #1
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1ed      	bne.n	8006854 <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 8006878:	8abb      	ldrh	r3, [r7, #20]
 800687a:	43db      	mvns	r3, r3
 800687c:	b29b      	uxth	r3, r3
 800687e:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 8006880:	8abb      	ldrh	r3, [r7, #20]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 8006888:	8abb      	ldrh	r3, [r7, #20]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3301      	adds	r3, #1
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	460b      	mov	r3, r1
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 80068ae:	897b      	ldrh	r3, [r7, #10]
 80068b0:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 80068b4:	d002      	beq.n	80068bc <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 80068b6:	f244 0320 	movw	r3, #16416	@ 0x4020
 80068ba:	e154      	b.n	8006b66 <phacDiscLoop_Sw_Init+0x2c6>
    }

    PH_ASSERT_NULL(pDataParams);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <phacDiscLoop_Sw_Init+0x26>
 80068c2:	2321      	movs	r3, #33	@ 0x21
 80068c4:	e14f      	b.n	8006b66 <phacDiscLoop_Sw_Init+0x2c6>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f244 0201 	movw	r2, #16385	@ 0x4001
 80068cc:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2222      	movs	r2, #34	@ 0x22
 800691c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a8c      	ldr	r2, [pc, #560]	@ (8006b74 <phacDiscLoop_Sw_Init+0x2d4>)
 8006942:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800696e:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2208      	movs	r2, #8
 800697a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8006992:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	789b      	ldrb	r3, [r3, #2]
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	b2da      	uxtb	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	709a      	strb	r2, [r3, #2]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	795b      	ldrb	r3, [r3, #5]
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	799b      	ldrb	r3, [r3, #6]
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80069ca:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	789b      	ldrb	r3, [r3, #2]
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 80069ec:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 80069f4:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	789b      	ldrb	r3, [r3, #2]
 80069fa:	f043 030c 	orr.w	r3, r3, #12
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	709a      	strb	r2, [r3, #2]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	795b      	ldrb	r3, [r3, #5]
 8006a08:	f043 0304 	orr.w	r3, r3, #4
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	795b      	ldrb	r3, [r3, #5]
 8006a16:	f043 0308 	orr.w	r3, r3, #8
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	799b      	ldrb	r3, [r3, #6]
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	799b      	ldrb	r3, [r3, #6]
 8006a32:	f043 0308 	orr.w	r3, r3, #8
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8006a48:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	789b      	ldrb	r3, [r3, #2]
 8006a4e:	f043 0310 	orr.w	r3, r3, #16
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a64:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	789b      	ldrb	r3, [r3, #2]
 8006a6a:	f043 0320 	orr.w	r3, r3, #32
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2208      	movs	r2, #8
 8006a80:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2208      	movs	r2, #8
 8006ab8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	22ff      	movs	r2, #255	@ 0xff
 8006af8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2203      	movs	r2, #3
 8006b00:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	75fb      	strb	r3, [r7, #23]
 8006b08:	e00d      	b.n	8006b26 <phacDiscLoop_Sw_Init+0x286>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8006b0a:	7dfa      	ldrb	r2, [r7, #23]
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	4413      	add	r3, r2
 8006b14:	00da      	lsls	r2, r3, #3
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	188b      	adds	r3, r1, r2
 8006b1a:	3393      	adds	r3, #147	@ 0x93
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	3301      	adds	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0ee      	beq.n	8006b0a <phacDiscLoop_Sw_Init+0x26a>
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	0802054c 	.word	0x0802054c

08006b78 <phacDiscLoop_Sw_Run>:

phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	2200      	movs	r2, #0
 8006b8a:	215e      	movs	r1, #94	@ 0x5e
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f006 fc53 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8006b92:	4603      	mov	r3, r0
 8006b94:	81fb      	strh	r3, [r7, #14]
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <phacDiscLoop_Sw_Run+0x28>
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	e0b9      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2120      	movs	r1, #32
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f006 fc45 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	81fb      	strh	r3, [r7, #14]
 8006bb2:	89fb      	ldrh	r3, [r7, #14]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <phacDiscLoop_Sw_Run+0x44>
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	e0ab      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <phacDiscLoop_Sw_Run+0x50>
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d07a      	beq.n	8006cbc <phacDiscLoop_Sw_Run+0x144>
 8006bc6:	e0a3      	b.n	8006d10 <phacDiscLoop_Sw_Run+0x198>
    {
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7fdb      	ldrb	r3, [r3, #31]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d017      	beq.n	8006c00 <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	891b      	ldrh	r3, [r3, #8]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d113      	bne.n	8006c00 <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f008 fea7 	bl	800f930 <phhalHw_Pn5180_Lpcd>
 8006be2:	4603      	mov	r3, r0
 8006be4:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8006be6:	89fb      	ldrh	r3, [r7, #14]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d102      	bne.n	8006bfc <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 8006bf6:	f244 0384 	movw	r3, #16516	@ 0x4084
 8006bfa:	e08b      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	e089      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
            }
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* Check for active poll configuration */
        if((0U != (pDataParams->bActPollTechCfg))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d037      	beq.n	8006c78 <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	891b      	ldrh	r3, [r3, #8]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d133      	bne.n	8006c78 <phacDiscLoop_Sw_Run+0x100>
        {
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f855 	bl	8007cc0 <phacDiscLoop_Sw_Int_ActivePollMode>
 8006c16:	4603      	mov	r3, r0
 8006c18:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8006c1a:	89fb      	ldrh	r3, [r7, #14]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b84      	cmp	r3, #132	@ 0x84
 8006c20:	d00f      	beq.n	8006c42 <phacDiscLoop_Sw_Run+0xca>
            {
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8006c22:	89fb      	ldrh	r3, [r7, #14]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b8c      	cmp	r3, #140	@ 0x8c
 8006c28:	d009      	beq.n	8006c3e <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8006c2e:	2b82      	cmp	r3, #130	@ 0x82
 8006c30:	d005      	beq.n	8006c3e <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	89fa      	ldrh	r2, [r7, #14]
 8006c36:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006c38:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006c3c:	e06a      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
                }
                return wDiscloopStatus;
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
 8006c40:	e068      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	4618      	mov	r0, r3
 8006c48:	f006 fafe 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	81fb      	strh	r3, [r7, #14]
 8006c50:	89fb      	ldrh	r3, [r7, #14]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <phacDiscLoop_Sw_Run+0xe2>
 8006c56:	89fb      	ldrh	r3, [r7, #14]
 8006c58:	e05c      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8b9b      	ldrh	r3, [r3, #28]
 8006c62:	461a      	mov	r2, r3
 8006c64:	2100      	movs	r1, #0
 8006c66:	f006 fb13 	bl	800d290 <phhalHw_Pn5180_Wait>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	81fb      	strh	r3, [r7, #14]
 8006c6e:	89fb      	ldrh	r3, [r7, #14]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <phacDiscLoop_Sw_Run+0x100>
 8006c74:	89fb      	ldrh	r3, [r7, #14]
 8006c76:	e04d      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
        }

        /* Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	789b      	ldrb	r3, [r3, #2]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d012      	beq.n	8006ca6 <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f84c 	bl	8007d1e <phacDiscLoop_Sw_Int_PollMode>
 8006c86:	4603      	mov	r3, r0
 8006c88:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8006c8a:	89fb      	ldrh	r3, [r7, #14]
 8006c8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c94:	d005      	beq.n	8006ca2 <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	89fa      	ldrh	r2, [r7, #14]
 8006c9a:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006c9c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006ca0:	e038      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8006ca2:	89fb      	ldrh	r3, [r7, #14]
 8006ca4:	e036      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8006cb6:	f244 0384 	movw	r3, #16516	@ 0x4084
 8006cba:	e02b      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
        }

    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	795b      	ldrb	r3, [r3, #5]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <phacDiscLoop_Sw_Run+0x154>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	799b      	ldrb	r3, [r3, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01e      	beq.n	8006d0a <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f006 fab9 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	81fb      	strh	r3, [r7, #14]
 8006cda:	89fb      	ldrh	r3, [r7, #14]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <phacDiscLoop_Sw_Run+0x16c>
 8006ce0:	89fb      	ldrh	r3, [r7, #14]
 8006ce2:	e017      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 ff8b 	bl	8007c00 <phacDiscLoop_Sw_Int_ListenMode>
 8006cea:	4603      	mov	r3, r0
 8006cec:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8006cee:	89fb      	ldrh	r3, [r7, #14]
 8006cf0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cf8:	d005      	beq.n	8006d06 <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	89fa      	ldrh	r2, [r7, #14]
 8006cfe:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006d00:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006d04:	e006      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8006d06:	89fb      	ldrh	r3, [r7, #14]
 8006d08:	e004      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006d0a:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006d0e:	e001      	b.n	8006d14 <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006d10:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 8006d34:	887b      	ldrh	r3, [r7, #2]
 8006d36:	2b94      	cmp	r3, #148	@ 0x94
 8006d38:	f200 83f0 	bhi.w	800751c <phacDiscLoop_Sw_SetConfig+0x800>
 8006d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <phacDiscLoop_Sw_SetConfig+0x28>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08007001 	.word	0x08007001
 8006d48:	08007009 	.word	0x08007009
 8006d4c:	08007011 	.word	0x08007011
 8006d50:	08007029 	.word	0x08007029
 8006d54:	08007041 	.word	0x08007041
 8006d58:	08007049 	.word	0x08007049
 8006d5c:	0800707b 	.word	0x0800707b
 8006d60:	0800751d 	.word	0x0800751d
 8006d64:	0800751d 	.word	0x0800751d
 8006d68:	0800751d 	.word	0x0800751d
 8006d6c:	0800751d 	.word	0x0800751d
 8006d70:	0800751d 	.word	0x0800751d
 8006d74:	0800751d 	.word	0x0800751d
 8006d78:	0800751d 	.word	0x0800751d
 8006d7c:	0800751d 	.word	0x0800751d
 8006d80:	0800751d 	.word	0x0800751d
 8006d84:	0800718d 	.word	0x0800718d
 8006d88:	08007275 	.word	0x08007275
 8006d8c:	08007391 	.word	0x08007391
 8006d90:	080073ab 	.word	0x080073ab
 8006d94:	080074af 	.word	0x080074af
 8006d98:	0800751d 	.word	0x0800751d
 8006d9c:	0800751d 	.word	0x0800751d
 8006da0:	0800751d 	.word	0x0800751d
 8006da4:	0800751d 	.word	0x0800751d
 8006da8:	0800751d 	.word	0x0800751d
 8006dac:	0800751d 	.word	0x0800751d
 8006db0:	0800751d 	.word	0x0800751d
 8006db4:	0800751d 	.word	0x0800751d
 8006db8:	0800751d 	.word	0x0800751d
 8006dbc:	0800751d 	.word	0x0800751d
 8006dc0:	0800751d 	.word	0x0800751d
 8006dc4:	0800751d 	.word	0x0800751d
 8006dc8:	0800751d 	.word	0x0800751d
 8006dcc:	0800751d 	.word	0x0800751d
 8006dd0:	0800751d 	.word	0x0800751d
 8006dd4:	0800751d 	.word	0x0800751d
 8006dd8:	0800751d 	.word	0x0800751d
 8006ddc:	0800751d 	.word	0x0800751d
 8006de0:	0800751d 	.word	0x0800751d
 8006de4:	0800751d 	.word	0x0800751d
 8006de8:	0800751d 	.word	0x0800751d
 8006dec:	0800751d 	.word	0x0800751d
 8006df0:	0800751d 	.word	0x0800751d
 8006df4:	0800751d 	.word	0x0800751d
 8006df8:	0800751d 	.word	0x0800751d
 8006dfc:	0800751d 	.word	0x0800751d
 8006e00:	0800751d 	.word	0x0800751d
 8006e04:	0800728f 	.word	0x0800728f
 8006e08:	0800729b 	.word	0x0800729b
 8006e0c:	080072b5 	.word	0x080072b5
 8006e10:	080072cd 	.word	0x080072cd
 8006e14:	080072e5 	.word	0x080072e5
 8006e18:	080072f1 	.word	0x080072f1
 8006e1c:	08007319 	.word	0x08007319
 8006e20:	0800751d 	.word	0x0800751d
 8006e24:	0800751d 	.word	0x0800751d
 8006e28:	0800751d 	.word	0x0800751d
 8006e2c:	0800751d 	.word	0x0800751d
 8006e30:	0800751d 	.word	0x0800751d
 8006e34:	0800751d 	.word	0x0800751d
 8006e38:	0800751d 	.word	0x0800751d
 8006e3c:	0800751d 	.word	0x0800751d
 8006e40:	0800751d 	.word	0x0800751d
 8006e44:	080071e9 	.word	0x080071e9
 8006e48:	08007201 	.word	0x08007201
 8006e4c:	08007219 	.word	0x08007219
 8006e50:	08007225 	.word	0x08007225
 8006e54:	0800724d 	.word	0x0800724d
 8006e58:	0800751d 	.word	0x0800751d
 8006e5c:	0800751d 	.word	0x0800751d
 8006e60:	0800751d 	.word	0x0800751d
 8006e64:	0800751d 	.word	0x0800751d
 8006e68:	0800751d 	.word	0x0800751d
 8006e6c:	0800751d 	.word	0x0800751d
 8006e70:	0800751d 	.word	0x0800751d
 8006e74:	0800751d 	.word	0x0800751d
 8006e78:	0800751d 	.word	0x0800751d
 8006e7c:	0800751d 	.word	0x0800751d
 8006e80:	0800751d 	.word	0x0800751d
 8006e84:	0800751d 	.word	0x0800751d
 8006e88:	0800751d 	.word	0x0800751d
 8006e8c:	0800751d 	.word	0x0800751d
 8006e90:	0800751d 	.word	0x0800751d
 8006e94:	0800751d 	.word	0x0800751d
 8006e98:	0800751d 	.word	0x0800751d
 8006e9c:	0800751d 	.word	0x0800751d
 8006ea0:	08007385 	.word	0x08007385
 8006ea4:	0800751d 	.word	0x0800751d
 8006ea8:	0800751d 	.word	0x0800751d
 8006eac:	0800751d 	.word	0x0800751d
 8006eb0:	0800751d 	.word	0x0800751d
 8006eb4:	0800751d 	.word	0x0800751d
 8006eb8:	0800751d 	.word	0x0800751d
 8006ebc:	0800751d 	.word	0x0800751d
 8006ec0:	0800751d 	.word	0x0800751d
 8006ec4:	080073c5 	.word	0x080073c5
 8006ec8:	08007405 	.word	0x08007405
 8006ecc:	0800751d 	.word	0x0800751d
 8006ed0:	0800751d 	.word	0x0800751d
 8006ed4:	0800751d 	.word	0x0800751d
 8006ed8:	0800751d 	.word	0x0800751d
 8006edc:	0800751d 	.word	0x0800751d
 8006ee0:	0800751d 	.word	0x0800751d
 8006ee4:	0800751d 	.word	0x0800751d
 8006ee8:	0800751d 	.word	0x0800751d
 8006eec:	0800751d 	.word	0x0800751d
 8006ef0:	0800751d 	.word	0x0800751d
 8006ef4:	0800751d 	.word	0x0800751d
 8006ef8:	0800751d 	.word	0x0800751d
 8006efc:	0800751d 	.word	0x0800751d
 8006f00:	0800751d 	.word	0x0800751d
 8006f04:	080074c9 	.word	0x080074c9
 8006f08:	080074e7 	.word	0x080074e7
 8006f0c:	0800751d 	.word	0x0800751d
 8006f10:	0800751d 	.word	0x0800751d
 8006f14:	0800751d 	.word	0x0800751d
 8006f18:	0800751d 	.word	0x0800751d
 8006f1c:	0800751d 	.word	0x0800751d
 8006f20:	0800751d 	.word	0x0800751d
 8006f24:	0800751d 	.word	0x0800751d
 8006f28:	0800751d 	.word	0x0800751d
 8006f2c:	0800751d 	.word	0x0800751d
 8006f30:	0800751d 	.word	0x0800751d
 8006f34:	0800751d 	.word	0x0800751d
 8006f38:	0800751d 	.word	0x0800751d
 8006f3c:	0800751d 	.word	0x0800751d
 8006f40:	0800751d 	.word	0x0800751d
 8006f44:	08007165 	.word	0x08007165
 8006f48:	0800751d 	.word	0x0800751d
 8006f4c:	08007099 	.word	0x08007099
 8006f50:	08006fb7 	.word	0x08006fb7
 8006f54:	08006fc1 	.word	0x08006fc1
 8006f58:	0800751d 	.word	0x0800751d
 8006f5c:	08007083 	.word	0x08007083
 8006f60:	0800751d 	.word	0x0800751d
 8006f64:	08006ff5 	.word	0x08006ff5
 8006f68:	08006f99 	.word	0x08006f99
 8006f6c:	08006fa3 	.word	0x08006fa3
 8006f70:	08006fad 	.word	0x08006fad
 8006f74:	08006feb 	.word	0x08006feb
 8006f78:	0800751d 	.word	0x0800751d
 8006f7c:	0800751d 	.word	0x0800751d
 8006f80:	0800751d 	.word	0x0800751d
 8006f84:	08007505 	.word	0x08007505
 8006f88:	0800716f 	.word	0x0800716f
 8006f8c:	08007051 	.word	0x08007051
 8006f90:	080071a7 	.word	0x080071a7
 8006f94:	08007341 	.word	0x08007341
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 8006f98:	883b      	ldrh	r3, [r7, #0]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	719a      	strb	r2, [r3, #6]
        break;
 8006fa0:	e2c1      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 8006fa2:	883b      	ldrh	r3, [r7, #0]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	70da      	strb	r2, [r3, #3]
        break;
 8006faa:	e2bc      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 8006fac:	883b      	ldrh	r3, [r7, #0]
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	715a      	strb	r2, [r3, #5]
        break;
 8006fb4:	e2b7      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 8006fb6:	883b      	ldrh	r3, [r7, #0]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	779a      	strb	r2, [r3, #30]
        break;
 8006fbe:	e2b2      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006fc0:	883b      	ldrh	r3, [r7, #0]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d00a      	beq.n	8006fde <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 8006fc8:	883b      	ldrh	r3, [r7, #0]
 8006fca:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d006      	beq.n	8006fde <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 8006fd0:	883b      	ldrh	r3, [r7, #0]
 8006fd2:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d002      	beq.n	8006fde <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006fd8:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006fdc:	e2a4      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 8006fde:	883b      	ldrh	r3, [r7, #0]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	811a      	strh	r2, [r3, #8]
        break;
 8006fe8:	e29d      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 8006fea:	883b      	ldrh	r3, [r7, #0]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	709a      	strb	r2, [r3, #2]
        break;
 8006ff2:	e298      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 8006ff4:	883b      	ldrh	r3, [r7, #0]
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 8006ffe:	e292      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	883a      	ldrh	r2, [r7, #0]
 8007004:	821a      	strh	r2, [r3, #16]
        break;
 8007006:	e28e      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	883a      	ldrh	r2, [r7, #0]
 800700c:	825a      	strh	r2, [r3, #18]
        break;
 800700e:	e28a      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 8007010:	883b      	ldrh	r3, [r7, #0]
 8007012:	f644 72af 	movw	r2, #20399	@ 0x4faf
 8007016:	4293      	cmp	r3, r2
 8007018:	d802      	bhi.n	8007020 <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800701a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800701e:	e283      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	883a      	ldrh	r2, [r7, #0]
 8007024:	829a      	strh	r2, [r3, #20]
        break;
 8007026:	e27e      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 8007028:	883b      	ldrh	r3, [r7, #0]
 800702a:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 800702e:	4293      	cmp	r3, r2
 8007030:	d802      	bhi.n	8007038 <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007032:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007036:	e277      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	883a      	ldrh	r2, [r7, #0]
 800703c:	82da      	strh	r2, [r3, #22]
        break;
 800703e:	e272      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	883a      	ldrh	r2, [r7, #0]
 8007044:	831a      	strh	r2, [r3, #24]
        break;
 8007046:	e26e      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	883a      	ldrh	r2, [r7, #0]
 800704c:	835a      	strh	r2, [r3, #26]
        break;
 800704e:	e26a      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8007050:	883b      	ldrh	r3, [r7, #0]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d105      	bne.n	8007068 <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 800705c:	883b      	ldrh	r3, [r7, #0]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007068:	f244 0323 	movw	r3, #16419	@ 0x4023
 800706c:	e25c      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 800706e:	883b      	ldrh	r3, [r7, #0]
 8007070:	b2da      	uxtb	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 8007078:	e255      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	883a      	ldrh	r2, [r7, #0]
 800707e:	839a      	strh	r2, [r3, #28]
        break;
 8007080:	e251      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 8007082:	883b      	ldrh	r3, [r7, #0]
 8007084:	2b3f      	cmp	r3, #63	@ 0x3f
 8007086:	d902      	bls.n	800708e <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007088:	f244 0321 	movw	r3, #16417	@ 0x4021
 800708c:	e24c      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 800708e:	883b      	ldrh	r3, [r7, #0]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	711a      	strb	r2, [r3, #4]
        break;
 8007096:	e246      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 8007098:	883b      	ldrh	r3, [r7, #0]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d008      	beq.n	80070b0 <phacDiscLoop_Sw_SetConfig+0x394>
 800709e:	883b      	ldrh	r3, [r7, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d005      	beq.n	80070b0 <phacDiscLoop_Sw_SetConfig+0x394>
 80070a4:	883b      	ldrh	r3, [r7, #0]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d002      	beq.n	80070b0 <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80070aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 80070ae:	e23b      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 80070b0:	883b      	ldrh	r3, [r7, #0]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070be:	883a      	ldrh	r2, [r7, #0]
 80070c0:	215a      	movs	r1, #90	@ 0x5a
 80070c2:	4618      	mov	r0, r3
 80070c4:	f006 f9b8 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	81fb      	strh	r3, [r7, #14]
 80070cc:	89fb      	ldrh	r3, [r7, #14]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <phacDiscLoop_Sw_SetConfig+0x3ba>
 80070d2:	89fb      	ldrh	r3, [r7, #14]
 80070d4:	e228      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	883a      	ldrh	r2, [r7, #0]
 80070dc:	2106      	movs	r1, #6
 80070de:	4618      	mov	r0, r3
 80070e0:	f00d fca8 	bl	8014a34 <phpalI14443p4_Sw_SetConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	81fb      	strh	r3, [r7, #14]
 80070e8:	89fb      	ldrh	r3, [r7, #14]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <phacDiscLoop_Sw_SetConfig+0x3d6>
 80070ee:	89fb      	ldrh	r3, [r7, #14]
 80070f0:	e21a      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f6:	883a      	ldrh	r2, [r7, #0]
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f00c fe00 	bl	8013d00 <phpalI14443p3b_Sw_SetConfig>
 8007100:	4603      	mov	r3, r0
 8007102:	81fb      	strh	r3, [r7, #14]
 8007104:	89fb      	ldrh	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <phacDiscLoop_Sw_SetConfig+0x3f2>
 800710a:	89fb      	ldrh	r3, [r7, #14]
 800710c:	e20c      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	883a      	ldrh	r2, [r7, #0]
 8007114:	2101      	movs	r1, #1
 8007116:	4618      	mov	r0, r3
 8007118:	f00b ffbd 	bl	8013096 <phpalI14443p3a_Sw_SetConfig>
 800711c:	4603      	mov	r3, r0
 800711e:	81fb      	strh	r3, [r7, #14]
 8007120:	89fb      	ldrh	r3, [r7, #14]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <phacDiscLoop_Sw_SetConfig+0x40e>
 8007126:	89fb      	ldrh	r3, [r7, #14]
 8007128:	e1fe      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712e:	883a      	ldrh	r2, [r7, #0]
 8007130:	2101      	movs	r1, #1
 8007132:	4618      	mov	r0, r3
 8007134:	f00d fd50 	bl	8014bd8 <phpalI14443p4a_Sw_SetConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	81fb      	strh	r3, [r7, #14]
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <phacDiscLoop_Sw_SetConfig+0x42a>
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	e1f0      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	883a      	ldrh	r2, [r7, #0]
 800714c:	210a      	movs	r1, #10
 800714e:	4618      	mov	r0, r3
 8007150:	f00f f8ae 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	81fb      	strh	r3, [r7, #14]
 8007158:	89fb      	ldrh	r3, [r7, #14]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 81e2 	beq.w	8007524 <phacDiscLoop_Sw_SetConfig+0x808>
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	e1e1      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 8007164:	883b      	ldrh	r3, [r7, #0]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	77da      	strb	r2, [r3, #31]
        break;
 800716c:	e1db      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 800716e:	883b      	ldrh	r3, [r7, #0]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d005      	beq.n	8007180 <phacDiscLoop_Sw_SetConfig+0x464>
 8007174:	883b      	ldrh	r3, [r7, #0]
 8007176:	2b08      	cmp	r3, #8
 8007178:	d002      	beq.n	8007180 <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800717a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800717e:	e1d3      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 8007180:	883b      	ldrh	r3, [r7, #0]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 800718a:	e1cc      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800718c:	883b      	ldrh	r3, [r7, #0]
 800718e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007196:	f244 0321 	movw	r3, #16417	@ 0x4021
 800719a:	e1c5      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 800719c:	883b      	ldrh	r3, [r7, #0]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	729a      	strb	r2, [r3, #10]
        break;
 80071a4:	e1bf      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80071a6:	883b      	ldrh	r3, [r7, #0]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d006      	beq.n	80071bc <phacDiscLoop_Sw_SetConfig+0x4a0>
 80071ae:	883b      	ldrh	r3, [r7, #0]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071b6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071ba:	e1b5      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80071bc:	883b      	ldrh	r3, [r7, #0]
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80071c4:	7b7b      	ldrb	r3, [r7, #13]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071ca:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071ce:	e1ab      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80071d0:	7b7a      	ldrb	r2, [r7, #13]
 80071d2:	883b      	ldrh	r3, [r7, #0]
 80071d4:	b2d8      	uxtb	r0, r3
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	440b      	add	r3, r1
 80071e0:	336c      	adds	r3, #108	@ 0x6c
 80071e2:	4602      	mov	r2, r0
 80071e4:	701a      	strb	r2, [r3, #0]
        break;
 80071e6:	e19e      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 80071e8:	883b      	ldrh	r3, [r7, #0]
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	d902      	bls.n	80071f4 <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071ee:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071f2:	e199      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 80071f4:	883b      	ldrh	r3, [r7, #0]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 80071fe:	e192      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 8007200:	883b      	ldrh	r3, [r7, #0]
 8007202:	2b0e      	cmp	r3, #14
 8007204:	d902      	bls.n	800720c <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007206:	f244 0321 	movw	r3, #16417	@ 0x4021
 800720a:	e18d      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 800720c:	883b      	ldrh	r3, [r7, #0]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 8007216:	e186      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 8007218:	883b      	ldrh	r3, [r7, #0]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 8007222:	e180      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8007224:	883b      	ldrh	r3, [r7, #0]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d807      	bhi.n	800723a <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8007230:	2b01      	cmp	r3, #1
 8007232:	d105      	bne.n	8007240 <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8007234:	883b      	ldrh	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800723a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800723e:	e173      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 8007240:	883b      	ldrh	r3, [r7, #0]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 800724a:	e16c      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800724c:	883b      	ldrh	r3, [r7, #0]
 800724e:	2b03      	cmp	r3, #3
 8007250:	d807      	bhi.n	8007262 <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800725c:	883b      	ldrh	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007262:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007266:	e15f      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 8007268:	883b      	ldrh	r3, [r7, #0]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        break;
 8007272:	e158      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007274:	883b      	ldrh	r3, [r7, #0]
 8007276:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <phacDiscLoop_Sw_SetConfig+0x568>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800727e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007282:	e151      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 8007284:	883b      	ldrh	r3, [r7, #0]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	72da      	strb	r2, [r3, #11]
    break;
 800728c:	e14b      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 800728e:	883b      	ldrh	r3, [r7, #0]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
      break;
 8007298:	e145      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 800729a:	883b      	ldrh	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <phacDiscLoop_Sw_SetConfig+0x58e>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 80072a8:	e13d      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
      break;
 80072b2:	e138      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 80072b4:	883b      	ldrh	r3, [r7, #0]
 80072b6:	2b0c      	cmp	r3, #12
 80072b8:	d902      	bls.n	80072c0 <phacDiscLoop_Sw_SetConfig+0x5a4>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072ba:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072be:	e133      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 80072c0:	883b      	ldrh	r3, [r7, #0]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      break;
 80072ca:	e12c      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 80072cc:	883b      	ldrh	r3, [r7, #0]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	d902      	bls.n	80072d8 <phacDiscLoop_Sw_SetConfig+0x5bc>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072d2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072d6:	e127      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 80072d8:	883b      	ldrh	r3, [r7, #0]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
      break;
 80072e2:	e120      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 80072e4:	883b      	ldrh	r3, [r7, #0]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
        break;
 80072ee:	e11a      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80072f0:	883b      	ldrh	r3, [r7, #0]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d807      	bhi.n	8007306 <phacDiscLoop_Sw_SetConfig+0x5ea>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <phacDiscLoop_Sw_SetConfig+0x5f0>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8007300:	883b      	ldrh	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <phacDiscLoop_Sw_SetConfig+0x5f0>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007306:	f244 0321 	movw	r3, #16417	@ 0x4021
 800730a:	e10d      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 800730c:	883b      	ldrh	r3, [r7, #0]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
      break;
 8007316:	e106      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8007318:	883b      	ldrh	r3, [r7, #0]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d807      	bhi.n	800732e <phacDiscLoop_Sw_SetConfig+0x612>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8007324:	2b01      	cmp	r3, #1
 8007326:	d105      	bne.n	8007334 <phacDiscLoop_Sw_SetConfig+0x618>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8007328:	883b      	ldrh	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <phacDiscLoop_Sw_SetConfig+0x618>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800732e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007332:	e0f9      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 8007334:	883b      	ldrh	r3, [r7, #0]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
      break;
 800733e:	e0f2      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 8007340:	883b      	ldrh	r3, [r7, #0]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	d006      	beq.n	8007356 <phacDiscLoop_Sw_SetConfig+0x63a>
 8007348:	883b      	ldrh	r3, [r7, #0]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <phacDiscLoop_Sw_SetConfig+0x63a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007350:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007354:	e0e8      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 8007356:	883b      	ldrh	r3, [r7, #0]
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	b29b      	uxth	r3, r3
 800735c:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800735e:	7b7b      	ldrb	r3, [r7, #13]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <phacDiscLoop_Sw_SetConfig+0x64e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007364:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007368:	e0de      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 800736a:	7b7a      	ldrb	r2, [r7, #13]
 800736c:	883b      	ldrh	r3, [r7, #0]
 800736e:	b2d8      	uxtb	r0, r3
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	33b1      	adds	r3, #177	@ 0xb1
 800737e:	4602      	mov	r2, r0
 8007380:	701a      	strb	r2, [r3, #0]
        break;
 8007382:	e0d0      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 8007384:	883b      	ldrh	r3, [r7, #0]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 800738e:	e0ca      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007390:	883b      	ldrh	r3, [r7, #0]
 8007392:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <phacDiscLoop_Sw_SetConfig+0x684>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800739a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800739e:	e0c3      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 80073a0:	883b      	ldrh	r3, [r7, #0]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	731a      	strb	r2, [r3, #12]
        break;
 80073a8:	e0bd      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 80073aa:	883b      	ldrh	r3, [r7, #0]
 80073ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <phacDiscLoop_Sw_SetConfig+0x69e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80073b4:	f244 0321 	movw	r3, #16417	@ 0x4021
 80073b8:	e0b6      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 80073ba:	883b      	ldrh	r3, [r7, #0]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	739a      	strb	r2, [r3, #14]
        break;
 80073c2:	e0b0      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 80073c4:	883b      	ldrh	r3, [r7, #0]
 80073c6:	2b0d      	cmp	r3, #13
 80073c8:	d005      	beq.n	80073d6 <phacDiscLoop_Sw_SetConfig+0x6ba>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 80073ca:	883b      	ldrh	r3, [r7, #0]
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	d002      	beq.n	80073d6 <phacDiscLoop_Sw_SetConfig+0x6ba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80073d0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80073d4:	e0a8      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 80073d6:	883b      	ldrh	r3, [r7, #0]
 80073d8:	2b0d      	cmp	r3, #13
 80073da:	d109      	bne.n	80073f0 <phacDiscLoop_Sw_SetConfig+0x6d4>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80073e2:	f043 0302 	orr.w	r3, r3, #2
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 80073ee:	e09a      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80073f6:	f023 0302 	bic.w	r3, r3, #2
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
        break;
 8007402:	e090      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 8007404:	883b      	ldrh	r3, [r7, #0]
 8007406:	2b20      	cmp	r3, #32
 8007408:	d008      	beq.n	800741c <phacDiscLoop_Sw_SetConfig+0x700>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 800740a:	883b      	ldrh	r3, [r7, #0]
 800740c:	2b10      	cmp	r3, #16
 800740e:	d005      	beq.n	800741c <phacDiscLoop_Sw_SetConfig+0x700>
 8007410:	883b      	ldrh	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <phacDiscLoop_Sw_SetConfig+0x700>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007416:	f244 0321 	movw	r3, #16417	@ 0x4021
 800741a:	e085      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	f107 020a 	add.w	r2, r7, #10
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f00f f918 	bl	801665c <phpalSli15693_Sw_GetConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	81fb      	strh	r3, [r7, #14]
 8007430:	89fb      	ldrh	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <phacDiscLoop_Sw_SetConfig+0x71e>
 8007436:	89fb      	ldrh	r3, [r7, #14]
 8007438:	e076      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 800743a:	883b      	ldrh	r3, [r7, #0]
 800743c:	2b10      	cmp	r3, #16
 800743e:	d10a      	bne.n	8007456 <phacDiscLoop_Sw_SetConfig+0x73a>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8007440:	897b      	ldrh	r3, [r7, #10]
 8007442:	f043 0310 	orr.w	r3, r3, #16
 8007446:	b29b      	uxth	r3, r3
 8007448:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 800744a:	897b      	ldrh	r3, [r7, #10]
 800744c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007450:	b29b      	uxth	r3, r3
 8007452:	817b      	strh	r3, [r7, #10]
 8007454:	e017      	b.n	8007486 <phacDiscLoop_Sw_SetConfig+0x76a>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 8007456:	883b      	ldrh	r3, [r7, #0]
 8007458:	2b20      	cmp	r3, #32
 800745a:	d10a      	bne.n	8007472 <phacDiscLoop_Sw_SetConfig+0x756>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 800745c:	897b      	ldrh	r3, [r7, #10]
 800745e:	f043 0320 	orr.w	r3, r3, #32
 8007462:	b29b      	uxth	r3, r3
 8007464:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8007466:	897b      	ldrh	r3, [r7, #10]
 8007468:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800746c:	b29b      	uxth	r3, r3
 800746e:	817b      	strh	r3, [r7, #10]
 8007470:	e009      	b.n	8007486 <phacDiscLoop_Sw_SetConfig+0x76a>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8007472:	897b      	ldrh	r3, [r7, #10]
 8007474:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007478:	b29b      	uxth	r3, r3
 800747a:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 800747c:	897b      	ldrh	r3, [r7, #10]
 800747e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8007482:	b29b      	uxth	r3, r3
 8007484:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	897a      	ldrh	r2, [r7, #10]
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f00e ff0e 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	81fb      	strh	r3, [r7, #14]
 8007498:	89fb      	ldrh	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <phacDiscLoop_Sw_SetConfig+0x786>
 800749e:	89fb      	ldrh	r3, [r7, #14]
 80074a0:	e042      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 80074a2:	883b      	ldrh	r3, [r7, #0]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
        break;
 80074ac:	e03b      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 80074ae:	883b      	ldrh	r3, [r7, #0]
 80074b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <phacDiscLoop_Sw_SetConfig+0x7a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80074b8:	f244 0321 	movw	r3, #16417	@ 0x4021
 80074bc:	e034      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 80074be:	883b      	ldrh	r3, [r7, #0]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	73da      	strb	r2, [r3, #15]
        break;
 80074c6:	e02e      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 80074c8:	883b      	ldrh	r3, [r7, #0]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d005      	beq.n	80074da <phacDiscLoop_Sw_SetConfig+0x7be>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 80074ce:	883b      	ldrh	r3, [r7, #0]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d002      	beq.n	80074da <phacDiscLoop_Sw_SetConfig+0x7be>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80074d4:	f244 0321 	movw	r3, #16417	@ 0x4021
 80074d8:	e026      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 80074da:	883b      	ldrh	r3, [r7, #0]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        break;
 80074e4:	e01f      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 80074e6:	883b      	ldrh	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <phacDiscLoop_Sw_SetConfig+0x7dc>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 80074ec:	883b      	ldrh	r3, [r7, #0]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d002      	beq.n	80074f8 <phacDiscLoop_Sw_SetConfig+0x7dc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80074f2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80074f6:	e017      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 80074f8:	883b      	ldrh	r3, [r7, #0]
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
        break;
 8007502:	e010      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 8007504:	883b      	ldrh	r3, [r7, #0]
 8007506:	2bff      	cmp	r3, #255	@ 0xff
 8007508:	d902      	bls.n	8007510 <phacDiscLoop_Sw_SetConfig+0x7f4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800750a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800750e:	e00b      	b.n	8007528 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 8007510:	883b      	ldrh	r3, [r7, #0]
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        break;
 800751a:	e004      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800751c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007520:	81fb      	strh	r3, [r7, #14]
 8007522:	e000      	b.n	8007526 <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
 8007524:	bf00      	nop
    }

    return status;
 8007526:	89fb      	ldrh	r3, [r7, #14]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	460b      	mov	r3, r1
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800753e:	2300      	movs	r3, #0
 8007540:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 8007542:	897b      	ldrh	r3, [r7, #10]
 8007544:	2b92      	cmp	r3, #146	@ 0x92
 8007546:	f200 8250 	bhi.w	80079ea <phacDiscLoop_Sw_GetConfig+0x4ba>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <phacDiscLoop_Sw_GetConfig+0x20>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007859 	.word	0x08007859
 8007554:	080078c3 	.word	0x080078c3
 8007558:	08007911 	.word	0x08007911
 800755c:	0800791b 	.word	0x0800791b
 8007560:	0800794d 	.word	0x0800794d
 8007564:	0800799d 	.word	0x0800799d
 8007568:	08007833 	.word	0x08007833
 800756c:	080079eb 	.word	0x080079eb
 8007570:	080079eb 	.word	0x080079eb
 8007574:	080079eb 	.word	0x080079eb
 8007578:	080079eb 	.word	0x080079eb
 800757c:	080079eb 	.word	0x080079eb
 8007580:	080079eb 	.word	0x080079eb
 8007584:	080079eb 	.word	0x080079eb
 8007588:	080079eb 	.word	0x080079eb
 800758c:	080079eb 	.word	0x080079eb
 8007590:	08007871 	.word	0x08007871
 8007594:	080078db 	.word	0x080078db
 8007598:	08007933 	.word	0x08007933
 800759c:	08007957 	.word	0x08007957
 80075a0:	080079a7 	.word	0x080079a7
 80075a4:	080079eb 	.word	0x080079eb
 80075a8:	080079eb 	.word	0x080079eb
 80075ac:	080079eb 	.word	0x080079eb
 80075b0:	080079eb 	.word	0x080079eb
 80075b4:	080079eb 	.word	0x080079eb
 80075b8:	080079eb 	.word	0x080079eb
 80075bc:	080079eb 	.word	0x080079eb
 80075c0:	080079eb 	.word	0x080079eb
 80075c4:	080079eb 	.word	0x080079eb
 80075c8:	080079eb 	.word	0x080079eb
 80075cc:	080079eb 	.word	0x080079eb
 80075d0:	08007863 	.word	0x08007863
 80075d4:	080078cd 	.word	0x080078cd
 80075d8:	08007925 	.word	0x08007925
 80075dc:	08007963 	.word	0x08007963
 80075e0:	080079b3 	.word	0x080079b3
 80075e4:	080078e7 	.word	0x080078e7
 80075e8:	080079eb 	.word	0x080079eb
 80075ec:	080079eb 	.word	0x080079eb
 80075f0:	080079eb 	.word	0x080079eb
 80075f4:	080079eb 	.word	0x080079eb
 80075f8:	080079eb 	.word	0x080079eb
 80075fc:	080079eb 	.word	0x080079eb
 8007600:	080079eb 	.word	0x080079eb
 8007604:	080079eb 	.word	0x080079eb
 8007608:	080079eb 	.word	0x080079eb
 800760c:	080079eb 	.word	0x080079eb
 8007610:	080079eb 	.word	0x080079eb
 8007614:	080079eb 	.word	0x080079eb
 8007618:	080079eb 	.word	0x080079eb
 800761c:	080079eb 	.word	0x080079eb
 8007620:	080079eb 	.word	0x080079eb
 8007624:	080078f5 	.word	0x080078f5
 8007628:	08007903 	.word	0x08007903
 800762c:	080079eb 	.word	0x080079eb
 8007630:	080079eb 	.word	0x080079eb
 8007634:	080079eb 	.word	0x080079eb
 8007638:	080079eb 	.word	0x080079eb
 800763c:	080079eb 	.word	0x080079eb
 8007640:	080079eb 	.word	0x080079eb
 8007644:	080079eb 	.word	0x080079eb
 8007648:	080079eb 	.word	0x080079eb
 800764c:	080079eb 	.word	0x080079eb
 8007650:	0800787d 	.word	0x0800787d
 8007654:	0800788b 	.word	0x0800788b
 8007658:	08007899 	.word	0x08007899
 800765c:	080078b5 	.word	0x080078b5
 8007660:	080078a7 	.word	0x080078a7
 8007664:	080079eb 	.word	0x080079eb
 8007668:	080079eb 	.word	0x080079eb
 800766c:	080079eb 	.word	0x080079eb
 8007670:	080079eb 	.word	0x080079eb
 8007674:	080079eb 	.word	0x080079eb
 8007678:	080079eb 	.word	0x080079eb
 800767c:	080079eb 	.word	0x080079eb
 8007680:	080079eb 	.word	0x080079eb
 8007684:	080079eb 	.word	0x080079eb
 8007688:	080079eb 	.word	0x080079eb
 800768c:	080079eb 	.word	0x080079eb
 8007690:	080079eb 	.word	0x080079eb
 8007694:	080079eb 	.word	0x080079eb
 8007698:	080079eb 	.word	0x080079eb
 800769c:	080079eb 	.word	0x080079eb
 80076a0:	080079eb 	.word	0x080079eb
 80076a4:	080079eb 	.word	0x080079eb
 80076a8:	080079eb 	.word	0x080079eb
 80076ac:	0800793f 	.word	0x0800793f
 80076b0:	080079eb 	.word	0x080079eb
 80076b4:	080079eb 	.word	0x080079eb
 80076b8:	080079eb 	.word	0x080079eb
 80076bc:	080079eb 	.word	0x080079eb
 80076c0:	080079eb 	.word	0x080079eb
 80076c4:	080079eb 	.word	0x080079eb
 80076c8:	080079eb 	.word	0x080079eb
 80076cc:	080079eb 	.word	0x080079eb
 80076d0:	08007971 	.word	0x08007971
 80076d4:	0800798f 	.word	0x0800798f
 80076d8:	080079eb 	.word	0x080079eb
 80076dc:	080079eb 	.word	0x080079eb
 80076e0:	080079eb 	.word	0x080079eb
 80076e4:	080079eb 	.word	0x080079eb
 80076e8:	080079eb 	.word	0x080079eb
 80076ec:	080079eb 	.word	0x080079eb
 80076f0:	080079eb 	.word	0x080079eb
 80076f4:	080079eb 	.word	0x080079eb
 80076f8:	080079eb 	.word	0x080079eb
 80076fc:	080079eb 	.word	0x080079eb
 8007700:	080079eb 	.word	0x080079eb
 8007704:	080079eb 	.word	0x080079eb
 8007708:	080079eb 	.word	0x080079eb
 800770c:	080079eb 	.word	0x080079eb
 8007710:	080079c1 	.word	0x080079c1
 8007714:	080079cf 	.word	0x080079cf
 8007718:	080079eb 	.word	0x080079eb
 800771c:	080079eb 	.word	0x080079eb
 8007720:	080079eb 	.word	0x080079eb
 8007724:	080079eb 	.word	0x080079eb
 8007728:	080079eb 	.word	0x080079eb
 800772c:	080079eb 	.word	0x080079eb
 8007730:	080079eb 	.word	0x080079eb
 8007734:	080079eb 	.word	0x080079eb
 8007738:	080079eb 	.word	0x080079eb
 800773c:	080079eb 	.word	0x080079eb
 8007740:	080079eb 	.word	0x080079eb
 8007744:	080079eb 	.word	0x080079eb
 8007748:	080079eb 	.word	0x080079eb
 800774c:	080079eb 	.word	0x080079eb
 8007750:	0800781d 	.word	0x0800781d
 8007754:	080077f7 	.word	0x080077f7
 8007758:	080079eb 	.word	0x080079eb
 800775c:	080077c1 	.word	0x080077c1
 8007760:	080077cd 	.word	0x080077cd
 8007764:	08007829 	.word	0x08007829
 8007768:	08007805 	.word	0x08007805
 800776c:	080077e9 	.word	0x080077e9
 8007770:	080077db 	.word	0x080077db
 8007774:	080077a9 	.word	0x080077a9
 8007778:	080077b5 	.word	0x080077b5
 800777c:	0800779d 	.word	0x0800779d
 8007780:	08007811 	.word	0x08007811
 8007784:	080079eb 	.word	0x080079eb
 8007788:	080079eb 	.word	0x080079eb
 800778c:	080079eb 	.word	0x080079eb
 8007790:	080079dd 	.word	0x080079dd
 8007794:	0800783d 	.word	0x0800783d
 8007798:	0800784b 	.word	0x0800784b
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	795b      	ldrb	r3, [r3, #5]
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	801a      	strh	r2, [r3, #0]
        break;
 80077a6:	e123      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	799b      	ldrb	r3, [r3, #6]
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	801a      	strh	r2, [r3, #0]
        break;
 80077b2:	e11d      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	78db      	ldrb	r3, [r3, #3]
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	801a      	strh	r2, [r3, #0]
        break;
 80077be:	e117      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7f9b      	ldrb	r3, [r3, #30]
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	801a      	strh	r2, [r3, #0]
        break;
 80077ca:	e111      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	891b      	ldrh	r3, [r3, #8]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	801a      	strh	r2, [r3, #0]
        break;
 80077d8:	e10a      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	801a      	strh	r2, [r3, #0]
        break;
 80077e6:	e103      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	801a      	strh	r2, [r3, #0]
        break;
 80077f4:	e0fc      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	801a      	strh	r2, [r3, #0]
         break;
 8007802:	e0f5      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	791b      	ldrb	r3, [r3, #4]
 8007808:	461a      	mov	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	801a      	strh	r2, [r3, #0]
        break;
 800780e:	e0ef      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	789b      	ldrb	r3, [r3, #2]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	801a      	strh	r2, [r3, #0]
        break;
 800781a:	e0e9      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	7fdb      	ldrb	r3, [r3, #31]
 8007820:	461a      	mov	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	801a      	strh	r2, [r3, #0]
        break;
 8007826:	e0e3      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	801a      	strh	r2, [r3, #0]
        break;
 8007830:	e0de      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8b9a      	ldrh	r2, [r3, #28]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	801a      	strh	r2, [r3, #0]
        break;
 800783a:	e0d9      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	801a      	strh	r2, [r3, #0]
        break;
 8007848:	e0d2      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	801a      	strh	r2, [r3, #0]
        break;
 8007856:	e0cb      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8a1a      	ldrh	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	801a      	strh	r2, [r3, #0]
        break;
 8007860:	e0c6      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	801a      	strh	r2, [r3, #0]
        break;
 800786e:	e0bf      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	7a9b      	ldrb	r3, [r3, #10]
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	801a      	strh	r2, [r3, #0]
        break;
 800787a:	e0b9      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	801a      	strh	r2, [r3, #0]
        break;
 8007888:	e0b2      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	801a      	strh	r2, [r3, #0]
        break;
 8007896:	e0ab      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	801a      	strh	r2, [r3, #0]
        break;
 80078a4:	e0a4      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80078ac:	461a      	mov	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	801a      	strh	r2, [r3, #0]
        break;
 80078b2:	e09d      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	801a      	strh	r2, [r3, #0]
        break;
 80078c0:	e096      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8a5a      	ldrh	r2, [r3, #18]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	801a      	strh	r2, [r3, #0]
        break;
 80078ca:	e091      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80078d2:	461a      	mov	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	801a      	strh	r2, [r3, #0]
        break;
 80078d8:	e08a      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	7adb      	ldrb	r3, [r3, #11]
 80078de:	461a      	mov	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	801a      	strh	r2, [r3, #0]
        break;
 80078e4:	e084      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	801a      	strh	r2, [r3, #0]
        break;
 80078f2:	e07d      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	801a      	strh	r2, [r3, #0]
        break;
 8007900:	e076      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007908:	461a      	mov	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	801a      	strh	r2, [r3, #0]
        break;
 800790e:	e06f      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8a9a      	ldrh	r2, [r3, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	801a      	strh	r2, [r3, #0]
         break;
 8007918:	e06a      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8ada      	ldrh	r2, [r3, #22]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	801a      	strh	r2, [r3, #0]
         break;
 8007922:	e065      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800792a:	461a      	mov	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	801a      	strh	r2, [r3, #0]
        break;
 8007930:	e05e      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	7b1b      	ldrb	r3, [r3, #12]
 8007936:	461a      	mov	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	801a      	strh	r2, [r3, #0]
        break;
 800793c:	e058      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	801a      	strh	r2, [r3, #0]
         break;
 800794a:	e051      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8b1a      	ldrh	r2, [r3, #24]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	801a      	strh	r2, [r3, #0]
        break;
 8007954:	e04c      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	7b9b      	ldrb	r3, [r3, #14]
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	801a      	strh	r2, [r3, #0]
        break;
 8007960:	e046      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	801a      	strh	r2, [r3, #0]
        break;
 800796e:	e03f      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <phacDiscLoop_Sw_GetConfig+0x456>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	220d      	movs	r2, #13
 8007982:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 8007984:	e034      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220c      	movs	r2, #12
 800798a:	801a      	strh	r2, [r3, #0]
        break;
 800798c:	e030      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	801a      	strh	r2, [r3, #0]
        break;
 800799a:	e029      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8b5a      	ldrh	r2, [r3, #26]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	801a      	strh	r2, [r3, #0]
        break;
 80079a4:	e024      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7bdb      	ldrb	r3, [r3, #15]
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	801a      	strh	r2, [r3, #0]
        break;
 80079b0:	e01e      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	801a      	strh	r2, [r3, #0]
        break;
 80079be:	e017      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	801a      	strh	r2, [r3, #0]
        break;
 80079cc:	e010      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80079d4:	461a      	mov	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	801a      	strh	r2, [r3, #0]
        break;
 80079da:	e009      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	801a      	strh	r2, [r3, #0]
        break;
 80079e8:	e002      	b.n	80079f0 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80079ea:	f244 0321 	movw	r3, #16417	@ 0x4021
 80079ee:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 80079f0:	8afb      	ldrh	r3, [r7, #22]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop

08007a00 <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8007a10:	2301      	movs	r3, #1
 8007a12:	737b      	strb	r3, [r7, #13]
 8007a14:	e0ba      	b.n	8007b8c <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a1a:	7b7b      	ldrb	r3, [r7, #13]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 8007a22:	7b3b      	ldrb	r3, [r7, #12]
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	f240 80ae 	bls.w	8007b86 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007a2a:	7b3b      	ldrb	r3, [r7, #12]
 8007a2c:	2b05      	cmp	r3, #5
 8007a2e:	d106      	bne.n	8007a3e <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	789b      	ldrb	r3, [r3, #2]
 8007a34:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80a3 	beq.w	8007b84 <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007a3e:	7b3b      	ldrb	r3, [r7, #12]
 8007a40:	2b05      	cmp	r3, #5
 8007a42:	d115      	bne.n	8007a70 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d111      	bne.n	8007a70 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 8007a4c:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8007a50:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 8007a52:	893b      	ldrh	r3, [r7, #8]
 8007a54:	461a      	mov	r2, r3
 8007a56:	2105      	movs	r1, #5
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff f95f 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	81fb      	strh	r3, [r7, #14]
 8007a62:	89fb      	ldrh	r3, [r7, #14]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 8007a68:	89fb      	ldrh	r3, [r7, #14]
 8007a6a:	e094      	b.n	8007b96 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 8007a6c:	89fb      	ldrh	r3, [r7, #14]
 8007a6e:	e092      	b.n	8007b96 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 8007a70:	7b7b      	ldrb	r3, [r7, #13]
 8007a72:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	4413      	add	r3, r2
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8007a86:	7b3b      	ldrb	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	789b      	ldrb	r3, [r3, #2]
 8007a90:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d134      	bne.n	8007b02 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8007a98:	7b3b      	ldrb	r3, [r7, #12]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	789b      	ldrb	r3, [r3, #2]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d12b      	bne.n	8007b02 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8007aaa:	7b3b      	ldrb	r3, [r7, #12]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d105      	bne.n	8007abc <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d122      	bne.n	8007b02 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8007abc:	7b3b      	ldrb	r3, [r7, #12]
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d105      	bne.n	8007ace <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	789b      	ldrb	r3, [r3, #2]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d119      	bne.n	8007b02 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8007ace:	7b3b      	ldrb	r3, [r7, #12]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d105      	bne.n	8007ae0 <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	789b      	ldrb	r3, [r3, #2]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d110      	bne.n	8007b02 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8007ae0:	7b3b      	ldrb	r3, [r7, #12]
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d105      	bne.n	8007af2 <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	789b      	ldrb	r3, [r3, #2]
 8007aea:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d107      	bne.n	8007b02 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 8007af8:	2306      	movs	r3, #6
 8007afa:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1b8      	bne.n	8007a74 <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 8007b02:	7b3b      	ldrb	r3, [r7, #12]
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d825      	bhi.n	8007b54 <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 8007b08:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b2d 	.word	0x08007b2d
 8007b14:	08007b35 	.word	0x08007b35
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b4d 	.word	0x08007b4d
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 8007b2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b30:	813b      	strh	r3, [r7, #8]
                break;
 8007b32:	e013      	b.n	8007b5c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 8007b34:	f640 63d8 	movw	r3, #3800	@ 0xed8
 8007b38:	813b      	strh	r3, [r7, #8]
                break;
 8007b3a:	e00f      	b.n	8007b5c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 8007b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b40:	813b      	strh	r3, [r7, #8]
                break;
 8007b42:	e00b      	b.n	8007b5c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8007b44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b48:	813b      	strh	r3, [r7, #8]
                break;
 8007b4a:	e007      	b.n	8007b5c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 8007b4c:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8007b50:	813b      	strh	r3, [r7, #8]
                break;
 8007b52:	e003      	b.n	8007b5c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8007b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b58:	813b      	strh	r3, [r7, #8]
                break;
 8007b5a:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b60:	7b7b      	ldrb	r3, [r7, #13]
 8007b62:	4413      	add	r3, r2
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b05      	cmp	r3, #5
 8007b68:	d10d      	bne.n	8007b86 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 8007b6a:	893b      	ldrh	r3, [r7, #8]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2105      	movs	r1, #5
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff f8d3 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 8007b76:	4603      	mov	r3, r0
 8007b78:	81fb      	strh	r3, [r7, #14]
 8007b7a:	89fb      	ldrh	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 8007b80:	89fb      	ldrh	r3, [r7, #14]
 8007b82:	e008      	b.n	8007b96 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 8007b84:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8007b86:	7b7b      	ldrb	r3, [r7, #13]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	737b      	strb	r3, [r7, #13]
 8007b8c:	7b7b      	ldrb	r3, [r7, #13]
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	f67f af41 	bls.w	8007a16 <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 8007b94:	89fb      	ldrh	r3, [r7, #14]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	4618      	mov	r0, r3
 8007bae:	f005 fb4b 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	81fb      	strh	r3, [r7, #14]
 8007bb6:	89fb      	ldrh	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	e01b      	b.n	8007bf8 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f005 fb60 	bl	800d290 <phhalHw_Pn5180_Wait>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	81fb      	strh	r3, [r7, #14]
 8007bd4:	89fb      	ldrh	r3, [r7, #14]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 8007bda:	89fb      	ldrh	r3, [r7, #14]
 8007bdc:	e00c      	b.n	8007bf8 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	4618      	mov	r0, r3
 8007be4:	f005 fada 	bl	800d19c <phhalHw_Pn5180_FieldOn>
 8007be8:	4603      	mov	r3, r0
 8007bea:	81fb      	strh	r3, [r7, #14]
 8007bec:	89fb      	ldrh	r3, [r7, #14]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 8007bf2:	89fb      	ldrh	r3, [r7, #14]
 8007bf4:	e000      	b.n	8007bf8 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 8007c08:	237f      	movs	r3, #127	@ 0x7f
 8007c0a:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8007c12:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 8007c14:	2300      	movs	r3, #0
 8007c16:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	799b      	ldrb	r3, [r3, #6]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	799b      	ldrb	r3, [r3, #6]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007c2e:	89bb      	ldrh	r3, [r7, #12]
 8007c30:	f043 0304 	orr.w	r3, r3, #4
 8007c34:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 8007c36:	89bb      	ldrh	r3, [r7, #12]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	795b      	ldrb	r3, [r3, #5]
 8007c40:	b21b      	sxth	r3, r3
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	b21a      	sxth	r2, r3
 8007c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	b21b      	sxth	r3, r3
 8007c50:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	795b      	ldrb	r3, [r3, #5]
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007c5e:	89bb      	ldrh	r3, [r7, #12]
 8007c60:	f043 0304 	orr.w	r3, r3, #4
 8007c64:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f503 7482 	add.w	r4, r3, #260	@ 0x104
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8007c7c:	89b9      	ldrh	r1, [r7, #12]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4623      	mov	r3, r4
 8007c82:	f007 fbc5 	bl	800f410 <phhalHw_Pn5180_Autocoll>
 8007c86:	4603      	mov	r3, r0
 8007c88:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 8007c8a:	897b      	ldrh	r3, [r7, #10]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	73fa      	strb	r2, [r7, #15]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e4      	bne.n	8007c66 <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 8007c9c:	897b      	ldrh	r3, [r7, #10]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d102      	bne.n	8007caa <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 8007ca4:	f244 0383 	movw	r3, #16515	@ 0x4083
 8007ca8:	e006      	b.n	8007cb8 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 8007caa:	897b      	ldrh	r3, [r7, #10]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 8007cb0:	897b      	ldrh	r3, [r7, #10]
 8007cb2:	e001      	b.n	8007cb8 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 8007cb4:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd90      	pop	{r4, r7, pc}

08007cc0 <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	e018      	b.n	8007d08 <phacDiscLoop_Sw_Int_ActivePollMode+0x48>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	78db      	ldrb	r3, [r3, #3]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d006      	beq.n	8007cf8 <phacDiscLoop_Sw_Int_ActivePollMode+0x38>
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d806      	bhi.n	8007cfc <phacDiscLoop_Sw_Int_ActivePollMode+0x3c>
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d006      	beq.n	8007d00 <phacDiscLoop_Sw_Int_ActivePollMode+0x40>
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d000      	beq.n	8007cf8 <phacDiscLoop_Sw_Int_ActivePollMode+0x38>
                }
#endif
                break;

            default:
                break;
 8007cf6:	e001      	b.n	8007cfc <phacDiscLoop_Sw_Int_ActivePollMode+0x3c>
                break;
 8007cf8:	bf00      	nop
 8007cfa:	e002      	b.n	8007d02 <phacDiscLoop_Sw_Int_ActivePollMode+0x42>
                break;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <phacDiscLoop_Sw_Int_ActivePollMode+0x42>
                break;
 8007d00:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	3301      	adds	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d9e3      	bls.n	8007cd6 <phacDiscLoop_Sw_Int_ActivePollMode+0x16>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007d0e:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 8007d2a:	2321      	movs	r3, #33	@ 0x21
 8007d2c:	81fb      	strh	r3, [r7, #14]

    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	891b      	ldrh	r3, [r3, #8]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d145      	bne.n	8007dc2 <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d004      	beq.n	8007d4a <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d110      	bne.n	8007d6c <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	7919      	ldrb	r1, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	789a      	ldrb	r2, [r3, #2]
 8007d52:	f107 030b 	add.w	r3, r7, #11
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f976 	bl	8008048 <phacDiscLoop_Sw_Int_TechDetectActivity>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8007d60:	89fb      	ldrh	r3, [r7, #14]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b12      	cmp	r3, #18
 8007d66:	d116      	bne.n	8007d96 <phacDiscLoop_Sw_Int_PollMode+0x78>
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	e092      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d10f      	bne.n	8007d96 <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	789b      	ldrb	r3, [r3, #2]
 8007d7a:	f107 020b 	add.w	r2, r7, #11
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa95 	bl	80082b0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 8007d86:	4603      	mov	r3, r0
 8007d88:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8007d8a:	89fb      	ldrh	r3, [r7, #14]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b12      	cmp	r3, #18
 8007d90:	d101      	bne.n	8007d96 <phacDiscLoop_Sw_Int_PollMode+0x78>
 8007d92:	89fb      	ldrh	r3, [r7, #14]
 8007d94:	e07d      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7fdb      	ldrb	r3, [r3, #31]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d006      	beq.n	8007db4 <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 8007da6:	89fb      	ldrh	r3, [r7, #14]
 8007da8:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8007daa:	2b84      	cmp	r3, #132	@ 0x84
 8007dac:	d102      	bne.n	8007db4 <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007dae:	f244 0386 	movw	r3, #16518	@ 0x4086
 8007db2:	e06e      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8007db4:	89fb      	ldrh	r3, [r7, #14]
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b87      	cmp	r3, #135	@ 0x87
 8007dba:	d102      	bne.n	8007dc2 <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	811a      	strh	r2, [r3, #8]
        }
    }

    /* Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	891b      	ldrh	r3, [r3, #8]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d145      	bne.n	8007e56 <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	789b      	ldrb	r3, [r3, #2]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 8007dd8:	7b7b      	ldrb	r3, [r7, #13]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 8007dde:	7b7b      	ldrb	r3, [r7, #13]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	7b7b      	ldrb	r3, [r7, #13]
 8007de6:	4013      	ands	r3, r2
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007dee:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007df2:	e04e      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007df4:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007df8:	e04b      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	733b      	strb	r3, [r7, #12]
 8007dfe:	e005      	b.n	8007e0c <phacDiscLoop_Sw_Int_PollMode+0xee>
 8007e00:	7b7b      	ldrb	r3, [r7, #13]
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	737b      	strb	r3, [r7, #13]
 8007e06:	7b3b      	ldrb	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	733b      	strb	r3, [r7, #12]
 8007e0c:	7b7b      	ldrb	r3, [r7, #13]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f6      	bne.n	8007e00 <phacDiscLoop_Sw_Int_PollMode+0xe2>
 8007e12:	7b3b      	ldrb	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <phacDiscLoop_Sw_Int_PollMode+0xfe>
 8007e18:	237f      	movs	r3, #127	@ 0x7f
 8007e1a:	e03a      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 8007e1c:	7b3b      	ldrb	r3, [r7, #12]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fbb7 	bl	8008598 <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 8007e2e:	89fb      	ldrh	r3, [r7, #14]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b89      	cmp	r3, #137	@ 0x89
 8007e34:	d109      	bne.n	8007e4a <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 8007e36:	7b3b      	ldrb	r3, [r7, #12]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fbe5 	bl	8008610 <phacDiscLoop_Sw_Int_ActivateDevice>
 8007e46:	4603      	mov	r3, r0
 8007e48:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 8007e4a:	89fb      	ldrh	r3, [r7, #14]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b12      	cmp	r3, #18
 8007e50:	d101      	bne.n	8007e56 <phacDiscLoop_Sw_Int_PollMode+0x138>
 8007e52:	89fb      	ldrh	r3, [r7, #14]
 8007e54:	e01d      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
    }
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	891b      	ldrh	r3, [r3, #8]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d109      	bne.n	8007e72 <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d104      	bne.n	8007e72 <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f816 	bl	8007e9a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8007e72:	89fb      	ldrh	r3, [r7, #14]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8007e82:	89fb      	ldrh	r3, [r7, #14]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	e000      	b.n	8007e92 <phacDiscLoop_Sw_Int_PollMode+0x174>
 8007e90:	89fb      	ldrh	r3, [r7, #14]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af02      	add	r7, sp, #8
 8007ea0:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f005 f9cc 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	81fb      	strh	r3, [r7, #14]
 8007eb4:	89fb      	ldrh	r3, [r7, #14]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 8007eba:	89fb      	ldrh	r3, [r7, #14]
 8007ebc:	e0bf      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec2:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f005 f9e1 	bl	800d290 <phhalHw_Pn5180_Wait>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	81fb      	strh	r3, [r7, #14]
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	e0b0      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d054      	beq.n	8007f9a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	2101      	movs	r1, #1
 8007efe:	4618      	mov	r0, r3
 8007f00:	f004 fd04 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8007f04:	4603      	mov	r3, r0
 8007f06:	81fb      	strh	r3, [r7, #14]
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	e095      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fbba 	bl	800868c <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	81fb      	strh	r3, [r7, #14]
 8007f1c:	89fb      	ldrh	r3, [r7, #14]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d037      	beq.n	8007f92 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 8007f22:	89fb      	ldrh	r3, [r7, #14]
 8007f24:	e08b      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8a1b      	ldrh	r3, [r3, #16]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2135      	movs	r1, #53	@ 0x35
 8007f32:	f005 fa81 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8007f36:	4603      	mov	r3, r0
 8007f38:	81fb      	strh	r3, [r7, #14]
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 8007f40:	89fb      	ldrh	r3, [r7, #14]
 8007f42:	e07c      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	335e      	adds	r3, #94	@ 0x5e
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f00b f8e3 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 8007f54:	4603      	mov	r3, r0
 8007f56:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d015      	beq.n	8007f8c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8007f60:	89fb      	ldrh	r3, [r7, #14]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b12      	cmp	r3, #18
 8007f66:	d101      	bne.n	8007f6c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 8007f68:	89fb      	ldrh	r3, [r7, #14]
 8007f6a:	e068      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f70:	4618      	mov	r0, r3
 8007f72:	f00b f8e1 	bl	8013138 <phpalI14443p3a_Sw_HaltA>
 8007f76:	4603      	mov	r3, r0
 8007f78:	81fb      	strh	r3, [r7, #14]
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b12      	cmp	r3, #18
 8007f80:	d101      	bne.n	8007f86 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 8007f82:	89fb      	ldrh	r3, [r7, #14]
 8007f84:	e05b      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	737b      	strb	r3, [r7, #13]
 8007f8a:	e002      	b.n	8007f92 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 8007f8c:	7b7b      	ldrb	r3, [r7, #13]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 8007f92:	7b7b      	ldrb	r3, [r7, #13]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d9c6      	bls.n	8007f26 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 8007f98:	e04a      	b.n	8008030 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f004 fcaf 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	81fb      	strh	r3, [r7, #14]
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 8007fb8:	89fb      	ldrh	r3, [r7, #14]
 8007fba:	e040      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fb65 	bl	800868c <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	81fb      	strh	r3, [r7, #14]
 8007fc6:	89fb      	ldrh	r3, [r7, #14]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02e      	beq.n	800802a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	e036      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8a5b      	ldrh	r3, [r3, #18]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2135      	movs	r1, #53	@ 0x35
 8007fdc:	f005 fa2c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	81fb      	strh	r3, [r7, #14]
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 8007fea:	89fb      	ldrh	r3, [r7, #14]
 8007fec:	e027      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	33a2      	adds	r3, #162	@ 0xa2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	32af      	adds	r2, #175	@ 0xaf
 8007ffa:	9201      	str	r2, [sp, #4]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2300      	movs	r3, #0
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	f00b ff1b 	bl	8013e3e <phpalI14443p3b_Sw_WakeUpB>
 8008008:	4603      	mov	r3, r0
 800800a:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800800c:	89fb      	ldrh	r3, [r7, #14]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	d007      	beq.n	8008024 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b12      	cmp	r3, #18
 800801e:	d104      	bne.n	800802a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	e00c      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 8008024:	7b7b      	ldrb	r3, [r7, #13]
 8008026:	3301      	adds	r3, #1
 8008028:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800802a:	7b7b      	ldrb	r3, [r7, #13]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d9cf      	bls.n	8007fd0 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d001      	beq.n	800803c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 8008038:	89fb      	ldrh	r3, [r7, #14]
 800803a:	e000      	b.n	800803e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 800803c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	72fb      	strb	r3, [r7, #11]
 8008056:	4613      	mov	r3, r2
 8008058:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800805a:	2384      	movs	r3, #132	@ 0x84
 800805c:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 8008062:	2300      	movs	r3, #0
 8008064:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fcc2 	bl	8007a00 <phacDiscLoop_Sw_Int_Apply_PTGT>
 800807c:	4603      	mov	r3, r0
 800807e:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 8008080:	8afb      	ldrh	r3, [r7, #22]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 8008086:	8afb      	ldrh	r3, [r7, #22]
 8008088:	e109      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800808a:	2300      	movs	r3, #0
 800808c:	757b      	strb	r3, [r7, #21]
 800808e:	e0e6      	b.n	800825e <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008096:	2b02      	cmp	r3, #2
 8008098:	d106      	bne.n	80080a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 800809a:	7d3b      	ldrb	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 80080a0:	7d7b      	ldrb	r3, [r7, #21]
 80080a2:	2b05      	cmp	r3, #5
 80080a4:	f000 80e0 	beq.w	8008268 <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080ac:	7d7b      	ldrb	r3, [r7, #21]
 80080ae:	4413      	add	r3, r2
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 80080b4:	7cbb      	ldrb	r3, [r7, #18]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d002      	beq.n	80080c0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 80080ba:	7cbb      	ldrb	r3, [r7, #18]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d103      	bne.n	80080c8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 80080c0:	7cfb      	ldrb	r3, [r7, #19]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	f000 80c7 	beq.w	8008256 <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 80080c8:	7aba      	ldrb	r2, [r7, #10]
 80080ca:	7cbb      	ldrb	r3, [r7, #18]
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80bf 	beq.w	8008258 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080de:	f107 0210 	add.w	r2, r7, #16
 80080e2:	215f      	movs	r1, #95	@ 0x5f
 80080e4:	4618      	mov	r0, r3
 80080e6:	f006 fdf5 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 80080ea:	4603      	mov	r3, r0
 80080ec:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 80080ee:	8afb      	ldrh	r3, [r7, #22]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	e0d2      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 80080f8:	8a3b      	ldrh	r3, [r7, #16]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d123      	bne.n	8008146 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 80080fe:	7cbb      	ldrb	r3, [r7, #18]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d002      	beq.n	800810a <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 8008104:	7cbb      	ldrb	r3, [r7, #18]
 8008106:	2b03      	cmp	r3, #3
 8008108:	d10b      	bne.n	8008122 <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800810a:	7cbb      	ldrb	r3, [r7, #18]
 800810c:	4619      	mov	r1, r3
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f002 f874 	bl	800a1fc <phacDiscLoop_Sw_Int_Config_GTF>
 8008114:	4603      	mov	r3, r0
 8008116:	82fb      	strh	r3, [r7, #22]
 8008118:	8afb      	ldrh	r3, [r7, #22]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 800811e:	8afb      	ldrh	r3, [r7, #22]
 8008120:	e0bd      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008126:	7cba      	ldrb	r2, [r7, #18]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3208      	adds	r2, #8
 800812c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008130:	461a      	mov	r2, r3
 8008132:	2135      	movs	r1, #53	@ 0x35
 8008134:	f005 f980 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8008138:	4603      	mov	r3, r0
 800813a:	82fb      	strh	r3, [r7, #22]
 800813c:	8afb      	ldrh	r3, [r7, #22]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 8008142:	8afb      	ldrh	r3, [r7, #22]
 8008144:	e0ab      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800814a:	7cbb      	ldrb	r3, [r7, #18]
 800814c:	4956      	ldr	r1, [pc, #344]	@ (80082a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 800814e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f004 fbd8 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 800815c:	4603      	mov	r3, r0
 800815e:	82fb      	strh	r3, [r7, #22]
 8008160:	8afb      	ldrh	r3, [r7, #22]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 8008166:	8afb      	ldrh	r3, [r7, #22]
 8008168:	e099      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fab8 	bl	80086e0 <phacDiscLoop_Sw_Int_FieldOn>
 8008170:	4603      	mov	r3, r0
 8008172:	82fb      	strh	r3, [r7, #22]
 8008174:	8afb      	ldrh	r3, [r7, #22]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 800817a:	8afb      	ldrh	r3, [r7, #22]
 800817c:	e08f      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 800817e:	8a3b      	ldrh	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d123      	bne.n	80081cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 8008184:	7cbb      	ldrb	r3, [r7, #18]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d002      	beq.n	8008190 <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 800818a:	7cbb      	ldrb	r3, [r7, #18]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d10b      	bne.n	80081a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 8008190:	7cbb      	ldrb	r3, [r7, #18]
 8008192:	4619      	mov	r1, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f002 f831 	bl	800a1fc <phacDiscLoop_Sw_Int_Config_GTF>
 800819a:	4603      	mov	r3, r0
 800819c:	82fb      	strh	r3, [r7, #22]
 800819e:	8afb      	ldrh	r3, [r7, #22]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d013      	beq.n	80081cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 80081a4:	8afb      	ldrh	r3, [r7, #22]
 80081a6:	e07a      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80081ac:	7cba      	ldrb	r2, [r7, #18]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3208      	adds	r2, #8
 80081b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80081b6:	461a      	mov	r2, r3
 80081b8:	2135      	movs	r1, #53	@ 0x35
 80081ba:	f005 f93d 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80081be:	4603      	mov	r3, r0
 80081c0:	82fb      	strh	r3, [r7, #22]
 80081c2:	8afb      	ldrh	r3, [r7, #22]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 80081c8:	8afb      	ldrh	r3, [r7, #22]
 80081ca:	e068      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 80081cc:	7cbb      	ldrb	r3, [r7, #18]
 80081ce:	4a37      	ldr	r2, [pc, #220]	@ (80082ac <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 80081d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 80081dc:	8afb      	ldrh	r3, [r7, #22]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b87      	cmp	r3, #135	@ 0x87
 80081e2:	d123      	bne.n	800822c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80081ea:	7cbb      	ldrb	r3, [r7, #18]
 80081ec:	2101      	movs	r1, #1
 80081ee:	fa01 f303 	lsl.w	r3, r1, r3
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	4313      	orrs	r3, r2
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 80081fe:	7d3b      	ldrb	r3, [r7, #20]
 8008200:	3301      	adds	r3, #1
 8008202:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7d3a      	ldrb	r2, [r7, #20]
 8008224:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 8008226:	2301      	movs	r3, #1
 8008228:	74fb      	strb	r3, [r7, #19]
 800822a:	e005      	b.n	8008238 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 800822c:	8afb      	ldrh	r3, [r7, #22]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b12      	cmp	r3, #18
 8008232:	d101      	bne.n	8008238 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 8008234:	8afb      	ldrh	r3, [r7, #22]
 8008236:	e032      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 8008238:	7afa      	ldrb	r2, [r7, #11]
 800823a:	7cbb      	ldrb	r3, [r7, #18]
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 8008248:	7d3b      	ldrb	r3, [r7, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d004      	beq.n	8008258 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7d3a      	ldrb	r2, [r7, #20]
 8008252:	701a      	strb	r2, [r3, #0]
                break;
 8008254:	e009      	b.n	800826a <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 8008256:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8008258:	7d7b      	ldrb	r3, [r7, #21]
 800825a:	3301      	adds	r3, #1
 800825c:	757b      	strb	r3, [r7, #21]
 800825e:	7d7b      	ldrb	r3, [r7, #21]
 8008260:	2b05      	cmp	r3, #5
 8008262:	f67f af15 	bls.w	8008090 <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 8008266:	e000      	b.n	800826a <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 8008268:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 800826a:	7d3b      	ldrb	r3, [r7, #20]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d105      	bne.n	800827c <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7d3a      	ldrb	r2, [r7, #20]
 8008274:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8008276:	f244 0387 	movw	r3, #16519	@ 0x4087
 800827a:	e010      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 800827c:	7d3b      	ldrb	r3, [r7, #20]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d905      	bls.n	800828e <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7d3a      	ldrb	r2, [r7, #20]
 8008286:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8008288:	f244 0388 	movw	r3, #16520	@ 0x4088
 800828c:	e007      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 800828e:	8afb      	ldrh	r3, [r7, #22]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b01      	cmp	r3, #1
 8008294:	d102      	bne.n	800829c <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8008296:	f244 0384 	movw	r3, #16516	@ 0x4084
 800829a:	e000      	b.n	800829e <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 800829c:	8afb      	ldrh	r3, [r7, #22]
    }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	08020554 	.word	0x08020554
 80082ac:	08020584 	.word	0x08020584

080082b0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	460b      	mov	r3, r1
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 80082be:	2384      	movs	r3, #132	@ 0x84
 80082c0:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 80082d2:	2300      	movs	r3, #0
 80082d4:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 80082d6:	2300      	movs	r3, #0
 80082d8:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 80082da:	2300      	movs	r3, #0
 80082dc:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d105      	bne.n	80082fc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f4:	3301      	adds	r3, #1
 80082f6:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d002      	beq.n	8008302 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 80082fc:	f244 0325 	movw	r3, #16421	@ 0x4025
 8008300:	e142      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008306:	f107 0212 	add.w	r2, r7, #18
 800830a:	215f      	movs	r1, #95	@ 0x5f
 800830c:	4618      	mov	r0, r3
 800830e:	f006 fce1 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8008312:	4603      	mov	r3, r0
 8008314:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 8008316:	8bfb      	ldrh	r3, [r7, #30]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 800831c:	8bfb      	ldrh	r3, [r7, #30]
 800831e:	e133      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	2b00      	cmp	r3, #0
 8008324:	f040 8104 	bne.w	8008530 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832c:	2201      	movs	r2, #1
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f004 faea 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8008338:	4603      	mov	r3, r0
 800833a:	83fb      	strh	r3, [r7, #30]
 800833c:	8bfb      	ldrh	r3, [r7, #30]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 8008342:	8bfb      	ldrh	r3, [r7, #30]
 8008344:	e120      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f9a0 	bl	800868c <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800834c:	4603      	mov	r3, r0
 800834e:	83fb      	strh	r3, [r7, #30]
 8008350:	8bfb      	ldrh	r3, [r7, #30]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 8008356:	8bfb      	ldrh	r3, [r7, #30]
 8008358:	e116      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835e:	f107 0212 	add.w	r2, r7, #18
 8008362:	215f      	movs	r1, #95	@ 0x5f
 8008364:	4618      	mov	r0, r3
 8008366:	f006 fcb5 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 800836a:	4603      	mov	r3, r0
 800836c:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 800836e:	8bfb      	ldrh	r3, [r7, #30]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 8008374:	8bfb      	ldrh	r3, [r7, #30]
 8008376:	e107      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 8008378:	8a7b      	ldrh	r3, [r7, #18]
 800837a:	2b01      	cmp	r3, #1
 800837c:	f000 80d8 	beq.w	8008530 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 8008380:	f244 030a 	movw	r3, #16394	@ 0x400a
 8008384:	e100      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8008386:	2300      	movs	r3, #0
 8008388:	773b      	strb	r3, [r7, #28]
 800838a:	e0bf      	b.n	800850c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008390:	7f3b      	ldrb	r3, [r7, #28]
 8008392:	4413      	add	r3, r2
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 8008398:	7d3b      	ldrb	r3, [r7, #20]
 800839a:	2201      	movs	r2, #1
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 80083a2:	7afa      	ldrb	r2, [r7, #11]
 80083a4:	7d7b      	ldrb	r3, [r7, #21]
 80083a6:	4013      	ands	r3, r2
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 80ab 	beq.w	8008506 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 80083b0:	7e7b      	ldrb	r3, [r7, #25]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f040 80a7 	bne.w	8008506 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80083be:	7d7b      	ldrb	r3, [r7, #21]
 80083c0:	4013      	ands	r3, r2
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f040 809c 	bne.w	8008502 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 80083ca:	7d7b      	ldrb	r3, [r7, #21]
 80083cc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 80083d4:	2301      	movs	r3, #1
 80083d6:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 80083de:	7d7b      	ldrb	r3, [r7, #21]
 80083e0:	4013      	ands	r3, r2
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 80083e8:	7ebb      	ldrb	r3, [r7, #26]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d102      	bne.n	80083f4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fbd6 	bl	8007ba0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 80083f4:	7d7b      	ldrb	r3, [r7, #21]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d12c      	bne.n	8008454 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d011      	beq.n	800842c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 8008408:	7d3a      	ldrb	r2, [r7, #20]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3208      	adds	r2, #8
 800840e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 8008412:	f240 424c 	movw	r2, #1100	@ 0x44c
 8008416:	4293      	cmp	r3, r2
 8008418:	d908      	bls.n	800842c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 800841a:	7d3a      	ldrb	r2, [r7, #20]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3208      	adds	r2, #8
 8008420:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008424:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8008428:	82fb      	strh	r3, [r7, #22]
 800842a:	e005      	b.n	8008438 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 800842c:	7d3a      	ldrb	r2, [r7, #20]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3208      	adds	r2, #8
 8008432:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008436:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	8afa      	ldrh	r2, [r7, #22]
 800843e:	2135      	movs	r1, #53	@ 0x35
 8008440:	4618      	mov	r0, r3
 8008442:	f004 fff9 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8008446:	4603      	mov	r3, r0
 8008448:	83fb      	strh	r3, [r7, #30]
 800844a:	8bfb      	ldrh	r3, [r7, #30]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d013      	beq.n	8008478 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8008450:	8bfb      	ldrh	r3, [r7, #30]
 8008452:	e099      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008458:	7d3a      	ldrb	r2, [r7, #20]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3208      	adds	r2, #8
 800845e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008462:	461a      	mov	r2, r3
 8008464:	2135      	movs	r1, #53	@ 0x35
 8008466:	f004 ffe7 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800846a:	4603      	mov	r3, r0
 800846c:	83fb      	strh	r3, [r7, #30]
 800846e:	8bfb      	ldrh	r3, [r7, #30]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8008474:	8bfb      	ldrh	r3, [r7, #30]
 8008476:	e087      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800847c:	7d3b      	ldrb	r3, [r7, #20]
 800847e:	4944      	ldr	r1, [pc, #272]	@ (8008590 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 8008480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f004 fa3f 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 800848e:	4603      	mov	r3, r0
 8008490:	83fb      	strh	r3, [r7, #30]
 8008492:	8bfb      	ldrh	r3, [r7, #30]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 8008498:	8bfb      	ldrh	r3, [r7, #30]
 800849a:	e075      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 800849c:	7d3b      	ldrb	r3, [r7, #20]
 800849e:	4a3d      	ldr	r2, [pc, #244]	@ (8008594 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 80084a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 80084ac:	8bfb      	ldrh	r3, [r7, #30]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b87      	cmp	r3, #135	@ 0x87
 80084b2:	d10c      	bne.n	80084ce <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80084ba:	7d7b      	ldrb	r3, [r7, #21]
 80084bc:	4313      	orrs	r3, r2
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 80084c6:	7f7b      	ldrb	r3, [r7, #29]
 80084c8:	3301      	adds	r3, #1
 80084ca:	777b      	strb	r3, [r7, #29]
 80084cc:	e005      	b.n	80084da <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 80084ce:	8bfb      	ldrh	r3, [r7, #30]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b12      	cmp	r3, #18
 80084d4:	d101      	bne.n	80084da <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 80084d6:	8bfb      	ldrh	r3, [r7, #30]
 80084d8:	e056      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 80084e0:	7d7b      	ldrb	r3, [r7, #21]
 80084e2:	4013      	ands	r3, r2
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 80084ea:	7ebb      	ldrb	r3, [r7, #26]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d105      	bne.n	80084fc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f7ff fb55 	bl	8007ba0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 80084f6:	2301      	movs	r3, #1
 80084f8:	76fb      	strb	r3, [r7, #27]
 80084fa:	e004      	b.n	8008506 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 80084fc:	2300      	movs	r3, #0
 80084fe:	76fb      	strb	r3, [r7, #27]
 8008500:	e001      	b.n	8008506 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 8008502:	2301      	movs	r3, #1
 8008504:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8008506:	7f3b      	ldrb	r3, [r7, #28]
 8008508:	3301      	adds	r3, #1
 800850a:	773b      	strb	r3, [r7, #28]
 800850c:	7f3b      	ldrb	r3, [r7, #28]
 800850e:	2b05      	cmp	r3, #5
 8008510:	f67f af3c 	bls.w	800838c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 8008514:	7f7b      	ldrb	r3, [r7, #29]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 800851a:	2301      	movs	r3, #1
 800851c:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 800851e:	7ebb      	ldrb	r3, [r7, #26]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d105      	bne.n	8008530 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 8008524:	7efb      	ldrb	r3, [r7, #27]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fb38 	bl	8007ba0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 8008530:	7e7b      	ldrb	r3, [r7, #25]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f af27 	beq.w	8008386 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 8008538:	7f7b      	ldrb	r3, [r7, #29]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d105      	bne.n	800854a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7f7a      	ldrb	r2, [r7, #29]
 8008542:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 8008544:	2387      	movs	r3, #135	@ 0x87
 8008546:	83fb      	strh	r3, [r7, #30]
 8008548:	e00e      	b.n	8008568 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 800854a:	7f7b      	ldrb	r3, [r7, #29]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d905      	bls.n	800855c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7f7a      	ldrb	r2, [r7, #29]
 8008554:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 8008556:	2388      	movs	r3, #136	@ 0x88
 8008558:	83fb      	strh	r3, [r7, #30]
 800855a:	e005      	b.n	8008568 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 800855c:	8bfb      	ldrh	r3, [r7, #30]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8008564:	2384      	movs	r3, #132	@ 0x84
 8008566:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8008568:	8bfb      	ldrh	r3, [r7, #30]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 800856e:	8bfb      	ldrh	r3, [r7, #30]
 8008570:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 8008578:	8bfb      	ldrh	r3, [r7, #30]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	b29b      	uxth	r3, r3
 800857e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008582:	b29b      	uxth	r3, r3
 8008584:	e000      	b.n	8008588 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 8008586:	8bfb      	ldrh	r3, [r7, #30]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	08020554 	.word	0x08020554
 8008594:	08020584 	.word	0x08020584

08008598 <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	4a15      	ldr	r2, [pc, #84]	@ (800860c <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 80085b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
 80085c0:	4603      	mov	r3, r0
 80085c2:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80085c4:	89fb      	ldrh	r3, [r7, #14]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d112      	bne.n	80085f2 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	2201      	movs	r2, #1
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d902      	bls.n	80085ec <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 80085e6:	f244 038a 	movw	r3, #16522	@ 0x408a
 80085ea:	e00a      	b.n	8008602 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80085ec:	f244 0389 	movw	r3, #16521	@ 0x4089
 80085f0:	e007      	b.n	8008602 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80085f2:	89fb      	ldrh	r3, [r7, #14]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d102      	bne.n	8008600 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80085fa:	f244 0385 	movw	r3, #16517	@ 0x4085
 80085fe:	e000      	b.n	8008602 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 8008600:	89fb      	ldrh	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	0802056c 	.word	0x0802056c

08008610 <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
 800861c:	4613      	mov	r3, r2
 800861e:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	4a17      	ldr	r2, [pc, #92]	@ (8008688 <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 800862c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008630:	78ba      	ldrb	r2, [r7, #2]
 8008632:	4611      	mov	r1, r2
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3
 8008638:	4603      	mov	r3, r0
 800863a:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800863c:	89fb      	ldrh	r3, [r7, #14]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	2201      	movs	r2, #1
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 8008654:	f244 038b 	movw	r3, #16523	@ 0x408b
 8008658:	e012      	b.n	8008680 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 800865a:	89fb      	ldrh	r3, [r7, #14]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b8e      	cmp	r3, #142	@ 0x8e
 8008660:	d003      	beq.n	800866a <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 8008662:	89fb      	ldrh	r3, [r7, #14]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b8d      	cmp	r3, #141	@ 0x8d
 8008668:	d109      	bne.n	800867e <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2201      	movs	r2, #1
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	b2da      	uxtb	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 800867a:	89fb      	ldrh	r3, [r7, #14]
 800867c:	e000      	b.n	8008680 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 800867e:	89fb      	ldrh	r3, [r7, #14]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	0802059c 	.word	0x0802059c

0800868c <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008694:	2300      	movs	r3, #0
 8008696:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869c:	2200      	movs	r2, #0
 800869e:	2156      	movs	r1, #86	@ 0x56
 80086a0:	4618      	mov	r0, r3
 80086a2:	f004 fec9 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80086a6:	4603      	mov	r3, r0
 80086a8:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 80086aa:	89fb      	ldrh	r3, [r7, #14]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b23      	cmp	r3, #35	@ 0x23
 80086b0:	d005      	beq.n	80086be <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 80086ba:	89fb      	ldrh	r3, [r7, #14]
 80086bc:	e00c      	b.n	80086d8 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	4618      	mov	r0, r3
 80086c4:	f004 fd6a 	bl	800d19c <phhalHw_Pn5180_FieldOn>
 80086c8:	4603      	mov	r3, r0
 80086ca:	81fb      	strh	r3, [r7, #14]
 80086cc:	89fb      	ldrh	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 80086d2:	89fb      	ldrh	r3, [r7, #14]
 80086d4:	e000      	b.n	80086d8 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 80086d6:	89fb      	ldrh	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80086e8:	2300      	movs	r3, #0
 80086ea:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f0:	2201      	movs	r2, #1
 80086f2:	2156      	movs	r1, #86	@ 0x56
 80086f4:	4618      	mov	r0, r3
 80086f6:	f004 fe9f 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80086fa:	4603      	mov	r3, r0
 80086fc:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 80086fe:	89fb      	ldrh	r3, [r7, #14]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b23      	cmp	r3, #35	@ 0x23
 8008704:	d005      	beq.n	8008712 <phacDiscLoop_Sw_Int_FieldOn+0x32>
 8008706:	89fb      	ldrh	r3, [r7, #14]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 800870e:	89fb      	ldrh	r3, [r7, #14]
 8008710:	e01d      	b.n	800874e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008716:	4618      	mov	r0, r3
 8008718:	f004 fd40 	bl	800d19c <phhalHw_Pn5180_FieldOn>
 800871c:	4603      	mov	r3, r0
 800871e:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 8008720:	89fb      	ldrh	r3, [r7, #14]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b0a      	cmp	r3, #10
 8008726:	d102      	bne.n	800872e <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 8008728:	f244 0382 	movw	r3, #16514	@ 0x4082
 800872c:	e00f      	b.n	800874e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800872e:	89fb      	ldrh	r3, [r7, #14]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 8008734:	89fb      	ldrh	r3, [r7, #14]
 8008736:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800873e:	89fb      	ldrh	r3, [r7, #14]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008748:	b29b      	uxth	r3, r3
 800874a:	e000      	b.n	800874e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 800874c:	89fb      	ldrh	r3, [r7, #14]
    }
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	4603      	mov	r3, r0
 800875e:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00f      	beq.n	8008788 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800876c:	2b03      	cmp	r3, #3
 800876e:	d00b      	beq.n	8008788 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 8008774:	2b05      	cmp	r3, #5
 8008776:	d007      	beq.n	8008788 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800877c:	2b02      	cmp	r3, #2
 800877e:	d003      	beq.n	8008788 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 8008784:	2b06      	cmp	r3, #6
 8008786:	d101      	bne.n	800878c <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 800878c:	2300      	movs	r3, #0
    }
}
 800878e:	4618      	mov	r0, r3
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7f9b      	ldrb	r3, [r3, #30]
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
 80087bc:	e014      	b.n	80087e8 <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 80087be:	7bfa      	ldrb	r2, [r7, #15]
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	011b      	lsls	r3, r3, #4
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	440b      	add	r3, r1
 80087ca:	336c      	adds	r3, #108	@ 0x6c
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 80087d0:	7bfa      	ldrb	r2, [r7, #15]
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	440b      	add	r3, r1
 80087dc:	336a      	adds	r3, #106	@ 0x6a
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	3301      	adds	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0e7      	beq.n	80087be <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	335e      	adds	r3, #94	@ 0x5e
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f00a fc8e 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 80087fe:	4603      	mov	r3, r0
 8008800:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8008802:	89bb      	ldrh	r3, [r7, #12]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff ffa6 	bl	8008756 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02d      	beq.n	800886c <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008810:	89bb      	ldrh	r3, [r7, #12]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b03      	cmp	r3, #3
 8008816:	d106      	bne.n	8008826 <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7f9b      	ldrb	r3, [r3, #30]
 800881c:	f043 0301 	orr.w	r3, r3, #1
 8008820:	b2da      	uxtb	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800882e:	2107      	movs	r1, #7
 8008830:	4618      	mov	r0, r3
 8008832:	f004 fe01 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8008836:	4603      	mov	r3, r0
 8008838:	81bb      	strh	r3, [r7, #12]
 800883a:	89bb      	ldrh	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 8008840:	89bb      	ldrh	r3, [r7, #12]
 8008842:	e014      	b.n	800886e <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	4618      	mov	r0, r3
 800884a:	f00a fc75 	bl	8013138 <phpalI14443p3a_Sw_HaltA>
 800884e:	4603      	mov	r3, r0
 8008850:	81bb      	strh	r3, [r7, #12]
 8008852:	89bb      	ldrh	r3, [r7, #12]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b12      	cmp	r3, #18
 8008858:	d101      	bne.n	800885e <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 800885a:	89bb      	ldrh	r3, [r7, #12]
 800885c:	e007      	b.n	800886e <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8008866:	f244 0387 	movw	r3, #16519	@ 0x4087
 800886a:	e000      	b.n	800886e <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 800886c:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8008878:	b590      	push	{r4, r7, lr}
 800887a:	b08b      	sub	sp, #44	@ 0x2c
 800887c:	af02      	add	r7, sp, #8
 800887e:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 8008880:	2300      	movs	r3, #0
 8008882:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 8008884:	f107 030c 	add.w	r3, r7, #12
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 800889c:	2300      	movs	r3, #0
 800889e:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7f9b      	ldrb	r3, [r3, #30]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7a9b      	ldrb	r3, [r3, #10]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 80088bc:	f244 0385 	movw	r3, #16517	@ 0x4085
 80088c0:	e2d9      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	8a1b      	ldrh	r3, [r3, #16]
 80088ca:	461a      	mov	r2, r3
 80088cc:	2135      	movs	r1, #53	@ 0x35
 80088ce:	f004 fdb3 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80088d2:	4603      	mov	r3, r0
 80088d4:	83fb      	strh	r3, [r7, #30]
 80088d6:	8bfb      	ldrh	r3, [r7, #30]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 80088dc:	8bfb      	ldrh	r3, [r7, #30]
 80088de:	e2ca      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f004 f810 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 80088ec:	4603      	mov	r3, r0
 80088ee:	83fb      	strh	r3, [r7, #30]
 80088f0:	8bfb      	ldrh	r3, [r7, #30]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 80088f6:	8bfb      	ldrh	r3, [r7, #30]
 80088f8:	e2bd      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	335e      	adds	r3, #94	@ 0x5e
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f00a fc08 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 800890a:	4603      	mov	r3, r0
 800890c:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800890e:	8bfb      	ldrh	r3, [r7, #30]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b03      	cmp	r3, #3
 8008914:	d109      	bne.n	800892a <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800891c:	2b01      	cmp	r3, #1
 800891e:	d102      	bne.n	8008926 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008920:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008924:	e2a7      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 8008926:	2301      	movs	r3, #1
 8008928:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800893a:	8bfb      	ldrh	r3, [r7, #30]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d14a      	bne.n	80089d8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 809e 	bne.w	8008a8a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	2201      	movs	r2, #1
 8008954:	2120      	movs	r1, #32
 8008956:	4618      	mov	r0, r3
 8008958:	f004 fd6e 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800895c:	4603      	mov	r3, r0
 800895e:	83fb      	strh	r3, [r7, #30]
 8008960:	8bfb      	ldrh	r3, [r7, #30]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 8008966:	8bfb      	ldrh	r3, [r7, #30]
 8008968:	e285      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	336a      	adds	r3, #106	@ 0x6a
 800896e:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3360      	adds	r3, #96	@ 0x60
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4619      	mov	r1, r3
 800897c:	f003 faf9 	bl	800bf72 <phalT1T_Sw_ReadUID>
 8008980:	4603      	mov	r3, r0
 8008982:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008984:	8bfb      	ldrh	r3, [r7, #30]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d115      	bne.n	80089b8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7f9b      	ldrb	r3, [r3, #30]
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 80089b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80089b6:	e25e      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80089b8:	8bfb      	ldrh	r3, [r7, #30]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d109      	bne.n	80089d4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7f9b      	ldrb	r3, [r3, #30]
 80089c4:	f043 0301 	orr.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 80089ce:	f244 0381 	movw	r3, #16513	@ 0x4081
 80089d2:	e250      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 80089d4:	8bfb      	ldrh	r3, [r7, #30]
 80089d6:	e24e      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d010      	beq.n	8008a02 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7a9b      	ldrb	r3, [r3, #10]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10c      	bne.n	8008a02 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7f9b      	ldrb	r3, [r3, #30]
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	779a      	strb	r2, [r3, #30]
            return status;
 80089fe:	8bfb      	ldrh	r3, [r7, #30]
 8008a00:	e239      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d131      	bne.n	8008a70 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008a10:	e01b      	b.n	8008a4a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 8008a12:	7ebb      	ldrb	r3, [r7, #26]
 8008a14:	3301      	adds	r3, #1
 8008a16:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008a20:	2100      	movs	r1, #0
 8008a22:	4618      	mov	r0, r3
 8008a24:	f004 fc34 	bl	800d290 <phhalHw_Pn5180_Wait>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	83fb      	strh	r3, [r7, #30]
 8008a2c:	8bfb      	ldrh	r3, [r7, #30]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 8008a32:	8bfb      	ldrh	r3, [r7, #30]
 8008a34:	e21f      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	335e      	adds	r3, #94	@ 0x5e
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4610      	mov	r0, r2
 8008a42:	f00a fb6a 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 8008a46:	4603      	mov	r3, r0
 8008a48:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008a4a:	8bfb      	ldrh	r3, [r7, #30]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d102      	bne.n	8008a58 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 8008a52:	7ebb      	ldrb	r3, [r7, #26]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d9dc      	bls.n	8008a12 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7f9b      	ldrb	r3, [r3, #30]
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 8008a66:	8bfb      	ldrh	r3, [r7, #30]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00e      	beq.n	8008a8a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 8008a6c:	8bfb      	ldrh	r3, [r7, #30]
 8008a6e:	e202      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 8008a70:	8bfb      	ldrh	r3, [r7, #30]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d008      	beq.n	8008a8a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	7f9b      	ldrb	r3, [r3, #30]
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	779a      	strb	r2, [r3, #30]
                return status;
 8008a86:	8bfb      	ldrh	r3, [r7, #30]
 8008a88:	e1f5      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 81d9 	bne.w	8008e48 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7f9b      	ldrb	r3, [r3, #30]
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008aa4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008aa8:	e1e5      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7a9b      	ldrb	r3, [r3, #10]
 8008aae:	7f3a      	ldrb	r2, [r7, #28]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	f200 81c6 	bhi.w	8008e42 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7f9b      	ldrb	r3, [r3, #30]
 8008aba:	f023 0301 	bic.w	r3, r3, #1
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	76fb      	strb	r3, [r7, #27]
 8008ac8:	e13f      	b.n	8008d4a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 8008ace:	e0a8      	b.n	8008c22 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ad4:	7efb      	ldrb	r3, [r7, #27]
 8008ad6:	4a9a      	ldr	r2, [pc, #616]	@ (8008d40 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008ad8:	5cd1      	ldrb	r1, [r2, r3]
 8008ada:	7cfc      	ldrb	r4, [r7, #19]
 8008adc:	f107 020c 	add.w	r2, r7, #12
 8008ae0:	f107 0313 	add.w	r3, r7, #19
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f107 030c 	add.w	r3, r7, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4623      	mov	r3, r4
 8008aee:	f00a fb7a 	bl	80131e6 <phpalI14443p3a_Sw_Anticollision>
 8008af2:	4603      	mov	r3, r0
 8008af4:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d12e      	bne.n	8008b5e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008b04:	e024      	b.n	8008b50 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 8008b06:	7ebb      	ldrb	r3, [r7, #26]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f004 fbba 	bl	800d290 <phhalHw_Pn5180_Wait>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	83fb      	strh	r3, [r7, #30]
 8008b20:	8bfb      	ldrh	r3, [r7, #30]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 8008b26:	8bfb      	ldrh	r3, [r7, #30]
 8008b28:	e1a5      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008b2e:	7efb      	ldrb	r3, [r7, #27]
 8008b30:	4a83      	ldr	r2, [pc, #524]	@ (8008d40 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008b32:	5cd1      	ldrb	r1, [r2, r3]
 8008b34:	7cfc      	ldrb	r4, [r7, #19]
 8008b36:	f107 020c 	add.w	r2, r7, #12
 8008b3a:	f107 0313 	add.w	r3, r7, #19
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	f107 030c 	add.w	r3, r7, #12
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	4623      	mov	r3, r4
 8008b48:	f00a fb4d 	bl	80131e6 <phpalI14443p3a_Sw_Anticollision>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008b50:	8bfb      	ldrh	r3, [r7, #30]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d102      	bne.n	8008b5e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 8008b58:	7ebb      	ldrb	r3, [r7, #26]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d9d3      	bls.n	8008b06 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008b5e:	8bfb      	ldrh	r3, [r7, #30]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d158      	bne.n	8008c18 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d102      	bne.n	8008b76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008b70:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008b74:	e17f      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	7f9b      	ldrb	r3, [r3, #30]
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7a9b      	ldrb	r3, [r3, #10]
 8008b88:	7f3a      	ldrb	r2, [r7, #28]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d301      	bcc.n	8008b92 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e171      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 8008b92:	7cfb      	ldrb	r3, [r7, #19]
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	2b06      	cmp	r3, #6
 8008b9a:	dc1d      	bgt.n	8008bd8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 8008b9c:	7cfb      	ldrb	r3, [r7, #19]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 8008ba4:	7cfb      	ldrb	r3, [r7, #19]
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	3320      	adds	r3, #32
 8008bac:	443b      	add	r3, r7
 8008bae:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8008bb2:	7cfb      	ldrb	r3, [r7, #19]
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2101      	movs	r1, #1
 8008bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	7cf9      	ldrb	r1, [r7, #19]
 8008bc4:	0909      	lsrs	r1, r1, #4
 8008bc6:	b2c9      	uxtb	r1, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	f101 0320 	add.w	r3, r1, #32
 8008bd0:	443b      	add	r3, r7
 8008bd2:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008bd6:	e024      	b.n	8008c22 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 8008bd8:	7cfb      	ldrb	r3, [r7, #19]
 8008bda:	091b      	lsrs	r3, r3, #4
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	3301      	adds	r3, #1
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 8008be8:	7cfb      	ldrb	r3, [r7, #19]
 8008bea:	091b      	lsrs	r3, r3, #4
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	3320      	adds	r3, #32
 8008bf4:	443b      	add	r3, r7
 8008bf6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8008bfa:	7cfa      	ldrb	r2, [r7, #19]
 8008bfc:	0912      	lsrs	r2, r2, #4
 8008bfe:	b2d2      	uxtb	r2, r2
 8008c00:	3a01      	subs	r2, #1
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	4611      	mov	r1, r2
 8008c06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	f101 0320 	add.w	r3, r1, #32
 8008c10:	443b      	add	r3, r7
 8008c12:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008c16:	e004      	b.n	8008c22 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 8008c18:	8bfb      	ldrh	r3, [r7, #30]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 8008c1e:	8bfb      	ldrh	r3, [r7, #30]
 8008c20:	e129      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	2b40      	cmp	r3, #64	@ 0x40
 8008c26:	f47f af53 	bne.w	8008ad0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 8008c2a:	7e7b      	ldrb	r3, [r7, #25]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d12d      	bne.n	8008c8c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7f9b      	ldrb	r3, [r3, #30]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d127      	bne.n	8008c8c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 8008c3c:	7f3a      	ldrb	r2, [r7, #28]
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4613      	mov	r3, r2
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	440b      	add	r3, r1
 8008c48:	335e      	adds	r3, #94	@ 0x5e
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 8008c54:	7efb      	ldrb	r3, [r7, #27]
 8008c56:	4a3a      	ldr	r2, [pc, #232]	@ (8008d40 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c58:	5cd3      	ldrb	r3, [r2, r3]
 8008c5a:	2b93      	cmp	r3, #147	@ 0x93
 8008c5c:	d010      	beq.n	8008c80 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 8008c5e:	7f3a      	ldrb	r2, [r7, #28]
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	1a9b      	subs	r3, r3, r2
 8008c68:	440b      	add	r3, r1
 8008c6a:	335e      	adds	r3, #94	@ 0x5e
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c72:	2b40      	cmp	r3, #64	@ 0x40
 8008c74:	d10a      	bne.n	8008c8c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 8008c76:	7efb      	ldrb	r3, [r7, #27]
 8008c78:	4a31      	ldr	r2, [pc, #196]	@ (8008d40 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c7a:	5cd3      	ldrb	r3, [r2, r3]
 8008c7c:	2b95      	cmp	r3, #149	@ 0x95
 8008c7e:	d105      	bne.n	8008c8c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 8008c80:	7b3b      	ldrb	r3, [r7, #12]
 8008c82:	2b88      	cmp	r3, #136	@ 0x88
 8008c84:	d102      	bne.n	8008c8c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 8008c86:	f244 0306 	movw	r3, #16390	@ 0x4006
 8008c8a:	e0f4      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008c90:	7efb      	ldrb	r3, [r7, #27]
 8008c92:	4a2b      	ldr	r2, [pc, #172]	@ (8008d40 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c94:	5cd1      	ldrb	r1, [r2, r3]
 8008c96:	7f3a      	ldrb	r2, [r7, #28]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	3360      	adds	r3, #96	@ 0x60
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	330b      	adds	r3, #11
 8008ca6:	f107 020c 	add.w	r2, r7, #12
 8008caa:	f00a fcd3 	bl	8013654 <phpalI14443p3a_Sw_Select>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d12e      	bne.n	8008d1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008cc0:	e024      	b.n	8008d0c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 8008cc2:	7ebb      	ldrb	r3, [r7, #26]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ccc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f004 fadc 	bl	800d290 <phhalHw_Pn5180_Wait>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	83fb      	strh	r3, [r7, #30]
 8008cdc:	8bfb      	ldrh	r3, [r7, #30]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 8008ce2:	8bfb      	ldrh	r3, [r7, #30]
 8008ce4:	e0c7      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008cea:	7efb      	ldrb	r3, [r7, #27]
 8008cec:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008cee:	5cd1      	ldrb	r1, [r2, r3]
 8008cf0:	7f3a      	ldrb	r2, [r7, #28]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	3360      	adds	r3, #96	@ 0x60
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	330b      	adds	r3, #11
 8008d00:	f107 020c 	add.w	r2, r7, #12
 8008d04:	f00a fca6 	bl	8013654 <phpalI14443p3a_Sw_Select>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008d0c:	8bfb      	ldrh	r3, [r7, #30]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d102      	bne.n	8008d1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 8008d14:	7ebb      	ldrb	r3, [r7, #26]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d9d3      	bls.n	8008cc2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008d1a:	8bfb      	ldrh	r3, [r7, #30]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10c      	bne.n	8008d3c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 8008d22:	7f3a      	ldrb	r2, [r7, #28]
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	336b      	adds	r3, #107	@ 0x6b
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 8008d3a:	e00a      	b.n	8008d52 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 8008d3c:	8bfb      	ldrh	r3, [r7, #30]
 8008d3e:	e09a      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 8008d40:	080205b4 	.word	0x080205b4
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 8008d44:	7efb      	ldrb	r3, [r7, #27]
 8008d46:	3301      	adds	r3, #1
 8008d48:	76fb      	strb	r3, [r7, #27]
 8008d4a:	7efb      	ldrb	r3, [r7, #27]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	f67f aebc 	bls.w	8008aca <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 8008d52:	8bfb      	ldrh	r3, [r7, #30]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d174      	bne.n	8008e42 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d5c:	7f3a      	ldrb	r2, [r7, #28]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	3358      	adds	r3, #88	@ 0x58
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f103 0108 	add.w	r1, r3, #8
 8008d6e:	7f3a      	ldrb	r2, [r7, #28]
 8008d70:	4613      	mov	r3, r2
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	3360      	adds	r3, #96	@ 0x60
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	330a      	adds	r3, #10
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f00a ff39 	bl	8013bf6 <phpalI14443p3a_Sw_GetSerialNo>
 8008d84:	4603      	mov	r3, r0
 8008d86:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 8008d88:	8bfb      	ldrh	r3, [r7, #30]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 8008d8e:	8bfb      	ldrh	r3, [r7, #30]
 8008d90:	e071      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 8008d92:	7f3b      	ldrb	r3, [r7, #28]
 8008d94:	3301      	adds	r3, #1
 8008d96:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	7f9b      	ldrb	r3, [r3, #30]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d057      	beq.n	8008e54 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7a9b      	ldrb	r3, [r3, #10]
 8008da8:	7f3a      	ldrb	r2, [r7, #28]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d252      	bcs.n	8008e54 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	4618      	mov	r0, r3
 8008db4:	f00a f9c0 	bl	8013138 <phpalI14443p3a_Sw_HaltA>
 8008db8:	4603      	mov	r3, r0
 8008dba:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 8008dbc:	8bfb      	ldrh	r3, [r7, #30]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 8008dc2:	8bfb      	ldrh	r3, [r7, #30]
 8008dc4:	e057      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 8008dc6:	7f3b      	ldrb	r3, [r7, #28]
 8008dc8:	1e5a      	subs	r2, r3, #1
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	336c      	adds	r3, #108	@ 0x6c
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008dde:	7f3a      	ldrb	r2, [r7, #28]
 8008de0:	4613      	mov	r3, r2
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	3358      	adds	r3, #88	@ 0x58
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	3306      	adds	r3, #6
 8008dee:	4619      	mov	r1, r3
 8008df0:	f00a f984 	bl	80130fc <phpalI14443p3a_Sw_RequestA>
 8008df4:	4603      	mov	r3, r0
 8008df6:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008df8:	8bfb      	ldrh	r3, [r7, #30]
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d112      	bne.n	8008e26 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 8008e00:	7f3a      	ldrb	r2, [r7, #28]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	335e      	adds	r3, #94	@ 0x5e
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d116      	bne.n	8008e42 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7f9b      	ldrb	r3, [r3, #30]
 8008e18:	f043 0301 	orr.w	r3, r3, #1
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e027      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008e26:	8bfb      	ldrh	r3, [r7, #30]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d107      	bne.n	8008e3e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7f9b      	ldrb	r3, [r3, #30]
 8008e32:	f043 0301 	orr.w	r3, r3, #1
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	779a      	strb	r2, [r3, #30]
 8008e3c:	e001      	b.n	8008e42 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 8008e3e:	8bfb      	ldrh	r3, [r7, #30]
 8008e40:	e019      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 8008e42:	7f7b      	ldrb	r3, [r7, #29]
 8008e44:	3301      	adds	r3, #1
 8008e46:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7a9b      	ldrb	r3, [r3, #10]
 8008e4c:	7f7a      	ldrb	r2, [r7, #29]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	f67f ae2b 	bls.w	8008aaa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7f3a      	ldrb	r2, [r7, #28]
 8008e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7f3a      	ldrb	r2, [r7, #28]
 8008e60:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8008e6e:	f244 0385 	movw	r3, #16517	@ 0x4085
 8008e72:	e000      	b.n	8008e76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 8008e74:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3724      	adds	r7, #36	@ 0x24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd90      	pop	{r4, r7, pc}
 8008e7e:	bf00      	nop

08008e80 <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 8008e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e82:	b08f      	sub	sp, #60	@ 0x3c
 8008e84:	af04      	add	r7, sp, #16
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d202      	bcs.n	8008ea8 <phacDiscLoop_Sw_Int_ActivateA+0x28>
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <phacDiscLoop_Sw_Int_ActivateA+0x2e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008ea8:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008eac:	e1d1      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d902      	bls.n	8008ebe <phacDiscLoop_Sw_Int_ActivateA+0x3e>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 8008eb8:	f244 037f 	movw	r3, #16511	@ 0x407f
 8008ebc:	e1c9      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 8008ebe:	78fa      	ldrb	r2, [r7, #3]
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	1a9b      	subs	r3, r3, r2
 8008ec8:	440b      	add	r3, r1
 8008eca:	336c      	adds	r3, #108	@ 0x6c
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d175      	bne.n	8008fbe <phacDiscLoop_Sw_Int_ActivateA+0x13e>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ed8:	e021      	b.n	8008f1e <phacDiscLoop_Sw_Int_ActivateA+0x9e>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 8008eda:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	336c      	adds	r3, #108	@ 0x6c
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d111      	bne.n	8008f14 <phacDiscLoop_Sw_Int_ActivateA+0x94>
 8008ef0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d00c      	beq.n	8008f14 <phacDiscLoop_Sw_Int_ActivateA+0x94>
            {
                bActiveDevice = 1;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 8008f00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	336c      	adds	r3, #108	@ 0x6c
 8008f10:	2201      	movs	r2, #1
 8008f12:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 8008f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008f24:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3d6      	bcc.n	8008eda <phacDiscLoop_Sw_Int_ActivateA+0x5a>
            }
        }
        if (bActiveDevice != 0U)
 8008f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <phacDiscLoop_Sw_Int_ActivateA+0xcc>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f00a f8fd 	bl	8013138 <phpalI14443p3a_Sw_HaltA>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 8008f42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <phacDiscLoop_Sw_Int_ActivateA+0xcc>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 8008f48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f4a:	e182      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	4613      	mov	r3, r2
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	3358      	adds	r3, #88	@ 0x58
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f103 0408 	add.w	r4, r3, #8
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	1a9b      	subs	r3, r3, r2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	336a      	adds	r3, #106	@ 0x6a
 8008f70:	7819      	ldrb	r1, [r3, #0]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	4613      	mov	r3, r2
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	3360      	adds	r3, #96	@ 0x60
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	330b      	adds	r3, #11
 8008f82:	f107 0518 	add.w	r5, r7, #24
 8008f86:	f107 0216 	add.w	r2, r7, #22
 8008f8a:	9202      	str	r2, [sp, #8]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	f107 0317 	add.w	r3, r7, #23
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	462b      	mov	r3, r5
 8008f96:	460a      	mov	r2, r1
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f00a fb73 	bl	8013684 <phpalI14443p3a_Sw_ActivateCard>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008fa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <phacDiscLoop_Sw_Int_ActivateA+0x12c>
 8008fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008faa:	e152      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	336c      	adds	r3, #108	@ 0x6c
 8008fba:	2200      	movs	r2, #0
 8008fbc:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	1a9b      	subs	r3, r3, r2
 8008fc8:	440b      	add	r3, r1
 8008fca:	336b      	adds	r3, #107	@ 0x6b
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 8008fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 8008fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f040 809f 	bne.w	8009128 <phacDiscLoop_Sw_Int_ActivateA+0x2a8>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	2201      	movs	r2, #1
 8008ff0:	215e      	movs	r1, #94	@ 0x5e
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f004 fa20 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <phacDiscLoop_Sw_Int_ActivateA+0x186>
 8009002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009004:	e125      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 4071 	ldrb.w	r4, [r3, #113]	@ 0x71
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 5073 	ldrb.w	r5, [r3, #115]	@ 0x73
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8009026:	9201      	str	r2, [sp, #4]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	462b      	mov	r3, r5
 800902c:	4622      	mov	r2, r4
 800902e:	f00c f9e3 	bl	80153f8 <phpalI14443p4a_Sw_ActivateCard>
 8009032:	4603      	mov	r3, r0
 8009034:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <phacDiscLoop_Sw_Int_ActivateA+0x1c0>
 800903c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800903e:	e108      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009046:	2b01      	cmp	r3, #1
 8009048:	d027      	beq.n	800909a <phacDiscLoop_Sw_Int_ActivateA+0x21a>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904e:	f107 020e 	add.w	r2, r7, #14
 8009052:	2103      	movs	r1, #3
 8009054:	4618      	mov	r0, r3
 8009056:	f00b fded 	bl	8014c34 <phpalI14443p4a_Sw_GetConfig>
 800905a:	4603      	mov	r3, r0
 800905c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800905e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <phacDiscLoop_Sw_Int_ActivateA+0x1e8>
 8009064:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009066:	e0f4      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 8009068:	89fb      	ldrh	r3, [r7, #14]
 800906a:	b2da      	uxtb	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009076:	f107 020e 	add.w	r2, r7, #14
 800907a:	2104      	movs	r1, #4
 800907c:	4618      	mov	r0, r3
 800907e:	f00b fdd9 	bl	8014c34 <phpalI14443p4a_Sw_GetConfig>
 8009082:	4603      	mov	r3, r0
 8009084:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <phacDiscLoop_Sw_Int_ActivateA+0x210>
 800908c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800908e:	e0e0      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800909e:	f107 0413 	add.w	r4, r7, #19
 80090a2:	f107 0214 	add.w	r2, r7, #20
 80090a6:	f107 0115 	add.w	r1, r7, #21
 80090aa:	f107 0310 	add.w	r3, r7, #16
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	f107 0311 	add.w	r3, r7, #17
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	f107 0312 	add.w	r3, r7, #18
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4623      	mov	r3, r4
 80090be:	f00c fa53 	bl	8015568 <phpalI14443p4a_Sw_GetProtocolParams>
 80090c2:	4603      	mov	r3, r0
 80090c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80090c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <phacDiscLoop_Sw_Int_ActivateA+0x250>
 80090cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090ce:	e0c0      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d109      	bne.n	80090ee <phacDiscLoop_Sw_Int_ActivateA+0x26e>
        {
            if (bFsci > pDataParams->bFsciMax)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80090e0:	7c3b      	ldrb	r3, [r7, #16]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d203      	bcs.n	80090ee <phacDiscLoop_Sw_Int_ActivateA+0x26e>
            {
                bFsci = pDataParams->bFsciMax;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80090ec:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80090f2:	7d7d      	ldrb	r5, [r7, #21]
 80090f4:	7d3e      	ldrb	r6, [r7, #20]
 80090f6:	f897 c013 	ldrb.w	ip, [r7, #19]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8009100:	7cba      	ldrb	r2, [r7, #18]
 8009102:	7c79      	ldrb	r1, [r7, #17]
 8009104:	7c38      	ldrb	r0, [r7, #16]
 8009106:	9003      	str	r0, [sp, #12]
 8009108:	9102      	str	r1, [sp, #8]
 800910a:	9201      	str	r2, [sp, #4]
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4663      	mov	r3, ip
 8009110:	4632      	mov	r2, r6
 8009112:	4629      	mov	r1, r5
 8009114:	4620      	mov	r0, r4
 8009116:	f00b fc28 	bl	801496a <phpalI14443p4_Sw_SetProtocol>
 800911a:	4603      	mov	r3, r0
 800911c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800911e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <phacDiscLoop_Sw_Int_ActivateA+0x2a8>
 8009124:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009126:	e094      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 8009128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800912c:	2b02      	cmp	r3, #2
 800912e:	d10a      	bne.n	8009146 <phacDiscLoop_Sw_Int_ActivateA+0x2c6>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009136:	2b01      	cmp	r3, #1
 8009138:	d102      	bne.n	8009140 <phacDiscLoop_Sw_Int_ActivateA+0x2c0>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800913a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800913e:	e088      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009140:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009144:	e085      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 8009146:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800914a:	2b03      	cmp	r3, #3
 800914c:	d174      	bne.n	8009238 <phacDiscLoop_Sw_Int_ActivateA+0x3b8>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009154:	2b01      	cmp	r3, #1
 8009156:	d16c      	bne.n	8009232 <phacDiscLoop_Sw_Int_ActivateA+0x3b2>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	2201      	movs	r2, #1
 800915e:	215e      	movs	r1, #94	@ 0x5e
 8009160:	4618      	mov	r0, r3
 8009162:	f004 f969 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8009166:	4603      	mov	r3, r0
 8009168:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800916a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <phacDiscLoop_Sw_Int_ActivateA+0x2f4>
 8009170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009172:	e06e      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 4071 	ldrb.w	r4, [r3, #113]	@ 0x71
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 5073 	ldrb.w	r5, [r3, #115]	@ 0x73
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8009194:	9201      	str	r2, [sp, #4]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	462b      	mov	r3, r5
 800919a:	4622      	mov	r2, r4
 800919c:	f00c f92c 	bl	80153f8 <phpalI14443p4a_Sw_ActivateCard>
 80091a0:	4603      	mov	r3, r0
 80091a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80091a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <phacDiscLoop_Sw_Int_ActivateA+0x32e>
 80091aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091ac:	e051      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80091b2:	f107 0413 	add.w	r4, r7, #19
 80091b6:	f107 0214 	add.w	r2, r7, #20
 80091ba:	f107 0115 	add.w	r1, r7, #21
 80091be:	f107 0310 	add.w	r3, r7, #16
 80091c2:	9302      	str	r3, [sp, #8]
 80091c4:	f107 0311 	add.w	r3, r7, #17
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	f107 0312 	add.w	r3, r7, #18
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4623      	mov	r3, r4
 80091d2:	f00c f9c9 	bl	8015568 <phpalI14443p4a_Sw_GetProtocolParams>
 80091d6:	4603      	mov	r3, r0
 80091d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80091da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <phacDiscLoop_Sw_Int_ActivateA+0x364>
 80091e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091e2:	e036      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80091ea:	7c3b      	ldrb	r3, [r7, #16]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d203      	bcs.n	80091f8 <phacDiscLoop_Sw_Int_ActivateA+0x378>
            {
                bFsci = pDataParams->bFsciMax;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80091f6:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80091fc:	7d7d      	ldrb	r5, [r7, #21]
 80091fe:	7d3e      	ldrb	r6, [r7, #20]
 8009200:	f897 c013 	ldrb.w	ip, [r7, #19]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800920a:	7cba      	ldrb	r2, [r7, #18]
 800920c:	7c79      	ldrb	r1, [r7, #17]
 800920e:	7c38      	ldrb	r0, [r7, #16]
 8009210:	9003      	str	r0, [sp, #12]
 8009212:	9102      	str	r1, [sp, #8]
 8009214:	9201      	str	r2, [sp, #4]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4663      	mov	r3, ip
 800921a:	4632      	mov	r2, r6
 800921c:	4629      	mov	r1, r5
 800921e:	4620      	mov	r0, r4
 8009220:	f00b fba3 	bl	801496a <phpalI14443p4_Sw_SetProtocol>
 8009224:	4603      	mov	r3, r0
 8009226:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <phacDiscLoop_Sw_Int_ActivateA+0x3b8>
 800922e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009230:	e00f      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 8009232:	f244 038e 	movw	r3, #16526	@ 0x408e
 8009236:	e00c      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8009238:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800923c:	2b00      	cmp	r3, #0
 800923e:	d107      	bne.n	8009250 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009246:	2b01      	cmp	r3, #1
 8009248:	d102      	bne.n	8009250 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800924a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800924e:	e000      	b.n	8009252 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    return PH_ERR_SUCCESS;
 8009250:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 8009252:	4618      	mov	r0, r3
 8009254:	372c      	adds	r7, #44	@ 0x2c
 8009256:	46bd      	mov	sp, r7
 8009258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800925a <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800925a:	b590      	push	{r4, r7, lr}
 800925c:	b087      	sub	sp, #28
 800925e:	af02      	add	r7, sp, #8
 8009260:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	7f9b      	ldrb	r3, [r3, #30]
 8009276:	f023 0302 	bic.w	r3, r3, #2
 800927a:	b2da      	uxtb	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e00c      	b.n	80092a0 <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 8009286:	7bfa      	ldrb	r2, [r7, #15]
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	33b1      	adds	r3, #177	@ 0xb1
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	3301      	adds	r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0ef      	beq.n	8009286 <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 1096 	ldrb.w	r1, [r3, #150]	@ 0x96
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 4097 	ldrb.w	r4, [r3, #151]	@ 0x97
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	33a2      	adds	r3, #162	@ 0xa2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	32af      	adds	r2, #175	@ 0xaf
 80092be:	9201      	str	r2, [sp, #4]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4623      	mov	r3, r4
 80092c4:	460a      	mov	r2, r1
 80092c6:	2100      	movs	r1, #0
 80092c8:	f00a fdb9 	bl	8013e3e <phpalI14443p3b_Sw_WakeUpB>
 80092cc:	4603      	mov	r3, r0
 80092ce:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 80092d0:	89bb      	ldrh	r3, [r7, #12]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fa3f 	bl	8008756 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d015      	beq.n	800930a <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80092de:	89bb      	ldrh	r3, [r7, #12]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d006      	beq.n	80092f4 <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7f9b      	ldrb	r3, [r3, #30]
 80092ea:	f043 0302 	orr.w	r3, r3, #2
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80092fa:	3301      	adds	r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009304:	f244 0387 	movw	r3, #16519	@ 0x4087
 8009308:	e000      	b.n	800930c <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 800930a:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bd90      	pop	{r4, r7, pc}

08009314 <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8009314:	b5b0      	push	{r4, r5, r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af02      	add	r7, sp, #8
 800931a:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800931c:	2300      	movs	r3, #0
 800931e:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7f9b      	ldrb	r3, [r3, #30]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	7adb      	ldrb	r3, [r3, #11]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800933c:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009340:	e1e3      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    bRetryCount = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	8a5b      	ldrh	r3, [r3, #18]
 8009352:	461a      	mov	r2, r3
 8009354:	2135      	movs	r1, #53	@ 0x35
 8009356:	f004 f86f 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800935a:	4603      	mov	r3, r0
 800935c:	81fb      	strh	r3, [r7, #14]
 800935e:	89fb      	ldrh	r3, [r7, #14]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	e1d0      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936c:	2102      	movs	r1, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f003 facc 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009374:	4603      	mov	r3, r0
 8009376:	81fb      	strh	r3, [r7, #14]
 8009378:	89fb      	ldrh	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 800937e:	89fb      	ldrh	r3, [r7, #14]
 8009380:	e1c3      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	33a2      	adds	r3, #162	@ 0xa2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	32af      	adds	r2, #175	@ 0xaf
 800939a:	7ab9      	ldrb	r1, [r7, #10]
 800939c:	9201      	str	r2, [sp, #4]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	462b      	mov	r3, r5
 80093a2:	4622      	mov	r2, r4
 80093a4:	f00a fd4b 	bl	8013e3e <phpalI14443p3b_Sw_WakeUpB>
 80093a8:	4603      	mov	r3, r0
 80093aa:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 8197 	beq.w	80096e4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d148      	bne.n	8009452 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d130      	bne.n	800942a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7f9b      	ldrb	r3, [r3, #30]
 80093cc:	f023 0302 	bic.w	r3, r3, #2
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 80093d6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80093da:	e196      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 80093dc:	7a7b      	ldrb	r3, [r7, #9]
 80093de:	3301      	adds	r3, #1
 80093e0:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f003 ff4f 	bl	800d290 <phhalHw_Pn5180_Wait>
 80093f2:	4603      	mov	r3, r0
 80093f4:	81fb      	strh	r3, [r7, #14]
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 80093fc:	89fb      	ldrh	r3, [r7, #14]
 80093fe:	e184      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	33a2      	adds	r3, #162	@ 0xa2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	32af      	adds	r2, #175	@ 0xaf
 8009418:	7ab9      	ldrb	r1, [r7, #10]
 800941a:	9201      	str	r2, [sp, #4]
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	462b      	mov	r3, r5
 8009420:	4622      	mov	r2, r4
 8009422:	f00a fd0c 	bl	8013e3e <phpalI14443p3b_Sw_WakeUpB>
 8009426:	4603      	mov	r3, r0
 8009428:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800942a:	89fb      	ldrh	r3, [r7, #14]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b01      	cmp	r3, #1
 8009430:	d102      	bne.n	8009438 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 8009432:	7a7b      	ldrb	r3, [r7, #9]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d9d1      	bls.n	80093dc <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7f9b      	ldrb	r3, [r3, #30]
 800943c:	f023 0302 	bic.w	r3, r3, #2
 8009440:	b2da      	uxtb	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 814b 	beq.w	80096e4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
 800944e:	89fb      	ldrh	r3, [r7, #14]
 8009450:	e15b      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 800945a:	89fb      	ldrh	r3, [r7, #14]
 800945c:	e155      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7adb      	ldrb	r3, [r3, #11]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 813e 	bne.w	80096e4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7f9b      	ldrb	r3, [r3, #30]
 8009474:	f043 0302 	orr.w	r3, r3, #2
 8009478:	b2da      	uxtb	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	779a      	strb	r2, [r3, #30]
                    return status;
 800947e:	89fb      	ldrh	r3, [r7, #14]
 8009480:	e143      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7f9b      	ldrb	r3, [r3, #30]
 800949a:	f023 0302 	bic.w	r3, r3, #2
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 80094a4:	e11a      	b.n	80096dc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 80094a6:	89fb      	ldrh	r3, [r7, #14]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d060      	beq.n	8009570 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 80094ae:	89fb      	ldrh	r3, [r7, #14]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d156      	bne.n	8009562 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 80094b4:	7b3b      	ldrb	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01f      	beq.n	80094fa <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	3398      	adds	r3, #152	@ 0x98
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	3306      	adds	r3, #6
 80094d6:	4619      	mov	r1, r3
 80094d8:	f00b fa0a 	bl	80148f0 <phpalI14443p3b_Sw_SetSerialNo>
 80094dc:	4603      	mov	r3, r0
 80094de:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e4:	4618      	mov	r0, r3
 80094e6:	f00a fd09 	bl	8013efc <phpalI14443p3b_Sw_HaltB>
 80094ea:	4603      	mov	r3, r0
 80094ec:	81fb      	strh	r3, [r7, #14]
 80094ee:	89fb      	ldrh	r3, [r7, #14]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b12      	cmp	r3, #18
 80094f4:	d101      	bne.n	80094fa <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 80094f6:	89fb      	ldrh	r3, [r7, #14]
 80094f8:	e107      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009500:	461a      	mov	r2, r3
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	3398      	adds	r3, #152	@ 0x98
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4413      	add	r3, r2
 8009510:	1d9a      	adds	r2, r3, #6
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009518:	4619      	mov	r1, r3
 800951a:	460b      	mov	r3, r1
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	440b      	add	r3, r1
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	3399      	adds	r3, #153	@ 0x99
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	440b      	add	r3, r1
 8009528:	330a      	adds	r3, #10
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009534:	3301      	adds	r3, #1
 8009536:	b2da      	uxtb	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
                    bCurrentDeviceCount++;
 800953e:	7b3b      	ldrb	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7adb      	ldrb	r3, [r3, #11]
 800954e:	429a      	cmp	r2, r3
 8009550:	d30e      	bcc.n	8009570 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 800955e:	2300      	movs	r3, #0
 8009560:	e0d3      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	7f9b      	ldrb	r3, [r3, #30]
 8009566:	f043 0302 	orr.w	r3, r3, #2
 800956a:	b2da      	uxtb	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 8009570:	7b7b      	ldrb	r3, [r7, #13]
 8009572:	3301      	adds	r3, #1
 8009574:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 8009576:	7b7a      	ldrb	r2, [r7, #13]
 8009578:	7abb      	ldrb	r3, [r7, #10]
 800957a:	2101      	movs	r1, #1
 800957c:	fa01 f303 	lsl.w	r3, r1, r3
 8009580:	429a      	cmp	r2, r3
 8009582:	da29      	bge.n	80095d8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c4>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009588:	7b7b      	ldrb	r3, [r7, #13]
 800958a:	3301      	adds	r3, #1
 800958c:	b2d9      	uxtb	r1, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009594:	461a      	mov	r2, r3
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	3398      	adds	r3, #152	@ 0x98
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	4413      	add	r3, r2
 80095a4:	f103 040a 	add.w	r4, r3, #10
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80095ae:	461a      	mov	r2, r3
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	33a8      	adds	r3, #168	@ 0xa8
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	3307      	adds	r3, #7
 80095c0:	4622      	mov	r2, r4
 80095c2:	f00a fc5b 	bl	8013e7c <phpalI14443p3b_Sw_SlotMarker>
 80095c6:	4603      	mov	r3, r0
 80095c8:	81fb      	strh	r3, [r7, #14]
 80095ca:	89fb      	ldrh	r3, [r7, #14]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b12      	cmp	r3, #18
 80095d0:	f040 8084 	bne.w	80096dc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
 80095d4:	89fb      	ldrh	r3, [r7, #14]
 80095d6:	e098      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 80095d8:	2301      	movs	r3, #1
 80095da:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7f9b      	ldrb	r3, [r3, #30]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d069      	beq.n	80096bc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a8>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00e      	beq.n	8009610 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fc>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7adb      	ldrb	r3, [r3, #11]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d31d      	bcc.n	800963c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x328>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 800960c:	2300      	movs	r3, #0
 800960e:	e07c      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 8009610:	7abb      	ldrb	r3, [r7, #10]
 8009612:	2b04      	cmp	r3, #4
 8009614:	d10f      	bne.n	8009636 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x322>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31e>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800962c:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009630:	e06b      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                            }

                            return PH_ERR_SUCCESS;
 8009632:	2300      	movs	r3, #0
 8009634:	e069      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 8009636:	7abb      	ldrb	r3, [r7, #10]
 8009638:	3301      	adds	r3, #1
 800963a:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 800963c:	7b3b      	ldrb	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00c      	beq.n	800965c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x348>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009646:	4618      	mov	r0, r3
 8009648:	f00a fc58 	bl	8013efc <phpalI14443p3b_Sw_HaltB>
 800964c:	4603      	mov	r3, r0
 800964e:	81fb      	strh	r3, [r7, #14]
 8009650:	89fb      	ldrh	r3, [r7, #14]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b12      	cmp	r3, #18
 8009656:	d101      	bne.n	800965c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x348>
 8009658:	89fb      	ldrh	r3, [r7, #14]
 800965a:	e056      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009672:	461a      	mov	r2, r3
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	3398      	adds	r3, #152	@ 0x98
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	f103 020a 	add.w	r2, r3, #10
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800968c:	4619      	mov	r1, r3
 800968e:	460b      	mov	r3, r1
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	33a8      	adds	r3, #168	@ 0xa8
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	440b      	add	r3, r1
 800969c:	3307      	adds	r3, #7
 800969e:	7ab9      	ldrb	r1, [r7, #10]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	9200      	str	r2, [sp, #0]
 80096a4:	462b      	mov	r3, r5
 80096a6:	4622      	mov	r2, r4
 80096a8:	f00a fbaa 	bl	8013e00 <phpalI14443p3b_Sw_RequestB>
 80096ac:	4603      	mov	r3, r0
 80096ae:	81fb      	strh	r3, [r7, #14]
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b12      	cmp	r3, #18
 80096b6:	d111      	bne.n	80096dc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
 80096b8:	89fb      	ldrh	r3, [r7, #14]
 80096ba:	e026      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 80096d2:	f244 0385 	movw	r3, #16517	@ 0x4085
 80096d6:	e018      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }
                    return PH_ERR_SUCCESS;
 80096d8:	2300      	movs	r3, #0
 80096da:	e016      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        while(0U == bLastSlotReached)
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f43f aee1 	beq.w	80094a6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 80096e4:	7abb      	ldrb	r3, [r7, #10]
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	f67f aecb 	bls.w	8009482 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f4>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 8009702:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009706:	e000      	b.n	800970a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    return PH_ERR_SUCCESS;
 8009708:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bdb0      	pop	{r4, r5, r7, pc}

08009712 <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 8009712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009714:	b08f      	sub	sp, #60	@ 0x3c
 8009716:	af04      	add	r7, sp, #16
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800971e:	2300      	movs	r3, #0
 8009720:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	429a      	cmp	r2, r3
 800972c:	d302      	bcc.n	8009734 <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800972e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009732:	e1bb      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800973c:	3b01      	subs	r3, #1
 800973e:	429a      	cmp	r2, r3
 8009740:	db0a      	blt.n	8009758 <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	33b1      	adds	r3, #177	@ 0xb1
 8009752:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 8009754:	2b01      	cmp	r3, #1
 8009756:	d119      	bne.n	800978c <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 2096 	ldrb.w	r2, [r3, #150]	@ 0x96
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 1097 	ldrb.w	r1, [r3, #151]	@ 0x97
 8009768:	f107 0320 	add.w	r3, r7, #32
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	f107 0310 	add.w	r3, r7, #16
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	460b      	mov	r3, r1
 8009776:	2100      	movs	r1, #0
 8009778:	f00a fb61 	bl	8013e3e <phpalI14443p3b_Sw_WakeUpB>
 800977c:	4603      	mov	r3, r0
 800977e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009780:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b12      	cmp	r3, #18
 8009786:	d101      	bne.n	800978c <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 8009788:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800978a:	e18f      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	2201      	movs	r2, #1
 8009792:	215e      	movs	r1, #94	@ 0x5e
 8009794:	4618      	mov	r0, r3
 8009796:	f003 fe4f 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800979a:	4603      	mov	r3, r0
 800979c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800979e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <phacDiscLoop_Sw_Int_ActivateB+0x96>
 80097a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097a6:	e181      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	33b0      	adds	r3, #176	@ 0xb0
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	33ac      	adds	r3, #172	@ 0xac
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 80097d6:	78fa      	ldrb	r2, [r7, #3]
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	33b0      	adds	r3, #176	@ 0xb0
 80097e6:	2201      	movs	r2, #1
 80097e8:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d004      	beq.n	80097fe <phacDiscLoop_Sw_Int_ActivateB+0xec>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d10c      	bne.n	8009818 <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	440b      	add	r3, r1
 800980c:	33b0      	adds	r3, #176	@ 0xb0
 800980e:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 8009814:	2300      	movs	r3, #0
 8009816:	e149      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	33ab      	adds	r3, #171	@ 0xab
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009834:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800983e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 8009842:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <phacDiscLoop_Sw_Int_ActivateB+0x142>
 800984a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 8081 	beq.w	8009956 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 8009854:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009858:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800985c:	2b00      	cmp	r3, #0
 800985e:	d17a      	bne.n	8009956 <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 8009860:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 800986c:	2303      	movs	r3, #3
 800986e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009872:	e016      	b.n	80098a2 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 8009874:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 8009880:	2302      	movs	r3, #2
 8009882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009886:	e00c      	b.n	80098a2 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 8009888:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800989a:	e002      	b.n	80098a2 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 800989c:	2300      	movs	r3, #0
 800989e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 80098a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 80098ae:	2303      	movs	r3, #3
 80098b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80098b4:	e016      	b.n	80098e4 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 80098b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 80098c2:	2302      	movs	r3, #2
 80098c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80098c8:	e00c      	b.n	80098e4 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 80098ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 80098d6:	2301      	movs	r3, #1
 80098d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80098dc:	e002      	b.n	80098e4 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 80098de:	2300      	movs	r3, #0
 80098e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 80098e4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80098e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d009      	beq.n	8009904 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 80098f0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80098f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d903      	bls.n	8009904 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 80098fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009900:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 8009904:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009908:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800990c:	429a      	cmp	r2, r3
 800990e:	d009      	beq.n	8009924 <phacDiscLoop_Sw_Int_ActivateB+0x212>
 8009910:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009914:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009918:	429a      	cmp	r2, r3
 800991a:	d903      	bls.n	8009924 <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 800991c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009920:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 8009924:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8009928:	2b00      	cmp	r3, #0
 800992a:	da14      	bge.n	8009956 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 800992c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009930:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009934:	429a      	cmp	r2, r3
 8009936:	d00e      	beq.n	8009956 <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8009938:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800993c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009940:	429a      	cmp	r2, r3
 8009942:	d204      	bcs.n	800994e <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 8009944:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009948:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800994c:	e003      	b.n	8009956 <phacDiscLoop_Sw_Int_ActivateB+0x244>
 800994e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009952:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800995a:	78fa      	ldrb	r2, [r7, #3]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	3398      	adds	r3, #152	@ 0x98
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	f103 040a 	add.w	r4, r3, #10
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	33af      	adds	r3, #175	@ 0xaf
 800997e:	7819      	ldrb	r1, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 5099 	ldrb.w	r5, [r3, #153]	@ 0x99
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	32b2      	adds	r2, #178	@ 0xb2
 8009990:	9203      	str	r2, [sp, #12]
 8009992:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009996:	9202      	str	r2, [sp, #8]
 8009998:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800999c:	9201      	str	r2, [sp, #4]
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	462b      	mov	r3, r5
 80099a2:	460a      	mov	r2, r1
 80099a4:	4621      	mov	r1, r4
 80099a6:	f00a faef 	bl	8013f88 <phpalI14443p3b_Sw_Attrib>
 80099aa:	4603      	mov	r3, r0
 80099ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <phacDiscLoop_Sw_Int_ActivateB+0x2a6>
 80099b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099b6:	e079      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d027      	beq.n	8009a12 <phacDiscLoop_Sw_Int_ActivateB+0x300>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c6:	f107 0208 	add.w	r2, r7, #8
 80099ca:	2104      	movs	r1, #4
 80099cc:	4618      	mov	r0, r3
 80099ce:	f00a f9d9 	bl	8013d84 <phpalI14443p3b_Sw_GetConfig>
 80099d2:	4603      	mov	r3, r0
 80099d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <phacDiscLoop_Sw_Int_ActivateB+0x2ce>
 80099dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099de:	e065      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 80099e0:	893b      	ldrh	r3, [r7, #8]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ee:	f107 0208 	add.w	r2, r7, #8
 80099f2:	2105      	movs	r1, #5
 80099f4:	4618      	mov	r0, r3
 80099f6:	f00a f9c5 	bl	8013d84 <phpalI14443p3b_Sw_GetConfig>
 80099fa:	4603      	mov	r3, r0
 80099fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <phacDiscLoop_Sw_Int_ActivateB+0x2f6>
 8009a04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a06:	e051      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 8009a08:	893b      	ldrh	r3, [r7, #8]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009a16:	f107 040d 	add.w	r4, r7, #13
 8009a1a:	f107 020e 	add.w	r2, r7, #14
 8009a1e:	f107 010f 	add.w	r1, r7, #15
 8009a22:	f107 030a 	add.w	r3, r7, #10
 8009a26:	9302      	str	r3, [sp, #8]
 8009a28:	f107 030b 	add.w	r3, r7, #11
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	f107 030c 	add.w	r3, r7, #12
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4623      	mov	r3, r4
 8009a36:	f00a fd65 	bl	8014504 <phpalI14443p3b_Sw_GetProtocolParams>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009a3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <phacDiscLoop_Sw_Int_ActivateB+0x336>
 8009a44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a46:	e031      	b.n	8009aac <phacDiscLoop_Sw_Int_ActivateB+0x39a>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d109      	bne.n	8009a66 <phacDiscLoop_Sw_Int_ActivateB+0x354>
    {
        if (bFsci > pDataParams->bFsciMax)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009a58:	7abb      	ldrb	r3, [r7, #10]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d203      	bcs.n	8009a66 <phacDiscLoop_Sw_Int_ActivateB+0x354>
        {
            bFsci = pDataParams->bFsciMax;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009a64:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009a6a:	7bfd      	ldrb	r5, [r7, #15]
 8009a6c:	7bbe      	ldrb	r6, [r7, #14]
 8009a6e:	f897 c00d 	ldrb.w	ip, [r7, #13]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a78:	7b3a      	ldrb	r2, [r7, #12]
 8009a7a:	7af9      	ldrb	r1, [r7, #11]
 8009a7c:	7ab8      	ldrb	r0, [r7, #10]
 8009a7e:	9003      	str	r0, [sp, #12]
 8009a80:	9102      	str	r1, [sp, #8]
 8009a82:	9201      	str	r2, [sp, #4]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4663      	mov	r3, ip
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f00a ff6c 	bl	801496a <phpalI14443p4_Sw_SetProtocol>
 8009a92:	4603      	mov	r3, r0
 8009a94:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	33b1      	adds	r3, #177	@ 0xb1
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	701a      	strb	r2, [r3, #0]
    return status;
 8009aaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	372c      	adds	r7, #44	@ 0x2c
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ab4 <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 8009aca:	2300      	movs	r3, #0
 8009acc:	75fb      	strb	r3, [r7, #23]
 8009ace:	e019      	b.n	8009b04 <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 8009ad0:	7dfa      	ldrb	r2, [r7, #23]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4413      	add	r3, r2
 8009ad8:	00da      	lsls	r2, r3, #3
 8009ada:	1ad2      	subs	r2, r2, r3
 8009adc:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	2210      	movs	r2, #16
 8009ae8:	4619      	mov	r1, r3
 8009aea:	68b8      	ldr	r0, [r7, #8]
 8009aec:	f013 fd00 	bl	801d4f0 <memcmp>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d103      	bne.n	8009afe <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 8009afc:	e008      	b.n	8009b10 <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	3301      	adds	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b0a:	7dfa      	ldrb	r2, [r7, #23]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d3df      	bcc.n	8009ad0 <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b086      	sub	sp, #24
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	4611      	mov	r1, r2
 8009b26:	461a      	mov	r2, r3
 8009b28:	460b      	mov	r3, r1
 8009b2a:	71fb      	strb	r3, [r7, #7]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 8009b30:	2300      	movs	r3, #0
 8009b32:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 8009b34:	2300      	movs	r3, #0
 8009b36:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 8009b38:	f107 0313 	add.w	r3, r7, #19
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	68b9      	ldr	r1, [r7, #8]
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff ffb7 	bl	8009ab4 <phacDiscLoop_Sw_Int_CheckForDuplication>
 8009b46:	4603      	mov	r3, r0
 8009b48:	82bb      	strh	r3, [r7, #20]
 8009b4a:	8abb      	ldrh	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 8009b50:	8abb      	ldrh	r3, [r7, #20]
 8009b52:	e086      	b.n	8009c62 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 8009b54:	7cfb      	ldrb	r3, [r7, #19]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d179      	bne.n	8009c4e <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5e:	f107 0210 	add.w	r2, r7, #16
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f009 fa28 	bl	8012fba <phpalFelica_Sw_GetConfig>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	82bb      	strh	r3, [r7, #20]
 8009b6e:	8abb      	ldrh	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 8009b74:	8abb      	ldrh	r3, [r7, #20]
 8009b76:	e074      	b.n	8009c62 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b7e:	461a      	mov	r2, r3
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	441a      	add	r2, r3
 8009b84:	68f9      	ldr	r1, [r7, #12]
 8009b86:	4613      	mov	r3, r2
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	00da      	lsls	r2, r3, #3
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	188b      	adds	r3, r1, r2
 8009b92:	3394      	adds	r3, #148	@ 0x94
 8009b94:	79fa      	ldrb	r2, [r7, #7]
 8009b96:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 8009b98:	8a3b      	ldrh	r3, [r7, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d018      	beq.n	8009bd0 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	2b10      	cmp	r3, #16
 8009ba2:	d915      	bls.n	8009bd0 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009baa:	461a      	mov	r2, r3
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	441a      	add	r2, r3
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	005b      	lsls	r3, r3, #1
 8009bb4:	4413      	add	r3, r2
 8009bb6:	00da      	lsls	r2, r3, #3
 8009bb8:	1ad2      	subs	r2, r2, r3
 8009bba:	f102 0388 	add.w	r3, r2, #136	@ 0x88
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	3210      	adds	r2, #16
 8009bc8:	8812      	ldrh	r2, [r2, #0]
 8009bca:	b292      	uxth	r2, r2
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	e014      	b.n	8009bfa <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	441a      	add	r2, r3
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	00da      	lsls	r2, r3, #3
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	f102 0388 	add.w	r3, r2, #136	@ 0x88
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4413      	add	r3, r2
 8009bee:	3308      	adds	r3, #8
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f013 fc8b 	bl	801d510 <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009c00:	461a      	mov	r2, r3
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	441a      	add	r2, r3
 8009c06:	4613      	mov	r3, r2
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	4413      	add	r3, r2
 8009c0c:	00da      	lsls	r2, r3, #3
 8009c0e:	1ad2      	subs	r2, r2, r3
 8009c10:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	3308      	adds	r3, #8
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f013 fcf5 	bl	801d60e <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	441a      	add	r2, r3
 8009c30:	88bb      	ldrh	r3, [r7, #4]
 8009c32:	b2d8      	uxtb	r0, r3
 8009c34:	68f9      	ldr	r1, [r7, #12]
 8009c36:	4613      	mov	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	00da      	lsls	r2, r3, #3
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	188b      	adds	r3, r1, r2
 8009c42:	3392      	adds	r3, #146	@ 0x92
 8009c44:	4602      	mov	r2, r0
 8009c46:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	4413      	add	r3, r2
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return PH_ERR_SUCCESS;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 8009c6a:	b590      	push	{r4, r7, lr}
 8009c6c:	b08b      	sub	sp, #44	@ 0x2c
 8009c6e:	af02      	add	r7, sp, #8
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
 8009c76:	4613      	mov	r3, r2
 8009c78:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 8009c7a:	237f      	movs	r3, #127	@ 0x7f
 8009c7c:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 8009c7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c82:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c94:	f107 0410 	add.w	r4, r7, #16
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	f107 011c 	add.w	r1, r7, #28
 8009c9e:	f107 031a 	add.w	r3, r7, #26
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	4623      	mov	r3, r4
 8009ca6:	f008 ff9d 	bl	8012be4 <phpalFelica_Sw_ReqC>
 8009caa:	4603      	mov	r3, r0
 8009cac:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009cae:	8bfb      	ldrh	r3, [r7, #30]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d164      	bne.n	8009d80 <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d048      	beq.n	8009d4e <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc0:	f107 021a 	add.w	r2, r7, #26
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f009 f977 	bl	8012fba <phpalFelica_Sw_GetConfig>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	83fb      	strh	r3, [r7, #30]
 8009cd0:	8bfb      	ldrh	r3, [r7, #30]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d037      	beq.n	8009d46 <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 8009cd6:	8bfb      	ldrh	r3, [r7, #30]
 8009cd8:	e053      	b.n	8009d82 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009ce6:	8b7b      	ldrh	r3, [r7, #26]
 8009ce8:	b2d9      	uxtb	r1, r3
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	f107 040c 	add.w	r4, r7, #12
 8009cf0:	f107 030f 	add.w	r3, r7, #15
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f107 0314 	add.w	r3, r7, #20
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f009 f887 	bl	8012e10 <phpalFelica_Sw_GetFrameInfo>
 8009d02:	4603      	mov	r3, r0
 8009d04:	83fb      	strh	r3, [r7, #30]
 8009d06:	8bfb      	ldrh	r3, [r7, #30]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 8009d0c:	8bfb      	ldrh	r3, [r7, #30]
 8009d0e:	e038      	b.n	8009d82 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 8009d10:	89bb      	ldrh	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10c      	bne.n	8009d30 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 8009d16:	6979      	ldr	r1, [r7, #20]
 8009d18:	7bfa      	ldrb	r2, [r7, #15]
 8009d1a:	883b      	ldrh	r3, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fefc 	bl	8009b1a <phacDiscLoop_Sw_Int_UpdateSensFResp>
 8009d22:	4603      	mov	r3, r0
 8009d24:	83fb      	strh	r3, [r7, #30]
 8009d26:	8bfb      	ldrh	r3, [r7, #30]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 8009d2c:	8bfb      	ldrh	r3, [r7, #30]
 8009d2e:	e028      	b.n	8009d82 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 8009d30:	8b7b      	ldrh	r3, [r7, #26]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	7b1b      	ldrb	r3, [r3, #12]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d211      	bcs.n	8009d6a <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 8009d46:	8b7b      	ldrh	r3, [r7, #26]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1c6      	bne.n	8009cda <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 8009d4c:	e00e      	b.n	8009d6c <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 8009d4e:	6939      	ldr	r1, [r7, #16]
 8009d50:	8b7b      	ldrh	r3, [r7, #26]
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	883b      	ldrh	r3, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fedf 	bl	8009b1a <phacDiscLoop_Sw_Int_UpdateSensFResp>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	83fb      	strh	r3, [r7, #30]
 8009d60:	8bfb      	ldrh	r3, [r7, #30]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 8009d66:	8bfb      	ldrh	r3, [r7, #30]
 8009d68:	e00b      	b.n	8009d82 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 8009d6a:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d102      	bne.n	8009d7c <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 8009d76:	f244 037f 	movw	r3, #16511	@ 0x407f
 8009d7a:	e002      	b.n	8009d82 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e000      	b.n	8009d82 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 8009d80:	8bfb      	ldrh	r3, [r7, #30]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3724      	adds	r7, #36	@ 0x24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}

08009d8a <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 8009d92:	237f      	movs	r3, #127	@ 0x7f
 8009d94:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f009 f8d3 	bl	8012f4a <phpalFelica_Sw_SetConfig>
 8009da4:	4603      	mov	r3, r0
 8009da6:	81fb      	strh	r3, [r7, #14]
 8009da8:	89fb      	ldrh	r3, [r7, #14]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <phacDiscLoop_Sw_DetTechTypeF+0x28>
 8009dae:	89fb      	ldrh	r3, [r7, #14]
 8009db0:	e042      	b.n	8009e38 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 8009db2:	f107 030c 	add.w	r3, r7, #12
 8009db6:	461a      	mov	r2, r3
 8009db8:	2157      	movs	r1, #87	@ 0x57
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fd fbb8 	bl	8007530 <phacDiscLoop_Sw_GetConfig>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	81fb      	strh	r3, [r7, #14]
 8009dc4:	89fb      	ldrh	r3, [r7, #14]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <phacDiscLoop_Sw_DetTechTypeF+0x44>
 8009dca:	89fb      	ldrh	r3, [r7, #14]
 8009dcc:	e034      	b.n	8009e38 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009dd4:	f003 030c 	and.w	r3, r3, #12
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	7f9a      	ldrb	r2, [r3, #30]
 8009de8:	89bb      	ldrh	r3, [r7, #12]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	43db      	mvns	r3, r3
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	4013      	ands	r3, r2
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 8009df8:	89bb      	ldrh	r3, [r7, #12]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	2103      	movs	r1, #3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff ff33 	bl	8009c6a <phacDiscLoop_Sw_Int_SendSensFReq>
 8009e04:	4603      	mov	r3, r0
 8009e06:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8009e08:	89fb      	ldrh	r3, [r7, #14]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fca3 	bl	8008756 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00c      	beq.n	8009e30 <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009e16:	89fb      	ldrh	r3, [r7, #14]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d10a      	bne.n	8009e34 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7f9a      	ldrb	r2, [r3, #30]
 8009e22:	89bb      	ldrh	r3, [r7, #12]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	779a      	strb	r2, [r3, #30]
 8009e2e:	e001      	b.n	8009e34 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 8009e30:	89fb      	ldrh	r3, [r7, #14]
 8009e32:	e001      	b.n	8009e38 <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009e34:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 8009e4c:	f107 030a 	add.w	r3, r7, #10
 8009e50:	461a      	mov	r2, r3
 8009e52:	2157      	movs	r1, #87	@ 0x57
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7fd fb6b 	bl	8007530 <phacDiscLoop_Sw_GetConfig>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	81bb      	strh	r3, [r7, #12]
 8009e5e:	89bb      	ldrh	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 8009e64:	89bb      	ldrh	r3, [r7, #12]
 8009e66:	e0e3      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	7f9b      	ldrb	r3, [r3, #30]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	897b      	ldrh	r3, [r7, #10]
 8009e70:	4013      	ands	r3, r2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	7b1b      	ldrb	r3, [r3, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009e86:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009e8a:	e0d1      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73bb      	strb	r3, [r7, #14]
 8009e90:	e00d      	b.n	8009eae <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8009e92:	7bba      	ldrb	r2, [r7, #14]
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	4613      	mov	r3, r2
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	4413      	add	r3, r2
 8009e9c:	00da      	lsls	r2, r3, #3
 8009e9e:	1ad2      	subs	r2, r2, r3
 8009ea0:	188b      	adds	r3, r1, r2
 8009ea2:	3393      	adds	r3, #147	@ 0x93
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	73bb      	strb	r3, [r7, #14]
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0ee      	beq.n	8009e92 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	7b1b      	ldrb	r3, [r3, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d324      	bcc.n	8009f0c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 8009ec2:	897b      	ldrh	r3, [r7, #10]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d10c      	bne.n	8009ee2 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ecc:	2103      	movs	r1, #3
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f002 fd1c 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	81bb      	strh	r3, [r7, #12]
 8009ed8:	89bb      	ldrh	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00e      	beq.n	8009efc <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 8009ede:	89bb      	ldrh	r3, [r7, #12]
 8009ee0:	e0a6      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee6:	210a      	movs	r1, #10
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 fd0f 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	81bb      	strh	r3, [r7, #12]
 8009ef2:	89bb      	ldrh	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 8009ef8:	89bb      	ldrh	r3, [r7, #12]
 8009efa:	e099      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e091      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7f9a      	ldrb	r2, [r3, #30]
 8009f10:	897b      	ldrh	r3, [r7, #10]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	43db      	mvns	r3, r3
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4013      	ands	r3, r2
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f009 f80e 	bl	8012f4a <phpalFelica_Sw_SetConfig>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 8009f32:	89bb      	ldrh	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 8009f38:	89bb      	ldrh	r3, [r7, #12]
 8009f3a:	e079      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8a9b      	ldrh	r3, [r3, #20]
 8009f44:	461a      	mov	r2, r3
 8009f46:	2135      	movs	r1, #53	@ 0x35
 8009f48:	f003 fa76 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	81bb      	strh	r3, [r7, #12]
 8009f50:	89bb      	ldrh	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 8009f56:	89bb      	ldrh	r3, [r7, #12]
 8009f58:	e06a      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 8009f5a:	897b      	ldrh	r3, [r7, #10]
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d10c      	bne.n	8009f7a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f64:	2103      	movs	r1, #3
 8009f66:	4618      	mov	r0, r3
 8009f68:	f002 fcd0 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	81bb      	strh	r3, [r7, #12]
 8009f70:	89bb      	ldrh	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00e      	beq.n	8009f94 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 8009f76:	89bb      	ldrh	r3, [r7, #12]
 8009f78:	e05a      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7e:	210a      	movs	r1, #10
 8009f80:	4618      	mov	r0, r3
 8009f82:	f002 fcc3 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009f86:	4603      	mov	r3, r0
 8009f88:	81bb      	strh	r3, [r7, #12]
 8009f8a:	89bb      	ldrh	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 8009f90:	89bb      	ldrh	r3, [r7, #12]
 8009f92:	e04d      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 8009f94:	897b      	ldrh	r3, [r7, #10]
 8009f96:	461a      	mov	r2, r3
 8009f98:	210f      	movs	r1, #15
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fe65 	bl	8009c6a <phacDiscLoop_Sw_Int_SendSensFReq>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 8009fa4:	89bb      	ldrh	r3, [r7, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 8009faa:	89bb      	ldrh	r3, [r7, #12]
 8009fac:	e040      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 8009fb2:	e030      	b.n	800a016 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 8009fb4:	7bfa      	ldrb	r2, [r7, #15]
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	00da      	lsls	r2, r3, #3
 8009fc0:	1ad2      	subs	r2, r2, r3
 8009fc2:	188b      	adds	r3, r1, r2
 8009fc4:	3380      	adds	r3, #128	@ 0x80
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d121      	bne.n	800a010 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 8009fcc:	7bfa      	ldrb	r2, [r7, #15]
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	00da      	lsls	r2, r3, #3
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	188b      	adds	r3, r1, r2
 8009fdc:	3381      	adds	r3, #129	@ 0x81
 8009fde:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 8009fe0:	2bfe      	cmp	r3, #254	@ 0xfe
 8009fe2:	d115      	bne.n	800a010 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe8:	2201      	movs	r2, #1
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f008 ffac 	bl	8012f4a <phpalFelica_Sw_SetConfig>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 8009ff6:	89bb      	ldrh	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 8009ffc:	89bb      	ldrh	r3, [r7, #12]
 8009ffe:	e017      	b.n	800a030 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800a000:	897b      	ldrh	r3, [r7, #10]
 800a002:	461a      	mov	r2, r3
 800a004:	210f      	movs	r1, #15
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fe2f 	bl	8009c6a <phacDiscLoop_Sw_Int_SendSensFReq>
 800a00c:	4603      	mov	r3, r0
 800a00e:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	3301      	adds	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a01c:	7bfa      	ldrb	r2, [r7, #15]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d3c8      	bcc.n	8009fb4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 800a02e:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b08b      	sub	sp, #44	@ 0x2c
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800a044:	2300      	movs	r3, #0
 800a046:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 800a048:	2300      	movs	r3, #0
 800a04a:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800a04c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a050:	833b      	strh	r3, [r7, #24]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a060:	78fa      	ldrb	r2, [r7, #3]
 800a062:	429a      	cmp	r2, r3
 800a064:	d202      	bcs.n	800a06c <phacDiscLoop_Sw_Int_ActivateF+0x34>
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <phacDiscLoop_Sw_Int_ActivateF+0x3a>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a06c:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a070:	e0c0      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a076:	78fa      	ldrb	r2, [r7, #3]
 800a078:	4613      	mov	r3, r2
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	4413      	add	r3, r2
 800a07e:	00da      	lsls	r2, r3, #3
 800a080:	1ad2      	subs	r2, r2, r3
 800a082:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4413      	add	r3, r2
 800a08a:	3308      	adds	r3, #8
 800a08c:	4619      	mov	r1, r3
 800a08e:	f008 ff48 	bl	8012f22 <phpalFelica_Sw_SetSerialNo>
 800a092:	4603      	mov	r3, r0
 800a094:	83fb      	strh	r3, [r7, #30]
 800a096:	8bfb      	ldrh	r3, [r7, #30]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <phacDiscLoop_Sw_Int_ActivateF+0x68>
 800a09c:	8bfb      	ldrh	r3, [r7, #30]
 800a09e:	e0a9      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	00da      	lsls	r2, r3, #3
 800a0ac:	1ad2      	subs	r2, r2, r3
 800a0ae:	188b      	adds	r3, r1, r2
 800a0b0:	3380      	adds	r3, #128	@ 0x80
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	f040 808f 	bne.w	800a1d8 <phacDiscLoop_Sw_Int_ActivateF+0x1a0>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	4413      	add	r3, r2
 800a0c4:	00da      	lsls	r2, r3, #3
 800a0c6:	1ad2      	subs	r2, r2, r3
 800a0c8:	188b      	adds	r3, r1, r2
 800a0ca:	3381      	adds	r3, #129	@ 0x81
 800a0cc:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800a0ce:	2bfe      	cmp	r3, #254	@ 0xfe
 800a0d0:	f040 8082 	bne.w	800a1d8 <phacDiscLoop_Sw_Int_ActivateF+0x1a0>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800a0d4:	78fa      	ldrb	r2, [r7, #3]
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	4413      	add	r3, r2
 800a0de:	00da      	lsls	r2, r3, #3
 800a0e0:	1ad2      	subs	r2, r2, r3
 800a0e2:	188b      	adds	r3, r1, r2
 800a0e4:	3393      	adds	r3, #147	@ 0x93
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8081 	beq.w	800a1f0 <phacDiscLoop_Sw_Int_ActivateF+0x1b8>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f008 ff27 	bl	8012f4a <phpalFelica_Sw_SetConfig>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	83fb      	strh	r3, [r7, #30]
            PH_CHECK_SUCCESS(status);
 800a100:	8bfb      	ldrh	r3, [r7, #30]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <phacDiscLoop_Sw_Int_ActivateF+0xd2>
 800a106:	8bfb      	ldrh	r3, [r7, #30]
 800a108:	e074      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a10e:	f107 0214 	add.w	r2, r7, #20
 800a112:	f107 0118 	add.w	r1, r7, #24
 800a116:	f107 030e 	add.w	r3, r7, #14
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	4613      	mov	r3, r2
 800a11e:	2203      	movs	r2, #3
 800a120:	f008 fd60 	bl	8012be4 <phpalFelica_Sw_ReqC>
 800a124:	4603      	mov	r3, r0
 800a126:	83fb      	strh	r3, [r7, #30]
            PH_CHECK_SUCCESS(status);
 800a128:	8bfb      	ldrh	r3, [r7, #30]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <phacDiscLoop_Sw_Int_ActivateF+0xfa>
 800a12e:	8bfb      	ldrh	r3, [r7, #30]
 800a130:	e060      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800a132:	78fa      	ldrb	r2, [r7, #3]
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	4613      	mov	r3, r2
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	4413      	add	r3, r2
 800a13c:	00da      	lsls	r2, r3, #3
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	188b      	adds	r3, r1, r2
 800a142:	3393      	adds	r3, #147	@ 0x93
 800a144:	2200      	movs	r2, #0
 800a146:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a14c:	f107 020c 	add.w	r2, r7, #12
 800a150:	2101      	movs	r1, #1
 800a152:	4618      	mov	r0, r3
 800a154:	f008 ff31 	bl	8012fba <phpalFelica_Sw_GetConfig>
 800a158:	4603      	mov	r3, r0
 800a15a:	83fb      	strh	r3, [r7, #30]
 800a15c:	8bfb      	ldrh	r3, [r7, #30]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d02e      	beq.n	800a1c0 <phacDiscLoop_Sw_Int_ActivateF+0x188>
 800a162:	8bfb      	ldrh	r3, [r7, #30]
 800a164:	e046      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800a166:	2300      	movs	r3, #0
 800a168:	72fb      	strb	r3, [r7, #11]
                    wFrameStatus = 0x00;
 800a16a:	2300      	movs	r3, #0
 800a16c:	813b      	strh	r3, [r7, #8]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a172:	89bb      	ldrh	r3, [r7, #12]
 800a174:	b2d9      	uxtb	r1, r3
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	f107 0408 	add.w	r4, r7, #8
 800a17c:	f107 030b 	add.w	r3, r7, #11
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	f107 0310 	add.w	r3, r7, #16
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	4623      	mov	r3, r4
 800a18a:	f008 fe41 	bl	8012e10 <phpalFelica_Sw_GetFrameInfo>
 800a18e:	4603      	mov	r3, r0
 800a190:	83fb      	strh	r3, [r7, #30]
 800a192:	8bfb      	ldrh	r3, [r7, #30]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <phacDiscLoop_Sw_Int_ActivateF+0x164>
 800a198:	8bfb      	ldrh	r3, [r7, #30]
 800a19a:	e02b      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f107 021d 	add.w	r2, r7, #29
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fc85 	bl	8009ab4 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	83fb      	strh	r3, [r7, #30]
 800a1ae:	8bfb      	ldrh	r3, [r7, #30]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <phacDiscLoop_Sw_Int_ActivateF+0x180>
 800a1b4:	8bfb      	ldrh	r3, [r7, #30]
 800a1b6:	e01d      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800a1b8:	89bb      	ldrh	r3, [r7, #12]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	81bb      	strh	r3, [r7, #12]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800a1c0:	89bb      	ldrh	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <phacDiscLoop_Sw_Int_ActivateF+0x194>
 800a1c6:	7f7b      	ldrb	r3, [r7, #29]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0cc      	beq.n	800a166 <phacDiscLoop_Sw_Int_ActivateF+0x12e>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800a1cc:	7f7b      	ldrb	r3, [r7, #29]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10e      	bne.n	800a1f0 <phacDiscLoop_Sw_Int_ActivateF+0x1b8>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800a1d2:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800a1d6:	e00d      	b.n	800a1f4 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	4413      	add	r3, r2
 800a1e2:	00da      	lsls	r2, r3, #3
 800a1e4:	1ad2      	subs	r2, r2, r3
 800a1e6:	188b      	adds	r3, r1, r2
 800a1e8:	3393      	adds	r3, #147	@ 0x93
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e000      	b.n	800a1f2 <phacDiscLoop_Sw_Int_ActivateF+0x1ba>
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800a1f0:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 800a1f2:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3724      	adds	r7, #36	@ 0x24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800a208:	237f      	movs	r3, #127	@ 0x7f
 800a20a:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	789b      	ldrb	r3, [r3, #2]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01e      	beq.n	800a256 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d00a      	beq.n	800a238 <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d114      	bne.n	800a256 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	789b      	ldrb	r3, [r3, #2]
 800a230:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10e      	bne.n	800a256 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	8adb      	ldrh	r3, [r3, #22]
 800a240:	461a      	mov	r2, r3
 800a242:	2135      	movs	r1, #53	@ 0x35
 800a244:	f003 f8f8 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800a248:	4603      	mov	r3, r0
 800a24a:	81fb      	strh	r3, [r7, #14]
 800a24c:	89fb      	ldrh	r3, [r7, #14]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d010      	beq.n	800a274 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800a252:	89fb      	ldrh	r3, [r7, #14]
 800a254:	e02a      	b.n	800a2ac <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	8a9b      	ldrh	r3, [r3, #20]
 800a25e:	461a      	mov	r2, r3
 800a260:	2135      	movs	r1, #53	@ 0x35
 800a262:	f003 f8e9 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800a266:	4603      	mov	r3, r0
 800a268:	81fb      	strh	r3, [r7, #14]
 800a26a:	89fb      	ldrh	r3, [r7, #14]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800a270:	89fb      	ldrh	r3, [r7, #14]
 800a272:	e01b      	b.n	800a2ac <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	2b03      	cmp	r3, #3
 800a278:	d10b      	bne.n	800a292 <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800a27a:	2208      	movs	r2, #8
 800a27c:	2157      	movs	r1, #87	@ 0x57
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7fc fd4c 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 800a284:	4603      	mov	r3, r0
 800a286:	81fb      	strh	r3, [r7, #14]
 800a288:	89fb      	ldrh	r3, [r7, #14]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00d      	beq.n	800a2aa <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800a28e:	89fb      	ldrh	r3, [r7, #14]
 800a290:	e00c      	b.n	800a2ac <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800a292:	2204      	movs	r2, #4
 800a294:	2157      	movs	r1, #87	@ 0x57
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fc fd40 	bl	8006d1c <phacDiscLoop_Sw_SetConfig>
 800a29c:	4603      	mov	r3, r0
 800a29e:	81fb      	strh	r3, [r7, #14]
 800a2a0:	89fb      	ldrh	r3, [r7, #14]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800a2a6:	89fb      	ldrh	r3, [r7, #14]
 800a2a8:	e000      	b.n	800a2ac <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b09b      	sub	sp, #108	@ 0x6c
 800a2b8:	af08      	add	r7, sp, #32
 800a2ba:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a2bc:	f107 031c 	add.w	r3, r7, #28
 800a2c0:	2227      	movs	r2, #39	@ 0x27
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f013 f923 	bl	801d510 <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a2ca:	f107 0314 	add.w	r3, r7, #20
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	460a      	mov	r2, r1
 800a2d2:	801a      	strh	r2, [r3, #0]
 800a2d4:	460a      	mov	r2, r1
 800a2d6:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a2e8:	f107 031a 	add.w	r3, r7, #26
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	f107 031b 	add.w	r3, r7, #27
 800a2f2:	9306      	str	r3, [sp, #24]
 800a2f4:	f107 031c 	add.w	r3, r7, #28
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	2300      	movs	r3, #0
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	2300      	movs	r3, #0
 800a304:	9302      	str	r3, [sp, #8]
 800a306:	2300      	movs	r3, #0
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	f107 0313 	add.w	r3, r7, #19
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2301      	movs	r3, #1
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	f00b fa1f 	bl	8015758 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a320:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800a328:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a32c:	e043      	b.n	800a3b6 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800a33e:	f107 0314 	add.w	r3, r7, #20
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	2300      	movs	r3, #0
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	2300      	movs	r3, #0
 800a34a:	9302      	str	r3, [sp, #8]
 800a34c:	2300      	movs	r3, #0
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	2300      	movs	r3, #0
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	f00b fb18 	bl	801598a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a360:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800a368:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a36c:	e023      	b.n	800a3b6 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a372:	7efa      	ldrb	r2, [r7, #27]
 800a374:	7ebc      	ldrb	r4, [r7, #26]
 800a376:	f107 011c 	add.w	r1, r7, #28
 800a37a:	f107 030a 	add.w	r3, r7, #10
 800a37e:	9303      	str	r3, [sp, #12]
 800a380:	f107 030c 	add.w	r3, r7, #12
 800a384:	9302      	str	r3, [sp, #8]
 800a386:	2301      	movs	r3, #1
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f107 0314 	add.w	r3, r7, #20
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	4623      	mov	r3, r4
 800a392:	f005 fbbd 	bl	800fb10 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a396:	4603      	mov	r3, r0
 800a398:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800a39c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe f9d8 	bl	8008756 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a3ac:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a3b0:	e001      	b.n	800a3b6 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800a3b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	374c      	adds	r7, #76	@ 0x4c
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd90      	pop	{r4, r7, pc}

0800a3be <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800a3be:	b590      	push	{r4, r7, lr}
 800a3c0:	b09b      	sub	sp, #108	@ 0x6c
 800a3c2:	af08      	add	r7, sp, #32
 800a3c4:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800a3c6:	2304      	movs	r3, #4
 800a3c8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a3cc:	f107 0318 	add.w	r3, r7, #24
 800a3d0:	2227      	movs	r2, #39	@ 0x27
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f013 f89b 	bl	801d510 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a3da:	f107 0310 	add.w	r3, r7, #16
 800a3de:	2100      	movs	r1, #0
 800a3e0:	460a      	mov	r2, r1
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	460a      	mov	r2, r1
 800a3e6:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7f9b      	ldrb	r3, [r3, #30]
 800a3fc:	f023 0320 	bic.w	r3, r3, #32
 800a400:	b2da      	uxtb	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bNumOfCards = 0;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800a416:	2300      	movs	r3, #0
 800a418:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	8b5b      	ldrh	r3, [r3, #26]
 800a424:	461a      	mov	r2, r3
 800a426:	2135      	movs	r1, #53	@ 0x35
 800a428:	f003 f806 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a432:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800a43a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a43e:	e1c2      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a444:	2106      	movs	r1, #6
 800a446:	4618      	mov	r0, r3
 800a448:	f002 fa60 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800a45a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a45e:	e1b2      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bNumOfCards = 0;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a474:	f107 0316 	add.w	r3, r7, #22
 800a478:	9307      	str	r3, [sp, #28]
 800a47a:	f107 0317 	add.w	r3, r7, #23
 800a47e:	9306      	str	r3, [sp, #24]
 800a480:	f107 0318 	add.w	r3, r7, #24
 800a484:	9305      	str	r3, [sp, #20]
 800a486:	2300      	movs	r3, #0
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	2300      	movs	r3, #0
 800a48c:	9303      	str	r3, [sp, #12]
 800a48e:	2300      	movs	r3, #0
 800a490:	9302      	str	r3, [sp, #8]
 800a492:	2300      	movs	r3, #0
 800a494:	9301      	str	r3, [sp, #4]
 800a496:	f107 0309 	add.w	r3, r7, #9
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	2301      	movs	r3, #1
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	f00b f959 	bl	8015758 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a4ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800a4b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4b8:	e185      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800a4ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b71      	cmp	r3, #113	@ 0x71
 800a4c2:	d113      	bne.n	800a4ec <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c8:	f107 020a 	add.w	r2, r7, #10
 800a4cc:	f107 010c 	add.w	r1, r7, #12
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f005 fcb5 	bl	800fe40 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a4dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b12      	cmp	r3, #18
 800a4e4:	d150      	bne.n	800a588 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800a4e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4ea:	e16c      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800a4fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800a506:	f107 0210 	add.w	r2, r7, #16
 800a50a:	9204      	str	r2, [sp, #16]
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	2300      	movs	r3, #0
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	2300      	movs	r3, #0
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	2300      	movs	r3, #0
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	2300      	movs	r3, #0
 800a51c:	4622      	mov	r2, r4
 800a51e:	f00b fa34 	bl	801598a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a522:	4603      	mov	r3, r0
 800a524:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a528:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800a530:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a534:	e147      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a53a:	7dfa      	ldrb	r2, [r7, #23]
 800a53c:	7dbc      	ldrb	r4, [r7, #22]
 800a53e:	f107 0118 	add.w	r1, r7, #24
 800a542:	f107 030a 	add.w	r3, r7, #10
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	f107 030c 	add.w	r3, r7, #12
 800a54c:	9302      	str	r3, [sp, #8]
 800a54e:	2300      	movs	r3, #0
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	f107 0310 	add.w	r3, r7, #16
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4623      	mov	r3, r4
 800a55a:	f005 fad9 	bl	800fb10 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a55e:	4603      	mov	r3, r0
 800a560:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a564:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b12      	cmp	r3, #18
 800a56c:	d102      	bne.n	800a574 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800a56e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a572:	e128      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800a574:	2300      	movs	r3, #0
 800a576:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7f9b      	ldrb	r3, [r3, #30]
 800a57e:	f023 0320 	bic.w	r3, r3, #32
 800a582:	b2da      	uxtb	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800a58e:	e0fc      	b.n	800a78a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
        {
            if(pRxBuffer[wIndex] == 0U)
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a596:	4413      	add	r3, r2
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f040 80c8 	bne.w	800a730 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x372>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5a6:	3302      	adds	r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a5b0:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a5b4:	e107      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d015      	beq.n	800a602 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800a5d6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a5da:	3302      	adds	r3, #2
 800a5dc:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5ec:	3305      	adds	r3, #5
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	b25b      	sxtb	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da04      	bge.n	800a602 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800a5f8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a608:	3301      	adds	r3, #1
 800a60a:	4413      	add	r3, r2
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	4619      	mov	r1, r3
 800a610:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a614:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a618:	4413      	add	r3, r2
 800a61a:	4299      	cmp	r1, r3
 800a61c:	dd53      	ble.n	800a6c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x308>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a624:	3301      	adds	r3, #1
 800a626:	4413      	add	r3, r2
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	4619      	mov	r1, r3
 800a62c:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a630:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a634:	4413      	add	r3, r2
 800a636:	1acb      	subs	r3, r1, r3
 800a638:	2b3a      	cmp	r3, #58	@ 0x3a
 800a63a:	dc41      	bgt.n	800a6c0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x302>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a642:	461a      	mov	r2, r3
 800a644:	4613      	mov	r3, r2
 800a646:	011b      	lsls	r3, r3, #4
 800a648:	1a9b      	subs	r3, r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	33c0      	adds	r3, #192	@ 0xc0
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	4413      	add	r3, r2
 800a652:	1d18      	adds	r0, r3, #4
                        (void)memcpy(
 800a654:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800a656:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800a65a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a65e:	440b      	add	r3, r1
 800a660:	3303      	adds	r3, #3
 800a662:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a66a:	3301      	adds	r3, #1
 800a66c:	4413      	add	r3, r2
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	461c      	mov	r4, r3
 800a672:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a676:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a67a:	4413      	add	r3, r2
                        (void)memcpy(
 800a67c:	1ae3      	subs	r3, r4, r3
 800a67e:	461a      	mov	r2, r3
 800a680:	f012 ffc5 	bl	801d60e <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a68a:	3301      	adds	r3, #1
 800a68c:	4413      	add	r3, r2
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	4619      	mov	r1, r3
 800a692:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a696:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a69a:	4413      	add	r3, r2
 800a69c:	1acb      	subs	r3, r1, r3
 800a69e:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800a6a6:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	011b      	lsls	r3, r3, #4
 800a6b2:	1a5b      	subs	r3, r3, r1
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	33fe      	adds	r3, #254	@ 0xfe
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	e00f      	b.n	800a6e0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x322>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a6c0:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a6c4:	e07f      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	1a5b      	subs	r3, r3, r1
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	33fe      	adds	r3, #254	@ 0xfe
 800a6dc:	2200      	movs	r2, #0
 800a6de:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                pDataParams->bNumOfCards++;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d301      	bcc.n	800a712 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x354>
                {
                    return PH_ERR_SUCCESS;
 800a70e:	2300      	movs	r3, #0
 800a710:	e059      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a718:	3301      	adds	r3, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a724:	4413      	add	r3, r2
 800a726:	b29b      	uxth	r3, r3
 800a728:	3303      	adds	r3, #3
 800a72a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a72e:	e02c      	b.n	800a78a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d102      	bne.n	800a744 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x386>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a73e:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a742:	e040      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a74a:	4413      	add	r3, r2
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d105      	bne.n	800a75e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a0>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800a752:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a756:	3303      	adds	r3, #3
 800a758:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a75c:	e015      	b.n	800a78a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800a75e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a762:	3303      	adds	r3, #3
 800a764:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	7f9b      	ldrb	r3, [r3, #30]
 800a772:	f043 0320 	orr.w	r3, r3, #32
 800a776:	b2da      	uxtb	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	7bdb      	ldrb	r3, [r3, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a784:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a788:	e01d      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        while(wIndex < wRxBufferLen)
 800a78a:	897b      	ldrh	r3, [r7, #10]
 800a78c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a790:	429a      	cmp	r2, r3
 800a792:	f4ff aefd 	bcc.w	800a590 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800a796:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d004      	beq.n	800a7a8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3ea>
 800a79e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a7a2:	2b0f      	cmp	r3, #15
 800a7a4:	f67f ae89 	bls.w	800a4ba <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800a7a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b71      	cmp	r3, #113	@ 0x71
 800a7b0:	f43f ae83 	beq.w	800a4ba <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x404>
    {
        return PH_ERR_SUCCESS;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e001      	b.n	800a7c6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a7c2:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	374c      	adds	r7, #76	@ 0x4c
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd90      	pop	{r4, r7, pc}

0800a7ce <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800a7ce:	b590      	push	{r4, r7, lr}
 800a7d0:	b09b      	sub	sp, #108	@ 0x6c
 800a7d2:	af08      	add	r7, sp, #32
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a7da:	f107 031c 	add.w	r3, r7, #28
 800a7de:	2227      	movs	r2, #39	@ 0x27
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f012 fe94 	bl	801d510 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a7e8:	f107 0314 	add.w	r3, r7, #20
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	460a      	mov	r2, r1
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800a7fe:	2320      	movs	r3, #32
 800a800:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a808:	78fa      	ldrb	r2, [r7, #3]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d202      	bcs.n	800a814 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a814:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a818:	e099      	b.n	800a94e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	1a9b      	subs	r3, r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	33fe      	adds	r3, #254	@ 0xfe
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	2bff      	cmp	r3, #255	@ 0xff
 800a82e:	d903      	bls.n	800a838 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6a>
    {
        bMaskLength = 255;
 800a830:	23ff      	movs	r3, #255	@ 0xff
 800a832:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a836:	e00a      	b.n	800a84e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x80>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800a838:	78fa      	ldrb	r2, [r7, #3]
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	4613      	mov	r3, r2
 800a83e:	011b      	lsls	r3, r3, #4
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	440b      	add	r3, r1
 800a846:	33fe      	adds	r3, #254	@ 0xfe
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a852:	78fa      	ldrb	r2, [r7, #3]
 800a854:	4613      	mov	r3, r2
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	33c0      	adds	r3, #192	@ 0xc0
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4413      	add	r3, r2
 800a862:	3304      	adds	r3, #4
 800a864:	f107 021a 	add.w	r2, r7, #26
 800a868:	9207      	str	r2, [sp, #28]
 800a86a:	f107 021b 	add.w	r2, r7, #27
 800a86e:	9206      	str	r2, [sp, #24]
 800a870:	f107 021c 	add.w	r2, r7, #28
 800a874:	9205      	str	r2, [sp, #20]
 800a876:	2200      	movs	r2, #0
 800a878:	9204      	str	r2, [sp, #16]
 800a87a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a87e:	9203      	str	r2, [sp, #12]
 800a880:	9302      	str	r3, [sp, #8]
 800a882:	2300      	movs	r3, #0
 800a884:	9301      	str	r3, [sp, #4]
 800a886:	f107 030d 	add.w	r3, r7, #13
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	2301      	movs	r3, #1
 800a88e:	2200      	movs	r2, #0
 800a890:	2100      	movs	r1, #0
 800a892:	f00a ff61 	bl	8015758 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a896:	4603      	mov	r3, r0
 800a898:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a89c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xdc>
 800a8a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8a8:	e051      	b.n	800a94e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800a8ba:	f107 0314 	add.w	r3, r7, #20
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9303      	str	r3, [sp, #12]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f00b f85a 	bl	801598a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a8dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x11c>
 800a8e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8e8:	e031      	b.n	800a94e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a8ee:	7efa      	ldrb	r2, [r7, #27]
 800a8f0:	7ebc      	ldrb	r4, [r7, #26]
 800a8f2:	f107 011c 	add.w	r1, r7, #28
 800a8f6:	f107 030e 	add.w	r3, r7, #14
 800a8fa:	9303      	str	r3, [sp, #12]
 800a8fc:	f107 0310 	add.w	r3, r7, #16
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	2302      	movs	r3, #2
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	f107 0314 	add.w	r3, r7, #20
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	4623      	mov	r3, r4
 800a90e:	f005 f8ff 	bl	800fb10 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a912:	4603      	mov	r3, r0
 800a914:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a918:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x158>
 800a920:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a924:	e013      	b.n	800a94e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	89fb      	ldrh	r3, [r7, #14]
 800a92e:	3b02      	subs	r3, #2
 800a930:	4413      	add	r3, r2
 800a932:	4619      	mov	r1, r3
 800a934:	f000 fbd5 	bl	800b0e2 <phalI18000p3m3_Sw_SetHandle>
 800a938:	4603      	mov	r3, r0
 800a93a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a93e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x17e>
 800a946:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a94a:	e000      	b.n	800a94e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800a94c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a94e:	4618      	mov	r0, r3
 800a950:	374c      	adds	r7, #76	@ 0x4c
 800a952:	46bd      	mov	sp, r7
 800a954:	bd90      	pop	{r4, r7, pc}

0800a956 <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b088      	sub	sp, #32
 800a95a:	af04      	add	r7, sp, #16
 800a95c:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800a95e:	237f      	movs	r3, #127	@ 0x7f
 800a960:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800a96c:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800a970:	b2d9      	uxtb	r1, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	33b7      	adds	r3, #183	@ 0xb7
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	32b8      	adds	r2, #184	@ 0xb8
 800a97a:	9202      	str	r2, [sp, #8]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	2300      	movs	r3, #0
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	2300      	movs	r3, #0
 800a984:	2200      	movs	r2, #0
 800a986:	f00b f90c 	bl	8015ba2 <phpalSli15693_Sw_Inventory>
 800a98a:	4603      	mov	r3, r0
 800a98c:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800a98e:	89fb      	ldrh	r3, [r7, #14]
 800a990:	4618      	mov	r0, r3
 800a992:	f7fd fee0 	bl	8008756 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a99c:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a9a0:	e000      	b.n	800a9a4 <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800a9a2:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800a9ac:	b590      	push	{r4, r7, lr}
 800a9ae:	b09b      	sub	sp, #108	@ 0x6c
 800a9b0:	af04      	add	r7, sp, #16
 800a9b2:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800a9b4:	237f      	movs	r3, #127	@ 0x7f
 800a9b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800a9de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	605a      	str	r2, [r3, #4]
 800a9e8:	609a      	str	r2, [r3, #8]
 800a9ea:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800a9ec:	f107 030c 	add.w	r3, r7, #12
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f012 fd8b 	bl	801d510 <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7f9b      	ldrb	r3, [r3, #30]
 800aa06:	f023 0310 	bic.w	r3, r3, #16
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	8b1b      	ldrh	r3, [r3, #24]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	2135      	movs	r1, #53	@ 0x35
 800aa1c:	f002 fd0c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800aa20:	4603      	mov	r3, r0
 800aa22:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800aa26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800aa2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa32:	e2bd      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa38:	2104      	movs	r1, #4
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 ff66 	bl	800c90c <phhalHw_Pn5180_ApplyProtocolSettings>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800aa46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800aa4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa52:	e2ad      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800aa5e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800aa62:	b2d9      	uxtb	r1, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	33b7      	adds	r3, #183	@ 0xb7
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	32b8      	adds	r2, #184	@ 0xb8
 800aa6c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800aa70:	9202      	str	r2, [sp, #8]
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f00b f890 	bl	8015ba2 <phpalSli15693_Sw_Inventory>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800aa88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d102      	bne.n	800aa98 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800aa92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa96:	e28b      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800aa98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d111      	bne.n	800aac6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            pDataParams->bNumOfCards++;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800aab8:	3301      	adds	r3, #1
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e274      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800aac6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d005      	beq.n	800aadc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800aad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	f040 825e 	bne.w	800af98 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ec>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7f9b      	ldrb	r3, [r3, #30]
 800aae0:	f043 0310 	orr.w	r3, r3, #16
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7b9b      	ldrb	r3, [r3, #14]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f040 8243 	bne.w	800af7a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ce>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800aaf4:	f244 0381 	movw	r3, #16513	@ 0x4081
 800aaf8:	e25a      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7f9b      	ldrb	r3, [r3, #30]
 800ab04:	f023 0310 	bic.w	r3, r3, #16
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800ab18:	f043 0304 	orr.w	r3, r3, #4
 800ab1c:	b2dc      	uxtb	r4, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ab24:	461a      	mov	r2, r3
 800ab26:	4613      	mov	r3, r2
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	4413      	add	r3, r2
 800ab2c:	33b0      	adds	r3, #176	@ 0xb0
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	1dda      	adds	r2, r3, #7
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	440b      	add	r3, r1
 800ab42:	33b0      	adds	r3, #176	@ 0xb0
 800ab44:	6879      	ldr	r1, [r7, #4]
 800ab46:	440b      	add	r3, r1
 800ab48:	3308      	adds	r3, #8
 800ab4a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800ab4e:	9302      	str	r3, [sp, #8]
 800ab50:	9201      	str	r2, [sp, #4]
 800ab52:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f00b f820 	bl	8015ba2 <phpalSli15693_Sw_Inventory>
 800ab62:	4603      	mov	r3, r0
 800ab64:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800ab68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d04f      	beq.n	800ac12 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800ab72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b06      	cmp	r3, #6
 800ab7a:	d04a      	beq.n	800ac12 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800ab7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d004      	beq.n	800ab90 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e4>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800ab86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d11f      	bne.n	800abd0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x224>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7f9b      	ldrb	r3, [r3, #30]
 800ab94:	f043 0310 	orr.w	r3, r3, #16
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800ab9e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	3358      	adds	r3, #88	@ 0x58
 800aba6:	443b      	add	r3, r7
 800aba8:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800abac:	b21a      	sxth	r2, r3
 800abae:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800abb2:	2101      	movs	r1, #1
 800abb4:	fa01 f303 	lsl.w	r3, r1, r3
 800abb8:	b21b      	sxth	r3, r3
 800abba:	4313      	orrs	r3, r2
 800abbc:	b21a      	sxth	r2, r3
 800abbe:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800abc2:	b292      	uxth	r2, r2
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	3358      	adds	r3, #88	@ 0x58
 800abc8:	443b      	add	r3, r7
 800abca:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800abce:	e020      	b.n	800ac12 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800abd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d118      	bne.n	800ac0c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x260>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800abe0:	3301      	adds	r3, #1
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                            pDataParams->bNumOfCards++;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800abf0:	3301      	adds	r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7b9b      	ldrb	r3, [r3, #14]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d304      	bcc.n	800ac12 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                            {
                                return PH_ERR_SUCCESS;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	e1d1      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800ac0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ac10:	e1ce      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800ac12:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ac16:	3301      	adds	r3, #1
 800ac18:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ac1c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ac20:	2b10      	cmp	r3, #16
 800ac22:	d102      	bne.n	800ac2a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x27e>
                        {
                            bNextSlot = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800ac2a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d031      	beq.n	800ac96 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ea>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4613      	mov	r3, r2
 800ac40:	00db      	lsls	r3, r3, #3
 800ac42:	4413      	add	r3, r2
 800ac44:	33b0      	adds	r3, #176	@ 0xb0
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	1dd9      	adds	r1, r3, #7
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ac52:	461a      	mov	r2, r3
 800ac54:	4613      	mov	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	4413      	add	r3, r2
 800ac5a:	33b0      	adds	r3, #176	@ 0xb0
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f103 0208 	add.w	r2, r3, #8
 800ac64:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800ac68:	9302      	str	r3, [sp, #8]
 800ac6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	4613      	mov	r3, r2
 800ac78:	460a      	mov	r2, r1
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	f00a ffbb 	bl	8015bf6 <phpalSli15693_Sw_SendEof>
 800ac80:	4603      	mov	r3, r0
 800ac82:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800ac86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b12      	cmp	r3, #18
 800ac8e:	d102      	bne.n	800ac96 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ea>
 800ac90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ac94:	e18c      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                        }
                    }
                    while(0U != bNextSlot);
 800ac96:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f47f af64 	bne.w	800ab68 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1bc>
                    bNextSlot = 1;
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800acac:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	3358      	adds	r3, #88	@ 0x58
 800acb4:	443b      	add	r3, r7
 800acb6:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 8120 	beq.w	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x554>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800acc0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800acc4:	3358      	adds	r3, #88	@ 0x58
 800acc6:	443b      	add	r3, r7
 800acc8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800accc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800acd0:	e110      	b.n	800aef4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x548>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800acd2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	3358      	adds	r3, #88	@ 0x58
 800acda:	443b      	add	r3, r7
 800acdc:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ace0:	461a      	mov	r2, r3
 800ace2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ace6:	fa42 f303 	asr.w	r3, r2, r3
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80c8 	beq.w	800ae84 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4d8>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800acf4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800ad02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x374>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800ad0a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ad0e:	08db      	lsrs	r3, r3, #3
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	3358      	adds	r3, #88	@ 0x58
 800ad14:	443b      	add	r3, r7
 800ad16:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ad1a:	f803 2c14 	strb.w	r2, [r3, #-20]
 800ad1e:	e047      	b.n	800adb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x404>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800ad20:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ad24:	08db      	lsrs	r3, r3, #3
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	3358      	adds	r3, #88	@ 0x58
 800ad2a:	443b      	add	r3, r7
 800ad2c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ad30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad34:	f1c3 0308 	rsb	r3, r3, #8
 800ad38:	21ff      	movs	r1, #255	@ 0xff
 800ad3a:	fa41 f303 	asr.w	r3, r1, r3
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800ad44:	08c9      	lsrs	r1, r1, #3
 800ad46:	b2c9      	uxtb	r1, r1
 800ad48:	4013      	ands	r3, r2
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800ad50:	443b      	add	r3, r7
 800ad52:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800ad56:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ad5a:	08db      	lsrs	r3, r3, #3
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	3358      	adds	r3, #88	@ 0x58
 800ad60:	443b      	add	r3, r7
 800ad62:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ad66:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad6a:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800ad6e:	408b      	lsls	r3, r1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800ad76:	08c9      	lsrs	r1, r1, #3
 800ad78:	b2c9      	uxtb	r1, r1
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800ad82:	443b      	add	r3, r7
 800ad84:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800ad88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	d90f      	bls.n	800adb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x404>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800ad90:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad94:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800ad98:	fa43 f202 	asr.w	r2, r3, r2
 800ad9c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ada0:	08db      	lsrs	r3, r3, #3
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	3301      	adds	r3, #1
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	3358      	adds	r3, #88	@ 0x58
 800adaa:	443b      	add	r3, r7
 800adac:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800adb0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800adb4:	3304      	adds	r3, #4
 800adb6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	7f9b      	ldrb	r3, [r3, #30]
 800adbe:	f043 0310 	orr.w	r3, r3, #16
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800adc8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	3358      	adds	r3, #88	@ 0x58
 800add0:	443b      	add	r3, r7
 800add2:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800add6:	b21a      	sxth	r2, r3
 800add8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800addc:	2101      	movs	r1, #1
 800adde:	fa01 f303 	lsl.w	r3, r1, r3
 800ade2:	b21b      	sxth	r3, r3
 800ade4:	43db      	mvns	r3, r3
 800ade6:	b21b      	sxth	r3, r3
 800ade8:	4013      	ands	r3, r2
 800adea:	b21a      	sxth	r2, r3
 800adec:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adf0:	b292      	uxth	r2, r2
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	3358      	adds	r3, #88	@ 0x58
 800adf6:	443b      	add	r3, r7
 800adf8:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800adfc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae00:	2b0f      	cmp	r3, #15
 800ae02:	d124      	bne.n	800ae4e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a2>
                                    {
                                        bCount[bLevel] = 0U;
 800ae04:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae08:	3358      	adds	r3, #88	@ 0x58
 800ae0a:	443b      	add	r3, r7
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800ae12:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae16:	005b      	lsls	r3, r3, #1
 800ae18:	3358      	adds	r3, #88	@ 0x58
 800ae1a:	443b      	add	r3, r7
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800ae22:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x486>
                                        {
                                            bEnd = 1;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800ae30:	e098      	b.n	800af64 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                            bCount[bLevel] = bSlotCount;
 800ae32:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae36:	3358      	adds	r3, #88	@ 0x58
 800ae38:	443b      	add	r3, r7
 800ae3a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ae3e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800ae42:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae46:	3301      	adds	r3, #1
 800ae48:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800ae4c:	e08a      	b.n	800af64 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                        bCount[bLevel] = bSlotCount;
 800ae4e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae52:	3358      	adds	r3, #88	@ 0x58
 800ae54:	443b      	add	r3, r7
 800ae56:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ae5a:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800ae5e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae62:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800ae66:	443a      	add	r2, r7
 800ae68:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800ae6c:	3201      	adds	r2, #1
 800ae6e:	b2d2      	uxtb	r2, r2
 800ae70:	3358      	adds	r3, #88	@ 0x58
 800ae72:	443b      	add	r3, r7
 800ae74:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800ae78:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800ae82:	e06f      	b.n	800af64 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800ae84:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae88:	2b0f      	cmp	r3, #15
 800ae8a:	d12e      	bne.n	800aeea <phacDiscLoop_Sw_Int_CollisionResolutionV+0x53e>
                                    {
                                        if(bLevel == 0U)
 800ae8c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4fe>
                                        {
                                            bEnd = 1;
 800ae94:	2301      	movs	r3, #1
 800ae96:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	7f9b      	ldrb	r3, [r3, #30]
 800ae9e:	f023 0310 	bic.w	r3, r3, #16
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	779a      	strb	r2, [r3, #30]
 800aea8:	e01f      	b.n	800aeea <phacDiscLoop_Sw_Int_CollisionResolutionV+0x53e>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7f9b      	ldrb	r3, [r3, #30]
 800aeae:	f023 0310 	bic.w	r3, r3, #16
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800aeb8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800aebc:	3b04      	subs	r3, #4
 800aebe:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800aec2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	3358      	adds	r3, #88	@ 0x58
 800aeca:	443b      	add	r3, r7
 800aecc:	2200      	movs	r2, #0
 800aece:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800aed2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aed6:	3358      	adds	r3, #88	@ 0x58
 800aed8:	443b      	add	r3, r7
 800aeda:	2200      	movs	r2, #0
 800aedc:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800aee0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aee4:	3b01      	subs	r3, #1
 800aee6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800aeea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800aeee:	3301      	adds	r3, #1
 800aef0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800aef4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800aef8:	2b0f      	cmp	r3, #15
 800aefa:	f67f aeea 	bls.w	800acd2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x326>
 800aefe:	e031      	b.n	800af64 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800af00:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x572>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7f9b      	ldrb	r3, [r3, #30]
 800af0c:	f023 0310 	bic.w	r3, r3, #16
 800af10:	b2da      	uxtb	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800af1c:	e022      	b.n	800af64 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	7f9b      	ldrb	r3, [r3, #30]
 800af22:	f023 0310 	bic.w	r3, r3, #16
 800af26:	b2da      	uxtb	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800af2c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800af30:	3b04      	subs	r3, #4
 800af32:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800af36:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800af3a:	005b      	lsls	r3, r3, #1
 800af3c:	3358      	adds	r3, #88	@ 0x58
 800af3e:	443b      	add	r3, r7
 800af40:	2200      	movs	r2, #0
 800af42:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800af46:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800af4a:	3358      	adds	r3, #88	@ 0x58
 800af4c:	443b      	add	r3, r7
 800af4e:	2200      	movs	r2, #0
 800af50:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800af54:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800af58:	3b01      	subs	r3, #1
 800af5a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800af64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f47f ae9c 	bne.w	800aca6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fa>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7f9b      	ldrb	r3, [r3, #30]
 800af72:	f003 0310 	and.w	r3, r3, #16
 800af76:	2b00      	cmp	r3, #0
 800af78:	d008      	beq.n	800af8c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e0>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	7b9b      	ldrb	r3, [r3, #14]
 800af84:	429a      	cmp	r2, r3
 800af86:	f4ff adb8 	bcc.w	800aafa <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800af8a:	e000      	b.n	800af8e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e2>
                    {
                        break;
 800af8c:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800af8e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0f1      	beq.n	800af7a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ce>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800af96:	e002      	b.n	800af9e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f2>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800af98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800af9c:	e008      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <phacDiscLoop_Sw_Int_CollisionResolutionV+0x600>
    {
        return PH_ERR_SUCCESS;
 800afa8:	2300      	movs	r3, #0
 800afaa:	e001      	b.n	800afb0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800afac:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	375c      	adds	r7, #92	@ 0x5c
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd90      	pop	{r4, r7, pc}

0800afb8 <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800afc4:	237f      	movs	r3, #127	@ 0x7f
 800afc6:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800afce:	78fa      	ldrb	r2, [r7, #3]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d202      	bcs.n	800afda <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800afd4:	78fb      	ldrb	r3, [r7, #3]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800afda:	f244 0321 	movw	r3, #16417	@ 0x4021
 800afde:	e026      	b.n	800b02e <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800afe4:	78fa      	ldrb	r2, [r7, #3]
 800afe6:	4613      	mov	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	4413      	add	r3, r2
 800afec:	33b0      	adds	r3, #176	@ 0xb0
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	4413      	add	r3, r2
 800aff2:	3308      	adds	r3, #8
 800aff4:	2208      	movs	r2, #8
 800aff6:	4619      	mov	r1, r3
 800aff8:	f00b f93d 	bl	8016276 <phpalSli15693_Sw_SetSerialNo>
 800affc:	4603      	mov	r3, r0
 800affe:	81fb      	strh	r3, [r7, #14]
 800b000:	89fb      	ldrh	r3, [r7, #14]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800b006:	89fb      	ldrh	r3, [r7, #14]
 800b008:	e011      	b.n	800b02e <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 800b010:	2b10      	cmp	r3, #16
 800b012:	d10b      	bne.n	800b02c <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b018:	4618      	mov	r0, r3
 800b01a:	f00a ffc4 	bl	8015fa6 <phpalSli15693_Sw_Select>
 800b01e:	4603      	mov	r3, r0
 800b020:	81fb      	strh	r3, [r7, #14]
 800b022:	89fb      	ldrh	r3, [r7, #14]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800b028:	89fb      	ldrh	r3, [r7, #14]
 800b02a:	e000      	b.n	800b02e <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800b02c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	460b      	mov	r3, r1
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800b044:	897b      	ldrh	r3, [r7, #10]
 800b046:	2b0c      	cmp	r3, #12
 800b048:	d002      	beq.n	800b050 <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800b04a:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800b04e:	e014      	b.n	800b07a <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <phalFelica_Sw_Init+0x24>
 800b056:	2321      	movs	r3, #33	@ 0x21
 800b058:	e00f      	b.n	800b07a <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <phalFelica_Sw_Init+0x2e>
 800b060:	2321      	movs	r3, #33	@ 0x21
 800b062:	e00a      	b.n	800b07a <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f241 4201 	movw	r2, #5121	@ 0x1401
 800b06a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800b086:	b480      	push	{r7}
 800b088:	b085      	sub	sp, #20
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	460b      	mov	r3, r1
 800b090:	607a      	str	r2, [r7, #4]
 800b092:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800b094:	897b      	ldrh	r3, [r7, #10]
 800b096:	2b0c      	cmp	r3, #12
 800b098:	d002      	beq.n	800b0a0 <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800b09a:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800b09e:	e01a      	b.n	800b0d6 <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <phalI18000p3m3_Sw_Init+0x24>
 800b0a6:	2321      	movs	r3, #33	@ 0x21
 800b0a8:	e015      	b.n	800b0d6 <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <phalI18000p3m3_Sw_Init+0x2e>
 800b0b0:	2321      	movs	r3, #33	@ 0x21
 800b0b2:	e010      	b.n	800b0d6 <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f641 0201 	movw	r2, #6145	@ 0x1801
 800b0ba:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	8812      	ldrh	r2, [r2, #0]
 800b0f4:	b292      	uxth	r2, r2
 800b0f6:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	607a      	str	r2, [r7, #4]
 800b116:	603b      	str	r3, [r7, #0]
 800b118:	460b      	mov	r3, r1
 800b11a:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <phalICode_Sw_Init+0x1c>
 800b122:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800b126:	e026      	b.n	800b176 <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d102      	bne.n	800b134 <phalICode_Sw_Init+0x28>
 800b12e:	f241 5321 	movw	r3, #5409	@ 0x1521
 800b132:	e020      	b.n	800b176 <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800b134:	897b      	ldrh	r3, [r7, #10]
 800b136:	2b20      	cmp	r3, #32
 800b138:	d002      	beq.n	800b140 <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800b13a:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800b13e:	e01a      	b.n	800b176 <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f241 5201 	movw	r2, #5377	@ 0x1501
 800b146:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2201      	movs	r2, #1
 800b164:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3314      	adds	r3, #20
 800b16a:	220a      	movs	r2, #10
 800b16c:	2100      	movs	r1, #0
 800b16e:	4618      	mov	r0, r3
 800b170:	f012 f9ce 	bl	801d510 <memset>

    return PH_ERR_SUCCESS;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <phalICode_Sw_ReadSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_ReadSingleBlock(phalICode_Sw_DataParams_t * pDataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t ** ppData,
        uint16_t * pDataLen)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b088      	sub	sp, #32
 800b182:	af02      	add	r7, sp, #8
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	607b      	str	r3, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	72fb      	strb	r3, [r7, #11]
 800b18c:	4613      	mov	r3, r2
 800b18e:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wRetries = 0;
 800b194:	2300      	movs	r3, #0
 800b196:	82bb      	strh	r3, [r7, #20]

    /* Retrieve max retry count */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f107 0214 	add.w	r2, r7, #20
 800b1a0:	2108      	movs	r1, #8
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f00b fa5a 	bl	801665c <phpalSli15693_Sw_GetConfig>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	82fb      	strh	r3, [r7, #22]
 800b1ac:	8afb      	ldrh	r3, [r7, #22]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <phalICode_Sw_ReadSingleBlock+0x38>
 800b1b2:	8afb      	ldrh	r3, [r7, #22]
 800b1b4:	e01f      	b.n	800b1f6 <phalICode_Sw_ReadSingleBlock+0x78>
            pDataParams->pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT,
            &wRetries));

    if(wRetries < 0xFF)
 800b1b6:	8abb      	ldrh	r3, [r7, #20]
 800b1b8:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1ba:	d803      	bhi.n	800b1c4 <phalICode_Sw_ReadSingleBlock+0x46>
    {
        wRetries = wRetries + (uint8_t)1U;
 800b1bc:	8abb      	ldrh	r3, [r7, #20]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	82bb      	strh	r3, [r7, #20]
    }

    do
    {
        wStatus = phalICode_Int_ReadSingleBlock(
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6858      	ldr	r0, [r3, #4]
 800b1c8:	7aba      	ldrb	r2, [r7, #10]
 800b1ca:	7af9      	ldrb	r1, [r7, #11]
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f000 f9f3 	bl	800b5bc <phalICode_Int_ReadSingleBlock>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	82fb      	strh	r3, [r7, #22]
                bOption,
                bBlockNo,
                ppData,
                pDataLen);

        if(wRetries != 0)
 800b1da:	8abb      	ldrh	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <phalICode_Sw_ReadSingleBlock+0x6a>
        {
            wRetries = wRetries - (uint8_t)1U;
 800b1e0:	8abb      	ldrh	r3, [r7, #20]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	82bb      	strh	r3, [r7, #20]
        }

    }while((wStatus != PH_ERR_SUCCESS) && (wRetries != 0U));
 800b1e8:	8afb      	ldrh	r3, [r7, #22]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d002      	beq.n	800b1f4 <phalICode_Sw_ReadSingleBlock+0x76>
 800b1ee:	8abb      	ldrh	r3, [r7, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e7      	bne.n	800b1c4 <phalICode_Sw_ReadSingleBlock+0x46>

    return wStatus;
 800b1f4:	8afb      	ldrh	r3, [r7, #22]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <phalICode_Sw_WriteSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_WriteSingleBlock(phalICode_Sw_DataParams_t * pDataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t * pData,
        uint8_t bDataLen)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b088      	sub	sp, #32
 800b202:	af02      	add	r7, sp, #8
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	607b      	str	r3, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	72fb      	strb	r3, [r7, #11]
 800b20c:	4613      	mov	r3, r2
 800b20e:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wRetries = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	82bb      	strh	r3, [r7, #20]

    /* Retrieve max retry count */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f107 0214 	add.w	r2, r7, #20
 800b220:	2108      	movs	r1, #8
 800b222:	4618      	mov	r0, r3
 800b224:	f00b fa1a 	bl	801665c <phpalSli15693_Sw_GetConfig>
 800b228:	4603      	mov	r3, r0
 800b22a:	82fb      	strh	r3, [r7, #22]
 800b22c:	8afb      	ldrh	r3, [r7, #22]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <phalICode_Sw_WriteSingleBlock+0x38>
 800b232:	8afb      	ldrh	r3, [r7, #22]
 800b234:	e020      	b.n	800b278 <phalICode_Sw_WriteSingleBlock+0x7a>
            pDataParams->pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT,
            &wRetries));

    if(wRetries < 0xFF)
 800b236:	8abb      	ldrh	r3, [r7, #20]
 800b238:	2bfe      	cmp	r3, #254	@ 0xfe
 800b23a:	d803      	bhi.n	800b244 <phalICode_Sw_WriteSingleBlock+0x46>
    {
        wRetries = wRetries + (uint8_t)1U;
 800b23c:	8abb      	ldrh	r3, [r7, #20]
 800b23e:	3301      	adds	r3, #1
 800b240:	b29b      	uxth	r3, r3
 800b242:	82bb      	strh	r3, [r7, #20]
    }

    do
    {
        wStatus = phalICode_Int_WriteSingleBlock(
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6858      	ldr	r0, [r3, #4]
 800b248:	7aba      	ldrb	r2, [r7, #10]
 800b24a:	7af9      	ldrb	r1, [r7, #11]
 800b24c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f000 fa19 	bl	800b68a <phalICode_Int_WriteSingleBlock>
 800b258:	4603      	mov	r3, r0
 800b25a:	82fb      	strh	r3, [r7, #22]
                bOption,
                bBlockNo,
                pData,
                bDataLen);

        if(wRetries != 0)
 800b25c:	8abb      	ldrh	r3, [r7, #20]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <phalICode_Sw_WriteSingleBlock+0x6c>
        {
            wRetries = wRetries - (uint8_t)1U;
 800b262:	8abb      	ldrh	r3, [r7, #20]
 800b264:	3b01      	subs	r3, #1
 800b266:	b29b      	uxth	r3, r3
 800b268:	82bb      	strh	r3, [r7, #20]
        }

    }while((wStatus != PH_ERR_SUCCESS) && (wRetries != 0U));
 800b26a:	8afb      	ldrh	r3, [r7, #22]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <phalICode_Sw_WriteSingleBlock+0x78>
 800b270:	8abb      	ldrh	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e6      	bne.n	800b244 <phalICode_Sw_WriteSingleBlock+0x46>

    return wStatus;
 800b276:	8afb      	ldrh	r3, [r7, #22]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <phalICode_Int_SetOptionBit>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_SetOptionBit(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bUpdateTiming)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	70fb      	strb	r3, [r7, #3]
 800b28c:	4613      	mov	r3, r2
 800b28e:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM wStatus  = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wCurFlag = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	817b      	strh	r3, [r7, #10]
    uint16_t    PH_MEMLOC_REM wNewFlag = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	81fb      	strh	r3, [r7, #14]

    /* Check if the Option Byte has a valid value. */
    if (bOption > PHAL_ICODE_OPTION_ON)
 800b29c:	78fb      	ldrb	r3, [r7, #3]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d902      	bls.n	800b2a8 <phalICode_Int_SetOptionBit+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AL_ICODE);
 800b2a2:	f241 5321 	movw	r3, #5409	@ 0x1521
 800b2a6:	e04b      	b.n	800b340 <phalICode_Int_SetOptionBit+0xc0>
    }

    /* Retrieve the flags byte */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b2a8:	f107 030a 	add.w	r3, r7, #10
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f00b f9d3 	bl	801665c <phpalSli15693_Sw_GetConfig>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	81bb      	strh	r3, [r7, #12]
 800b2ba:	89bb      	ldrh	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <phalICode_Int_SetOptionBit+0x44>
 800b2c0:	89bb      	ldrh	r3, [r7, #12]
 800b2c2:	e03d      	b.n	800b340 <phalICode_Int_SetOptionBit+0xc0>
            pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_FLAGS,
            &wCurFlag));

    /* Update Option bit with provided information. */
    if (bOption != PHAL_ICODE_OPTION_OFF)
 800b2c4:	78fb      	ldrb	r3, [r7, #3]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <phalICode_Int_SetOptionBit+0x54>
    {
        wNewFlag = wCurFlag | PHPAL_SLI15693_FLAG_OPTION;
 800b2ca:	897b      	ldrh	r3, [r7, #10]
 800b2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2d0:	81fb      	strh	r3, [r7, #14]
 800b2d2:	e003      	b.n	800b2dc <phalICode_Int_SetOptionBit+0x5c>
    }
    /* Clear option bit */
    else
    {
        wNewFlag = wCurFlag & (uint8_t)(~(uint8_t)PHPAL_SLI15693_FLAG_OPTION & 0xFF);
 800b2d4:	897b      	ldrh	r3, [r7, #10]
 800b2d6:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 800b2da:	81fb      	strh	r3, [r7, #14]
    }

    /* Update the Option bit in the Flag's byte. */
    if (wNewFlag != wCurFlag)
 800b2dc:	897b      	ldrh	r3, [r7, #10]
 800b2de:	89fa      	ldrh	r2, [r7, #14]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d00c      	beq.n	800b2fe <phalICode_Int_SetOptionBit+0x7e>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b2e4:	89fb      	ldrh	r3, [r7, #14]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f00a ffe0 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	81bb      	strh	r3, [r7, #12]
 800b2f4:	89bb      	ldrh	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <phalICode_Int_SetOptionBit+0x7e>
 800b2fa:	89bb      	ldrh	r3, [r7, #12]
 800b2fc:	e020      	b.n	800b340 <phalICode_Int_SetOptionBit+0xc0>
                pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_FLAGS,
                wNewFlag));
    }

    if(bUpdateTiming == PH_ON)
 800b2fe:	78bb      	ldrb	r3, [r7, #2]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d11c      	bne.n	800b33e <phalICode_Int_SetOptionBit+0xbe>
    {
        /* Set special frame EOF timeout. */
        if(bOption != PHAL_ICODE_OPTION_OFF)
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00c      	beq.n	800b324 <phalICode_Int_SetOptionBit+0xa4>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b30a:	f244 12d2 	movw	r2, #16850	@ 0x41d2
 800b30e:	2102      	movs	r1, #2
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f00a ffcd 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 800b316:	4603      	mov	r3, r0
 800b318:	81bb      	strh	r3, [r7, #12]
 800b31a:	89bb      	ldrh	r3, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00e      	beq.n	800b33e <phalICode_Int_SetOptionBit+0xbe>
 800b320:	89bb      	ldrh	r3, [r7, #12]
 800b322:	e00d      	b.n	800b340 <phalICode_Int_SetOptionBit+0xc0>
        }

        /* Set long timeout. */
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b324:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b328:	2102      	movs	r1, #2
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f00a ffc0 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 800b330:	4603      	mov	r3, r0
 800b332:	81bb      	strh	r3, [r7, #12]
 800b334:	89bb      	ldrh	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <phalICode_Int_SetOptionBit+0xbe>
 800b33a:	89bb      	ldrh	r3, [r7, #12]
 800b33c:	e000      	b.n	800b340 <phalICode_Int_SetOptionBit+0xc0>
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,
                PHPAL_SLI15693_TIMEOUT_LONG_US));
        }
    }

    return PH_ERR_SUCCESS;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <phalICode_Int_WriteAlikeHandling>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_WriteAlikeHandling(void * pPalSli15693DataParams, phStatus_t wExchangeStatus)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08c      	sub	sp, #48	@ 0x30
 800b34c:	af04      	add	r7, sp, #16
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	807b      	strh	r3, [r7, #2]
    uint8_t     PH_MEMLOC_REM bDsfid = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	77fb      	strb	r3, [r7, #31]
    uint8_t     PH_MEMLOC_REM bUid[PHPAL_SLI15693_UID_LENGTH];
    uint8_t     PH_MEMLOC_REM bUidLen = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	74fb      	strb	r3, [r7, #19]
    uint8_t     PH_MEMLOC_REM aData[1];
    uint16_t    PH_MEMLOC_REM wDataLen = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	81fb      	strh	r3, [r7, #14]

    switch (wExchangeStatus & PH_ERR_MASK)
 800b360:	887b      	ldrh	r3, [r7, #2]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b05      	cmp	r3, #5
 800b366:	d83a      	bhi.n	800b3de <phalICode_Int_WriteAlikeHandling+0x96>
 800b368:	a201      	add	r2, pc, #4	@ (adr r2, 800b370 <phalICode_Int_WriteAlikeHandling+0x28>)
 800b36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36e:	bf00      	nop
 800b370:	0800b389 	.word	0x0800b389
 800b374:	0800b38f 	.word	0x0800b38f
 800b378:	0800b3b7 	.word	0x0800b3b7
 800b37c:	0800b3b7 	.word	0x0800b3b7
 800b380:	0800b3df 	.word	0x0800b3df
 800b384:	0800b3b7 	.word	0x0800b3b7
    {
    /* Check for protocol error.  */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_ICODE);
 800b388:	f241 5306 	movw	r3, #5382	@ 0x1506
 800b38c:	e028      	b.n	800b3e0 <phalICode_Int_WriteAlikeHandling+0x98>

        /* Timeout is correct behaviour, send EOF. */
    case PH_ERR_IO_TIMEOUT:
        /* card answers after next EOF -> correct status is timeout */
        return phpalSli15693_SendEof(
 800b38e:	f107 0114 	add.w	r1, r7, #20
 800b392:	f107 021f 	add.w	r2, r7, #31
 800b396:	f107 030e 	add.w	r3, r7, #14
 800b39a:	9302      	str	r3, [sp, #8]
 800b39c:	f107 0310 	add.w	r3, r7, #16
 800b3a0:	9301      	str	r3, [sp, #4]
 800b3a2:	f107 0313 	add.w	r3, r7, #19
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	2102      	movs	r1, #2
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f00a fc22 	bl	8015bf6 <phpalSli15693_Sw_SendEof>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	e014      	b.n	800b3e0 <phalICode_Int_WriteAlikeHandling+0x98>

        /* Framing errors etc. are ignored and the waiting until EOF sending is continued. */
    case PH_ERR_INTEGRITY_ERROR:
    case PH_ERR_COLLISION_ERROR:
    case PH_ERR_FRAMING_ERROR:
        return phpalSli15693_SendEof(
 800b3b6:	f107 0114 	add.w	r1, r7, #20
 800b3ba:	f107 021f 	add.w	r2, r7, #31
 800b3be:	f107 030e 	add.w	r3, r7, #14
 800b3c2:	9302      	str	r3, [sp, #8]
 800b3c4:	f107 0310 	add.w	r3, r7, #16
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	f107 0313 	add.w	r3, r7, #19
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	2103      	movs	r1, #3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f00a fc0e 	bl	8015bf6 <phpalSli15693_Sw_SendEof>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	e000      	b.n	800b3e0 <phalICode_Int_WriteAlikeHandling+0x98>
                aData,
                &wDataLen);

        /* Directly return all other errors */
    default:
        return wExchangeStatus;
 800b3de:	887b      	ldrh	r3, [r7, #2]
    }
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3720      	adds	r7, #32
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <phalICode_Int_ComputeErrorCode>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_ComputeErrorCode(void * pPalSli15693DataParams, phStatus_t wStatus)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM wStatusTmp = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wValue = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	81bb      	strh	r3, [r7, #12]

    /* Update the temporary status variable. */
    wStatusTmp = wStatus;
 800b3fc:	887b      	ldrh	r3, [r7, #2]
 800b3fe:	81fb      	strh	r3, [r7, #14]

    /*  Compute the custom error codes in case PAL returns an error. */
    if((wStatus & PH_ERR_MASK) == PHPAL_SLI15693_ERR_ISO15693)
 800b400:	887b      	ldrh	r3, [r7, #2]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b80      	cmp	r3, #128	@ 0x80
 800b406:	f040 80d4 	bne.w	800b5b2 <phalICode_Int_ComputeErrorCode+0x1ca>
    {
        /* Get the error code from additional info. */
        PH_CHECK_SUCCESS_FCT(wStatusTmp, phpalSli15693_GetConfig(
 800b40a:	f107 030c 	add.w	r3, r7, #12
 800b40e:	461a      	mov	r2, r3
 800b410:	2101      	movs	r1, #1
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f00b f922 	bl	801665c <phpalSli15693_Sw_GetConfig>
 800b418:	4603      	mov	r3, r0
 800b41a:	81fb      	strh	r3, [r7, #14]
 800b41c:	89fb      	ldrh	r3, [r7, #14]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <phalICode_Int_ComputeErrorCode+0x3e>
 800b422:	89fb      	ldrh	r3, [r7, #14]
 800b424:	e0c6      	b.n	800b5b4 <phalICode_Int_ComputeErrorCode+0x1cc>
                pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_ADD_INFO,
                &wValue));

        /* Compute the custom code. */
        if((wValue >= 0xA0U) && (wValue <= 0xDFU))
 800b426:	89bb      	ldrh	r3, [r7, #12]
 800b428:	2b9f      	cmp	r3, #159	@ 0x9f
 800b42a:	d905      	bls.n	800b438 <phalICode_Int_ComputeErrorCode+0x50>
 800b42c:	89bb      	ldrh	r3, [r7, #12]
 800b42e:	2bdf      	cmp	r3, #223	@ 0xdf
 800b430:	d802      	bhi.n	800b438 <phalICode_Int_ComputeErrorCode+0x50>
        {
            /* Error mapping for error codes returned by Custom commands. */
            wStatusTmp = PHAL_ICODE_ERR_CUSTOM_COMMANDS_ERROR;
 800b432:	2380      	movs	r3, #128	@ 0x80
 800b434:	81fb      	strh	r3, [r7, #14]
 800b436:	e0ab      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
        }
        else
        {
            switch(wValue)
 800b438:	89bb      	ldrh	r3, [r7, #12]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	2b3f      	cmp	r3, #63	@ 0x3f
 800b43e:	f200 80a4 	bhi.w	800b58a <phalICode_Int_ComputeErrorCode+0x1a2>
 800b442:	a201      	add	r2, pc, #4	@ (adr r2, 800b448 <phalICode_Int_ComputeErrorCode+0x60>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b549 	.word	0x0800b549
 800b44c:	0800b54f 	.word	0x0800b54f
 800b450:	0800b555 	.word	0x0800b555
 800b454:	0800b58b 	.word	0x0800b58b
 800b458:	0800b58b 	.word	0x0800b58b
 800b45c:	0800b58b 	.word	0x0800b58b
 800b460:	0800b58b 	.word	0x0800b58b
 800b464:	0800b58b 	.word	0x0800b58b
 800b468:	0800b58b 	.word	0x0800b58b
 800b46c:	0800b58b 	.word	0x0800b58b
 800b470:	0800b58b 	.word	0x0800b58b
 800b474:	0800b58b 	.word	0x0800b58b
 800b478:	0800b58b 	.word	0x0800b58b
 800b47c:	0800b58b 	.word	0x0800b58b
 800b480:	0800b55b 	.word	0x0800b55b
 800b484:	0800b561 	.word	0x0800b561
 800b488:	0800b567 	.word	0x0800b567
 800b48c:	0800b56d 	.word	0x0800b56d
 800b490:	0800b573 	.word	0x0800b573
 800b494:	0800b579 	.word	0x0800b579
 800b498:	0800b57f 	.word	0x0800b57f
 800b49c:	0800b58b 	.word	0x0800b58b
 800b4a0:	0800b58b 	.word	0x0800b58b
 800b4a4:	0800b58b 	.word	0x0800b58b
 800b4a8:	0800b58b 	.word	0x0800b58b
 800b4ac:	0800b58b 	.word	0x0800b58b
 800b4b0:	0800b58b 	.word	0x0800b58b
 800b4b4:	0800b58b 	.word	0x0800b58b
 800b4b8:	0800b58b 	.word	0x0800b58b
 800b4bc:	0800b58b 	.word	0x0800b58b
 800b4c0:	0800b58b 	.word	0x0800b58b
 800b4c4:	0800b58b 	.word	0x0800b58b
 800b4c8:	0800b58b 	.word	0x0800b58b
 800b4cc:	0800b58b 	.word	0x0800b58b
 800b4d0:	0800b58b 	.word	0x0800b58b
 800b4d4:	0800b58b 	.word	0x0800b58b
 800b4d8:	0800b58b 	.word	0x0800b58b
 800b4dc:	0800b58b 	.word	0x0800b58b
 800b4e0:	0800b58b 	.word	0x0800b58b
 800b4e4:	0800b58b 	.word	0x0800b58b
 800b4e8:	0800b58b 	.word	0x0800b58b
 800b4ec:	0800b58b 	.word	0x0800b58b
 800b4f0:	0800b58b 	.word	0x0800b58b
 800b4f4:	0800b58b 	.word	0x0800b58b
 800b4f8:	0800b58b 	.word	0x0800b58b
 800b4fc:	0800b58b 	.word	0x0800b58b
 800b500:	0800b58b 	.word	0x0800b58b
 800b504:	0800b58b 	.word	0x0800b58b
 800b508:	0800b58b 	.word	0x0800b58b
 800b50c:	0800b58b 	.word	0x0800b58b
 800b510:	0800b58b 	.word	0x0800b58b
 800b514:	0800b58b 	.word	0x0800b58b
 800b518:	0800b58b 	.word	0x0800b58b
 800b51c:	0800b58b 	.word	0x0800b58b
 800b520:	0800b58b 	.word	0x0800b58b
 800b524:	0800b58b 	.word	0x0800b58b
 800b528:	0800b58b 	.word	0x0800b58b
 800b52c:	0800b58b 	.word	0x0800b58b
 800b530:	0800b58b 	.word	0x0800b58b
 800b534:	0800b58b 	.word	0x0800b58b
 800b538:	0800b58b 	.word	0x0800b58b
 800b53c:	0800b58b 	.word	0x0800b58b
 800b540:	0800b58b 	.word	0x0800b58b
 800b544:	0800b585 	.word	0x0800b585
            {
            case PHAL_ICODE_RESP_ERR_COMMAND_NOT_SUPPORTED          : wStatusTmp = PHAL_ICODE_ERR_COMMAND_NOT_SUPPORTED;        break;
 800b548:	2381      	movs	r3, #129	@ 0x81
 800b54a:	81fb      	strh	r3, [r7, #14]
 800b54c:	e020      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_COMMAND_NOT_RECOGNIZED         : wStatusTmp = PHAL_ICODE_ERR_COMMAND_NOT_RECOGNIZED;       break;
 800b54e:	2382      	movs	r3, #130	@ 0x82
 800b550:	81fb      	strh	r3, [r7, #14]
 800b552:	e01d      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_COMMAND_OPTION_NOT_SUPPORTED   : wStatusTmp = PHAL_ICODE_ERR_COMMAND_OPTION_NOT_SUPPORTED; break;
 800b554:	2383      	movs	r3, #131	@ 0x83
 800b556:	81fb      	strh	r3, [r7, #14]
 800b558:	e01a      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_NO_INFORMATION                 : wStatusTmp = PHAL_ICODE_ERR_NO_INFORMATION;               break;
 800b55a:	2384      	movs	r3, #132	@ 0x84
 800b55c:	81fb      	strh	r3, [r7, #14]
 800b55e:	e017      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_NOT_AVAILABLE            : wStatusTmp = PHAL_ICODE_ERR_BLOCK_NOT_AVAILABLE;          break;
 800b560:	2385      	movs	r3, #133	@ 0x85
 800b562:	81fb      	strh	r3, [r7, #14]
 800b564:	e014      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_LOCKED                   : wStatusTmp = PHAL_ICODE_ERR_BLOCK_LOCKED;                 break;
 800b566:	2386      	movs	r3, #134	@ 0x86
 800b568:	81fb      	strh	r3, [r7, #14]
 800b56a:	e011      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_CONTENT_CHANGE_FAILURE         : wStatusTmp = PHAL_ICODE_ERR_CONTENT_CHANGE_FAILURE;       break;
 800b56c:	2387      	movs	r3, #135	@ 0x87
 800b56e:	81fb      	strh	r3, [r7, #14]
 800b570:	e00e      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_PROGRAMMING_FAILURE      : wStatusTmp = PHAL_ICODE_ERR_BLOCK_PROGRAMMING_FAILURE;    break;
 800b572:	2388      	movs	r3, #136	@ 0x88
 800b574:	81fb      	strh	r3, [r7, #14]
 800b576:	e00b      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_NOT_LOCKED               : wStatusTmp = PHAL_ICODE_ERR_BLOCK_NOT_LOCKED;             break;
 800b578:	2389      	movs	r3, #137	@ 0x89
 800b57a:	81fb      	strh	r3, [r7, #14]
 800b57c:	e008      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_PROTECTED                : wStatusTmp = PHAL_ICODE_ERR_BLOCK_PROTECTED;              break;
 800b57e:	238a      	movs	r3, #138	@ 0x8a
 800b580:	81fb      	strh	r3, [r7, #14]
 800b582:	e005      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_GENERIC_CRYPTO_ERROR           : wStatusTmp = PHAL_ICODE_ERR_GENERIC_CRYPTO_ERROR;         break;
 800b584:	238b      	movs	r3, #139	@ 0x8b
 800b586:	81fb      	strh	r3, [r7, #14]
 800b588:	e002      	b.n	800b590 <phalICode_Int_ComputeErrorCode+0x1a8>

            default: wStatusTmp = PH_ERR_PROTOCOL_ERROR; break;
 800b58a:	2306      	movs	r3, #6
 800b58c:	81fb      	strh	r3, [r7, #14]
 800b58e:	bf00      	nop
            }
        }

        /* Merge the status code with component code. */
        wStatusTmp = PH_ADD_COMPCODE(wStatusTmp, PH_COMP_AL_ICODE);
 800b590:	89fb      	ldrh	r3, [r7, #14]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00b      	beq.n	800b5ae <phalICode_Int_ComputeErrorCode+0x1c6>
 800b596:	89fb      	ldrh	r3, [r7, #14]
 800b598:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d106      	bne.n	800b5ae <phalICode_Int_ComputeErrorCode+0x1c6>
 800b5a0:	89fb      	ldrh	r3, [r7, #14]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	f443 53a8 	orr.w	r3, r3, #5376	@ 0x1500
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	e000      	b.n	800b5b0 <phalICode_Int_ComputeErrorCode+0x1c8>
 800b5ae:	89fb      	ldrh	r3, [r7, #14]
 800b5b0:	81fb      	strh	r3, [r7, #14]
    }

    return wStatusTmp;
 800b5b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <phalICode_Int_ReadSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_ReadSingleBlock(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t ** ppData,
        uint16_t * pDataLen)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	607b      	str	r3, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	72fb      	strb	r3, [r7, #11]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM aCmdBuff[2];
    uint16_t    PH_MEMLOC_REM wOpeMode = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	827b      	strh	r3, [r7, #18]

    /* Frame ReadSingleBlock command information. */
    aCmdBuff[0] = PHAL_ICODE_CMD_READ_SINGLE_BLOCK;
 800b5d6:	2320      	movs	r3, #32
 800b5d8:	753b      	strb	r3, [r7, #20]
    aCmdBuff[1] = bBlockNo;
 800b5da:	7abb      	ldrb	r3, [r7, #10]
 800b5dc:	757b      	strb	r3, [r7, #21]

    /* Set or clear the flags option bit indicated by bOption. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_SetOptionBit(
 800b5de:	7afb      	ldrb	r3, [r7, #11]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7ff fe4b 	bl	800b280 <phalICode_Int_SetOptionBit>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	82fb      	strh	r3, [r7, #22]
 800b5ee:	8afb      	ldrh	r3, [r7, #22]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <phalICode_Int_ReadSingleBlock+0x3c>
 800b5f4:	8afb      	ldrh	r3, [r7, #22]
 800b5f6:	e044      	b.n	800b682 <phalICode_Int_ReadSingleBlock+0xc6>
            pPalSli15693DataParams,
            bOption,
            PH_OFF));

    /* Get Operation mode. */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b5f8:	f107 0312 	add.w	r3, r7, #18
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	210a      	movs	r1, #10
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f00b f82b 	bl	801665c <phpalSli15693_Sw_GetConfig>
 800b606:	4603      	mov	r3, r0
 800b608:	82fb      	strh	r3, [r7, #22]
 800b60a:	8afb      	ldrh	r3, [r7, #22]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <phalICode_Int_ReadSingleBlock+0x58>
 800b610:	8afb      	ldrh	r3, [r7, #22]
 800b612:	e036      	b.n	800b682 <phalICode_Int_ReadSingleBlock+0xc6>
            pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_OPE_MODE,
            &wOpeMode));

    if(wOpeMode == RD_LIB_MODE_NFC)
 800b614:	8a7b      	ldrh	r3, [r7, #18]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d10c      	bne.n	800b634 <phalICode_Int_ReadSingleBlock+0x78>
    {
        /* Set short + Tolerance(Delta) Timeout(50ms). */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b61a:	f24c 4294 	movw	r2, #50324	@ 0xc494
 800b61e:	2102      	movs	r1, #2
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f00a fe45 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 800b626:	4603      	mov	r3, r0
 800b628:	82fb      	strh	r3, [r7, #22]
 800b62a:	8afb      	ldrh	r3, [r7, #22]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00e      	beq.n	800b64e <phalICode_Int_ReadSingleBlock+0x92>
 800b630:	8afb      	ldrh	r3, [r7, #22]
 800b632:	e026      	b.n	800b682 <phalICode_Int_ReadSingleBlock+0xc6>
                PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US));
    }
    else
    {
        /* Set short + Tolerance(Delta) Timeout. */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b634:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800b638:	2102      	movs	r1, #2
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f00a fe38 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 800b640:	4603      	mov	r3, r0
 800b642:	82fb      	strh	r3, [r7, #22]
 800b644:	8afb      	ldrh	r3, [r7, #22]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <phalICode_Int_ReadSingleBlock+0x92>
 800b64a:	8afb      	ldrh	r3, [r7, #22]
 800b64c:	e019      	b.n	800b682 <phalICode_Int_ReadSingleBlock+0xc6>
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,
                PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US));
    }

    /* Exchange the command information to PAL layer. */
    wStatus = phpalSli15693_Exchange(
 800b64e:	f107 0214 	add.w	r2, r7, #20
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	2302      	movs	r3, #2
 800b65c:	2100      	movs	r1, #0
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f00a fcf3 	bl	801604a <phpalSli15693_Sw_Exchange>
 800b664:	4603      	mov	r3, r0
 800b666:	82fb      	strh	r3, [r7, #22]
            2,
            ppData,
            pDataLen);

    /* Compute the status code. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_ComputeErrorCode(pPalSli15693DataParams, wStatus));
 800b668:	8afb      	ldrh	r3, [r7, #22]
 800b66a:	4619      	mov	r1, r3
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7ff febb 	bl	800b3e8 <phalICode_Int_ComputeErrorCode>
 800b672:	4603      	mov	r3, r0
 800b674:	82fb      	strh	r3, [r7, #22]
 800b676:	8afb      	ldrh	r3, [r7, #22]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <phalICode_Int_ReadSingleBlock+0xc4>
 800b67c:	8afb      	ldrh	r3, [r7, #22]
 800b67e:	e000      	b.n	800b682 <phalICode_Int_ReadSingleBlock+0xc6>

    return PH_ERR_SUCCESS;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <phalICode_Int_WriteSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_WriteSingleBlock(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t * pData,
        uint8_t bDataLen)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b08a      	sub	sp, #40	@ 0x28
 800b68e:	af02      	add	r7, sp, #8
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	607b      	str	r3, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	72fb      	strb	r3, [r7, #11]
 800b698:	4613      	mov	r3, r2
 800b69a:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM aCmdBuff[2];
    uint8_t *   PH_MEMLOC_REM pResponse = NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	82fb      	strh	r3, [r7, #22]

    /* Frame WriteSingleBlock command. */
    aCmdBuff[0] = PHAL_ICODE_CMD_WRITE_SINGLE_BLOCK;
 800b6a8:	2321      	movs	r3, #33	@ 0x21
 800b6aa:	773b      	strb	r3, [r7, #28]
    aCmdBuff[1] = bBlockNo;
 800b6ac:	7abb      	ldrb	r3, [r7, #10]
 800b6ae:	777b      	strb	r3, [r7, #29]

    /* Set or clear the flags option bit indicated by bOption. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_SetOptionBit(
 800b6b0:	7afb      	ldrb	r3, [r7, #11]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff fde2 	bl	800b280 <phalICode_Int_SetOptionBit>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	83fb      	strh	r3, [r7, #30]
 800b6c0:	8bfb      	ldrh	r3, [r7, #30]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <phalICode_Int_WriteSingleBlock+0x40>
 800b6c6:	8bfb      	ldrh	r3, [r7, #30]
 800b6c8:	e03b      	b.n	800b742 <phalICode_Int_WriteSingleBlock+0xb8>
            pPalSli15693DataParams,
            bOption,
            PH_ON));

    /* Buffer the command information to exchange buffer. */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_Exchange(
 800b6ca:	f107 021c 	add.w	r2, r7, #28
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f00a fcb4 	bl	801604a <phpalSli15693_Sw_Exchange>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	83fb      	strh	r3, [r7, #30]
 800b6e6:	8bfb      	ldrh	r3, [r7, #30]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <phalICode_Int_WriteSingleBlock+0x66>
 800b6ec:	8bfb      	ldrh	r3, [r7, #30]
 800b6ee:	e028      	b.n	800b742 <phalICode_Int_WriteSingleBlock+0xb8>
            2,
            NULL,
            NULL));

    /* Buffer the data to exchange buffer and exchange the bufferred information to PAL layer. */
    wStatus = phpalSli15693_Exchange(
 800b6f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	f107 0316 	add.w	r3, r7, #22
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	f107 0318 	add.w	r3, r7, #24
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	4613      	mov	r3, r2
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f00a fc9d 	bl	801604a <phpalSli15693_Sw_Exchange>
 800b710:	4603      	mov	r3, r0
 800b712:	83fb      	strh	r3, [r7, #30]
            bDataLen,
            &pResponse,
            &wRespLen);

    /* Write-alike handling */
    if (0U != (bOption))
 800b714:	7afb      	ldrb	r3, [r7, #11]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d006      	beq.n	800b728 <phalICode_Int_WriteSingleBlock+0x9e>
    {
        wStatus = phalICode_Int_WriteAlikeHandling(pPalSli15693DataParams, wStatus);
 800b71a:	8bfb      	ldrh	r3, [r7, #30]
 800b71c:	4619      	mov	r1, r3
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fe12 	bl	800b348 <phalICode_Int_WriteAlikeHandling>
 800b724:	4603      	mov	r3, r0
 800b726:	83fb      	strh	r3, [r7, #30]
    }

    /* Compute the status code. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_ComputeErrorCode(pPalSli15693DataParams, wStatus));
 800b728:	8bfb      	ldrh	r3, [r7, #30]
 800b72a:	4619      	mov	r1, r3
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff fe5b 	bl	800b3e8 <phalICode_Int_ComputeErrorCode>
 800b732:	4603      	mov	r3, r0
 800b734:	83fb      	strh	r3, [r7, #30]
 800b736:	8bfb      	ldrh	r3, [r7, #30]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <phalICode_Int_WriteSingleBlock+0xb6>
 800b73c:	8bfb      	ldrh	r3, [r7, #30]
 800b73e:	e000      	b.n	800b742 <phalICode_Int_WriteSingleBlock+0xb8>

    return PH_ERR_SUCCESS;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3720      	adds	r7, #32
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	603b      	str	r3, [r7, #0]
 800b756:	460b      	mov	r3, r1
 800b758:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800b75a:	897b      	ldrh	r3, [r7, #10]
 800b75c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b75e:	d002      	beq.n	800b766 <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800b760:	f242 6320 	movw	r3, #9760	@ 0x2620
 800b764:	e0a1      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <phalMfNtag42XDna_Sw_Init+0x28>
 800b76c:	f242 6320 	movw	r3, #9760	@ 0x2620
 800b770:	e09b      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <phalMfNtag42XDna_Sw_Init+0x34>
 800b778:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b77c:	e095      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <phalMfNtag42XDna_Sw_Init+0x40>
 800b784:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b788:	e08f      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d102      	bne.n	800b796 <phalMfNtag42XDna_Sw_Init+0x4c>
 800b790:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b794:	e089      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <phalMfNtag42XDna_Sw_Init+0x58>
 800b79c:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b7a0:	e083      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d102      	bne.n	800b7ae <phalMfNtag42XDna_Sw_Init+0x64>
 800b7a8:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b7ac:	e07d      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <phalMfNtag42XDna_Sw_Init+0x70>
 800b7b4:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b7b8:	e077      	b.n	800b8aa <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f242 6201 	movw	r2, #9729	@ 0x2601
 800b7c0:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	69ba      	ldr	r2, [r7, #24]
 800b7d2:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	69fa      	ldr	r2, [r7, #28]
 800b7d8:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a3a      	ldr	r2, [r7, #32]
 800b7de:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e4:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b7ec:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	331c      	adds	r3, #28
 800b7fc:	2218      	movs	r2, #24
 800b7fe:	2100      	movs	r1, #0
 800b800:	4618      	mov	r0, r3
 800b802:	f011 fe85 	bl	801d510 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	22ff      	movs	r2, #255	@ 0xff
 800b80a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3335      	adds	r3, #53	@ 0x35
 800b812:	2210      	movs	r2, #16
 800b814:	2100      	movs	r1, #0
 800b816:	4618      	mov	r0, r3
 800b818:	f011 fe7a 	bl	801d510 <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3346      	adds	r3, #70	@ 0x46
 800b820:	2203      	movs	r2, #3
 800b822:	2100      	movs	r1, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f011 fe73 	bl	801d510 <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	22ff      	movs	r2, #255	@ 0xff
 800b82e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	22ff      	movs	r2, #255	@ 0xff
 800b83e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	335e      	adds	r3, #94	@ 0x5e
 800b864:	2204      	movs	r2, #4
 800b866:	2100      	movs	r1, #0
 800b868:	4618      	mov	r0, r3
 800b86a:	f011 fe51 	bl	801d510 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3362      	adds	r3, #98	@ 0x62
 800b872:	2210      	movs	r2, #16
 800b874:	2100      	movs	r1, #0
 800b876:	4618      	mov	r0, r3
 800b878:	f011 fe4a 	bl	801d510 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	3382      	adds	r3, #130	@ 0x82
 800b880:	2210      	movs	r2, #16
 800b882:	2100      	movs	r1, #0
 800b884:	4618      	mov	r0, r3
 800b886:	f011 fe43 	bl	801d510 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3393      	adds	r3, #147	@ 0x93
 800b896:	2210      	movs	r2, #16
 800b898:	2100      	movs	r1, #0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f011 fe38 	bl	801d510 <memset>
    pDataParams->bLastBlockIndex = 0;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b085      	sub	sp, #20
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	60f8      	str	r0, [r7, #12]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800b8c2:	897b      	ldrh	r3, [r7, #10]
 800b8c4:	2b0c      	cmp	r3, #12
 800b8c6:	d002      	beq.n	800b8ce <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800b8c8:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800b8cc:	e014      	b.n	800b8f8 <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <phalMfc_Sw_Init+0x26>
 800b8d4:	2321      	movs	r3, #33	@ 0x21
 800b8d6:	e00f      	b.n	800b8f8 <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <phalMfc_Sw_Init+0x30>
 800b8de:	2321      	movs	r3, #33	@ 0x21
 800b8e0:	e00a      	b.n	800b8f8 <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f241 0201 	movw	r2, #4097	@ 0x1001
 800b8e8:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	607a      	str	r2, [r7, #4]
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	460b      	mov	r3, r1
 800b912:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800b914:	897b      	ldrh	r3, [r7, #10]
 800b916:	2b68      	cmp	r3, #104	@ 0x68
 800b918:	d002      	beq.n	800b920 <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800b91a:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800b91e:	e057      	b.n	800b9d0 <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <phalMfdf_Sw_Init+0x26>
 800b926:	2321      	movs	r3, #33	@ 0x21
 800b928:	e052      	b.n	800b9d0 <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <phalMfdf_Sw_Init+0x30>
 800b930:	2321      	movs	r3, #33	@ 0x21
 800b932:	e04d      	b.n	800b9d0 <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f641 1201 	movw	r2, #6401	@ 0x1901
 800b93a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	69fa      	ldr	r2, [r7, #28]
 800b952:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a3a      	ldr	r2, [r7, #32]
 800b960:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b968:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295
 800b972:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3318      	adds	r3, #24
 800b978:	2218      	movs	r2, #24
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f011 fdc7 	bl	801d510 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	22ff      	movs	r2, #255	@ 0xff
 800b986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3331      	adds	r3, #49	@ 0x31
 800b98e:	2210      	movs	r2, #16
 800b990:	2100      	movs	r1, #0
 800b992:	4618      	mov	r0, r3
 800b994:	f011 fdbc 	bl	801d510 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3342      	adds	r3, #66	@ 0x42
 800b99c:	2203      	movs	r2, #3
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f011 fdb5 	bl	801d510 <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	22ff      	movs	r2, #255	@ 0xff
 800b9aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	22ff      	movs	r2, #255	@ 0xff
 800b9ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	607a      	str	r2, [r7, #4]
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800b9e8:	897b      	ldrh	r3, [r7, #10]
 800b9ea:	2bb4      	cmp	r3, #180	@ 0xb4
 800b9ec:	d002      	beq.n	800b9f4 <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800b9ee:	f242 0320 	movw	r3, #8224	@ 0x2020
 800b9f2:	e09f      	b.n	800bb34 <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <phalMfdfEVx_Sw_Init+0x28>
 800b9fa:	f242 0320 	movw	r3, #8224	@ 0x2020
 800b9fe:	e099      	b.n	800bb34 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <phalMfdfEVx_Sw_Init+0x34>
 800ba06:	f242 0321 	movw	r3, #8225	@ 0x2021
 800ba0a:	e093      	b.n	800bb34 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <phalMfdfEVx_Sw_Init+0x40>
 800ba12:	f242 0321 	movw	r3, #8225	@ 0x2021
 800ba16:	e08d      	b.n	800bb34 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800ba18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <phalMfdfEVx_Sw_Init+0x4c>
 800ba1e:	f242 0321 	movw	r3, #8225	@ 0x2021
 800ba22:	e087      	b.n	800bb34 <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f242 0201 	movw	r2, #8193	@ 0x2001
 800ba2a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a3a      	ldr	r2, [r7, #32]
 800ba48:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba5e:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f246 3263 	movw	r2, #25443	@ 0x6363
 800ba66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba70:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	331c      	adds	r3, #28
 800ba76:	2218      	movs	r2, #24
 800ba78:	2100      	movs	r1, #0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f011 fd48 	bl	801d510 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	22ff      	movs	r2, #255	@ 0xff
 800ba84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3335      	adds	r3, #53	@ 0x35
 800ba8c:	2210      	movs	r2, #16
 800ba8e:	2100      	movs	r1, #0
 800ba90:	4618      	mov	r0, r3
 800ba92:	f011 fd3d 	bl	801d510 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3347      	adds	r3, #71	@ 0x47
 800ba9a:	2203      	movs	r2, #3
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f011 fd36 	bl	801d510 <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	22ff      	movs	r2, #255	@ 0xff
 800baa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	22ff      	movs	r2, #255	@ 0xff
 800bab8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	335e      	adds	r3, #94	@ 0x5e
 800bade:	2204      	movs	r2, #4
 800bae0:	2100      	movs	r1, #0
 800bae2:	4618      	mov	r0, r3
 800bae4:	f011 fd14 	bl	801d510 <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	3362      	adds	r3, #98	@ 0x62
 800baec:	2210      	movs	r2, #16
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f011 fd0d 	bl	801d510 <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3372      	adds	r3, #114	@ 0x72
 800bafa:	2210      	movs	r2, #16
 800bafc:	2100      	movs	r1, #0
 800bafe:	4618      	mov	r0, r3
 800bb00:	f011 fd06 	bl	801d510 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3383      	adds	r3, #131	@ 0x83
 800bb10:	2210      	movs	r2, #16
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f011 fcfb 	bl	801d510 <memset>
    pDataParams->bLastBlockIndex = 0;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	22ff      	movs	r2, #255	@ 0xff
 800bb26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	603b      	str	r3, [r7, #0]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800bb4c:	897b      	ldrh	r3, [r7, #10]
 800bb4e:	2bac      	cmp	r3, #172	@ 0xac
 800bb50:	d002      	beq.n	800bb58 <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800bb52:	f242 3320 	movw	r3, #8992	@ 0x2320
 800bb56:	e0ab      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d102      	bne.n	800bb64 <phalMfdfLight_Sw_Init+0x28>
 800bb5e:	f242 3320 	movw	r3, #8992	@ 0x2320
 800bb62:	e0a5      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d102      	bne.n	800bb70 <phalMfdfLight_Sw_Init+0x34>
 800bb6a:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb6e:	e09f      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <phalMfdfLight_Sw_Init+0x40>
 800bb76:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb7a:	e099      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d102      	bne.n	800bb88 <phalMfdfLight_Sw_Init+0x4c>
 800bb82:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb86:	e093      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d102      	bne.n	800bb94 <phalMfdfLight_Sw_Init+0x58>
 800bb8e:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb92:	e08d      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d102      	bne.n	800bba0 <phalMfdfLight_Sw_Init+0x64>
 800bb9a:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb9e:	e087      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d102      	bne.n	800bbac <phalMfdfLight_Sw_Init+0x70>
 800bba6:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bbaa:	e081      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800bbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <phalMfdfLight_Sw_Init+0x7c>
 800bbb2:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bbb6:	e07b      	b.n	800bcb0 <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f242 3201 	movw	r2, #8961	@ 0x2301
 800bbbe:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a3a      	ldr	r2, [r7, #32]
 800bbdc:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbea:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f246 3263 	movw	r2, #25443	@ 0x6363
 800bbf2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfc:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	331c      	adds	r3, #28
 800bc02:	2218      	movs	r2, #24
 800bc04:	2100      	movs	r1, #0
 800bc06:	4618      	mov	r0, r3
 800bc08:	f011 fc82 	bl	801d510 <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	22ff      	movs	r2, #255	@ 0xff
 800bc10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3335      	adds	r3, #53	@ 0x35
 800bc18:	2210      	movs	r2, #16
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f011 fc77 	bl	801d510 <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3346      	adds	r3, #70	@ 0x46
 800bc26:	2203      	movs	r2, #3
 800bc28:	2100      	movs	r1, #0
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f011 fc70 	bl	801d510 <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	22ff      	movs	r2, #255	@ 0xff
 800bc34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	22ff      	movs	r2, #255	@ 0xff
 800bc44:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	335e      	adds	r3, #94	@ 0x5e
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f011 fc4e 	bl	801d510 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3362      	adds	r3, #98	@ 0x62
 800bc78:	2210      	movs	r2, #16
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f011 fc47 	bl	801d510 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3382      	adds	r3, #130	@ 0x82
 800bc86:	2210      	movs	r2, #16
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f011 fc40 	bl	801d510 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3393      	adds	r3, #147	@ 0x93
 800bc9c:	2210      	movs	r2, #16
 800bc9e:	2100      	movs	r1, #0
 800bca0:	4618      	mov	r0, r3
 800bca2:	f011 fc35 	bl	801d510 <memset>
    pDataParams->bLastBlockIndex = 0;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	607a      	str	r2, [r7, #4]
 800bcc2:	603b      	str	r3, [r7, #0]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800bccc:	897b      	ldrh	r3, [r7, #10]
 800bcce:	2b84      	cmp	r3, #132	@ 0x84
 800bcd0:	d002      	beq.n	800bcd8 <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800bcd2:	f242 1320 	movw	r3, #8480	@ 0x2120
 800bcd6:	e063      	b.n	800bda0 <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d102      	bne.n	800bce4 <phalMfpEVx_Sw_Init+0x2c>
 800bcde:	f242 1320 	movw	r3, #8480	@ 0x2120
 800bce2:	e05d      	b.n	800bda0 <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <phalMfpEVx_Sw_Init+0x38>
 800bcea:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bcee:	e057      	b.n	800bda0 <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <phalMfpEVx_Sw_Init+0x44>
 800bcf6:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bcfa:	e051      	b.n	800bda0 <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <phalMfpEVx_Sw_Init+0x50>
 800bd02:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bd06:	e04b      	b.n	800bda0 <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f242 1201 	movw	r2, #8449	@ 0x2101
 800bd0e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a3a      	ldr	r2, [r7, #32]
 800bd20:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd26:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd2c:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd32:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd38:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd4e:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3360      	adds	r3, #96	@ 0x60
 800bd64:	2210      	movs	r2, #16
 800bd66:	2100      	movs	r1, #0
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f011 fbd1 	bl	801d510 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3370      	adds	r3, #112	@ 0x70
 800bd72:	2210      	movs	r2, #16
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f011 fbca 	bl	801d510 <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3350      	adds	r3, #80	@ 0x50
 800bd80:	2210      	movs	r2, #16
 800bd82:	2100      	movs	r1, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f011 fbc3 	bl	801d510 <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 f80c 	bl	800bda8 <phalMfpEVx_Sw_ResetSecMsgState>
 800bd90:	4603      	mov	r3, r0
 800bd92:	82fb      	strh	r3, [r7, #22]
 800bd94:	8afb      	ldrh	r3, [r7, #22]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <phalMfpEVx_Sw_Init+0xe6>
 800bd9a:	8afb      	ldrh	r3, [r7, #22]
 800bd9c:	e000      	b.n	800bda0 <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d009      	beq.n	800bdf6 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d004      	beq.n	800bdf6 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d104      	bne.n	800be00 <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2205      	movs	r2, #5
 800bdfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bdfe:	e012      	b.n	800be26 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800be06:	2b04      	cmp	r3, #4
 800be08:	d004      	beq.n	800be14 <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800be10:	2b01      	cmp	r3, #1
 800be12:	d104      	bne.n	800be1e <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2204      	movs	r2, #4
 800be18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800be1c:	e003      	b.n	800be26 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	3350      	adds	r3, #80	@ 0x50
 800be2a:	2210      	movs	r2, #16
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f011 fb6e 	bl	801d510 <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3360      	adds	r3, #96	@ 0x60
 800be38:	2210      	movs	r2, #16
 800be3a:	2100      	movs	r1, #0
 800be3c:	4618      	mov	r0, r3
 800be3e:	f011 fb67 	bl	801d510 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3370      	adds	r3, #112	@ 0x70
 800be46:	2210      	movs	r2, #16
 800be48:	2100      	movs	r1, #0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f011 fb60 	bl	801d510 <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	332a      	adds	r3, #42	@ 0x2a
 800be54:	2204      	movs	r2, #4
 800be56:	2100      	movs	r1, #0
 800be58:	4618      	mov	r0, r3
 800be5a:	f011 fb59 	bl	801d510 <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	2104      	movs	r1, #4
 800be64:	4618      	mov	r0, r3
 800be66:	f7fa fb27 	bl	80064b8 <phTMIUtils_ActivateTMICollection>
 800be6a:	4603      	mov	r3, r0
 800be6c:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d009      	beq.n	800be8a <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a18      	ldr	r0, [r3, #32]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3370      	adds	r3, #112	@ 0x70
 800be7e:	2200      	movs	r2, #0
 800be80:	4619      	mov	r1, r3
 800be82:	f000 fa8a 	bl	800c39a <phalVca_SetSessionKeyUtility>
 800be86:	4603      	mov	r3, r0
 800be88:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800be8a:	89fb      	ldrh	r3, [r7, #14]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800be90:	89fb      	ldrh	r3, [r7, #14]
 800be92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	e000      	b.n	800beaa <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800bea8:	89fb      	ldrh	r3, [r7, #14]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	60f8      	str	r0, [r7, #12]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
 800bebe:	460b      	mov	r3, r1
 800bec0:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800bec2:	897b      	ldrh	r3, [r7, #10]
 800bec4:	2b1c      	cmp	r3, #28
 800bec6:	d002      	beq.n	800bece <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800bec8:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800becc:	e026      	b.n	800bf1c <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <phalMful_Sw_Init+0x26>
 800bed4:	2321      	movs	r3, #33	@ 0x21
 800bed6:	e021      	b.n	800bf1c <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <phalMful_Sw_Init+0x30>
 800bede:	2321      	movs	r3, #33	@ 0x21
 800bee0:	e01c      	b.n	800bf1c <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f241 1201 	movw	r2, #4353	@ 0x1101
 800bee8:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	22ff      	movs	r2, #255	@ 0xff
 800bf06:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	460b      	mov	r3, r1
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800bf36:	897b      	ldrh	r3, [r7, #10]
 800bf38:	2b10      	cmp	r3, #16
 800bf3a:	d002      	beq.n	800bf42 <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800bf3c:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800bf40:	e011      	b.n	800bf66 <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <phalT1T_Sw_Init+0x24>
 800bf48:	2321      	movs	r3, #33	@ 0x21
 800bf4a:	e00c      	b.n	800bf66 <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <phalT1T_Sw_Init+0x2e>
 800bf52:	2321      	movs	r3, #33	@ 0x21
 800bf54:	e007      	b.n	800bf66 <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800bf5c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b08c      	sub	sp, #48	@ 0x30
 800bf76:	af02      	add	r7, sp, #8
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800bf82:	2307      	movs	r3, #7
 800bf84:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800bf86:	2304      	movs	r3, #4
 800bf88:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800bf8a:	2378      	movs	r3, #120	@ 0x78
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	f107 0318 	add.w	r3, r7, #24
 800bf92:	2100      	movs	r1, #0
 800bf94:	460a      	mov	r2, r1
 800bf96:	801a      	strh	r2, [r3, #0]
 800bf98:	460a      	mov	r2, r1
 800bf9a:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f240 1223 	movw	r2, #291	@ 0x123
 800bfa4:	2103      	movs	r1, #3
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f007 f875 	bl	8013096 <phpalI14443p3a_Sw_SetConfig>
 800bfac:	4603      	mov	r3, r0
 800bfae:	843b      	strh	r3, [r7, #32]
 800bfb0:	8c3b      	ldrh	r3, [r7, #32]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <phalT1T_Sw_ReadUID+0x48>
 800bfb6:	8c3b      	ldrh	r3, [r7, #32]
 800bfb8:	e05c      	b.n	800c074 <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6858      	ldr	r0, [r3, #4]
 800bfbe:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800bfc0:	f107 0214 	add.w	r2, r7, #20
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	f107 031c 	add.w	r3, r7, #28
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	f007 fd0b 	bl	80139ec <phpalI14443p3a_Sw_Exchange>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	843b      	strh	r3, [r7, #32]
 800bfda:	8c3b      	ldrh	r3, [r7, #32]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <phalT1T_Sw_ReadUID+0x72>
 800bfe0:	8c3b      	ldrh	r3, [r7, #32]
 800bfe2:	e047      	b.n	800c074 <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	7d1b      	ldrb	r3, [r3, #20]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d10c      	bne.n	800c008 <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	2b06      	cmp	r3, #6
 800bff4:	d105      	bne.n	800c002 <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d109      	bne.n	800c016 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800c002:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800c006:	e035      	b.n	800c074 <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	2b06      	cmp	r3, #6
 800c00e:	d002      	beq.n	800c016 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800c010:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800c014:	e02e      	b.n	800c074 <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	781a      	ldrb	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	785a      	ldrb	r2, [r3, #1]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800c026:	2300      	movs	r3, #0
 800c028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c02c:	e01a      	b.n	800c064 <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800c02e:	69fa      	ldr	r2, [r7, #28]
 800c030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c034:	3302      	adds	r3, #2
 800c036:	441a      	add	r2, r3
 800c038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c03c:	7811      	ldrb	r1, [r2, #0]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	4413      	add	r3, r2
 800c042:	460a      	mov	r2, r1
 800c044:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800c046:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c04a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	440b      	add	r3, r1
 800c052:	68f9      	ldr	r1, [r7, #12]
 800c054:	440a      	add	r2, r1
 800c056:	7a92      	ldrb	r2, [r2, #10]
 800c058:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800c05a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c05e:	3301      	adds	r3, #1
 800c060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d9e0      	bls.n	800c02e <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c070:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3728      	adds	r7, #40	@ 0x28
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	607a      	str	r2, [r7, #4]
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	460b      	mov	r3, r1
 800c08a:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800c08c:	897b      	ldrh	r3, [r7, #10]
 800c08e:	2b80      	cmp	r3, #128	@ 0x80
 800c090:	d002      	beq.n	800c098 <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800c092:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800c096:	e01e      	b.n	800c0d6 <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d101      	bne.n	800c0a2 <phalTop_Sw_Init+0x26>
 800c09e:	2321      	movs	r3, #33	@ 0x21
 800c0a0:	e019      	b.n	800c0d6 <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800c0a8:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	69fa      	ldr	r2, [r7, #28]
 800c0c0:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6a3a      	ldr	r2, [r7, #32]
 800c0c6:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f000 f805 	bl	800c0de <phalTop_Sw_Reset>
 800c0d4:	4603      	mov	r3, r0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3328      	adds	r3, #40	@ 0x28
 800c108:	2258      	movs	r2, #88	@ 0x58
 800c10a:	2100      	movs	r1, #0
 800c10c:	4618      	mov	r0, r3
 800c10e:	f011 f9ff 	bl	801d510 <memset>

    return PH_ERR_SUCCESS;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	460b      	mov	r3, r1
 800c12a:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800c12c:	897b      	ldrh	r3, [r7, #10]
 800c12e:	2b54      	cmp	r3, #84	@ 0x54
 800c130:	d002      	beq.n	800c138 <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c132:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c136:	e06d      	b.n	800c214 <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <phalVca_Sw_Init+0x28>
 800c13e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c142:	e067      	b.n	800c214 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <phalVca_Sw_Init+0x34>
 800c14a:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c14e:	e061      	b.n	800c214 <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d102      	bne.n	800c15c <phalVca_Sw_Init+0x40>
 800c156:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c15a:	e05b      	b.n	800c214 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d102      	bne.n	800c168 <phalVca_Sw_Init+0x4c>
 800c162:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c166:	e055      	b.n	800c214 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d102      	bne.n	800c174 <phalVca_Sw_Init+0x58>
 800c16e:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c172:	e04f      	b.n	800c214 <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800c174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c176:	2b00      	cmp	r3, #0
 800c178:	d005      	beq.n	800c186 <phalVca_Sw_Init+0x6a>
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d102      	bne.n	800c186 <phalVca_Sw_Init+0x6a>
 800c180:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c184:	e046      	b.n	800c214 <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800c186:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d005      	beq.n	800c198 <phalVca_Sw_Init+0x7c>
 800c18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <phalVca_Sw_Init+0x7c>
 800c192:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c196:	e03d      	b.n	800c214 <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f241 3201 	movw	r2, #4865	@ 0x1301
 800c19e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1bc:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c1c2:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6a3a      	ldr	r2, [r7, #32]
 800c1c8:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c1d4:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	4613      	mov	r3, r2
 800c22c:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800c22e:	79fb      	ldrb	r3, [r7, #7]
 800c230:	2bff      	cmp	r3, #255	@ 0xff
 800c232:	d07d      	beq.n	800c330 <phalVca_Sw_SetSessionKeyUtility+0x110>
 800c234:	2bff      	cmp	r3, #255	@ 0xff
 800c236:	f300 808c 	bgt.w	800c352 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c23a:	2baa      	cmp	r3, #170	@ 0xaa
 800c23c:	d04f      	beq.n	800c2de <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800c23e:	2baa      	cmp	r3, #170	@ 0xaa
 800c240:	f300 8087 	bgt.w	800c352 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c244:	2b1a      	cmp	r3, #26
 800c246:	dc3d      	bgt.n	800c2c4 <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f2c0 8082 	blt.w	800c352 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c24e:	2b1a      	cmp	r3, #26
 800c250:	d87f      	bhi.n	800c352 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c252:	a201      	add	r2, pc, #4	@ (adr r2, 800c258 <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800c254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c258:	0800c327 	.word	0x0800c327
 800c25c:	0800c353 	.word	0x0800c353
 800c260:	0800c2f7 	.word	0x0800c2f7
 800c264:	0800c30f 	.word	0x0800c30f
 800c268:	0800c327 	.word	0x0800c327
 800c26c:	0800c327 	.word	0x0800c327
 800c270:	0800c353 	.word	0x0800c353
 800c274:	0800c353 	.word	0x0800c353
 800c278:	0800c353 	.word	0x0800c353
 800c27c:	0800c353 	.word	0x0800c353
 800c280:	0800c2cb 	.word	0x0800c2cb
 800c284:	0800c353 	.word	0x0800c353
 800c288:	0800c353 	.word	0x0800c353
 800c28c:	0800c353 	.word	0x0800c353
 800c290:	0800c353 	.word	0x0800c353
 800c294:	0800c353 	.word	0x0800c353
 800c298:	0800c353 	.word	0x0800c353
 800c29c:	0800c353 	.word	0x0800c353
 800c2a0:	0800c353 	.word	0x0800c353
 800c2a4:	0800c353 	.word	0x0800c353
 800c2a8:	0800c353 	.word	0x0800c353
 800c2ac:	0800c353 	.word	0x0800c353
 800c2b0:	0800c353 	.word	0x0800c353
 800c2b4:	0800c353 	.word	0x0800c353
 800c2b8:	0800c353 	.word	0x0800c353
 800c2bc:	0800c353 	.word	0x0800c353
 800c2c0:	0800c2d5 	.word	0x0800c2d5
 800c2c4:	2b71      	cmp	r3, #113	@ 0x71
 800c2c6:	d038      	beq.n	800c33a <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800c2c8:	e043      	b.n	800c352 <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2204      	movs	r2, #4
 800c2ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c2d2:	e043      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2205      	movs	r2, #5
 800c2d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c2dc:	e03e      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2207      	movs	r2, #7
 800c2e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3328      	adds	r3, #40	@ 0x28
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f011 f98d 	bl	801d60e <memcpy>
        break;
 800c2f4:	e032      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2208      	movs	r2, #8
 800c2fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3328      	adds	r3, #40	@ 0x28
 800c302:	2220      	movs	r2, #32
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	4618      	mov	r0, r3
 800c308:	f011 f981 	bl	801d60e <memcpy>
        break;
 800c30c:	e026      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2209      	movs	r2, #9
 800c312:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3328      	adds	r3, #40	@ 0x28
 800c31a:	2220      	movs	r2, #32
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	4618      	mov	r0, r3
 800c320:	f011 f975 	bl	801d60e <memcpy>
        break;
 800c324:	e01a      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2203      	movs	r2, #3
 800c32a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c32e:	e015      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2203      	movs	r2, #3
 800c334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c338:	e010      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2206      	movs	r2, #6
 800c33e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3328      	adds	r3, #40	@ 0x28
 800c346:	2220      	movs	r2, #32
 800c348:	68b9      	ldr	r1, [r7, #8]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f011 f95f 	bl	801d60e <memcpy>
        break;
 800c350:	e004      	b.n	800c35c <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c35a:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop

0800c368 <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <phalVca_Sw_SetApplicationType+0x14>
 800c378:	2321      	movs	r3, #33	@ 0x21
 800c37a:	e008      	b.n	800c38e <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <phalVca_Sw_SetApplicationType+0x1e>
 800c382:	2321      	movs	r3, #33	@ 0x21
 800c384:	e003      	b.n	800c38e <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b086      	sub	sp, #24
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d102      	bne.n	800c3b4 <phalVca_SetSessionKeyUtility+0x1a>
 800c3ae:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c3b2:	e024      	b.n	800c3fe <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d102      	bne.n	800c3c0 <phalVca_SetSessionKeyUtility+0x26>
 800c3ba:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c3be:	e01e      	b.n	800c3fe <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c3c8:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800c3cc:	d004      	beq.n	800c3d8 <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c3ce:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c3d2:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800c3d4:	8afb      	ldrh	r3, [r7, #22]
 800c3d6:	e012      	b.n	800c3fe <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d108      	bne.n	800c3f4 <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff ff19 	bl	800c220 <phalVca_Sw_SetSessionKeyUtility>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	82fb      	strh	r3, [r7, #22]
            break;
 800c3f2:	e003      	b.n	800c3fc <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c3f4:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c3f8:	82fb      	strh	r3, [r7, #22]
            break;
 800c3fa:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800c3fc:	8afb      	ldrh	r3, [r7, #22]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d102      	bne.n	800c41c <phalVca_SetApplicationType+0x16>
 800c416:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c41a:	e022      	b.n	800c462 <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <phalVca_SetApplicationType+0x22>
 800c422:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c426:	e01c      	b.n	800c462 <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	881b      	ldrh	r3, [r3, #0]
 800c42c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c430:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800c434:	d004      	beq.n	800c440 <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c436:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c43a:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800c43c:	89fb      	ldrh	r3, [r7, #14]
 800c43e:	e010      	b.n	800c462 <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b01      	cmp	r3, #1
 800c448:	d106      	bne.n	800c458 <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ff8b 	bl	800c368 <phalVca_Sw_SetApplicationType>
 800c452:	4603      	mov	r3, r0
 800c454:	81fb      	strh	r3, [r7, #14]
            break;
 800c456:	e003      	b.n	800c460 <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c458:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c45c:	81fb      	strh	r3, [r7, #14]
            break;
 800c45e:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800c460:	89fb      	ldrh	r3, [r7, #14]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800c480:	2300      	movs	r3, #0
 800c482:	2201      	movs	r2, #1
 800c484:	2108      	movs	r1, #8
 800c486:	f00a ffe5 	bl	8017454 <phOsal_EventPost>
}
 800c48a:	bf00      	nop
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800c498:	4807      	ldr	r0, [pc, #28]	@ (800c4b8 <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800c49a:	f010 ff49 	bl	801d330 <puts>
    if(xEventHandle != NULL)
 800c49e:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d005      	beq.n	800c4b2 <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	2108      	movs	r1, #8
 800c4ac:	4803      	ldr	r0, [pc, #12]	@ (800c4bc <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800c4ae:	f00a ffd1 	bl	8017454 <phOsal_EventPost>
    }
}
 800c4b2:	bf00      	nop
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	0801fb40 	.word	0x0801fb40
 800c4bc:	2000178c 	.word	0x2000178c

0800c4c0 <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	607a      	str	r2, [r7, #4]
 800c4ca:	603b      	str	r3, [r7, #0]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	817b      	strh	r3, [r7, #10]
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800c4d0:	897b      	ldrh	r3, [r7, #10]
 800c4d2:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800c4d6:	d002      	beq.n	800c4de <phhalHw_Pn5180_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800c4d8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800c4dc:	e1dd      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800c4de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <phhalHw_Pn5180_Init+0x2a>
 800c4e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <phhalHw_Pn5180_Init+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800c4ea:	f240 2321 	movw	r3, #545	@ 0x221
 800c4ee:	e1d4      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <phhalHw_Pn5180_Init+0x3a>
 800c4f6:	2321      	movs	r3, #33	@ 0x21
 800c4f8:	e1cf      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    PH_ASSERT_NULL(pBalDataParams);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <phhalHw_Pn5180_Init+0x44>
 800c500:	2321      	movs	r3, #33	@ 0x21
 800c502:	e1ca      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    PH_ASSERT_NULL(pTxBuffer);
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <phhalHw_Pn5180_Init+0x4e>
 800c50a:	2321      	movs	r3, #33	@ 0x21
 800c50c:	e1c5      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    PH_ASSERT_NULL(pRxBuffer);
 800c50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <phhalHw_Pn5180_Init+0x58>
 800c514:	2321      	movs	r3, #33	@ 0x21
 800c516:	e1c0      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800c518:	6a3b      	ldr	r3, [r7, #32]
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800c520:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c522:	3b01      	subs	r3, #1
 800c524:	b29a      	uxth	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	1c9a      	adds	r2, r3, #2
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800c532:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c534:	3b02      	subs	r3, #2
 800c536:	b29a      	uxth	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f240 220e 	movw	r2, #526	@ 0x20e
 800c542:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2205      	movs	r2, #5
 800c590:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2205      	movs	r2, #5
 800c596:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2203      	movs	r2, #3
 800c5e8:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2201      	movs	r2, #1
 800c620:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4a9f      	ldr	r2, [pc, #636]	@ (800c8a4 <phhalHw_Pn5180_Init+0x3e4>)
 800c626:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4a9f      	ldr	r2, [pc, #636]	@ (800c8a8 <phhalHw_Pn5180_Init+0x3e8>)
 800c62c:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

#ifndef _WIN32


    /* Config Reset pin as output and set to high. */
    pinCfg.bPullSelect = PHDRIVER_PIN_RESET_PULL_CFG;
 800c63e:	2301      	movs	r3, #1
 800c640:	743b      	strb	r3, [r7, #16]
    pinCfg.bOutputLogic = RESET_POWERUP_LEVEL;
 800c642:	2301      	movs	r3, #1
 800c644:	747b      	strb	r3, [r7, #17]
    PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_RESET, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c646:	f107 0310 	add.w	r3, r7, #16
 800c64a:	2202      	movs	r2, #2
 800c64c:	2120      	movs	r1, #32
 800c64e:	4897      	ldr	r0, [pc, #604]	@ (800c8ac <phhalHw_Pn5180_Init+0x3ec>)
 800c650:	f00a fcdc 	bl	801700c <phDriver_PinConfig>
 800c654:	4603      	mov	r3, r0
 800c656:	82fb      	strh	r3, [r7, #22]
 800c658:	8afb      	ldrh	r3, [r7, #22]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <phhalHw_Pn5180_Init+0x1a2>
 800c65e:	8afb      	ldrh	r3, [r7, #22]
 800c660:	e11b      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	789b      	ldrb	r3, [r3, #2]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d113      	bne.n	800c692 <phhalHw_Pn5180_Init+0x1d2>
    {
        /* Config NSS (Chip Select) pin as GPIO output and set to high. */
        pinCfg.bPullSelect = PHDRIVER_PIN_NSS_PULL_CFG;
 800c66a:	2301      	movs	r3, #1
 800c66c:	743b      	strb	r3, [r7, #16]
        pinCfg.bOutputLogic = PH_DRIVER_SET_HIGH;
 800c66e:	2301      	movs	r3, #1
 800c670:	747b      	strb	r3, [r7, #17]
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_SSEL, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c672:	f107 0310 	add.w	r3, r7, #16
 800c676:	2202      	movs	r2, #2
 800c678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c67c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c680:	f00a fcc4 	bl	801700c <phDriver_PinConfig>
 800c684:	4603      	mov	r3, r0
 800c686:	82fb      	strh	r3, [r7, #22]
 800c688:	8afb      	ldrh	r3, [r7, #22]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <phhalHw_Pn5180_Init+0x1d2>
 800c68e:	8afb      	ldrh	r3, [r7, #22]
 800c690:	e103      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    }

    /* Set Dwl Pin as output, pullup enable and set to low. */
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;
 800c692:	2301      	movs	r3, #1
 800c694:	743b      	strb	r3, [r7, #16]
    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;
 800c696:	2300      	movs	r3, #0
 800c698:	747b      	strb	r3, [r7, #17]
    PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_DWL, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c69a:	f107 0310 	add.w	r3, r7, #16
 800c69e:	2202      	movs	r2, #2
 800c6a0:	2108      	movs	r1, #8
 800c6a2:	4883      	ldr	r0, [pc, #524]	@ (800c8b0 <phhalHw_Pn5180_Init+0x3f0>)
 800c6a4:	f00a fcb2 	bl	801700c <phDriver_PinConfig>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	82fb      	strh	r3, [r7, #22]
 800c6ac:	8afb      	ldrh	r3, [r7, #22]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <phhalHw_Pn5180_Init+0x1f6>
 800c6b2:	8afb      	ldrh	r3, [r7, #22]
 800c6b4:	e0f1      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    if (((phbalReg_Type_t *)pBalDataParams)->bBalType != PHBAL_REG_TYPE_KERNEL_SPI)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	789b      	ldrb	r3, [r3, #2]
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d010      	beq.n	800c6e0 <phhalHw_Pn5180_Init+0x220>
    {
        /* Busy pin as input and pullup enabled. */
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	743b      	strb	r3, [r7, #16]
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
 800c6c2:	f107 0310 	add.w	r3, r7, #16
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c6ce:	f00a fc9d 	bl	801700c <phDriver_PinConfig>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	82fb      	strh	r3, [r7, #22]
 800c6d6:	8afb      	ldrh	r3, [r7, #22]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <phhalHw_Pn5180_Init+0x220>
 800c6dc:	8afb      	ldrh	r3, [r7, #22]
 800c6de:	e0dc      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    }

    printf("[------1]\n");
 800c6e0:	4874      	ldr	r0, [pc, #464]	@ (800c8b4 <phhalHw_Pn5180_Init+0x3f4>)
 800c6e2:	f010 fe25 	bl	801d330 <puts>
    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800c6e6:	f003 fc3d 	bl	800ff64 <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	789b      	ldrb	r3, [r3, #2]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d11a      	bne.n	800c728 <phhalHw_Pn5180_Init+0x268>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f003 fc5d 	bl	800ffb4 <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c702:	f00a fccb 	bl	801709c <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800c706:	2201      	movs	r2, #1
 800c708:	2102      	movs	r1, #2
 800c70a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c70e:	f00a fc8d 	bl	801702c <phDriver_PinRead>
 800c712:	4603      	mov	r3, r0
 800c714:	2b01      	cmp	r3, #1
 800c716:	d103      	bne.n	800c720 <phhalHw_Pn5180_Init+0x260>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }


        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800c720:	2101      	movs	r1, #1
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f003 fc46 	bl	800ffb4 <phhalHw_Pn5180_WriteSSEL>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800c728:	f107 0214 	add.w	r2, r7, #20
 800c72c:	2302      	movs	r3, #2
 800c72e:	2112      	movs	r1, #18
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f004 f81f 	bl	8010774 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800c736:	4603      	mov	r3, r0
 800c738:	82fb      	strh	r3, [r7, #22]
 800c73a:	8afb      	ldrh	r3, [r7, #22]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <phhalHw_Pn5180_Init+0x284>
 800c740:	8afb      	ldrh	r3, [r7, #22]
 800c742:	e0aa      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800c744:	7d3b      	ldrb	r3, [r7, #20]
 800c746:	2bff      	cmp	r3, #255	@ 0xff
 800c748:	d105      	bne.n	800c756 <phhalHw_Pn5180_Init+0x296>
 800c74a:	7d7b      	ldrb	r3, [r7, #21]
 800c74c:	2bff      	cmp	r3, #255	@ 0xff
 800c74e:	d102      	bne.n	800c756 <phhalHw_Pn5180_Init+0x296>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800c750:	f240 1301 	movw	r3, #257	@ 0x101
 800c754:	e0a1      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800c75c:	2301      	movs	r3, #1
 800c75e:	2117      	movs	r1, #23
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f004 f807 	bl	8010774 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800c766:	4603      	mov	r3, r0
 800c768:	82fb      	strh	r3, [r7, #22]
 800c76a:	8afb      	ldrh	r3, [r7, #22]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d001      	beq.n	800c774 <phhalHw_Pn5180_Init+0x2b4>
 800c770:	8afb      	ldrh	r3, [r7, #22]
 800c772:	e092      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da04      	bge.n	800c78a <phhalHw_Pn5180_Init+0x2ca>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800c788:	e003      	b.n	800c792 <phhalHw_Pn5180_Init+0x2d2>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800c792:	f06f 0204 	mvn.w	r2, #4
 800c796:	2101      	movs	r1, #1
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f003 fd43 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	82fb      	strh	r3, [r7, #22]
 800c7a2:	8afb      	ldrh	r3, [r7, #22]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <phhalHw_Pn5180_Init+0x2ec>
 800c7a8:	8afb      	ldrh	r3, [r7, #22]
 800c7aa:	e076      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800c7ac:	4a42      	ldr	r2, [pc, #264]	@ (800c8b8 <phhalHw_Pn5180_Init+0x3f8>)
 800c7ae:	2103      	movs	r1, #3
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f003 fc4b 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	82fb      	strh	r3, [r7, #22]
 800c7ba:	8afb      	ldrh	r3, [r7, #22]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <phhalHw_Pn5180_Init+0x304>
 800c7c0:	8afb      	ldrh	r3, [r7, #22]
 800c7c2:	e06a      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    /* Create the event. */
    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	4a3d      	ldr	r2, [pc, #244]	@ (800c8bc <phhalHw_Pn5180_Init+0x3fc>)
 800c7c8:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    pDataParams->HwEventObj.intialValue = 0U;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	f00a fd56 	bl	8017294 <phOsal_EventCreate>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	82fb      	strh	r3, [r7, #22]
 800c7ec:	8afb      	ldrh	r3, [r7, #22]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <phhalHw_Pn5180_Init+0x336>
 800c7f2:	8afb      	ldrh	r3, [r7, #22]
 800c7f4:	e051      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	2201      	movs	r2, #1
 800c800:	2100      	movs	r1, #0
 800c802:	f00a fe5f 	bl	80174c4 <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800c80c:	4a2c      	ldr	r2, [pc, #176]	@ (800c8c0 <phhalHw_Pn5180_Init+0x400>)
 800c80e:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800c810:	7d7b      	ldrb	r3, [r7, #21]
 800c812:	461a      	mov	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c820:	b21b      	sxth	r3, r3
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	b21a      	sxth	r2, r3
 800c826:	7d3b      	ldrb	r3, [r7, #20]
 800c828:	b21b      	sxth	r3, r3
 800c82a:	4313      	orrs	r3, r2
 800c82c:	b21b      	sxth	r3, r3
 800c82e:	b29a      	uxth	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c83c:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800c840:	d202      	bcs.n	800c848 <phhalHw_Pn5180_Init+0x388>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800c842:	f240 230b 	movw	r3, #523	@ 0x20b
 800c846:	e028      	b.n	800c89a <phhalHw_Pn5180_Init+0x3da>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c84e:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800c852:	d321      	bcc.n	800c898 <phhalHw_Pn5180_Init+0x3d8>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800c854:	f107 0213 	add.w	r2, r7, #19
 800c858:	2301      	movs	r3, #1
 800c85a:	21e8      	movs	r1, #232	@ 0xe8
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f003 ff89 	bl	8010774 <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800c862:	7cfb      	ldrb	r3, [r7, #19]
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d004      	beq.n	800c876 <phhalHw_Pn5180_Init+0x3b6>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800c86c:	7cfb      	ldrb	r3, [r7, #19]
 800c86e:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800c872:	2b02      	cmp	r3, #2
 800c874:	d010      	beq.n	800c898 <phhalHw_Pn5180_Init+0x3d8>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800c876:	7cfb      	ldrb	r3, [r7, #19]
 800c878:	f023 0306 	bic.w	r3, r3, #6
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	74fb      	strb	r3, [r7, #19]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800c880:	7cfb      	ldrb	r3, [r7, #19]
 800c882:	f043 0303 	orr.w	r3, r3, #3
 800c886:	b2db      	uxtb	r3, r3
 800c888:	74fb      	strb	r3, [r7, #19]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800c88a:	f107 0213 	add.w	r2, r7, #19
 800c88e:	2301      	movs	r3, #1
 800c890:	21e8      	movs	r1, #232	@ 0xe8
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f003 fef6 	bl	8010684 <phhalHw_Pn5180_Instr_WriteE2Prom>
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }

    return PH_ERR_SUCCESS;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800c46b 	.word	0x0800c46b
 800c8a8:	0800c495 	.word	0x0800c495
 800c8ac:	48000400 	.word	0x48000400
 800c8b0:	48000800 	.word	0x48000800
 800c8b4:	0801fb50 	.word	0x0801fb50
 800c8b8:	000fffff 	.word	0x000fffff
 800c8bc:	080205b8 	.word	0x080205b8
 800c8c0:	2000178c 	.word	0x2000178c

0800c8c4 <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800c8d2:	7afb      	ldrb	r3, [r7, #11]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f003 fbb7 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800c8de:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800c8f6:	7afb      	ldrb	r3, [r7, #11]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f003 fdb9 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800c902:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800c918:	2200      	movs	r2, #0
 800c91a:	215e      	movs	r1, #94	@ 0x5e
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fd8b 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800c922:	4603      	mov	r3, r0
 800c924:	823b      	strh	r3, [r7, #16]
 800c926:	8a3b      	ldrh	r3, [r7, #16]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800c92c:	8a3b      	ldrh	r3, [r7, #16]
 800c92e:	e1af      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	78fa      	ldrb	r2, [r7, #3]
 800c93a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800c946:	2301      	movs	r3, #1
 800c948:	767b      	strb	r3, [r7, #25]
 800c94a:	e001      	b.n	800c950 <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c97c:	3b01      	subs	r3, #1
 800c97e:	2b09      	cmp	r3, #9
 800c980:	f200 8104 	bhi.w	800cb8c <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800c984:	a201      	add	r2, pc, #4	@ (adr r2, 800c98c <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800c986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98a:	bf00      	nop
 800c98c:	0800c9b5 	.word	0x0800c9b5
 800c990:	0800c9df 	.word	0x0800c9df
 800c994:	0800ca09 	.word	0x0800ca09
 800c998:	0800cb23 	.word	0x0800cb23
 800c99c:	0800cb8d 	.word	0x0800cb8d
 800c9a0:	0800cb4d 	.word	0x0800cb4d
 800c9a4:	0800ca85 	.word	0x0800ca85
 800c9a8:	0800cabf 	.word	0x0800cabf
 800c9ac:	0800caf1 	.word	0x0800caf1
 800c9b0:	0800ca47 	.word	0x0800ca47
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800c9b4:	2280      	movs	r2, #128	@ 0x80
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f004 fa41 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	823b      	strh	r3, [r7, #16]
 800c9c2:	8a3b      	ldrh	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800c9c8:	8a3b      	ldrh	r3, [r7, #16]
 800c9ca:	e161      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800c9cc:	4b99      	ldr	r3, [pc, #612]	@ (800cc34 <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800c9ce:	61fb      	str	r3, [r7, #28]
 800c9d0:	230a      	movs	r3, #10
 800c9d2:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	827b      	strh	r3, [r7, #18]
        break;
 800c9dc:	e0de      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800c9de:	2284      	movs	r2, #132	@ 0x84
 800c9e0:	2104      	movs	r1, #4
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f004 fa2c 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	823b      	strh	r3, [r7, #16]
 800c9ec:	8a3b      	ldrh	r3, [r7, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800c9f2:	8a3b      	ldrh	r3, [r7, #16]
 800c9f4:	e14c      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800c9f6:	4b90      	ldr	r3, [pc, #576]	@ (800cc38 <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800c9f8:	61fb      	str	r3, [r7, #28]
 800c9fa:	230b      	movs	r3, #11
 800c9fc:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800ca02:	2300      	movs	r3, #0
 800ca04:	827b      	strh	r3, [r7, #18]
        break;
 800ca06:	e0c9      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca08:	2288      	movs	r2, #136	@ 0x88
 800ca0a:	2108      	movs	r1, #8
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f004 fa17 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca12:	4603      	mov	r3, r0
 800ca14:	823b      	strh	r3, [r7, #16]
 800ca16:	8a3b      	ldrh	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800ca1c:	8a3b      	ldrh	r3, [r7, #16]
 800ca1e:	e137      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800ca20:	4b86      	ldr	r3, [pc, #536]	@ (800cc3c <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800ca22:	61fb      	str	r3, [r7, #28]
 800ca24:	230b      	movs	r3, #11
 800ca26:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f004 fea7 	bl	8011784 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800ca36:	4603      	mov	r3, r0
 800ca38:	823b      	strh	r3, [r7, #16]
 800ca3a:	8a3b      	ldrh	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 80a8 	beq.w	800cb92 <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800ca42:	8a3b      	ldrh	r3, [r7, #16]
 800ca44:	e124      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca46:	2289      	movs	r2, #137	@ 0x89
 800ca48:	2109      	movs	r1, #9
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f004 f9f8 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca50:	4603      	mov	r3, r0
 800ca52:	823b      	strh	r3, [r7, #16]
 800ca54:	8a3b      	ldrh	r3, [r7, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d001      	beq.n	800ca5e <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800ca5a:	8a3b      	ldrh	r3, [r7, #16]
 800ca5c:	e118      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800ca5e:	4b78      	ldr	r3, [pc, #480]	@ (800cc40 <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800ca60:	61fb      	str	r3, [r7, #28]
 800ca62:	230b      	movs	r3, #11
 800ca64:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ca66:	2302      	movs	r3, #2
 800ca68:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f004 fe88 	bl	8011784 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800ca74:	4603      	mov	r3, r0
 800ca76:	823b      	strh	r3, [r7, #16]
 800ca78:	8a3b      	ldrh	r3, [r7, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 808b 	beq.w	800cb96 <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800ca80:	8a3b      	ldrh	r3, [r7, #16]
 800ca82:	e105      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca84:	228a      	movs	r2, #138	@ 0x8a
 800ca86:	210a      	movs	r1, #10
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f004 f9d9 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	823b      	strh	r3, [r7, #16]
 800ca92:	8a3b      	ldrh	r3, [r7, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800ca98:	8a3b      	ldrh	r3, [r7, #16]
 800ca9a:	e0f9      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800ca9c:	4b69      	ldr	r3, [pc, #420]	@ (800cc44 <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	230b      	movs	r3, #11
 800caa2:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800caa4:	2300      	movs	r3, #0
 800caa6:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800caa8:	2300      	movs	r3, #0
 800caaa:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800cabc:	e06e      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800cabe:	228b      	movs	r2, #139	@ 0x8b
 800cac0:	210b      	movs	r1, #11
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f004 f9bc 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800cac8:	4603      	mov	r3, r0
 800caca:	823b      	strh	r3, [r7, #16]
 800cacc:	8a3b      	ldrh	r3, [r7, #16]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800cad2:	8a3b      	ldrh	r3, [r7, #16]
 800cad4:	e0dc      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800cad6:	4b5c      	ldr	r3, [pc, #368]	@ (800cc48 <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	230b      	movs	r3, #11
 800cadc:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800cade:	2301      	movs	r3, #1
 800cae0:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800cae2:	2301      	movs	r3, #1
 800cae4:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800caee:	e055      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800caf0:	228c      	movs	r2, #140	@ 0x8c
 800caf2:	210c      	movs	r1, #12
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f004 f9a3 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800cafa:	4603      	mov	r3, r0
 800cafc:	823b      	strh	r3, [r7, #16]
 800cafe:	8a3b      	ldrh	r3, [r7, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800cb04:	8a3b      	ldrh	r3, [r7, #16]
 800cb06:	e0c3      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800cb08:	4b50      	ldr	r3, [pc, #320]	@ (800cc4c <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800cb0a:	61fb      	str	r3, [r7, #28]
 800cb0c:	230b      	movs	r3, #11
 800cb0e:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800cb10:	2302      	movs	r3, #2
 800cb12:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800cb14:	2302      	movs	r3, #2
 800cb16:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800cb20:	e03c      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800cb22:	228d      	movs	r2, #141	@ 0x8d
 800cb24:	210d      	movs	r1, #13
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f004 f98a 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	823b      	strh	r3, [r7, #16]
 800cb30:	8a3b      	ldrh	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800cb36:	8a3b      	ldrh	r3, [r7, #16]
 800cb38:	e0aa      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800cb3a:	4b45      	ldr	r3, [pc, #276]	@ (800cc50 <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800cb3c:	61fb      	str	r3, [r7, #28]
 800cb3e:	230c      	movs	r3, #12
 800cb40:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800cb42:	230b      	movs	r3, #11
 800cb44:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800cb46:	230d      	movs	r3, #13
 800cb48:	827b      	strh	r3, [r7, #18]

        break;
 800cb4a:	e027      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800cb4c:	2290      	movs	r2, #144	@ 0x90
 800cb4e:	2110      	movs	r1, #16
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f004 f975 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800cb56:	4603      	mov	r3, r0
 800cb58:	823b      	strh	r3, [r7, #16]
 800cb5a:	8a3b      	ldrh	r3, [r7, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800cb60:	8a3b      	ldrh	r3, [r7, #16]
 800cb62:	e095      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800cb64:	4b3b      	ldr	r3, [pc, #236]	@ (800cc54 <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800cb66:	61fb      	str	r3, [r7, #28]
 800cb68:	230c      	movs	r3, #12
 800cb6a:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800cb6c:	2311      	movs	r3, #17
 800cb6e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800cb70:	2313      	movs	r3, #19
 800cb72:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800cb74:	2205      	movs	r2, #5
 800cb76:	210e      	movs	r1, #14
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fc5d 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	823b      	strh	r3, [r7, #16]
 800cb82:	8a3b      	ldrh	r3, [r7, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d008      	beq.n	800cb9a <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800cb88:	8a3b      	ldrh	r3, [r7, #16]
 800cb8a:	e081      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800cb8c:	f240 2321 	movw	r3, #545	@ 0x221
 800cb90:	e07e      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800cb92:	bf00      	nop
 800cb94:	e002      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800cb96:	bf00      	nop
 800cb98:	e000      	b.n	800cb9c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800cb9a:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800cb9c:	7e7b      	ldrb	r3, [r7, #25]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d069      	beq.n	800cc76 <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d102      	bne.n	800cbae <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800cba8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800cbac:	e070      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3358      	adds	r3, #88	@ 0x58
 800cbb2:	2220      	movs	r2, #32
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f010 fcaa 	bl	801d510 <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	82fb      	strh	r3, [r7, #22]
 800cbc0:	e04d      	b.n	800cc5e <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800cbc2:	8afb      	ldrh	r3, [r7, #22]
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	69fa      	ldr	r2, [r7, #28]
 800cbc8:	4413      	add	r3, r2
 800cbca:	881b      	ldrh	r3, [r3, #0]
 800cbcc:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800cbce:	8afb      	ldrh	r3, [r7, #22]
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	3302      	adds	r3, #2
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	89fa      	ldrh	r2, [r7, #14]
 800cbda:	8819      	ldrh	r1, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	322c      	adds	r2, #44	@ 0x2c
 800cbe0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800cbe4:	89fb      	ldrh	r3, [r7, #14]
 800cbe6:	2b07      	cmp	r3, #7
 800cbe8:	d136      	bne.n	800cc58 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d109      	bne.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d004      	beq.n	800cc08 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cc04:	2b0a      	cmp	r3, #10
 800cc06:	d127      	bne.n	800cc58 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d123      	bne.n	800cc58 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800cc10:	89fa      	ldrh	r2, [r7, #14]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	322c      	adds	r2, #44	@ 0x2c
 800cc16:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800cc1a:	89fb      	ldrh	r3, [r7, #14]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fc0a 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800cc24:	4603      	mov	r3, r0
 800cc26:	823b      	strh	r3, [r7, #16]
 800cc28:	8a3b      	ldrh	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d014      	beq.n	800cc58 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800cc2e:	8a3b      	ldrh	r3, [r7, #16]
 800cc30:	e02e      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800cc32:	bf00      	nop
 800cc34:	080205bc 	.word	0x080205bc
 800cc38:	080205e4 	.word	0x080205e4
 800cc3c:	08020610 	.word	0x08020610
 800cc40:	0802063c 	.word	0x0802063c
 800cc44:	080206c8 	.word	0x080206c8
 800cc48:	080206f4 	.word	0x080206f4
 800cc4c:	08020720 	.word	0x08020720
 800cc50:	08020668 	.word	0x08020668
 800cc54:	08020698 	.word	0x08020698
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800cc58:	8afb      	ldrh	r3, [r7, #22]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	82fb      	strh	r3, [r7, #22]
 800cc5e:	8afa      	ldrh	r2, [r7, #22]
 800cc60:	8b7b      	ldrh	r3, [r7, #26]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d3ad      	bcc.n	800cbc2 <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	8aba      	ldrh	r2, [r7, #20]
 800cc6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8a7a      	ldrh	r2, [r7, #18]
 800cc72:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800cc76:	2201      	movs	r2, #1
 800cc78:	212e      	movs	r1, #46	@ 0x2e
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fbdc 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800cc80:	4603      	mov	r3, r0
 800cc82:	823b      	strh	r3, [r7, #16]
 800cc84:	8a3b      	ldrh	r3, [r7, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800cc8a:	8a3b      	ldrh	r3, [r7, #16]
 800cc8c:	e000      	b.n	800cc90 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b090      	sub	sp, #64	@ 0x40
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	461a      	mov	r2, r3
 800cca4:	460b      	mov	r3, r1
 800cca6:	817b      	strh	r3, [r7, #10]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800ccac:	2300      	movs	r3, #0
 800ccae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800ccc8:	893b      	ldrh	r3, [r7, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <phhalHw_Pn5180_Exchange+0x42>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <phhalHw_Pn5180_Exchange+0x42>
 800ccd4:	f240 2321 	movw	r3, #545	@ 0x221
 800ccd8:	e253      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d003      	beq.n	800ccf2 <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800ccea:	f240 2325 	movw	r3, #549	@ 0x225
 800ccee:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800ccf0:	e1cf      	b.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800ccf2:	897b      	ldrh	r3, [r7, #10]
 800ccf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800ccfc:	f240 2321 	movw	r3, #545	@ 0x221
 800cd00:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cd02:	e1c6      	b.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800cd04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <phhalHw_Pn5180_Exchange+0x78>
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d107      	bne.n	800cd20 <phhalHw_Pn5180_Exchange+0x88>
 800cd10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	db03      	blt.n	800cd20 <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800cd18:	f240 2321 	movw	r3, #545	@ 0x221
 800cd1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cd1e:	e1b8      	b.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d115      	bne.n	800cd56 <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800cd2a:	f107 0310 	add.w	r3, r7, #16
 800cd2e:	461a      	mov	r2, r3
 800cd30:	211d      	movs	r1, #29
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f003 fb9e 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <phhalHw_Pn5180_Exchange+0xae>
 800cd42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd44:	e21d      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800cd50:	f240 230a 	movw	r3, #522	@ 0x20a
 800cd54:	e215      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800cd56:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800cd5a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800cd5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	460b      	mov	r3, r1
 800cd66:	2101      	movs	r1, #1
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f004 f940 	bl	8010fee <phhalHw_Pn5180_GetTxBuffer>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f040 818c 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800cd7a:	897b      	ldrh	r3, [r7, #10]
 800cd7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d105      	bne.n	800cd90 <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800cd90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d002      	beq.n	800cd9c <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800cd96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd98:	2200      	movs	r2, #0
 800cd9a:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d150      	bne.n	800ce48 <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800cda6:	2300      	movs	r3, #0
 800cda8:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800cdaa:	893b      	ldrh	r3, [r7, #8]
 800cdac:	f107 0218 	add.w	r2, r7, #24
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7f9 fd43 	bl	800683e <phTools_ComputeCrc_B>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cdbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f040 8167 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 fb35 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cdd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f040 815c 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800cdda:	2200      	movs	r2, #0
 800cddc:	2101      	movs	r1, #1
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 fb2a 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800cde4:	4603      	mov	r3, r0
 800cde6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cde8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f040 8151 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2102      	movs	r1, #2
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f000 fb1f 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cdfe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f040 8146 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800ce06:	2207      	movs	r2, #7
 800ce08:	2103      	movs	r1, #3
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f000 fb14 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800ce10:	4603      	mov	r3, r0
 800ce12:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ce14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f040 813b 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800ce1c:	2204      	movs	r2, #4
 800ce1e:	2104      	movs	r1, #4
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f003 f989 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800ce26:	4603      	mov	r3, r0
 800ce28:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ce2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f040 8130 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800ce32:	221d      	movs	r2, #29
 800ce34:	2107      	movs	r1, #7
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 fafe 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ce40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f040 8125 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8b9b      	ldrh	r3, [r3, #28]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d122      	bne.n	800ce96 <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800ce50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	8b9b      	ldrh	r3, [r3, #28]
 800ce56:	1c59      	adds	r1, r3, #1
 800ce58:	b288      	uxth	r0, r1
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	8388      	strh	r0, [r1, #28]
 800ce5e:	4413      	add	r3, r2
 800ce60:	2209      	movs	r2, #9
 800ce62:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800ce64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	8b9b      	ldrh	r3, [r3, #28]
 800ce6a:	1c59      	adds	r1, r3, #1
 800ce6c:	b288      	uxth	r0, r1
 800ce6e:	68f9      	ldr	r1, [r7, #12]
 800ce70:	8388      	strh	r0, [r1, #28]
 800ce72:	4413      	add	r3, r2
 800ce74:	2200      	movs	r2, #0
 800ce76:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d109      	bne.n	800ce96 <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800ce82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	8b9b      	ldrh	r3, [r3, #28]
 800ce88:	1c59      	adds	r1, r3, #1
 800ce8a:	b288      	uxth	r0, r1
 800ce8c:	68f9      	ldr	r1, [r7, #12]
 800ce8e:	8388      	strh	r0, [r1, #28]
 800ce90:	4413      	add	r3, r2
 800ce92:	22f0      	movs	r2, #240	@ 0xf0
 800ce94:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800ce96:	893b      	ldrh	r3, [r7, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d03d      	beq.n	800cf18 <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800ce9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce9e:	4619      	mov	r1, r3
 800cea0:	893b      	ldrh	r3, [r7, #8]
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	8a52      	ldrh	r2, [r2, #18]
 800cea6:	4413      	add	r3, r2
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	8b92      	ldrh	r2, [r2, #28]
 800ceac:	4413      	add	r3, r2
 800ceae:	4299      	cmp	r1, r3
 800ceb0:	da09      	bge.n	800cec6 <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800cebe:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800cec2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800cec4:	e0e5      	b.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800cec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	8b92      	ldrh	r2, [r2, #28]
 800cecc:	4611      	mov	r1, r2
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	8a52      	ldrh	r2, [r2, #18]
 800ced2:	440a      	add	r2, r1
 800ced4:	4413      	add	r3, r2
 800ced6:	893a      	ldrh	r2, [r7, #8]
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f010 fb97 	bl	801d60e <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	8a5a      	ldrh	r2, [r3, #18]
 800cee4:	893b      	ldrh	r3, [r7, #8]
 800cee6:	4413      	add	r3, r2
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d10f      	bne.n	800cf18 <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800cef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	8b92      	ldrh	r2, [r2, #28]
 800cefe:	4611      	mov	r1, r2
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	8a52      	ldrh	r2, [r2, #18]
 800cf04:	440a      	add	r2, r1
 800cf06:	4413      	add	r3, r2
 800cf08:	8b3a      	ldrh	r2, [r7, #24]
 800cf0a:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	8a5b      	ldrh	r3, [r3, #18]
 800cf10:	3302      	adds	r3, #2
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800cf1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	da01      	bge.n	800cf28 <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e12c      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	8a5a      	ldrh	r2, [r3, #18]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	8b9b      	ldrh	r3, [r3, #28]
 800cf30:	4413      	add	r3, r2
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	8a5b      	ldrh	r3, [r3, #18]
 800cf3c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800cf40:	d903      	bls.n	800cf4a <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800cf42:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800cf46:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cf48:	e0a3      	b.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800cf4a:	2103      	movs	r1, #3
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f005 fc97 	bl	8012880 <phhalHw_Pn5180_Int_LoadCommand>
 800cf52:	4603      	mov	r3, r0
 800cf54:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f040 809a 	bne.w	800d092 <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d103      	bne.n	800cf70 <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800cf68:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800cf6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf6e:	e001      	b.n	800cf74 <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800cf70:	4b86      	ldr	r3, [pc, #536]	@ (800d18c <phhalHw_Pn5180_Exchange+0x4f4>)
 800cf72:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d103      	bne.n	800cf86 <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800cf84:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800cf86:	4a82      	ldr	r2, [pc, #520]	@ (800d190 <phhalHw_Pn5180_Exchange+0x4f8>)
 800cf88:	2103      	movs	r1, #3
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f003 f85e 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800cf90:	4603      	mov	r3, r0
 800cf92:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d17b      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	f00a fa8d 	bl	80174c4 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800cfaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfac:	2101      	movs	r1, #1
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f003 f84c 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cfb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d169      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d116      	bne.n	800cff6 <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800cfc8:	f640 0301 	movw	r3, #2049	@ 0x801
 800cfcc:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d103      	bne.n	800cfe0 <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800cfde:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800cfe0:	6a3b      	ldr	r3, [r7, #32]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	210f      	movs	r1, #15
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f003 f830 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800cfec:	4603      	mov	r3, r0
 800cfee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cff0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d14d      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d01a      	beq.n	800d036 <phhalHw_Pn5180_Exchange+0x39e>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d006:	2b00      	cmp	r3, #0
 800d008:	d115      	bne.n	800d036 <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800d00a:	4b62      	ldr	r3, [pc, #392]	@ (800d194 <phhalHw_Pn5180_Exchange+0x4fc>)
 800d00c:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d014:	2b01      	cmp	r3, #1
 800d016:	d103      	bne.n	800d020 <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800d01e:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	461a      	mov	r2, r3
 800d024:	210f      	movs	r1, #15
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f003 f810 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800d02c:	4603      	mov	r3, r0
 800d02e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d030:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d032:	2b00      	cmp	r3, #0
 800d034:	d12d      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800d03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03e:	3301      	adds	r3, #1
 800d040:	b2d2      	uxtb	r2, r2
 800d042:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800d044:	2300      	movs	r3, #0
 800d046:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d01f      	beq.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800d052:	f107 0320 	add.w	r3, r7, #32
 800d056:	461a      	mov	r2, r3
 800d058:	211d      	movs	r1, #29
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f003 fa0a 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800d060:	4603      	mov	r3, r0
 800d062:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d066:	2b00      	cmp	r3, #0
 800d068:	d113      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10e      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f000 f8e7 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 800d07a:	4603      	mov	r3, r0
 800d07c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d07e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d080:	2b00      	cmp	r3, #0
 800d082:	d106      	bne.n	800d092 <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 f889 	bl	800d19c <phhalHw_Pn5180_FieldOn>
 800d08a:	4603      	mov	r3, r0
 800d08c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d08e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d090:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d120      	bne.n	800d0de <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800d0a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d110      	bne.n	800d0cc <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800d0aa:	f107 0314 	add.w	r3, r7, #20
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	2322      	movs	r3, #34	@ 0x22
 800d0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b6:	2105      	movs	r1, #5
 800d0b8:	4837      	ldr	r0, [pc, #220]	@ (800d198 <phhalHw_Pn5180_Exchange+0x500>)
 800d0ba:	f00a f937 	bl	801732c <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f003 0320 	and.w	r3, r3, #32
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800d0c8:	2312      	movs	r3, #18
 800d0ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800d0cc:	f00a f830 	bl	8017130 <phDriver_TimerStop>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d0d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d001      	beq.n	800d0de <phhalHw_Pn5180_Exchange+0x446>
 800d0da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0dc:	e051      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800d0de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800d0e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0e6:	e04c      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800d0e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8a5a      	ldrh	r2, [r3, #18]
 800d0ee:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800d0f0:	f107 031a 	add.w	r3, r7, #26
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	f107 031c 	add.w	r3, r7, #28
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f002 f8ea 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 800d104:	4603      	mov	r3, r0
 800d106:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d108:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d001      	beq.n	800d112 <phhalHw_Pn5180_Exchange+0x47a>
 800d10e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d110:	e037      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2200      	movs	r2, #0
 800d11c:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00b      	beq.n	800d140 <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800d128:	2200      	movs	r2, #0
 800d12a:	2103      	movs	r1, #3
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f000 f983 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800d132:	4603      	mov	r3, r0
 800d134:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d136:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d001      	beq.n	800d140 <phhalHw_Pn5180_Exchange+0x4a8>
 800d13c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d13e:	e020      	b.n	800d182 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800d140:	2301      	movs	r3, #1
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d148:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f005 f916 	bl	801237c <phhalHw_Pn5180_Receive_Int>
 800d150:	4603      	mov	r3, r0
 800d152:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800d154:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d004      	beq.n	800d166 <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f005 fb6d 	bl	801283c <phhalHw_Pn5180_Int_IdleCommand>
 800d162:	4603      	mov	r3, r0
 800d164:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d007      	beq.n	800d180 <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800d170:	f06f 0201 	mvn.w	r2, #1
 800d174:	210f      	movs	r1, #15
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f003 f854 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d17c:	4603      	mov	r3, r0
 800d17e:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800d180:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800d182:	4618      	mov	r0, r3
 800d184:	3738      	adds	r7, #56	@ 0x38
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	00021001 	.word	0x00021001
 800d190:	000fffff 	.word	0x000fffff
 800d194:	00100801 	.word	0x00100801
 800d198:	2000178c 	.word	0x2000178c

0800d19c <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	78db      	ldrb	r3, [r3, #3]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d103      	bne.n	800d1b8 <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800d1b0:	7bfb      	ldrb	r3, [r7, #15]
 800d1b2:	f043 0301 	orr.w	r3, r3, #1
 800d1b6:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d103      	bne.n	800d1ca <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	f043 0302 	orr.w	r3, r3, #2
 800d1c8:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800d1ca:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800d1ce:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	2103      	movs	r1, #3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f002 ffae 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	81bb      	strh	r3, [r7, #12]
 800d1e0:	89bb      	ldrh	r3, [r7, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <phhalHw_Pn5180_FieldOn+0x4e>
 800d1e6:	89bb      	ldrh	r3, [r7, #12]
 800d1e8:	e02a      	b.n	800d240 <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f003 fe84 	bl	8010efc <phhalHw_Pn5180_Instr_RfOn>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	81bb      	strh	r3, [r7, #12]
 800d1f8:	89bb      	ldrh	r3, [r7, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <phhalHw_Pn5180_FieldOn+0x66>
 800d1fe:	89bb      	ldrh	r3, [r7, #12]
 800d200:	e01e      	b.n	800d240 <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800d202:	f107 0308 	add.w	r3, r7, #8
 800d206:	461a      	mov	r2, r3
 800d208:	211d      	movs	r1, #29
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f003 f932 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800d210:	4603      	mov	r3, r0
 800d212:	81bb      	strh	r3, [r7, #12]
 800d214:	89bb      	ldrh	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <phhalHw_Pn5180_FieldOn+0x82>
 800d21a:	89bb      	ldrh	r3, [r7, #12]
 800d21c:	e010      	b.n	800d240 <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800d232:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800d236:	e003      	b.n	800d240 <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800d238:	f240 230a 	movw	r3, #522	@ 0x20a
 800d23c:	e000      	b.n	800d240 <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800d258:	2200      	movs	r2, #0
 800d25a:	215e      	movs	r1, #94	@ 0x5e
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 f8eb 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800d262:	4603      	mov	r3, r0
 800d264:	81fb      	strh	r3, [r7, #14]
 800d266:	89fb      	ldrh	r3, [r7, #14]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <phhalHw_Pn5180_FieldOff+0x28>
 800d26c:	89fb      	ldrh	r3, [r7, #14]
 800d26e:	e00a      	b.n	800d286 <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f003 fe82 	bl	8010f7a <phhalHw_Pn5180_Instr_RfOff>
 800d276:	4603      	mov	r3, r0
 800d278:	81fb      	strh	r3, [r7, #14]
 800d27a:	89fb      	ldrh	r3, [r7, #14]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <phhalHw_Pn5180_FieldOff+0x3c>
 800d280:	89fb      	ldrh	r3, [r7, #14]
 800d282:	e000      	b.n	800d286 <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
 800d29c:	4613      	mov	r3, r2
 800d29e:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM  statusTmp;
    uint32_t    PH_MEMLOC_REM dwLoadValue;	// 定时器加载值
    uint32_t    PH_MEMLOC_REM wPrescaler;	// 预分频值
    uint32_t    PH_MEMLOC_REM wFreq;		// 频率值
    printf("\n -----debug -1-----\n");
 800d2a0:	483f      	ldr	r0, [pc, #252]	@ (800d3a0 <phhalHw_Pn5180_Wait+0x110>)
 800d2a2:	f010 f845 	bl	801d330 <puts>
    /* Parameter check: only ms or us is accepted */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 800d2a6:	78fb      	ldrb	r3, [r7, #3]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d005      	beq.n	800d2b8 <phhalHw_Pn5180_Wait+0x28>
 800d2ac:	78fb      	ldrb	r3, [r7, #3]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d002      	beq.n	800d2b8 <phhalHw_Pn5180_Wait+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d2b2:	f240 2321 	movw	r3, #545	@ 0x221
 800d2b6:	e06f      	b.n	800d398 <phhalHw_Pn5180_Wait+0x108>
    }

    /* When time-out value is zero, there is no wait needed */
    if (wTimeout == 0U)
 800d2b8:	883b      	ldrh	r3, [r7, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <phhalHw_Pn5180_Wait+0x32>
    {
        return PH_ERR_SUCCESS;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	e06a      	b.n	800d398 <phhalHw_Pn5180_Wait+0x108>
    }

    printf("\n -----debug 0-----\n");
 800d2c2:	4838      	ldr	r0, [pc, #224]	@ (800d3a4 <phhalHw_Pn5180_Wait+0x114>)
 800d2c4:	f010 f834 	bl	801d330 <puts>
 * 	SPITX>> 00 03 00 08 00 00
	SPITX>> 00 01 00 08 00 00
	SPITX>> 03 0E 01 00 00 00 00 0B 01 24 0E 01 00 0E 01 41 00 00 00
*/
    /* Setting the Prescaler frequency according to wTimeout */
    if (bUnit == PHHAL_HW_TIME_MILLISECONDS)
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d141      	bne.n	800d352 <phhalHw_Pn5180_Wait+0xc2>
    {
        wFreq = PHHAL_HW_PN5180_MIN_FREQ;			// 最小频率：53000U
 800d2ce:	f64c 7308 	movw	r3, #53000	@ 0xcf08
 800d2d2:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x3CU;							// 设置预分频器为60
 800d2d4:	233c      	movs	r3, #60	@ 0x3c
 800d2d6:	613b      	str	r3, [r7, #16]

        /* 处理长时间等待 - 如果超过最大延时，分段执行 */
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800d2d8:	e01a      	b.n	800d310 <phhalHw_Pn5180_Wait+0x80>
        {
            wTimeout -= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS;
 800d2da:	883b      	ldrh	r3, [r7, #0]
 800d2dc:	f5a3 439a 	sub.w	r3, r3, #19712	@ 0x4d00
 800d2e0:	3b48      	subs	r3, #72	@ 0x48
 800d2e2:	803b      	strh	r3, [r7, #0]
            /* Calculating the load value */
            dwLoadValue =(uint32_t) (  PHHAL_HW_PN5180_MAX_TIME_DELAY_MS * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4a30      	ldr	r2, [pc, #192]	@ (800d3a8 <phhalHw_Pn5180_Wait+0x118>)
 800d2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ec:	099b      	lsrs	r3, r3, #6
 800d2ee:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800d2f2:	fb02 f303 	mul.w	r3, r2, r3
 800d2f6:	60fb      	str	r3, [r7, #12]
            /* 执行内部等待函数 */
            PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	68f9      	ldr	r1, [r7, #12]
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f004 fe5d 	bl	8011fbc <phhalHw_Pn5180_Int_Wait>
 800d302:	4603      	mov	r3, r0
 800d304:	817b      	strh	r3, [r7, #10]
 800d306:	897b      	ldrh	r3, [r7, #10]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <phhalHw_Pn5180_Wait+0x80>
 800d30c:	897b      	ldrh	r3, [r7, #10]
 800d30e:	e043      	b.n	800d398 <phhalHw_Pn5180_Wait+0x108>
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800d310:	883b      	ldrh	r3, [r7, #0]
 800d312:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800d316:	4293      	cmp	r3, r2
 800d318:	d8df      	bhi.n	800d2da <phhalHw_Pn5180_Wait+0x4a>
        }
// -----------program stock at top areas----------------
        printf("\n -----debug 1-----\n");
 800d31a:	4824      	ldr	r0, [pc, #144]	@ (800d3ac <phhalHw_Pn5180_Wait+0x11c>)
 800d31c:	f010 f808 	bl	801d330 <puts>
        dwLoadValue =(uint32_t) (  wTimeout * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800d320:	883b      	ldrh	r3, [r7, #0]
 800d322:	697a      	ldr	r2, [r7, #20]
 800d324:	4920      	ldr	r1, [pc, #128]	@ (800d3a8 <phhalHw_Pn5180_Wait+0x118>)
 800d326:	fba1 1202 	umull	r1, r2, r1, r2
 800d32a:	0992      	lsrs	r2, r2, #6
 800d32c:	fb02 f303 	mul.w	r3, r2, r3
 800d330:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	68f9      	ldr	r1, [r7, #12]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f004 fe40 	bl	8011fbc <phhalHw_Pn5180_Int_Wait>
 800d33c:	4603      	mov	r3, r0
 800d33e:	817b      	strh	r3, [r7, #10]
 800d340:	897b      	ldrh	r3, [r7, #10]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <phhalHw_Pn5180_Wait+0xba>
 800d346:	897b      	ldrh	r3, [r7, #10]
 800d348:	e026      	b.n	800d398 <phhalHw_Pn5180_Wait+0x108>
        printf("\n -----debug 2-----\n");
 800d34a:	4819      	ldr	r0, [pc, #100]	@ (800d3b0 <phhalHw_Pn5180_Wait+0x120>)
 800d34c:	f00f fff0 	bl	801d330 <puts>
 800d350:	e021      	b.n	800d396 <phhalHw_Pn5180_Wait+0x106>
    }
    else
    {
        /* here wTimeout will be in uS and not be Zero */
        wFreq = PHHAL_HW_PN5180_MAX_FREQ;
 800d352:	4b18      	ldr	r3, [pc, #96]	@ (800d3b4 <phhalHw_Pn5180_Wait+0x124>)
 800d354:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x00U;
 800d356:	2300      	movs	r3, #0
 800d358:	613b      	str	r3, [r7, #16]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( wFreq / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	4a16      	ldr	r2, [pc, #88]	@ (800d3b8 <phhalHw_Pn5180_Wait+0x128>)
 800d35e:	fba2 2303 	umull	r2, r3, r2, r3
 800d362:	0b5b      	lsrs	r3, r3, #13
 800d364:	60fb      	str	r3, [r7, #12]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) ((wTimeout * dwLoadValue)/100);
 800d366:	883b      	ldrh	r3, [r7, #0]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	fb02 f303 	mul.w	r3, r2, r3
 800d36e:	4a13      	ldr	r2, [pc, #76]	@ (800d3bc <phhalHw_Pn5180_Wait+0x12c>)
 800d370:	fba2 2303 	umull	r2, r3, r2, r3
 800d374:	095b      	lsrs	r3, r3, #5
 800d376:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	68f9      	ldr	r1, [r7, #12]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f004 fe1d 	bl	8011fbc <phhalHw_Pn5180_Int_Wait>
 800d382:	4603      	mov	r3, r0
 800d384:	817b      	strh	r3, [r7, #10]
 800d386:	897b      	ldrh	r3, [r7, #10]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <phhalHw_Pn5180_Wait+0x100>
 800d38c:	897b      	ldrh	r3, [r7, #10]
 800d38e:	e003      	b.n	800d398 <phhalHw_Pn5180_Wait+0x108>
        printf("\n -----debug 3-----\n");
 800d390:	480b      	ldr	r0, [pc, #44]	@ (800d3c0 <phhalHw_Pn5180_Wait+0x130>)
 800d392:	f00f ffcd 	bl	801d330 <puts>
    }

    return PH_ERR_SUCCESS;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3718      	adds	r7, #24
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	0801fb5c 	.word	0x0801fb5c
 800d3a4:	0801fb74 	.word	0x0801fb74
 800d3a8:	10624dd3 	.word	0x10624dd3
 800d3ac:	0801fb88 	.word	0x0801fb88
 800d3b0:	0801fb9c 	.word	0x0801fb9c
 800d3b4:	00cee8c0 	.word	0x00cee8c0
 800d3b8:	d1b71759 	.word	0xd1b71759
 800d3bc:	51eb851f 	.word	0x51eb851f
 800d3c0:	0801fbb0 	.word	0x0801fbb0

0800d3c4 <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff ff3b 	bl	800d248 <phhalHw_Pn5180_FieldOff>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	81fb      	strh	r3, [r7, #14]
 800d3d6:	89fb      	ldrh	r3, [r7, #14]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <phhalHw_Pn5180_FieldReset+0x1c>
 800d3dc:	89fb      	ldrh	r3, [r7, #14]
 800d3de:	e026      	b.n	800d42e <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7ff ff51 	bl	800d290 <phhalHw_Pn5180_Wait>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	81fb      	strh	r3, [r7, #14]
 800d3f2:	89fb      	ldrh	r3, [r7, #14]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <phhalHw_Pn5180_FieldReset+0x38>
 800d3f8:	89fb      	ldrh	r3, [r7, #14]
 800d3fa:	e018      	b.n	800d42e <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7ff fecd 	bl	800d19c <phhalHw_Pn5180_FieldOn>
 800d402:	4603      	mov	r3, r0
 800d404:	81fb      	strh	r3, [r7, #14]
 800d406:	89fb      	ldrh	r3, [r7, #14]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <phhalHw_Pn5180_FieldReset+0x4c>
 800d40c:	89fb      	ldrh	r3, [r7, #14]
 800d40e:	e00e      	b.n	800d42e <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d414:	461a      	mov	r2, r3
 800d416:	2101      	movs	r1, #1
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff ff39 	bl	800d290 <phhalHw_Pn5180_Wait>
 800d41e:	4603      	mov	r3, r0
 800d420:	81fb      	strh	r3, [r7, #14]
 800d422:	89fb      	ldrh	r3, [r7, #14]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <phhalHw_Pn5180_FieldReset+0x68>
 800d428:	89fb      	ldrh	r3, [r7, #14]
 800d42a:	e000      	b.n	800d42e <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
	...

0800d438 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 800d438:	b5b0      	push	{r4, r5, r7, lr}
 800d43a:	b090      	sub	sp, #64	@ 0x40
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	807b      	strh	r3, [r7, #2]
 800d444:	4613      	mov	r3, r2
 800d446:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800d448:	2300      	movs	r3, #0
 800d44a:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 800d44c:	2300      	movs	r3, #0
 800d44e:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 800d450:	f04f 0300 	mov.w	r3, #0
 800d454:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 800d456:	23ff      	movs	r3, #255	@ 0xff
 800d458:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 800d45a:	887b      	ldrh	r3, [r7, #2]
 800d45c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800d460:	3b25      	subs	r3, #37	@ 0x25
 800d462:	2b07      	cmp	r3, #7
 800d464:	d809      	bhi.n	800d47a <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d46c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d470:	d805      	bhi.n	800d47e <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800d472:	f240 2325 	movw	r3, #549	@ 0x225
 800d476:	f001 bc22 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 800d47a:	bf00      	nop
 800d47c:	e000      	b.n	800d480 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 800d47e:	bf00      	nop
    }

    switch(wConfig)
 800d480:	887b      	ldrh	r3, [r7, #2]
 800d482:	2b5e      	cmp	r3, #94	@ 0x5e
 800d484:	f300 8154 	bgt.w	800d730 <phhalHw_Pn5180_SetConfig+0x2f8>
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f280 808d 	bge.w	800d5a8 <phhalHw_Pn5180_SetConfig+0x170>
 800d48e:	f001 bbd3 	b.w	800ec38 <phhalHw_Pn5180_SetConfig+0x1800>
 800d492:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800d496:	3b10      	subs	r3, #16
 800d498:	2b40      	cmp	r3, #64	@ 0x40
 800d49a:	f201 83cd 	bhi.w	800ec38 <phhalHw_Pn5180_SetConfig+0x1800>
 800d49e:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a4 <phhalHw_Pn5180_SetConfig+0x6c>)
 800d4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a4:	0800e329 	.word	0x0800e329
 800d4a8:	0800ec39 	.word	0x0800ec39
 800d4ac:	0800ec39 	.word	0x0800ec39
 800d4b0:	0800ec39 	.word	0x0800ec39
 800d4b4:	0800ec39 	.word	0x0800ec39
 800d4b8:	0800ec39 	.word	0x0800ec39
 800d4bc:	0800ec39 	.word	0x0800ec39
 800d4c0:	0800ec39 	.word	0x0800ec39
 800d4c4:	0800ec39 	.word	0x0800ec39
 800d4c8:	0800ec39 	.word	0x0800ec39
 800d4cc:	0800ec39 	.word	0x0800ec39
 800d4d0:	0800ec39 	.word	0x0800ec39
 800d4d4:	0800ec39 	.word	0x0800ec39
 800d4d8:	0800ec39 	.word	0x0800ec39
 800d4dc:	0800ec39 	.word	0x0800ec39
 800d4e0:	0800ec39 	.word	0x0800ec39
 800d4e4:	0800ec39 	.word	0x0800ec39
 800d4e8:	0800ec39 	.word	0x0800ec39
 800d4ec:	0800ec39 	.word	0x0800ec39
 800d4f0:	0800ec39 	.word	0x0800ec39
 800d4f4:	0800ec39 	.word	0x0800ec39
 800d4f8:	0800eb49 	.word	0x0800eb49
 800d4fc:	0800eb7b 	.word	0x0800eb7b
 800d500:	0800eb97 	.word	0x0800eb97
 800d504:	0800ebb1 	.word	0x0800ebb1
 800d508:	0800ebcb 	.word	0x0800ebcb
 800d50c:	0800ebe5 	.word	0x0800ebe5
 800d510:	0800ec01 	.word	0x0800ec01
 800d514:	0800ec1d 	.word	0x0800ec1d
 800d518:	0800ec39 	.word	0x0800ec39
 800d51c:	0800ec39 	.word	0x0800ec39
 800d520:	0800ec39 	.word	0x0800ec39
 800d524:	0800ec39 	.word	0x0800ec39
 800d528:	0800ec39 	.word	0x0800ec39
 800d52c:	0800ec39 	.word	0x0800ec39
 800d530:	0800ec39 	.word	0x0800ec39
 800d534:	0800ec39 	.word	0x0800ec39
 800d538:	0800ec39 	.word	0x0800ec39
 800d53c:	0800ec39 	.word	0x0800ec39
 800d540:	0800ec39 	.word	0x0800ec39
 800d544:	0800ec39 	.word	0x0800ec39
 800d548:	0800ec39 	.word	0x0800ec39
 800d54c:	0800ec39 	.word	0x0800ec39
 800d550:	0800ec39 	.word	0x0800ec39
 800d554:	0800ec39 	.word	0x0800ec39
 800d558:	0800ec39 	.word	0x0800ec39
 800d55c:	0800ec39 	.word	0x0800ec39
 800d560:	0800ec39 	.word	0x0800ec39
 800d564:	0800ec39 	.word	0x0800ec39
 800d568:	0800ec39 	.word	0x0800ec39
 800d56c:	0800ec39 	.word	0x0800ec39
 800d570:	0800ec39 	.word	0x0800ec39
 800d574:	0800ec39 	.word	0x0800ec39
 800d578:	0800ec39 	.word	0x0800ec39
 800d57c:	0800ec39 	.word	0x0800ec39
 800d580:	0800ec39 	.word	0x0800ec39
 800d584:	0800ec39 	.word	0x0800ec39
 800d588:	0800ec39 	.word	0x0800ec39
 800d58c:	0800ec39 	.word	0x0800ec39
 800d590:	0800ec39 	.word	0x0800ec39
 800d594:	0800ec39 	.word	0x0800ec39
 800d598:	0800ec39 	.word	0x0800ec39
 800d59c:	0800ec39 	.word	0x0800ec39
 800d5a0:	0800ec39 	.word	0x0800ec39
 800d5a4:	0800e3cb 	.word	0x0800e3cb
 800d5a8:	2b5e      	cmp	r3, #94	@ 0x5e
 800d5aa:	f201 8345 	bhi.w	800ec38 <phhalHw_Pn5180_SetConfig+0x1800>
 800d5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b4 <phhalHw_Pn5180_SetConfig+0x17c>)
 800d5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b4:	0800d749 	.word	0x0800d749
 800d5b8:	0800d7c1 	.word	0x0800d7c1
 800d5bc:	0800d7c1 	.word	0x0800d7c1
 800d5c0:	0800d787 	.word	0x0800d787
 800d5c4:	0800ec39 	.word	0x0800ec39
 800d5c8:	0800d809 	.word	0x0800d809
 800d5cc:	0800da89 	.word	0x0800da89
 800d5d0:	0800db63 	.word	0x0800db63
 800d5d4:	0800d951 	.word	0x0800d951
 800d5d8:	0800dec3 	.word	0x0800dec3
 800d5dc:	0800e0a3 	.word	0x0800e0a3
 800d5e0:	0800dc43 	.word	0x0800dc43
 800d5e4:	0800d749 	.word	0x0800d749
 800d5e8:	0800e1f5 	.word	0x0800e1f5
 800d5ec:	0800e24f 	.word	0x0800e24f
 800d5f0:	0800e2a9 	.word	0x0800e2a9
 800d5f4:	0800ec39 	.word	0x0800ec39
 800d5f8:	0800ec39 	.word	0x0800ec39
 800d5fc:	0800ec39 	.word	0x0800ec39
 800d600:	0800e379 	.word	0x0800e379
 800d604:	0800e391 	.word	0x0800e391
 800d608:	0800e5bb 	.word	0x0800e5bb
 800d60c:	0800e7cd 	.word	0x0800e7cd
 800d610:	0800e905 	.word	0x0800e905
 800d614:	0800d9b1 	.word	0x0800d9b1
 800d618:	0800ec39 	.word	0x0800ec39
 800d61c:	0800ec39 	.word	0x0800ec39
 800d620:	0800ec39 	.word	0x0800ec39
 800d624:	0800ec39 	.word	0x0800ec39
 800d628:	0800ec39 	.word	0x0800ec39
 800d62c:	0800ec39 	.word	0x0800ec39
 800d630:	0800ec39 	.word	0x0800ec39
 800d634:	0800e39b 	.word	0x0800e39b
 800d638:	0800ec39 	.word	0x0800ec39
 800d63c:	0800ec39 	.word	0x0800ec39
 800d640:	0800ec39 	.word	0x0800ec39
 800d644:	0800ec39 	.word	0x0800ec39
 800d648:	0800ec39 	.word	0x0800ec39
 800d64c:	0800ec39 	.word	0x0800ec39
 800d650:	0800ec39 	.word	0x0800ec39
 800d654:	0800ec39 	.word	0x0800ec39
 800d658:	0800ec39 	.word	0x0800ec39
 800d65c:	0800ec39 	.word	0x0800ec39
 800d660:	0800ec39 	.word	0x0800ec39
 800d664:	0800ec39 	.word	0x0800ec39
 800d668:	0800ec39 	.word	0x0800ec39
 800d66c:	0800dd8b 	.word	0x0800dd8b
 800d670:	0800ddc7 	.word	0x0800ddc7
 800d674:	0800dded 	.word	0x0800dded
 800d678:	0800ec39 	.word	0x0800ec39
 800d67c:	0800ec39 	.word	0x0800ec39
 800d680:	0800de31 	.word	0x0800de31
 800d684:	0800de75 	.word	0x0800de75
 800d688:	0800eb0f 	.word	0x0800eb0f
 800d68c:	0800ec39 	.word	0x0800ec39
 800d690:	0800ec39 	.word	0x0800ec39
 800d694:	0800ec39 	.word	0x0800ec39
 800d698:	0800ec39 	.word	0x0800ec39
 800d69c:	0800ec39 	.word	0x0800ec39
 800d6a0:	0800ec39 	.word	0x0800ec39
 800d6a4:	0800ec39 	.word	0x0800ec39
 800d6a8:	0800ec39 	.word	0x0800ec39
 800d6ac:	0800ec39 	.word	0x0800ec39
 800d6b0:	0800ec39 	.word	0x0800ec39
 800d6b4:	0800ec39 	.word	0x0800ec39
 800d6b8:	0800ec39 	.word	0x0800ec39
 800d6bc:	0800ec39 	.word	0x0800ec39
 800d6c0:	0800ec39 	.word	0x0800ec39
 800d6c4:	0800ec39 	.word	0x0800ec39
 800d6c8:	0800ec39 	.word	0x0800ec39
 800d6cc:	0800ec39 	.word	0x0800ec39
 800d6d0:	0800ec39 	.word	0x0800ec39
 800d6d4:	0800ec39 	.word	0x0800ec39
 800d6d8:	0800ec39 	.word	0x0800ec39
 800d6dc:	0800ec39 	.word	0x0800ec39
 800d6e0:	0800ec39 	.word	0x0800ec39
 800d6e4:	0800ec39 	.word	0x0800ec39
 800d6e8:	0800ec39 	.word	0x0800ec39
 800d6ec:	0800ec39 	.word	0x0800ec39
 800d6f0:	0800ec39 	.word	0x0800ec39
 800d6f4:	0800ec39 	.word	0x0800ec39
 800d6f8:	0800e46b 	.word	0x0800e46b
 800d6fc:	0800ec39 	.word	0x0800ec39
 800d700:	0800e487 	.word	0x0800e487
 800d704:	0800ec39 	.word	0x0800ec39
 800d708:	0800eaaf 	.word	0x0800eaaf
 800d70c:	0800e4d5 	.word	0x0800e4d5
 800d710:	0800e4f1 	.word	0x0800e4f1
 800d714:	0800ec39 	.word	0x0800ec39
 800d718:	0800ec39 	.word	0x0800ec39
 800d71c:	0800e3e9 	.word	0x0800e3e9
 800d720:	0800ec39 	.word	0x0800ec39
 800d724:	0800e54d 	.word	0x0800e54d
 800d728:	0800e56b 	.word	0x0800e56b
 800d72c:	0800e3f7 	.word	0x0800e3f7
 800d730:	f248 0250 	movw	r2, #32848	@ 0x8050
 800d734:	4293      	cmp	r3, r2
 800d736:	f301 827f 	bgt.w	800ec38 <phhalHw_Pn5180_SetConfig+0x1800>
 800d73a:	f248 0210 	movw	r2, #32784	@ 0x8010
 800d73e:	4293      	cmp	r3, r2
 800d740:	f6bf aea7 	bge.w	800d492 <phhalHw_Pn5180_SetConfig+0x5a>
 800d744:	f001 ba78 	b.w	800ec38 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 800d748:	887a      	ldrh	r2, [r7, #2]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	322c      	adds	r2, #44	@ 0x2c
 800d74e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d752:	883a      	ldrh	r2, [r7, #0]
 800d754:	429a      	cmp	r2, r3
 800d756:	f001 8272 	beq.w	800ec3e <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800d75a:	883a      	ldrh	r2, [r7, #0]
 800d75c:	887b      	ldrh	r3, [r7, #2]
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f003 fe47 	bl	80113f4 <phhalHw_Pn5180_SetConfig_Int>
 800d766:	4603      	mov	r3, r0
 800d768:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d76a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <phhalHw_Pn5180_SetConfig+0x33e>
 800d770:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d772:	f001 baa4 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d776:	887a      	ldrh	r2, [r7, #2]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	322c      	adds	r2, #44	@ 0x2c
 800d77c:	8839      	ldrh	r1, [r7, #0]
 800d77e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d782:	f001 ba5c 	b.w	800ec3e <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d786:	887a      	ldrh	r2, [r7, #2]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	322c      	adds	r2, #44	@ 0x2c
 800d78c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d790:	883a      	ldrh	r2, [r7, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d105      	bne.n	800d7a2 <phhalHw_Pn5180_SetConfig+0x36a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	f001 8250 	beq.w	800ec42 <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 800d7a2:	883b      	ldrh	r3, [r7, #0]
 800d7a4:	2b07      	cmp	r3, #7
 800d7a6:	d903      	bls.n	800d7b0 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d7a8:	f240 2321 	movw	r3, #545	@ 0x221
 800d7ac:	f001 ba87 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d7b0:	887a      	ldrh	r2, [r7, #2]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	322c      	adds	r2, #44	@ 0x2c
 800d7b6:	8839      	ldrh	r1, [r7, #0]
 800d7b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d7bc:	f001 ba41 	b.w	800ec42 <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d7c0:	887a      	ldrh	r2, [r7, #2]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	322c      	adds	r2, #44	@ 0x2c
 800d7c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d7ca:	883a      	ldrh	r2, [r7, #0]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d105      	bne.n	800d7dc <phhalHw_Pn5180_SetConfig+0x3a4>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	f001 8235 	beq.w	800ec46 <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800d7dc:	883a      	ldrh	r2, [r7, #0]
 800d7de:	887b      	ldrh	r3, [r7, #2]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f003 fe06 	bl	80113f4 <phhalHw_Pn5180_SetConfig_Int>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d7ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <phhalHw_Pn5180_SetConfig+0x3c0>
 800d7f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7f4:	f001 ba63 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d7f8:	887a      	ldrh	r2, [r7, #2]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	322c      	adds	r2, #44	@ 0x2c
 800d7fe:	8839      	ldrh	r1, [r7, #0]
 800d800:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 800d804:	f001 ba1f 	b.w	800ec46 <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d808:	887a      	ldrh	r2, [r7, #2]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	322c      	adds	r2, #44	@ 0x2c
 800d80e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d812:	883a      	ldrh	r2, [r7, #0]
 800d814:	429a      	cmp	r2, r3
 800d816:	d105      	bne.n	800d824 <phhalHw_Pn5180_SetConfig+0x3ec>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d81e:	2b01      	cmp	r3, #1
 800d820:	f001 8213 	beq.w	800ec4a <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 800d824:	883b      	ldrh	r3, [r7, #0]
 800d826:	2b07      	cmp	r3, #7
 800d828:	d903      	bls.n	800d832 <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d82a:	f240 2321 	movw	r3, #545	@ 0x221
 800d82e:	f001 ba46 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800d832:	2300      	movs	r3, #0
 800d834:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 800d836:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 800d83a:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800d83c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d842:	3338      	adds	r3, #56	@ 0x38
 800d844:	443b      	add	r3, r7
 800d846:	2212      	movs	r2, #18
 800d848:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800d84c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d84e:	1c5a      	adds	r2, r3, #1
 800d850:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d852:	3338      	adds	r3, #56	@ 0x38
 800d854:	443b      	add	r3, r7
 800d856:	2203      	movs	r2, #3
 800d858:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800d85c:	68ba      	ldr	r2, [r7, #8]
 800d85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d860:	1c59      	adds	r1, r3, #1
 800d862:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d864:	b2d2      	uxtb	r2, r2
 800d866:	3338      	adds	r3, #56	@ 0x38
 800d868:	443b      	add	r3, r7
 800d86a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	0a1a      	lsrs	r2, r3, #8
 800d872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d874:	1c59      	adds	r1, r3, #1
 800d876:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d878:	b2d2      	uxtb	r2, r2
 800d87a:	3338      	adds	r3, #56	@ 0x38
 800d87c:	443b      	add	r3, r7
 800d87e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	0c1a      	lsrs	r2, r3, #16
 800d886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d888:	1c59      	adds	r1, r3, #1
 800d88a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d88c:	b2d2      	uxtb	r2, r2
 800d88e:	3338      	adds	r3, #56	@ 0x38
 800d890:	443b      	add	r3, r7
 800d892:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	0e1a      	lsrs	r2, r3, #24
 800d89a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d89c:	1c59      	adds	r1, r3, #1
 800d89e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d8a0:	b2d2      	uxtb	r2, r2
 800d8a2:	3338      	adds	r3, #56	@ 0x38
 800d8a4:	443b      	add	r3, r7
 800d8a6:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 800d8aa:	883b      	ldrh	r3, [r7, #0]
 800d8ac:	019b      	lsls	r3, r3, #6
 800d8ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800d8b2:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800d8b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8b6:	1c5a      	adds	r2, r3, #1
 800d8b8:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d8ba:	3338      	adds	r3, #56	@ 0x38
 800d8bc:	443b      	add	r3, r7
 800d8be:	2212      	movs	r2, #18
 800d8c0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800d8c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d8ca:	3338      	adds	r3, #56	@ 0x38
 800d8cc:	443b      	add	r3, r7
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8d8:	1c59      	adds	r1, r3, #1
 800d8da:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d8dc:	b2d2      	uxtb	r2, r2
 800d8de:	3338      	adds	r3, #56	@ 0x38
 800d8e0:	443b      	add	r3, r7
 800d8e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	0a1a      	lsrs	r2, r3, #8
 800d8ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8ec:	1c59      	adds	r1, r3, #1
 800d8ee:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	3338      	adds	r3, #56	@ 0x38
 800d8f4:	443b      	add	r3, r7
 800d8f6:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	0c1a      	lsrs	r2, r3, #16
 800d8fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d900:	1c59      	adds	r1, r3, #1
 800d902:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	3338      	adds	r3, #56	@ 0x38
 800d908:	443b      	add	r3, r7
 800d90a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	0e1a      	lsrs	r2, r3, #24
 800d912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d914:	1c59      	adds	r1, r3, #1
 800d916:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d918:	b2d2      	uxtb	r2, r2
 800d91a:	3338      	adds	r3, #56	@ 0x38
 800d91c:	443b      	add	r3, r7
 800d91e:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800d922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d924:	f107 030c 	add.w	r3, r7, #12
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f002 fcf0 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800d930:	4603      	mov	r3, r0
 800d932:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <phhalHw_Pn5180_SetConfig+0x508>
 800d93a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d93c:	f001 b9bf 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d940:	887a      	ldrh	r2, [r7, #2]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	322c      	adds	r2, #44	@ 0x2c
 800d946:	8839      	ldrh	r1, [r7, #0]
 800d948:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d94c:	f001 b97d 	b.w	800ec4a <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 800d950:	887a      	ldrh	r2, [r7, #2]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	322c      	adds	r2, #44	@ 0x2c
 800d956:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d95a:	883a      	ldrh	r2, [r7, #0]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	f001 8176 	beq.w	800ec4e <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 800d962:	883b      	ldrh	r3, [r7, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10d      	bne.n	800d984 <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 800d968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d96c:	2112      	movs	r1, #18
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f002 fbe2 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800d974:	4603      	mov	r3, r0
 800d976:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d978:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d010      	beq.n	800d9a0 <phhalHw_Pn5180_SetConfig+0x568>
 800d97e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d980:	f001 b99d 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 800d984:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800d988:	2112      	movs	r1, #18
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f002 fc4a 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d990:	4603      	mov	r3, r0
 800d992:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d994:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d996:	2b00      	cmp	r3, #0
 800d998:	d002      	beq.n	800d9a0 <phhalHw_Pn5180_SetConfig+0x568>
 800d99a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d99c:	f001 b98f 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d9a0:	887a      	ldrh	r2, [r7, #2]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	322c      	adds	r2, #44	@ 0x2c
 800d9a6:	8839      	ldrh	r1, [r7, #0]
 800d9a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d9ac:	f001 b94f 	b.w	800ec4e <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 800d9b0:	883b      	ldrh	r3, [r7, #0]
 800d9b2:	f240 228a 	movw	r2, #650	@ 0x28a
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d903      	bls.n	800d9c2 <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d9ba:	f240 2321 	movw	r3, #545	@ 0x221
 800d9be:	f001 b97e 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 800d9c2:	883a      	ldrh	r2, [r7, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 800d9c8:	f04f 0300 	mov.w	r3, #0
 800d9cc:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800d9ce:	237f      	movs	r3, #127	@ 0x7f
 800d9d0:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 800d9d2:	883b      	ldrh	r3, [r7, #0]
 800d9d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d9d8:	fb02 f303 	mul.w	r3, r2, r3
 800d9dc:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d043      	beq.n	800da6c <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	ee07 3a90 	vmov	s15, r3
 800d9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ee:	ee17 0a90 	vmov	r0, s15
 800d9f2:	f7f2 fda9 	bl	8000548 <__aeabi_f2d>
 800d9f6:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	f7f2 fdfb 	bl	80005f8 <__aeabi_dmul>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4614      	mov	r4, r2
 800da08:	461d      	mov	r5, r3
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	ee07 3a90 	vmov	s15, r3
 800da10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da14:	ee17 0a90 	vmov	r0, s15
 800da18:	f7f2 fd96 	bl	8000548 <__aeabi_f2d>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4620      	mov	r0, r4
 800da22:	4629      	mov	r1, r5
 800da24:	f7f2 ff12 	bl	800084c <__aeabi_ddiv>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4610      	mov	r0, r2
 800da2e:	4619      	mov	r1, r3
 800da30:	f7f3 f8ba 	bl	8000ba8 <__aeabi_d2f>
 800da34:	4603      	mov	r3, r0
 800da36:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 800da38:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800da3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da40:	ee17 3a90 	vmov	r3, s15
 800da44:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	021b      	lsls	r3, r3, #8
 800da4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da4c:	4313      	orrs	r3, r2
 800da4e:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800da50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da52:	2117      	movs	r1, #23
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7fe ff35 	bl	800c8c4 <phhalHw_Pn5180_WriteRegister>
 800da5a:	4603      	mov	r3, r0
 800da5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da60:	2b00      	cmp	r3, #0
 800da62:	f001 80f6 	beq.w	800ec52 <phhalHw_Pn5180_SetConfig+0x181a>
 800da66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da68:	f001 b929 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800da6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da6e:	2117      	movs	r1, #23
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7fe ff27 	bl	800c8c4 <phhalHw_Pn5180_WriteRegister>
 800da76:	4603      	mov	r3, r0
 800da78:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f001 80e8 	beq.w	800ec52 <phhalHw_Pn5180_SetConfig+0x181a>
 800da82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da84:	f001 b91b 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800da88:	887a      	ldrh	r2, [r7, #2]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	322c      	adds	r2, #44	@ 0x2c
 800da8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800da92:	883a      	ldrh	r2, [r7, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d105      	bne.n	800daa4 <phhalHw_Pn5180_SetConfig+0x66c>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	f001 80d9 	beq.w	800ec56 <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800daa4:	887a      	ldrh	r2, [r7, #2]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	322c      	adds	r2, #44	@ 0x2c
 800daaa:	8839      	ldrh	r1, [r7, #0]
 800daac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800dab0:	237f      	movs	r3, #127	@ 0x7f
 800dab2:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800dab4:	883b      	ldrh	r3, [r7, #0]
 800dab6:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d043      	beq.n	800db46 <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	ee07 3a90 	vmov	s15, r3
 800dac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac8:	ee17 0a90 	vmov	r0, s15
 800dacc:	f7f2 fd3c 	bl	8000548 <__aeabi_f2d>
 800dad0:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4614      	mov	r4, r2
 800dae2:	461d      	mov	r5, r3
 800dae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae6:	ee07 3a90 	vmov	s15, r3
 800daea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daee:	ee17 0a90 	vmov	r0, s15
 800daf2:	f7f2 fd29 	bl	8000548 <__aeabi_f2d>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4620      	mov	r0, r4
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7f2 fea5 	bl	800084c <__aeabi_ddiv>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4610      	mov	r0, r2
 800db08:	4619      	mov	r1, r3
 800db0a:	f7f3 f84d 	bl	8000ba8 <__aeabi_d2f>
 800db0e:	4603      	mov	r3, r0
 800db10:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800db12:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800db16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1a:	ee17 3a90 	vmov	r3, s15
 800db1e:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	021b      	lsls	r3, r3, #8
 800db24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db26:	4313      	orrs	r3, r2
 800db28:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800db2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db2c:	2111      	movs	r1, #17
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f002 fa8c 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800db34:	4603      	mov	r3, r0
 800db36:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f001 808b 	beq.w	800ec56 <phhalHw_Pn5180_SetConfig+0x181e>
 800db40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db42:	f001 b8bc 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800db46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db48:	2111      	movs	r1, #17
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f002 fa7e 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800db50:	4603      	mov	r3, r0
 800db52:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db56:	2b00      	cmp	r3, #0
 800db58:	f001 807d 	beq.w	800ec56 <phhalHw_Pn5180_SetConfig+0x181e>
 800db5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db5e:	f001 b8ae 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800db62:	887a      	ldrh	r2, [r7, #2]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	322c      	adds	r2, #44	@ 0x2c
 800db68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db6c:	883a      	ldrh	r2, [r7, #0]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d105      	bne.n	800db7e <phhalHw_Pn5180_SetConfig+0x746>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800db78:	2b01      	cmp	r3, #1
 800db7a:	f001 806e 	beq.w	800ec5a <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800db7e:	887a      	ldrh	r2, [r7, #2]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	322c      	adds	r2, #44	@ 0x2c
 800db84:	8839      	ldrh	r1, [r7, #0]
 800db86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 800db8a:	f04f 0300 	mov.w	r3, #0
 800db8e:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800db90:	237f      	movs	r3, #127	@ 0x7f
 800db92:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800db94:	883b      	ldrh	r3, [r7, #0]
 800db96:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d043      	beq.n	800dc26 <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	ee07 3a90 	vmov	s15, r3
 800dba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba8:	ee17 0a90 	vmov	r0, s15
 800dbac:	f7f2 fccc 	bl	8000548 <__aeabi_f2d>
 800dbb0:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f7f2 fd1e 	bl	80005f8 <__aeabi_dmul>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4614      	mov	r4, r2
 800dbc2:	461d      	mov	r5, r3
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbce:	ee17 0a90 	vmov	r0, s15
 800dbd2:	f7f2 fcb9 	bl	8000548 <__aeabi_f2d>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7f2 fe35 	bl	800084c <__aeabi_ddiv>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	4619      	mov	r1, r3
 800dbea:	f7f2 ffdd 	bl	8000ba8 <__aeabi_d2f>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800dbf2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800dbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbfa:	ee17 3a90 	vmov	r3, s15
 800dbfe:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	021b      	lsls	r3, r3, #8
 800dc04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc06:	4313      	orrs	r3, r2
 800dc08:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800dc0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc0c:	2117      	movs	r1, #23
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7fe fe58 	bl	800c8c4 <phhalHw_Pn5180_WriteRegister>
 800dc14:	4603      	mov	r3, r0
 800dc16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dc18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f001 801d 	beq.w	800ec5a <phhalHw_Pn5180_SetConfig+0x1822>
 800dc20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc22:	f001 b84c 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800dc26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc28:	2117      	movs	r1, #23
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7fe fe4a 	bl	800c8c4 <phhalHw_Pn5180_WriteRegister>
 800dc30:	4603      	mov	r3, r0
 800dc32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dc34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f001 800f 	beq.w	800ec5a <phhalHw_Pn5180_SetConfig+0x1822>
 800dc3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc3e:	f001 b83e 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800dc42:	887a      	ldrh	r2, [r7, #2]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	322c      	adds	r2, #44	@ 0x2c
 800dc48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dc4c:	883a      	ldrh	r2, [r7, #0]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d105      	bne.n	800dc5e <phhalHw_Pn5180_SetConfig+0x826>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	f001 8000 	beq.w	800ec5e <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 800dc5e:	883b      	ldrh	r3, [r7, #0]
 800dc60:	2b1f      	cmp	r3, #31
 800dc62:	d903      	bls.n	800dc6c <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800dc64:	f240 2321 	movw	r3, #545	@ 0x221
 800dc68:	f001 b829 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 800dc70:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 800dc74:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800dc76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800dc7c:	3338      	adds	r3, #56	@ 0x38
 800dc7e:	443b      	add	r3, r7
 800dc80:	2220      	movs	r2, #32
 800dc82:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800dc86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800dc8c:	3338      	adds	r3, #56	@ 0x38
 800dc8e:	443b      	add	r3, r7
 800dc90:	2203      	movs	r2, #3
 800dc92:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc9a:	1c59      	adds	r1, r3, #1
 800dc9c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dc9e:	b2d2      	uxtb	r2, r2
 800dca0:	3338      	adds	r3, #56	@ 0x38
 800dca2:	443b      	add	r3, r7
 800dca4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	0a1a      	lsrs	r2, r3, #8
 800dcac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcae:	1c59      	adds	r1, r3, #1
 800dcb0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dcb2:	b2d2      	uxtb	r2, r2
 800dcb4:	3338      	adds	r3, #56	@ 0x38
 800dcb6:	443b      	add	r3, r7
 800dcb8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	0c1a      	lsrs	r2, r3, #16
 800dcc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcc2:	1c59      	adds	r1, r3, #1
 800dcc4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dcc6:	b2d2      	uxtb	r2, r2
 800dcc8:	3338      	adds	r3, #56	@ 0x38
 800dcca:	443b      	add	r3, r7
 800dccc:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	0e1a      	lsrs	r2, r3, #24
 800dcd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcd6:	1c59      	adds	r1, r3, #1
 800dcd8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dcda:	b2d2      	uxtb	r2, r2
 800dcdc:	3338      	adds	r3, #56	@ 0x38
 800dcde:	443b      	add	r3, r7
 800dce0:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 800dce4:	883b      	ldrh	r3, [r7, #0]
 800dce6:	035b      	lsls	r3, r3, #13
 800dce8:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 800dcec:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800dcee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcf0:	1c5a      	adds	r2, r3, #1
 800dcf2:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800dcf4:	3338      	adds	r3, #56	@ 0x38
 800dcf6:	443b      	add	r3, r7
 800dcf8:	2220      	movs	r2, #32
 800dcfa:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800dcfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd00:	1c5a      	adds	r2, r3, #1
 800dd02:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800dd04:	3338      	adds	r3, #56	@ 0x38
 800dd06:	443b      	add	r3, r7
 800dd08:	2202      	movs	r2, #2
 800dd0a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd12:	1c59      	adds	r1, r3, #1
 800dd14:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dd16:	b2d2      	uxtb	r2, r2
 800dd18:	3338      	adds	r3, #56	@ 0x38
 800dd1a:	443b      	add	r3, r7
 800dd1c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	0a1a      	lsrs	r2, r3, #8
 800dd24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd26:	1c59      	adds	r1, r3, #1
 800dd28:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dd2a:	b2d2      	uxtb	r2, r2
 800dd2c:	3338      	adds	r3, #56	@ 0x38
 800dd2e:	443b      	add	r3, r7
 800dd30:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	0c1a      	lsrs	r2, r3, #16
 800dd38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd3a:	1c59      	adds	r1, r3, #1
 800dd3c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dd3e:	b2d2      	uxtb	r2, r2
 800dd40:	3338      	adds	r3, #56	@ 0x38
 800dd42:	443b      	add	r3, r7
 800dd44:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	0e1a      	lsrs	r2, r3, #24
 800dd4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd4e:	1c59      	adds	r1, r3, #1
 800dd50:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	3338      	adds	r3, #56	@ 0x38
 800dd56:	443b      	add	r3, r7
 800dd58:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800dd5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f002 fad3 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dd6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <phhalHw_Pn5180_SetConfig+0x942>
 800dd74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd76:	f000 bfa2 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800dd7a:	887a      	ldrh	r2, [r7, #2]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	322c      	adds	r2, #44	@ 0x2c
 800dd80:	8839      	ldrh	r1, [r7, #0]
 800dd82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800dd86:	f000 bf6a 	b.w	800ec5e <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 800dd8a:	883b      	ldrh	r3, [r7, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 8768 	beq.w	800ec62 <phhalHw_Pn5180_SetConfig+0x182a>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	f040 8762 	bne.w	800ec62 <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 800dd9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dda2:	2100      	movs	r1, #0
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f002 fa3d 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ddae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d002      	beq.n	800ddba <phhalHw_Pn5180_SetConfig+0x982>
 800ddb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ddb6:	f000 bf82 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 800ddc2:	f000 bf4e 	b.w	800ec62 <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 800ddc6:	883b      	ldrh	r3, [r7, #0]
 800ddc8:	3302      	adds	r3, #2
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	f040 8745 	bne.w	800ec66 <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800dde0:	3301      	adds	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 800dde8:	f000 bf3d 	b.w	800ec66 <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ddec:	f107 0118 	add.w	r1, r7, #24
 800ddf0:	f107 021c 	add.w	r2, r7, #28
 800ddf4:	f107 031a 	add.w	r3, r7, #26
 800ddf8:	9300      	str	r3, [sp, #0]
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f003 f931 	bl	8011066 <phhalHw_Pn5180_GetRxBuffer>
 800de04:	4603      	mov	r3, r0
 800de06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <phhalHw_Pn5180_SetConfig+0x9dc>
 800de0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de10:	f000 bf55 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8b1b      	ldrh	r3, [r3, #24]
 800de18:	883a      	ldrh	r2, [r7, #0]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d303      	bcc.n	800de26 <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800de1e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800de22:	f000 bf4c 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	883a      	ldrh	r2, [r7, #0]
 800de2a:	83da      	strh	r2, [r3, #30]
        break;
 800de2c:	f000 bf46 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800de30:	f107 0118 	add.w	r1, r7, #24
 800de34:	f107 021c 	add.w	r2, r7, #28
 800de38:	f107 031a 	add.w	r3, r7, #26
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	460b      	mov	r3, r1
 800de40:	2101      	movs	r1, #1
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f003 f8d3 	bl	8010fee <phhalHw_Pn5180_GetTxBuffer>
 800de48:	4603      	mov	r3, r0
 800de4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <phhalHw_Pn5180_SetConfig+0xa20>
 800de52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de54:	f000 bf33 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8a1b      	ldrh	r3, [r3, #16]
 800de5c:	883a      	ldrh	r2, [r7, #0]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d903      	bls.n	800de6a <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800de62:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800de66:	f000 bf2a 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	883a      	ldrh	r2, [r7, #0]
 800de6e:	825a      	strh	r2, [r3, #18]
        break;
 800de70:	f000 bf24 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800de74:	f107 0118 	add.w	r1, r7, #24
 800de78:	f107 021c 	add.w	r2, r7, #28
 800de7c:	f107 031a 	add.w	r3, r7, #26
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	460b      	mov	r3, r1
 800de84:	2101      	movs	r1, #1
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f003 f8b1 	bl	8010fee <phhalHw_Pn5180_GetTxBuffer>
 800de8c:	4603      	mov	r3, r0
 800de8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de92:	2b00      	cmp	r3, #0
 800de94:	d002      	beq.n	800de9c <phhalHw_Pn5180_SetConfig+0xa64>
 800de96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de98:	f000 bf11 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	8a1b      	ldrh	r3, [r3, #16]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d303      	bcc.n	800deb0 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dea8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800deac:	f000 bf07 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800deb6:	4413      	add	r3, r2
 800deb8:	883a      	ldrh	r2, [r7, #0]
 800deba:	b2d2      	uxtb	r2, r2
 800debc:	701a      	strb	r2, [r3, #0]
        break;
 800debe:	f000 befd 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800dec2:	887a      	ldrh	r2, [r7, #2]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	322c      	adds	r2, #44	@ 0x2c
 800dec8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800decc:	883a      	ldrh	r2, [r7, #0]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d105      	bne.n	800dede <phhalHw_Pn5180_SetConfig+0xaa6>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ded8:	2b01      	cmp	r3, #1
 800deda:	f000 86c6 	beq.w	800ec6a <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800dede:	883b      	ldrh	r3, [r7, #0]
 800dee0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dee4:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800dee6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dee8:	0a1b      	lsrs	r3, r3, #8
 800deea:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800deec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800deee:	2b00      	cmp	r3, #0
 800def0:	d011      	beq.n	800df16 <phhalHw_Pn5180_SetConfig+0xade>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800def8:	461a      	mov	r2, r3
 800defa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800defc:	4293      	cmp	r3, r2
 800defe:	d00a      	beq.n	800df16 <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800df00:	883b      	ldrh	r3, [r7, #0]
 800df02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df0a:	d004      	beq.n	800df16 <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800df0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800df16:	883b      	ldrh	r3, [r7, #0]
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df22:	2b04      	cmp	r3, #4
 800df24:	d104      	bne.n	800df30 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 800df26:	883b      	ldrh	r3, [r7, #0]
 800df28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800df2a:	230b      	movs	r3, #11
 800df2c:	803b      	strh	r3, [r7, #0]
 800df2e:	e00f      	b.n	800df50 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800df36:	8839      	ldrh	r1, [r7, #0]
 800df38:	22ff      	movs	r2, #255	@ 0xff
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f003 fcdc 	bl	80118f8 <phhalHw_Pn5180_SetCardMode>
 800df40:	4603      	mov	r3, r0
 800df42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <phhalHw_Pn5180_SetConfig+0xb18>
 800df4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df4c:	f000 beb7 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800df50:	887a      	ldrh	r2, [r7, #2]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	322c      	adds	r2, #44	@ 0x2c
 800df56:	8839      	ldrh	r1, [r7, #0]
 800df58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df62:	2b04      	cmp	r3, #4
 800df64:	d11d      	bne.n	800dfa2 <phhalHw_Pn5180_SetConfig+0xb6a>
 800df66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800df68:	2b0b      	cmp	r3, #11
 800df6a:	d11a      	bne.n	800dfa2 <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 800df6c:	2204      	movs	r2, #4
 800df6e:	2142      	movs	r1, #66	@ 0x42
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f002 f86b 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800df76:	4603      	mov	r3, r0
 800df78:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <phhalHw_Pn5180_SetConfig+0xb4e>
 800df80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df82:	f000 be9c 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 800df86:	2243      	movs	r2, #67	@ 0x43
 800df88:	213b      	movs	r1, #59	@ 0x3b
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f002 f85e 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800df90:	4603      	mov	r3, r0
 800df92:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df96:	2b00      	cmp	r3, #0
 800df98:	f000 8081 	beq.w	800e09e <phhalHw_Pn5180_SetConfig+0xc66>
 800df9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df9e:	f000 be8e 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dfa8:	2b04      	cmp	r3, #4
 800dfaa:	d123      	bne.n	800dff4 <phhalHw_Pn5180_SetConfig+0xbbc>
 800dfac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dfae:	2b1b      	cmp	r3, #27
 800dfb0:	d120      	bne.n	800dff4 <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 800dfb2:	2205      	movs	r2, #5
 800dfb4:	2142      	movs	r1, #66	@ 0x42
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f002 f848 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dfc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <phhalHw_Pn5180_SetConfig+0xb94>
 800dfc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfc8:	f000 be79 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 800dfcc:	2244      	movs	r2, #68	@ 0x44
 800dfce:	213b      	movs	r1, #59	@ 0x3b
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f002 f83b 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dfda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d002      	beq.n	800dfe6 <phhalHw_Pn5180_SetConfig+0xbae>
 800dfe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfe2:	f000 be6c 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800dfe6:	887a      	ldrh	r2, [r7, #2]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	322c      	adds	r2, #44	@ 0x2c
 800dfec:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800dfee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800dff2:	e054      	b.n	800e09e <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d123      	bne.n	800e046 <phhalHw_Pn5180_SetConfig+0xc0e>
 800dffe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e000:	2b00      	cmp	r3, #0
 800e002:	d120      	bne.n	800e046 <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 800e004:	2206      	movs	r2, #6
 800e006:	2142      	movs	r1, #66	@ 0x42
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f002 f81f 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e00e:	4603      	mov	r3, r0
 800e010:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e012:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <phhalHw_Pn5180_SetConfig+0xbe6>
 800e018:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e01a:	f000 be50 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 800e01e:	2245      	movs	r2, #69	@ 0x45
 800e020:	213b      	movs	r1, #59	@ 0x3b
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f002 f812 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e028:	4603      	mov	r3, r0
 800e02a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e02c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <phhalHw_Pn5180_SetConfig+0xc00>
 800e032:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e034:	f000 be43 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800e038:	887a      	ldrh	r2, [r7, #2]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	322c      	adds	r2, #44	@ 0x2c
 800e03e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e040:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800e044:	e02b      	b.n	800e09e <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e04c:	2b04      	cmp	r3, #4
 800e04e:	f040 860c 	bne.w	800ec6a <phhalHw_Pn5180_SetConfig+0x1832>
 800e052:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e054:	2b01      	cmp	r3, #1
 800e056:	f040 8608 	bne.w	800ec6a <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 800e05a:	2207      	movs	r2, #7
 800e05c:	2142      	movs	r1, #66	@ 0x42
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f001 fff4 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e064:	4603      	mov	r3, r0
 800e066:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e068:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <phhalHw_Pn5180_SetConfig+0xc3c>
 800e06e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e070:	f000 be25 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 800e074:	2246      	movs	r2, #70	@ 0x46
 800e076:	213b      	movs	r1, #59	@ 0x3b
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f001 ffe7 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e07e:	4603      	mov	r3, r0
 800e080:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e082:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <phhalHw_Pn5180_SetConfig+0xc56>
 800e088:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e08a:	f000 be18 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800e08e:	887a      	ldrh	r2, [r7, #2]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	322c      	adds	r2, #44	@ 0x2c
 800e094:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e096:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 800e09a:	f000 bde6 	b.w	800ec6a <phhalHw_Pn5180_SetConfig+0x1832>
 800e09e:	f000 bde4 	b.w	800ec6a <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e0a2:	887a      	ldrh	r2, [r7, #2]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	322c      	adds	r2, #44	@ 0x2c
 800e0a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e0ac:	883a      	ldrh	r2, [r7, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d105      	bne.n	800e0be <phhalHw_Pn5180_SetConfig+0xc86>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	f000 85d8 	beq.w	800ec6e <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800e0be:	883b      	ldrh	r3, [r7, #0]
 800e0c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e0c4:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800e0c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0c8:	0a1b      	lsrs	r3, r3, #8
 800e0ca:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800e0cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d011      	beq.n	800e0f6 <phhalHw_Pn5180_SetConfig+0xcbe>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e0d8:	461a      	mov	r2, r3
 800e0da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d00a      	beq.n	800e0f6 <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800e0e0:	883b      	ldrh	r3, [r7, #0]
 800e0e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e0e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0ea:	d004      	beq.n	800e0f6 <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800e0ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800e0f6:	883b      	ldrh	r3, [r7, #0]
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e102:	2b04      	cmp	r3, #4
 800e104:	d106      	bne.n	800e114 <phhalHw_Pn5180_SetConfig+0xcdc>
 800e106:	883b      	ldrh	r3, [r7, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d103      	bne.n	800e114 <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 800e10c:	883b      	ldrh	r3, [r7, #0]
 800e10e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 800e110:	230f      	movs	r3, #15
 800e112:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800e11a:	883a      	ldrh	r2, [r7, #0]
 800e11c:	21ff      	movs	r1, #255	@ 0xff
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f003 fbea 	bl	80118f8 <phhalHw_Pn5180_SetCardMode>
 800e124:	4603      	mov	r3, r0
 800e126:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e128:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d002      	beq.n	800e134 <phhalHw_Pn5180_SetConfig+0xcfc>
 800e12e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e130:	f000 bdc5 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e134:	887a      	ldrh	r2, [r7, #2]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	322c      	adds	r2, #44	@ 0x2c
 800e13a:	8839      	ldrh	r1, [r7, #0]
 800e13c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e146:	2b04      	cmp	r3, #4
 800e148:	f040 8591 	bne.w	800ec6e <phhalHw_Pn5180_SetConfig+0x1836>
 800e14c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f040 858d 	bne.w	800ec6e <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 800e154:	f107 0308 	add.w	r3, r7, #8
 800e158:	461a      	mov	r2, r3
 800e15a:	211a      	movs	r1, #26
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f002 f989 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800e162:	4603      	mov	r3, r0
 800e164:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <phhalHw_Pn5180_SetConfig+0xd3a>
 800e16c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e16e:	f000 bda6 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 800e178:	4013      	ands	r3, r2
 800e17a:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f043 0304 	orr.w	r3, r3, #4
 800e182:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	461a      	mov	r2, r3
 800e188:	211a      	movs	r1, #26
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f001 ff5e 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e190:	4603      	mov	r3, r0
 800e192:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e194:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e196:	2b00      	cmp	r3, #0
 800e198:	d002      	beq.n	800e1a0 <phhalHw_Pn5180_SetConfig+0xd68>
 800e19a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e19c:	f000 bd8f 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 800e1a0:	f107 0308 	add.w	r3, r7, #8
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	211c      	movs	r1, #28
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f002 f963 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e1b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <phhalHw_Pn5180_SetConfig+0xd86>
 800e1b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1ba:	f000 bd80 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	211c      	movs	r1, #28
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f001 ff3c 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e1d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d002      	beq.n	800e1e4 <phhalHw_Pn5180_SetConfig+0xdac>
 800e1de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1e0:	f000 bd6d 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800e1e4:	887a      	ldrh	r2, [r7, #2]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	322c      	adds	r2, #44	@ 0x2c
 800e1ea:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e1ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 800e1f0:	f000 bd3d 	b.w	800ec6e <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e1f4:	887a      	ldrh	r2, [r7, #2]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	322c      	adds	r2, #44	@ 0x2c
 800e1fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e1fe:	883a      	ldrh	r2, [r7, #0]
 800e200:	429a      	cmp	r2, r3
 800e202:	d10a      	bne.n	800e21a <phhalHw_Pn5180_SetConfig+0xde2>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d105      	bne.n	800e21a <phhalHw_Pn5180_SetConfig+0xde2>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e214:	2b01      	cmp	r3, #1
 800e216:	f000 852c 	beq.w	800ec72 <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e21a:	883b      	ldrh	r3, [r7, #0]
 800e21c:	2200      	movs	r2, #0
 800e21e:	4619      	mov	r1, r3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f003 fe5f 	bl	8011ee4 <phhalHw_Pn5180_SetTmo>
 800e226:	4603      	mov	r3, r0
 800e228:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e22a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d002      	beq.n	800e236 <phhalHw_Pn5180_SetConfig+0xdfe>
 800e230:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e232:	f000 bd44 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e236:	887a      	ldrh	r2, [r7, #2]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	322c      	adds	r2, #44	@ 0x2c
 800e23c:	8839      	ldrh	r1, [r7, #0]
 800e23e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800e24a:	f000 bd12 	b.w	800ec72 <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e24e:	887a      	ldrh	r2, [r7, #2]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	322c      	adds	r2, #44	@ 0x2c
 800e254:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e258:	883a      	ldrh	r2, [r7, #0]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d10a      	bne.n	800e274 <phhalHw_Pn5180_SetConfig+0xe3c>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e264:	2b01      	cmp	r3, #1
 800e266:	d105      	bne.n	800e274 <phhalHw_Pn5180_SetConfig+0xe3c>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e26e:	2b01      	cmp	r3, #1
 800e270:	f000 8501 	beq.w	800ec76 <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e274:	883b      	ldrh	r3, [r7, #0]
 800e276:	2201      	movs	r2, #1
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f003 fe32 	bl	8011ee4 <phhalHw_Pn5180_SetTmo>
 800e280:	4603      	mov	r3, r0
 800e282:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <phhalHw_Pn5180_SetConfig+0xe58>
 800e28a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e28c:	f000 bd17 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e290:	887a      	ldrh	r2, [r7, #2]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	322c      	adds	r2, #44	@ 0x2c
 800e296:	8839      	ldrh	r1, [r7, #0]
 800e298:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800e2a4:	f000 bce7 	b.w	800ec76 <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e2a8:	887a      	ldrh	r2, [r7, #2]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	322c      	adds	r2, #44	@ 0x2c
 800e2ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e2b2:	883a      	ldrh	r2, [r7, #0]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d105      	bne.n	800e2c4 <phhalHw_Pn5180_SetConfig+0xe8c>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	f000 84db 	beq.w	800ec7a <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d008      	beq.n	800e2e0 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e2d4:	2b06      	cmp	r3, #6
 800e2d6:	d003      	beq.n	800e2e0 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e2d8:	f240 2325 	movw	r3, #549	@ 0x225
 800e2dc:	f000 bcef 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e2e6:	2b04      	cmp	r3, #4
 800e2e8:	d106      	bne.n	800e2f8 <phhalHw_Pn5180_SetConfig+0xec0>
 800e2ea:	883b      	ldrh	r3, [r7, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d003      	beq.n	800e2f8 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e2f0:	f240 2323 	movw	r3, #547	@ 0x223
 800e2f4:	f000 bce3 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 800e304:	883b      	ldrh	r3, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f003 faf6 	bl	80118f8 <phhalHw_Pn5180_SetCardMode>
 800e30c:	4603      	mov	r3, r0
 800e30e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e310:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <phhalHw_Pn5180_SetConfig+0xee4>
 800e316:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e318:	f000 bcd1 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	883a      	ldrh	r2, [r7, #0]
 800e320:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 800e324:	f000 bca9 	b.w	800ec7a <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800e328:	883b      	ldrh	r3, [r7, #0]
 800e32a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d006      	beq.n	800e340 <phhalHw_Pn5180_SetConfig+0xf08>
 800e332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e336:	d003      	beq.n	800e340 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e338:	f240 2321 	movw	r3, #545	@ 0x221
 800e33c:	f000 bcbf 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e340:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800e342:	883b      	ldrh	r3, [r7, #0]
 800e344:	b2db      	uxtb	r3, r3
 800e346:	2b01      	cmp	r3, #1
 800e348:	dc02      	bgt.n	800e350 <phhalHw_Pn5180_SetConfig+0xf18>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	da03      	bge.n	800e356 <phhalHw_Pn5180_SetConfig+0xf1e>
 800e34e:	e00f      	b.n	800e370 <phhalHw_Pn5180_SetConfig+0xf38>
 800e350:	2b02      	cmp	r3, #2
 800e352:	d009      	beq.n	800e368 <phhalHw_Pn5180_SetConfig+0xf30>
 800e354:	e00c      	b.n	800e370 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	883a      	ldrh	r2, [r7, #0]
 800e360:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 800e362:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 800e364:	f000 bcaa 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e368:	f240 2323 	movw	r3, #547	@ 0x223
 800e36c:	f000 bca7 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e370:	f240 2321 	movw	r3, #545	@ 0x221
 800e374:	f000 bca3 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 800e378:	883b      	ldrh	r3, [r7, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d103      	bne.n	800e386 <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e37e:	f240 2321 	movw	r3, #545	@ 0x221
 800e382:	f000 bc9c 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	883a      	ldrh	r2, [r7, #0]
 800e38a:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 800e38c:	f000 bc96 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	883a      	ldrh	r2, [r7, #0]
 800e394:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 800e396:	f000 bc91 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 800e39a:	883b      	ldrh	r3, [r7, #0]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d106      	bne.n	800e3ae <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800e3a0:	883b      	ldrh	r3, [r7, #0]
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 800e3aa:	f000 bc87 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 800e3ae:	883b      	ldrh	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d106      	bne.n	800e3c2 <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800e3b4:	883b      	ldrh	r3, [r7, #0]
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 800e3be:	f000 bc7d 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e3c2:	f240 2321 	movw	r3, #545	@ 0x221
 800e3c6:	f000 bc7a 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 800e3ca:	883b      	ldrh	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d105      	bne.n	800e3dc <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 800e3d8:	f000 bc70 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800e3e4:	f000 bc6a 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 800e3e8:	883b      	ldrh	r3, [r7, #0]
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 800e3f2:	f000 bc63 	b.w	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 800e3f6:	883b      	ldrh	r3, [r7, #0]
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 800e400:	883b      	ldrh	r3, [r7, #0]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d122      	bne.n	800e44c <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	d00e      	beq.n	800e42e <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 800e410:	f240 1207 	movw	r2, #263	@ 0x107
 800e414:	2128      	movs	r1, #40	@ 0x28
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7fe fa54 	bl	800c8c4 <phhalHw_Pn5180_WriteRegister>
 800e41c:	4603      	mov	r3, r0
 800e41e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e420:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e422:	2b00      	cmp	r3, #0
 800e424:	f000 842b 	beq.w	800ec7e <phhalHw_Pn5180_SetConfig+0x1846>
 800e428:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e42a:	f000 bc48 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 800e42e:	f240 1203 	movw	r2, #259	@ 0x103
 800e432:	2128      	movs	r1, #40	@ 0x28
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7fe fa45 	bl	800c8c4 <phhalHw_Pn5180_WriteRegister>
 800e43a:	4603      	mov	r3, r0
 800e43c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e43e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 841c 	beq.w	800ec7e <phhalHw_Pn5180_SetConfig+0x1846>
 800e446:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e448:	f000 bc39 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 800e44c:	f06f 0201 	mvn.w	r2, #1
 800e450:	2128      	movs	r1, #40	@ 0x28
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f001 fee6 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e458:	4603      	mov	r3, r0
 800e45a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e45c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 840d 	beq.w	800ec7e <phhalHw_Pn5180_SetConfig+0x1846>
 800e464:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e466:	f000 bc2a 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 800e46a:	883b      	ldrh	r3, [r7, #0]
 800e46c:	4619      	mov	r1, r3
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fec6 	bl	800f200 <phhalHw_Pn5180_SetMinFDT>
 800e474:	4603      	mov	r3, r0
 800e476:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e478:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f000 8401 	beq.w	800ec82 <phhalHw_Pn5180_SetConfig+0x184a>
 800e480:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e482:	f000 bc1c 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 800e486:	883b      	ldrh	r3, [r7, #0]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d111      	bne.n	800e4b0 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 800e494:	2202      	movs	r2, #2
 800e496:	2104      	movs	r1, #4
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 fe4d 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e4a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 83ee 	beq.w	800ec86 <phhalHw_Pn5180_SetConfig+0x184e>
 800e4aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4ac:	f000 bc07 	b.w	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 800e4b8:	f06f 0202 	mvn.w	r2, #2
 800e4bc:	2104      	movs	r1, #4
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f001 feb0 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e4c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 83db 	beq.w	800ec86 <phhalHw_Pn5180_SetConfig+0x184e>
 800e4d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4d2:	e3f4      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e4d4:	883b      	ldrh	r3, [r7, #0]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d005      	beq.n	800e4e6 <phhalHw_Pn5180_SetConfig+0x10ae>
 800e4da:	883b      	ldrh	r3, [r7, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4e0:	f240 2321 	movw	r3, #545	@ 0x221
 800e4e4:	e3eb      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 800e4e6:	883b      	ldrh	r3, [r7, #0]
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	70da      	strb	r2, [r3, #3]
        break;
 800e4ee:	e3e5      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e4f0:	883b      	ldrh	r3, [r7, #0]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d00c      	beq.n	800e510 <phhalHw_Pn5180_SetConfig+0x10d8>
 800e4f6:	883b      	ldrh	r3, [r7, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d009      	beq.n	800e510 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4fc:	f240 2321 	movw	r3, #545	@ 0x221
 800e500:	e3dd      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
 800e502:	bf00      	nop
 800e504:	f3af 8000 	nop.w
 800e508:	51eb851f 	.word	0x51eb851f
 800e50c:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 800e510:	883b      	ldrh	r3, [r7, #0]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d10c      	bne.n	800e530 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800e516:	2280      	movs	r2, #128	@ 0x80
 800e518:	2101      	movs	r1, #1
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f001 fd96 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800e520:	4603      	mov	r3, r0
 800e522:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e524:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 83af 	beq.w	800ec8a <phhalHw_Pn5180_SetConfig+0x1852>
 800e52c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e52e:	e3c6      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800e530:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e534:	2101      	movs	r1, #1
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f001 fe74 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e53c:	4603      	mov	r3, r0
 800e53e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e540:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 83a1 	beq.w	800ec8a <phhalHw_Pn5180_SetConfig+0x1852>
 800e548:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e54a:	e3b8      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e54c:	883b      	ldrh	r3, [r7, #0]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d005      	beq.n	800e55e <phhalHw_Pn5180_SetConfig+0x1126>
 800e552:	883b      	ldrh	r3, [r7, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e558:	f240 2321 	movw	r3, #545	@ 0x221
 800e55c:	e3af      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 800e55e:	883b      	ldrh	r3, [r7, #0]
 800e560:	b2da      	uxtb	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 800e568:	e3a8      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 800e56a:	883b      	ldrh	r3, [r7, #0]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d005      	beq.n	800e57c <phhalHw_Pn5180_SetConfig+0x1144>
 800e570:	883b      	ldrh	r3, [r7, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e576:	f240 2321 	movw	r3, #545	@ 0x221
 800e57a:	e3a0      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 800e57c:	883b      	ldrh	r3, [r7, #0]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d10d      	bne.n	800e59e <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 800e582:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e586:	2118      	movs	r1, #24
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fe4b 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e58e:	4603      	mov	r3, r0
 800e590:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e592:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 837a 	beq.w	800ec8e <phhalHw_Pn5180_SetConfig+0x1856>
 800e59a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e59c:	e38f      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 800e59e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e5a2:	2118      	movs	r1, #24
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f001 fdc7 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e5ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f000 836c 	beq.w	800ec8e <phhalHw_Pn5180_SetConfig+0x1856>
 800e5b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e5b8:	e381      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5c0:	2b05      	cmp	r3, #5
 800e5c2:	d00c      	beq.n	800e5de <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800e5ca:	2b04      	cmp	r3, #4
 800e5cc:	d007      	beq.n	800e5de <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e5d4:	2b06      	cmp	r3, #6
 800e5d6:	d002      	beq.n	800e5de <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e5d8:	f240 2325 	movw	r3, #549	@ 0x225
 800e5dc:	e36f      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800e5de:	883b      	ldrh	r3, [r7, #0]
 800e5e0:	2b07      	cmp	r3, #7
 800e5e2:	d82b      	bhi.n	800e63c <phhalHw_Pn5180_SetConfig+0x1204>
 800e5e4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5ec <phhalHw_Pn5180_SetConfig+0x11b4>)
 800e5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ea:	bf00      	nop
 800e5ec:	0800e643 	.word	0x0800e643
 800e5f0:	0800e60d 	.word	0x0800e60d
 800e5f4:	0800e60d 	.word	0x0800e60d
 800e5f8:	0800e63d 	.word	0x0800e63d
 800e5fc:	0800e60d 	.word	0x0800e60d
 800e600:	0800e61d 	.word	0x0800e61d
 800e604:	0800e62d 	.word	0x0800e62d
 800e608:	0800e62d 	.word	0x0800e62d
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e612:	2b05      	cmp	r3, #5
 800e614:	d017      	beq.n	800e646 <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e616:	f240 2321 	movw	r3, #545	@ 0x221
 800e61a:	e350      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e622:	2b04      	cmp	r3, #4
 800e624:	d011      	beq.n	800e64a <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e626:	f240 2321 	movw	r3, #545	@ 0x221
 800e62a:	e348      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e632:	2b06      	cmp	r3, #6
 800e634:	d00b      	beq.n	800e64e <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e636:	f240 2321 	movw	r3, #545	@ 0x221
 800e63a:	e340      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e63c:	f240 2323 	movw	r3, #547	@ 0x223
 800e640:	e33d      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e642:	bf00      	nop
 800e644:	e004      	b.n	800e650 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e646:	bf00      	nop
 800e648:	e002      	b.n	800e650 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e64a:	bf00      	nop
 800e64c:	e000      	b.n	800e650 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e64e:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 800e650:	2300      	movs	r3, #0
 800e652:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 800e654:	883b      	ldrh	r3, [r7, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d103      	bne.n	800e662 <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 800e65a:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 800e65e:	60bb      	str	r3, [r7, #8]
 800e660:	e002      	b.n	800e668 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 800e662:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800e666:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e668:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e66e:	3338      	adds	r3, #56	@ 0x38
 800e670:	443b      	add	r3, r7
 800e672:	2218      	movs	r2, #24
 800e674:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e67e:	3338      	adds	r3, #56	@ 0x38
 800e680:	443b      	add	r3, r7
 800e682:	2203      	movs	r2, #3
 800e684:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e68c:	1c59      	adds	r1, r3, #1
 800e68e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e690:	b2d2      	uxtb	r2, r2
 800e692:	3338      	adds	r3, #56	@ 0x38
 800e694:	443b      	add	r3, r7
 800e696:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	0a1a      	lsrs	r2, r3, #8
 800e69e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6a0:	1c59      	adds	r1, r3, #1
 800e6a2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6a4:	b2d2      	uxtb	r2, r2
 800e6a6:	3338      	adds	r3, #56	@ 0x38
 800e6a8:	443b      	add	r3, r7
 800e6aa:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	0c1a      	lsrs	r2, r3, #16
 800e6b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6b4:	1c59      	adds	r1, r3, #1
 800e6b6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6b8:	b2d2      	uxtb	r2, r2
 800e6ba:	3338      	adds	r3, #56	@ 0x38
 800e6bc:	443b      	add	r3, r7
 800e6be:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	0e1a      	lsrs	r2, r3, #24
 800e6c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6c8:	1c59      	adds	r1, r3, #1
 800e6ca:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	3338      	adds	r3, #56	@ 0x38
 800e6d0:	443b      	add	r3, r7
 800e6d2:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 800e6da:	883b      	ldrh	r3, [r7, #0]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	2b06      	cmp	r3, #6
 800e6e0:	d822      	bhi.n	800e728 <phhalHw_Pn5180_SetConfig+0x12f0>
 800e6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e8 <phhalHw_Pn5180_SetConfig+0x12b0>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e705 	.word	0x0800e705
 800e6ec:	0800e70b 	.word	0x0800e70b
 800e6f0:	0800e729 	.word	0x0800e729
 800e6f4:	0800e711 	.word	0x0800e711
 800e6f8:	0800e717 	.word	0x0800e717
 800e6fc:	0800e71d 	.word	0x0800e71d
 800e700:	0800e723 	.word	0x0800e723
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 800e704:	2303      	movs	r3, #3
 800e706:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e708:	e00f      	b.n	800e72a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 800e70a:	2301      	movs	r3, #1
 800e70c:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e70e:	e00c      	b.n	800e72a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 800e710:	2302      	movs	r3, #2
 800e712:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e714:	e009      	b.n	800e72a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 800e716:	2303      	movs	r3, #3
 800e718:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e71a:	e006      	b.n	800e72a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 800e71c:	2301      	movs	r3, #1
 800e71e:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e720:	e003      	b.n	800e72a <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 800e722:	2302      	movs	r3, #2
 800e724:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e726:	e000      	b.n	800e72a <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 800e728:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 800e72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e72c:	019b      	lsls	r3, r3, #6
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 800e732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e734:	029b      	lsls	r3, r3, #10
 800e736:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e740:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e746:	3338      	adds	r3, #56	@ 0x38
 800e748:	443b      	add	r3, r7
 800e74a:	2218      	movs	r2, #24
 800e74c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e752:	1c5a      	adds	r2, r3, #1
 800e754:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e756:	3338      	adds	r3, #56	@ 0x38
 800e758:	443b      	add	r3, r7
 800e75a:	2202      	movs	r2, #2
 800e75c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e764:	1c59      	adds	r1, r3, #1
 800e766:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e768:	b2d2      	uxtb	r2, r2
 800e76a:	3338      	adds	r3, #56	@ 0x38
 800e76c:	443b      	add	r3, r7
 800e76e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	0a1a      	lsrs	r2, r3, #8
 800e776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e778:	1c59      	adds	r1, r3, #1
 800e77a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e77c:	b2d2      	uxtb	r2, r2
 800e77e:	3338      	adds	r3, #56	@ 0x38
 800e780:	443b      	add	r3, r7
 800e782:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	0c1a      	lsrs	r2, r3, #16
 800e78a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e78c:	1c59      	adds	r1, r3, #1
 800e78e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e790:	b2d2      	uxtb	r2, r2
 800e792:	3338      	adds	r3, #56	@ 0x38
 800e794:	443b      	add	r3, r7
 800e796:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	0e1a      	lsrs	r2, r3, #24
 800e79e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7a0:	1c59      	adds	r1, r3, #1
 800e7a2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e7a4:	b2d2      	uxtb	r2, r2
 800e7a6:	3338      	adds	r3, #56	@ 0x38
 800e7a8:	443b      	add	r3, r7
 800e7aa:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e7ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7b0:	f107 030c 	add.w	r3, r7, #12
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f001 fdaa 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e7c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f000 8265 	beq.w	800ec92 <phhalHw_Pn5180_SetConfig+0x185a>
 800e7c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7ca:	e278      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7d2:	2b05      	cmp	r3, #5
 800e7d4:	d002      	beq.n	800e7dc <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e7d6:	f240 2325 	movw	r3, #549	@ 0x225
 800e7da:	e270      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800e7dc:	883b      	ldrh	r3, [r7, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d004      	beq.n	800e7ec <phhalHw_Pn5180_SetConfig+0x13b4>
 800e7e2:	2b03      	cmp	r3, #3
 800e7e4:	d002      	beq.n	800e7ec <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e7e6:	f240 2321 	movw	r3, #545	@ 0x221
 800e7ea:	e268      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e7ec:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 800e7ee:	883b      	ldrh	r3, [r7, #0]
 800e7f0:	2b03      	cmp	r3, #3
 800e7f2:	f040 8083 	bne.w	800e8fc <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 800e7fa:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 800e7fe:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e806:	3338      	adds	r3, #56	@ 0x38
 800e808:	443b      	add	r3, r7
 800e80a:	2218      	movs	r2, #24
 800e80c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e810:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e816:	3338      	adds	r3, #56	@ 0x38
 800e818:	443b      	add	r3, r7
 800e81a:	2203      	movs	r2, #3
 800e81c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e824:	1c59      	adds	r1, r3, #1
 800e826:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e828:	b2d2      	uxtb	r2, r2
 800e82a:	3338      	adds	r3, #56	@ 0x38
 800e82c:	443b      	add	r3, r7
 800e82e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	0a1a      	lsrs	r2, r3, #8
 800e836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e838:	1c59      	adds	r1, r3, #1
 800e83a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e83c:	b2d2      	uxtb	r2, r2
 800e83e:	3338      	adds	r3, #56	@ 0x38
 800e840:	443b      	add	r3, r7
 800e842:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	0c1a      	lsrs	r2, r3, #16
 800e84a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e84c:	1c59      	adds	r1, r3, #1
 800e84e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e850:	b2d2      	uxtb	r2, r2
 800e852:	3338      	adds	r3, #56	@ 0x38
 800e854:	443b      	add	r3, r7
 800e856:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	0e1a      	lsrs	r2, r3, #24
 800e85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e860:	1c59      	adds	r1, r3, #1
 800e862:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e864:	b2d2      	uxtb	r2, r2
 800e866:	3338      	adds	r3, #56	@ 0x38
 800e868:	443b      	add	r3, r7
 800e86a:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 800e86e:	2300      	movs	r3, #0
 800e870:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e874:	1c5a      	adds	r2, r3, #1
 800e876:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e878:	3338      	adds	r3, #56	@ 0x38
 800e87a:	443b      	add	r3, r7
 800e87c:	2218      	movs	r2, #24
 800e87e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e888:	3338      	adds	r3, #56	@ 0x38
 800e88a:	443b      	add	r3, r7
 800e88c:	2202      	movs	r2, #2
 800e88e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e896:	1c59      	adds	r1, r3, #1
 800e898:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e89a:	b2d2      	uxtb	r2, r2
 800e89c:	3338      	adds	r3, #56	@ 0x38
 800e89e:	443b      	add	r3, r7
 800e8a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	0a1a      	lsrs	r2, r3, #8
 800e8a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8aa:	1c59      	adds	r1, r3, #1
 800e8ac:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8ae:	b2d2      	uxtb	r2, r2
 800e8b0:	3338      	adds	r3, #56	@ 0x38
 800e8b2:	443b      	add	r3, r7
 800e8b4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	0c1a      	lsrs	r2, r3, #16
 800e8bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8be:	1c59      	adds	r1, r3, #1
 800e8c0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8c2:	b2d2      	uxtb	r2, r2
 800e8c4:	3338      	adds	r3, #56	@ 0x38
 800e8c6:	443b      	add	r3, r7
 800e8c8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	0e1a      	lsrs	r2, r3, #24
 800e8d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8d2:	1c59      	adds	r1, r3, #1
 800e8d4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8d6:	b2d2      	uxtb	r2, r2
 800e8d8:	3338      	adds	r3, #56	@ 0x38
 800e8da:	443b      	add	r3, r7
 800e8dc:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e8e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e8e2:	f107 030c 	add.w	r3, r7, #12
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f001 fd11 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e8f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d003      	beq.n	800e900 <phhalHw_Pn5180_SetConfig+0x14c8>
 800e8f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e8fa:	e1e0      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 800e8fc:	bf00      	nop
 800e8fe:	e1dd      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 800e900:	bf00      	nop
        }

        break;
 800e902:	e1db      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 800e904:	883a      	ldrh	r2, [r7, #0]
 800e906:	f240 1303 	movw	r3, #259	@ 0x103
 800e90a:	4013      	ands	r3, r2
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d102      	bne.n	800e916 <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e910:	f240 2321 	movw	r3, #545	@ 0x221
 800e914:	e1d3      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 800e91a:	2300      	movs	r3, #0
 800e91c:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 800e91e:	883b      	ldrh	r3, [r7, #0]
 800e920:	f003 0301 	and.w	r3, r3, #1
 800e924:	2b00      	cmp	r3, #0
 800e926:	d015      	beq.n	800e954 <phhalHw_Pn5180_SetConfig+0x151c>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e92e:	2b06      	cmp	r3, #6
 800e930:	d110      	bne.n	800e954 <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800e932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e934:	f043 0304 	orr.w	r3, r3, #4
 800e938:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e93c:	f043 0302 	orr.w	r3, r3, #2
 800e940:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800e942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e944:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800e948:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800e94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800e950:	633b      	str	r3, [r7, #48]	@ 0x30
 800e952:	e008      	b.n	800e966 <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 800e954:	883b      	ldrh	r3, [r7, #0]
 800e956:	f003 0302 	and.w	r3, r3, #2
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800e95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e960:	f043 0304 	orr.w	r3, r3, #4
 800e964:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 800e966:	883b      	ldrh	r3, [r7, #0]
 800e968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d004      	beq.n	800e97a <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e972:	f043 0302 	orr.w	r3, r3, #2
 800e976:	633b      	str	r3, [r7, #48]	@ 0x30
 800e978:	e003      	b.n	800e982 <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e97c:	f043 0302 	orr.w	r3, r3, #2
 800e980:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e988:	2b06      	cmp	r3, #6
 800e98a:	d10c      	bne.n	800e9a6 <phhalHw_Pn5180_SetConfig+0x156e>
 800e98c:	883b      	ldrh	r3, [r7, #0]
 800e98e:	f003 0302 	and.w	r3, r3, #2
 800e992:	2b00      	cmp	r3, #0
 800e994:	d007      	beq.n	800e9a6 <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800e996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e998:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800e99c:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800e99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a0:	f043 0318 	orr.w	r3, r3, #24
 800e9a4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 800e9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ac:	43db      	mvns	r3, r3
 800e9ae:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800e9b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e9b6:	3338      	adds	r3, #56	@ 0x38
 800e9b8:	443b      	add	r3, r7
 800e9ba:	2219      	movs	r2, #25
 800e9bc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e9c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9c2:	1c5a      	adds	r2, r3, #1
 800e9c4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e9c6:	3338      	adds	r3, #56	@ 0x38
 800e9c8:	443b      	add	r3, r7
 800e9ca:	2203      	movs	r2, #3
 800e9cc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d4:	1c59      	adds	r1, r3, #1
 800e9d6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e9d8:	b2d2      	uxtb	r2, r2
 800e9da:	3338      	adds	r3, #56	@ 0x38
 800e9dc:	443b      	add	r3, r7
 800e9de:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	0a1a      	lsrs	r2, r3, #8
 800e9e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9e8:	1c59      	adds	r1, r3, #1
 800e9ea:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e9ec:	b2d2      	uxtb	r2, r2
 800e9ee:	3338      	adds	r3, #56	@ 0x38
 800e9f0:	443b      	add	r3, r7
 800e9f2:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	0c1a      	lsrs	r2, r3, #16
 800e9fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9fc:	1c59      	adds	r1, r3, #1
 800e9fe:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ea00:	b2d2      	uxtb	r2, r2
 800ea02:	3338      	adds	r3, #56	@ 0x38
 800ea04:	443b      	add	r3, r7
 800ea06:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	0e1a      	lsrs	r2, r3, #24
 800ea0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea10:	1c59      	adds	r1, r3, #1
 800ea12:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ea14:	b2d2      	uxtb	r2, r2
 800ea16:	3338      	adds	r3, #56	@ 0x38
 800ea18:	443b      	add	r3, r7
 800ea1a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea20:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800ea22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea24:	1c5a      	adds	r2, r3, #1
 800ea26:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ea28:	3338      	adds	r3, #56	@ 0x38
 800ea2a:	443b      	add	r3, r7
 800ea2c:	2219      	movs	r2, #25
 800ea2e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800ea32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea34:	1c5a      	adds	r2, r3, #1
 800ea36:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ea38:	3338      	adds	r3, #56	@ 0x38
 800ea3a:	443b      	add	r3, r7
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea46:	1c59      	adds	r1, r3, #1
 800ea48:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ea4a:	b2d2      	uxtb	r2, r2
 800ea4c:	3338      	adds	r3, #56	@ 0x38
 800ea4e:	443b      	add	r3, r7
 800ea50:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	0a1a      	lsrs	r2, r3, #8
 800ea58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea5a:	1c59      	adds	r1, r3, #1
 800ea5c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ea5e:	b2d2      	uxtb	r2, r2
 800ea60:	3338      	adds	r3, #56	@ 0x38
 800ea62:	443b      	add	r3, r7
 800ea64:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	0c1a      	lsrs	r2, r3, #16
 800ea6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea6e:	1c59      	adds	r1, r3, #1
 800ea70:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ea72:	b2d2      	uxtb	r2, r2
 800ea74:	3338      	adds	r3, #56	@ 0x38
 800ea76:	443b      	add	r3, r7
 800ea78:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	0e1a      	lsrs	r2, r3, #24
 800ea80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea82:	1c59      	adds	r1, r3, #1
 800ea84:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	3338      	adds	r3, #56	@ 0x38
 800ea8a:	443b      	add	r3, r7
 800ea8c:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800ea90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea92:	f107 030c 	add.w	r3, r7, #12
 800ea96:	4619      	mov	r1, r3
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f001 fc39 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eaa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f000 80f6 	beq.w	800ec96 <phhalHw_Pn5180_SetConfig+0x185e>
 800eaaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaac:	e107      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800eaae:	883b      	ldrh	r3, [r7, #0]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d005      	beq.n	800eac0 <phhalHw_Pn5180_SetConfig+0x1688>
 800eab4:	883b      	ldrh	r3, [r7, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800eaba:	f240 2321 	movw	r3, #545	@ 0x221
 800eabe:	e0fe      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 800eac0:	883b      	ldrh	r3, [r7, #0]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d111      	bne.n	800eaea <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800eac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eaca:	2100      	movs	r1, #0
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f001 fb33 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800ead2:	4603      	mov	r3, r0
 800ead4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ead6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <phhalHw_Pn5180_SetConfig+0x16a8>
 800eadc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eade:	e0ee      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 800eae8:	e0e8      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800eaea:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800eaee:	2100      	movs	r1, #0
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f001 fb97 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eafa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <phhalHw_Pn5180_SetConfig+0x16cc>
 800eb00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb02:	e0dc      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 800eb0c:	e0d6      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 800eb0e:	883b      	ldrh	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 800eb14:	2300      	movs	r3, #0
 800eb16:	e0d2      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 800eb20:	2300      	movs	r3, #0
 800eb22:	2202      	movs	r2, #2
 800eb24:	2100      	movs	r1, #0
 800eb26:	4868      	ldr	r0, [pc, #416]	@ (800ecc8 <phhalHw_Pn5180_SetConfig+0x1890>)
 800eb28:	f008 fccc 	bl	80174c4 <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 800eb2c:	883b      	ldrh	r3, [r7, #0]
 800eb2e:	4a67      	ldr	r2, [pc, #412]	@ (800eccc <phhalHw_Pn5180_SetConfig+0x1894>)
 800eb30:	4619      	mov	r1, r3
 800eb32:	4867      	ldr	r0, [pc, #412]	@ (800ecd0 <phhalHw_Pn5180_SetConfig+0x1898>)
 800eb34:	f008 fab2 	bl	801709c <phDriver_TimerStart>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eb3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 80ab 	beq.w	800ec9a <phhalHw_Pn5180_SetConfig+0x1862>
 800eb44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb46:	e0ba      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 800eb48:	883b      	ldrh	r3, [r7, #0]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d107      	bne.n	800eb5e <phhalHw_Pn5180_SetConfig+0x1726>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	d002      	beq.n	800eb5e <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800eb58:	f240 2325 	movw	r3, #549	@ 0x225
 800eb5c:	e0af      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eb5e:	883b      	ldrh	r3, [r7, #0]
 800eb60:	2201      	movs	r2, #1
 800eb62:	4619      	mov	r1, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f002 fe3d 	bl	80117e4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eb6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f000 8094 	beq.w	800ec9e <phhalHw_Pn5180_SetConfig+0x1866>
 800eb76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb78:	e0a1      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eb7a:	883b      	ldrh	r3, [r7, #0]
 800eb7c:	2202      	movs	r2, #2
 800eb7e:	4619      	mov	r1, r3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f002 fe2f 	bl	80117e4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800eb86:	4603      	mov	r3, r0
 800eb88:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eb8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 8088 	beq.w	800eca2 <phhalHw_Pn5180_SetConfig+0x186a>
 800eb92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb94:	e093      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eb96:	883b      	ldrh	r3, [r7, #0]
 800eb98:	2204      	movs	r2, #4
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f002 fe21 	bl	80117e4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800eba2:	4603      	mov	r3, r0
 800eba4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eba6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d07c      	beq.n	800eca6 <phhalHw_Pn5180_SetConfig+0x186e>
 800ebac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebae:	e086      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ebb0:	883b      	ldrh	r3, [r7, #0]
 800ebb2:	2208      	movs	r2, #8
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f002 fe14 	bl	80117e4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ebc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d071      	beq.n	800ecaa <phhalHw_Pn5180_SetConfig+0x1872>
 800ebc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebc8:	e079      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ebca:	883b      	ldrh	r3, [r7, #0]
 800ebcc:	2210      	movs	r2, #16
 800ebce:	4619      	mov	r1, r3
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f002 fe07 	bl	80117e4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ebda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d066      	beq.n	800ecae <phhalHw_Pn5180_SetConfig+0x1876>
 800ebe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebe2:	e06c      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ebe4:	8839      	ldrh	r1, [r7, #0]
 800ebe6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800ebea:	2208      	movs	r2, #8
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f002 fe45 	bl	801187c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ebf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d05a      	beq.n	800ecb2 <phhalHw_Pn5180_SetConfig+0x187a>
 800ebfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebfe:	e05e      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ec00:	8839      	ldrh	r1, [r7, #0]
 800ec02:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800ec06:	2210      	movs	r2, #16
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f002 fe37 	bl	801187c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ec12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d04e      	beq.n	800ecb6 <phhalHw_Pn5180_SetConfig+0x187e>
 800ec18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec1a:	e050      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ec1c:	8839      	ldrh	r1, [r7, #0]
 800ec1e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800ec22:	2218      	movs	r2, #24
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f002 fe29 	bl	801187c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ec2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d042      	beq.n	800ecba <phhalHw_Pn5180_SetConfig+0x1882>
 800ec34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec36:	e042      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800ec38:	f240 2323 	movw	r3, #547	@ 0x223
 800ec3c:	e03f      	b.n	800ecbe <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 800ec3e:	bf00      	nop
 800ec40:	e03c      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec42:	bf00      	nop
 800ec44:	e03a      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec46:	bf00      	nop
 800ec48:	e038      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec4a:	bf00      	nop
 800ec4c:	e036      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec4e:	bf00      	nop
 800ec50:	e034      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec52:	bf00      	nop
 800ec54:	e032      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec56:	bf00      	nop
 800ec58:	e030      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec5a:	bf00      	nop
 800ec5c:	e02e      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec5e:	bf00      	nop
 800ec60:	e02c      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec62:	bf00      	nop
 800ec64:	e02a      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec66:	bf00      	nop
 800ec68:	e028      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec6a:	bf00      	nop
 800ec6c:	e026      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec6e:	bf00      	nop
 800ec70:	e024      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec72:	bf00      	nop
 800ec74:	e022      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec76:	bf00      	nop
 800ec78:	e020      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec7a:	bf00      	nop
 800ec7c:	e01e      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec7e:	bf00      	nop
 800ec80:	e01c      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec82:	bf00      	nop
 800ec84:	e01a      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec86:	bf00      	nop
 800ec88:	e018      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec8a:	bf00      	nop
 800ec8c:	e016      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec8e:	bf00      	nop
 800ec90:	e014      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec92:	bf00      	nop
 800ec94:	e012      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec96:	bf00      	nop
 800ec98:	e010      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec9a:	bf00      	nop
 800ec9c:	e00e      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ec9e:	bf00      	nop
 800eca0:	e00c      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eca2:	bf00      	nop
 800eca4:	e00a      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eca6:	bf00      	nop
 800eca8:	e008      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ecaa:	bf00      	nop
 800ecac:	e006      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ecae:	bf00      	nop
 800ecb0:	e004      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ecb2:	bf00      	nop
 800ecb4:	e002      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ecb6:	bf00      	nop
 800ecb8:	e000      	b.n	800ecbc <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ecba:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800ecbc:	2300      	movs	r3, #0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3738      	adds	r7, #56	@ 0x38
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bdb0      	pop	{r4, r5, r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	2000178c 	.word	0x2000178c
 800eccc:	0800c495 	.word	0x0800c495
 800ecd0:	000f4240 	.word	0x000f4240

0800ecd4 <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08a      	sub	sp, #40	@ 0x28
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800ece2:	2300      	movs	r3, #0
 800ece4:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d101      	bne.n	800ecf4 <phhalHw_Pn5180_GetConfig+0x20>
 800ecf0:	2321      	movs	r3, #33	@ 0x21
 800ecf2:	e281      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 800ecf4:	897b      	ldrh	r3, [r7, #10]
 800ecf6:	f248 0250 	movw	r2, #32848	@ 0x8050
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	f000 817f 	beq.w	800effe <phhalHw_Pn5180_GetConfig+0x32a>
 800ed00:	f248 0250 	movw	r2, #32848	@ 0x8050
 800ed04:	4293      	cmp	r3, r2
 800ed06:	f300 8273 	bgt.w	800f1f0 <phhalHw_Pn5180_GetConfig+0x51c>
 800ed0a:	f248 0212 	movw	r2, #32786	@ 0x8012
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	f000 814c 	beq.w	800efac <phhalHw_Pn5180_GetConfig+0x2d8>
 800ed14:	f248 0212 	movw	r2, #32786	@ 0x8012
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	f300 8269 	bgt.w	800f1f0 <phhalHw_Pn5180_GetConfig+0x51c>
 800ed1e:	f248 0211 	movw	r2, #32785	@ 0x8011
 800ed22:	4293      	cmp	r3, r2
 800ed24:	f000 8131 	beq.w	800ef8a <phhalHw_Pn5180_GetConfig+0x2b6>
 800ed28:	f248 0211 	movw	r2, #32785	@ 0x8011
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	f300 825f 	bgt.w	800f1f0 <phhalHw_Pn5180_GetConfig+0x51c>
 800ed32:	2b5f      	cmp	r3, #95	@ 0x5f
 800ed34:	f300 80ca 	bgt.w	800eecc <phhalHw_Pn5180_GetConfig+0x1f8>
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f2c0 8259 	blt.w	800f1f0 <phhalHw_Pn5180_GetConfig+0x51c>
 800ed3e:	2b5f      	cmp	r3, #95	@ 0x5f
 800ed40:	f200 8256 	bhi.w	800f1f0 <phhalHw_Pn5180_GetConfig+0x51c>
 800ed44:	a201      	add	r2, pc, #4	@ (adr r2, 800ed4c <phhalHw_Pn5180_GetConfig+0x78>)
 800ed46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4a:	bf00      	nop
 800ed4c:	0800eef3 	.word	0x0800eef3
 800ed50:	0800eef3 	.word	0x0800eef3
 800ed54:	0800eef3 	.word	0x0800eef3
 800ed58:	0800eef3 	.word	0x0800eef3
 800ed5c:	0800ef03 	.word	0x0800ef03
 800ed60:	0800f1f1 	.word	0x0800f1f1
 800ed64:	0800eef3 	.word	0x0800eef3
 800ed68:	0800eef3 	.word	0x0800eef3
 800ed6c:	0800eef3 	.word	0x0800eef3
 800ed70:	0800eef3 	.word	0x0800eef3
 800ed74:	0800eef3 	.word	0x0800eef3
 800ed78:	0800eef3 	.word	0x0800eef3
 800ed7c:	0800eef3 	.word	0x0800eef3
 800ed80:	0800ef0d 	.word	0x0800ef0d
 800ed84:	0800ef51 	.word	0x0800ef51
 800ed88:	0800eef3 	.word	0x0800eef3
 800ed8c:	0800f1f1 	.word	0x0800f1f1
 800ed90:	0800f1f1 	.word	0x0800f1f1
 800ed94:	0800f1f1 	.word	0x0800f1f1
 800ed98:	0800efdd 	.word	0x0800efdd
 800ed9c:	0800efe7 	.word	0x0800efe7
 800eda0:	0800f1f1 	.word	0x0800f1f1
 800eda4:	0800f1f1 	.word	0x0800f1f1
 800eda8:	0800f1f1 	.word	0x0800f1f1
 800edac:	0800f1f1 	.word	0x0800f1f1
 800edb0:	0800f1f1 	.word	0x0800f1f1
 800edb4:	0800f1f1 	.word	0x0800f1f1
 800edb8:	0800f1f1 	.word	0x0800f1f1
 800edbc:	0800f1f1 	.word	0x0800f1f1
 800edc0:	0800f1f1 	.word	0x0800f1f1
 800edc4:	0800f1f1 	.word	0x0800f1f1
 800edc8:	0800f1f1 	.word	0x0800f1f1
 800edcc:	0800eff1 	.word	0x0800eff1
 800edd0:	0800f1a5 	.word	0x0800f1a5
 800edd4:	0800f1f1 	.word	0x0800f1f1
 800edd8:	0800f1f1 	.word	0x0800f1f1
 800eddc:	0800f1f1 	.word	0x0800f1f1
 800ede0:	0800f1f1 	.word	0x0800f1f1
 800ede4:	0800f1f1 	.word	0x0800f1f1
 800ede8:	0800f1f1 	.word	0x0800f1f1
 800edec:	0800f1f1 	.word	0x0800f1f1
 800edf0:	0800f1f1 	.word	0x0800f1f1
 800edf4:	0800f1f1 	.word	0x0800f1f1
 800edf8:	0800f1f1 	.word	0x0800f1f1
 800edfc:	0800f1f1 	.word	0x0800f1f1
 800ee00:	0800f1f1 	.word	0x0800f1f1
 800ee04:	0800f00d 	.word	0x0800f00d
 800ee08:	0800ef03 	.word	0x0800ef03
 800ee0c:	0800f027 	.word	0x0800f027
 800ee10:	0800f031 	.word	0x0800f031
 800ee14:	0800f05f 	.word	0x0800f05f
 800ee18:	0800f08d 	.word	0x0800f08d
 800ee1c:	0800f0bb 	.word	0x0800f0bb
 800ee20:	0800f1f1 	.word	0x0800f1f1
 800ee24:	0800f1f1 	.word	0x0800f1f1
 800ee28:	0800f1f1 	.word	0x0800f1f1
 800ee2c:	0800f1f1 	.word	0x0800f1f1
 800ee30:	0800f1f1 	.word	0x0800f1f1
 800ee34:	0800f1f1 	.word	0x0800f1f1
 800ee38:	0800f1f1 	.word	0x0800f1f1
 800ee3c:	0800f1f1 	.word	0x0800f1f1
 800ee40:	0800f1f1 	.word	0x0800f1f1
 800ee44:	0800f1f1 	.word	0x0800f1f1
 800ee48:	0800f1f1 	.word	0x0800f1f1
 800ee4c:	0800f1f1 	.word	0x0800f1f1
 800ee50:	0800f1f1 	.word	0x0800f1f1
 800ee54:	0800f1f1 	.word	0x0800f1f1
 800ee58:	0800f1f1 	.word	0x0800f1f1
 800ee5c:	0800f1f1 	.word	0x0800f1f1
 800ee60:	0800f1f1 	.word	0x0800f1f1
 800ee64:	0800f1f1 	.word	0x0800f1f1
 800ee68:	0800f1f1 	.word	0x0800f1f1
 800ee6c:	0800f1f1 	.word	0x0800f1f1
 800ee70:	0800f1f1 	.word	0x0800f1f1
 800ee74:	0800f1f1 	.word	0x0800f1f1
 800ee78:	0800f1f1 	.word	0x0800f1f1
 800ee7c:	0800f1f1 	.word	0x0800f1f1
 800ee80:	0800f1f1 	.word	0x0800f1f1
 800ee84:	0800f1f1 	.word	0x0800f1f1
 800ee88:	0800f1f1 	.word	0x0800f1f1
 800ee8c:	0800f1f1 	.word	0x0800f1f1
 800ee90:	0800f1f1 	.word	0x0800f1f1
 800ee94:	0800f139 	.word	0x0800f139
 800ee98:	0800f105 	.word	0x0800f105
 800ee9c:	0800f12b 	.word	0x0800f12b
 800eea0:	0800f16f 	.word	0x0800f16f
 800eea4:	0800f1f1 	.word	0x0800f1f1
 800eea8:	0800f1f1 	.word	0x0800f1f1
 800eeac:	0800f1f1 	.word	0x0800f1f1
 800eeb0:	0800f121 	.word	0x0800f121
 800eeb4:	0800eed7 	.word	0x0800eed7
 800eeb8:	0800f1f1 	.word	0x0800f1f1
 800eebc:	0800f113 	.word	0x0800f113
 800eec0:	0800f1f1 	.word	0x0800f1f1
 800eec4:	0800eee5 	.word	0x0800eee5
 800eec8:	0800f1b3 	.word	0x0800f1b3
 800eecc:	f248 0210 	movw	r2, #32784	@ 0x8010
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d055      	beq.n	800ef80 <phhalHw_Pn5180_GetConfig+0x2ac>
 800eed4:	e18c      	b.n	800f1f0 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eedc:	461a      	mov	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	801a      	strh	r2, [r3, #0]
        break;
 800eee2:	e188      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eeea:	461a      	mov	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	801a      	strh	r2, [r3, #0]
        break;
 800eef0:	e181      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 800eef2:	897a      	ldrh	r2, [r7, #10]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	322c      	adds	r2, #44	@ 0x2c
 800eef8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	801a      	strh	r2, [r3, #0]
        break;
 800ef00:	e179      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	801a      	strh	r2, [r3, #0]
        break;
 800ef0a:	e174      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d107      	bne.n	800ef26 <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800ef16:	897a      	ldrh	r2, [r7, #10]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	322c      	adds	r2, #44	@ 0x2c
 800ef1c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 800ef24:	e167      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ef2c:	2b41      	cmp	r3, #65	@ 0x41
 800ef2e:	d902      	bls.n	800ef36 <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ef30:	f240 2322 	movw	r3, #546	@ 0x222
 800ef34:	e160      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	0152      	lsls	r2, r2, #5
 800ef40:	1ad2      	subs	r2, r2, r3
 800ef42:	0092      	lsls	r2, r2, #2
 800ef44:	4413      	add	r3, r2
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	801a      	strh	r2, [r3, #0]
        break;
 800ef4e:	e152      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d107      	bne.n	800ef6a <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800ef5a:	897a      	ldrh	r2, [r7, #10]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	322c      	adds	r2, #44	@ 0x2c
 800ef60:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 800ef68:	e145      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ef70:	4a9b      	ldr	r2, [pc, #620]	@ (800f1e0 <phhalHw_Pn5180_GetConfig+0x50c>)
 800ef72:	fba2 2303 	umull	r2, r3, r2, r3
 800ef76:	099b      	lsrs	r3, r3, #6
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	801a      	strh	r2, [r3, #0]
        break;
 800ef7e:	e13a      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	801a      	strh	r2, [r3, #0]
        break;
 800ef88:	e135      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef92:	d302      	bcc.n	800ef9a <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ef94:	f240 2322 	movw	r3, #546	@ 0x222
 800ef98:	e12e      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2200      	movs	r2, #0
 800efa8:	621a      	str	r2, [r3, #32]
        break;
 800efaa:	e124      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6a1b      	ldr	r3, [r3, #32]
 800efb0:	4a8c      	ldr	r2, [pc, #560]	@ (800f1e4 <phhalHw_Pn5180_GetConfig+0x510>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d905      	bls.n	800efc2 <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2200      	movs	r2, #0
 800efba:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800efbc:	f240 2322 	movw	r3, #546	@ 0x222
 800efc0:	e11a      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	4a86      	ldr	r2, [pc, #536]	@ (800f1e0 <phhalHw_Pn5180_GetConfig+0x50c>)
 800efc8:	fba2 2303 	umull	r2, r3, r2, r3
 800efcc:	099b      	lsrs	r3, r3, #6
 800efce:	b29a      	uxth	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	621a      	str	r2, [r3, #32]
        break;
 800efda:	e10c      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	801a      	strh	r2, [r3, #0]
        break;
 800efe4:	e107      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	801a      	strh	r2, [r3, #0]
        break;
 800efee:	e102      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eff6:	461a      	mov	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	801a      	strh	r2, [r3, #0]
        break;
 800effc:	e0fb      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f004:	461a      	mov	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	801a      	strh	r2, [r3, #0]
        break;
 800f00a:	e0f4      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f012:	2b01      	cmp	r3, #1
 800f014:	d103      	bne.n	800f01e <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 800f01c:	e0eb      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2201      	movs	r2, #1
 800f022:	801a      	strh	r2, [r3, #0]
        break;
 800f024:	e0e7      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	8bda      	ldrh	r2, [r3, #30]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	801a      	strh	r2, [r3, #0]
        break;
 800f02e:	e0e2      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f030:	f107 0116 	add.w	r1, r7, #22
 800f034:	f107 0218 	add.w	r2, r7, #24
 800f038:	f107 0314 	add.w	r3, r7, #20
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	460b      	mov	r3, r1
 800f040:	2101      	movs	r1, #1
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f002 f80f 	bl	8011066 <phhalHw_Pn5180_GetRxBuffer>
 800f048:	4603      	mov	r3, r0
 800f04a:	83fb      	strh	r3, [r7, #30]
 800f04c:	8bfb      	ldrh	r3, [r7, #30]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <phhalHw_Pn5180_GetConfig+0x382>
 800f052:	8bfb      	ldrh	r3, [r7, #30]
 800f054:	e0d0      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 800f056:	8aba      	ldrh	r2, [r7, #20]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	801a      	strh	r2, [r3, #0]
        break;
 800f05c:	e0cb      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f05e:	f107 0116 	add.w	r1, r7, #22
 800f062:	f107 0218 	add.w	r2, r7, #24
 800f066:	f107 0314 	add.w	r3, r7, #20
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	460b      	mov	r3, r1
 800f06e:	2101      	movs	r1, #1
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f001 ffbc 	bl	8010fee <phhalHw_Pn5180_GetTxBuffer>
 800f076:	4603      	mov	r3, r0
 800f078:	83fb      	strh	r3, [r7, #30]
 800f07a:	8bfb      	ldrh	r3, [r7, #30]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d001      	beq.n	800f084 <phhalHw_Pn5180_GetConfig+0x3b0>
 800f080:	8bfb      	ldrh	r3, [r7, #30]
 800f082:	e0b9      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 800f084:	8aba      	ldrh	r2, [r7, #20]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	801a      	strh	r2, [r3, #0]
        break;
 800f08a:	e0b4      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f08c:	f107 0116 	add.w	r1, r7, #22
 800f090:	f107 0218 	add.w	r2, r7, #24
 800f094:	f107 0314 	add.w	r3, r7, #20
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	460b      	mov	r3, r1
 800f09c:	2101      	movs	r1, #1
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f001 ffa5 	bl	8010fee <phhalHw_Pn5180_GetTxBuffer>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	83fb      	strh	r3, [r7, #30]
 800f0a8:	8bfb      	ldrh	r3, [r7, #30]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <phhalHw_Pn5180_GetConfig+0x3de>
 800f0ae:	8bfb      	ldrh	r3, [r7, #30]
 800f0b0:	e0a2      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 800f0b2:	8afa      	ldrh	r2, [r7, #22]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	801a      	strh	r2, [r3, #0]
        break;
 800f0b8:	e09d      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800f0ba:	f107 0116 	add.w	r1, r7, #22
 800f0be:	f107 0218 	add.w	r2, r7, #24
 800f0c2:	f107 0314 	add.w	r3, r7, #20
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f001 ff8e 	bl	8010fee <phhalHw_Pn5180_GetTxBuffer>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	83fb      	strh	r3, [r7, #30]
 800f0d6:	8bfb      	ldrh	r3, [r7, #30]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <phhalHw_Pn5180_GetConfig+0x40c>
 800f0dc:	8bfb      	ldrh	r3, [r7, #30]
 800f0de:	e08b      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	8a1b      	ldrh	r3, [r3, #16]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d302      	bcc.n	800f0f2 <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800f0ec:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f0f0:	e082      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800f0f8:	4413      	add	r3, r2
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	801a      	strh	r2, [r3, #0]
        break;
 800f102:	e078      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f10a:	461a      	mov	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	801a      	strh	r2, [r3, #0]
        break;
 800f110:	e071      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f118:	461a      	mov	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	801a      	strh	r2, [r3, #0]
        break;
 800f11e:	e06a      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	801a      	strh	r2, [r3, #0]
        break;
 800f128:	e065      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f130:	461a      	mov	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	801a      	strh	r2, [r3, #0]
        break;
 800f136:	e05e      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800f138:	f107 0310 	add.w	r3, r7, #16
 800f13c:	461a      	mov	r2, r3
 800f13e:	211d      	movs	r1, #29
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f001 f997 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800f146:	4603      	mov	r3, r0
 800f148:	83fb      	strh	r3, [r7, #30]
 800f14a:	8bfb      	ldrh	r3, [r7, #30]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <phhalHw_Pn5180_GetConfig+0x480>
 800f150:	8bfb      	ldrh	r3, [r7, #30]
 800f152:	e051      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d003      	beq.n	800f166 <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2201      	movs	r2, #1
 800f162:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 800f164:	e047      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	801a      	strh	r2, [r3, #0]
        break;
 800f16c:	e043      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800f16e:	f107 0310 	add.w	r3, r7, #16
 800f172:	461a      	mov	r2, r3
 800f174:	2100      	movs	r1, #0
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f001 f97c 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800f17c:	4603      	mov	r3, r0
 800f17e:	83fb      	strh	r3, [r7, #30]
 800f180:	8bfb      	ldrh	r3, [r7, #30]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d001      	beq.n	800f18a <phhalHw_Pn5180_GetConfig+0x4b6>
 800f186:	8bfb      	ldrh	r3, [r7, #30]
 800f188:	e036      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f190:	2b00      	cmp	r3, #0
 800f192:	d003      	beq.n	800f19c <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 800f19a:	e02c      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	801a      	strh	r2, [r3, #0]
        break;
 800f1a2:	e028      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	801a      	strh	r2, [r3, #0]
        break;
 800f1b0:	e021      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800f1b2:	f107 0310 	add.w	r3, r7, #16
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	211d      	movs	r1, #29
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f001 f95a 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	83fb      	strh	r3, [r7, #30]
 800f1c4:	8bfb      	ldrh	r3, [r7, #30]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <phhalHw_Pn5180_GetConfig+0x4fa>
 800f1ca:	8bfb      	ldrh	r3, [r7, #30]
 800f1cc:	e014      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d007      	beq.n	800f1e8 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 800f1de:	e00a      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>
 800f1e0:	10624dd3 	.word	0x10624dd3
 800f1e4:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	801a      	strh	r2, [r3, #0]
        break;
 800f1ee:	e002      	b.n	800f1f6 <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f1f0:	f240 2323 	movw	r3, #547	@ 0x223
 800f1f4:	e000      	b.n	800f1f8 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3720      	adds	r7, #32
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 800f20c:	2300      	movs	r3, #0
 800f20e:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 800f210:	2300      	movs	r3, #0
 800f212:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 800f214:	2300      	movs	r3, #0
 800f216:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 800f218:	887b      	ldrh	r3, [r7, #2]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d146      	bne.n	800f2ac <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 800f21e:	f107 030c 	add.w	r3, r7, #12
 800f222:	461a      	mov	r2, r3
 800f224:	210e      	movs	r1, #14
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f7ff fd54 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 800f22c:	4603      	mov	r3, r0
 800f22e:	81fb      	strh	r3, [r7, #14]
 800f230:	89fb      	ldrh	r3, [r7, #14]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <phhalHw_Pn5180_SetMinFDT+0x3a>
 800f236:	89fb      	ldrh	r3, [r7, #14]
 800f238:	e04a      	b.n	800f2d0 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 800f23a:	89ba      	ldrh	r2, [r7, #12]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 800f240:	f107 030a 	add.w	r3, r7, #10
 800f244:	461a      	mov	r2, r3
 800f246:	2109      	movs	r1, #9
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f7ff fd43 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 800f24e:	4603      	mov	r3, r0
 800f250:	81fb      	strh	r3, [r7, #14]
 800f252:	89fb      	ldrh	r3, [r7, #14]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <phhalHw_Pn5180_SetMinFDT+0x5c>
 800f258:	89fb      	ldrh	r3, [r7, #14]
 800f25a:	e039      	b.n	800f2d0 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 800f25c:	897b      	ldrh	r3, [r7, #10]
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d816      	bhi.n	800f290 <phhalHw_Pn5180_SetMinFDT+0x90>
 800f262:	a201      	add	r2, pc, #4	@ (adr r2, 800f268 <phhalHw_Pn5180_SetMinFDT+0x68>)
 800f264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f268:	0800f279 	.word	0x0800f279
 800f26c:	0800f27f 	.word	0x0800f27f
 800f270:	0800f285 	.word	0x0800f285
 800f274:	0800f28b 	.word	0x0800f28b
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 800f278:	2365      	movs	r3, #101	@ 0x65
 800f27a:	81bb      	strh	r3, [r7, #12]
            break;
 800f27c:	e009      	b.n	800f292 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 800f27e:	237f      	movs	r3, #127	@ 0x7f
 800f280:	81bb      	strh	r3, [r7, #12]
            break;
 800f282:	e006      	b.n	800f292 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 800f284:	2377      	movs	r3, #119	@ 0x77
 800f286:	81bb      	strh	r3, [r7, #12]
            break;
 800f288:	e003      	b.n	800f292 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 800f28a:	2380      	movs	r3, #128	@ 0x80
 800f28c:	81bb      	strh	r3, [r7, #12]
            break;
 800f28e:	e000      	b.n	800f292 <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 800f290:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 800f292:	89bb      	ldrh	r3, [r7, #12]
 800f294:	461a      	mov	r2, r3
 800f296:	210d      	movs	r1, #13
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7fe f8cd 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	81fb      	strh	r3, [r7, #14]
 800f2a2:	89fb      	ldrh	r3, [r7, #14]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d012      	beq.n	800f2ce <phhalHw_Pn5180_SetMinFDT+0xce>
 800f2a8:	89fb      	ldrh	r3, [r7, #14]
 800f2aa:	e011      	b.n	800f2d0 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 800f2ac:	887b      	ldrh	r3, [r7, #2]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d10d      	bne.n	800f2ce <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	210e      	movs	r1, #14
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7fe f8bc 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	81fb      	strh	r3, [r7, #14]
 800f2c4:	89fb      	ldrh	r3, [r7, #14]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <phhalHw_Pn5180_SetMinFDT+0xce>
 800f2ca:	89fb      	ldrh	r3, [r7, #14]
 800f2cc:	e000      	b.n	800f2d0 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	@ 0x28
 800f2dc:	af04      	add	r7, sp, #16
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	80fb      	strh	r3, [r7, #6]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	789b      	ldrb	r3, [r3, #2]
 800f2f4:	2b04      	cmp	r3, #4
 800f2f6:	d10f      	bne.n	800f318 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6858      	ldr	r0, [r3, #4]
 800f2fc:	88fa      	ldrh	r2, [r7, #6]
 800f2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f300:	9302      	str	r3, [sp, #8]
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	9301      	str	r3, [sp, #4]
 800f306:	88bb      	ldrh	r3, [r7, #4]
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	4613      	mov	r3, r2
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	2100      	movs	r1, #0
 800f310:	f007 ff36 	bl	8017180 <phbalReg_Exchange>
 800f314:	4603      	mov	r3, r0
 800f316:	e077      	b.n	800f408 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f318:	bf00      	nop
 800f31a:	2201      	movs	r2, #1
 800f31c:	2102      	movs	r1, #2
 800f31e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f322:	f007 fe83 	bl	801702c <phDriver_PinRead>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1f6      	bne.n	800f31a <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	2100      	movs	r1, #0
 800f332:	4618      	mov	r0, r3
 800f334:	f000 fe3e 	bl	800ffb4 <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6858      	ldr	r0, [r3, #4]
 800f33c:	88fa      	ldrh	r2, [r7, #6]
 800f33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f340:	9302      	str	r3, [sp, #8]
 800f342:	2300      	movs	r3, #0
 800f344:	9301      	str	r3, [sp, #4]
 800f346:	88fb      	ldrh	r3, [r7, #6]
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	4613      	mov	r3, r2
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	2100      	movs	r1, #0
 800f350:	f007 ff16 	bl	8017180 <phbalReg_Exchange>
 800f354:	4603      	mov	r3, r0
 800f356:	82fb      	strh	r3, [r7, #22]
 800f358:	8afb      	ldrh	r3, [r7, #22]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <phhalHw_Pn5180_BalExchange+0x8a>
 800f35e:	8afb      	ldrh	r3, [r7, #22]
 800f360:	e052      	b.n	800f408 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d109      	bne.n	800f380 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f36c:	bf00      	nop
 800f36e:	2201      	movs	r2, #1
 800f370:	2102      	movs	r1, #2
 800f372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f376:	f007 fe59 	bl	801702c <phDriver_PinRead>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d0f6      	beq.n	800f36e <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	2101      	movs	r1, #1
 800f386:	4618      	mov	r0, r3
 800f388:	f000 fe14 	bl	800ffb4 <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 800f38c:	88bb      	ldrh	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d039      	beq.n	800f406 <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f392:	bf00      	nop
 800f394:	2201      	movs	r2, #1
 800f396:	2102      	movs	r1, #2
 800f398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f39c:	f007 fe46 	bl	801702c <phDriver_PinRead>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1f6      	bne.n	800f394 <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f000 fe01 	bl	800ffb4 <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6858      	ldr	r0, [r3, #4]
 800f3b6:	88ba      	ldrh	r2, [r7, #4]
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ba:	9302      	str	r3, [sp, #8]
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	88bb      	ldrh	r3, [r7, #4]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	f007 fed9 	bl	8017180 <phbalReg_Exchange>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	82fb      	strh	r3, [r7, #22]
 800f3d2:	8afb      	ldrh	r3, [r7, #22]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <phhalHw_Pn5180_BalExchange+0x104>
 800f3d8:	8afb      	ldrh	r3, [r7, #22]
 800f3da:	e015      	b.n	800f408 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d109      	bne.n	800f3fa <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f3e6:	bf00      	nop
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	2102      	movs	r1, #2
 800f3ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f3f0:	f007 fe1c 	bl	801702c <phDriver_PinRead>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d0f6      	beq.n	800f3e8 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	2101      	movs	r1, #1
 800f400:	4618      	mov	r0, r3
 800f402:	f000 fdd7 	bl	800ffb4 <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b090      	sub	sp, #64	@ 0x40
 800f414:	af02      	add	r7, sp, #8
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	607a      	str	r2, [r7, #4]
 800f41a:	603b      	str	r3, [r7, #0]
 800f41c:	460b      	mov	r3, r1
 800f41e:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800f420:	237f      	movs	r3, #127	@ 0x7f
 800f422:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 800f424:	2300      	movs	r3, #0
 800f426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 800f428:	2300      	movs	r3, #0
 800f42a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 800f42e:	2300      	movs	r3, #0
 800f430:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 800f434:	2300      	movs	r3, #0
 800f436:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 800f440:	2300      	movs	r3, #0
 800f442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 800f44c:	2300      	movs	r3, #0
 800f44e:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800f450:	2200      	movs	r2, #0
 800f452:	215e      	movs	r1, #94	@ 0x5e
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f7fd ffef 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 800f45a:	4603      	mov	r3, r0
 800f45c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f45e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <phhalHw_Pn5180_Autocoll+0x58>
 800f464:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f466:	e25e      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d008      	beq.n	800f488 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d005      	beq.n	800f488 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 800f482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f484:	2b00      	cmp	r3, #0
 800f486:	d102      	bne.n	800f48e <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f488:	f240 2321 	movw	r3, #545	@ 0x221
 800f48c:	e24b      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f494:	2b01      	cmp	r3, #1
 800f496:	d103      	bne.n	800f4a0 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 800f498:	2301      	movs	r3, #1
 800f49a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800f49e:	e037      	b.n	800f510 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 800f4a0:	897b      	ldrh	r3, [r7, #10]
 800f4a2:	f003 0301 	and.w	r3, r3, #1
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d005      	beq.n	800f4b6 <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 800f4aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f4ae:	f043 0301 	orr.w	r3, r3, #1
 800f4b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 800f4b6:	897b      	ldrh	r3, [r7, #10]
 800f4b8:	f003 0304 	and.w	r3, r3, #4
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d005      	beq.n	800f4cc <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 800f4c0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f4c4:	f043 0302 	orr.w	r3, r3, #2
 800f4c8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 800f4cc:	897b      	ldrh	r3, [r7, #10]
 800f4ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d005      	beq.n	800f4e2 <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 800f4d6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f4da:	f043 0304 	orr.w	r3, r3, #4
 800f4de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 800f4e2:	897b      	ldrh	r3, [r7, #10]
 800f4e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d005      	beq.n	800f4f8 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 800f4ec:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f4f0:	f043 0308 	orr.w	r3, r3, #8
 800f4f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 800f4f8:	897b      	ldrh	r3, [r7, #10]
 800f4fa:	f003 0302 	and.w	r3, r3, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d104      	bne.n	800f50c <phhalHw_Pn5180_Autocoll+0xfc>
 800f502:	897b      	ldrh	r3, [r7, #10]
 800f504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 800f50c:	2300      	movs	r3, #0
 800f50e:	e20a      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2200      	movs	r2, #0
 800f514:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2200      	movs	r2, #0
 800f51a:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	f003 f982 	bl	801283c <phhalHw_Pn5180_Int_IdleCommand>
 800f538:	4603      	mov	r3, r0
 800f53a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f53c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <phhalHw_Pn5180_Autocoll+0x136>
 800f542:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f544:	e1ef      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f001 fd17 	bl	8010f7a <phhalHw_Pn5180_Instr_RfOff>
 800f54c:	4603      	mov	r3, r0
 800f54e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f550:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <phhalHw_Pn5180_Autocoll+0x14a>
 800f556:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f558:	e1e5      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800f55a:	4b9d      	ldr	r3, [pc, #628]	@ (800f7d0 <phhalHw_Pn5180_Autocoll+0x3c0>)
 800f55c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800f55e:	4a9d      	ldr	r2, [pc, #628]	@ (800f7d4 <phhalHw_Pn5180_Autocoll+0x3c4>)
 800f560:	2103      	movs	r1, #3
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f000 fd72 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800f568:	4603      	mov	r3, r0
 800f56a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f56c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <phhalHw_Pn5180_Autocoll+0x166>
 800f572:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f574:	e1d7      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f57c:	2300      	movs	r3, #0
 800f57e:	2201      	movs	r2, #1
 800f580:	2100      	movs	r1, #0
 800f582:	f007 ff9f 	bl	80174c4 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800f586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f588:	2101      	movs	r1, #1
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f000 fd5e 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800f590:	4603      	mov	r3, r0
 800f592:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f594:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <phhalHw_Pn5180_Autocoll+0x18e>
 800f59a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f59c:	e1c3      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 800f59e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800f5a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f001 fa3b 	bl	8010a24 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f5b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d001      	beq.n	800f5bc <phhalHw_Pn5180_Autocoll+0x1ac>
 800f5b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5ba:	e1b4      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 800f5bc:	f107 0314 	add.w	r3, r7, #20
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2101      	movs	r1, #1
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f003 f9e9 	bl	80129a0 <phhalHw_Pn5180_WaitIrq>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 800f5d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b12      	cmp	r3, #18
 800f5d8:	d10c      	bne.n	800f5f4 <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f001 fa7b 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f5e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d001      	beq.n	800f5ee <phhalHw_Pn5180_Autocoll+0x1de>
 800f5ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5ec:	e19b      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 800f5ee:	f240 2312 	movw	r3, #530	@ 0x212
 800f5f2:	e198      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00c      	beq.n	800f618 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f001 fa69 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f604:	4603      	mov	r3, r0
 800f606:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f608:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d001      	beq.n	800f612 <phhalHw_Pn5180_Autocoll+0x202>
 800f60e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f610:	e189      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 800f612:	f240 237f 	movw	r3, #639	@ 0x27f
 800f616:	e186      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f000 815d 	beq.w	800f8de <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 800f624:	231b      	movs	r3, #27
 800f626:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 800f628:	231a      	movs	r3, #26
 800f62a:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 800f62c:	2313      	movs	r3, #19
 800f62e:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 800f630:	231d      	movs	r3, #29
 800f632:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 800f634:	f107 0318 	add.w	r3, r7, #24
 800f638:	f107 011c 	add.w	r1, r7, #28
 800f63c:	2204      	movs	r2, #4
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f000 ff86 	bl	8010550 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 800f644:	4603      	mov	r3, r0
 800f646:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f648:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <phhalHw_Pn5180_Autocoll+0x242>
 800f64e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f650:	e169      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	3301      	adds	r3, #1
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	021b      	lsls	r3, r3, #8
 800f660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f662:	4313      	orrs	r3, r2
 800f664:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	3302      	adds	r3, #2
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	041b      	lsls	r3, r3, #16
 800f66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f670:	4313      	orrs	r3, r2
 800f672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	3303      	adds	r3, #3
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	061b      	lsls	r3, r3, #24
 800f67c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f67e:	4313      	orrs	r3, r2
 800f680:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 800f682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f684:	0f5b      	lsrs	r3, r3, #29
 800f686:	b2db      	uxtb	r3, r3
 800f688:	f003 0303 	and.w	r3, r3, #3
 800f68c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	3304      	adds	r3, #4
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	3305      	adds	r3, #5
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	021b      	lsls	r3, r3, #8
 800f6a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	3306      	adds	r3, #6
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	041b      	lsls	r3, r3, #16
 800f6ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	3307      	adds	r3, #7
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	061b      	lsls	r3, r3, #24
 800f6bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 800f6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	f003 0307 	and.w	r3, r3, #7
 800f6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 800f6ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f6d2:	3b04      	subs	r3, #4
 800f6d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	3308      	adds	r3, #8
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	3309      	adds	r3, #9
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	021b      	lsls	r3, r3, #8
 800f6e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	330a      	adds	r3, #10
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	041b      	lsls	r3, r3, #16
 800f6f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	330b      	adds	r3, #11
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	061b      	lsls	r3, r3, #24
 800f704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f706:	4313      	orrs	r3, r2
 800f708:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	330c      	adds	r3, #12
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	330d      	adds	r3, #13
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	021b      	lsls	r3, r3, #8
 800f71a:	6a3a      	ldr	r2, [r7, #32]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	330e      	adds	r3, #14
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	041b      	lsls	r3, r3, #16
 800f728:	6a3a      	ldr	r2, [r7, #32]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	330f      	adds	r3, #15
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	061b      	lsls	r3, r3, #24
 800f736:	6a3a      	ldr	r2, [r7, #32]
 800f738:	4313      	orrs	r3, r2
 800f73a:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 800f73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f73e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00c      	beq.n	800f760 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f001 f9c5 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f74c:	4603      	mov	r3, r0
 800f74e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f750:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f752:	2b00      	cmp	r3, #0
 800f754:	d001      	beq.n	800f75a <phhalHw_Pn5180_Autocoll+0x34a>
 800f756:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f758:	e0e5      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 800f75a:	f240 2302 	movw	r3, #514	@ 0x202
 800f75e:	e0e2      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 800f760:	683a      	ldr	r2, [r7, #0]
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f001 fd0a 	bl	801117e <phhalHw_Pn5180_ReadData>
 800f76a:	4603      	mov	r3, r0
 800f76c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f76e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f770:	2b00      	cmp	r3, #0
 800f772:	d001      	beq.n	800f778 <phhalHw_Pn5180_Autocoll+0x368>
 800f774:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f776:	e0d6      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	f003 0310 	and.w	r3, r3, #16
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d02a      	beq.n	800f7d8 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00c      	beq.n	800f7a6 <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f001 f9a2 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f792:	4603      	mov	r3, r0
 800f794:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f796:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d001      	beq.n	800f7a0 <phhalHw_Pn5180_Autocoll+0x390>
 800f79c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f79e:	e0c2      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800f7a0:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800f7a4:	e0bf      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 800f7ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d134      	bne.n	800f820 <phhalHw_Pn5180_Autocoll+0x410>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2bf0      	cmp	r3, #240	@ 0xf0
 800f7be:	d12f      	bne.n	800f820 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f7cc:	e028      	b.n	800f820 <phhalHw_Pn5180_Autocoll+0x410>
 800f7ce:	bf00      	nop
 800f7d0:	00020041 	.word	0x00020041
 800f7d4:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 800f7d8:	6a3b      	ldr	r3, [r7, #32]
 800f7da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d111      	bne.n	800f806 <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 800f7ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d105      	bne.n	800f7fe <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 800f7fe:	2301      	movs	r3, #1
 800f800:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800f804:	e00c      	b.n	800f820 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f001 f965 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f80c:	4603      	mov	r3, r0
 800f80e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f810:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f812:	2b00      	cmp	r3, #0
 800f814:	d001      	beq.n	800f81a <phhalHw_Pn5180_Autocoll+0x40a>
 800f816:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f818:	e085      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 800f81a:	f240 2306 	movw	r3, #518	@ 0x206
 800f81e:	e082      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f826:	2b01      	cmp	r3, #1
 800f828:	d115      	bne.n	800f856 <phhalHw_Pn5180_Autocoll+0x446>
 800f82a:	897b      	ldrh	r3, [r7, #10]
 800f82c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f830:	2b00      	cmp	r3, #0
 800f832:	d110      	bne.n	800f856 <phhalHw_Pn5180_Autocoll+0x446>
 800f834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10c      	bne.n	800f856 <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f001 f94a 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f842:	4603      	mov	r3, r0
 800f844:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f846:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d001      	beq.n	800f850 <phhalHw_Pn5180_Autocoll+0x440>
 800f84c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f84e:	e06a      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 800f850:	f240 2306 	movw	r3, #518	@ 0x206
 800f854:	e067      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 800f856:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d108      	bne.n	800f870 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 800f85e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f862:	b29b      	uxth	r3, r3
 800f864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f868:	b29a      	uxth	r2, r3
 800f86a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f86c:	801a      	strh	r2, [r3, #0]
 800f86e:	e01b      	b.n	800f8a8 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 800f870:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f874:	2b01      	cmp	r3, #1
 800f876:	d108      	bne.n	800f88a <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 800f878:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f882:	b29a      	uxth	r2, r3
 800f884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f886:	801a      	strh	r2, [r3, #0]
 800f888:	e00e      	b.n	800f8a8 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 800f88a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d108      	bne.n	800f8a4 <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 800f892:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f896:	b29b      	uxth	r3, r3
 800f898:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8a0:	801a      	strh	r2, [r3, #0]
 800f8a2:	e001      	b.n	800f8a8 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 800f8a4:	2305      	movs	r3, #5
 800f8a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	881a      	ldrh	r2, [r3, #0]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	695a      	ldr	r2, [r3, #20]
 800f8b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800f8b8:	441a      	add	r2, r3
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	8b5a      	ldrh	r2, [r3, #26]
 800f8c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 800f8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8d2:	881a      	ldrh	r2, [r3, #0]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f8dc:	e006      	b.n	800f8ec <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 800f8e8:	2310      	movs	r3, #16
 800f8ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 800f8ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d009      	beq.n	800f906 <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f001 f8ef 	bl	8010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f8fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <phhalHw_Pn5180_Autocoll+0x4f6>
 800f902:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f904:	e00f      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800f906:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00b      	beq.n	800f924 <phhalHw_Pn5180_Autocoll+0x514>
 800f90c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f90e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f912:	2b00      	cmp	r3, #0
 800f914:	d106      	bne.n	800f924 <phhalHw_Pn5180_Autocoll+0x514>
 800f916:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f920:	b29b      	uxth	r3, r3
 800f922:	e000      	b.n	800f926 <phhalHw_Pn5180_Autocoll+0x516>
 800f924:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800f926:	4618      	mov	r0, r3
 800f928:	3738      	adds	r7, #56	@ 0x38
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop

0800f930 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b090      	sub	sp, #64	@ 0x40
 800f934:	af02      	add	r7, sp, #8
 800f936:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 800f938:	2300      	movs	r3, #0
 800f93a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 800f93c:	2300      	movs	r3, #0
 800f93e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 800f940:	2300      	movs	r3, #0
 800f942:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 800f944:	2300      	movs	r3, #0
 800f946:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d002      	beq.n	800f958 <phhalHw_Pn5180_Lpcd+0x28>
 800f952:	2b01      	cmp	r3, #1
 800f954:	d072      	beq.n	800fa3c <phhalHw_Pn5180_Lpcd+0x10c>
 800f956:	e0c4      	b.n	800fae2 <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 800f958:	f107 031c 	add.w	r3, r7, #28
 800f95c:	461a      	mov	r2, r3
 800f95e:	2126      	movs	r1, #38	@ 0x26
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 fd87 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 800f966:	4603      	mov	r3, r0
 800f968:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f96a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <phhalHw_Pn5180_Lpcd+0x44>
 800f970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f972:	e0c9      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 800f974:	f107 0210 	add.w	r2, r7, #16
 800f978:	2305      	movs	r3, #5
 800f97a:	2134      	movs	r1, #52	@ 0x34
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 fef9 	bl	8010774 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f982:	4603      	mov	r3, r0
 800f984:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <phhalHw_Pn5180_Lpcd+0x60>
 800f98c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f98e:	e0bb      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 800f990:	f107 020c 	add.w	r2, r7, #12
 800f994:	2301      	movs	r3, #1
 800f996:	2159      	movs	r1, #89	@ 0x59
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 feeb 	bl	8010774 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f9a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <phhalHw_Pn5180_Lpcd+0x7c>
 800f9a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f9aa:	e0ad      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 800f9ac:	7d3b      	ldrb	r3, [r7, #20]
 800f9ae:	f003 0303 	and.w	r3, r3, #3
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d109      	bne.n	800f9ca <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 800f9b6:	7c3b      	ldrb	r3, [r7, #16]
 800f9b8:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 800f9ba:	7c7b      	ldrb	r3, [r7, #17]
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f9c8:	e002      	b.n	800f9d0 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9ce:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 800f9d0:	7cfb      	ldrb	r3, [r7, #19]
 800f9d2:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f9dc:	b29a      	uxth	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 800f9e2:	7b3b      	ldrb	r3, [r7, #12]
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d009      	beq.n	800fa00 <phhalHw_Pn5180_Lpcd+0xd0>
 800f9ec:	69fa      	ldr	r2, [r7, #28]
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f0:	4053      	eors	r3, r2
 800f9f2:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d002      	beq.n	800fa00 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 800f9fe:	e073      	b.n	800fae8 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa06:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 800fa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa0e:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 800fa10:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 800fa12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d203      	bcs.n	800fa20 <phhalHw_Pn5180_Lpcd+0xf0>
 800fa18:	69fa      	ldr	r2, [r7, #28]
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	e002      	b.n	800fa26 <phhalHw_Pn5180_Lpcd+0xf6>
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa24:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 800fa26:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 800fa28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d902      	bls.n	800fa36 <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 800fa30:	2300      	movs	r3, #0
 800fa32:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800fa34:	e058      	b.n	800fae8 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 800fa36:	2301      	movs	r3, #1
 800fa38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800fa3a:	e055      	b.n	800fae8 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fa3c:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 800fa40:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 800fa42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa44:	2103      	movs	r1, #3
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 fb00 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fa50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <phhalHw_Pn5180_Lpcd+0x12a>
 800fa56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa58:	e056      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fa60:	2300      	movs	r3, #0
 800fa62:	2201      	movs	r2, #1
 800fa64:	2100      	movs	r1, #0
 800fa66:	f007 fd2d 	bl	80174c4 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fa6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa6c:	2101      	movs	r1, #1
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 faec 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800fa74:	4603      	mov	r3, r0
 800fa76:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fa78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <phhalHw_Pn5180_Lpcd+0x152>
 800fa7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa80:	e042      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800fa86:	4619      	mov	r1, r3
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 ff72 	bl	8010972 <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fa92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d001      	beq.n	800fa9c <phhalHw_Pn5180_Lpcd+0x16c>
 800fa98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa9a:	e035      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800fa9c:	f107 0318 	add.w	r3, r7, #24
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa4:	2200      	movs	r2, #0
 800faa6:	2101      	movs	r1, #1
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f002 ff79 	bl	80129a0 <phhalHw_Pn5180_WaitIrq>
 800faae:	4603      	mov	r3, r0
 800fab0:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fab2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <phhalHw_Pn5180_Lpcd+0x18c>
 800fab8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800faba:	e025      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 800fac6:	2300      	movs	r3, #0
 800fac8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 800faca:	e00d      	b.n	800fae8 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d002      	beq.n	800fadc <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 800fad6:	2321      	movs	r3, #33	@ 0x21
 800fad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800fada:	e005      	b.n	800fae8 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 800fadc:	2301      	movs	r3, #1
 800fade:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800fae0:	e002      	b.n	800fae8 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fae2:	f240 2321 	movw	r3, #545	@ 0x221
 800fae6:	e00f      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800fae8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00b      	beq.n	800fb06 <phhalHw_Pn5180_Lpcd+0x1d6>
 800faee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800faf0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d106      	bne.n	800fb06 <phhalHw_Pn5180_Lpcd+0x1d6>
 800faf8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	e000      	b.n	800fb08 <phhalHw_Pn5180_Lpcd+0x1d8>
 800fb06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3738      	adds	r7, #56	@ 0x38
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08e      	sub	sp, #56	@ 0x38
 800fb14:	af02      	add	r7, sp, #8
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	460b      	mov	r3, r1
 800fb20:	71fb      	strb	r3, [r7, #7]
 800fb22:	4613      	mov	r3, r2
 800fb24:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 800fb26:	2300      	movs	r3, #0
 800fb28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 800fb34:	2300      	movs	r3, #0
 800fb36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 800fb44:	2300      	movs	r3, #0
 800fb46:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d101      	bne.n	800fb54 <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 800fb50:	2321      	movs	r3, #33	@ 0x21
 800fb52:	e16b      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 800fb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 800fb5a:	2321      	movs	r3, #33	@ 0x21
 800fb5c:	e166      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 800fb5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d101      	bne.n	800fb68 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 800fb64:	2321      	movs	r3, #33	@ 0x21
 800fb66:	e161      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 800fb68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d101      	bne.n	800fb72 <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 800fb6e:	2321      	movs	r3, #33	@ 0x21
 800fb70:	e15c      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 800fb72:	79fb      	ldrb	r3, [r7, #7]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d02f      	beq.n	800fbd8 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 800fb80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fb84:	085b      	lsrs	r3, r3, #1
 800fb86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 800fb8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fb8e:	f003 0307 	and.w	r3, r3, #7
 800fb92:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 800fb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb98:	3301      	adds	r3, #1
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	091b      	lsrs	r3, r3, #4
 800fb9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 800fba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fba6:	f003 0303 	and.w	r3, r3, #3
 800fbaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 800fbae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d001      	beq.n	800fbba <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d109      	bne.n	800fbce <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 800fbba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fbbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d007      	beq.n	800fbd6 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fbc6:	f240 2321 	movw	r3, #545	@ 0x221
 800fbca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 800fbcc:	e003      	b.n	800fbd6 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fbce:	f240 2321 	movw	r3, #545	@ 0x221
 800fbd2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fbd4:	e000      	b.n	800fbd8 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 800fbd6:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d120      	bne.n	800fc24 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800fbea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d110      	bne.n	800fc12 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800fbf0:	f107 0314 	add.w	r3, r7, #20
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	2322      	movs	r3, #34	@ 0x22
 800fbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbfc:	2105      	movs	r1, #5
 800fbfe:	488d      	ldr	r0, [pc, #564]	@ (800fe34 <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 800fc00:	f007 fb94 	bl	801732c <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	f003 0320 	and.w	r3, r3, #32
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 800fc0e:	2312      	movs	r3, #18
 800fc10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800fc12:	f007 fa8d 	bl	8017130 <phDriver_TimerStop>
 800fc16:	4603      	mov	r3, r0
 800fc18:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fc1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d001      	beq.n	800fc24 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 800fc20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fc22:	e103      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800fc24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d001      	beq.n	800fc2e <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 800fc2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc2c:	e0fe      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fc2e:	4b82      	ldr	r3, [pc, #520]	@ (800fe38 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 800fc30:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800fc32:	4a82      	ldr	r2, [pc, #520]	@ (800fe3c <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 800fc34:	2103      	movs	r1, #3
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f000 fa08 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fc40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 800fc46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc48:	e0f0      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fc50:	2300      	movs	r3, #0
 800fc52:	2201      	movs	r2, #1
 800fc54:	2100      	movs	r1, #0
 800fc56:	f007 fc35 	bl	80174c4 <phOsal_EventClear>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fc5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d001      	beq.n	800fc68 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 800fc64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fc66:	e0e1      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fc68:	6a3a      	ldr	r2, [r7, #32]
 800fc6a:	2101      	movs	r1, #1
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f000 fa63 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fc72:	4603      	mov	r3, r0
 800fc74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fc76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 800fc7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc7e:	e0d5      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 800fc80:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d101      	bne.n	800fc8c <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 800fc8c:	79b9      	ldrb	r1, [r7, #6]
 800fc8e:	79fa      	ldrb	r2, [r7, #7]
 800fc90:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fc94:	9301      	str	r3, [sp, #4]
 800fc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	68b9      	ldr	r1, [r7, #8]
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f000 ff4e 	bl	8010b40 <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 800fca4:	4603      	mov	r3, r0
 800fca6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fca8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d001      	beq.n	800fcb2 <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 800fcae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcb0:	e0bc      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800fcb2:	f107 0318 	add.w	r3, r7, #24
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	6a3b      	ldr	r3, [r7, #32]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	2101      	movs	r1, #1
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f002 fe6e 	bl	80129a0 <phhalHw_Pn5180_WaitIrq>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fcc8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 800fcce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcd0:	e0ac      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800fcd2:	69bb      	ldr	r3, [r7, #24]
 800fcd4:	f003 0301 	and.w	r3, r3, #1
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 8095 	beq.w	800fe08 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 800fcde:	f107 031c 	add.w	r3, r7, #28
 800fce2:	4619      	mov	r1, r3
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 ffba 	bl	8010c5e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 800fcea:	4603      	mov	r3, r0
 800fcec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fcee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 800fcf4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcf6:	e099      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 800fcf8:	8bbb      	ldrh	r3, [r7, #28]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f001 f803 	bl	8010d0a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 800fd04:	4603      	mov	r3, r0
 800fd06:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fd08:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d001      	beq.n	800fd12 <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 800fd0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fd10:	e08c      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 800fd12:	8bba      	ldrh	r2, [r7, #28]
 800fd14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd16:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 800fd18:	8bbb      	ldrh	r3, [r7, #28]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d071      	beq.n	800fe02 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd20:	3301      	adds	r3, #1
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	f003 0307 	and.w	r3, r3, #7
 800fd28:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2c:	3302      	adds	r3, #2
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fd34:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 800fd36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd3a:	005b      	lsls	r3, r3, #1
 800fd3c:	b25a      	sxtb	r2, r3
 800fd3e:	7fbb      	ldrb	r3, [r7, #30]
 800fd40:	09db      	lsrs	r3, r3, #7
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	b25b      	sxtb	r3, r3
 800fd46:	4313      	orrs	r3, r2
 800fd48:	b25b      	sxtb	r3, r3
 800fd4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 800fd52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fd56:	2201      	movs	r2, #1
 800fd58:	fa02 f303 	lsl.w	r3, r2, r3
 800fd5c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 800fd60:	e04a      	b.n	800fdf8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 800fd62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd68:	4413      	add	r3, r2
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d112      	bne.n	800fd96 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 800fd70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd76:	3301      	adds	r3, #1
 800fd78:	4413      	add	r3, r2
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d10a      	bne.n	800fd96 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 800fd80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd86:	3302      	adds	r3, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d102      	bne.n	800fd96 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 800fd90:	2301      	movs	r3, #1
 800fd92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fd94:	e028      	b.n	800fde8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 800fd96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd9c:	4413      	add	r3, r2
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2b03      	cmp	r3, #3
 800fda2:	d11e      	bne.n	800fde2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 800fda4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fdaa:	3301      	adds	r3, #1
 800fdac:	4413      	add	r3, r2
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d116      	bne.n	800fde2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 800fdb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fdba:	3302      	adds	r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10e      	bne.n	800fde2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 800fdc8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d11b      	bne.n	800fe0c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 800fdd4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fdd8:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d115      	bne.n	800fe0c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 800fde0:	e002      	b.n	800fde8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 800fde2:	2300      	movs	r3, #0
 800fde4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 800fde6:	e011      	b.n	800fe0c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 800fde8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fdea:	3303      	adds	r3, #3
 800fdec:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 800fdee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 800fdf8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d1b0      	bne.n	800fd62 <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 800fe00:	e004      	b.n	800fe0c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 800fe02:	237f      	movs	r3, #127	@ 0x7f
 800fe04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fe06:	e001      	b.n	800fe0c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800fe0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00b      	beq.n	800fe2a <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 800fe12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fe14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d106      	bne.n	800fe2a <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 800fe1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	e000      	b.n	800fe2c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 800fe2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3730      	adds	r7, #48	@ 0x30
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	2000178c 	.word	0x2000178c
 800fe38:	00020001 	.word	0x00020001
 800fe3c:	000fffff 	.word	0x000fffff

0800fe40 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b08a      	sub	sp, #40	@ 0x28
 800fe44:	af02      	add	r7, sp, #8
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 800fe56:	2321      	movs	r3, #33	@ 0x21
 800fe58:	e07d      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d101      	bne.n	800fe64 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 800fe60:	2321      	movs	r3, #33	@ 0x21
 800fe62:	e078      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fe64:	4b3e      	ldr	r3, [pc, #248]	@ (800ff60 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 800fe66:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 800fe68:	69ba      	ldr	r2, [r7, #24]
 800fe6a:	2103      	movs	r1, #3
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f000 f8ed 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 800fe72:	4603      	mov	r3, r0
 800fe74:	82fb      	strh	r3, [r7, #22]
 800fe76:	8afb      	ldrh	r3, [r7, #22]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 800fe7c:	8afb      	ldrh	r3, [r7, #22]
 800fe7e:	e06a      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fe86:	2300      	movs	r3, #0
 800fe88:	2201      	movs	r2, #1
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	f007 fb1a 	bl	80174c4 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fe90:	69ba      	ldr	r2, [r7, #24]
 800fe92:	2101      	movs	r1, #1
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f000 f94f 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	82fb      	strh	r3, [r7, #22]
 800fe9e:	8afb      	ldrh	r3, [r7, #22]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d001      	beq.n	800fea8 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 800fea4:	8afb      	ldrh	r3, [r7, #22]
 800fea6:	e056      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f000 ff8e 	bl	8010dca <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 800feae:	4603      	mov	r3, r0
 800feb0:	82fb      	strh	r3, [r7, #22]
 800feb2:	8afb      	ldrh	r3, [r7, #22]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 800feb8:	8afb      	ldrh	r3, [r7, #22]
 800feba:	e04c      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800febc:	f107 0310 	add.w	r3, r7, #16
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	2200      	movs	r2, #0
 800fec6:	2101      	movs	r1, #1
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f002 fd69 	bl	80129a0 <phhalHw_Pn5180_WaitIrq>
 800fece:	4603      	mov	r3, r0
 800fed0:	82fb      	strh	r3, [r7, #22]
 800fed2:	8afb      	ldrh	r3, [r7, #22]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 800fed8:	8afb      	ldrh	r3, [r7, #22]
 800feda:	e03c      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d025      	beq.n	800ff32 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 800fee6:	f107 0314 	add.w	r3, r7, #20
 800feea:	4619      	mov	r1, r3
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f000 feb6 	bl	8010c5e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 800fef2:	4603      	mov	r3, r0
 800fef4:	82fb      	strh	r3, [r7, #22]
 800fef6:	8afb      	ldrh	r3, [r7, #22]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d001      	beq.n	800ff00 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 800fefc:	8afb      	ldrh	r3, [r7, #22]
 800fefe:	e02a      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 800ff00:	8abb      	ldrh	r3, [r7, #20]
 800ff02:	461a      	mov	r2, r3
 800ff04:	68b9      	ldr	r1, [r7, #8]
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f000 feff 	bl	8010d0a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	82fb      	strh	r3, [r7, #22]
 800ff10:	8afb      	ldrh	r3, [r7, #22]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 800ff16:	8afb      	ldrh	r3, [r7, #22]
 800ff18:	e01d      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 800ff1a:	8aba      	ldrh	r2, [r7, #20]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 800ff20:	8abb      	ldrh	r3, [r7, #20]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d002      	beq.n	800ff2c <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 800ff26:	2300      	movs	r3, #0
 800ff28:	83fb      	strh	r3, [r7, #30]
 800ff2a:	e004      	b.n	800ff36 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 800ff2c:	237f      	movs	r3, #127	@ 0x7f
 800ff2e:	83fb      	strh	r3, [r7, #30]
 800ff30:	e001      	b.n	800ff36 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 800ff32:	2301      	movs	r3, #1
 800ff34:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800ff36:	8bfb      	ldrh	r3, [r7, #30]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d00b      	beq.n	800ff54 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 800ff3c:	8bfb      	ldrh	r3, [r7, #30]
 800ff3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d106      	bne.n	800ff54 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 800ff46:	8bfb      	ldrh	r3, [r7, #30]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	e000      	b.n	800ff56 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 800ff54:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3720      	adds	r7, #32
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	00020001 	.word	0x00020001

0800ff64 <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 800ff68:	2201      	movs	r2, #1
 800ff6a:	2120      	movs	r1, #32
 800ff6c:	4810      	ldr	r0, [pc, #64]	@ (800ffb0 <phhalHw_Pn5180_Reset+0x4c>)
 800ff6e:	f007 f883 	bl	8017078 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800ff72:	2200      	movs	r2, #0
 800ff74:	2102      	movs	r1, #2
 800ff76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ff7a:	f007 f88f 	bl	801709c <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 800ff7e:	2200      	movs	r2, #0
 800ff80:	2120      	movs	r1, #32
 800ff82:	480b      	ldr	r0, [pc, #44]	@ (800ffb0 <phhalHw_Pn5180_Reset+0x4c>)
 800ff84:	f007 f878 	bl	8017078 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2102      	movs	r1, #2
 800ff8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ff90:	f007 f884 	bl	801709c <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 800ff94:	2201      	movs	r2, #1
 800ff96:	2120      	movs	r1, #32
 800ff98:	4805      	ldr	r0, [pc, #20]	@ (800ffb0 <phhalHw_Pn5180_Reset+0x4c>)
 800ff9a:	f007 f86d 	bl	8017078 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	2102      	movs	r1, #2
 800ffa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ffa6:	f007 f879 	bl	801709c <phDriver_TimerStart>
#endif /*_WIN32*/
}
 800ffaa:	bf00      	nop
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	48000400 	.word	0x48000400

0800ffb4 <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	789b      	ldrb	r3, [r3, #2]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d107      	bne.n	800ffd8 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 800ffc8:	78fb      	ldrb	r3, [r7, #3]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ffd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ffd4:	f007 f850 	bl	8017078 <phDriver_PinWrite>
    }
}
 800ffd8:	bf00      	nop
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800fffc:	801a      	strh	r2, [r3, #0]
}
 800fffe:	bf00      	nop
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
	...

0801000c <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 801000c:	b480      	push	{r7}
 801000e:	b085      	sub	sp, #20
 8010010:	af00      	add	r7, sp, #0
 8010012:	4603      	mov	r3, r0
 8010014:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 8010016:	2300      	movs	r3, #0
 8010018:	73fb      	strb	r3, [r7, #15]
 801001a:	e00b      	b.n	8010034 <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 801001c:	7bfb      	ldrb	r3, [r7, #15]
 801001e:	4a0a      	ldr	r2, [pc, #40]	@ (8010048 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 8010020:	5cd3      	ldrb	r3, [r2, r3]
 8010022:	79fa      	ldrb	r2, [r7, #7]
 8010024:	429a      	cmp	r2, r3
 8010026:	d102      	bne.n	801002e <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 8010028:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801002c:	e006      	b.n	801003c <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	3301      	adds	r3, #1
 8010032:	73fb      	strb	r3, [r7, #15]
 8010034:	7bfb      	ldrb	r3, [r7, #15]
 8010036:	2b06      	cmp	r3, #6
 8010038:	d9f0      	bls.n	801001c <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 801003a:	2300      	movs	r3, #0

}
 801003c:	4618      	mov	r0, r3
 801003e:	3714      	adds	r7, #20
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr
 8010048:	0802074c 	.word	0x0802074c

0801004c <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b08a      	sub	sp, #40	@ 0x28
 8010050:	af02      	add	r7, sp, #8
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	460b      	mov	r3, r1
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d006      	beq.n	801006e <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010060:	7afb      	ldrb	r3, [r7, #11]
 8010062:	2b43      	cmp	r3, #67	@ 0x43
 8010064:	d906      	bls.n	8010074 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010066:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801006a:	2b00      	cmp	r3, #0
 801006c:	db02      	blt.n	8010074 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801006e:	f240 2321 	movw	r3, #545	@ 0x221
 8010072:	e05d      	b.n	8010130 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8010074:	7afb      	ldrb	r3, [r7, #11]
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff ffc8 	bl	801000c <phhalHw_Pn5180_Check_Reg_Readonly>
 801007c:	4603      	mov	r3, r0
 801007e:	83fb      	strh	r3, [r7, #30]
 8010080:	8bfb      	ldrh	r3, [r7, #30]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 8010086:	8bfb      	ldrh	r3, [r7, #30]
 8010088:	e052      	b.n	8010130 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 801008a:	2300      	movs	r3, #0
 801008c:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 801008e:	7f7b      	ldrb	r3, [r7, #29]
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	777a      	strb	r2, [r7, #29]
 8010094:	3320      	adds	r3, #32
 8010096:	443b      	add	r3, r7
 8010098:	2200      	movs	r2, #0
 801009a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801009e:	7f7b      	ldrb	r3, [r7, #29]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	777a      	strb	r2, [r7, #29]
 80100a4:	3320      	adds	r3, #32
 80100a6:	443b      	add	r3, r7
 80100a8:	7afa      	ldrb	r2, [r7, #11]
 80100aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 80100ae:	7f7b      	ldrb	r3, [r7, #29]
 80100b0:	1c5a      	adds	r2, r3, #1
 80100b2:	777a      	strb	r2, [r7, #29]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	b2d2      	uxtb	r2, r2
 80100b8:	3320      	adds	r3, #32
 80100ba:	443b      	add	r3, r7
 80100bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	0a1a      	lsrs	r2, r3, #8
 80100c4:	7f7b      	ldrb	r3, [r7, #29]
 80100c6:	1c59      	adds	r1, r3, #1
 80100c8:	7779      	strb	r1, [r7, #29]
 80100ca:	b2d2      	uxtb	r2, r2
 80100cc:	3320      	adds	r3, #32
 80100ce:	443b      	add	r3, r7
 80100d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	0c1a      	lsrs	r2, r3, #16
 80100d8:	7f7b      	ldrb	r3, [r7, #29]
 80100da:	1c59      	adds	r1, r3, #1
 80100dc:	7779      	strb	r1, [r7, #29]
 80100de:	b2d2      	uxtb	r2, r2
 80100e0:	3320      	adds	r3, #32
 80100e2:	443b      	add	r3, r7
 80100e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	0e1a      	lsrs	r2, r3, #24
 80100ec:	7f7b      	ldrb	r3, [r7, #29]
 80100ee:	1c59      	adds	r1, r3, #1
 80100f0:	7779      	strb	r1, [r7, #29]
 80100f2:	b2d2      	uxtb	r2, r2
 80100f4:	3320      	adds	r3, #32
 80100f6:	443b      	add	r3, r7
 80100f8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 80100fc:	2300      	movs	r3, #0
 80100fe:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010100:	7f7b      	ldrb	r3, [r7, #29]
 8010102:	b29a      	uxth	r2, r3
 8010104:	7f3b      	ldrb	r3, [r7, #28]
 8010106:	b298      	uxth	r0, r3
 8010108:	f107 0114 	add.w	r1, r7, #20
 801010c:	f107 031a 	add.w	r3, r7, #26
 8010110:	9301      	str	r3, [sp, #4]
 8010112:	f107 0310 	add.w	r3, r7, #16
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	4603      	mov	r3, r0
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f7ff f8dc 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010120:	4603      	mov	r3, r0
 8010122:	83fb      	strh	r3, [r7, #30]
 8010124:	8bfb      	ldrh	r3, [r7, #30]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 801012a:	8bfb      	ldrh	r3, [r7, #30]
 801012c:	e000      	b.n	8010130 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3720      	adds	r7, #32
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b08a      	sub	sp, #40	@ 0x28
 801013c:	af02      	add	r7, sp, #8
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	460b      	mov	r3, r1
 8010142:	607a      	str	r2, [r7, #4]
 8010144:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d006      	beq.n	801015a <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 801014c:	7afb      	ldrb	r3, [r7, #11]
 801014e:	2b43      	cmp	r3, #67	@ 0x43
 8010150:	d906      	bls.n	8010160 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010152:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010156:	2b00      	cmp	r3, #0
 8010158:	db02      	blt.n	8010160 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801015a:	f240 2321 	movw	r3, #545	@ 0x221
 801015e:	e05d      	b.n	801021c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8010160:	7afb      	ldrb	r3, [r7, #11]
 8010162:	4618      	mov	r0, r3
 8010164:	f7ff ff52 	bl	801000c <phhalHw_Pn5180_Check_Reg_Readonly>
 8010168:	4603      	mov	r3, r0
 801016a:	83fb      	strh	r3, [r7, #30]
 801016c:	8bfb      	ldrh	r3, [r7, #30]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 8010172:	8bfb      	ldrh	r3, [r7, #30]
 8010174:	e052      	b.n	801021c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 8010176:	2300      	movs	r3, #0
 8010178:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 801017a:	7f7b      	ldrb	r3, [r7, #29]
 801017c:	1c5a      	adds	r2, r3, #1
 801017e:	777a      	strb	r2, [r7, #29]
 8010180:	3320      	adds	r3, #32
 8010182:	443b      	add	r3, r7
 8010184:	2201      	movs	r2, #1
 8010186:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801018a:	7f7b      	ldrb	r3, [r7, #29]
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	777a      	strb	r2, [r7, #29]
 8010190:	3320      	adds	r3, #32
 8010192:	443b      	add	r3, r7
 8010194:	7afa      	ldrb	r2, [r7, #11]
 8010196:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 801019a:	7f7b      	ldrb	r3, [r7, #29]
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	777a      	strb	r2, [r7, #29]
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	b2d2      	uxtb	r2, r2
 80101a4:	3320      	adds	r3, #32
 80101a6:	443b      	add	r3, r7
 80101a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	0a1a      	lsrs	r2, r3, #8
 80101b0:	7f7b      	ldrb	r3, [r7, #29]
 80101b2:	1c59      	adds	r1, r3, #1
 80101b4:	7779      	strb	r1, [r7, #29]
 80101b6:	b2d2      	uxtb	r2, r2
 80101b8:	3320      	adds	r3, #32
 80101ba:	443b      	add	r3, r7
 80101bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	0c1a      	lsrs	r2, r3, #16
 80101c4:	7f7b      	ldrb	r3, [r7, #29]
 80101c6:	1c59      	adds	r1, r3, #1
 80101c8:	7779      	strb	r1, [r7, #29]
 80101ca:	b2d2      	uxtb	r2, r2
 80101cc:	3320      	adds	r3, #32
 80101ce:	443b      	add	r3, r7
 80101d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	0e1a      	lsrs	r2, r3, #24
 80101d8:	7f7b      	ldrb	r3, [r7, #29]
 80101da:	1c59      	adds	r1, r3, #1
 80101dc:	7779      	strb	r1, [r7, #29]
 80101de:	b2d2      	uxtb	r2, r2
 80101e0:	3320      	adds	r3, #32
 80101e2:	443b      	add	r3, r7
 80101e4:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 80101e8:	2300      	movs	r3, #0
 80101ea:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80101ec:	7f7b      	ldrb	r3, [r7, #29]
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	7f3b      	ldrb	r3, [r7, #28]
 80101f2:	b298      	uxth	r0, r3
 80101f4:	f107 0114 	add.w	r1, r7, #20
 80101f8:	f107 031a 	add.w	r3, r7, #26
 80101fc:	9301      	str	r3, [sp, #4]
 80101fe:	f107 0310 	add.w	r3, r7, #16
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	4603      	mov	r3, r0
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f7ff f866 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 801020c:	4603      	mov	r3, r0
 801020e:	83fb      	strh	r3, [r7, #30]
 8010210:	8bfb      	ldrh	r3, [r7, #30]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 8010216:	8bfb      	ldrh	r3, [r7, #30]
 8010218:	e000      	b.n	801021c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3720      	adds	r7, #32
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b08a      	sub	sp, #40	@ 0x28
 8010228:	af02      	add	r7, sp, #8
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	460b      	mov	r3, r1
 801022e:	607a      	str	r2, [r7, #4]
 8010230:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d006      	beq.n	8010246 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010238:	7afb      	ldrb	r3, [r7, #11]
 801023a:	2b43      	cmp	r3, #67	@ 0x43
 801023c:	d906      	bls.n	801024c <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801023e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010242:	2b00      	cmp	r3, #0
 8010244:	db02      	blt.n	801024c <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010246:	f240 2321 	movw	r3, #545	@ 0x221
 801024a:	e05d      	b.n	8010308 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 801024c:	7afb      	ldrb	r3, [r7, #11]
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff fedc 	bl	801000c <phhalHw_Pn5180_Check_Reg_Readonly>
 8010254:	4603      	mov	r3, r0
 8010256:	83fb      	strh	r3, [r7, #30]
 8010258:	8bfb      	ldrh	r3, [r7, #30]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d001      	beq.n	8010262 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 801025e:	8bfb      	ldrh	r3, [r7, #30]
 8010260:	e052      	b.n	8010308 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 8010262:	2300      	movs	r3, #0
 8010264:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 8010266:	7f7b      	ldrb	r3, [r7, #29]
 8010268:	1c5a      	adds	r2, r3, #1
 801026a:	777a      	strb	r2, [r7, #29]
 801026c:	3320      	adds	r3, #32
 801026e:	443b      	add	r3, r7
 8010270:	2202      	movs	r2, #2
 8010272:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8010276:	7f7b      	ldrb	r3, [r7, #29]
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	777a      	strb	r2, [r7, #29]
 801027c:	3320      	adds	r3, #32
 801027e:	443b      	add	r3, r7
 8010280:	7afa      	ldrb	r2, [r7, #11]
 8010282:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 8010286:	7f7b      	ldrb	r3, [r7, #29]
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	777a      	strb	r2, [r7, #29]
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	b2d2      	uxtb	r2, r2
 8010290:	3320      	adds	r3, #32
 8010292:	443b      	add	r3, r7
 8010294:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	0a1a      	lsrs	r2, r3, #8
 801029c:	7f7b      	ldrb	r3, [r7, #29]
 801029e:	1c59      	adds	r1, r3, #1
 80102a0:	7779      	strb	r1, [r7, #29]
 80102a2:	b2d2      	uxtb	r2, r2
 80102a4:	3320      	adds	r3, #32
 80102a6:	443b      	add	r3, r7
 80102a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	0c1a      	lsrs	r2, r3, #16
 80102b0:	7f7b      	ldrb	r3, [r7, #29]
 80102b2:	1c59      	adds	r1, r3, #1
 80102b4:	7779      	strb	r1, [r7, #29]
 80102b6:	b2d2      	uxtb	r2, r2
 80102b8:	3320      	adds	r3, #32
 80102ba:	443b      	add	r3, r7
 80102bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	0e1a      	lsrs	r2, r3, #24
 80102c4:	7f7b      	ldrb	r3, [r7, #29]
 80102c6:	1c59      	adds	r1, r3, #1
 80102c8:	7779      	strb	r1, [r7, #29]
 80102ca:	b2d2      	uxtb	r2, r2
 80102cc:	3320      	adds	r3, #32
 80102ce:	443b      	add	r3, r7
 80102d0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 80102d4:	2300      	movs	r3, #0
 80102d6:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80102d8:	7f7b      	ldrb	r3, [r7, #29]
 80102da:	b29a      	uxth	r2, r3
 80102dc:	7f3b      	ldrb	r3, [r7, #28]
 80102de:	b298      	uxth	r0, r3
 80102e0:	f107 0114 	add.w	r1, r7, #20
 80102e4:	f107 031a 	add.w	r3, r7, #26
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	f107 0310 	add.w	r3, r7, #16
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	4603      	mov	r3, r0
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f7fe fff0 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 80102f8:	4603      	mov	r3, r0
 80102fa:	83fb      	strh	r3, [r7, #30]
 80102fc:	8bfb      	ldrh	r3, [r7, #30]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 8010302:	8bfb      	ldrh	r3, [r7, #30]
 8010304:	e000      	b.n	8010308 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	3720      	adds	r7, #32
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b08c      	sub	sp, #48	@ 0x30
 8010314:	af02      	add	r7, sp, #8
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	4613      	mov	r3, r2
 801031c:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d016      	beq.n	801035a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d013      	beq.n	801035a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 8010332:	88fb      	ldrh	r3, [r7, #6]
 8010334:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8010338:	d80f      	bhi.n	801035a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 801033a:	88fb      	ldrh	r3, [r7, #6]
 801033c:	2b05      	cmp	r3, #5
 801033e:	d90c      	bls.n	801035a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 8010340:	88fa      	ldrh	r2, [r7, #6]
 8010342:	4b4b      	ldr	r3, [pc, #300]	@ (8010470 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 8010344:	fba3 1302 	umull	r1, r3, r3, r2
 8010348:	0899      	lsrs	r1, r3, #2
 801034a:	460b      	mov	r3, r1
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	440b      	add	r3, r1
 8010350:	005b      	lsls	r3, r3, #1
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	b29b      	uxth	r3, r3
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801035a:	f240 2321 	movw	r3, #545	@ 0x221
 801035e:	e082      	b.n	8010466 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 8010360:	2300      	movs	r3, #0
 8010362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010366:	e038      	b.n	80103da <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 8010368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	4413      	add	r3, r2
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff fe4a 	bl	801000c <phhalHw_Pn5180_Check_Reg_Readonly>
 8010378:	4603      	mov	r3, r0
 801037a:	843b      	strh	r3, [r7, #32]
 801037c:	8c3b      	ldrh	r3, [r7, #32]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 8010382:	8c3b      	ldrh	r3, [r7, #32]
 8010384:	e06f      	b.n	8010466 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	4413      	add	r3, r2
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b43      	cmp	r3, #67	@ 0x43
 8010392:	d90a      	bls.n	80103aa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	4413      	add	r3, r2
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	b25b      	sxtb	r3, r3
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	db02      	blt.n	80103aa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80103a4:	f240 2321 	movw	r3, #545	@ 0x221
 80103a8:	e05d      	b.n	8010466 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 80103aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103ae:	3301      	adds	r3, #1
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	4413      	add	r3, r2
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d007      	beq.n	80103ca <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 80103ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103be:	3301      	adds	r3, #1
 80103c0:	68ba      	ldr	r2, [r7, #8]
 80103c2:	4413      	add	r3, r2
 80103c4:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 80103c6:	2b03      	cmp	r3, #3
 80103c8:	d902      	bls.n	80103d0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80103ca:	f240 2321 	movw	r3, #545	@ 0x221
 80103ce:	e04a      	b.n	8010466 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80103d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103d4:	3306      	adds	r3, #6
 80103d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103de:	b29b      	uxth	r3, r3
 80103e0:	88fa      	ldrh	r2, [r7, #6]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d8c0      	bhi.n	8010368 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80103e6:	f107 0216 	add.w	r2, r7, #22
 80103ea:	f107 0318 	add.w	r3, r7, #24
 80103ee:	4619      	mov	r1, r3
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7ff fdf5 	bl	800ffe0 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 80103f6:	8afb      	ldrh	r3, [r7, #22]
 80103f8:	461a      	mov	r2, r3
 80103fa:	88fb      	ldrh	r3, [r7, #6]
 80103fc:	3301      	adds	r3, #1
 80103fe:	429a      	cmp	r2, r3
 8010400:	d202      	bcs.n	8010408 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010402:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010406:	e02e      	b.n	8010466 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010408:	2300      	movs	r3, #0
 801040a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 801040c:	69ba      	ldr	r2, [r7, #24]
 801040e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010410:	1c59      	adds	r1, r3, #1
 8010412:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010414:	4413      	add	r3, r2
 8010416:	2203      	movs	r2, #3
 8010418:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801041e:	4413      	add	r3, r2
 8010420:	88fa      	ldrh	r2, [r7, #6]
 8010422:	68b9      	ldr	r1, [r7, #8]
 8010424:	4618      	mov	r0, r3
 8010426:	f00d f8f2 	bl	801d60e <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 801042a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801042c:	88fb      	ldrh	r3, [r7, #6]
 801042e:	4413      	add	r3, r2
 8010430:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 8010432:	2300      	movs	r3, #0
 8010434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010438:	69b9      	ldr	r1, [r7, #24]
 801043a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801043e:	b298      	uxth	r0, r3
 8010440:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010442:	f107 031e 	add.w	r3, r7, #30
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	f107 0314 	add.w	r3, r7, #20
 801044c:	9300      	str	r3, [sp, #0]
 801044e:	4603      	mov	r3, r0
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	f7fe ff41 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010456:	4603      	mov	r3, r0
 8010458:	843b      	strh	r3, [r7, #32]
 801045a:	8c3b      	ldrh	r3, [r7, #32]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d001      	beq.n	8010464 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 8010460:	8c3b      	ldrh	r3, [r7, #32]
 8010462:	e000      	b.n	8010466 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	3728      	adds	r7, #40	@ 0x28
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	aaaaaaab 	.word	0xaaaaaaab

08010474 <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b08c      	sub	sp, #48	@ 0x30
 8010478:	af02      	add	r7, sp, #8
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	460b      	mov	r3, r1
 801047e:	607a      	str	r2, [r7, #4]
 8010480:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010482:	2300      	movs	r3, #0
 8010484:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d009      	beq.n	80104a0 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d006      	beq.n	80104a0 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010492:	7afb      	ldrb	r3, [r7, #11]
 8010494:	2b43      	cmp	r3, #67	@ 0x43
 8010496:	d906      	bls.n	80104a6 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010498:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801049c:	2b00      	cmp	r3, #0
 801049e:	db02      	blt.n	80104a6 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80104a0:	f240 2321 	movw	r3, #545	@ 0x221
 80104a4:	e050      	b.n	8010548 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80104a6:	2300      	movs	r3, #0
 80104a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 80104ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80104b6:	3328      	adds	r3, #40	@ 0x28
 80104b8:	443b      	add	r3, r7
 80104ba:	2204      	movs	r2, #4
 80104bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80104c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104c4:	1c5a      	adds	r2, r3, #1
 80104c6:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80104ca:	3328      	adds	r3, #40	@ 0x28
 80104cc:	443b      	add	r3, r7
 80104ce:	7afa      	ldrb	r2, [r7, #11]
 80104d0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 80104d4:	2304      	movs	r3, #4
 80104d6:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80104d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104dc:	b29a      	uxth	r2, r3
 80104de:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80104e0:	f107 011c 	add.w	r1, r7, #28
 80104e4:	f107 0320 	add.w	r3, r7, #32
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	f107 0314 	add.w	r3, r7, #20
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	4603      	mov	r3, r0
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f7fe fef0 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 80104f8:	4603      	mov	r3, r0
 80104fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80104fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d001      	beq.n	8010506 <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 8010502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010504:	e020      	b.n	8010548 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 8010506:	8c3b      	ldrh	r3, [r7, #32]
 8010508:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801050a:	429a      	cmp	r2, r3
 801050c:	d002      	beq.n	8010514 <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801050e:	f240 237f 	movw	r3, #639	@ 0x27f
 8010512:	e019      	b.n	8010548 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 8010514:	7d3b      	ldrb	r3, [r7, #20]
 8010516:	461a      	mov	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	7d7b      	ldrb	r3, [r7, #21]
 8010522:	021b      	lsls	r3, r3, #8
 8010524:	431a      	orrs	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	7dbb      	ldrb	r3, [r7, #22]
 8010530:	041b      	lsls	r3, r3, #16
 8010532:	431a      	orrs	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	7dfb      	ldrb	r3, [r7, #23]
 801053e:	061b      	lsls	r3, r3, #24
 8010540:	431a      	orrs	r2, r3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3728      	adds	r7, #40	@ 0x28
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 8010550:	b590      	push	{r4, r7, lr}
 8010552:	b091      	sub	sp, #68	@ 0x44
 8010554:	af02      	add	r7, sp, #8
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	603b      	str	r3, [r7, #0]
 801055c:	4613      	mov	r3, r2
 801055e:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010560:	2300      	movs	r3, #0
 8010562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010564:	2300      	movs	r3, #0
 8010566:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00b      	beq.n	8010586 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d008      	beq.n	8010586 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 8010580:	79fb      	ldrb	r3, [r7, #7]
 8010582:	2b12      	cmp	r3, #18
 8010584:	d902      	bls.n	801058c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010586:	f240 2321 	movw	r3, #545	@ 0x221
 801058a:	e077      	b.n	801067c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 801058c:	2300      	movs	r3, #0
 801058e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010592:	e016      	b.n	80105c2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010594:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	4413      	add	r3, r2
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	2b43      	cmp	r3, #67	@ 0x43
 80105a0:	d90a      	bls.n	80105b8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80105a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	4413      	add	r3, r2
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	b25b      	sxtb	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	db02      	blt.n	80105b8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80105b2:	f240 2321 	movw	r3, #545	@ 0x221
 80105b6:	e061      	b.n	801067c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 80105b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105bc:	3301      	adds	r3, #1
 80105be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80105c2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80105c6:	79fb      	ldrb	r3, [r7, #7]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d3e3      	bcc.n	8010594 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80105cc:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 80105d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80105d4:	4619      	mov	r1, r3
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f7ff fd02 	bl	800ffe0 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 80105dc:	79fb      	ldrb	r3, [r7, #7]
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 80105e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d902      	bls.n	80105f6 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80105f0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80105f4:	e042      	b.n	801067c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 80105f6:	2300      	movs	r3, #0
 80105f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 80105fc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010600:	1c5a      	adds	r2, r3, #1
 8010602:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8010606:	3338      	adds	r3, #56	@ 0x38
 8010608:	443b      	add	r3, r7
 801060a:	2205      	movs	r2, #5
 801060c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 8010610:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010614:	f107 0214 	add.w	r2, r7, #20
 8010618:	4413      	add	r3, r2
 801061a:	79fa      	ldrb	r2, [r7, #7]
 801061c:	68b9      	ldr	r1, [r7, #8]
 801061e:	4618      	mov	r0, r3
 8010620:	f00c fff5 	bl	801d60e <memcpy>
    wBufferLength+= bNumOfRegisters;
 8010624:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010628:	79fb      	ldrb	r3, [r7, #7]
 801062a:	4413      	add	r3, r2
 801062c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010630:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010634:	b298      	uxth	r0, r3
 8010636:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801063a:	b29c      	uxth	r4, r3
 801063c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063e:	f107 0114 	add.w	r1, r7, #20
 8010642:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010646:	9201      	str	r2, [sp, #4]
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	4623      	mov	r3, r4
 801064c:	4602      	mov	r2, r0
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f7fe fe42 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010654:	4603      	mov	r3, r0
 8010656:	867b      	strh	r3, [r7, #50]	@ 0x32
 8010658:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 801065e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010660:	e00c      	b.n	801067c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 8010662:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010666:	b29a      	uxth	r2, r3
 8010668:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801066a:	429a      	cmp	r2, r3
 801066c:	d002      	beq.n	8010674 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801066e:	f240 237f 	movw	r3, #639	@ 0x27f
 8010672:	e003      	b.n	801067c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 8010674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	373c      	adds	r7, #60	@ 0x3c
 8010680:	46bd      	mov	sp, r7
 8010682:	bd90      	pop	{r4, r7, pc}

08010684 <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b08a      	sub	sp, #40	@ 0x28
 8010688:	af02      	add	r7, sp, #8
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	607a      	str	r2, [r7, #4]
 801068e:	461a      	mov	r2, r3
 8010690:	460b      	mov	r3, r1
 8010692:	72fb      	strb	r3, [r7, #11]
 8010694:	4613      	mov	r3, r2
 8010696:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010698:	2300      	movs	r3, #0
 801069a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801069c:	2300      	movs	r3, #0
 801069e:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00b      	beq.n	80106be <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d008      	beq.n	80106be <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 80106ac:	7afb      	ldrb	r3, [r7, #11]
 80106ae:	2bfd      	cmp	r3, #253	@ 0xfd
 80106b0:	d805      	bhi.n	80106be <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 80106b2:	7afb      	ldrb	r3, [r7, #11]
 80106b4:	2b15      	cmp	r3, #21
 80106b6:	d902      	bls.n	80106be <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 80106b8:	7abb      	ldrb	r3, [r7, #10]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d102      	bne.n	80106c4 <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80106be:	f240 2321 	movw	r3, #545	@ 0x221
 80106c2:	e053      	b.n	801076c <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 80106c4:	7afb      	ldrb	r3, [r7, #11]
 80106c6:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80106ca:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80106ce:	33fe      	adds	r3, #254	@ 0xfe
 80106d0:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 80106d2:	7ffa      	ldrb	r2, [r7, #31]
 80106d4:	7abb      	ldrb	r3, [r7, #10]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d202      	bcs.n	80106e0 <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80106da:	f240 2322 	movw	r3, #546	@ 0x222
 80106de:	e045      	b.n	801076c <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80106e0:	f107 0212 	add.w	r2, r7, #18
 80106e4:	f107 0314 	add.w	r3, r7, #20
 80106e8:	4619      	mov	r1, r3
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f7ff fc78 	bl	800ffe0 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 80106f0:	8a7b      	ldrh	r3, [r7, #18]
 80106f2:	461a      	mov	r2, r3
 80106f4:	7abb      	ldrb	r3, [r7, #10]
 80106f6:	3303      	adds	r3, #3
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d202      	bcs.n	8010702 <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80106fc:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010700:	e034      	b.n	801076c <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010702:	2300      	movs	r3, #0
 8010704:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	7fbb      	ldrb	r3, [r7, #30]
 801070a:	1c59      	adds	r1, r3, #1
 801070c:	77b9      	strb	r1, [r7, #30]
 801070e:	4413      	add	r3, r2
 8010710:	2206      	movs	r2, #6
 8010712:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	7fbb      	ldrb	r3, [r7, #30]
 8010718:	1c59      	adds	r1, r3, #1
 801071a:	77b9      	strb	r1, [r7, #30]
 801071c:	4413      	add	r3, r2
 801071e:	7afa      	ldrb	r2, [r7, #11]
 8010720:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	7fbb      	ldrb	r3, [r7, #30]
 8010726:	4413      	add	r3, r2
 8010728:	7aba      	ldrb	r2, [r7, #10]
 801072a:	6879      	ldr	r1, [r7, #4]
 801072c:	4618      	mov	r0, r3
 801072e:	f00c ff6e 	bl	801d60e <memcpy>
    wBufferLength += bDataLength;
 8010732:	7fba      	ldrb	r2, [r7, #30]
 8010734:	7abb      	ldrb	r3, [r7, #10]
 8010736:	4413      	add	r3, r2
 8010738:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 801073a:	2300      	movs	r3, #0
 801073c:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801073e:	6979      	ldr	r1, [r7, #20]
 8010740:	7fbb      	ldrb	r3, [r7, #30]
 8010742:	b29a      	uxth	r2, r3
 8010744:	7f7b      	ldrb	r3, [r7, #29]
 8010746:	b298      	uxth	r0, r3
 8010748:	f107 0318 	add.w	r3, r7, #24
 801074c:	9301      	str	r3, [sp, #4]
 801074e:	f107 0310 	add.w	r3, r7, #16
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	4603      	mov	r3, r0
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7fe fdbe 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 801075c:	4603      	mov	r3, r0
 801075e:	837b      	strh	r3, [r7, #26]
 8010760:	8b7b      	ldrh	r3, [r7, #26]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 8010766:	8b7b      	ldrh	r3, [r7, #26]
 8010768:	e000      	b.n	801076c <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3720      	adds	r7, #32
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b08a      	sub	sp, #40	@ 0x28
 8010778:	af02      	add	r7, sp, #8
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	607a      	str	r2, [r7, #4]
 801077e:	461a      	mov	r2, r3
 8010780:	460b      	mov	r3, r1
 8010782:	72fb      	strb	r3, [r7, #11]
 8010784:	4613      	mov	r3, r2
 8010786:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 8010788:	2300      	movs	r3, #0
 801078a:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d008      	beq.n	80107a4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d005      	beq.n	80107a4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8010798:	7afb      	ldrb	r3, [r7, #11]
 801079a:	2bfd      	cmp	r3, #253	@ 0xfd
 801079c:	d802      	bhi.n	80107a4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 801079e:	7abb      	ldrb	r3, [r7, #10]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d11f      	bne.n	80107e4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 80107aa:	4934      	ldr	r1, [pc, #208]	@ (801087c <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 80107ac:	e000      	b.n	80107b0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 80107ae:	4934      	ldr	r1, [pc, #208]	@ (8010880 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d101      	bne.n	80107ba <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 80107b6:	4a33      	ldr	r2, [pc, #204]	@ (8010884 <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 80107b8:	e000      	b.n	80107bc <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 80107ba:	4a31      	ldr	r2, [pc, #196]	@ (8010880 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 80107bc:	7afb      	ldrb	r3, [r7, #11]
 80107be:	2bfd      	cmp	r3, #253	@ 0xfd
 80107c0:	d901      	bls.n	80107c6 <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 80107c2:	4831      	ldr	r0, [pc, #196]	@ (8010888 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 80107c4:	e000      	b.n	80107c8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 80107c6:	482e      	ldr	r0, [pc, #184]	@ (8010880 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 80107c8:	7abb      	ldrb	r3, [r7, #10]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 80107ce:	4b2f      	ldr	r3, [pc, #188]	@ (801088c <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 80107d0:	e000      	b.n	80107d4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 80107d2:	4b2b      	ldr	r3, [pc, #172]	@ (8010880 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	4603      	mov	r3, r0
 80107d8:	482d      	ldr	r0, [pc, #180]	@ (8010890 <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 80107da:	f00c fd39 	bl	801d250 <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80107de:	f240 2321 	movw	r3, #545	@ 0x221
 80107e2:	e046      	b.n	8010872 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 80107e4:	7afb      	ldrb	r3, [r7, #11]
 80107e6:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80107ea:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80107ee:	33fe      	adds	r3, #254	@ 0xfe
 80107f0:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 80107f2:	7ffa      	ldrb	r2, [r7, #31]
 80107f4:	7abb      	ldrb	r3, [r7, #10]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d202      	bcs.n	8010800 <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80107fa:	f240 2322 	movw	r3, #546	@ 0x222
 80107fe:	e038      	b.n	8010872 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010800:	2300      	movs	r3, #0
 8010802:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 8010804:	7fbb      	ldrb	r3, [r7, #30]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	77ba      	strb	r2, [r7, #30]
 801080a:	3320      	adds	r3, #32
 801080c:	443b      	add	r3, r7
 801080e:	2207      	movs	r2, #7
 8010810:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 8010814:	7fbb      	ldrb	r3, [r7, #30]
 8010816:	1c5a      	adds	r2, r3, #1
 8010818:	77ba      	strb	r2, [r7, #30]
 801081a:	3320      	adds	r3, #32
 801081c:	443b      	add	r3, r7
 801081e:	7afa      	ldrb	r2, [r7, #11]
 8010820:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 8010824:	7fbb      	ldrb	r3, [r7, #30]
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	77ba      	strb	r2, [r7, #30]
 801082a:	3320      	adds	r3, #32
 801082c:	443b      	add	r3, r7
 801082e:	7aba      	ldrb	r2, [r7, #10]
 8010830:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010834:	7fbb      	ldrb	r3, [r7, #30]
 8010836:	b29a      	uxth	r2, r3
 8010838:	7abb      	ldrb	r3, [r7, #10]
 801083a:	b298      	uxth	r0, r3
 801083c:	f107 0114 	add.w	r1, r7, #20
 8010840:	f107 031a 	add.w	r3, r7, #26
 8010844:	9301      	str	r3, [sp, #4]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	4603      	mov	r3, r0
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f7fe fd43 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010852:	4603      	mov	r3, r0
 8010854:	83bb      	strh	r3, [r7, #28]
 8010856:	8bbb      	ldrh	r3, [r7, #28]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d001      	beq.n	8010860 <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 801085c:	8bbb      	ldrh	r3, [r7, #28]
 801085e:	e008      	b.n	8010872 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 8010860:	7abb      	ldrb	r3, [r7, #10]
 8010862:	b29a      	uxth	r2, r3
 8010864:	8b7b      	ldrh	r3, [r7, #26]
 8010866:	429a      	cmp	r2, r3
 8010868:	d002      	beq.n	8010870 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801086a:	f240 237f 	movw	r3, #639	@ 0x27f
 801086e:	e000      	b.n	8010872 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 8010870:	2300      	movs	r3, #0
}
 8010872:	4618      	mov	r0, r3
 8010874:	3720      	adds	r7, #32
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	0801fbc4 	.word	0x0801fbc4
 8010880:	0801fbd8 	.word	0x0801fbd8
 8010884:	0801fbdc 	.word	0x0801fbdc
 8010888:	0801fbec 	.word	0x0801fbec
 801088c:	0801fbfc 	.word	0x0801fbfc
 8010890:	0801fc0c 	.word	0x0801fc0c

08010894 <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 8010894:	b590      	push	{r4, r7, lr}
 8010896:	b08b      	sub	sp, #44	@ 0x2c
 8010898:	af02      	add	r7, sp, #8
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	4613      	mov	r3, r2
 80108a0:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80108a2:	2300      	movs	r3, #0
 80108a4:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d102      	bne.n	80108bc <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80108b6:	f240 2321 	movw	r3, #545	@ 0x221
 80108ba:	e056      	b.n	801096a <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 80108bc:	88fb      	ldrh	r3, [r7, #6]
 80108be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108c2:	d802      	bhi.n	80108ca <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 80108c4:	88fb      	ldrh	r3, [r7, #6]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d102      	bne.n	80108d0 <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80108ca:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80108ce:	e04c      	b.n	801096a <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 80108d0:	f107 0116 	add.w	r1, r7, #22
 80108d4:	f107 0218 	add.w	r2, r7, #24
 80108d8:	f107 0314 	add.w	r3, r7, #20
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	460b      	mov	r3, r1
 80108e0:	2101      	movs	r1, #1
 80108e2:	68f8      	ldr	r0, [r7, #12]
 80108e4:	f000 fbbf 	bl	8011066 <phhalHw_Pn5180_GetRxBuffer>
 80108e8:	4603      	mov	r3, r0
 80108ea:	83fb      	strh	r3, [r7, #30]
 80108ec:	8bfb      	ldrh	r3, [r7, #30]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d001      	beq.n	80108f6 <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 80108f2:	8bfb      	ldrh	r3, [r7, #30]
 80108f4:	e039      	b.n	801096a <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 80108f6:	8abb      	ldrh	r3, [r7, #20]
 80108f8:	88fa      	ldrh	r2, [r7, #6]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d902      	bls.n	8010904 <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80108fe:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010902:	e032      	b.n	801096a <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010904:	2300      	movs	r3, #0
 8010906:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 8010908:	7f7b      	ldrb	r3, [r7, #29]
 801090a:	1c5a      	adds	r2, r3, #1
 801090c:	777a      	strb	r2, [r7, #29]
 801090e:	3320      	adds	r3, #32
 8010910:	443b      	add	r3, r7
 8010912:	220a      	movs	r2, #10
 8010914:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 8010918:	7f7b      	ldrb	r3, [r7, #29]
 801091a:	1c5a      	adds	r2, r3, #1
 801091c:	777a      	strb	r2, [r7, #29]
 801091e:	3320      	adds	r3, #32
 8010920:	443b      	add	r3, r7
 8010922:	2200      	movs	r2, #0
 8010924:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010928:	7f7b      	ldrb	r3, [r7, #29]
 801092a:	b298      	uxth	r0, r3
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	88fc      	ldrh	r4, [r7, #6]
 8010930:	f107 0110 	add.w	r1, r7, #16
 8010934:	f107 0212 	add.w	r2, r7, #18
 8010938:	9201      	str	r2, [sp, #4]
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	4623      	mov	r3, r4
 801093e:	4602      	mov	r2, r0
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f7fe fcc9 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010946:	4603      	mov	r3, r0
 8010948:	83fb      	strh	r3, [r7, #30]
 801094a:	8bfb      	ldrh	r3, [r7, #30]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d001      	beq.n	8010954 <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 8010950:	8bfb      	ldrh	r3, [r7, #30]
 8010952:	e00a      	b.n	801096a <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 8010954:	8a7b      	ldrh	r3, [r7, #18]
 8010956:	88fa      	ldrh	r2, [r7, #6]
 8010958:	429a      	cmp	r2, r3
 801095a:	d002      	beq.n	8010962 <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801095c:	f240 237f 	movw	r3, #639	@ 0x27f
 8010960:	e003      	b.n	801096a <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010968:	2300      	movs	r3, #0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3724      	adds	r7, #36	@ 0x24
 801096e:	46bd      	mov	sp, r7
 8010970:	bd90      	pop	{r4, r7, pc}

08010972 <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b088      	sub	sp, #32
 8010976:	af02      	add	r7, sp, #8
 8010978:	6078      	str	r0, [r7, #4]
 801097a:	460b      	mov	r3, r1
 801097c:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d007      	beq.n	8010998 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 8010988:	887b      	ldrh	r3, [r7, #2]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d004      	beq.n	8010998 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 801098e:	887b      	ldrh	r3, [r7, #2]
 8010990:	f640 2282 	movw	r2, #2690	@ 0xa82
 8010994:	4293      	cmp	r3, r2
 8010996:	d902      	bls.n	801099e <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010998:	f240 2321 	movw	r3, #545	@ 0x221
 801099c:	e03e      	b.n	8010a1c <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801099e:	2300      	movs	r3, #0
 80109a0:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	75fa      	strb	r2, [r7, #23]
 80109a8:	3318      	adds	r3, #24
 80109aa:	443b      	add	r3, r7
 80109ac:	220b      	movs	r2, #11
 80109ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 80109b2:	7dfb      	ldrb	r3, [r7, #23]
 80109b4:	1c5a      	adds	r2, r3, #1
 80109b6:	75fa      	strb	r2, [r7, #23]
 80109b8:	3318      	adds	r3, #24
 80109ba:	443b      	add	r3, r7
 80109bc:	2201      	movs	r2, #1
 80109be:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 80109c2:	7dfb      	ldrb	r3, [r7, #23]
 80109c4:	1c5a      	adds	r2, r3, #1
 80109c6:	75fa      	strb	r2, [r7, #23]
 80109c8:	887a      	ldrh	r2, [r7, #2]
 80109ca:	b2d2      	uxtb	r2, r2
 80109cc:	3318      	adds	r3, #24
 80109ce:	443b      	add	r3, r7
 80109d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 80109d4:	887b      	ldrh	r3, [r7, #2]
 80109d6:	0a1b      	lsrs	r3, r3, #8
 80109d8:	b29a      	uxth	r2, r3
 80109da:	7dfb      	ldrb	r3, [r7, #23]
 80109dc:	1c59      	adds	r1, r3, #1
 80109de:	75f9      	strb	r1, [r7, #23]
 80109e0:	b2d2      	uxtb	r2, r2
 80109e2:	3318      	adds	r3, #24
 80109e4:	443b      	add	r3, r7
 80109e6:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 80109ea:	2300      	movs	r3, #0
 80109ec:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80109ee:	7dfb      	ldrb	r3, [r7, #23]
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	8ab8      	ldrh	r0, [r7, #20]
 80109f4:	f107 010c 	add.w	r1, r7, #12
 80109f8:	f107 0310 	add.w	r3, r7, #16
 80109fc:	9301      	str	r3, [sp, #4]
 80109fe:	f107 0308 	add.w	r3, r7, #8
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	4603      	mov	r3, r0
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f7fe fc66 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	827b      	strh	r3, [r7, #18]
 8010a10:	8a7b      	ldrh	r3, [r7, #18]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 8010a16:	8a7b      	ldrh	r3, [r7, #18]
 8010a18:	e000      	b.n	8010a1c <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010a1a:	2300      	movs	r3, #0
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3718      	adds	r7, #24
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b088      	sub	sp, #32
 8010a28:	af02      	add	r7, sp, #8
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	70fb      	strb	r3, [r7, #3]
 8010a30:	4613      	mov	r3, r2
 8010a32:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010a34:	2300      	movs	r3, #0
 8010a36:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 8010a38:	78fb      	ldrb	r3, [r7, #3]
 8010a3a:	f003 030f 	and.w	r3, r3, #15
 8010a3e:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d005      	beq.n	8010a52 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 8010a46:	78fb      	ldrb	r3, [r7, #3]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d002      	beq.n	8010a52 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 8010a4c:	78bb      	ldrb	r3, [r7, #2]
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d902      	bls.n	8010a58 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a52:	f240 2321 	movw	r3, #545	@ 0x221
 8010a56:	e03a      	b.n	8010ace <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8010a5c:	7dfb      	ldrb	r3, [r7, #23]
 8010a5e:	1c5a      	adds	r2, r3, #1
 8010a60:	75fa      	strb	r2, [r7, #23]
 8010a62:	3318      	adds	r3, #24
 8010a64:	443b      	add	r3, r7
 8010a66:	220b      	movs	r2, #11
 8010a68:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 8010a6c:	7dfb      	ldrb	r3, [r7, #23]
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	75fa      	strb	r2, [r7, #23]
 8010a72:	3318      	adds	r3, #24
 8010a74:	443b      	add	r3, r7
 8010a76:	2202      	movs	r2, #2
 8010a78:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 8010a7c:	7dfb      	ldrb	r3, [r7, #23]
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	75fa      	strb	r2, [r7, #23]
 8010a82:	3318      	adds	r3, #24
 8010a84:	443b      	add	r3, r7
 8010a86:	78fa      	ldrb	r2, [r7, #3]
 8010a88:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 8010a8c:	7dfb      	ldrb	r3, [r7, #23]
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	75fa      	strb	r2, [r7, #23]
 8010a92:	3318      	adds	r3, #24
 8010a94:	443b      	add	r3, r7
 8010a96:	78ba      	ldrb	r2, [r7, #2]
 8010a98:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010aa0:	7dfb      	ldrb	r3, [r7, #23]
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	8ab8      	ldrh	r0, [r7, #20]
 8010aa6:	f107 010c 	add.w	r1, r7, #12
 8010aaa:	f107 0310 	add.w	r3, r7, #16
 8010aae:	9301      	str	r3, [sp, #4]
 8010ab0:	f107 0308 	add.w	r3, r7, #8
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7fe fc0d 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	827b      	strh	r3, [r7, #18]
 8010ac2:	8a7b      	ldrh	r3, [r7, #18]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d001      	beq.n	8010acc <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 8010ac8:	8a7b      	ldrh	r3, [r7, #18]
 8010aca:	e000      	b.n	8010ace <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3718      	adds	r7, #24
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b088      	sub	sp, #32
 8010ada:	af02      	add	r7, sp, #8
 8010adc:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8010ae6:	7dfb      	ldrb	r3, [r7, #23]
 8010ae8:	1c5a      	adds	r2, r3, #1
 8010aea:	75fa      	strb	r2, [r7, #23]
 8010aec:	3318      	adds	r3, #24
 8010aee:	443b      	add	r3, r7
 8010af0:	220b      	movs	r2, #11
 8010af2:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 8010af6:	7dfb      	ldrb	r3, [r7, #23]
 8010af8:	1c5a      	adds	r2, r3, #1
 8010afa:	75fa      	strb	r2, [r7, #23]
 8010afc:	3318      	adds	r3, #24
 8010afe:	443b      	add	r3, r7
 8010b00:	2203      	movs	r2, #3
 8010b02:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010b06:	2300      	movs	r3, #0
 8010b08:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010b0a:	7dfb      	ldrb	r3, [r7, #23]
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	8ab8      	ldrh	r0, [r7, #20]
 8010b10:	f107 0110 	add.w	r1, r7, #16
 8010b14:	f107 030a 	add.w	r3, r7, #10
 8010b18:	9301      	str	r3, [sp, #4]
 8010b1a:	f107 030c 	add.w	r3, r7, #12
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	4603      	mov	r3, r0
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7fe fbd8 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	827b      	strh	r3, [r7, #18]
 8010b2c:	8a7b      	ldrh	r3, [r7, #18]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d001      	beq.n	8010b36 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 8010b32:	8a7b      	ldrh	r3, [r7, #18]
 8010b34:	e000      	b.n	8010b38 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010b36:	2300      	movs	r3, #0
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3718      	adds	r7, #24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b08a      	sub	sp, #40	@ 0x28
 8010b44:	af02      	add	r7, sp, #8
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	460b      	mov	r3, r1
 8010b50:	71fb      	strb	r3, [r7, #7]
 8010b52:	4613      	mov	r3, r2
 8010b54:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d006      	beq.n	8010b72 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 8010b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d003      	beq.n	8010b72 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 8010b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d902      	bls.n	8010b78 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010b72:	f240 2321 	movw	r3, #545	@ 0x221
 8010b76:	e06e      	b.n	8010c56 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00b      	beq.n	8010b96 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d005      	beq.n	8010b90 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	2b27      	cmp	r3, #39	@ 0x27
 8010b88:	d802      	bhi.n	8010b90 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 8010b8a:	79bb      	ldrb	r3, [r7, #6]
 8010b8c:	2b07      	cmp	r3, #7
 8010b8e:	d902      	bls.n	8010b96 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010b90:	f240 2321 	movw	r3, #545	@ 0x221
 8010b94:	e05f      	b.n	8010c56 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010b96:	f107 0212 	add.w	r2, r7, #18
 8010b9a:	f107 0314 	add.w	r3, r7, #20
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	68f8      	ldr	r0, [r7, #12]
 8010ba2:	f7ff fa1d 	bl	800ffe0 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 8010ba6:	8a7b      	ldrh	r3, [r7, #18]
 8010ba8:	2b2d      	cmp	r3, #45	@ 0x2d
 8010baa:	d802      	bhi.n	8010bb2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010bac:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010bb0:	e051      	b.n	8010c56 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8010bb6:	697a      	ldr	r2, [r7, #20]
 8010bb8:	8bfb      	ldrh	r3, [r7, #30]
 8010bba:	1c59      	adds	r1, r3, #1
 8010bbc:	83f9      	strh	r1, [r7, #30]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	220d      	movs	r2, #13
 8010bc2:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8010bc4:	697a      	ldr	r2, [r7, #20]
 8010bc6:	8bfb      	ldrh	r3, [r7, #30]
 8010bc8:	1c59      	adds	r1, r3, #1
 8010bca:	83f9      	strh	r1, [r7, #30]
 8010bcc:	4413      	add	r3, r2
 8010bce:	79fa      	ldrb	r2, [r7, #7]
 8010bd0:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8010bd2:	79fb      	ldrb	r3, [r7, #7]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d013      	beq.n	8010c00 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8010bd8:	697a      	ldr	r2, [r7, #20]
 8010bda:	8bfb      	ldrh	r3, [r7, #30]
 8010bdc:	1c59      	adds	r1, r3, #1
 8010bde:	83f9      	strh	r1, [r7, #30]
 8010be0:	4413      	add	r3, r2
 8010be2:	79ba      	ldrb	r2, [r7, #6]
 8010be4:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 8010be6:	697a      	ldr	r2, [r7, #20]
 8010be8:	8bfb      	ldrh	r3, [r7, #30]
 8010bea:	4413      	add	r3, r2
 8010bec:	79fa      	ldrb	r2, [r7, #7]
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f00c fd0c 	bl	801d60e <memcpy>
        wBufferLength+= bSelectCommandLength;
 8010bf6:	79fb      	ldrb	r3, [r7, #7]
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	8bfb      	ldrh	r3, [r7, #30]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	8bfb      	ldrh	r3, [r7, #30]
 8010c04:	4413      	add	r3, r2
 8010c06:	2203      	movs	r2, #3
 8010c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f00c fcff 	bl	801d60e <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8010c10:	8bfb      	ldrh	r3, [r7, #30]
 8010c12:	3303      	adds	r3, #3
 8010c14:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 8010c16:	697a      	ldr	r2, [r7, #20]
 8010c18:	8bfb      	ldrh	r3, [r7, #30]
 8010c1a:	1c59      	adds	r1, r3, #1
 8010c1c:	83f9      	strh	r1, [r7, #30]
 8010c1e:	4413      	add	r3, r2
 8010c20:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010c24:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 8010c26:	2300      	movs	r3, #0
 8010c28:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010c2a:	6979      	ldr	r1, [r7, #20]
 8010c2c:	7f7b      	ldrb	r3, [r7, #29]
 8010c2e:	b298      	uxth	r0, r3
 8010c30:	8bfa      	ldrh	r2, [r7, #30]
 8010c32:	f107 0318 	add.w	r3, r7, #24
 8010c36:	9301      	str	r3, [sp, #4]
 8010c38:	f107 0310 	add.w	r3, r7, #16
 8010c3c:	9300      	str	r3, [sp, #0]
 8010c3e:	4603      	mov	r3, r0
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f7fe fb49 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010c46:	4603      	mov	r3, r0
 8010c48:	837b      	strh	r3, [r7, #26]
 8010c4a:	8b7b      	ldrh	r3, [r7, #26]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 8010c50:	8b7b      	ldrh	r3, [r7, #26]
 8010c52:	e000      	b.n	8010c56 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010c54:	2300      	movs	r3, #0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3720      	adds	r7, #32
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b088      	sub	sp, #32
 8010c62:	af02      	add	r7, sp, #8
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d002      	beq.n	8010c78 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010c78:	f240 2321 	movw	r3, #545	@ 0x221
 8010c7c:	e041      	b.n	8010d02 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 8010c82:	7dfb      	ldrb	r3, [r7, #23]
 8010c84:	1c5a      	adds	r2, r3, #1
 8010c86:	75fa      	strb	r2, [r7, #23]
 8010c88:	3318      	adds	r3, #24
 8010c8a:	443b      	add	r3, r7
 8010c8c:	220f      	movs	r2, #15
 8010c8e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010c92:	7dfb      	ldrb	r3, [r7, #23]
 8010c94:	1c5a      	adds	r2, r3, #1
 8010c96:	75fa      	strb	r2, [r7, #23]
 8010c98:	3318      	adds	r3, #24
 8010c9a:	443b      	add	r3, r7
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010ca6:	7dfb      	ldrb	r3, [r7, #23]
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	8ab8      	ldrh	r0, [r7, #20]
 8010cac:	f107 010c 	add.w	r1, r7, #12
 8010cb0:	f107 0310 	add.w	r3, r7, #16
 8010cb4:	9301      	str	r3, [sp, #4]
 8010cb6:	f107 0308 	add.w	r3, r7, #8
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7fe fb0a 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	827b      	strh	r3, [r7, #18]
 8010cc8:	8a7b      	ldrh	r3, [r7, #18]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d001      	beq.n	8010cd2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 8010cce:	8a7b      	ldrh	r3, [r7, #18]
 8010cd0:	e017      	b.n	8010d02 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 8010cd2:	8a3b      	ldrh	r3, [r7, #16]
 8010cd4:	8aba      	ldrh	r2, [r7, #20]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d002      	beq.n	8010ce0 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010cda:	f240 237f 	movw	r3, #639	@ 0x27f
 8010cde:	e010      	b.n	8010d02 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8010ce0:	7a3b      	ldrb	r3, [r7, #8]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	b21a      	sxth	r2, r3
 8010cee:	7a7b      	ldrb	r3, [r7, #9]
 8010cf0:	b21b      	sxth	r3, r3
 8010cf2:	021b      	lsls	r3, r3, #8
 8010cf4:	b21b      	sxth	r3, r3
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	b21b      	sxth	r3, r3
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010d00:	2300      	movs	r3, #0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3718      	adds	r7, #24
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 8010d0a:	b590      	push	{r4, r7, lr}
 8010d0c:	b08b      	sub	sp, #44	@ 0x2c
 8010d0e:	af02      	add	r7, sp, #8
 8010d10:	60f8      	str	r0, [r7, #12]
 8010d12:	60b9      	str	r1, [r7, #8]
 8010d14:	4613      	mov	r3, r2
 8010d16:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d002      	beq.n	8010d2c <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d102      	bne.n	8010d32 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010d2c:	f240 2321 	movw	r3, #545	@ 0x221
 8010d30:	e047      	b.n	8010dc2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 8010d32:	88fb      	ldrh	r3, [r7, #6]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d102      	bne.n	8010d3e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010d38:	f240 2321 	movw	r3, #545	@ 0x221
 8010d3c:	e041      	b.n	8010dc2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 8010d42:	7ffb      	ldrb	r3, [r7, #31]
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	77fa      	strb	r2, [r7, #31]
 8010d48:	3320      	adds	r3, #32
 8010d4a:	443b      	add	r3, r7
 8010d4c:	2210      	movs	r2, #16
 8010d4e:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010d52:	7ffb      	ldrb	r3, [r7, #31]
 8010d54:	1c5a      	adds	r2, r3, #1
 8010d56:	77fa      	strb	r2, [r7, #31]
 8010d58:	3320      	adds	r3, #32
 8010d5a:	443b      	add	r3, r7
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010d62:	f107 0216 	add.w	r2, r7, #22
 8010d66:	f107 0318 	add.w	r3, r7, #24
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f7ff f937 	bl	800ffe0 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 8010d72:	8afb      	ldrh	r3, [r7, #22]
 8010d74:	88fa      	ldrh	r2, [r7, #6]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d902      	bls.n	8010d80 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010d7a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010d7e:	e020      	b.n	8010dc2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010d80:	7ffb      	ldrb	r3, [r7, #31]
 8010d82:	b298      	uxth	r0, r3
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	88fc      	ldrh	r4, [r7, #6]
 8010d88:	f107 0110 	add.w	r1, r7, #16
 8010d8c:	f107 0214 	add.w	r2, r7, #20
 8010d90:	9201      	str	r2, [sp, #4]
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	4623      	mov	r3, r4
 8010d96:	4602      	mov	r2, r0
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7fe fa9d 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	83bb      	strh	r3, [r7, #28]
 8010da2:	8bbb      	ldrh	r3, [r7, #28]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d001      	beq.n	8010dac <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 8010da8:	8bbb      	ldrh	r3, [r7, #28]
 8010daa:	e00a      	b.n	8010dc2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 8010dac:	8abb      	ldrh	r3, [r7, #20]
 8010dae:	88fa      	ldrh	r2, [r7, #6]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d002      	beq.n	8010dba <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010db4:	f240 237f 	movw	r3, #639	@ 0x27f
 8010db8:	e003      	b.n	8010dc2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 8010dba:	69ba      	ldr	r2, [r7, #24]
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010dc0:	2300      	movs	r3, #0

}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3724      	adds	r7, #36	@ 0x24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd90      	pop	{r4, r7, pc}

08010dca <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b088      	sub	sp, #32
 8010dce:	af02      	add	r7, sp, #8
 8010dd0:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d102      	bne.n	8010de2 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010ddc:	f240 2321 	movw	r3, #545	@ 0x221
 8010de0:	e02a      	b.n	8010e38 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010de2:	2300      	movs	r3, #0
 8010de4:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 8010de6:	7dfb      	ldrb	r3, [r7, #23]
 8010de8:	1c5a      	adds	r2, r3, #1
 8010dea:	75fa      	strb	r2, [r7, #23]
 8010dec:	3318      	adds	r3, #24
 8010dee:	443b      	add	r3, r7
 8010df0:	220e      	movs	r2, #14
 8010df2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010df6:	7dfb      	ldrb	r3, [r7, #23]
 8010df8:	1c5a      	adds	r2, r3, #1
 8010dfa:	75fa      	strb	r2, [r7, #23]
 8010dfc:	3318      	adds	r3, #24
 8010dfe:	443b      	add	r3, r7
 8010e00:	2200      	movs	r2, #0
 8010e02:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010e06:	2300      	movs	r3, #0
 8010e08:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010e0a:	7dfb      	ldrb	r3, [r7, #23]
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	8ab8      	ldrh	r0, [r7, #20]
 8010e10:	f107 010c 	add.w	r1, r7, #12
 8010e14:	f107 0310 	add.w	r3, r7, #16
 8010e18:	9301      	str	r3, [sp, #4]
 8010e1a:	f107 0308 	add.w	r3, r7, #8
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	4603      	mov	r3, r0
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7fe fa58 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	827b      	strh	r3, [r7, #18]
 8010e2c:	8a7b      	ldrh	r3, [r7, #18]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d001      	beq.n	8010e36 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 8010e32:	8a7b      	ldrh	r3, [r7, #18]
 8010e34:	e000      	b.n	8010e38 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3718      	adds	r7, #24
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b088      	sub	sp, #32
 8010e44:	af02      	add	r7, sp, #8
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70fb      	strb	r3, [r7, #3]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00f      	beq.n	8010e76 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 8010e56:	78fb      	ldrb	r3, [r7, #3]
 8010e58:	2b1c      	cmp	r3, #28
 8010e5a:	d902      	bls.n	8010e62 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8010e5c:	78fb      	ldrb	r3, [r7, #3]
 8010e5e:	2bff      	cmp	r3, #255	@ 0xff
 8010e60:	d109      	bne.n	8010e76 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 8010e62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	da05      	bge.n	8010e76 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 8010e6a:	78bb      	ldrb	r3, [r7, #2]
 8010e6c:	2b9d      	cmp	r3, #157	@ 0x9d
 8010e6e:	d905      	bls.n	8010e7c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8010e70:	78bb      	ldrb	r3, [r7, #2]
 8010e72:	2bff      	cmp	r3, #255	@ 0xff
 8010e74:	d002      	beq.n	8010e7c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010e76:	f240 2321 	movw	r3, #545	@ 0x221
 8010e7a:	e03b      	b.n	8010ef4 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8010e7c:	78fa      	ldrb	r2, [r7, #3]
 8010e7e:	78bb      	ldrb	r3, [r7, #2]
 8010e80:	4013      	ands	r3, r2
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2bff      	cmp	r3, #255	@ 0xff
 8010e86:	d101      	bne.n	8010e8c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	e033      	b.n	8010ef4 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 8010e90:	7dfb      	ldrb	r3, [r7, #23]
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	75fa      	strb	r2, [r7, #23]
 8010e96:	3318      	adds	r3, #24
 8010e98:	443b      	add	r3, r7
 8010e9a:	2211      	movs	r2, #17
 8010e9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 8010ea0:	7dfb      	ldrb	r3, [r7, #23]
 8010ea2:	1c5a      	adds	r2, r3, #1
 8010ea4:	75fa      	strb	r2, [r7, #23]
 8010ea6:	3318      	adds	r3, #24
 8010ea8:	443b      	add	r3, r7
 8010eaa:	78fa      	ldrb	r2, [r7, #3]
 8010eac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 8010eb0:	7dfb      	ldrb	r3, [r7, #23]
 8010eb2:	1c5a      	adds	r2, r3, #1
 8010eb4:	75fa      	strb	r2, [r7, #23]
 8010eb6:	3318      	adds	r3, #24
 8010eb8:	443b      	add	r3, r7
 8010eba:	78ba      	ldrb	r2, [r7, #2]
 8010ebc:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010ec4:	7dfb      	ldrb	r3, [r7, #23]
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	7dbb      	ldrb	r3, [r7, #22]
 8010eca:	b298      	uxth	r0, r3
 8010ecc:	f107 010c 	add.w	r1, r7, #12
 8010ed0:	f107 0312 	add.w	r3, r7, #18
 8010ed4:	9301      	str	r3, [sp, #4]
 8010ed6:	f107 0308 	add.w	r3, r7, #8
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	4603      	mov	r3, r0
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7fe f9fa 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	82bb      	strh	r3, [r7, #20]
 8010ee8:	8abb      	ldrh	r3, [r7, #20]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d001      	beq.n	8010ef2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 8010eee:	8abb      	ldrh	r3, [r7, #20]
 8010ef0:	e000      	b.n	8010ef4 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010ef2:	2300      	movs	r3, #0
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3718      	adds	r7, #24
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b088      	sub	sp, #32
 8010f00:	af02      	add	r7, sp, #8
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	460b      	mov	r3, r1
 8010f06:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 8010f0e:	78fb      	ldrb	r3, [r7, #3]
 8010f10:	2b03      	cmp	r3, #3
 8010f12:	d902      	bls.n	8010f1a <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010f14:	f240 2321 	movw	r3, #545	@ 0x221
 8010f18:	e02b      	b.n	8010f72 <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 8010f1e:	7dfb      	ldrb	r3, [r7, #23]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	75fa      	strb	r2, [r7, #23]
 8010f24:	3318      	adds	r3, #24
 8010f26:	443b      	add	r3, r7
 8010f28:	2216      	movs	r2, #22
 8010f2a:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 8010f2e:	7dfb      	ldrb	r3, [r7, #23]
 8010f30:	1c5a      	adds	r2, r3, #1
 8010f32:	75fa      	strb	r2, [r7, #23]
 8010f34:	3318      	adds	r3, #24
 8010f36:	443b      	add	r3, r7
 8010f38:	78fa      	ldrb	r2, [r7, #3]
 8010f3a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010f42:	7dfb      	ldrb	r3, [r7, #23]
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	7dbb      	ldrb	r3, [r7, #22]
 8010f48:	b298      	uxth	r0, r3
 8010f4a:	f107 0110 	add.w	r1, r7, #16
 8010f4e:	f107 0312 	add.w	r3, r7, #18
 8010f52:	9301      	str	r3, [sp, #4]
 8010f54:	f107 030c 	add.w	r3, r7, #12
 8010f58:	9300      	str	r3, [sp, #0]
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f7fe f9bb 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010f62:	4603      	mov	r3, r0
 8010f64:	82bb      	strh	r3, [r7, #20]
 8010f66:	8abb      	ldrh	r3, [r7, #20]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d001      	beq.n	8010f70 <phhalHw_Pn5180_Instr_RfOn+0x74>
 8010f6c:	8abb      	ldrh	r3, [r7, #20]
 8010f6e:	e000      	b.n	8010f72 <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010f70:	2300      	movs	r3, #0

}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3718      	adds	r7, #24
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b088      	sub	sp, #32
 8010f7e:	af02      	add	r7, sp, #8
 8010f80:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d102      	bne.n	8010f8e <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010f88:	f240 2321 	movw	r3, #545	@ 0x221
 8010f8c:	e02b      	b.n	8010fe6 <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 8010f92:	7dfb      	ldrb	r3, [r7, #23]
 8010f94:	1c5a      	adds	r2, r3, #1
 8010f96:	75fa      	strb	r2, [r7, #23]
 8010f98:	3318      	adds	r3, #24
 8010f9a:	443b      	add	r3, r7
 8010f9c:	2217      	movs	r2, #23
 8010f9e:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 8010fa2:	7dfb      	ldrb	r3, [r7, #23]
 8010fa4:	1c5a      	adds	r2, r3, #1
 8010fa6:	75fa      	strb	r2, [r7, #23]
 8010fa8:	3318      	adds	r3, #24
 8010faa:	443b      	add	r3, r7
 8010fac:	2200      	movs	r2, #0
 8010fae:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	7dbb      	ldrb	r3, [r7, #22]
 8010fbc:	b298      	uxth	r0, r3
 8010fbe:	f107 0110 	add.w	r1, r7, #16
 8010fc2:	f107 0312 	add.w	r3, r7, #18
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	f107 030c 	add.w	r3, r7, #12
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	4603      	mov	r3, r0
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7fe f981 	bl	800f2d8 <phhalHw_Pn5180_BalExchange>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	82bb      	strh	r3, [r7, #20]
 8010fda:	8abb      	ldrh	r3, [r7, #20]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d001      	beq.n	8010fe4 <phhalHw_Pn5180_Instr_RfOff+0x6a>
 8010fe0:	8abb      	ldrh	r3, [r7, #20]
 8010fe2:	e000      	b.n	8010fe6 <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010fe4:	2300      	movs	r3, #0

}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b086      	sub	sp, #24
 8010ff2:	af02      	add	r7, sp, #8
 8010ff4:	60f8      	str	r0, [r7, #12]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	603b      	str	r3, [r7, #0]
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8010ffe:	7afb      	ldrb	r3, [r7, #11]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d023      	beq.n	801104c <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	68da      	ldr	r2, [r3, #12]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	695b      	ldr	r3, [r3, #20]
 801100c:	429a      	cmp	r2, r3
 801100e:	d10f      	bne.n	8011030 <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	68fa      	ldr	r2, [r7, #12]
 8011016:	8bd2      	ldrh	r2, [r2, #30]
 8011018:	441a      	add	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	8a1a      	ldrh	r2, [r3, #16]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	8bdb      	ldrh	r3, [r3, #30]
 8011026:	1ad3      	subs	r3, r2, r3
 8011028:	b29a      	uxth	r2, r3
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	801a      	strh	r2, [r3, #0]
 801102e:	e007      	b.n	8011040 <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	68da      	ldr	r2, [r3, #12]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	8a1a      	ldrh	r2, [r3, #16]
 801103c:	69bb      	ldr	r3, [r7, #24]
 801103e:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	8a5a      	ldrh	r2, [r3, #18]
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 8011048:	2300      	movs	r3, #0
 801104a:	e008      	b.n	801105e <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 801104c:	7af9      	ldrb	r1, [r7, #11]
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f000 f805 	bl	8011066 <phhalHw_Pn5180_GetRxBuffer>
 801105c:	4603      	mov	r3, r0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 8011066:	b480      	push	{r7}
 8011068:	b087      	sub	sp, #28
 801106a:	af00      	add	r7, sp, #0
 801106c:	60f8      	str	r0, [r7, #12]
 801106e:	607a      	str	r2, [r7, #4]
 8011070:	603b      	str	r3, [r7, #0]
 8011072:	460b      	mov	r3, r1
 8011074:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 8011076:	2300      	movs	r3, #0
 8011078:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 801107a:	7afb      	ldrb	r3, [r7, #11]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d021      	beq.n	80110c4 <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011086:	2b01      	cmp	r3, #1
 8011088:	d101      	bne.n	801108e <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 801108a:	2301      	movs	r3, #1
 801108c:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	695b      	ldr	r3, [r3, #20]
 8011092:	68fa      	ldr	r2, [r7, #12]
 8011094:	8bd2      	ldrh	r2, [r2, #30]
 8011096:	4611      	mov	r1, r2
 8011098:	7dfa      	ldrb	r2, [r7, #23]
 801109a:	1a8a      	subs	r2, r1, r2
 801109c:	441a      	add	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	8b1a      	ldrh	r2, [r3, #24]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	8bdb      	ldrh	r3, [r3, #30]
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	7dfb      	ldrb	r3, [r7, #23]
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	8b5a      	ldrh	r2, [r3, #26]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	801a      	strh	r2, [r3, #0]
 80110c2:	e055      	b.n	8011170 <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	2200      	movs	r2, #0
 80110c8:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	68da      	ldr	r2, [r3, #12]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	695b      	ldr	r3, [r3, #20]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d11f      	bne.n	8011116 <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d103      	bne.n	80110e6 <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	8bdb      	ldrh	r3, [r3, #30]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d017      	beq.n	8011116 <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	8bd2      	ldrh	r2, [r2, #30]
 80110ee:	4611      	mov	r1, r2
 80110f0:	68fa      	ldr	r2, [r7, #12]
 80110f2:	8a52      	ldrh	r2, [r2, #18]
 80110f4:	440a      	add	r2, r1
 80110f6:	441a      	add	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	8a1a      	ldrh	r2, [r3, #16]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	8bd9      	ldrh	r1, [r3, #30]
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	8a5b      	ldrh	r3, [r3, #18]
 8011108:	440b      	add	r3, r1
 801110a:	b29b      	uxth	r3, r3
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	b29a      	uxth	r2, r3
 8011110:	6a3b      	ldr	r3, [r7, #32]
 8011112:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 8011114:	e02c      	b.n	8011170 <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	8a1b      	ldrh	r3, [r3, #16]
 801111a:	461a      	mov	r2, r3
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	8a5b      	ldrh	r3, [r3, #18]
 8011120:	1ad2      	subs	r2, r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	8b1b      	ldrh	r3, [r3, #24]
 8011126:	4619      	mov	r1, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	8bdb      	ldrh	r3, [r3, #30]
 801112c:	1acb      	subs	r3, r1, r3
 801112e:	429a      	cmp	r2, r3
 8011130:	db0f      	blt.n	8011152 <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	8a52      	ldrh	r2, [r2, #18]
 801113a:	441a      	add	r2, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	8a1a      	ldrh	r2, [r3, #16]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	8a5b      	ldrh	r3, [r3, #18]
 8011148:	1ad3      	subs	r3, r2, r3
 801114a:	b29a      	uxth	r2, r3
 801114c:	6a3b      	ldr	r3, [r7, #32]
 801114e:	801a      	strh	r2, [r3, #0]
 8011150:	e00e      	b.n	8011170 <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	695b      	ldr	r3, [r3, #20]
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	8bd2      	ldrh	r2, [r2, #30]
 801115a:	441a      	add	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	8b1a      	ldrh	r2, [r3, #24]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	8bdb      	ldrh	r3, [r3, #30]
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	b29a      	uxth	r2, r3
 801116c:	6a3b      	ldr	r3, [r7, #32]
 801116e:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	371c      	adds	r7, #28
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr

0801117e <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 801117e:	b580      	push	{r7, lr}
 8011180:	b086      	sub	sp, #24
 8011182:	af00      	add	r7, sp, #0
 8011184:	60f8      	str	r0, [r7, #12]
 8011186:	60b9      	str	r1, [r7, #8]
 8011188:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 801118a:	2300      	movs	r3, #0
 801118c:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 801118e:	f107 0310 	add.w	r3, r7, #16
 8011192:	461a      	mov	r2, r3
 8011194:	2113      	movs	r1, #19
 8011196:	68f8      	ldr	r0, [r7, #12]
 8011198:	f7fb fba6 	bl	800c8e8 <phhalHw_Pn5180_ReadRegister>
 801119c:	4603      	mov	r3, r0
 801119e:	82bb      	strh	r3, [r7, #20]
 80111a0:	8abb      	ldrh	r3, [r7, #20]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d001      	beq.n	80111aa <phhalHw_Pn5180_ReadData+0x2c>
 80111a6:	8abb      	ldrh	r3, [r7, #20]
 80111a8:	e02d      	b.n	8011206 <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d10f      	bne.n	80111d4 <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111bc:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	f003 030f 	and.w	r3, r3, #15
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	015b      	lsls	r3, r3, #5
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	4313      	orrs	r3, r2
 80111d0:	82fb      	strh	r3, [r7, #22]
 80111d2:	e004      	b.n	80111de <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111dc:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 80111de:	8afb      	ldrh	r3, [r7, #22]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00c      	beq.n	80111fe <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80111e4:	8afb      	ldrh	r3, [r7, #22]
 80111e6:	461a      	mov	r2, r3
 80111e8:	68b9      	ldr	r1, [r7, #8]
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f7ff fb52 	bl	8010894 <phhalHw_Pn5180_Instr_RetrieveRxData>
 80111f0:	4603      	mov	r3, r0
 80111f2:	82bb      	strh	r3, [r7, #20]
 80111f4:	8abb      	ldrh	r3, [r7, #20]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d001      	beq.n	80111fe <phhalHw_Pn5180_ReadData+0x80>
 80111fa:	8abb      	ldrh	r3, [r7, #20]
 80111fc:	e003      	b.n	8011206 <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	8afa      	ldrh	r2, [r7, #22]
 8011202:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011204:	2300      	movs	r3, #0
}
 8011206:	4618      	mov	r0, r3
 8011208:	3718      	adds	r7, #24
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b08e      	sub	sp, #56	@ 0x38
 8011212:	af00      	add	r7, sp, #0
 8011214:	60f8      	str	r0, [r7, #12]
 8011216:	607a      	str	r2, [r7, #4]
 8011218:	603b      	str	r3, [r7, #0]
 801121a:	460b      	mov	r3, r1
 801121c:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 801121e:	7afb      	ldrb	r3, [r7, #11]
 8011220:	2b10      	cmp	r3, #16
 8011222:	d018      	beq.n	8011256 <phhalHw_Pn5180_TimerStart+0x48>
 8011224:	2b10      	cmp	r3, #16
 8011226:	dc1f      	bgt.n	8011268 <phhalHw_Pn5180_TimerStart+0x5a>
 8011228:	2b0e      	cmp	r3, #14
 801122a:	d002      	beq.n	8011232 <phhalHw_Pn5180_TimerStart+0x24>
 801122c:	2b0f      	cmp	r3, #15
 801122e:	d009      	beq.n	8011244 <phhalHw_Pn5180_TimerStart+0x36>
 8011230:	e01a      	b.n	8011268 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 8011232:	230e      	movs	r3, #14
 8011234:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 8011238:	230b      	movs	r3, #11
 801123a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 801123e:	2301      	movs	r3, #1
 8011240:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8011242:	e014      	b.n	801126e <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 8011244:	230f      	movs	r3, #15
 8011246:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 801124a:	230c      	movs	r3, #12
 801124c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 8011250:	2301      	movs	r3, #1
 8011252:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8011254:	e00b      	b.n	801126e <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 8011256:	2310      	movs	r3, #16
 8011258:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 801125c:	230d      	movs	r3, #13
 801125e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 8011262:	2301      	movs	r3, #1
 8011264:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8011266:	e002      	b.n	801126e <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011268:	f240 2321 	movw	r3, #545	@ 0x221
 801126c:	e0bd      	b.n	80113ea <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 801126e:	2300      	movs	r3, #0
 8011270:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8011272:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011278:	3338      	adds	r3, #56	@ 0x38
 801127a:	443b      	add	r3, r7
 801127c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011280:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8011284:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011286:	1c5a      	adds	r2, r3, #1
 8011288:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801128a:	3338      	adds	r3, #56	@ 0x38
 801128c:	443b      	add	r3, r7
 801128e:	2201      	movs	r2, #1
 8011290:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8011294:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011296:	1c5a      	adds	r2, r3, #1
 8011298:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801129a:	3338      	adds	r3, #56	@ 0x38
 801129c:	443b      	add	r3, r7
 801129e:	2200      	movs	r2, #0
 80112a0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80112a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112a6:	1c5a      	adds	r2, r3, #1
 80112a8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80112aa:	3338      	adds	r3, #56	@ 0x38
 80112ac:	443b      	add	r3, r7
 80112ae:	2200      	movs	r2, #0
 80112b0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80112b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80112ba:	3338      	adds	r3, #56	@ 0x38
 80112bc:	443b      	add	r3, r7
 80112be:	2200      	movs	r2, #0
 80112c0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80112c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112c6:	1c5a      	adds	r2, r3, #1
 80112c8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80112ca:	3338      	adds	r3, #56	@ 0x38
 80112cc:	443b      	add	r3, r7
 80112ce:	2200      	movs	r2, #0
 80112d0:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 80112d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112da:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 80112dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112de:	1c5a      	adds	r2, r3, #1
 80112e0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80112e2:	3338      	adds	r3, #56	@ 0x38
 80112e4:	443b      	add	r3, r7
 80112e6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80112ea:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80112ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112f0:	1c5a      	adds	r2, r3, #1
 80112f2:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80112f4:	3338      	adds	r3, #56	@ 0x38
 80112f6:	443b      	add	r3, r7
 80112f8:	2201      	movs	r2, #1
 80112fa:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80112fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011300:	1c5a      	adds	r2, r3, #1
 8011302:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011306:	b2d2      	uxtb	r2, r2
 8011308:	3338      	adds	r3, #56	@ 0x38
 801130a:	443b      	add	r3, r7
 801130c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8011310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011312:	0a1a      	lsrs	r2, r3, #8
 8011314:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011316:	1c59      	adds	r1, r3, #1
 8011318:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801131a:	b2d2      	uxtb	r2, r2
 801131c:	3338      	adds	r3, #56	@ 0x38
 801131e:	443b      	add	r3, r7
 8011320:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8011324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011326:	0c1a      	lsrs	r2, r3, #16
 8011328:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801132a:	1c59      	adds	r1, r3, #1
 801132c:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801132e:	b2d2      	uxtb	r2, r2
 8011330:	3338      	adds	r3, #56	@ 0x38
 8011332:	443b      	add	r3, r7
 8011334:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801133a:	0e1a      	lsrs	r2, r3, #24
 801133c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801133e:	1c59      	adds	r1, r3, #1
 8011340:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8011342:	b2d2      	uxtb	r2, r2
 8011344:	3338      	adds	r3, #56	@ 0x38
 8011346:	443b      	add	r3, r7
 8011348:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	431a      	orrs	r2, r3
 8011352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011354:	4313      	orrs	r3, r2
 8011356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011358:	4313      	orrs	r3, r2
 801135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 801135c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801135e:	1c5a      	adds	r2, r3, #1
 8011360:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011362:	3338      	adds	r3, #56	@ 0x38
 8011364:	443b      	add	r3, r7
 8011366:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801136a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801136e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011370:	1c5a      	adds	r2, r3, #1
 8011372:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011374:	3338      	adds	r3, #56	@ 0x38
 8011376:	443b      	add	r3, r7
 8011378:	2201      	movs	r2, #1
 801137a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801137e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011380:	1c5a      	adds	r2, r3, #1
 8011382:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011386:	b2d2      	uxtb	r2, r2
 8011388:	3338      	adds	r3, #56	@ 0x38
 801138a:	443b      	add	r3, r7
 801138c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8011390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011392:	0a1a      	lsrs	r2, r3, #8
 8011394:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011396:	1c59      	adds	r1, r3, #1
 8011398:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801139a:	b2d2      	uxtb	r2, r2
 801139c:	3338      	adds	r3, #56	@ 0x38
 801139e:	443b      	add	r3, r7
 80113a0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80113a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113a6:	0c1a      	lsrs	r2, r3, #16
 80113a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80113aa:	1c59      	adds	r1, r3, #1
 80113ac:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80113ae:	b2d2      	uxtb	r2, r2
 80113b0:	3338      	adds	r3, #56	@ 0x38
 80113b2:	443b      	add	r3, r7
 80113b4:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 80113b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113ba:	0e1a      	lsrs	r2, r3, #24
 80113bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80113be:	1c59      	adds	r1, r3, #1
 80113c0:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80113c2:	b2d2      	uxtb	r2, r2
 80113c4:	3338      	adds	r3, #56	@ 0x38
 80113c6:	443b      	add	r3, r7
 80113c8:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80113cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80113ce:	f107 0314 	add.w	r3, r7, #20
 80113d2:	4619      	mov	r1, r3
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f7fe ff9b 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80113da:	4603      	mov	r3, r0
 80113dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80113de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <phhalHw_Pn5180_TimerStart+0x1da>
 80113e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80113e6:	e000      	b.n	80113ea <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 80113e8:	2300      	movs	r3, #0
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3738      	adds	r7, #56	@ 0x38
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
	...

080113f4 <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b088      	sub	sp, #32
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	460b      	mov	r3, r1
 80113fe:	807b      	strh	r3, [r7, #2]
 8011400:	4613      	mov	r3, r2
 8011402:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 8011404:	887b      	ldrh	r3, [r7, #2]
 8011406:	2b0c      	cmp	r3, #12
 8011408:	f200 81ad 	bhi.w	8011766 <phhalHw_Pn5180_SetConfig_Int+0x372>
 801140c:	a201      	add	r2, pc, #4	@ (adr r2, 8011414 <phhalHw_Pn5180_SetConfig_Int+0x20>)
 801140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011412:	bf00      	nop
 8011414:	08011449 	.word	0x08011449
 8011418:	080114c3 	.word	0x080114c3
 801141c:	08011603 	.word	0x08011603
 8011420:	08011767 	.word	0x08011767
 8011424:	08011767 	.word	0x08011767
 8011428:	08011767 	.word	0x08011767
 801142c:	08011767 	.word	0x08011767
 8011430:	08011767 	.word	0x08011767
 8011434:	08011767 	.word	0x08011767
 8011438:	08011767 	.word	0x08011767
 801143c:	08011767 	.word	0x08011767
 8011440:	08011767 	.word	0x08011767
 8011444:	08011741 	.word	0x08011741
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 8011448:	883b      	ldrh	r3, [r7, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d11e      	bne.n	801148c <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 801144e:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 8011452:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 8011454:	697a      	ldr	r2, [r7, #20]
 8011456:	2118      	movs	r1, #24
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7fe fee3 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801145e:	4603      	mov	r3, r0
 8011460:	837b      	strh	r3, [r7, #26]
 8011462:	8b7b      	ldrh	r3, [r7, #26]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d001      	beq.n	801146c <phhalHw_Pn5180_SetConfig_Int+0x78>
 8011468:	8b7b      	ldrh	r3, [r7, #26]
 801146a:	e187      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 801146c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8011470:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 8011472:	697a      	ldr	r2, [r7, #20]
 8011474:	2112      	movs	r1, #18
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7fe fed4 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801147c:	4603      	mov	r3, r0
 801147e:	837b      	strh	r3, [r7, #26]
 8011480:	8b7b      	ldrh	r3, [r7, #26]
 8011482:	2b00      	cmp	r3, #0
 8011484:	f000 8172 	beq.w	801176c <phhalHw_Pn5180_SetConfig_Int+0x378>
 8011488:	8b7b      	ldrh	r3, [r7, #26]
 801148a:	e177      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 801148c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011490:	2118      	movs	r1, #24
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7fe fe50 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011498:	4603      	mov	r3, r0
 801149a:	837b      	strh	r3, [r7, #26]
 801149c:	8b7b      	ldrh	r3, [r7, #26]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <phhalHw_Pn5180_SetConfig_Int+0xb2>
 80114a2:	8b7b      	ldrh	r3, [r7, #26]
 80114a4:	e16a      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 80114a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80114aa:	2112      	movs	r1, #18
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7fe fe43 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80114b2:	4603      	mov	r3, r0
 80114b4:	837b      	strh	r3, [r7, #26]
 80114b6:	8b7b      	ldrh	r3, [r7, #26]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 8157 	beq.w	801176c <phhalHw_Pn5180_SetConfig_Int+0x378>
 80114be:	8b7b      	ldrh	r3, [r7, #26]
 80114c0:	e15c      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 80114c2:	883b      	ldrh	r3, [r7, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d10f      	bne.n	80114e8 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 80114c8:	f06f 0301 	mvn.w	r3, #1
 80114cc:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	2119      	movs	r1, #25
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7fe fea6 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80114d8:	4603      	mov	r3, r0
 80114da:	837b      	strh	r3, [r7, #26]
 80114dc:	8b7b      	ldrh	r3, [r7, #26]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 8146 	beq.w	8011770 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 80114e4:	8b7b      	ldrh	r3, [r7, #26]
 80114e6:	e149      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 80114e8:	2300      	movs	r3, #0
 80114ea:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 80114ec:	f06f 0304 	mvn.w	r3, #4
 80114f0:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 80114f2:	8b3b      	ldrh	r3, [r7, #24]
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	833a      	strh	r2, [r7, #24]
 80114f8:	3320      	adds	r3, #32
 80114fa:	443b      	add	r3, r7
 80114fc:	2219      	movs	r2, #25
 80114fe:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8011502:	8b3b      	ldrh	r3, [r7, #24]
 8011504:	1c5a      	adds	r2, r3, #1
 8011506:	833a      	strh	r2, [r7, #24]
 8011508:	3320      	adds	r3, #32
 801150a:	443b      	add	r3, r7
 801150c:	2203      	movs	r2, #3
 801150e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011512:	8b3b      	ldrh	r3, [r7, #24]
 8011514:	1c5a      	adds	r2, r3, #1
 8011516:	833a      	strh	r2, [r7, #24]
 8011518:	69fa      	ldr	r2, [r7, #28]
 801151a:	b2d2      	uxtb	r2, r2
 801151c:	3320      	adds	r3, #32
 801151e:	443b      	add	r3, r7
 8011520:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	0a1a      	lsrs	r2, r3, #8
 8011528:	8b3b      	ldrh	r3, [r7, #24]
 801152a:	1c59      	adds	r1, r3, #1
 801152c:	8339      	strh	r1, [r7, #24]
 801152e:	b2d2      	uxtb	r2, r2
 8011530:	3320      	adds	r3, #32
 8011532:	443b      	add	r3, r7
 8011534:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8011538:	69fb      	ldr	r3, [r7, #28]
 801153a:	0c1a      	lsrs	r2, r3, #16
 801153c:	8b3b      	ldrh	r3, [r7, #24]
 801153e:	1c59      	adds	r1, r3, #1
 8011540:	8339      	strh	r1, [r7, #24]
 8011542:	b2d2      	uxtb	r2, r2
 8011544:	3320      	adds	r3, #32
 8011546:	443b      	add	r3, r7
 8011548:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	0e1a      	lsrs	r2, r3, #24
 8011550:	8b3b      	ldrh	r3, [r7, #24]
 8011552:	1c59      	adds	r1, r3, #1
 8011554:	8339      	strh	r1, [r7, #24]
 8011556:	b2d2      	uxtb	r2, r2
 8011558:	3320      	adds	r3, #32
 801155a:	443b      	add	r3, r7
 801155c:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 8011560:	2301      	movs	r3, #1
 8011562:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801156a:	2b06      	cmp	r3, #6
 801156c:	d103      	bne.n	8011576 <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	f043 0304 	orr.w	r3, r3, #4
 8011574:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8011576:	8b3b      	ldrh	r3, [r7, #24]
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	833a      	strh	r2, [r7, #24]
 801157c:	3320      	adds	r3, #32
 801157e:	443b      	add	r3, r7
 8011580:	2219      	movs	r2, #25
 8011582:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8011586:	8b3b      	ldrh	r3, [r7, #24]
 8011588:	1c5a      	adds	r2, r3, #1
 801158a:	833a      	strh	r2, [r7, #24]
 801158c:	3320      	adds	r3, #32
 801158e:	443b      	add	r3, r7
 8011590:	2202      	movs	r2, #2
 8011592:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011596:	8b3b      	ldrh	r3, [r7, #24]
 8011598:	1c5a      	adds	r2, r3, #1
 801159a:	833a      	strh	r2, [r7, #24]
 801159c:	69fa      	ldr	r2, [r7, #28]
 801159e:	b2d2      	uxtb	r2, r2
 80115a0:	3320      	adds	r3, #32
 80115a2:	443b      	add	r3, r7
 80115a4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	0a1a      	lsrs	r2, r3, #8
 80115ac:	8b3b      	ldrh	r3, [r7, #24]
 80115ae:	1c59      	adds	r1, r3, #1
 80115b0:	8339      	strh	r1, [r7, #24]
 80115b2:	b2d2      	uxtb	r2, r2
 80115b4:	3320      	adds	r3, #32
 80115b6:	443b      	add	r3, r7
 80115b8:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	0c1a      	lsrs	r2, r3, #16
 80115c0:	8b3b      	ldrh	r3, [r7, #24]
 80115c2:	1c59      	adds	r1, r3, #1
 80115c4:	8339      	strh	r1, [r7, #24]
 80115c6:	b2d2      	uxtb	r2, r2
 80115c8:	3320      	adds	r3, #32
 80115ca:	443b      	add	r3, r7
 80115cc:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	0e1a      	lsrs	r2, r3, #24
 80115d4:	8b3b      	ldrh	r3, [r7, #24]
 80115d6:	1c59      	adds	r1, r3, #1
 80115d8:	8339      	strh	r1, [r7, #24]
 80115da:	b2d2      	uxtb	r2, r2
 80115dc:	3320      	adds	r3, #32
 80115de:	443b      	add	r3, r7
 80115e0:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80115e4:	8b3a      	ldrh	r2, [r7, #24]
 80115e6:	f107 0308 	add.w	r3, r7, #8
 80115ea:	4619      	mov	r1, r3
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7fe fe8f 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80115f2:	4603      	mov	r3, r0
 80115f4:	837b      	strh	r3, [r7, #26]
 80115f6:	8b7b      	ldrh	r3, [r7, #26]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f000 80b9 	beq.w	8011770 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 80115fe:	8b7b      	ldrh	r3, [r7, #26]
 8011600:	e0bc      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 8011602:	883b      	ldrh	r3, [r7, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10f      	bne.n	8011628 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8011608:	f06f 0301 	mvn.w	r3, #1
 801160c:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 801160e:	697a      	ldr	r2, [r7, #20]
 8011610:	2112      	movs	r1, #18
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7fe fe06 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011618:	4603      	mov	r3, r0
 801161a:	837b      	strh	r3, [r7, #26]
 801161c:	8b7b      	ldrh	r3, [r7, #26]
 801161e:	2b00      	cmp	r3, #0
 8011620:	f000 80a8 	beq.w	8011774 <phhalHw_Pn5180_SetConfig_Int+0x380>
 8011624:	8b7b      	ldrh	r3, [r7, #26]
 8011626:	e0a9      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8011628:	2300      	movs	r3, #0
 801162a:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 801162c:	f06f 0304 	mvn.w	r3, #4
 8011630:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8011632:	8b3b      	ldrh	r3, [r7, #24]
 8011634:	1c5a      	adds	r2, r3, #1
 8011636:	833a      	strh	r2, [r7, #24]
 8011638:	3320      	adds	r3, #32
 801163a:	443b      	add	r3, r7
 801163c:	2212      	movs	r2, #18
 801163e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8011642:	8b3b      	ldrh	r3, [r7, #24]
 8011644:	1c5a      	adds	r2, r3, #1
 8011646:	833a      	strh	r2, [r7, #24]
 8011648:	3320      	adds	r3, #32
 801164a:	443b      	add	r3, r7
 801164c:	2203      	movs	r2, #3
 801164e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011652:	8b3b      	ldrh	r3, [r7, #24]
 8011654:	1c5a      	adds	r2, r3, #1
 8011656:	833a      	strh	r2, [r7, #24]
 8011658:	69fa      	ldr	r2, [r7, #28]
 801165a:	b2d2      	uxtb	r2, r2
 801165c:	3320      	adds	r3, #32
 801165e:	443b      	add	r3, r7
 8011660:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	0a1a      	lsrs	r2, r3, #8
 8011668:	8b3b      	ldrh	r3, [r7, #24]
 801166a:	1c59      	adds	r1, r3, #1
 801166c:	8339      	strh	r1, [r7, #24]
 801166e:	b2d2      	uxtb	r2, r2
 8011670:	3320      	adds	r3, #32
 8011672:	443b      	add	r3, r7
 8011674:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	0c1a      	lsrs	r2, r3, #16
 801167c:	8b3b      	ldrh	r3, [r7, #24]
 801167e:	1c59      	adds	r1, r3, #1
 8011680:	8339      	strh	r1, [r7, #24]
 8011682:	b2d2      	uxtb	r2, r2
 8011684:	3320      	adds	r3, #32
 8011686:	443b      	add	r3, r7
 8011688:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	0e1a      	lsrs	r2, r3, #24
 8011690:	8b3b      	ldrh	r3, [r7, #24]
 8011692:	1c59      	adds	r1, r3, #1
 8011694:	8339      	strh	r1, [r7, #24]
 8011696:	b2d2      	uxtb	r2, r2
 8011698:	3320      	adds	r3, #32
 801169a:	443b      	add	r3, r7
 801169c:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 80116a0:	2301      	movs	r3, #1
 80116a2:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116aa:	2b06      	cmp	r3, #6
 80116ac:	d103      	bne.n	80116b6 <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	f043 0304 	orr.w	r3, r3, #4
 80116b4:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 80116b6:	8b3b      	ldrh	r3, [r7, #24]
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	833a      	strh	r2, [r7, #24]
 80116bc:	3320      	adds	r3, #32
 80116be:	443b      	add	r3, r7
 80116c0:	2212      	movs	r2, #18
 80116c2:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80116c6:	8b3b      	ldrh	r3, [r7, #24]
 80116c8:	1c5a      	adds	r2, r3, #1
 80116ca:	833a      	strh	r2, [r7, #24]
 80116cc:	3320      	adds	r3, #32
 80116ce:	443b      	add	r3, r7
 80116d0:	2202      	movs	r2, #2
 80116d2:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80116d6:	8b3b      	ldrh	r3, [r7, #24]
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	833a      	strh	r2, [r7, #24]
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	b2d2      	uxtb	r2, r2
 80116e0:	3320      	adds	r3, #32
 80116e2:	443b      	add	r3, r7
 80116e4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	0a1a      	lsrs	r2, r3, #8
 80116ec:	8b3b      	ldrh	r3, [r7, #24]
 80116ee:	1c59      	adds	r1, r3, #1
 80116f0:	8339      	strh	r1, [r7, #24]
 80116f2:	b2d2      	uxtb	r2, r2
 80116f4:	3320      	adds	r3, #32
 80116f6:	443b      	add	r3, r7
 80116f8:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	0c1a      	lsrs	r2, r3, #16
 8011700:	8b3b      	ldrh	r3, [r7, #24]
 8011702:	1c59      	adds	r1, r3, #1
 8011704:	8339      	strh	r1, [r7, #24]
 8011706:	b2d2      	uxtb	r2, r2
 8011708:	3320      	adds	r3, #32
 801170a:	443b      	add	r3, r7
 801170c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	0e1a      	lsrs	r2, r3, #24
 8011714:	8b3b      	ldrh	r3, [r7, #24]
 8011716:	1c59      	adds	r1, r3, #1
 8011718:	8339      	strh	r1, [r7, #24]
 801171a:	b2d2      	uxtb	r2, r2
 801171c:	3320      	adds	r3, #32
 801171e:	443b      	add	r3, r7
 8011720:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8011724:	8b3a      	ldrh	r2, [r7, #24]
 8011726:	f107 0308 	add.w	r3, r7, #8
 801172a:	4619      	mov	r1, r3
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7fe fdef 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8011732:	4603      	mov	r3, r0
 8011734:	837b      	strh	r3, [r7, #26]
 8011736:	8b7b      	ldrh	r3, [r7, #26]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d01b      	beq.n	8011774 <phhalHw_Pn5180_SetConfig_Int+0x380>
 801173c:	8b7b      	ldrh	r3, [r7, #26]
 801173e:	e01d      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 8011740:	883b      	ldrh	r3, [r7, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d102      	bne.n	801174c <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8011746:	f240 2323 	movw	r3, #547	@ 0x223
 801174a:	e017      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 801174c:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 8011750:	2120      	movs	r1, #32
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7fe fd66 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011758:	4603      	mov	r3, r0
 801175a:	837b      	strh	r3, [r7, #26]
 801175c:	8b7b      	ldrh	r3, [r7, #26]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00a      	beq.n	8011778 <phhalHw_Pn5180_SetConfig_Int+0x384>
 8011762:	8b7b      	ldrh	r3, [r7, #26]
 8011764:	e00a      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011766:	f240 237f 	movw	r3, #639	@ 0x27f
 801176a:	e007      	b.n	801177c <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 801176c:	bf00      	nop
 801176e:	e004      	b.n	801177a <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011770:	bf00      	nop
 8011772:	e002      	b.n	801177a <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011774:	bf00      	nop
 8011776:	e000      	b.n	801177a <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011778:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801177a:	2300      	movs	r3, #0
}
 801177c:	4618      	mov	r0, r3
 801177e:	3720      	adds	r7, #32
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011792:	2b04      	cmp	r3, #4
 8011794:	d00f      	beq.n	80117b6 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 8011796:	2200      	movs	r2, #0
 8011798:	2143      	movs	r1, #67	@ 0x43
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7fe fc56 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 80117a0:	4603      	mov	r3, r0
 80117a2:	81fb      	strh	r3, [r7, #14]
 80117a4:	89fb      	ldrh	r3, [r7, #14]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d001      	beq.n	80117ae <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 80117aa:	89fb      	ldrh	r3, [r7, #14]
 80117ac:	e013      	b.n	80117d6 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80117b4:	e00e      	b.n	80117d4 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 80117b6:	4a0a      	ldr	r2, [pc, #40]	@ (80117e0 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 80117b8:	2143      	movs	r1, #67	@ 0x43
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7fe fc46 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 80117c0:	4603      	mov	r3, r0
 80117c2:	81fb      	strh	r3, [r7, #14]
 80117c4:	89fb      	ldrh	r3, [r7, #14]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d001      	beq.n	80117ce <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 80117ca:	89fb      	ldrh	r3, [r7, #14]
 80117cc:	e003      	b.n	80117d6 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	4a03      	ldr	r2, [pc, #12]	@ (80117e0 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 80117d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	00ff0019 	.word	0x00ff0019

080117e4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	460b      	mov	r3, r1
 80117ee:	607a      	str	r2, [r7, #4]
 80117f0:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 80117f2:	897b      	ldrh	r3, [r7, #10]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d005      	beq.n	8011804 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 80117f8:	897b      	ldrh	r3, [r7, #10]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d002      	beq.n	8011804 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80117fe:	f240 2321 	movw	r3, #545	@ 0x221
 8011802:	e037      	b.n	8011874 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 8011804:	897b      	ldrh	r3, [r7, #10]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d018      	beq.n	801183c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4013      	ands	r3, r2
 8011812:	2b00      	cmp	r3, #0
 8011814:	d12d      	bne.n	8011872 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	2143      	movs	r1, #67	@ 0x43
 801181a:	68f8      	ldr	r0, [r7, #12]
 801181c:	f7fe fc8c 	bl	8010138 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011820:	4603      	mov	r3, r0
 8011822:	82fb      	strh	r3, [r7, #22]
 8011824:	8afb      	ldrh	r3, [r7, #22]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d001      	beq.n	801182e <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 801182a:	8afb      	ldrh	r3, [r7, #22]
 801182c:	e022      	b.n	8011874 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	431a      	orrs	r2, r3
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	655a      	str	r2, [r3, #84]	@ 0x54
 801183a:	e01a      	b.n	8011872 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4013      	ands	r3, r2
 8011844:	2b00      	cmp	r3, #0
 8011846:	d014      	beq.n	8011872 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	43db      	mvns	r3, r3
 801184c:	461a      	mov	r2, r3
 801184e:	2143      	movs	r1, #67	@ 0x43
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f7fe fce7 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011856:	4603      	mov	r3, r0
 8011858:	82fb      	strh	r3, [r7, #22]
 801185a:	8afb      	ldrh	r3, [r7, #22]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 8011860:	8afb      	ldrh	r3, [r7, #22]
 8011862:	e007      	b.n	8011874 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	43db      	mvns	r3, r3
 801186c:	401a      	ands	r2, r3
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3718      	adds	r7, #24
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b086      	sub	sp, #24
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	607b      	str	r3, [r7, #4]
 8011886:	460b      	mov	r3, r1
 8011888:	817b      	strh	r3, [r7, #10]
 801188a:	4613      	mov	r3, r2
 801188c:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 801188e:	897b      	ldrh	r3, [r7, #10]
 8011890:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011894:	2b00      	cmp	r3, #0
 8011896:	d002      	beq.n	801189e <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011898:	f240 2321 	movw	r3, #545	@ 0x221
 801189c:	e028      	b.n	80118f0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80118a2:	7a7b      	ldrb	r3, [r7, #9]
 80118a4:	fa22 f303 	lsr.w	r3, r2, r3
 80118a8:	b2da      	uxtb	r2, r3
 80118aa:	897b      	ldrh	r3, [r7, #10]
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d01d      	beq.n	80118ee <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118b6:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	43db      	mvns	r3, r3
 80118bc:	697a      	ldr	r2, [r7, #20]
 80118be:	4013      	ands	r3, r2
 80118c0:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 80118c2:	897a      	ldrh	r2, [r7, #10]
 80118c4:	7a7b      	ldrb	r3, [r7, #9]
 80118c6:	fa02 f303 	lsl.w	r3, r2, r3
 80118ca:	697a      	ldr	r2, [r7, #20]
 80118cc:	4313      	orrs	r3, r2
 80118ce:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 80118d0:	697a      	ldr	r2, [r7, #20]
 80118d2:	2143      	movs	r1, #67	@ 0x43
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f7fe fbb9 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 80118da:	4603      	mov	r3, r0
 80118dc:	827b      	strh	r3, [r7, #18]
 80118de:	8a7b      	ldrh	r3, [r7, #18]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d001      	beq.n	80118e8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 80118e4:	8a7b      	ldrh	r3, [r7, #18]
 80118e6:	e003      	b.n	80118f0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	697a      	ldr	r2, [r7, #20]
 80118ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3718      	adds	r7, #24
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	4608      	mov	r0, r1
 8011902:	4611      	mov	r1, r2
 8011904:	461a      	mov	r2, r3
 8011906:	4603      	mov	r3, r0
 8011908:	817b      	strh	r3, [r7, #10]
 801190a:	460b      	mov	r3, r1
 801190c:	813b      	strh	r3, [r7, #8]
 801190e:	4613      	mov	r3, r2
 8011910:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 8011912:	2300      	movs	r3, #0
 8011914:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 8011916:	2300      	movs	r3, #0
 8011918:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801191e:	2b00      	cmp	r3, #0
 8011920:	d10f      	bne.n	8011942 <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011928:	897a      	ldrh	r2, [r7, #10]
 801192a:	429a      	cmp	r2, r3
 801192c:	d101      	bne.n	8011932 <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 801192e:	23ff      	movs	r3, #255	@ 0xff
 8011930:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8011938:	893a      	ldrh	r2, [r7, #8]
 801193a:	429a      	cmp	r2, r3
 801193c:	d101      	bne.n	8011942 <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 801193e:	23ff      	movs	r3, #255	@ 0xff
 8011940:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011948:	3b01      	subs	r3, #1
 801194a:	2b09      	cmp	r3, #9
 801194c:	f200 82a1 	bhi.w	8011e92 <phhalHw_Pn5180_SetCardMode+0x59a>
 8011950:	a201      	add	r2, pc, #4	@ (adr r2, 8011958 <phhalHw_Pn5180_SetCardMode+0x60>)
 8011952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011956:	bf00      	nop
 8011958:	08011981 	.word	0x08011981
 801195c:	08011b49 	.word	0x08011b49
 8011960:	08011be9 	.word	0x08011be9
 8011964:	08011d05 	.word	0x08011d05
 8011968:	08011e93 	.word	0x08011e93
 801196c:	08011d9b 	.word	0x08011d9b
 8011970:	08011e1d 	.word	0x08011e1d
 8011974:	08011e1d 	.word	0x08011e1d
 8011978:	08011e1d 	.word	0x08011e1d
 801197c:	08011be9 	.word	0x08011be9
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011984:	2b00      	cmp	r3, #0
 8011986:	f000 808e 	beq.w	8011aa6 <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011990:	2b00      	cmp	r3, #0
 8011992:	d14e      	bne.n	8011a32 <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 8011994:	897b      	ldrh	r3, [r7, #10]
 8011996:	2b03      	cmp	r3, #3
 8011998:	dc0e      	bgt.n	80119b8 <phhalHw_Pn5180_SetCardMode+0xc0>
 801199a:	2b00      	cmp	r3, #0
 801199c:	db1e      	blt.n	80119dc <phhalHw_Pn5180_SetCardMode+0xe4>
 801199e:	2b03      	cmp	r3, #3
 80119a0:	d81c      	bhi.n	80119dc <phhalHw_Pn5180_SetCardMode+0xe4>
 80119a2:	a201      	add	r2, pc, #4	@ (adr r2, 80119a8 <phhalHw_Pn5180_SetCardMode+0xb0>)
 80119a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a8:	080119bf 	.word	0x080119bf
 80119ac:	080119c5 	.word	0x080119c5
 80119b0:	080119cb 	.word	0x080119cb
 80119b4:	080119d1 	.word	0x080119d1
 80119b8:	2bff      	cmp	r3, #255	@ 0xff
 80119ba:	d00c      	beq.n	80119d6 <phhalHw_Pn5180_SetCardMode+0xde>
 80119bc:	e00e      	b.n	80119dc <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 80119be:	2313      	movs	r3, #19
 80119c0:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 80119c2:	e00e      	b.n	80119e2 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 80119c4:	2314      	movs	r3, #20
 80119c6:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 80119c8:	e00b      	b.n	80119e2 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 80119ca:	2315      	movs	r3, #21
 80119cc:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 80119ce:	e008      	b.n	80119e2 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 80119d0:	2316      	movs	r3, #22
 80119d2:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 80119d4:	e005      	b.n	80119e2 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80119d6:	23ff      	movs	r3, #255	@ 0xff
 80119d8:	75fb      	strb	r3, [r7, #23]
                        break;
 80119da:	e002      	b.n	80119e2 <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80119dc:	f240 2321 	movw	r3, #545	@ 0x221
 80119e0:	e27c      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 80119e2:	893b      	ldrh	r3, [r7, #8]
 80119e4:	2b03      	cmp	r3, #3
 80119e6:	dc0f      	bgt.n	8011a08 <phhalHw_Pn5180_SetCardMode+0x110>
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	db1f      	blt.n	8011a2c <phhalHw_Pn5180_SetCardMode+0x134>
 80119ec:	2b03      	cmp	r3, #3
 80119ee:	d81d      	bhi.n	8011a2c <phhalHw_Pn5180_SetCardMode+0x134>
 80119f0:	a201      	add	r2, pc, #4	@ (adr r2, 80119f8 <phhalHw_Pn5180_SetCardMode+0x100>)
 80119f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f6:	bf00      	nop
 80119f8:	08011a0f 	.word	0x08011a0f
 80119fc:	08011a15 	.word	0x08011a15
 8011a00:	08011a1b 	.word	0x08011a1b
 8011a04:	08011a21 	.word	0x08011a21
 8011a08:	2bff      	cmp	r3, #255	@ 0xff
 8011a0a:	d00c      	beq.n	8011a26 <phhalHw_Pn5180_SetCardMode+0x12e>
 8011a0c:	e00e      	b.n	8011a2c <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 8011a0e:	2393      	movs	r3, #147	@ 0x93
 8011a10:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8011a12:	e098      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 8011a14:	2394      	movs	r3, #148	@ 0x94
 8011a16:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8011a18:	e095      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 8011a1a:	2395      	movs	r3, #149	@ 0x95
 8011a1c:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8011a1e:	e092      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 8011a20:	2396      	movs	r3, #150	@ 0x96
 8011a22:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8011a24:	e08f      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a26:	23ff      	movs	r3, #255	@ 0xff
 8011a28:	75bb      	strb	r3, [r7, #22]
                        break;
 8011a2a:	e08c      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a2c:	f240 2321 	movw	r3, #545	@ 0x221
 8011a30:	e254      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8011a32:	897b      	ldrh	r3, [r7, #10]
 8011a34:	2bff      	cmp	r3, #255	@ 0xff
 8011a36:	d013      	beq.n	8011a60 <phhalHw_Pn5180_SetCardMode+0x168>
 8011a38:	2bff      	cmp	r3, #255	@ 0xff
 8011a3a:	dc14      	bgt.n	8011a66 <phhalHw_Pn5180_SetCardMode+0x16e>
 8011a3c:	2b02      	cmp	r3, #2
 8011a3e:	d00c      	beq.n	8011a5a <phhalHw_Pn5180_SetCardMode+0x162>
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	dc10      	bgt.n	8011a66 <phhalHw_Pn5180_SetCardMode+0x16e>
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d002      	beq.n	8011a4e <phhalHw_Pn5180_SetCardMode+0x156>
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d003      	beq.n	8011a54 <phhalHw_Pn5180_SetCardMode+0x15c>
 8011a4c:	e00b      	b.n	8011a66 <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 8011a4e:	2319      	movs	r3, #25
 8011a50:	75fb      	strb	r3, [r7, #23]
                        break;
 8011a52:	e00b      	b.n	8011a6c <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8011a54:	231a      	movs	r3, #26
 8011a56:	75fb      	strb	r3, [r7, #23]
                        break;
 8011a58:	e008      	b.n	8011a6c <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8011a5a:	231b      	movs	r3, #27
 8011a5c:	75fb      	strb	r3, [r7, #23]
                        break;
 8011a5e:	e005      	b.n	8011a6c <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a60:	23ff      	movs	r3, #255	@ 0xff
 8011a62:	75fb      	strb	r3, [r7, #23]
                        break;
 8011a64:	e002      	b.n	8011a6c <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a66:	f240 2321 	movw	r3, #545	@ 0x221
 8011a6a:	e237      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 8011a6c:	893b      	ldrh	r3, [r7, #8]
 8011a6e:	2bff      	cmp	r3, #255	@ 0xff
 8011a70:	d013      	beq.n	8011a9a <phhalHw_Pn5180_SetCardMode+0x1a2>
 8011a72:	2bff      	cmp	r3, #255	@ 0xff
 8011a74:	dc14      	bgt.n	8011aa0 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8011a76:	2b02      	cmp	r3, #2
 8011a78:	d00c      	beq.n	8011a94 <phhalHw_Pn5180_SetCardMode+0x19c>
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	dc10      	bgt.n	8011aa0 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <phhalHw_Pn5180_SetCardMode+0x190>
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d003      	beq.n	8011a8e <phhalHw_Pn5180_SetCardMode+0x196>
 8011a86:	e00b      	b.n	8011aa0 <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 8011a88:	2399      	movs	r3, #153	@ 0x99
 8011a8a:	75bb      	strb	r3, [r7, #22]
                        break;
 8011a8c:	e05b      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8011a8e:	239a      	movs	r3, #154	@ 0x9a
 8011a90:	75bb      	strb	r3, [r7, #22]
                        break;
 8011a92:	e058      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8011a94:	239b      	movs	r3, #155	@ 0x9b
 8011a96:	75bb      	strb	r3, [r7, #22]
                        break;
 8011a98:	e055      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a9a:	23ff      	movs	r3, #255	@ 0xff
 8011a9c:	75bb      	strb	r3, [r7, #22]
                        break;
 8011a9e:	e052      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011aa0:	f240 2321 	movw	r3, #545	@ 0x221
 8011aa4:	e21a      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 8011aa6:	897b      	ldrh	r3, [r7, #10]
 8011aa8:	2b03      	cmp	r3, #3
 8011aaa:	dc0f      	bgt.n	8011acc <phhalHw_Pn5180_SetCardMode+0x1d4>
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	db1f      	blt.n	8011af0 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8011ab0:	2b03      	cmp	r3, #3
 8011ab2:	d81d      	bhi.n	8011af0 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8011ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8011abc <phhalHw_Pn5180_SetCardMode+0x1c4>)
 8011ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aba:	bf00      	nop
 8011abc:	08011ad3 	.word	0x08011ad3
 8011ac0:	08011ad9 	.word	0x08011ad9
 8011ac4:	08011adf 	.word	0x08011adf
 8011ac8:	08011ae5 	.word	0x08011ae5
 8011acc:	2bff      	cmp	r3, #255	@ 0xff
 8011ace:	d00c      	beq.n	8011aea <phhalHw_Pn5180_SetCardMode+0x1f2>
 8011ad0:	e00e      	b.n	8011af0 <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8011ad6:	e00e      	b.n	8011af6 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8011adc:	e00b      	b.n	8011af6 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 8011ade:	2302      	movs	r3, #2
 8011ae0:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8011ae2:	e008      	b.n	8011af6 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8011ae8:	e005      	b.n	8011af6 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011aea:	23ff      	movs	r3, #255	@ 0xff
 8011aec:	75fb      	strb	r3, [r7, #23]
                    break;
 8011aee:	e002      	b.n	8011af6 <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011af0:	f240 2321 	movw	r3, #545	@ 0x221
 8011af4:	e1f2      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 8011af6:	893b      	ldrh	r3, [r7, #8]
 8011af8:	2b03      	cmp	r3, #3
 8011afa:	dc0f      	bgt.n	8011b1c <phhalHw_Pn5180_SetCardMode+0x224>
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	db1f      	blt.n	8011b40 <phhalHw_Pn5180_SetCardMode+0x248>
 8011b00:	2b03      	cmp	r3, #3
 8011b02:	d81d      	bhi.n	8011b40 <phhalHw_Pn5180_SetCardMode+0x248>
 8011b04:	a201      	add	r2, pc, #4	@ (adr r2, 8011b0c <phhalHw_Pn5180_SetCardMode+0x214>)
 8011b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b0a:	bf00      	nop
 8011b0c:	08011b23 	.word	0x08011b23
 8011b10:	08011b29 	.word	0x08011b29
 8011b14:	08011b2f 	.word	0x08011b2f
 8011b18:	08011b35 	.word	0x08011b35
 8011b1c:	2bff      	cmp	r3, #255	@ 0xff
 8011b1e:	d00c      	beq.n	8011b3a <phhalHw_Pn5180_SetCardMode+0x242>
 8011b20:	e00e      	b.n	8011b40 <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 8011b22:	2380      	movs	r3, #128	@ 0x80
 8011b24:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8011b26:	e00e      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 8011b28:	2381      	movs	r3, #129	@ 0x81
 8011b2a:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8011b2c:	e00b      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 8011b2e:	2382      	movs	r3, #130	@ 0x82
 8011b30:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8011b32:	e008      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 8011b34:	2383      	movs	r3, #131	@ 0x83
 8011b36:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8011b38:	e005      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b3a:	23ff      	movs	r3, #255	@ 0xff
 8011b3c:	75bb      	strb	r3, [r7, #22]
                    break;
 8011b3e:	e002      	b.n	8011b46 <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b40:	f240 2321 	movw	r3, #545	@ 0x221
 8011b44:	e1ca      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 8011b46:	e1a7      	b.n	8011e98 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 8011b48:	897b      	ldrh	r3, [r7, #10]
 8011b4a:	2b03      	cmp	r3, #3
 8011b4c:	dc0e      	bgt.n	8011b6c <phhalHw_Pn5180_SetCardMode+0x274>
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	db1e      	blt.n	8011b90 <phhalHw_Pn5180_SetCardMode+0x298>
 8011b52:	2b03      	cmp	r3, #3
 8011b54:	d81c      	bhi.n	8011b90 <phhalHw_Pn5180_SetCardMode+0x298>
 8011b56:	a201      	add	r2, pc, #4	@ (adr r2, 8011b5c <phhalHw_Pn5180_SetCardMode+0x264>)
 8011b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b5c:	08011b73 	.word	0x08011b73
 8011b60:	08011b79 	.word	0x08011b79
 8011b64:	08011b7f 	.word	0x08011b7f
 8011b68:	08011b85 	.word	0x08011b85
 8011b6c:	2bff      	cmp	r3, #255	@ 0xff
 8011b6e:	d00c      	beq.n	8011b8a <phhalHw_Pn5180_SetCardMode+0x292>
 8011b70:	e00e      	b.n	8011b90 <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 8011b72:	2304      	movs	r3, #4
 8011b74:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8011b76:	e00e      	b.n	8011b96 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 8011b78:	2305      	movs	r3, #5
 8011b7a:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8011b7c:	e00b      	b.n	8011b96 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 8011b7e:	2306      	movs	r3, #6
 8011b80:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8011b82:	e008      	b.n	8011b96 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 8011b84:	2307      	movs	r3, #7
 8011b86:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8011b88:	e005      	b.n	8011b96 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b8a:	23ff      	movs	r3, #255	@ 0xff
 8011b8c:	75fb      	strb	r3, [r7, #23]
                break;
 8011b8e:	e002      	b.n	8011b96 <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b90:	f240 2321 	movw	r3, #545	@ 0x221
 8011b94:	e1a2      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011b96:	893b      	ldrh	r3, [r7, #8]
 8011b98:	2b03      	cmp	r3, #3
 8011b9a:	dc0f      	bgt.n	8011bbc <phhalHw_Pn5180_SetCardMode+0x2c4>
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	db1f      	blt.n	8011be0 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8011ba0:	2b03      	cmp	r3, #3
 8011ba2:	d81d      	bhi.n	8011be0 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8011ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8011bac <phhalHw_Pn5180_SetCardMode+0x2b4>)
 8011ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011baa:	bf00      	nop
 8011bac:	08011bc3 	.word	0x08011bc3
 8011bb0:	08011bc9 	.word	0x08011bc9
 8011bb4:	08011bcf 	.word	0x08011bcf
 8011bb8:	08011bd5 	.word	0x08011bd5
 8011bbc:	2bff      	cmp	r3, #255	@ 0xff
 8011bbe:	d00c      	beq.n	8011bda <phhalHw_Pn5180_SetCardMode+0x2e2>
 8011bc0:	e00e      	b.n	8011be0 <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8011bc2:	2384      	movs	r3, #132	@ 0x84
 8011bc4:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8011bc6:	e00e      	b.n	8011be6 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8011bc8:	2385      	movs	r3, #133	@ 0x85
 8011bca:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8011bcc:	e00b      	b.n	8011be6 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 8011bce:	2386      	movs	r3, #134	@ 0x86
 8011bd0:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8011bd2:	e008      	b.n	8011be6 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8011bd4:	2387      	movs	r3, #135	@ 0x87
 8011bd6:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8011bd8:	e005      	b.n	8011be6 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011bda:	23ff      	movs	r3, #255	@ 0xff
 8011bdc:	75bb      	strb	r3, [r7, #22]
                break;
 8011bde:	e002      	b.n	8011be6 <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011be0:	f240 2321 	movw	r3, #545	@ 0x221
 8011be4:	e17a      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011be6:	e157      	b.n	8011e98 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d05c      	beq.n	8011caa <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d12b      	bne.n	8011c52 <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 8011bfa:	897b      	ldrh	r3, [r7, #10]
 8011bfc:	2bff      	cmp	r3, #255	@ 0xff
 8011bfe:	d00c      	beq.n	8011c1a <phhalHw_Pn5180_SetCardMode+0x322>
 8011c00:	2bff      	cmp	r3, #255	@ 0xff
 8011c02:	dc0d      	bgt.n	8011c20 <phhalHw_Pn5180_SetCardMode+0x328>
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d002      	beq.n	8011c0e <phhalHw_Pn5180_SetCardMode+0x316>
 8011c08:	2b02      	cmp	r3, #2
 8011c0a:	d003      	beq.n	8011c14 <phhalHw_Pn5180_SetCardMode+0x31c>
 8011c0c:	e008      	b.n	8011c20 <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 8011c0e:	2317      	movs	r3, #23
 8011c10:	75fb      	strb	r3, [r7, #23]
                        break;
 8011c12:	e008      	b.n	8011c26 <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 8011c14:	2318      	movs	r3, #24
 8011c16:	75fb      	strb	r3, [r7, #23]
                        break;
 8011c18:	e005      	b.n	8011c26 <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c1a:	23ff      	movs	r3, #255	@ 0xff
 8011c1c:	75fb      	strb	r3, [r7, #23]
                        break;
 8011c1e:	e002      	b.n	8011c26 <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c20:	f240 2321 	movw	r3, #545	@ 0x221
 8011c24:	e15a      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011c26:	893b      	ldrh	r3, [r7, #8]
 8011c28:	2bff      	cmp	r3, #255	@ 0xff
 8011c2a:	d00c      	beq.n	8011c46 <phhalHw_Pn5180_SetCardMode+0x34e>
 8011c2c:	2bff      	cmp	r3, #255	@ 0xff
 8011c2e:	dc0d      	bgt.n	8011c4c <phhalHw_Pn5180_SetCardMode+0x354>
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d002      	beq.n	8011c3a <phhalHw_Pn5180_SetCardMode+0x342>
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d003      	beq.n	8011c40 <phhalHw_Pn5180_SetCardMode+0x348>
 8011c38:	e008      	b.n	8011c4c <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 8011c3a:	2397      	movs	r3, #151	@ 0x97
 8011c3c:	75bb      	strb	r3, [r7, #22]
                        break;
 8011c3e:	e060      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 8011c40:	2398      	movs	r3, #152	@ 0x98
 8011c42:	75bb      	strb	r3, [r7, #22]
                        break;
 8011c44:	e05d      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c46:	23ff      	movs	r3, #255	@ 0xff
 8011c48:	75bb      	strb	r3, [r7, #22]
                        break;
 8011c4a:	e05a      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c4c:	f240 2321 	movw	r3, #545	@ 0x221
 8011c50:	e144      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8011c52:	897b      	ldrh	r3, [r7, #10]
 8011c54:	2bff      	cmp	r3, #255	@ 0xff
 8011c56:	d00c      	beq.n	8011c72 <phhalHw_Pn5180_SetCardMode+0x37a>
 8011c58:	2bff      	cmp	r3, #255	@ 0xff
 8011c5a:	dc0d      	bgt.n	8011c78 <phhalHw_Pn5180_SetCardMode+0x380>
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d002      	beq.n	8011c66 <phhalHw_Pn5180_SetCardMode+0x36e>
 8011c60:	2b02      	cmp	r3, #2
 8011c62:	d003      	beq.n	8011c6c <phhalHw_Pn5180_SetCardMode+0x374>
 8011c64:	e008      	b.n	8011c78 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8011c66:	231a      	movs	r3, #26
 8011c68:	75fb      	strb	r3, [r7, #23]
                        break;
 8011c6a:	e008      	b.n	8011c7e <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8011c6c:	231b      	movs	r3, #27
 8011c6e:	75fb      	strb	r3, [r7, #23]
                        break;
 8011c70:	e005      	b.n	8011c7e <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c72:	23ff      	movs	r3, #255	@ 0xff
 8011c74:	75fb      	strb	r3, [r7, #23]
                        break;
 8011c76:	e002      	b.n	8011c7e <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c78:	f240 2321 	movw	r3, #545	@ 0x221
 8011c7c:	e12e      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011c7e:	893b      	ldrh	r3, [r7, #8]
 8011c80:	2bff      	cmp	r3, #255	@ 0xff
 8011c82:	d00c      	beq.n	8011c9e <phhalHw_Pn5180_SetCardMode+0x3a6>
 8011c84:	2bff      	cmp	r3, #255	@ 0xff
 8011c86:	dc0d      	bgt.n	8011ca4 <phhalHw_Pn5180_SetCardMode+0x3ac>
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d002      	beq.n	8011c92 <phhalHw_Pn5180_SetCardMode+0x39a>
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d003      	beq.n	8011c98 <phhalHw_Pn5180_SetCardMode+0x3a0>
 8011c90:	e008      	b.n	8011ca4 <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8011c92:	239a      	movs	r3, #154	@ 0x9a
 8011c94:	75bb      	strb	r3, [r7, #22]
                        break;
 8011c96:	e034      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8011c98:	239b      	movs	r3, #155	@ 0x9b
 8011c9a:	75bb      	strb	r3, [r7, #22]
                        break;
 8011c9c:	e031      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c9e:	23ff      	movs	r3, #255	@ 0xff
 8011ca0:	75bb      	strb	r3, [r7, #22]
                        break;
 8011ca2:	e02e      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ca4:	f240 2321 	movw	r3, #545	@ 0x221
 8011ca8:	e118      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 8011caa:	897b      	ldrh	r3, [r7, #10]
 8011cac:	2bff      	cmp	r3, #255	@ 0xff
 8011cae:	d00c      	beq.n	8011cca <phhalHw_Pn5180_SetCardMode+0x3d2>
 8011cb0:	2bff      	cmp	r3, #255	@ 0xff
 8011cb2:	dc0d      	bgt.n	8011cd0 <phhalHw_Pn5180_SetCardMode+0x3d8>
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d002      	beq.n	8011cbe <phhalHw_Pn5180_SetCardMode+0x3c6>
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d003      	beq.n	8011cc4 <phhalHw_Pn5180_SetCardMode+0x3cc>
 8011cbc:	e008      	b.n	8011cd0 <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 8011cbe:	2308      	movs	r3, #8
 8011cc0:	75fb      	strb	r3, [r7, #23]
                    break;
 8011cc2:	e008      	b.n	8011cd6 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 8011cc4:	2309      	movs	r3, #9
 8011cc6:	75fb      	strb	r3, [r7, #23]
                    break;
 8011cc8:	e005      	b.n	8011cd6 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011cca:	23ff      	movs	r3, #255	@ 0xff
 8011ccc:	75fb      	strb	r3, [r7, #23]
                    break;
 8011cce:	e002      	b.n	8011cd6 <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011cd0:	f240 2321 	movw	r3, #545	@ 0x221
 8011cd4:	e102      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 8011cd6:	893b      	ldrh	r3, [r7, #8]
 8011cd8:	2bff      	cmp	r3, #255	@ 0xff
 8011cda:	d00c      	beq.n	8011cf6 <phhalHw_Pn5180_SetCardMode+0x3fe>
 8011cdc:	2bff      	cmp	r3, #255	@ 0xff
 8011cde:	dc0d      	bgt.n	8011cfc <phhalHw_Pn5180_SetCardMode+0x404>
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d002      	beq.n	8011cea <phhalHw_Pn5180_SetCardMode+0x3f2>
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d003      	beq.n	8011cf0 <phhalHw_Pn5180_SetCardMode+0x3f8>
 8011ce8:	e008      	b.n	8011cfc <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 8011cea:	2388      	movs	r3, #136	@ 0x88
 8011cec:	75bb      	strb	r3, [r7, #22]
                    break;
 8011cee:	e008      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8011cf0:	2389      	movs	r3, #137	@ 0x89
 8011cf2:	75bb      	strb	r3, [r7, #22]
                    break;
 8011cf4:	e005      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011cf6:	23ff      	movs	r3, #255	@ 0xff
 8011cf8:	75bb      	strb	r3, [r7, #22]
                    break;
 8011cfa:	e002      	b.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011cfc:	f240 2321 	movw	r3, #545	@ 0x221
 8011d00:	e0ec      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 8011d02:	e0c9      	b.n	8011e98 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 8011d04:	897b      	ldrh	r3, [r7, #10]
 8011d06:	2b0b      	cmp	r3, #11
 8011d08:	d002      	beq.n	8011d10 <phhalHw_Pn5180_SetCardMode+0x418>
 8011d0a:	2bff      	cmp	r3, #255	@ 0xff
 8011d0c:	d003      	beq.n	8011d16 <phhalHw_Pn5180_SetCardMode+0x41e>
 8011d0e:	e005      	b.n	8011d1c <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8011d10:	230e      	movs	r3, #14
 8011d12:	75fb      	strb	r3, [r7, #23]
                break;
 8011d14:	e005      	b.n	8011d22 <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011d16:	23ff      	movs	r3, #255	@ 0xff
 8011d18:	75fb      	strb	r3, [r7, #23]
                break;
 8011d1a:	e002      	b.n	8011d22 <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d1c:	f240 2321 	movw	r3, #545	@ 0x221
 8011d20:	e0dc      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011d22:	893b      	ldrh	r3, [r7, #8]
 8011d24:	2b0f      	cmp	r3, #15
 8011d26:	dc25      	bgt.n	8011d74 <phhalHw_Pn5180_SetCardMode+0x47c>
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	dd32      	ble.n	8011d92 <phhalHw_Pn5180_SetCardMode+0x49a>
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	2b0e      	cmp	r3, #14
 8011d30:	d82f      	bhi.n	8011d92 <phhalHw_Pn5180_SetCardMode+0x49a>
 8011d32:	a201      	add	r2, pc, #4	@ (adr r2, 8011d38 <phhalHw_Pn5180_SetCardMode+0x440>)
 8011d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d38:	08011d87 	.word	0x08011d87
 8011d3c:	08011d93 	.word	0x08011d93
 8011d40:	08011d93 	.word	0x08011d93
 8011d44:	08011d93 	.word	0x08011d93
 8011d48:	08011d93 	.word	0x08011d93
 8011d4c:	08011d93 	.word	0x08011d93
 8011d50:	08011d93 	.word	0x08011d93
 8011d54:	08011d93 	.word	0x08011d93
 8011d58:	08011d93 	.word	0x08011d93
 8011d5c:	08011d93 	.word	0x08011d93
 8011d60:	08011d93 	.word	0x08011d93
 8011d64:	08011d87 	.word	0x08011d87
 8011d68:	08011d7b 	.word	0x08011d7b
 8011d6c:	08011d87 	.word	0x08011d87
 8011d70:	08011d81 	.word	0x08011d81
 8011d74:	2bff      	cmp	r3, #255	@ 0xff
 8011d76:	d009      	beq.n	8011d8c <phhalHw_Pn5180_SetCardMode+0x494>
 8011d78:	e00b      	b.n	8011d92 <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 8011d7a:	238d      	movs	r3, #141	@ 0x8d
 8011d7c:	75bb      	strb	r3, [r7, #22]
                break;
 8011d7e:	e00b      	b.n	8011d98 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 8011d80:	238e      	movs	r3, #142	@ 0x8e
 8011d82:	75bb      	strb	r3, [r7, #22]
                break;
 8011d84:	e008      	b.n	8011d98 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8011d86:	f240 2323 	movw	r3, #547	@ 0x223
 8011d8a:	e0a7      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011d8c:	23ff      	movs	r3, #255	@ 0xff
 8011d8e:	75bb      	strb	r3, [r7, #22]
                break;
 8011d90:	e002      	b.n	8011d98 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d92:	f240 2321 	movw	r3, #545	@ 0x221
 8011d96:	e0a1      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011d98:	e07e      	b.n	8011e98 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 8011d9a:	897b      	ldrh	r3, [r7, #10]
 8011d9c:	2b11      	cmp	r3, #17
 8011d9e:	d002      	beq.n	8011da6 <phhalHw_Pn5180_SetCardMode+0x4ae>
 8011da0:	2bff      	cmp	r3, #255	@ 0xff
 8011da2:	d00c      	beq.n	8011dbe <phhalHw_Pn5180_SetCardMode+0x4c6>
 8011da4:	e00e      	b.n	8011dc4 <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 8011da6:	88fb      	ldrh	r3, [r7, #6]
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d005      	beq.n	8011db8 <phhalHw_Pn5180_SetCardMode+0x4c0>
 8011dac:	88fb      	ldrh	r3, [r7, #6]
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d002      	beq.n	8011db8 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011db2:	f240 2321 	movw	r3, #545	@ 0x221
 8011db6:	e091      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 8011db8:	2310      	movs	r3, #16
 8011dba:	75fb      	strb	r3, [r7, #23]
                break;
 8011dbc:	e005      	b.n	8011dca <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011dbe:	23ff      	movs	r3, #255	@ 0xff
 8011dc0:	75fb      	strb	r3, [r7, #23]
                break;
 8011dc2:	e002      	b.n	8011dca <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011dc4:	f240 2321 	movw	r3, #545	@ 0x221
 8011dc8:	e088      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011dca:	893b      	ldrh	r3, [r7, #8]
 8011dcc:	2b16      	cmp	r3, #22
 8011dce:	dc0f      	bgt.n	8011df0 <phhalHw_Pn5180_SetCardMode+0x4f8>
 8011dd0:	2b13      	cmp	r3, #19
 8011dd2:	db1f      	blt.n	8011e14 <phhalHw_Pn5180_SetCardMode+0x51c>
 8011dd4:	3b13      	subs	r3, #19
 8011dd6:	2b03      	cmp	r3, #3
 8011dd8:	d81c      	bhi.n	8011e14 <phhalHw_Pn5180_SetCardMode+0x51c>
 8011dda:	a201      	add	r2, pc, #4	@ (adr r2, 8011de0 <phhalHw_Pn5180_SetCardMode+0x4e8>)
 8011ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de0:	08011df7 	.word	0x08011df7
 8011de4:	08011e03 	.word	0x08011e03
 8011de8:	08011dfd 	.word	0x08011dfd
 8011dec:	08011e09 	.word	0x08011e09
 8011df0:	2bff      	cmp	r3, #255	@ 0xff
 8011df2:	d00c      	beq.n	8011e0e <phhalHw_Pn5180_SetCardMode+0x516>
 8011df4:	e00e      	b.n	8011e14 <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 8011df6:	2390      	movs	r3, #144	@ 0x90
 8011df8:	75bb      	strb	r3, [r7, #22]
                break;
 8011dfa:	e00e      	b.n	8011e1a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 8011dfc:	238f      	movs	r3, #143	@ 0x8f
 8011dfe:	75bb      	strb	r3, [r7, #22]
                break;
 8011e00:	e00b      	b.n	8011e1a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 8011e02:	2392      	movs	r3, #146	@ 0x92
 8011e04:	75bb      	strb	r3, [r7, #22]
                break;
 8011e06:	e008      	b.n	8011e1a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8011e08:	2391      	movs	r3, #145	@ 0x91
 8011e0a:	75bb      	strb	r3, [r7, #22]
                break;
 8011e0c:	e005      	b.n	8011e1a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011e0e:	23ff      	movs	r3, #255	@ 0xff
 8011e10:	75bb      	strb	r3, [r7, #22]
                break;
 8011e12:	e002      	b.n	8011e1a <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e14:	f240 2321 	movw	r3, #545	@ 0x221
 8011e18:	e060      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011e1a:	e03d      	b.n	8011e98 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 8011e1c:	897b      	ldrh	r3, [r7, #10]
 8011e1e:	2bff      	cmp	r3, #255	@ 0xff
 8011e20:	d013      	beq.n	8011e4a <phhalHw_Pn5180_SetCardMode+0x552>
 8011e22:	2bff      	cmp	r3, #255	@ 0xff
 8011e24:	dc14      	bgt.n	8011e50 <phhalHw_Pn5180_SetCardMode+0x558>
 8011e26:	2b02      	cmp	r3, #2
 8011e28:	d00c      	beq.n	8011e44 <phhalHw_Pn5180_SetCardMode+0x54c>
 8011e2a:	2b02      	cmp	r3, #2
 8011e2c:	dc10      	bgt.n	8011e50 <phhalHw_Pn5180_SetCardMode+0x558>
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d002      	beq.n	8011e38 <phhalHw_Pn5180_SetCardMode+0x540>
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d003      	beq.n	8011e3e <phhalHw_Pn5180_SetCardMode+0x546>
 8011e36:	e00b      	b.n	8011e50 <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 8011e38:	230a      	movs	r3, #10
 8011e3a:	75fb      	strb	r3, [r7, #23]
                break;
 8011e3c:	e00b      	b.n	8011e56 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 8011e3e:	230b      	movs	r3, #11
 8011e40:	75fb      	strb	r3, [r7, #23]
            break;
 8011e42:	e008      	b.n	8011e56 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 8011e44:	230c      	movs	r3, #12
 8011e46:	75fb      	strb	r3, [r7, #23]
                break;
 8011e48:	e005      	b.n	8011e56 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011e4a:	23ff      	movs	r3, #255	@ 0xff
 8011e4c:	75fb      	strb	r3, [r7, #23]
                break;
 8011e4e:	e002      	b.n	8011e56 <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e50:	f240 2321 	movw	r3, #545	@ 0x221
 8011e54:	e042      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011e56:	893b      	ldrh	r3, [r7, #8]
 8011e58:	2bff      	cmp	r3, #255	@ 0xff
 8011e5a:	d013      	beq.n	8011e84 <phhalHw_Pn5180_SetCardMode+0x58c>
 8011e5c:	2bff      	cmp	r3, #255	@ 0xff
 8011e5e:	dc14      	bgt.n	8011e8a <phhalHw_Pn5180_SetCardMode+0x592>
 8011e60:	2b02      	cmp	r3, #2
 8011e62:	d00c      	beq.n	8011e7e <phhalHw_Pn5180_SetCardMode+0x586>
 8011e64:	2b02      	cmp	r3, #2
 8011e66:	dc10      	bgt.n	8011e8a <phhalHw_Pn5180_SetCardMode+0x592>
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d002      	beq.n	8011e72 <phhalHw_Pn5180_SetCardMode+0x57a>
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d003      	beq.n	8011e78 <phhalHw_Pn5180_SetCardMode+0x580>
 8011e70:	e00b      	b.n	8011e8a <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 8011e72:	238a      	movs	r3, #138	@ 0x8a
 8011e74:	75bb      	strb	r3, [r7, #22]
                break;
 8011e76:	e00b      	b.n	8011e90 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 8011e78:	238b      	movs	r3, #139	@ 0x8b
 8011e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8011e7c:	e008      	b.n	8011e90 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 8011e7e:	238c      	movs	r3, #140	@ 0x8c
 8011e80:	75bb      	strb	r3, [r7, #22]
                break;
 8011e82:	e005      	b.n	8011e90 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011e84:	23ff      	movs	r3, #255	@ 0xff
 8011e86:	75bb      	strb	r3, [r7, #22]
                break;
 8011e88:	e002      	b.n	8011e90 <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e8a:	f240 2321 	movw	r3, #545	@ 0x221
 8011e8e:	e025      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 8011e90:	e002      	b.n	8011e98 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e92:	f240 2321 	movw	r3, #545	@ 0x221
 8011e96:	e021      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
 8011e9a:	2bff      	cmp	r3, #255	@ 0xff
 8011e9c:	d102      	bne.n	8011ea4 <phhalHw_Pn5180_SetCardMode+0x5ac>
 8011e9e:	7dbb      	ldrb	r3, [r7, #22]
 8011ea0:	2bff      	cmp	r3, #255	@ 0xff
 8011ea2:	d00c      	beq.n	8011ebe <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011ea4:	7dba      	ldrb	r2, [r7, #22]
 8011ea6:	7dfb      	ldrb	r3, [r7, #23]
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	68f8      	ldr	r0, [r7, #12]
 8011eac:	f7fe ffc8 	bl	8010e40 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	82bb      	strh	r3, [r7, #20]
 8011eb4:	8abb      	ldrh	r3, [r7, #20]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <phhalHw_Pn5180_SetCardMode+0x5c6>
 8011eba:	8abb      	ldrh	r3, [r7, #20]
 8011ebc:	e00e      	b.n	8011edc <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011ebe:	897b      	ldrh	r3, [r7, #10]
 8011ec0:	2bff      	cmp	r3, #255	@ 0xff
 8011ec2:	d003      	beq.n	8011ecc <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	897a      	ldrh	r2, [r7, #10]
 8011ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011ecc:	893b      	ldrh	r3, [r7, #8]
 8011ece:	2bff      	cmp	r3, #255	@ 0xff
 8011ed0:	d003      	beq.n	8011eda <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	893a      	ldrh	r2, [r7, #8]
 8011ed6:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 8011eda:	2300      	movs	r3, #0
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3718      	adds	r7, #24
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b088      	sub	sp, #32
 8011ee8:	af02      	add	r7, sp, #8
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	460b      	mov	r3, r1
 8011eee:	807b      	strh	r3, [r7, #2]
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8011ef8:	787b      	ldrb	r3, [r7, #1]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d005      	beq.n	8011f0a <phhalHw_Pn5180_SetTmo+0x26>
 8011efe:	787b      	ldrb	r3, [r7, #1]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d002      	beq.n	8011f0a <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011f04:	f240 2321 	movw	r3, #545	@ 0x221
 8011f08:	e051      	b.n	8011fae <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 8011f0a:	887b      	ldrh	r3, [r7, #2]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d101      	bne.n	8011f14 <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 8011f10:	2300      	movs	r3, #0
 8011f12:	e04c      	b.n	8011fae <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 8011f14:	787b      	ldrb	r3, [r7, #1]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d125      	bne.n	8011f66 <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8011f20:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8011f24:	d20d      	bcs.n	8011f42 <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 8011f26:	f107 030c 	add.w	r3, r7, #12
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 f97a 	bl	8012228 <phhalHw_Pn5180_Int_GetDigiDelay>
 8011f34:	4603      	mov	r3, r0
 8011f36:	81fb      	strh	r3, [r7, #14]
 8011f38:	89fb      	ldrh	r3, [r7, #14]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d001      	beq.n	8011f42 <phhalHw_Pn5180_SetTmo+0x5e>
 8011f3e:	89fb      	ldrh	r3, [r7, #14]
 8011f40:	e035      	b.n	8011fae <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 8011f42:	2300      	movs	r3, #0
 8011f44:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 8011f46:	f240 534c 	movw	r3, #1356	@ 0x54c
 8011f4a:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 8011f4c:	887b      	ldrh	r3, [r7, #2]
 8011f4e:	89ba      	ldrh	r2, [r7, #12]
 8011f50:	4413      	add	r3, r2
 8011f52:	461a      	mov	r2, r3
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	fb02 f303 	mul.w	r3, r2, r3
 8011f5a:	4a17      	ldr	r2, [pc, #92]	@ (8011fb8 <phhalHw_Pn5180_SetTmo+0xd4>)
 8011f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8011f60:	095b      	lsrs	r3, r3, #5
 8011f62:	613b      	str	r3, [r7, #16]
 8011f64:	e00f      	b.n	8011f86 <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 8011f66:	233c      	movs	r3, #60	@ 0x3c
 8011f68:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 8011f6a:	887b      	ldrh	r3, [r7, #2]
 8011f6c:	f644 5248 	movw	r2, #19784	@ 0x4d48
 8011f70:	4293      	cmp	r3, r2
 8011f72:	d805      	bhi.n	8011f80 <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 8011f74:	887b      	ldrh	r3, [r7, #2]
 8011f76:	2235      	movs	r2, #53	@ 0x35
 8011f78:	fb02 f303 	mul.w	r3, r2, r3
 8011f7c:	613b      	str	r3, [r7, #16]
 8011f7e:	e002      	b.n	8011f86 <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011f80:	f240 2322 	movw	r3, #546	@ 0x222
 8011f84:	e013      	b.n	8011fae <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	9301      	str	r3, [sp, #4]
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011f96:	210f      	movs	r1, #15
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7ff f938 	bl	801120e <phhalHw_Pn5180_TimerStart>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	81fb      	strh	r3, [r7, #14]
 8011fa2:	89fb      	ldrh	r3, [r7, #14]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d001      	beq.n	8011fac <phhalHw_Pn5180_SetTmo+0xc8>
 8011fa8:	89fb      	ldrh	r3, [r7, #14]
 8011faa:	e000      	b.n	8011fae <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3718      	adds	r7, #24
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	51eb851f 	.word	0x51eb851f

08011fbc <phhalHw_Pn5180_Int_Wait>:

phStatus_t phhalHw_Pn5180_Int_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint32_t dwLoadValue,
    uint32_t wPrescaler)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b094      	sub	sp, #80	@ 0x50
 8011fc0:	af02      	add	r7, sp, #8
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwIrqStatusReg;

    /* Setting Timer1 & Reload value Registers */
    bTmrConfigReg = TIMER0_CONFIG;
 8011fc8:	230e      	movs	r3, #14
 8011fca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bTmrReloadReg = TIMER0_RELOAD;
 8011fce:	230b      	movs	r3, #11
 8011fd0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	643b      	str	r3, [r7, #64]	@ 0x40

    /*write 0 to stop timer1*/
    wSizeOfRegTypeValueSets = 0U;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8011fdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011fde:	1c5a      	adds	r2, r3, #1
 8011fe0:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8011fe2:	3348      	adds	r3, #72	@ 0x48
 8011fe4:	443b      	add	r3, r7
 8011fe6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8011fea:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8011fee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ff0:	1c5a      	adds	r2, r3, #1
 8011ff2:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8011ff4:	3348      	adds	r3, #72	@ 0x48
 8011ff6:	443b      	add	r3, r7
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8011ffe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012000:	1c5a      	adds	r2, r3, #1
 8012002:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8012004:	3348      	adds	r3, #72	@ 0x48
 8012006:	443b      	add	r3, r7
 8012008:	2200      	movs	r2, #0
 801200a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801200e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012010:	1c5a      	adds	r2, r3, #1
 8012012:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8012014:	3348      	adds	r3, #72	@ 0x48
 8012016:	443b      	add	r3, r7
 8012018:	2200      	movs	r2, #0
 801201a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801201e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8012024:	3348      	adds	r3, #72	@ 0x48
 8012026:	443b      	add	r3, r7
 8012028:	2200      	movs	r2, #0
 801202a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801202e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012030:	1c5a      	adds	r2, r3, #1
 8012032:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8012034:	3348      	adds	r3, #72	@ 0x48
 8012036:	443b      	add	r3, r7
 8012038:	2200      	movs	r2, #0
 801203a:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /*load the timer 2 reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012044:	63bb      	str	r3, [r7, #56]	@ 0x38
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrReloadReg;
 8012046:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012048:	1c5a      	adds	r2, r3, #1
 801204a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801204c:	3348      	adds	r3, #72	@ 0x48
 801204e:	443b      	add	r3, r7
 8012050:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8012054:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8012058:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801205e:	3348      	adds	r3, #72	@ 0x48
 8012060:	443b      	add	r3, r7
 8012062:	2201      	movs	r2, #1
 8012064:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012068:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801206a:	1c5a      	adds	r2, r3, #1
 801206c:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801206e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012070:	b2d2      	uxtb	r2, r2
 8012072:	3348      	adds	r3, #72	@ 0x48
 8012074:	443b      	add	r3, r7
 8012076:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 801207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207c:	0a1a      	lsrs	r2, r3, #8
 801207e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012080:	1c59      	adds	r1, r3, #1
 8012082:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8012084:	b2d2      	uxtb	r2, r2
 8012086:	3348      	adds	r3, #72	@ 0x48
 8012088:	443b      	add	r3, r7
 801208a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801208e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012090:	0c1a      	lsrs	r2, r3, #16
 8012092:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012094:	1c59      	adds	r1, r3, #1
 8012096:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8012098:	b2d2      	uxtb	r2, r2
 801209a:	3348      	adds	r3, #72	@ 0x48
 801209c:	443b      	add	r3, r7
 801209e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80120a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120a4:	0e1a      	lsrs	r2, r3, #24
 80120a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120a8:	1c59      	adds	r1, r3, #1
 80120aa:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80120ac:	b2d2      	uxtb	r2, r2
 80120ae:	3348      	adds	r3, #72	@ 0x48
 80120b0:	443b      	add	r3, r7
 80120b2:	f803 2c2c 	strb.w	r2, [r3, #-44]

    dwStartCond = TIMER0_CONFIG_T0_START_NOW_MASK;
 80120b6:	2340      	movs	r3, #64	@ 0x40
 80120b8:	637b      	str	r3, [r7, #52]	@ 0x34
    dwStopCond = 0x00U;
 80120ba:	2300      	movs	r3, #0
 80120bc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* T2_MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask);
 80120be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120c2:	431a      	orrs	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80120ca:	4313      	orrs	r3, r2
 80120cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80120ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120d0:	1c5a      	adds	r2, r3, #1
 80120d2:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80120d4:	3348      	adds	r3, #72	@ 0x48
 80120d6:	443b      	add	r3, r7
 80120d8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80120dc:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80120e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80120e6:	3348      	adds	r3, #72	@ 0x48
 80120e8:	443b      	add	r3, r7
 80120ea:	2201      	movs	r2, #1
 80120ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80120f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80120f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120f8:	b2d2      	uxtb	r2, r2
 80120fa:	3348      	adds	r3, #72	@ 0x48
 80120fc:	443b      	add	r3, r7
 80120fe:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012104:	0a1a      	lsrs	r2, r3, #8
 8012106:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012108:	1c59      	adds	r1, r3, #1
 801210a:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 801210c:	b2d2      	uxtb	r2, r2
 801210e:	3348      	adds	r3, #72	@ 0x48
 8012110:	443b      	add	r3, r7
 8012112:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012118:	0c1a      	lsrs	r2, r3, #16
 801211a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801211c:	1c59      	adds	r1, r3, #1
 801211e:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8012120:	b2d2      	uxtb	r2, r2
 8012122:	3348      	adds	r3, #72	@ 0x48
 8012124:	443b      	add	r3, r7
 8012126:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801212a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801212c:	0e1a      	lsrs	r2, r3, #24
 801212e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012130:	1c59      	adds	r1, r3, #1
 8012132:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8012134:	b2d2      	uxtb	r2, r2
 8012136:	3348      	adds	r3, #72	@ 0x48
 8012138:	443b      	add	r3, r7
 801213a:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /* Clear Interrupt  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_TIMER0_IRQ_CLR_MASK));
 801213e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012142:	2103      	movs	r1, #3
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f7fd ff81 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 801214a:	4603      	mov	r3, r0
 801214c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801214e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012150:	2b00      	cmp	r3, #0
 8012152:	d001      	beq.n	8012158 <phhalHw_Pn5180_Int_Wait+0x19c>
 8012154:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012156:	e05c      	b.n	8012212 <phhalHw_Pn5180_Int_Wait+0x256>
    phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 801215e:	2300      	movs	r3, #0
 8012160:	2201      	movs	r2, #1
 8012162:	2100      	movs	r1, #0
 8012164:	f005 f9ae 	bl	80174c4 <phOsal_EventClear>
    /* Enable IRQ source */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_TIMER0_IRQ_SET_ENABLE_MASK));
 8012168:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801216c:	2101      	movs	r1, #1
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f7fd ff6c 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 8012174:	4603      	mov	r3, r0
 8012176:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012178:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <phhalHw_Pn5180_Int_Wait+0x1c6>
 801217e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012180:	e047      	b.n	8012212 <phhalHw_Pn5180_Int_Wait+0x256>
    /*Start the timer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8012182:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012184:	f107 031c 	add.w	r3, r7, #28
 8012188:	4619      	mov	r1, r3
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f7fe f8c0 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8012190:	4603      	mov	r3, r0
 8012192:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012194:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <phhalHw_Pn5180_Int_Wait+0x1e2>
 801219a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801219c:	e039      	b.n	8012212 <phhalHw_Pn5180_Int_Wait+0x256>

    uint32_t irqEnable;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_ENABLE, &irqEnable);
 801219e:	f107 0314 	add.w	r3, r7, #20
 80121a2:	461a      	mov	r2, r3
 80121a4:	2101      	movs	r1, #1
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7fe f964 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
    printf("Before WaitIrq, we should check IRQ_ENABLE Register first.\nIRQ_ENABLE before wait: 0x%08X\n", irqEnable);
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	4619      	mov	r1, r3
 80121b0:	481a      	ldr	r0, [pc, #104]	@ (801221c <phhalHw_Pn5180_Int_Wait+0x260>)
 80121b2:	f00b f84d 	bl	801d250 <iprintf>
    // 检查当前IRQ_STATUS
    uint32_t irqStatus;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &irqStatus);
 80121b6:	f107 0310 	add.w	r3, r7, #16
 80121ba:	461a      	mov	r2, r3
 80121bc:	2102      	movs	r1, #2
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7fe f958 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
    printf("IRQ_STATUS before wait: 0x%08X\n", irqStatus);
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	4619      	mov	r1, r3
 80121c8:	4815      	ldr	r0, [pc, #84]	@ (8012220 <phhalHw_Pn5180_Int_Wait+0x264>)
 80121ca:	f00b f841 	bl	801d250 <iprintf>

    /* Wait for the timer0 to expire. */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_WaitIrq(pDataParams,PH_ON,PH_OFF,IRQ_STATUS_TIMER0_IRQ_MASK,&dwIrqStatusReg));
 80121ce:	f107 0318 	add.w	r3, r7, #24
 80121d2:	9300      	str	r3, [sp, #0]
 80121d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80121d8:	2200      	movs	r2, #0
 80121da:	2101      	movs	r1, #1
 80121dc:	68f8      	ldr	r0, [r7, #12]
 80121de:	f000 fbdf 	bl	80129a0 <phhalHw_Pn5180_WaitIrq>
 80121e2:	4603      	mov	r3, r0
 80121e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80121e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <phhalHw_Pn5180_Int_Wait+0x234>
 80121ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121ee:	e010      	b.n	8012212 <phhalHw_Pn5180_Int_Wait+0x256>
    printf("\n -----debug 0.5-----\n");
 80121f0:	480c      	ldr	r0, [pc, #48]	@ (8012224 <phhalHw_Pn5180_Int_Wait+0x268>)
 80121f2:	f00b f89d 	bl	801d330 <puts>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams,TIMER0_CONFIG, (uint32_t)(~TIMER0_CONFIG_T0_ENABLE_MASK)));
 80121f6:	f06f 0201 	mvn.w	r2, #1
 80121fa:	210e      	movs	r1, #14
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f7fe f811 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012202:	4603      	mov	r3, r0
 8012204:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012206:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012208:	2b00      	cmp	r3, #0
 801220a:	d001      	beq.n	8012210 <phhalHw_Pn5180_Int_Wait+0x254>
 801220c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801220e:	e000      	b.n	8012212 <phhalHw_Pn5180_Int_Wait+0x256>
    return PH_ERR_SUCCESS;
 8012210:	2300      	movs	r3, #0
}
 8012212:	4618      	mov	r0, r3
 8012214:	3748      	adds	r7, #72	@ 0x48
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	0801fc20 	.word	0x0801fc20
 8012220:	0801fc7c 	.word	0x0801fc7c
 8012224:	0801fc9c 	.word	0x0801fc9c

08012228 <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 8012228:	b480      	push	{r7}
 801222a:	b087      	sub	sp, #28
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	460b      	mov	r3, r1
 8012232:	607a      	str	r2, [r7, #4]
 8012234:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 801223c:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012244:	3b01      	subs	r3, #1
 8012246:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801224e:	3b01      	subs	r3, #1
 8012250:	2b09      	cmp	r3, #9
 8012252:	f200 8086 	bhi.w	8012362 <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 8012256:	a201      	add	r2, pc, #4	@ (adr r2, 801225c <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 8012258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801225c:	08012285 	.word	0x08012285
 8012260:	08012285 	.word	0x08012285
 8012264:	080122c3 	.word	0x080122c3
 8012268:	080122db 	.word	0x080122db
 801226c:	080122f1 	.word	0x080122f1
 8012270:	080122ff 	.word	0x080122ff
 8012274:	08012363 	.word	0x08012363
 8012278:	08012363 	.word	0x08012363
 801227c:	08012363 	.word	0x08012363
 8012280:	080122c3 	.word	0x080122c3
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 8012284:	7d7a      	ldrb	r2, [r7, #21]
 8012286:	8afb      	ldrh	r3, [r7, #22]
 8012288:	493b      	ldr	r1, [pc, #236]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801228a:	0092      	lsls	r2, r2, #2
 801228c:	4413      	add	r3, r2
 801228e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 8012296:	7afb      	ldrb	r3, [r7, #11]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d005      	beq.n	80122a8 <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	881b      	ldrh	r3, [r3, #0]
 80122a0:	330f      	adds	r3, #15
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d15a      	bne.n	8012368 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	881b      	ldrh	r3, [r3, #0]
 80122b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	801a      	strh	r2, [r3, #0]
        }
        break;
 80122c0:	e052      	b.n	8012368 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 80122c2:	2302      	movs	r3, #2
 80122c4:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80122c6:	7d7a      	ldrb	r2, [r7, #21]
 80122c8:	8afb      	ldrh	r3, [r7, #22]
 80122ca:	492b      	ldr	r1, [pc, #172]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80122cc:	0092      	lsls	r2, r2, #2
 80122ce:	4413      	add	r3, r2
 80122d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	801a      	strh	r2, [r3, #0]
        break;
 80122d8:	e047      	b.n	801236a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 80122da:	7d7a      	ldrb	r2, [r7, #21]
 80122dc:	8afb      	ldrh	r3, [r7, #22]
 80122de:	3b0c      	subs	r3, #12
 80122e0:	4925      	ldr	r1, [pc, #148]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80122e2:	0092      	lsls	r2, r2, #2
 80122e4:	4413      	add	r3, r2
 80122e6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	801a      	strh	r2, [r3, #0]
        break;
 80122ee:	e03c      	b.n	801236a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 80122f0:	7d7b      	ldrb	r3, [r7, #21]
 80122f2:	4a21      	ldr	r2, [pc, #132]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80122f4:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	801a      	strh	r2, [r3, #0]
        break;
 80122fc:	e035      	b.n	801236a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 80122fe:	8afb      	ldrh	r3, [r7, #22]
 8012300:	3b13      	subs	r3, #19
 8012302:	2b03      	cmp	r3, #3
 8012304:	d829      	bhi.n	801235a <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 8012306:	a201      	add	r2, pc, #4	@ (adr r2, 801230c <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 8012308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801230c:	0801231d 	.word	0x0801231d
 8012310:	0801233b 	.word	0x0801233b
 8012314:	0801232b 	.word	0x0801232b
 8012318:	0801234b 	.word	0x0801234b
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 801231c:	7d7b      	ldrb	r3, [r7, #21]
 801231e:	4a16      	ldr	r2, [pc, #88]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8012320:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	801a      	strh	r2, [r3, #0]
                break;
 8012328:	e01a      	b.n	8012360 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 801232a:	7d7b      	ldrb	r3, [r7, #21]
 801232c:	4a12      	ldr	r2, [pc, #72]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801232e:	00db      	lsls	r3, r3, #3
 8012330:	4413      	add	r3, r2
 8012332:	885a      	ldrh	r2, [r3, #2]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	801a      	strh	r2, [r3, #0]
                break;
 8012338:	e012      	b.n	8012360 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 801233a:	7d7b      	ldrb	r3, [r7, #21]
 801233c:	4a0e      	ldr	r2, [pc, #56]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801233e:	00db      	lsls	r3, r3, #3
 8012340:	4413      	add	r3, r2
 8012342:	889a      	ldrh	r2, [r3, #4]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	801a      	strh	r2, [r3, #0]
                break;
 8012348:	e00a      	b.n	8012360 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 801234a:	7d7b      	ldrb	r3, [r7, #21]
 801234c:	4a0a      	ldr	r2, [pc, #40]	@ (8012378 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801234e:	00db      	lsls	r3, r3, #3
 8012350:	4413      	add	r3, r2
 8012352:	88da      	ldrh	r2, [r3, #6]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	801a      	strh	r2, [r3, #0]
                break;
 8012358:	e002      	b.n	8012360 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801235a:	f240 237f 	movw	r3, #639	@ 0x27f
 801235e:	e005      	b.n	801236c <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 8012360:	e003      	b.n	801236a <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8012362:	f240 237f 	movw	r3, #639	@ 0x27f
 8012366:	e001      	b.n	801236c <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 8012368:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801236a:	2300      	movs	r3, #0
}
 801236c:	4618      	mov	r0, r3
 801236e:	371c      	adds	r7, #28
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr
 8012378:	08020754 	.word	0x08020754

0801237c <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 801237c:	b5b0      	push	{r4, r5, r7, lr}
 801237e:	b094      	sub	sp, #80	@ 0x50
 8012380:	af04      	add	r7, sp, #16
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
 8012388:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 801238a:	2300      	movs	r3, #0
 801238c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 801238e:	2300      	movs	r3, #0
 8012390:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8012392:	2300      	movs	r3, #0
 8012394:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 8012396:	2300      	movs	r3, #0
 8012398:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 801239a:	2300      	movs	r3, #0
 801239c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 801239e:	2300      	movs	r3, #0
 80123a0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 80123a4:	2300      	movs	r3, #0
 80123a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 80123aa:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 80123ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2200      	movs	r2, #0
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f000 faf1 	bl	80129a0 <phhalHw_Pn5180_WaitIrq>
 80123be:	4603      	mov	r3, r0
 80123c0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80123c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d001      	beq.n	80123cc <phhalHw_Pn5180_Receive_Int+0x50>
 80123c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123ca:	e233      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	d10d      	bne.n	80123f2 <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 80123d6:	f107 0318 	add.w	r3, r7, #24
 80123da:	461a      	mov	r2, r3
 80123dc:	211d      	movs	r1, #29
 80123de:	68f8      	ldr	r0, [r7, #12]
 80123e0:	f7fe f848 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 80123e4:	4603      	mov	r3, r0
 80123e6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80123e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d001      	beq.n	80123f2 <phhalHw_Pn5180_Receive_Int+0x76>
 80123ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123f0:	e220      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 80123f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 80123fc:	237f      	movs	r3, #127	@ 0x7f
 80123fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012400:	e089      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012408:	2b01      	cmp	r3, #1
 801240a:	d10f      	bne.n	801242c <phhalHw_Pn5180_Receive_Int+0xb0>
 801240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801240e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012412:	2b00      	cmp	r3, #0
 8012414:	d00a      	beq.n	801242c <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012418:	f003 0301 	and.w	r3, r3, #1
 801241c:	2b00      	cmp	r3, #0
 801241e:	d002      	beq.n	8012426 <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 8012420:	2300      	movs	r3, #0
 8012422:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012424:	e077      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 8012426:	2301      	movs	r3, #1
 8012428:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801242a:	e074      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 801242c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801242e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012432:	2b00      	cmp	r3, #0
 8012434:	d02e      	beq.n	8012494 <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801243c:	2b00      	cmp	r3, #0
 801243e:	d009      	beq.n	8012454 <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 8012440:	68f8      	ldr	r0, [r7, #12]
 8012442:	f7fa ffbf 	bl	800d3c4 <phhalHw_Pn5180_FieldReset>
 8012446:	4603      	mov	r3, r0
 8012448:	867b      	strh	r3, [r7, #50]	@ 0x32
 801244a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801244c:	2b00      	cmp	r3, #0
 801244e:	d001      	beq.n	8012454 <phhalHw_Pn5180_Receive_Int+0xd8>
 8012450:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012452:	e1ef      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 8012454:	2301      	movs	r3, #1
 8012456:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801245e:	2b01      	cmp	r3, #1
 8012460:	d159      	bne.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012466:	2b00      	cmp	r3, #0
 8012468:	d155      	bne.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012470:	2b00      	cmp	r3, #0
 8012472:	d007      	beq.n	8012484 <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 8012474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801247a:	2b00      	cmp	r3, #0
 801247c:	d14b      	bne.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 801247e:	237f      	movs	r3, #127	@ 0x7f
 8012480:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012482:	e048      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801248a:	2b00      	cmp	r3, #0
 801248c:	d043      	beq.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 801248e:	2310      	movs	r3, #16
 8012490:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012492:	e040      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801249a:	2b01      	cmp	r3, #1
 801249c:	d123      	bne.n	80124e6 <phhalHw_Pn5180_Receive_Int+0x16a>
 801249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d01e      	beq.n	80124e6 <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	0b5b      	lsrs	r3, r3, #13
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	f003 0307 	and.w	r3, r3, #7
 80124b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d009      	beq.n	80124d2 <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 80124be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80124c2:	2b04      	cmp	r3, #4
 80124c4:	d002      	beq.n	80124cc <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 80124c6:	2310      	movs	r3, #16
 80124c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80124ca:	e024      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 80124cc:	2344      	movs	r3, #68	@ 0x44
 80124ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80124d0:	e021      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 80124d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80124d6:	2b04      	cmp	r3, #4
 80124d8:	d102      	bne.n	80124e0 <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 80124da:	2301      	movs	r3, #1
 80124dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80124de:	e01a      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 80124e0:	2310      	movs	r3, #16
 80124e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80124e4:	e017      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 80124e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d012      	beq.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d106      	bne.n	8012508 <phhalHw_Pn5180_Receive_Int+0x18c>
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 8012502:	2310      	movs	r3, #16
 8012504:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012506:	e006      	b.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 8012508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801250a:	f003 0301 	and.w	r3, r3, #1
 801250e:	2b00      	cmp	r3, #0
 8012510:	d101      	bne.n	8012516 <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8012512:	2302      	movs	r3, #2
 8012514:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 8012516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012518:	f003 0301 	and.w	r3, r3, #1
 801251c:	2b00      	cmp	r3, #0
 801251e:	f000 8174 	beq.w	801280a <phhalHw_Pn5180_Receive_Int+0x48e>
 8012522:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 8170 	bne.w	801280a <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2200      	movs	r2, #0
 801252e:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8012530:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8012534:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012538:	f107 0320 	add.w	r3, r7, #32
 801253c:	9300      	str	r3, [sp, #0]
 801253e:	460b      	mov	r3, r1
 8012540:	2101      	movs	r1, #1
 8012542:	68f8      	ldr	r0, [r7, #12]
 8012544:	f7fe fd8f 	bl	8011066 <phhalHw_Pn5180_GetRxBuffer>
 8012548:	4603      	mov	r3, r0
 801254a:	867b      	strh	r3, [r7, #50]	@ 0x32
 801254c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801254e:	2b00      	cmp	r3, #0
 8012550:	d001      	beq.n	8012556 <phhalHw_Pn5180_Receive_Int+0x1da>
 8012552:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012554:	e16e      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801255c:	2b01      	cmp	r3, #1
 801255e:	d103      	bne.n	8012568 <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 8012560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 8012568:	f107 031c 	add.w	r3, r7, #28
 801256c:	461a      	mov	r2, r3
 801256e:	2113      	movs	r1, #19
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f7fa f9b9 	bl	800c8e8 <phhalHw_Pn5180_ReadRegister>
 8012576:	4603      	mov	r3, r0
 8012578:	867b      	strh	r3, [r7, #50]	@ 0x32
 801257a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801257c:	2b00      	cmp	r3, #0
 801257e:	d001      	beq.n	8012584 <phhalHw_Pn5180_Receive_Int+0x208>
 8012580:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012582:	e157      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801258a:	2b01      	cmp	r3, #1
 801258c:	d110      	bne.n	80125b0 <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	b29b      	uxth	r3, r3
 8012592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012596:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 8012598:	69fb      	ldr	r3, [r7, #28]
 801259a:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801259c:	b29b      	uxth	r3, r3
 801259e:	f003 030f 	and.w	r3, r3, #15
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	015b      	lsls	r3, r3, #5
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	4313      	orrs	r3, r2
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 80125ae:	e005      	b.n	80125bc <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 80125bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00c      	beq.n	80125dc <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80125c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125c4:	461a      	mov	r2, r3
 80125c6:	6879      	ldr	r1, [r7, #4]
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7fe f963 	bl	8010894 <phhalHw_Pn5180_Instr_RetrieveRxData>
 80125ce:	4603      	mov	r3, r0
 80125d0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80125d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d001      	beq.n	80125dc <phhalHw_Pn5180_Receive_Int+0x260>
 80125d8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80125da:	e12b      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 80125dc:	69fb      	ldr	r3, [r7, #28]
 80125de:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80125e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 80125e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e6:	0b5b      	lsrs	r3, r3, #13
 80125e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 80125ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d044      	beq.n	8012686 <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 80125fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d107      	bne.n	8012612 <phhalHw_Pn5180_Receive_Int+0x296>
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8012608:	2b00      	cmp	r3, #0
 801260a:	d102      	bne.n	8012612 <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 801260c:	2301      	movs	r3, #1
 801260e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012610:	e051      	b.n	80126b6 <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 8012612:	2303      	movs	r3, #3
 8012614:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 801261c:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 801261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012620:	0cdb      	lsrs	r3, r3, #19
 8012622:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 8012624:	8c3a      	ldrh	r2, [r7, #32]
 8012626:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012628:	4413      	add	r3, r2
 801262a:	b29b      	uxth	r3, r3
 801262c:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 801262e:	8c3b      	ldrh	r3, [r7, #32]
 8012630:	461a      	mov	r2, r3
 8012632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012634:	4293      	cmp	r3, r2
 8012636:	d904      	bls.n	8012642 <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 8012638:	8c3b      	ldrh	r3, [r7, #32]
 801263a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 801263c:	2304      	movs	r3, #4
 801263e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012640:	e004      	b.n	801264c <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 8012642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012644:	b29b      	uxth	r3, r3
 8012646:	08db      	lsrs	r3, r3, #3
 8012648:	b29b      	uxth	r3, r3
 801264a:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 801264c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801264e:	2b07      	cmp	r3, #7
 8012650:	d904      	bls.n	801265c <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 8012652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012654:	f003 0307 	and.w	r3, r3, #7
 8012658:	61fb      	str	r3, [r7, #28]
 801265a:	e001      	b.n	8012660 <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 801265c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801265e:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d00a      	beq.n	801267c <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 8012666:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012668:	8c3b      	ldrh	r3, [r7, #32]
 801266a:	429a      	cmp	r2, r3
 801266c:	d102      	bne.n	8012674 <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 801266e:	2304      	movs	r3, #4
 8012670:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012672:	e003      	b.n	801267c <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 8012674:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012676:	3301      	adds	r3, #1
 8012678:	b29b      	uxth	r3, r3
 801267a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	b29a      	uxth	r2, r3
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012684:	e017      	b.n	80126b6 <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8012690:	2302      	movs	r3, #2
 8012692:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012694:	e00f      	b.n	80126b6 <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 80126a0:	2306      	movs	r3, #6
 80126a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80126a4:	e007      	b.n	80126b6 <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 80126a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d004      	beq.n	80126b6 <phhalHw_Pn5180_Receive_Int+0x33a>
 80126ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ae:	2b08      	cmp	r3, #8
 80126b0:	d001      	beq.n	80126b6 <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 80126b2:	2373      	movs	r3, #115	@ 0x73
 80126b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d117      	bne.n	80126f0 <phhalHw_Pn5180_Receive_Int+0x374>
 80126c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d014      	beq.n	80126f0 <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	2bf0      	cmp	r3, #240	@ 0xf0
 80126ce:	d002      	beq.n	80126d6 <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 80126d0:	f240 2301 	movw	r3, #513	@ 0x201
 80126d4:	e0ae      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 80126d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80126dc:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 80126e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126ea:	3b01      	subs	r3, #1
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	8bda      	ldrh	r2, [r3, #30]
 80126f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126f6:	4413      	add	r3, r2
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d005      	beq.n	8012710 <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	695a      	ldr	r2, [r3, #20]
 8012708:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801270a:	441a      	add	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d003      	beq.n	801271e <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	8b5a      	ldrh	r2, [r3, #26]
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012724:	2b01      	cmp	r3, #1
 8012726:	d169      	bne.n	80127fc <phhalHw_Pn5180_Receive_Int+0x480>
 8012728:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801272a:	2b00      	cmp	r3, #0
 801272c:	d003      	beq.n	8012736 <phhalHw_Pn5180_Receive_Int+0x3ba>
 801272e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b73      	cmp	r3, #115	@ 0x73
 8012734:	d162      	bne.n	80127fc <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d025      	beq.n	8012788 <phhalHw_Pn5180_Receive_Int+0x40c>
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d022      	beq.n	8012788 <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6818      	ldr	r0, [r3, #0]
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 801274e:	b2dd      	uxtb	r5, r3
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	687a      	ldr	r2, [r7, #4]
 8012756:	6812      	ldr	r2, [r2, #0]
 8012758:	f107 0117 	add.w	r1, r7, #23
 801275c:	9103      	str	r1, [sp, #12]
 801275e:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8012762:	9102      	str	r1, [sp, #8]
 8012764:	9201      	str	r2, [sp, #4]
 8012766:	9300      	str	r3, [sp, #0]
 8012768:	462b      	mov	r3, r5
 801276a:	4622      	mov	r2, r4
 801276c:	4601      	mov	r1, r0
 801276e:	2001      	movs	r0, #1
 8012770:	f7f3 fee6 	bl	8006540 <phTools_DecodeParity>
 8012774:	4603      	mov	r3, r0
 8012776:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8012778:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b00      	cmp	r3, #0
 801277e:	d003      	beq.n	8012788 <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 8012780:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012782:	b2db      	uxtb	r3, r3
 8012784:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8012786:	e039      	b.n	80127fc <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 8012788:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801278a:	2b03      	cmp	r3, #3
 801278c:	d933      	bls.n	80127f6 <phhalHw_Pn5180_Receive_Int+0x47a>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d030      	beq.n	80127f6 <phhalHw_Pn5180_Receive_Int+0x47a>
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d02d      	beq.n	80127f6 <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80127a0:	3a02      	subs	r2, #2
 80127a2:	4611      	mov	r1, r2
 80127a4:	f107 0214 	add.w	r2, r7, #20
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f4 f848 	bl	800683e <phTools_ComputeCrc_B>
 80127ae:	4603      	mov	r3, r0
 80127b0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80127b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d001      	beq.n	80127bc <phhalHw_Pn5180_Receive_Int+0x440>
 80127b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80127ba:	e03b      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 80127bc:	7d3a      	ldrb	r2, [r7, #20]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6819      	ldr	r1, [r3, #0]
 80127c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127c4:	3b02      	subs	r3, #2
 80127c6:	440b      	add	r3, r1
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d108      	bne.n	80127e0 <phhalHw_Pn5180_Receive_Int+0x464>
 80127ce:	7d7a      	ldrb	r2, [r7, #21]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6819      	ldr	r1, [r3, #0]
 80127d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127d6:	3b01      	subs	r3, #1
 80127d8:	440b      	add	r3, r1
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d002      	beq.n	80127e6 <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 80127e0:	2302      	movs	r3, #2
 80127e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 80127e4:	e00a      	b.n	80127fc <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 80127e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127e8:	3b02      	subs	r3, #2
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 80127f0:	2300      	movs	r3, #0
 80127f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 80127f4:	e002      	b.n	80127fc <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 80127f6:	2306      	movs	r3, #6
 80127f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 80127fa:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 80127fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012802:	d907      	bls.n	8012814 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 8012804:	2304      	movs	r3, #4
 8012806:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8012808:	e004      	b.n	8012814 <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 801280a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801280c:	2b00      	cmp	r3, #0
 801280e:	d101      	bne.n	8012814 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 8012810:	237f      	movs	r3, #127	@ 0x7f
 8012812:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012814:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00b      	beq.n	8012832 <phhalHw_Pn5180_Receive_Int+0x4b6>
 801281a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801281c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012820:	2b00      	cmp	r3, #0
 8012822:	d106      	bne.n	8012832 <phhalHw_Pn5180_Receive_Int+0x4b6>
 8012824:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012826:	b2db      	uxtb	r3, r3
 8012828:	b29b      	uxth	r3, r3
 801282a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801282e:	b29b      	uxth	r3, r3
 8012830:	e000      	b.n	8012834 <phhalHw_Pn5180_Receive_Int+0x4b8>
 8012832:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8012834:	4618      	mov	r0, r3
 8012836:	3740      	adds	r7, #64	@ 0x40
 8012838:	46bd      	mov	sp, r7
 801283a:	bdb0      	pop	{r4, r5, r7, pc}

0801283c <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b084      	sub	sp, #16
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 8012844:	f06f 0207 	mvn.w	r2, #7
 8012848:	2100      	movs	r1, #0
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7fd fcea 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012850:	4603      	mov	r3, r0
 8012852:	81fb      	strh	r3, [r7, #14]
 8012854:	89fb      	ldrh	r3, [r7, #14]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d001      	beq.n	801285e <phhalHw_Pn5180_Int_IdleCommand+0x22>
 801285a:	89fb      	ldrh	r3, [r7, #14]
 801285c:	e00c      	b.n	8012878 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 801285e:	2204      	movs	r2, #4
 8012860:	2103      	movs	r1, #3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7fd fbf2 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 8012868:	4603      	mov	r3, r0
 801286a:	81fb      	strh	r3, [r7, #14]
 801286c:	89fb      	ldrh	r3, [r7, #14]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d001      	beq.n	8012876 <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 8012872:	89fb      	ldrh	r3, [r7, #14]
 8012874:	e000      	b.n	8012878 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 8012876:	2300      	movs	r3, #0
}
 8012878:	4618      	mov	r0, r3
 801287a:	3710      	adds	r7, #16
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b088      	sub	sp, #32
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	460b      	mov	r3, r1
 801288a:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 801288c:	2300      	movs	r3, #0
 801288e:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 8012890:	f06f 0307 	mvn.w	r3, #7
 8012894:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8012896:	8bfb      	ldrh	r3, [r7, #30]
 8012898:	1c5a      	adds	r2, r3, #1
 801289a:	83fa      	strh	r2, [r7, #30]
 801289c:	3320      	adds	r3, #32
 801289e:	443b      	add	r3, r7
 80128a0:	2200      	movs	r2, #0
 80128a2:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80128a6:	8bfb      	ldrh	r3, [r7, #30]
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	83fa      	strh	r2, [r7, #30]
 80128ac:	3320      	adds	r3, #32
 80128ae:	443b      	add	r3, r7
 80128b0:	2203      	movs	r2, #3
 80128b2:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80128b6:	8bfb      	ldrh	r3, [r7, #30]
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	83fa      	strh	r2, [r7, #30]
 80128bc:	69ba      	ldr	r2, [r7, #24]
 80128be:	b2d2      	uxtb	r2, r2
 80128c0:	3320      	adds	r3, #32
 80128c2:	443b      	add	r3, r7
 80128c4:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	0a1a      	lsrs	r2, r3, #8
 80128cc:	8bfb      	ldrh	r3, [r7, #30]
 80128ce:	1c59      	adds	r1, r3, #1
 80128d0:	83f9      	strh	r1, [r7, #30]
 80128d2:	b2d2      	uxtb	r2, r2
 80128d4:	3320      	adds	r3, #32
 80128d6:	443b      	add	r3, r7
 80128d8:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80128dc:	69bb      	ldr	r3, [r7, #24]
 80128de:	0c1a      	lsrs	r2, r3, #16
 80128e0:	8bfb      	ldrh	r3, [r7, #30]
 80128e2:	1c59      	adds	r1, r3, #1
 80128e4:	83f9      	strh	r1, [r7, #30]
 80128e6:	b2d2      	uxtb	r2, r2
 80128e8:	3320      	adds	r3, #32
 80128ea:	443b      	add	r3, r7
 80128ec:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	0e1a      	lsrs	r2, r3, #24
 80128f4:	8bfb      	ldrh	r3, [r7, #30]
 80128f6:	1c59      	adds	r1, r3, #1
 80128f8:	83f9      	strh	r1, [r7, #30]
 80128fa:	b2d2      	uxtb	r2, r2
 80128fc:	3320      	adds	r3, #32
 80128fe:	443b      	add	r3, r7
 8012900:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 8012904:	78fb      	ldrb	r3, [r7, #3]
 8012906:	f003 0307 	and.w	r3, r3, #7
 801290a:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 801290c:	8bfb      	ldrh	r3, [r7, #30]
 801290e:	1c5a      	adds	r2, r3, #1
 8012910:	83fa      	strh	r2, [r7, #30]
 8012912:	3320      	adds	r3, #32
 8012914:	443b      	add	r3, r7
 8012916:	2200      	movs	r2, #0
 8012918:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 801291c:	8bfb      	ldrh	r3, [r7, #30]
 801291e:	1c5a      	adds	r2, r3, #1
 8012920:	83fa      	strh	r2, [r7, #30]
 8012922:	3320      	adds	r3, #32
 8012924:	443b      	add	r3, r7
 8012926:	2202      	movs	r2, #2
 8012928:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801292c:	8bfb      	ldrh	r3, [r7, #30]
 801292e:	1c5a      	adds	r2, r3, #1
 8012930:	83fa      	strh	r2, [r7, #30]
 8012932:	69ba      	ldr	r2, [r7, #24]
 8012934:	b2d2      	uxtb	r2, r2
 8012936:	3320      	adds	r3, #32
 8012938:	443b      	add	r3, r7
 801293a:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 801293e:	69bb      	ldr	r3, [r7, #24]
 8012940:	0a1a      	lsrs	r2, r3, #8
 8012942:	8bfb      	ldrh	r3, [r7, #30]
 8012944:	1c59      	adds	r1, r3, #1
 8012946:	83f9      	strh	r1, [r7, #30]
 8012948:	b2d2      	uxtb	r2, r2
 801294a:	3320      	adds	r3, #32
 801294c:	443b      	add	r3, r7
 801294e:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	0c1a      	lsrs	r2, r3, #16
 8012956:	8bfb      	ldrh	r3, [r7, #30]
 8012958:	1c59      	adds	r1, r3, #1
 801295a:	83f9      	strh	r1, [r7, #30]
 801295c:	b2d2      	uxtb	r2, r2
 801295e:	3320      	adds	r3, #32
 8012960:	443b      	add	r3, r7
 8012962:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	0e1a      	lsrs	r2, r3, #24
 801296a:	8bfb      	ldrh	r3, [r7, #30]
 801296c:	1c59      	adds	r1, r3, #1
 801296e:	83f9      	strh	r1, [r7, #30]
 8012970:	b2d2      	uxtb	r2, r2
 8012972:	3320      	adds	r3, #32
 8012974:	443b      	add	r3, r7
 8012976:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 801297a:	8bfa      	ldrh	r2, [r7, #30]
 801297c:	f107 0308 	add.w	r3, r7, #8
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7fd fcc4 	bl	8010310 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8012988:	4603      	mov	r3, r0
 801298a:	82fb      	strh	r3, [r7, #22]
 801298c:	8afb      	ldrh	r3, [r7, #22]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <phhalHw_Pn5180_Int_LoadCommand+0x116>
 8012992:	8afb      	ldrh	r3, [r7, #22]
 8012994:	e000      	b.n	8012998 <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 8012996:	2300      	movs	r3, #0

}
 8012998:	4618      	mov	r0, r3
 801299a:	3720      	adds	r7, #32
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b08a      	sub	sp, #40	@ 0x28
 80129a4:	af02      	add	r7, sp, #8
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	607b      	str	r3, [r7, #4]
 80129aa:	460b      	mov	r3, r1
 80129ac:	72fb      	strb	r3, [r7, #11]
 80129ae:	4613      	mov	r3, r2
 80129b0:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    // debug below----
    printf("WaitIrq: bEnableIrq=0x%02X, dwIrqWaitFor=0x%08X\n", bEnableIrq, dwIrqWaitFor);
 80129b2:	7afb      	ldrb	r3, [r7, #11]
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	4619      	mov	r1, r3
 80129b8:	486d      	ldr	r0, [pc, #436]	@ (8012b70 <phhalHw_Pn5180_WaitIrq+0x1d0>)
 80129ba:	f00a fc49 	bl	801d250 <iprintf>

    // debug top----

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d102      	bne.n	80129ca <phhalHw_Pn5180_WaitIrq+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80129c4:	f240 237f 	movw	r3, #639	@ 0x27f
 80129c8:	e0cd      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d103      	bne.n	80129dc <phhalHw_Pn5180_WaitIrq+0x3c>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 80129d4:	7afb      	ldrb	r3, [r7, #11]
 80129d6:	f023 0301 	bic.w	r3, r3, #1
 80129da:	72fb      	strb	r3, [r7, #11]
    }

    /* If requested by the user, enable the corresponding IRQs */
    if ((bEnableIrq & PHHAL_HW_CHECK_IRQ_PIN_MASK) != PH_OFF)
 80129dc:	7afb      	ldrb	r3, [r7, #11]
 80129de:	f003 0301 	and.w	r3, r3, #1
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d07d      	beq.n	8012ae2 <phhalHw_Pn5180_WaitIrq+0x142>
    {
    	printf("Using IRQ PIN mode\n"); //debug
 80129e6:	4863      	ldr	r0, [pc, #396]	@ (8012b74 <phhalHw_Pn5180_WaitIrq+0x1d4>)
 80129e8:	f00a fca2 	bl	801d330 <puts>
        /*wait for IRQ pin event or Abort event*/

        {
    		printf("Before phOsal_EventPend\n"); //debug
 80129ec:	4862      	ldr	r0, [pc, #392]	@ (8012b78 <phhalHw_Pn5180_WaitIrq+0x1d8>)
 80129ee:	f00a fc9f 	bl	801d330 <puts>
            statusTmp = phOsal_EventPend((volatile phOsal_Event_t * )(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, PHOSAL_MAX_DELAY,
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80129f8:	f107 0314 	add.w	r3, r7, #20
 80129fc:	9300      	str	r3, [sp, #0]
 80129fe:	2321      	movs	r3, #33	@ 0x21
 8012a00:	f04f 32ff 	mov.w	r2, #4294967295
 8012a04:	2101      	movs	r1, #1
 8012a06:	f004 fc91 	bl	801732c <phOsal_EventPend>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	83fb      	strh	r3, [r7, #30]
                (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), &tReceivedEvents);
            printf("After phOsal_EventPend, status=0x%04X\n", statusTmp); //debug
 8012a0e:	8bfb      	ldrh	r3, [r7, #30]
 8012a10:	4619      	mov	r1, r3
 8012a12:	485a      	ldr	r0, [pc, #360]	@ (8012b7c <phhalHw_Pn5180_WaitIrq+0x1dc>)
 8012a14:	f00a fc1c 	bl	801d250 <iprintf>
        }

        /*Handle abort event*/
        if ((E_PH_OSAL_EVT_ABORT & tReceivedEvents) || (statusTmp != PH_ERR_SUCCESS))
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	f003 0320 	and.w	r3, r3, #32
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d102      	bne.n	8012a28 <phhalHw_Pn5180_WaitIrq+0x88>
 8012a22:	8bfb      	ldrh	r3, [r7, #30]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d022      	beq.n	8012a6e <phhalHw_Pn5180_WaitIrq+0xce>
        {

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f7ff ff07 	bl	801283c <phhalHw_Pn5180_Int_IdleCommand>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	83fb      	strh	r3, [r7, #30]
 8012a32:	8bfb      	ldrh	r3, [r7, #30]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <phhalHw_Pn5180_WaitIrq+0x9c>
 8012a38:	8bfb      	ldrh	r3, [r7, #30]
 8012a3a:	e094      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>

            /* Disable IRQ sources */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~dwIrqWaitFor));
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	43db      	mvns	r3, r3
 8012a40:	461a      	mov	r2, r3
 8012a42:	2101      	movs	r1, #1
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f7fd fbed 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	83fb      	strh	r3, [r7, #30]
 8012a4e:	8bfb      	ldrh	r3, [r7, #30]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <phhalHw_Pn5180_WaitIrq+0xb8>
 8012a54:	8bfb      	ldrh	r3, [r7, #30]
 8012a56:	e086      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>

            (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_ABORT, NULL);
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012a5e:	2300      	movs	r3, #0
 8012a60:	2220      	movs	r2, #32
 8012a62:	2100      	movs	r1, #0
 8012a64:	f004 fd2e 	bl	80174c4 <phOsal_EventClear>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 8012a68:	f240 2312 	movw	r3, #530	@ 0x212
 8012a6c:	e07b      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>
        }
        else
        {
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8012a6e:	f107 0318 	add.w	r3, r7, #24
 8012a72:	461a      	mov	r2, r3
 8012a74:	2102      	movs	r1, #2
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7fd fcfc 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	83fb      	strh	r3, [r7, #30]
 8012a80:	8bfb      	ldrh	r3, [r7, #30]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d001      	beq.n	8012a8a <phhalHw_Pn5180_WaitIrq+0xea>
 8012a86:	8bfb      	ldrh	r3, [r7, #30]
 8012a88:	e06d      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>

            /* Store the state of status register */
            *dwIrqReg = dwRegister;
 8012a8a:	69ba      	ldr	r2, [r7, #24]
 8012a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a8e:	601a      	str	r2, [r3, #0]

            if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8012a90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	db0c      	blt.n	8012ab2 <phhalHw_Pn5180_WaitIrq+0x112>
            {
                /* Clear all Interrupts for e.g Tx interrupt during receive */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	2103      	movs	r1, #3
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f7fd fad4 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	83fb      	strh	r3, [r7, #30]
 8012aa8:	8bfb      	ldrh	r3, [r7, #30]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d001      	beq.n	8012ab2 <phhalHw_Pn5180_WaitIrq+0x112>
 8012aae:	8bfb      	ldrh	r3, [r7, #30]
 8012ab0:	e059      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>
            }
            /* Disable IRQ sources */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~dwIrqWaitFor));
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	43db      	mvns	r3, r3
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	2101      	movs	r1, #1
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f7fd fbb2 	bl	8010224 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	83fb      	strh	r3, [r7, #30]
 8012ac4:	8bfb      	ldrh	r3, [r7, #30]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d001      	beq.n	8012ace <phhalHw_Pn5180_WaitIrq+0x12e>
 8012aca:	8bfb      	ldrh	r3, [r7, #30]
 8012acc:	e04b      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>

            (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	2100      	movs	r1, #0
 8012ada:	f004 fcf3 	bl	80174c4 <phOsal_EventClear>

            return PH_ERR_SUCCESS;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e041      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>
        /* Wait until any of the IRQ bits that we are subscribing for occurs */
        do
        {
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d114      	bne.n	8012b16 <phhalHw_Pn5180_WaitIrq+0x176>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d106      	bne.n	8012b04 <phhalHw_Pn5180_WaitIrq+0x164>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 8012af6:	2200      	movs	r2, #0
 8012af8:	2101      	movs	r1, #1
 8012afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012afe:	f004 facd 	bl	801709c <phDriver_TimerStart>
 8012b02:	e008      	b.n	8012b16 <phhalHw_Pn5180_WaitIrq+0x176>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012b12:	f004 fac3 	bl	801709c <phDriver_TimerStart>
                }
            }

            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8012b16:	f107 0318 	add.w	r3, r7, #24
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	2102      	movs	r1, #2
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7fd fca8 	bl	8010474 <phhalHw_Pn5180_Instr_ReadRegister>
 8012b24:	4603      	mov	r3, r0
 8012b26:	83fb      	strh	r3, [r7, #30]
 8012b28:	8bfb      	ldrh	r3, [r7, #30]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d001      	beq.n	8012b32 <phhalHw_Pn5180_WaitIrq+0x192>
 8012b2e:	8bfb      	ldrh	r3, [r7, #30]
 8012b30:	e019      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 8012b32:	69ba      	ldr	r2, [r7, #24]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4013      	ands	r3, r2
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d0d2      	beq.n	8012ae2 <phhalHw_Pn5180_WaitIrq+0x142>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8012b3c:	69ba      	ldr	r2, [r7, #24]
 8012b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b40:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8012b42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	db0c      	blt.n	8012b64 <phhalHw_Pn5180_WaitIrq+0x1c4>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	2103      	movs	r1, #3
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	f7fd fa7b 	bl	801004c <phhalHw_Pn5180_Instr_WriteRegister>
 8012b56:	4603      	mov	r3, r0
 8012b58:	83fb      	strh	r3, [r7, #30]
 8012b5a:	8bfb      	ldrh	r3, [r7, #30]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <phhalHw_Pn5180_WaitIrq+0x1c4>
 8012b60:	8bfb      	ldrh	r3, [r7, #30]
 8012b62:	e000      	b.n	8012b66 <phhalHw_Pn5180_WaitIrq+0x1c6>
        }
    }

    return PH_ERR_SUCCESS;
 8012b64:	2300      	movs	r3, #0

}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3720      	adds	r7, #32
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	0801fcb4 	.word	0x0801fcb4
 8012b74:	0801fce8 	.word	0x0801fce8
 8012b78:	0801fcfc 	.word	0x0801fcfc
 8012b7c:	0801fd14 	.word	0x0801fd14

08012b80 <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 8012b80:	b480      	push	{r7}
 8012b82:	b085      	sub	sp, #20
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 8012b8e:	897b      	ldrh	r3, [r7, #10]
 8012b90:	2b20      	cmp	r3, #32
 8012b92:	d002      	beq.n	8012b9a <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 8012b94:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8012b98:	e01d      	b.n	8012bd6 <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d101      	bne.n	8012ba4 <phpalFelica_Sw_Init+0x24>
 8012ba0:	2321      	movs	r3, #33	@ 0x21
 8012ba2:	e018      	b.n	8012bd6 <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d101      	bne.n	8012bae <phpalFelica_Sw_Init+0x2e>
 8012baa:	2321      	movs	r3, #33	@ 0x21
 8012bac:	e013      	b.n	8012bd6 <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f640 0201 	movw	r2, #2049	@ 0x801
 8012bb4:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3714      	adds	r7, #20
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr
	...

08012be4 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b08c      	sub	sp, #48	@ 0x30
 8012be8:	af02      	add	r7, sp, #8
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	603b      	str	r3, [r7, #0]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	3308      	adds	r3, #8
 8012c04:	2212      	movs	r2, #18
 8012c06:	2100      	movs	r1, #0
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f00a fc81 	bl	801d510 <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2200      	movs	r2, #0
 8012c12:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2200      	movs	r2, #0
 8012c18:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8012c1a:	79fb      	ldrb	r3, [r7, #7]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00e      	beq.n	8012c3e <phpalFelica_Sw_ReqC+0x5a>
 8012c20:	79fb      	ldrb	r3, [r7, #7]
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d00b      	beq.n	8012c3e <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 8012c26:	79fb      	ldrb	r3, [r7, #7]
 8012c28:	2b03      	cmp	r3, #3
 8012c2a:	d008      	beq.n	8012c3e <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8012c2c:	79fb      	ldrb	r3, [r7, #7]
 8012c2e:	2b07      	cmp	r3, #7
 8012c30:	d005      	beq.n	8012c3e <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	2b0f      	cmp	r3, #15
 8012c36:	d002      	beq.n	8012c3e <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012c38:	f640 0321 	movw	r3, #2081	@ 0x821
 8012c3c:	e0e2      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	f107 0210 	add.w	r2, r7, #16
 8012c46:	2121      	movs	r1, #33	@ 0x21
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7fc f843 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012c52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <phpalFelica_Sw_ReqC+0x78>
 8012c58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c5a:	e0d3      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 8012c5c:	8a3b      	ldrh	r3, [r7, #16]
 8012c5e:	2b03      	cmp	r3, #3
 8012c60:	d005      	beq.n	8012c6e <phpalFelica_Sw_ReqC+0x8a>
 8012c62:	8a3b      	ldrh	r3, [r7, #16]
 8012c64:	2b0a      	cmp	r3, #10
 8012c66:	d002      	beq.n	8012c6e <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 8012c68:	f640 0325 	movw	r3, #2085	@ 0x825
 8012c6c:	e0ca      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 8012c6e:	8a3b      	ldrh	r3, [r7, #16]
 8012c70:	2b03      	cmp	r3, #3
 8012c72:	d107      	bne.n	8012c84 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	7f9b      	ldrb	r3, [r3, #30]
 8012c78:	461a      	mov	r2, r3
 8012c7a:	4b64      	ldr	r3, [pc, #400]	@ (8012e0c <phpalFelica_Sw_ReqC+0x228>)
 8012c7c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8012c80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012c82:	e006      	b.n	8012c92 <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	7f9b      	ldrb	r3, [r3, #30]
 8012c88:	4a60      	ldr	r2, [pc, #384]	@ (8012e0c <phpalFelica_Sw_ReqC+0x228>)
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	4413      	add	r3, r2
 8012c8e:	885b      	ldrh	r3, [r3, #2]
 8012c90:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 8012c92:	79fb      	ldrb	r3, [r7, #7]
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	461a      	mov	r2, r3
 8012c98:	0092      	lsls	r2, r2, #2
 8012c9a:	441a      	add	r2, r3
 8012c9c:	4611      	mov	r1, r2
 8012c9e:	0109      	lsls	r1, r1, #4
 8012ca0:	1a8a      	subs	r2, r1, r2
 8012ca2:	0052      	lsls	r2, r2, #1
 8012ca4:	4413      	add	r3, r2
 8012ca6:	00db      	lsls	r3, r3, #3
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 8012cae:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 8012cb0:	2306      	movs	r3, #6
 8012cb2:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	785b      	ldrb	r3, [r3, #1]
 8012cc2:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	7f1b      	ldrb	r3, [r3, #28]
 8012cc8:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 8012cca:	79fb      	ldrb	r3, [r7, #7]
 8012ccc:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012cd4:	210d      	movs	r1, #13
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fa fbae 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012ce0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d001      	beq.n	8012cea <phpalFelica_Sw_ReqC+0x106>
 8012ce6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012ce8:	e08c      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8012cea:	79fb      	ldrb	r3, [r7, #7]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00d      	beq.n	8012d0c <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	2153      	movs	r1, #83	@ 0x53
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7fa fb9d 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012d02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d001      	beq.n	8012d0c <phpalFelica_Sw_ReqC+0x128>
 8012d08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012d0a:	e07b      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6858      	ldr	r0, [r3, #4]
 8012d10:	f107 0218 	add.w	r2, r7, #24
 8012d14:	f107 0312 	add.w	r3, r7, #18
 8012d18:	9301      	str	r3, [sp, #4]
 8012d1a:	f107 0314 	add.w	r3, r7, #20
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	2306      	movs	r3, #6
 8012d22:	2100      	movs	r1, #0
 8012d24:	f7f9 ffb8 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d00d      	beq.n	8012d4e <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	2200      	movs	r2, #0
 8012d38:	2153      	movs	r1, #83	@ 0x53
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7fa fb7c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8012d40:	4603      	mov	r3, r0
 8012d42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012d44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d001      	beq.n	8012d4e <phpalFelica_Sw_ReqC+0x16a>
 8012d4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012d4c:	e05a      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8012d4e:	8c3b      	ldrh	r3, [r7, #32]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <phpalFelica_Sw_ReqC+0x174>
 8012d54:	8c3b      	ldrh	r3, [r7, #32]
 8012d56:	e055      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8012d58:	79fb      	ldrb	r3, [r7, #7]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d015      	beq.n	8012d8a <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 8012d5e:	8a7b      	ldrh	r3, [r7, #18]
 8012d60:	f003 031f 	and.w	r3, r3, #31
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d002      	beq.n	8012d70 <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012d6a:	f640 0306 	movw	r3, #2054	@ 0x806
 8012d6e:	e049      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 8012d70:	697a      	ldr	r2, [r7, #20]
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 8012d76:	8a7a      	ldrh	r2, [r7, #18]
 8012d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d7a:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 8012d7c:	8a7b      	ldrh	r3, [r7, #18]
 8012d7e:	095b      	lsrs	r3, r3, #5
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	775a      	strb	r2, [r3, #29]
 8012d88:	e038      	b.n	8012dfc <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8012d8a:	8a7b      	ldrh	r3, [r7, #18]
 8012d8c:	2b12      	cmp	r3, #18
 8012d8e:	d002      	beq.n	8012d96 <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 8012d90:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8012d92:	2b14      	cmp	r3, #20
 8012d94:	d10a      	bne.n	8012dac <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d104      	bne.n	8012dac <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	3301      	adds	r3, #1
 8012da6:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d002      	beq.n	8012db2 <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012dac:	f640 0306 	movw	r3, #2054	@ 0x806
 8012db0:	e028      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 8012db2:	8a7b      	ldrh	r3, [r7, #18]
 8012db4:	2b14      	cmp	r3, #20
 8012db6:	d106      	bne.n	8012dc6 <phpalFelica_Sw_ReqC+0x1e2>
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	7f1b      	ldrb	r3, [r3, #28]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d102      	bne.n	8012dc6 <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012dc0:	f640 0306 	movw	r3, #2054	@ 0x806
 8012dc4:	e01e      	b.n	8012e04 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	f103 0008 	add.w	r0, r3, #8
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	1c99      	adds	r1, r3, #2
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	3b02      	subs	r3, #2
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	f00a fc19 	bl	801d60e <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2201      	movs	r2, #1
 8012de0:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	1c9a      	adds	r2, r3, #2
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	3b02      	subs	r3, #2
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df4:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 8012e02:	2300      	movs	r3, #0
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3728      	adds	r7, #40	@ 0x28
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	0802078c 	.word	0x0802078c

08012e10 <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 8012e10:	b480      	push	{r7}
 8012e12:	b087      	sub	sp, #28
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	607a      	str	r2, [r7, #4]
 8012e1a:	603b      	str	r3, [r7, #0]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	7f5b      	ldrb	r3, [r3, #29]
 8012e24:	7afa      	ldrb	r2, [r7, #11]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d802      	bhi.n	8012e30 <phpalFelica_Sw_GetFrameInfo+0x20>
 8012e2a:	7afb      	ldrb	r3, [r7, #11]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d102      	bne.n	8012e36 <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012e30:	f640 0321 	movw	r3, #2081	@ 0x821
 8012e34:	e06f      	b.n	8012f16 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8012e3c:	7afb      	ldrb	r3, [r7, #11]
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	b2db      	uxtb	r3, r3
 8012e42:	015b      	lsls	r3, r3, #5
 8012e44:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8012e46:	7dfb      	ldrb	r3, [r7, #23]
 8012e48:	331c      	adds	r3, #28
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	2b12      	cmp	r3, #18
 8012e52:	d006      	beq.n	8012e62 <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8012e54:	7dfb      	ldrb	r3, [r7, #23]
 8012e56:	331c      	adds	r3, #28
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8012e5e:	2b14      	cmp	r3, #20
 8012e60:	d106      	bne.n	8012e70 <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
 8012e64:	3301      	adds	r3, #1
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	4413      	add	r3, r2
 8012e6a:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d002      	beq.n	8012e76 <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012e70:	f640 0306 	movw	r3, #2054	@ 0x806
 8012e74:	e04f      	b.n	8012f16 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 8012e76:	7dfb      	ldrb	r3, [r7, #23]
 8012e78:	331c      	adds	r3, #28
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	2b14      	cmp	r3, #20
 8012e82:	d106      	bne.n	8012e92 <phpalFelica_Sw_GetFrameInfo+0x82>
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	7f1b      	ldrb	r3, [r3, #28]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d102      	bne.n	8012e92 <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012e8c:	f640 0306 	movw	r3, #2054	@ 0x806
 8012e90:	e041      	b.n	8012f16 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 8012e92:	7dfb      	ldrb	r3, [r7, #23]
 8012e94:	331d      	adds	r3, #29
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	4413      	add	r3, r2
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 031f 	and.w	r3, r3, #31
 8012ea0:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 8012ea2:	7dbb      	ldrb	r3, [r7, #22]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d026      	beq.n	8012ef6 <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 8012ea8:	7dbb      	ldrb	r3, [r7, #22]
 8012eaa:	f003 0301 	and.w	r3, r3, #1
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d01d      	beq.n	8012eee <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 8012eb2:	7dbb      	ldrb	r3, [r7, #22]
 8012eb4:	f003 0304 	and.w	r3, r3, #4
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d003      	beq.n	8012ec4 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	2206      	movs	r2, #6
 8012ec0:	801a      	strh	r2, [r3, #0]
 8012ec2:	e027      	b.n	8012f14 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 8012ec4:	7dbb      	ldrb	r3, [r7, #22]
 8012ec6:	f003 0308 	and.w	r3, r3, #8
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d003      	beq.n	8012ed6 <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	2203      	movs	r2, #3
 8012ed2:	801a      	strh	r2, [r3, #0]
 8012ed4:	e01e      	b.n	8012f14 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 8012ed6:	7dbb      	ldrb	r3, [r7, #22]
 8012ed8:	f003 0302 	and.w	r3, r3, #2
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d003      	beq.n	8012ee8 <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	2202      	movs	r2, #2
 8012ee4:	801a      	strh	r2, [r3, #0]
 8012ee6:	e015      	b.n	8012f14 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 8012ee8:	f640 0306 	movw	r3, #2054	@ 0x806
 8012eec:	e013      	b.n	8012f16 <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	220c      	movs	r2, #12
 8012ef2:	801a      	strh	r2, [r3, #0]
 8012ef4:	e00e      	b.n	8012f14 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	3302      	adds	r3, #2
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	441a      	add	r2, r3
 8012efe:	6a3b      	ldr	r3, [r7, #32]
 8012f00:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 8012f02:	7dfb      	ldrb	r3, [r7, #23]
 8012f04:	331c      	adds	r3, #28
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	4413      	add	r3, r2
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	3b02      	subs	r3, #2
 8012f0e:	b2da      	uxtb	r2, r3
 8012f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f12:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	371c      	adds	r7, #28
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr

08012f22 <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 8012f22:	b580      	push	{r7, lr}
 8012f24:	b082      	sub	sp, #8
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
 8012f2a:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2201      	movs	r2, #1
 8012f30:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	3308      	adds	r3, #8
 8012f36:	2210      	movs	r2, #16
 8012f38:	6839      	ldr	r1, [r7, #0]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f00a fb67 	bl	801d60e <memcpy>

    return PH_ERR_SUCCESS;
 8012f40:	2300      	movs	r3, #0

}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3708      	adds	r7, #8
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 8012f4a:	b480      	push	{r7}
 8012f4c:	b083      	sub	sp, #12
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
 8012f52:	460b      	mov	r3, r1
 8012f54:	807b      	strh	r3, [r7, #2]
 8012f56:	4613      	mov	r3, r2
 8012f58:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 8012f5a:	887b      	ldrh	r3, [r7, #2]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <phpalFelica_Sw_SetConfig+0x1c>
 8012f60:	2b02      	cmp	r3, #2
 8012f62:	d00c      	beq.n	8012f7e <phpalFelica_Sw_SetConfig+0x34>
 8012f64:	e01f      	b.n	8012fa6 <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 8012f66:	883b      	ldrh	r3, [r7, #0]
 8012f68:	b2db      	uxtb	r3, r3
 8012f6a:	2b02      	cmp	r3, #2
 8012f6c:	d902      	bls.n	8012f74 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012f6e:	f640 0321 	movw	r3, #2081	@ 0x821
 8012f72:	e01c      	b.n	8012fae <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 8012f74:	883b      	ldrh	r3, [r7, #0]
 8012f76:	b2da      	uxtb	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	771a      	strb	r2, [r3, #28]
        break;
 8012f7c:	e016      	b.n	8012fac <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8012f7e:	883b      	ldrh	r3, [r7, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d00b      	beq.n	8012f9c <phpalFelica_Sw_SetConfig+0x52>
 8012f84:	883b      	ldrh	r3, [r7, #0]
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d008      	beq.n	8012f9c <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 8012f8a:	883b      	ldrh	r3, [r7, #0]
 8012f8c:	2b03      	cmp	r3, #3
 8012f8e:	d005      	beq.n	8012f9c <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8012f90:	883b      	ldrh	r3, [r7, #0]
 8012f92:	2b04      	cmp	r3, #4
 8012f94:	d002      	beq.n	8012f9c <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012f96:	f640 0321 	movw	r3, #2081	@ 0x821
 8012f9a:	e008      	b.n	8012fae <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 8012f9c:	883b      	ldrh	r3, [r7, #0]
 8012f9e:	b2da      	uxtb	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	779a      	strb	r2, [r3, #30]
        break;
 8012fa4:	e002      	b.n	8012fac <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8012fa6:	f640 0323 	movw	r3, #2083	@ 0x823
 8012faa:	e000      	b.n	8012fae <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8012fac:	2300      	movs	r3, #0
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	60f8      	str	r0, [r7, #12]
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	607a      	str	r2, [r7, #4]
 8012fc6:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8012fc8:	897b      	ldrh	r3, [r7, #10]
 8012fca:	2b03      	cmp	r3, #3
 8012fcc:	d012      	beq.n	8012ff4 <phpalFelica_Sw_GetConfig+0x3a>
 8012fce:	2b03      	cmp	r3, #3
 8012fd0:	dc26      	bgt.n	8013020 <phpalFelica_Sw_GetConfig+0x66>
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d002      	beq.n	8012fdc <phpalFelica_Sw_GetConfig+0x22>
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	d006      	beq.n	8012fe8 <phpalFelica_Sw_GetConfig+0x2e>
 8012fda:	e021      	b.n	8013020 <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	7f1b      	ldrb	r3, [r3, #28]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	801a      	strh	r2, [r3, #0]
        break;
 8012fe6:	e01e      	b.n	8013026 <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	7f5b      	ldrb	r3, [r3, #29]
 8012fec:	461a      	mov	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	801a      	strh	r2, [r3, #0]
        break;
 8012ff2:	e018      	b.n	8013026 <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	7e9b      	ldrb	r3, [r3, #26]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d10d      	bne.n	8013018 <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	7e1b      	ldrb	r3, [r3, #24]
 8013000:	b21b      	sxth	r3, r3
 8013002:	021b      	lsls	r3, r3, #8
 8013004:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	7e5b      	ldrb	r3, [r3, #25]
 801300a:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 801300c:	4313      	orrs	r3, r2
 801300e:	b21b      	sxth	r3, r3
 8013010:	b29a      	uxth	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 8013016:	e006      	b.n	8013026 <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2200      	movs	r2, #0
 801301c:	801a      	strh	r2, [r3, #0]
        break;
 801301e:	e002      	b.n	8013026 <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8013020:	f640 0323 	movw	r3, #2083	@ 0x823
 8013024:	e000      	b.n	8013028 <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8013026:	2300      	movs	r3, #0
}
 8013028:	4618      	mov	r0, r3
 801302a:	3714      	adds	r7, #20
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr

08013034 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8013034:	b480      	push	{r7}
 8013036:	b085      	sub	sp, #20
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	460b      	mov	r3, r1
 801303e:	607a      	str	r2, [r7, #4]
 8013040:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 8013042:	897b      	ldrh	r3, [r7, #10]
 8013044:	2b18      	cmp	r3, #24
 8013046:	d002      	beq.n	801304e <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 8013048:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801304c:	e01d      	b.n	801308a <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d101      	bne.n	8013058 <phpalI14443p3a_Sw_Init+0x24>
 8013054:	2321      	movs	r3, #33	@ 0x21
 8013056:	e018      	b.n	801308a <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d101      	bne.n	8013062 <phpalI14443p3a_Sw_Init+0x2e>
 801305e:	2321      	movs	r3, #33	@ 0x21
 8013060:	e013      	b.n	801308a <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f240 3201 	movw	r2, #769	@ 0x301
 8013068:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	687a      	ldr	r2, [r7, #4]
 801306e:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2200      	movs	r2, #0
 8013074:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2200      	movs	r2, #0
 801307a:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2202      	movs	r2, #2
 8013080:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	2200      	movs	r2, #0
 8013086:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 8013088:	2300      	movs	r3, #0
}
 801308a:	4618      	mov	r0, r3
 801308c:	3714      	adds	r7, #20
 801308e:	46bd      	mov	sp, r7
 8013090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013094:	4770      	bx	lr

08013096 <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8013096:	b580      	push	{r7, lr}
 8013098:	b084      	sub	sp, #16
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
 801309e:	460b      	mov	r3, r1
 80130a0:	807b      	strh	r3, [r7, #2]
 80130a2:	4613      	mov	r3, r2
 80130a4:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 80130a6:	887b      	ldrh	r3, [r7, #2]
 80130a8:	2b03      	cmp	r3, #3
 80130aa:	d010      	beq.n	80130ce <phpalI14443p3a_Sw_SetConfig+0x38>
 80130ac:	2b03      	cmp	r3, #3
 80130ae:	dc1c      	bgt.n	80130ea <phpalI14443p3a_Sw_SetConfig+0x54>
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d002      	beq.n	80130ba <phpalI14443p3a_Sw_SetConfig+0x24>
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d005      	beq.n	80130c4 <phpalI14443p3a_Sw_SetConfig+0x2e>
 80130b8:	e017      	b.n	80130ea <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 80130ba:	883b      	ldrh	r3, [r7, #0]
 80130bc:	b2da      	uxtb	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	751a      	strb	r2, [r3, #20]
       break;
 80130c2:	e016      	b.n	80130f2 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 80130c4:	883b      	ldrh	r3, [r7, #0]
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	755a      	strb	r2, [r3, #21]
       break;
 80130cc:	e011      	b.n	80130f2 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	883a      	ldrh	r2, [r7, #0]
 80130d4:	210d      	movs	r1, #13
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7fa f9ae 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80130dc:	4603      	mov	r3, r0
 80130de:	81fb      	strh	r3, [r7, #14]
 80130e0:	89fb      	ldrh	r3, [r7, #14]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d004      	beq.n	80130f0 <phpalI14443p3a_Sw_SetConfig+0x5a>
 80130e6:	89fb      	ldrh	r3, [r7, #14]
 80130e8:	e004      	b.n	80130f4 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80130ea:	f240 3323 	movw	r3, #803	@ 0x323
 80130ee:	e001      	b.n	80130f4 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 80130f0:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80130f2:	2300      	movs	r3, #0

}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3710      	adds	r7, #16
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 8013106:	683a      	ldr	r2, [r7, #0]
 8013108:	2126      	movs	r1, #38	@ 0x26
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f000 fc89 	bl	8013a22 <phpalI14443p3a_Sw_RequestAEx>
 8013110:	4603      	mov	r3, r0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 801311a:	b580      	push	{r7, lr}
 801311c:	b082      	sub	sp, #8
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
 8013122:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8013124:	683a      	ldr	r2, [r7, #0]
 8013126:	2152      	movs	r1, #82	@ 0x52
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 fc7a 	bl	8013a22 <phpalI14443p3a_Sw_RequestAEx>
 801312e:	4603      	mov	r3, r0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3708      	adds	r7, #8
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b088      	sub	sp, #32
 801313c:	af02      	add	r7, sp, #8
 801313e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013140:	2300      	movs	r3, #0
 8013142:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013144:	2300      	movs	r3, #0
 8013146:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8013150:	210d      	movs	r1, #13
 8013152:	4618      	mov	r0, r3
 8013154:	f7fa f970 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013158:	4603      	mov	r3, r0
 801315a:	82fb      	strh	r3, [r7, #22]
 801315c:	8afb      	ldrh	r3, [r7, #22]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d001      	beq.n	8013166 <phpalI14443p3a_Sw_HaltA+0x2e>
 8013162:	8afb      	ldrh	r3, [r7, #22]
 8013164:	e03b      	b.n	80131de <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	2101      	movs	r1, #1
 801316e:	4618      	mov	r0, r3
 8013170:	f7fa f962 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013174:	4603      	mov	r3, r0
 8013176:	82fb      	strh	r3, [r7, #22]
 8013178:	8afb      	ldrh	r3, [r7, #22]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <phpalI14443p3a_Sw_HaltA+0x4a>
 801317e:	8afb      	ldrh	r3, [r7, #22]
 8013180:	e02d      	b.n	80131de <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	2201      	movs	r2, #1
 8013188:	2102      	movs	r1, #2
 801318a:	4618      	mov	r0, r3
 801318c:	f7fa f954 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013190:	4603      	mov	r3, r0
 8013192:	82fb      	strh	r3, [r7, #22]
 8013194:	8afb      	ldrh	r3, [r7, #22]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d001      	beq.n	801319e <phpalI14443p3a_Sw_HaltA+0x66>
 801319a:	8afb      	ldrh	r3, [r7, #22]
 801319c:	e01f      	b.n	80131de <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 801319e:	2350      	movs	r3, #80	@ 0x50
 80131a0:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 80131a2:	2300      	movs	r3, #0
 80131a4:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6858      	ldr	r0, [r3, #4]
 80131aa:	f107 0210 	add.w	r2, r7, #16
 80131ae:	f107 030a 	add.w	r3, r7, #10
 80131b2:	9301      	str	r3, [sp, #4]
 80131b4:	f107 030c 	add.w	r3, r7, #12
 80131b8:	9300      	str	r3, [sp, #0]
 80131ba:	2302      	movs	r3, #2
 80131bc:	2100      	movs	r1, #0
 80131be:	f7f9 fd6b 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80131c2:	4603      	mov	r3, r0
 80131c4:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 80131c6:	8abb      	ldrh	r3, [r7, #20]
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d003      	beq.n	80131d6 <phpalI14443p3a_Sw_HaltA+0x9e>
 80131ce:	2b01      	cmp	r3, #1
 80131d0:	d104      	bne.n	80131dc <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 80131d2:	2300      	movs	r3, #0
 80131d4:	e003      	b.n	80131de <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131d6:	f240 3306 	movw	r3, #774	@ 0x306
 80131da:	e000      	b.n	80131de <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 80131dc:	8abb      	ldrh	r3, [r7, #20]
    }
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3718      	adds	r7, #24
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b08e      	sub	sp, #56	@ 0x38
 80131ea:	af02      	add	r7, sp, #8
 80131ec:	60f8      	str	r0, [r7, #12]
 80131ee:	607a      	str	r2, [r7, #4]
 80131f0:	461a      	mov	r2, r3
 80131f2:	460b      	mov	r3, r1
 80131f4:	72fb      	strb	r3, [r7, #11]
 80131f6:	4613      	mov	r3, r2
 80131f8:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 80131fe:	2300      	movs	r3, #0
 8013200:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 8013206:	7abb      	ldrb	r3, [r7, #10]
 8013208:	2b40      	cmp	r3, #64	@ 0x40
 801320a:	d804      	bhi.n	8013216 <phpalI14443p3a_Sw_Anticollision+0x30>
 801320c:	7abb      	ldrb	r3, [r7, #10]
 801320e:	f003 0308 	and.w	r3, r3, #8
 8013212:	2b00      	cmp	r3, #0
 8013214:	d002      	beq.n	801321c <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8013216:	f240 3321 	movw	r3, #801	@ 0x321
 801321a:	e217      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 801321c:	7afb      	ldrb	r3, [r7, #11]
 801321e:	2b97      	cmp	r3, #151	@ 0x97
 8013220:	d00d      	beq.n	801323e <phpalI14443p3a_Sw_Anticollision+0x58>
 8013222:	2b97      	cmp	r3, #151	@ 0x97
 8013224:	dc08      	bgt.n	8013238 <phpalI14443p3a_Sw_Anticollision+0x52>
 8013226:	2b93      	cmp	r3, #147	@ 0x93
 8013228:	d002      	beq.n	8013230 <phpalI14443p3a_Sw_Anticollision+0x4a>
 801322a:	2b95      	cmp	r3, #149	@ 0x95
 801322c:	d007      	beq.n	801323e <phpalI14443p3a_Sw_Anticollision+0x58>
 801322e:	e003      	b.n	8013238 <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2200      	movs	r2, #0
 8013234:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 8013236:	e002      	b.n	801323e <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8013238:	f240 3321 	movw	r3, #801	@ 0x321
 801323c:	e206      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 801323e:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2200      	movs	r2, #0
 8013244:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 8013246:	7abb      	ldrb	r3, [r7, #10]
 8013248:	2b40      	cmp	r3, #64	@ 0x40
 801324a:	d01e      	beq.n	801328a <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 801324c:	2300      	movs	r3, #0
 801324e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	2200      	movs	r2, #0
 8013258:	2101      	movs	r1, #1
 801325a:	4618      	mov	r0, r3
 801325c:	f7fa f8ec 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013260:	4603      	mov	r3, r0
 8013262:	853b      	strh	r3, [r7, #40]	@ 0x28
 8013264:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <phpalI14443p3a_Sw_Anticollision+0x88>
 801326a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801326c:	e1ee      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	2102      	movs	r1, #2
 8013276:	4618      	mov	r0, r3
 8013278:	f7fa f8de 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801327c:	4603      	mov	r3, r0
 801327e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8013280:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013282:	2b00      	cmp	r3, #0
 8013284:	d020      	beq.n	80132c8 <phpalI14443p3a_Sw_Anticollision+0xe2>
 8013286:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013288:	e1e0      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 801328a:	2301      	movs	r3, #1
 801328c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	2201      	movs	r2, #1
 8013296:	2101      	movs	r1, #1
 8013298:	4618      	mov	r0, r3
 801329a:	f7fa f8cd 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801329e:	4603      	mov	r3, r0
 80132a0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80132a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d001      	beq.n	80132ac <phpalI14443p3a_Sw_Anticollision+0xc6>
 80132a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80132aa:	e1cf      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	2201      	movs	r2, #1
 80132b2:	2102      	movs	r1, #2
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fa f8bf 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80132ba:	4603      	mov	r3, r0
 80132bc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80132be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <phpalI14443p3a_Sw_Anticollision+0xe2>
 80132c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80132c6:	e1c1      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 80132c8:	7afb      	ldrb	r3, [r7, #11]
 80132ca:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 80132cc:	f107 0318 	add.w	r3, r7, #24
 80132d0:	3302      	adds	r3, #2
 80132d2:	2205      	movs	r2, #5
 80132d4:	2100      	movs	r1, #0
 80132d6:	4618      	mov	r0, r3
 80132d8:	f00a f91a 	bl	801d510 <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 80132dc:	7abb      	ldrb	r3, [r7, #10]
 80132de:	091b      	lsrs	r3, r3, #4
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	461a      	mov	r2, r3
 80132e4:	7abb      	ldrb	r3, [r7, #10]
 80132e6:	f003 030f 	and.w	r3, r3, #15
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d001      	beq.n	80132f2 <phpalI14443p3a_Sw_Anticollision+0x10c>
 80132ee:	2301      	movs	r3, #1
 80132f0:	e000      	b.n	80132f4 <phpalI14443p3a_Sw_Anticollision+0x10e>
 80132f2:	2300      	movs	r3, #0
 80132f4:	4413      	add	r3, r2
 80132f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 80132f8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80132fa:	f107 0318 	add.w	r3, r7, #24
 80132fe:	3302      	adds	r3, #2
 8013300:	6879      	ldr	r1, [r7, #4]
 8013302:	4618      	mov	r0, r3
 8013304:	f00a f983 	bl	801d60e <memcpy>
    wSndBytes += 2U;
 8013308:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801330a:	3302      	adds	r3, #2
 801330c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 801330e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013312:	2b00      	cmp	r3, #0
 8013314:	d016      	beq.n	8013344 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 8013316:	2350      	movs	r3, #80	@ 0x50
 8013318:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	781a      	ldrb	r2, [r3, #0]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	3301      	adds	r3, #1
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	4053      	eors	r3, r2
 8013326:	b2da      	uxtb	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	3302      	adds	r3, #2
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	4053      	eors	r3, r2
 8013330:	b2da      	uxtb	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	3303      	adds	r3, #3
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	4053      	eors	r3, r2
 801333a:	b2db      	uxtb	r3, r3
 801333c:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 801333e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013340:	3301      	adds	r3, #1
 8013342:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8013344:	7abb      	ldrb	r3, [r7, #10]
 8013346:	3320      	adds	r3, #32
 8013348:	b2db      	uxtb	r3, r3
 801334a:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	6858      	ldr	r0, [r3, #4]
 8013350:	7abb      	ldrb	r3, [r7, #10]
 8013352:	b29b      	uxth	r3, r3
 8013354:	f003 0307 	and.w	r3, r3, #7
 8013358:	b29b      	uxth	r3, r3
 801335a:	461a      	mov	r2, r3
 801335c:	2105      	movs	r1, #5
 801335e:	f7fa f86b 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013362:	4603      	mov	r3, r0
 8013364:	853b      	strh	r3, [r7, #40]	@ 0x28
 8013366:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013368:	2b00      	cmp	r3, #0
 801336a:	d001      	beq.n	8013370 <phpalI14443p3a_Sw_Anticollision+0x18a>
 801336c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801336e:	e16d      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	6858      	ldr	r0, [r3, #4]
 8013374:	7abb      	ldrb	r3, [r7, #10]
 8013376:	b29b      	uxth	r3, r3
 8013378:	f003 0307 	and.w	r3, r3, #7
 801337c:	b29b      	uxth	r3, r3
 801337e:	461a      	mov	r2, r3
 8013380:	2103      	movs	r1, #3
 8013382:	f7fa f859 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013386:	4603      	mov	r3, r0
 8013388:	853b      	strh	r3, [r7, #40]	@ 0x28
 801338a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801338c:	2b00      	cmp	r3, #0
 801338e:	d001      	beq.n	8013394 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 8013390:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013392:	e15b      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	6858      	ldr	r0, [r3, #4]
 8013398:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 801339a:	f107 0218 	add.w	r2, r7, #24
 801339e:	f107 0312 	add.w	r3, r7, #18
 80133a2:	9301      	str	r3, [sp, #4]
 80133a4:	f107 0314 	add.w	r3, r7, #20
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	460b      	mov	r3, r1
 80133ac:	2100      	movs	r1, #0
 80133ae:	f7f9 fc73 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80133b2:	4603      	mov	r3, r0
 80133b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	2105      	movs	r1, #5
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fa f83a 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80133c4:	4603      	mov	r3, r0
 80133c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80133c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d001      	beq.n	80133d2 <phpalI14443p3a_Sw_Anticollision+0x1ec>
 80133ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80133d0:	e13c      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 80133d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d112      	bne.n	8013400 <phpalI14443p3a_Sw_Anticollision+0x21a>
 80133da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	2b03      	cmp	r3, #3
 80133e0:	d10e      	bne.n	8013400 <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	f107 0210 	add.w	r2, r7, #16
 80133ea:	2104      	movs	r1, #4
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fb fc71 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 80133f2:	4603      	mov	r3, r0
 80133f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80133f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d00f      	beq.n	801341c <phpalI14443p3a_Sw_Anticollision+0x236>
 80133fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80133fe:	e125      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8013400:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013402:	b2db      	uxtb	r3, r3
 8013404:	2b73      	cmp	r3, #115	@ 0x73
 8013406:	d102      	bne.n	801340e <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013408:	f240 3306 	movw	r3, #774	@ 0x306
 801340c:	e11e      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 801340e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013410:	2b00      	cmp	r3, #0
 8013412:	d001      	beq.n	8013418 <phpalI14443p3a_Sw_Anticollision+0x232>
 8013414:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013416:	e119      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 8013418:	2300      	movs	r3, #0
 801341a:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 801341c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013420:	2b00      	cmp	r3, #0
 8013422:	f040 80ae 	bne.w	8013582 <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 8013426:	7abb      	ldrb	r3, [r7, #10]
 8013428:	091b      	lsrs	r3, r3, #4
 801342a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 801342e:	7abb      	ldrb	r3, [r7, #10]
 8013430:	091b      	lsrs	r3, r3, #4
 8013432:	b2da      	uxtb	r2, r3
 8013434:	8a7b      	ldrh	r3, [r7, #18]
 8013436:	b2db      	uxtb	r3, r3
 8013438:	4413      	add	r3, r2
 801343a:	b2db      	uxtb	r3, r3
 801343c:	00db      	lsls	r3, r3, #3
 801343e:	b2da      	uxtb	r2, r3
 8013440:	8a3b      	ldrh	r3, [r7, #16]
 8013442:	b2db      	uxtb	r3, r3
 8013444:	4413      	add	r3, r2
 8013446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 801344a:	8a3b      	ldrh	r3, [r7, #16]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d004      	beq.n	801345a <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 8013450:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013454:	3b08      	subs	r3, #8
 8013456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 801345a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801345e:	08db      	lsrs	r3, r3, #3
 8013460:	b2db      	uxtb	r3, r3
 8013462:	011b      	lsls	r3, r3, #4
 8013464:	b2da      	uxtb	r2, r3
 8013466:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801346a:	f003 0307 	and.w	r3, r3, #7
 801346e:	b2db      	uxtb	r3, r3
 8013470:	4413      	add	r3, r2
 8013472:	b2da      	uxtb	r2, r3
 8013474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013476:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 8013478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	2b50      	cmp	r3, #80	@ 0x50
 801347e:	d902      	bls.n	8013486 <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013480:	f240 3306 	movw	r3, #774	@ 0x306
 8013484:	e0e2      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 8013486:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013488:	b2db      	uxtb	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	d106      	bne.n	801349c <phpalI14443p3a_Sw_Anticollision+0x2b6>
 801348e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	2b50      	cmp	r3, #80	@ 0x50
 8013494:	d002      	beq.n	801349c <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013496:	f240 3306 	movw	r3, #774	@ 0x306
 801349a:	e0d7      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 801349c:	8a7b      	ldrh	r3, [r7, #18]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d041      	beq.n	8013526 <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 80134a2:	7abb      	ldrb	r3, [r7, #10]
 80134a4:	f003 0307 	and.w	r3, r3, #7
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d026      	beq.n	80134fa <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80134ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80134b0:	3302      	adds	r3, #2
 80134b2:	3330      	adds	r3, #48	@ 0x30
 80134b4:	443b      	add	r3, r7
 80134b6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80134ba:	7abb      	ldrb	r3, [r7, #10]
 80134bc:	f003 0307 	and.w	r3, r3, #7
 80134c0:	2101      	movs	r1, #1
 80134c2:	fa01 f303 	lsl.w	r3, r1, r3
 80134c6:	b2db      	uxtb	r3, r3
 80134c8:	3b01      	subs	r3, #1
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	4013      	ands	r3, r2
 80134ce:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	781a      	ldrb	r2, [r3, #0]
 80134d4:	7abb      	ldrb	r3, [r7, #10]
 80134d6:	f003 0307 	and.w	r3, r3, #7
 80134da:	20ff      	movs	r0, #255	@ 0xff
 80134dc:	fa00 f303 	lsl.w	r3, r0, r3
 80134e0:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80134e2:	4013      	ands	r3, r2
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80134ea:	3302      	adds	r3, #2
 80134ec:	430a      	orrs	r2, r1
 80134ee:	b2d2      	uxtb	r2, r2
 80134f0:	3330      	adds	r3, #48	@ 0x30
 80134f2:	443b      	add	r3, r7
 80134f4:	f803 2c18 	strb.w	r2, [r3, #-24]
 80134f8:	e008      	b.n	801350c <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 80134fa:	697a      	ldr	r2, [r7, #20]
 80134fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013500:	3302      	adds	r3, #2
 8013502:	7812      	ldrb	r2, [r2, #0]
 8013504:	3330      	adds	r3, #48	@ 0x30
 8013506:	443b      	add	r3, r7
 8013508:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 801350c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013510:	3303      	adds	r3, #3
 8013512:	f107 0218 	add.w	r2, r7, #24
 8013516:	18d0      	adds	r0, r2, r3
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	3301      	adds	r3, #1
 801351c:	8a7a      	ldrh	r2, [r7, #18]
 801351e:	3a01      	subs	r2, #1
 8013520:	4619      	mov	r1, r3
 8013522:	f00a f874 	bl	801d60e <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 8013526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	2b40      	cmp	r3, #64	@ 0x40
 801352c:	d91d      	bls.n	801356a <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 801352e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	2b4f      	cmp	r3, #79	@ 0x4f
 8013534:	d802      	bhi.n	801353c <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013536:	f240 3305 	movw	r3, #773	@ 0x305
 801353a:	e087      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 801353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801353e:	2240      	movs	r2, #64	@ 0x40
 8013540:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 8013542:	8a7b      	ldrh	r3, [r7, #18]
 8013544:	3b01      	subs	r3, #1
 8013546:	b29b      	uxth	r3, r3
 8013548:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 801354a:	7eba      	ldrb	r2, [r7, #26]
 801354c:	7efb      	ldrb	r3, [r7, #27]
 801354e:	4053      	eors	r3, r2
 8013550:	b2da      	uxtb	r2, r3
 8013552:	7f3b      	ldrb	r3, [r7, #28]
 8013554:	4053      	eors	r3, r2
 8013556:	b2da      	uxtb	r2, r3
 8013558:	7f7b      	ldrb	r3, [r7, #29]
 801355a:	4053      	eors	r3, r2
 801355c:	b2da      	uxtb	r2, r3
 801355e:	7fbb      	ldrb	r3, [r7, #30]
 8013560:	429a      	cmp	r2, r3
 8013562:	d002      	beq.n	801356a <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013564:	f240 3305 	movw	r3, #773	@ 0x305
 8013568:	e070      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 801356a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801356e:	8a7a      	ldrh	r2, [r7, #18]
 8013570:	441a      	add	r2, r3
 8013572:	f107 0318 	add.w	r3, r7, #24
 8013576:	3302      	adds	r3, #2
 8013578:	4619      	mov	r1, r3
 801357a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801357c:	f00a f847 	bl	801d60e <memcpy>
 8013580:	e054      	b.n	801362c <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 8013582:	8a7b      	ldrh	r3, [r7, #18]
 8013584:	2b01      	cmp	r3, #1
 8013586:	d002      	beq.n	801358e <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013588:	f240 3306 	movw	r3, #774	@ 0x306
 801358c:	e05e      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	f003 0304 	and.w	r3, r3, #4
 8013596:	2b00      	cmp	r3, #0
 8013598:	d01e      	beq.n	80135d8 <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 801359a:	7afb      	ldrb	r3, [r7, #11]
 801359c:	2b97      	cmp	r3, #151	@ 0x97
 801359e:	d102      	bne.n	80135a6 <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80135a0:	f240 3306 	movw	r3, #774	@ 0x306
 80135a4:	e052      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	2b88      	cmp	r3, #136	@ 0x88
 80135ac:	d002      	beq.n	80135b4 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80135ae:	f240 3306 	movw	r3, #774	@ 0x306
 80135b2:	e04b      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	7c9b      	ldrb	r3, [r3, #18]
 80135b8:	3308      	adds	r3, #8
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	18d0      	adds	r0, r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	3301      	adds	r3, #1
 80135c2:	2203      	movs	r2, #3
 80135c4:	4619      	mov	r1, r3
 80135c6:	f00a f822 	bl	801d60e <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	7c9b      	ldrb	r3, [r3, #18]
 80135ce:	3303      	adds	r3, #3
 80135d0:	b2da      	uxtb	r2, r3
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	749a      	strb	r2, [r3, #18]
 80135d6:	e025      	b.n	8013624 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	2b88      	cmp	r3, #136	@ 0x88
 80135de:	d102      	bne.n	80135e6 <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80135e0:	f240 3306 	movw	r3, #774	@ 0x306
 80135e4:	e032      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	7c9b      	ldrb	r3, [r3, #18]
 80135ea:	3308      	adds	r3, #8
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	4413      	add	r3, r2
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	6812      	ldr	r2, [r2, #0]
 80135f4:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	7c9b      	ldrb	r3, [r3, #18]
 80135fa:	3304      	adds	r3, #4
 80135fc:	b2da      	uxtb	r2, r3
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2201      	movs	r2, #1
 8013606:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	220a      	movs	r2, #10
 801360e:	210e      	movs	r1, #14
 8013610:	4618      	mov	r0, r3
 8013612:	f7f9 ff11 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013616:	4603      	mov	r3, r0
 8013618:	853b      	strh	r3, [r7, #40]	@ 0x28
 801361a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801361c:	2b00      	cmp	r3, #0
 801361e:	d001      	beq.n	8013624 <phpalI14443p3a_Sw_Anticollision+0x43e>
 8013620:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013622:	e013      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	781a      	ldrb	r2, [r3, #0]
 8013628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801362a:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 801362c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00b      	beq.n	801364a <phpalI14443p3a_Sw_Anticollision+0x464>
 8013632:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013634:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013638:	2b00      	cmp	r3, #0
 801363a:	d106      	bne.n	801364a <phpalI14443p3a_Sw_Anticollision+0x464>
 801363c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801363e:	b2db      	uxtb	r3, r3
 8013640:	b29b      	uxth	r3, r3
 8013642:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013646:	b29b      	uxth	r3, r3
 8013648:	e000      	b.n	801364c <phpalI14443p3a_Sw_Anticollision+0x466>
 801364a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 801364c:	4618      	mov	r0, r3
 801364e:	3730      	adds	r7, #48	@ 0x30
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b088      	sub	sp, #32
 8013658:	af02      	add	r7, sp, #8
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	607a      	str	r2, [r7, #4]
 801365e:	603b      	str	r3, [r7, #0]
 8013660:	460b      	mov	r3, r1
 8013662:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 8013664:	7af9      	ldrb	r1, [r7, #11]
 8013666:	f107 0317 	add.w	r3, r7, #23
 801366a:	9301      	str	r3, [sp, #4]
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	9300      	str	r3, [sp, #0]
 8013670:	2340      	movs	r3, #64	@ 0x40
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f7ff fdb6 	bl	80131e6 <phpalI14443p3a_Sw_Anticollision>
 801367a:	4603      	mov	r3, r0
}
 801367c:	4618      	mov	r0, r3
 801367e:	3718      	adds	r7, #24
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b08a      	sub	sp, #40	@ 0x28
 8013688:	af02      	add	r7, sp, #8
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	60b9      	str	r1, [r7, #8]
 801368e:	603b      	str	r3, [r7, #0]
 8013690:	4613      	mov	r3, r2
 8013692:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8013694:	2300      	movs	r3, #0
 8013696:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 8013698:	2300      	movs	r3, #0
 801369a:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 801369c:	2300      	movs	r3, #0
 801369e:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 80136a0:	2300      	movs	r3, #0
 80136a2:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 80136a4:	79fb      	ldrb	r3, [r7, #7]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d00f      	beq.n	80136ca <phpalI14443p3a_Sw_ActivateCard+0x46>
 80136aa:	79fb      	ldrb	r3, [r7, #7]
 80136ac:	2b04      	cmp	r3, #4
 80136ae:	d00c      	beq.n	80136ca <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 80136b0:	79fb      	ldrb	r3, [r7, #7]
 80136b2:	2b07      	cmp	r3, #7
 80136b4:	d009      	beq.n	80136ca <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	2b0a      	cmp	r3, #10
 80136ba:	d006      	beq.n	80136ca <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d002      	beq.n	80136ca <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80136c4:	f240 3321 	movw	r3, #801	@ 0x321
 80136c8:	e18c      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 80136ce:	f107 0310 	add.w	r3, r7, #16
 80136d2:	2204      	movs	r2, #4
 80136d4:	2100      	movs	r1, #0
 80136d6:	4618      	mov	r0, r3
 80136d8:	f009 ff1a 	bl	801d510 <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 80136dc:	2300      	movs	r3, #0
 80136de:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 80136e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e2:	2200      	movs	r2, #0
 80136e4:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 80136e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e8:	2200      	movs	r2, #0
 80136ea:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	7d1b      	ldrb	r3, [r3, #20]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d12a      	bne.n	801374a <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 80136f4:	f107 0314 	add.w	r3, r7, #20
 80136f8:	4619      	mov	r1, r3
 80136fa:	68f8      	ldr	r0, [r7, #12]
 80136fc:	f7ff fd0d 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 8013700:	4603      	mov	r3, r0
 8013702:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013704:	e019      	b.n	801373a <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 8013706:	7e3b      	ldrb	r3, [r7, #24]
 8013708:	3301      	adds	r3, #1
 801370a:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013714:	2100      	movs	r1, #0
 8013716:	4618      	mov	r0, r3
 8013718:	f7f9 fdba 	bl	800d290 <phhalHw_Pn5180_Wait>
 801371c:	4603      	mov	r3, r0
 801371e:	83fb      	strh	r3, [r7, #30]
 8013720:	8bfb      	ldrh	r3, [r7, #30]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d001      	beq.n	801372a <phpalI14443p3a_Sw_ActivateCard+0xa6>
 8013726:	8bfb      	ldrh	r3, [r7, #30]
 8013728:	e15c      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801372a:	f107 0314 	add.w	r3, r7, #20
 801372e:	4619      	mov	r1, r3
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	f7ff fcf2 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 8013736:	4603      	mov	r3, r0
 8013738:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801373a:	8bfb      	ldrh	r3, [r7, #30]
 801373c:	b2db      	uxtb	r3, r3
 801373e:	2b01      	cmp	r3, #1
 8013740:	d128      	bne.n	8013794 <phpalI14443p3a_Sw_ActivateCard+0x110>
 8013742:	7e3b      	ldrb	r3, [r7, #24]
 8013744:	2b01      	cmp	r3, #1
 8013746:	d9de      	bls.n	8013706 <phpalI14443p3a_Sw_ActivateCard+0x82>
 8013748:	e024      	b.n	8013794 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	7d1b      	ldrb	r3, [r3, #20]
 801374e:	2b03      	cmp	r3, #3
 8013750:	d10c      	bne.n	801376c <phpalI14443p3a_Sw_ActivateCard+0xe8>
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	7d5b      	ldrb	r3, [r3, #21]
 8013756:	2b01      	cmp	r3, #1
 8013758:	d108      	bne.n	801376c <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801375a:	f107 0314 	add.w	r3, r7, #20
 801375e:	4619      	mov	r1, r3
 8013760:	68f8      	ldr	r0, [r7, #12]
 8013762:	f7ff fcda 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 8013766:	4603      	mov	r3, r0
 8013768:	83fb      	strh	r3, [r7, #30]
 801376a:	e013      	b.n	8013794 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 801376c:	79fb      	ldrb	r3, [r7, #7]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d108      	bne.n	8013784 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 8013772:	f107 0314 	add.w	r3, r7, #20
 8013776:	4619      	mov	r1, r3
 8013778:	68f8      	ldr	r0, [r7, #12]
 801377a:	f7ff fcbf 	bl	80130fc <phpalI14443p3a_Sw_RequestA>
 801377e:	4603      	mov	r3, r0
 8013780:	83fb      	strh	r3, [r7, #30]
 8013782:	e007      	b.n	8013794 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8013784:	f107 0314 	add.w	r3, r7, #20
 8013788:	4619      	mov	r1, r3
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f7ff fcc5 	bl	801311a <phpalI14443p3a_Sw_WakeUpA>
 8013790:	4603      	mov	r3, r0
 8013792:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8013794:	8bfb      	ldrh	r3, [r7, #30]
 8013796:	b2db      	uxtb	r3, r3
 8013798:	2b03      	cmp	r3, #3
 801379a:	d10b      	bne.n	80137b4 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	7d1b      	ldrb	r3, [r3, #20]
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d101      	bne.n	80137a8 <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 80137a4:	8bfb      	ldrh	r3, [r7, #30]
 80137a6:	e11d      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 80137a8:	2301      	movs	r3, #1
 80137aa:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 80137ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ae:	2201      	movs	r2, #1
 80137b0:	701a      	strb	r2, [r3, #0]
 80137b2:	e004      	b.n	80137be <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 80137b4:	8bfb      	ldrh	r3, [r7, #30]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d001      	beq.n	80137be <phpalI14443p3a_Sw_ActivateCard+0x13a>
 80137ba:	8bfb      	ldrh	r3, [r7, #30]
 80137bc:	e112      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80137be:	2300      	movs	r3, #0
 80137c0:	76bb      	strb	r3, [r7, #26]
 80137c2:	e0fb      	b.n	80139bc <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 80137c4:	7ebb      	ldrb	r3, [r7, #26]
 80137c6:	2b02      	cmp	r3, #2
 80137c8:	d00c      	beq.n	80137e4 <phpalI14443p3a_Sw_ActivateCard+0x160>
 80137ca:	2b02      	cmp	r3, #2
 80137cc:	dc0d      	bgt.n	80137ea <phpalI14443p3a_Sw_ActivateCard+0x166>
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d002      	beq.n	80137d8 <phpalI14443p3a_Sw_ActivateCard+0x154>
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d003      	beq.n	80137de <phpalI14443p3a_Sw_ActivateCard+0x15a>
 80137d6:	e008      	b.n	80137ea <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 80137d8:	2393      	movs	r3, #147	@ 0x93
 80137da:	76fb      	strb	r3, [r7, #27]
            break;
 80137dc:	e005      	b.n	80137ea <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 80137de:	2395      	movs	r3, #149	@ 0x95
 80137e0:	76fb      	strb	r3, [r7, #27]
            break;
 80137e2:	e002      	b.n	80137ea <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 80137e4:	2397      	movs	r3, #151	@ 0x97
 80137e6:	76fb      	strb	r3, [r7, #27]
            break;
 80137e8:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 80137ea:	79fa      	ldrb	r2, [r7, #7]
 80137ec:	7e7b      	ldrb	r3, [r7, #25]
 80137ee:	3304      	adds	r3, #4
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d107      	bne.n	8013804 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 80137f4:	7e7b      	ldrb	r3, [r7, #25]
 80137f6:	68ba      	ldr	r2, [r7, #8]
 80137f8:	4413      	add	r3, r2
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 80137fe:	2340      	movs	r3, #64	@ 0x40
 8013800:	75bb      	strb	r3, [r7, #22]
 8013802:	e097      	b.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8013804:	79fa      	ldrb	r2, [r7, #7]
 8013806:	7e7b      	ldrb	r3, [r7, #25]
 8013808:	3304      	adds	r3, #4
 801380a:	429a      	cmp	r2, r3
 801380c:	d911      	bls.n	8013832 <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 801380e:	2388      	movs	r3, #136	@ 0x88
 8013810:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 8013812:	7e7b      	ldrb	r3, [r7, #25]
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	18d1      	adds	r1, r2, r3
 8013818:	f107 0310 	add.w	r3, r7, #16
 801381c:	3301      	adds	r3, #1
 801381e:	2203      	movs	r2, #3
 8013820:	4618      	mov	r0, r3
 8013822:	f009 fef4 	bl	801d60e <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 8013826:	7e7b      	ldrb	r3, [r7, #25]
 8013828:	3303      	adds	r3, #3
 801382a:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 801382c:	2340      	movs	r3, #64	@ 0x40
 801382e:	75bb      	strb	r3, [r7, #22]
 8013830:	e080      	b.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 8013832:	2300      	movs	r3, #0
 8013834:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 8013836:	e07d      	b.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8013838:	7db8      	ldrb	r0, [r7, #22]
 801383a:	f107 0210 	add.w	r2, r7, #16
 801383e:	7ef9      	ldrb	r1, [r7, #27]
 8013840:	f107 0316 	add.w	r3, r7, #22
 8013844:	9301      	str	r3, [sp, #4]
 8013846:	f107 0310 	add.w	r3, r7, #16
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	4603      	mov	r3, r0
 801384e:	68f8      	ldr	r0, [r7, #12]
 8013850:	f7ff fcc9 	bl	80131e6 <phpalI14443p3a_Sw_Anticollision>
 8013854:	4603      	mov	r3, r0
 8013856:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	7d1b      	ldrb	r3, [r3, #20]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d12b      	bne.n	80138b8 <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013864:	e021      	b.n	80138aa <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 8013866:	7e3b      	ldrb	r3, [r7, #24]
 8013868:	3301      	adds	r3, #1
 801386a:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013874:	2100      	movs	r1, #0
 8013876:	4618      	mov	r0, r3
 8013878:	f7f9 fd0a 	bl	800d290 <phhalHw_Pn5180_Wait>
 801387c:	4603      	mov	r3, r0
 801387e:	83fb      	strh	r3, [r7, #30]
 8013880:	8bfb      	ldrh	r3, [r7, #30]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d001      	beq.n	801388a <phpalI14443p3a_Sw_ActivateCard+0x206>
 8013886:	8bfb      	ldrh	r3, [r7, #30]
 8013888:	e0ac      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 801388a:	7db8      	ldrb	r0, [r7, #22]
 801388c:	f107 0210 	add.w	r2, r7, #16
 8013890:	7ef9      	ldrb	r1, [r7, #27]
 8013892:	f107 0316 	add.w	r3, r7, #22
 8013896:	9301      	str	r3, [sp, #4]
 8013898:	f107 0310 	add.w	r3, r7, #16
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	4603      	mov	r3, r0
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f7ff fca0 	bl	80131e6 <phpalI14443p3a_Sw_Anticollision>
 80138a6:	4603      	mov	r3, r0
 80138a8:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80138aa:	8bfb      	ldrh	r3, [r7, #30]
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	2b01      	cmp	r3, #1
 80138b0:	d102      	bne.n	80138b8 <phpalI14443p3a_Sw_ActivateCard+0x234>
 80138b2:	7e3b      	ldrb	r3, [r7, #24]
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d9d6      	bls.n	8013866 <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80138b8:	8bfb      	ldrh	r3, [r7, #30]
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	2b03      	cmp	r3, #3
 80138be:	d11b      	bne.n	80138f8 <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	7d1b      	ldrb	r3, [r3, #20]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d101      	bne.n	80138cc <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 80138c8:	8bfb      	ldrh	r3, [r7, #30]
 80138ca:	e08b      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 80138cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ce:	2201      	movs	r2, #1
 80138d0:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 80138d2:	7dbb      	ldrb	r3, [r7, #22]
 80138d4:	f003 0307 	and.w	r3, r3, #7
 80138d8:	2b06      	cmp	r3, #6
 80138da:	d804      	bhi.n	80138e6 <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 80138dc:	7dbb      	ldrb	r3, [r7, #22]
 80138de:	3301      	adds	r3, #1
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	75bb      	strb	r3, [r7, #22]
 80138e4:	e00d      	b.n	8013902 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 80138e6:	7dbb      	ldrb	r3, [r7, #22]
 80138e8:	091b      	lsrs	r3, r3, #4
 80138ea:	b2db      	uxtb	r3, r3
 80138ec:	3301      	adds	r3, #1
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	011b      	lsls	r3, r3, #4
 80138f2:	b2db      	uxtb	r3, r3
 80138f4:	75bb      	strb	r3, [r7, #22]
 80138f6:	e004      	b.n	8013902 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 80138f8:	8bfb      	ldrh	r3, [r7, #30]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d001      	beq.n	8013902 <phpalI14443p3a_Sw_ActivateCard+0x27e>
 80138fe:	8bfb      	ldrh	r3, [r7, #30]
 8013900:	e070      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 8013902:	7dfb      	ldrb	r3, [r7, #23]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d115      	bne.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8013908:	7d3b      	ldrb	r3, [r7, #20]
 801390a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 801390e:	2b00      	cmp	r3, #0
 8013910:	d102      	bne.n	8013918 <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8013912:	7efb      	ldrb	r3, [r7, #27]
 8013914:	2b93      	cmp	r3, #147	@ 0x93
 8013916:	d007      	beq.n	8013928 <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8013918:	7d3b      	ldrb	r3, [r7, #20]
 801391a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 801391e:	2b40      	cmp	r3, #64	@ 0x40
 8013920:	d108      	bne.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8013922:	7efb      	ldrb	r3, [r7, #27]
 8013924:	2b95      	cmp	r3, #149	@ 0x95
 8013926:	d105      	bne.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 8013928:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801392a:	2b88      	cmp	r3, #136	@ 0x88
 801392c:	d102      	bne.n	8013934 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801392e:	f240 3306 	movw	r3, #774	@ 0x306
 8013932:	e057      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8013934:	7dbb      	ldrb	r3, [r7, #22]
 8013936:	2b40      	cmp	r3, #64	@ 0x40
 8013938:	f47f af7e 	bne.w	8013838 <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 801393c:	f107 0210 	add.w	r2, r7, #16
 8013940:	7ef9      	ldrb	r1, [r7, #27]
 8013942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f7ff fe85 	bl	8013654 <phpalI14443p3a_Sw_Select>
 801394a:	4603      	mov	r3, r0
 801394c:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	7d1b      	ldrb	r3, [r3, #20]
 8013952:	2b01      	cmp	r3, #1
 8013954:	d124      	bne.n	80139a0 <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 8013956:	2300      	movs	r3, #0
 8013958:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801395a:	e01a      	b.n	8013992 <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 801395c:	7e3b      	ldrb	r3, [r7, #24]
 801395e:	3301      	adds	r3, #1
 8013960:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801396a:	2100      	movs	r1, #0
 801396c:	4618      	mov	r0, r3
 801396e:	f7f9 fc8f 	bl	800d290 <phhalHw_Pn5180_Wait>
 8013972:	4603      	mov	r3, r0
 8013974:	83fb      	strh	r3, [r7, #30]
 8013976:	8bfb      	ldrh	r3, [r7, #30]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d001      	beq.n	8013980 <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 801397c:	8bfb      	ldrh	r3, [r7, #30]
 801397e:	e031      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8013980:	f107 0210 	add.w	r2, r7, #16
 8013984:	7ef9      	ldrb	r1, [r7, #27]
 8013986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f7ff fe63 	bl	8013654 <phpalI14443p3a_Sw_Select>
 801398e:	4603      	mov	r3, r0
 8013990:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013992:	8bbb      	ldrh	r3, [r7, #28]
 8013994:	b2db      	uxtb	r3, r3
 8013996:	2b01      	cmp	r3, #1
 8013998:	d102      	bne.n	80139a0 <phpalI14443p3a_Sw_ActivateCard+0x31c>
 801399a:	7e3b      	ldrb	r3, [r7, #24]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d9dd      	bls.n	801395c <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 80139a0:	8bbb      	ldrh	r3, [r7, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d001      	beq.n	80139aa <phpalI14443p3a_Sw_ActivateCard+0x326>
 80139a6:	8bbb      	ldrh	r3, [r7, #28]
 80139a8:	e01c      	b.n	80139e4 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 80139aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	f003 0304 	and.w	r3, r3, #4
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d007      	beq.n	80139c6 <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80139b6:	7ebb      	ldrb	r3, [r7, #26]
 80139b8:	3301      	adds	r3, #1
 80139ba:	76bb      	strb	r3, [r7, #26]
 80139bc:	7ebb      	ldrb	r3, [r7, #26]
 80139be:	2b02      	cmp	r3, #2
 80139c0:	f67f af00 	bls.w	80137c4 <phpalI14443p3a_Sw_ActivateCard+0x140>
 80139c4:	e000      	b.n	80139c8 <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 80139c6:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f103 0108 	add.w	r1, r3, #8
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	7c9b      	ldrb	r3, [r3, #18]
 80139d2:	461a      	mov	r2, r3
 80139d4:	6838      	ldr	r0, [r7, #0]
 80139d6:	f009 fe1a 	bl	801d60e <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	7c9a      	ldrb	r2, [r3, #18]
 80139de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e0:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80139e2:	2300      	movs	r3, #0
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3720      	adds	r7, #32
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}

080139ec <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b086      	sub	sp, #24
 80139f0:	af02      	add	r7, sp, #8
 80139f2:	60f8      	str	r0, [r7, #12]
 80139f4:	607a      	str	r2, [r7, #4]
 80139f6:	461a      	mov	r2, r3
 80139f8:	460b      	mov	r3, r1
 80139fa:	817b      	strh	r3, [r7, #10]
 80139fc:	4613      	mov	r3, r2
 80139fe:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6858      	ldr	r0, [r3, #4]
 8013a04:	893a      	ldrh	r2, [r7, #8]
 8013a06:	8979      	ldrh	r1, [r7, #10]
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	9301      	str	r3, [sp, #4]
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	9300      	str	r3, [sp, #0]
 8013a10:	4613      	mov	r3, r2
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	f7f9 f940 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8013a18:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3710      	adds	r7, #16
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 8013a22:	b580      	push	{r7, lr}
 8013a24:	b08a      	sub	sp, #40	@ 0x28
 8013a26:	af02      	add	r7, sp, #8
 8013a28:	60f8      	str	r0, [r7, #12]
 8013a2a:	460b      	mov	r3, r1
 8013a2c:	607a      	str	r2, [r7, #4]
 8013a2e:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013a34:	2300      	movs	r3, #0
 8013a36:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	212e      	movs	r1, #46	@ 0x2e
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7f9 fcf9 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013a46:	4603      	mov	r3, r0
 8013a48:	83fb      	strh	r3, [r7, #30]
 8013a4a:	8bfb      	ldrh	r3, [r7, #30]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d001      	beq.n	8013a54 <phpalI14443p3a_Sw_RequestAEx+0x32>
 8013a50:	8bfb      	ldrh	r3, [r7, #30]
 8013a52:	e0cc      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2109      	movs	r1, #9
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f9 fceb 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013a62:	4603      	mov	r3, r0
 8013a64:	83fb      	strh	r3, [r7, #30]
 8013a66:	8bfb      	ldrh	r3, [r7, #30]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d001      	beq.n	8013a70 <phpalI14443p3a_Sw_RequestAEx+0x4e>
 8013a6c:	8bfb      	ldrh	r3, [r7, #30]
 8013a6e:	e0be      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	210a      	movs	r1, #10
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7f9 fcdd 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	83fb      	strh	r3, [r7, #30]
 8013a82:	8bfb      	ldrh	r3, [r7, #30]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <phpalI14443p3a_Sw_RequestAEx+0x6a>
 8013a88:	8bfb      	ldrh	r3, [r7, #30]
 8013a8a:	e0b0      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	2291      	movs	r2, #145	@ 0x91
 8013a92:	210d      	movs	r1, #13
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f9 fccf 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	83fb      	strh	r3, [r7, #30]
 8013a9e:	8bfb      	ldrh	r3, [r7, #30]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d001      	beq.n	8013aa8 <phpalI14443p3a_Sw_RequestAEx+0x86>
 8013aa4:	8bfb      	ldrh	r3, [r7, #30]
 8013aa6:	e0a2      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	f107 0210 	add.w	r2, r7, #16
 8013ab0:	2106      	movs	r1, #6
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7fb f90e 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	83fb      	strh	r3, [r7, #30]
 8013abc:	8bfb      	ldrh	r3, [r7, #30]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d001      	beq.n	8013ac6 <phpalI14443p3a_Sw_RequestAEx+0xa4>
 8013ac2:	8bfb      	ldrh	r3, [r7, #30]
 8013ac4:	e093      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	224c      	movs	r2, #76	@ 0x4c
 8013acc:	2106      	movs	r1, #6
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7f9 fcb2 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	83fb      	strh	r3, [r7, #30]
 8013ad8:	8bfb      	ldrh	r3, [r7, #30]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d001      	beq.n	8013ae2 <phpalI14443p3a_Sw_RequestAEx+0xc0>
 8013ade:	8bfb      	ldrh	r3, [r7, #30]
 8013ae0:	e085      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	2101      	movs	r1, #1
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7f9 fca4 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013af0:	4603      	mov	r3, r0
 8013af2:	83fb      	strh	r3, [r7, #30]
 8013af4:	8bfb      	ldrh	r3, [r7, #30]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d001      	beq.n	8013afe <phpalI14443p3a_Sw_RequestAEx+0xdc>
 8013afa:	8bfb      	ldrh	r3, [r7, #30]
 8013afc:	e077      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	2102      	movs	r1, #2
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7f9 fc96 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	83fb      	strh	r3, [r7, #30]
 8013b10:	8bfb      	ldrh	r3, [r7, #30]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d001      	beq.n	8013b1a <phpalI14443p3a_Sw_RequestAEx+0xf8>
 8013b16:	8bfb      	ldrh	r3, [r7, #30]
 8013b18:	e069      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	685b      	ldr	r3, [r3, #4]
 8013b1e:	2207      	movs	r2, #7
 8013b20:	2103      	movs	r1, #3
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7f9 fc88 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	83fb      	strh	r3, [r7, #30]
 8013b2c:	8bfb      	ldrh	r3, [r7, #30]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d001      	beq.n	8013b36 <phpalI14443p3a_Sw_RequestAEx+0x114>
 8013b32:	8bfb      	ldrh	r3, [r7, #30]
 8013b34:	e05b      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 8013b36:	7afb      	ldrb	r3, [r7, #11]
 8013b38:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	6858      	ldr	r0, [r3, #4]
 8013b3e:	f107 0218 	add.w	r2, r7, #24
 8013b42:	f107 0312 	add.w	r3, r7, #18
 8013b46:	9301      	str	r3, [sp, #4]
 8013b48:	f107 0314 	add.w	r3, r7, #20
 8013b4c:	9300      	str	r3, [sp, #0]
 8013b4e:	2301      	movs	r3, #1
 8013b50:	2100      	movs	r1, #0
 8013b52:	f7f9 f8a1 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8013b56:	4603      	mov	r3, r0
 8013b58:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	8a3a      	ldrh	r2, [r7, #16]
 8013b60:	2106      	movs	r1, #6
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 fc68 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	83bb      	strh	r3, [r7, #28]
 8013b6c:	8bbb      	ldrh	r3, [r7, #28]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <phpalI14443p3a_Sw_RequestAEx+0x154>
 8013b72:	8bbb      	ldrh	r3, [r7, #28]
 8013b74:	e03b      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 8013b76:	8bfb      	ldrh	r3, [r7, #30]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <phpalI14443p3a_Sw_RequestAEx+0x15e>
 8013b7c:	8bfb      	ldrh	r3, [r7, #30]
 8013b7e:	e036      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 8013b80:	8a7b      	ldrh	r3, [r7, #18]
 8013b82:	2b02      	cmp	r3, #2
 8013b84:	d12f      	bne.n	8013be6 <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	881b      	ldrh	r3, [r3, #0]
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	7d1b      	ldrb	r3, [r3, #20]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d109      	bne.n	8013bac <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d022      	beq.n	8013bec <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013ba6:	f240 3306 	movw	r3, #774	@ 0x306
 8013baa:	e020      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	f003 031f 	and.w	r3, r3, #31
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d106      	bne.n	8013bc6 <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	3301      	adds	r3, #1
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	f003 030f 	and.w	r3, r3, #15
 8013bc2:	2b0c      	cmp	r3, #12
 8013bc4:	d10c      	bne.n	8013be0 <phpalI14443p3a_Sw_RequestAEx+0x1be>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	3301      	adds	r3, #1
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	f003 030f 	and.w	r3, r3, #15
 8013bd0:	2b0c      	cmp	r3, #12
 8013bd2:	d10b      	bne.n	8013bec <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	f003 031f 	and.w	r3, r3, #31
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d005      	beq.n	8013bec <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013be0:	f240 3306 	movw	r3, #774	@ 0x306
 8013be4:	e003      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013be6:	f240 3306 	movw	r3, #774	@ 0x306
 8013bea:	e000      	b.n	8013bee <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 8013bec:	2300      	movs	r3, #0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3720      	adds	r7, #32
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b084      	sub	sp, #16
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	60f8      	str	r0, [r7, #12]
 8013bfe:	60b9      	str	r1, [r7, #8]
 8013c00:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	7cdb      	ldrb	r3, [r3, #19]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d102      	bne.n	8013c10 <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 8013c0a:	f240 3325 	movw	r3, #805	@ 0x325
 8013c0e:	e00d      	b.n	8013c2c <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f103 0108 	add.w	r1, r3, #8
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	7c9b      	ldrb	r3, [r3, #18]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	68b8      	ldr	r0, [r7, #8]
 8013c1e:	f009 fcf6 	bl	801d60e <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	7c9a      	ldrb	r2, [r3, #18]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3710      	adds	r7, #16
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8013c34:	b480      	push	{r7}
 8013c36:	b085      	sub	sp, #20
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	607a      	str	r2, [r7, #4]
 8013c40:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 8013c42:	897b      	ldrh	r3, [r7, #10]
 8013c44:	2b2c      	cmp	r3, #44	@ 0x2c
 8013c46:	d002      	beq.n	8013c4e <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 8013c48:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8013c4c:	e051      	b.n	8013cf2 <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d101      	bne.n	8013c58 <phpalI14443p3b_Sw_Init+0x24>
 8013c54:	2321      	movs	r3, #33	@ 0x21
 8013c56:	e04c      	b.n	8013cf2 <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d101      	bne.n	8013c62 <phpalI14443p3b_Sw_Init+0x2e>
 8013c5e:	2321      	movs	r3, #33	@ 0x21
 8013c60:	e047      	b.n	8013cf2 <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	f240 4201 	movw	r2, #1025	@ 0x401
 8013c68:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2200      	movs	r2, #0
 8013c74:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2200      	movs	r2, #0
 8013c86:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2204      	movs	r2, #4
 8013c92:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2202      	movs	r2, #2
 8013c98:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8013cbe:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2200      	movs	r2, #0
 8013cca:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2202      	movs	r2, #2
 8013cdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2201      	movs	r2, #1
 8013cec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 8013cf0:	2300      	movs	r3, #0
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3714      	adds	r7, #20
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr
	...

08013d00 <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	460b      	mov	r3, r1
 8013d0a:	807b      	strh	r3, [r7, #2]
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8013d10:	887b      	ldrh	r3, [r7, #2]
 8013d12:	2b03      	cmp	r3, #3
 8013d14:	d82c      	bhi.n	8013d70 <phpalI14443p3b_Sw_SetConfig+0x70>
 8013d16:	a201      	add	r2, pc, #4	@ (adr r2, 8013d1c <phpalI14443p3b_Sw_SetConfig+0x1c>)
 8013d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d1c:	08013d2d 	.word	0x08013d2d
 8013d20:	08013d37 	.word	0x08013d37
 8013d24:	08013d43 	.word	0x08013d43
 8013d28:	08013d4f 	.word	0x08013d4f
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8013d2c:	883b      	ldrh	r3, [r7, #0]
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	759a      	strb	r2, [r3, #22]
        break;
 8013d34:	e01f      	b.n	8013d76 <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 8013d36:	883b      	ldrh	r3, [r7, #0]
 8013d38:	b2da      	uxtb	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 8013d40:	e019      	b.n	8013d76 <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 8013d42:	883b      	ldrh	r3, [r7, #0]
 8013d44:	b2da      	uxtb	r2, r3
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8013d4c:	e013      	b.n	8013d76 <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8013d4e:	883b      	ldrh	r3, [r7, #0]
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d006      	beq.n	8013d64 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 8013d56:	883b      	ldrh	r3, [r7, #0]
 8013d58:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d002      	beq.n	8013d64 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013d5e:	f240 4321 	movw	r3, #1057	@ 0x421
 8013d62:	e009      	b.n	8013d78 <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 8013d64:	883b      	ldrh	r3, [r7, #0]
 8013d66:	b2da      	uxtb	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 8013d6e:	e002      	b.n	8013d76 <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013d70:	f240 4323 	movw	r3, #1059	@ 0x423
 8013d74:	e000      	b.n	8013d78 <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 8013d76:	2300      	movs	r3, #0
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr

08013d84 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	607a      	str	r2, [r7, #4]
 8013d90:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8013d92:	897b      	ldrh	r3, [r7, #10]
 8013d94:	2b05      	cmp	r3, #5
 8013d96:	d828      	bhi.n	8013dea <phpalI14443p3b_Sw_GetConfig+0x66>
 8013d98:	a201      	add	r2, pc, #4	@ (adr r2, 8013da0 <phpalI14443p3b_Sw_GetConfig+0x1c>)
 8013d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d9e:	bf00      	nop
 8013da0:	08013db9 	.word	0x08013db9
 8013da4:	08013deb 	.word	0x08013deb
 8013da8:	08013deb 	.word	0x08013deb
 8013dac:	08013dc5 	.word	0x08013dc5
 8013db0:	08013dd3 	.word	0x08013dd3
 8013db4:	08013ddf 	.word	0x08013ddf
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	7d9b      	ldrb	r3, [r3, #22]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	801a      	strh	r2, [r3, #0]
        break;
 8013dc2:	e015      	b.n	8013df0 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8013dca:	461a      	mov	r2, r3
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	801a      	strh	r2, [r3, #0]
        break;
 8013dd0:	e00e      	b.n	8013df0 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	7d1b      	ldrb	r3, [r3, #20]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	801a      	strh	r2, [r3, #0]
        break;
 8013ddc:	e008      	b.n	8013df0 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	7d5b      	ldrb	r3, [r3, #21]
 8013de2:	461a      	mov	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	801a      	strh	r2, [r3, #0]
        break;
 8013de8:	e002      	b.n	8013df0 <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013dea:	f240 4323 	movw	r3, #1059	@ 0x423
 8013dee:	e000      	b.n	8013df2 <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3714      	adds	r7, #20
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr
 8013dfe:	bf00      	nop

08013e00 <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af04      	add	r7, sp, #16
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	4608      	mov	r0, r1
 8013e0a:	4611      	mov	r1, r2
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	4603      	mov	r3, r0
 8013e10:	70fb      	strb	r3, [r7, #3]
 8013e12:	460b      	mov	r3, r1
 8013e14:	70bb      	strb	r3, [r7, #2]
 8013e16:	4613      	mov	r3, r2
 8013e18:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8013e1a:	78b9      	ldrb	r1, [r7, #2]
 8013e1c:	78fa      	ldrb	r2, [r7, #3]
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	9302      	str	r3, [sp, #8]
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	9301      	str	r3, [sp, #4]
 8013e26:	787b      	ldrb	r3, [r7, #1]
 8013e28:	9300      	str	r3, [sp, #0]
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	2100      	movs	r1, #0
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f000 fc52 	bl	80146d8 <phpalI14443p3b_Sw_RequestBEx>
 8013e34:	4603      	mov	r3, r0
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}

08013e3e <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 8013e3e:	b580      	push	{r7, lr}
 8013e40:	b086      	sub	sp, #24
 8013e42:	af04      	add	r7, sp, #16
 8013e44:	6078      	str	r0, [r7, #4]
 8013e46:	4608      	mov	r0, r1
 8013e48:	4611      	mov	r1, r2
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	70fb      	strb	r3, [r7, #3]
 8013e50:	460b      	mov	r3, r1
 8013e52:	70bb      	strb	r3, [r7, #2]
 8013e54:	4613      	mov	r3, r2
 8013e56:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8013e58:	78b9      	ldrb	r1, [r7, #2]
 8013e5a:	78fa      	ldrb	r2, [r7, #3]
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	9302      	str	r3, [sp, #8]
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	9301      	str	r3, [sp, #4]
 8013e64:	787b      	ldrb	r3, [r7, #1]
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	460b      	mov	r3, r1
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f000 fc33 	bl	80146d8 <phpalI14443p3b_Sw_RequestBEx>
 8013e72:	4603      	mov	r3, r0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3708      	adds	r7, #8
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b08a      	sub	sp, #40	@ 0x28
 8013e80:	af02      	add	r7, sp, #8
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	607a      	str	r2, [r7, #4]
 8013e86:	603b      	str	r3, [r7, #0]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013e90:	2300      	movs	r3, #0
 8013e92:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 8013e94:	7afb      	ldrb	r3, [r7, #11]
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	d902      	bls.n	8013ea0 <phpalI14443p3b_Sw_SlotMarker+0x24>
 8013e9a:	7afb      	ldrb	r3, [r7, #11]
 8013e9c:	2b10      	cmp	r3, #16
 8013e9e:	d902      	bls.n	8013ea6 <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013ea0:	f240 4321 	movw	r3, #1057	@ 0x421
 8013ea4:	e026      	b.n	8013ef4 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 8013ea6:	7afb      	ldrb	r3, [r7, #11]
 8013ea8:	3b01      	subs	r3, #1
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	011b      	lsls	r3, r3, #4
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	f043 0305 	orr.w	r3, r3, #5
 8013eb4:	b2db      	uxtb	r3, r3
 8013eb6:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	6858      	ldr	r0, [r3, #4]
 8013ebc:	f107 021c 	add.w	r2, r7, #28
 8013ec0:	f107 0316 	add.w	r3, r7, #22
 8013ec4:	9301      	str	r3, [sp, #4]
 8013ec6:	f107 0318 	add.w	r3, r7, #24
 8013eca:	9300      	str	r3, [sp, #0]
 8013ecc:	2301      	movs	r3, #1
 8013ece:	2100      	movs	r1, #0
 8013ed0:	f7f8 fee2 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	83fb      	strh	r3, [r7, #30]
 8013ed8:	8bfb      	ldrh	r3, [r7, #30]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d001      	beq.n	8013ee2 <phpalI14443p3b_Sw_SlotMarker+0x66>
 8013ede:	8bfb      	ldrh	r3, [r7, #30]
 8013ee0:	e008      	b.n	8013ef4 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8013ee2:	69b9      	ldr	r1, [r7, #24]
 8013ee4:	8afa      	ldrh	r2, [r7, #22]
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f000 fb2f 	bl	8014550 <phpalI14443p3b_Sw_CheckATQBEx>
 8013ef2:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3720      	adds	r7, #32
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b088      	sub	sp, #32
 8013f00:	af02      	add	r7, sp, #8
 8013f02:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013f04:	2300      	movs	r3, #0
 8013f06:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8013f14:	210d      	movs	r1, #13
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7f9 fa8e 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	82fb      	strh	r3, [r7, #22]
 8013f20:	8afb      	ldrh	r3, [r7, #22]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d001      	beq.n	8013f2a <phpalI14443p3b_Sw_HaltB+0x2e>
 8013f26:	8afb      	ldrh	r3, [r7, #22]
 8013f28:	e029      	b.n	8013f7e <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 8013f2a:	2350      	movs	r3, #80	@ 0x50
 8013f2c:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	3309      	adds	r3, #9
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6858      	ldr	r0, [r3, #4]
 8013f3c:	f107 0210 	add.w	r2, r7, #16
 8013f40:	f107 030a 	add.w	r3, r7, #10
 8013f44:	9301      	str	r3, [sp, #4]
 8013f46:	f107 030c 	add.w	r3, r7, #12
 8013f4a:	9300      	str	r3, [sp, #0]
 8013f4c:	2305      	movs	r3, #5
 8013f4e:	2100      	movs	r1, #0
 8013f50:	f7f8 fea2 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8013f54:	4603      	mov	r3, r0
 8013f56:	82fb      	strh	r3, [r7, #22]
 8013f58:	8afb      	ldrh	r3, [r7, #22]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d001      	beq.n	8013f62 <phpalI14443p3b_Sw_HaltB+0x66>
 8013f5e:	8afb      	ldrh	r3, [r7, #22]
 8013f60:	e00d      	b.n	8013f7e <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 8013f62:	897b      	ldrh	r3, [r7, #10]
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d103      	bne.n	8013f70 <phpalI14443p3b_Sw_HaltB+0x74>
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d002      	beq.n	8013f76 <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f70:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f74:	e003      	b.n	8013f7e <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8013f7c:	2300      	movs	r3, #0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
	...

08013f88 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b090      	sub	sp, #64	@ 0x40
 8013f8c:	af02      	add	r7, sp, #8
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	4611      	mov	r1, r2
 8013f94:	461a      	mov	r2, r3
 8013f96:	460b      	mov	r3, r1
 8013f98:	71fb      	strb	r3, [r7, #7]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 8013fac:	2300      	movs	r3, #0
 8013fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 8013fb4:	f04f 0300 	mov.w	r3, #0
 8013fb8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 8013fba:	79fb      	ldrb	r3, [r7, #7]
 8013fbc:	2b0c      	cmp	r3, #12
 8013fbe:	d005      	beq.n	8013fcc <phpalI14443p3b_Sw_Attrib+0x44>
 8013fc0:	79fb      	ldrb	r3, [r7, #7]
 8013fc2:	2b0d      	cmp	r3, #13
 8013fc4:	d002      	beq.n	8013fcc <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013fc6:	f240 4321 	movw	r3, #1057	@ 0x421
 8013fca:	e295      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 8013fcc:	79bb      	ldrb	r3, [r7, #6]
 8013fce:	2b0c      	cmp	r3, #12
 8013fd0:	d807      	bhi.n	8013fe2 <phpalI14443p3b_Sw_Attrib+0x5a>
 8013fd2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013fd6:	2b03      	cmp	r3, #3
 8013fd8:	d803      	bhi.n	8013fe2 <phpalI14443p3b_Sw_Attrib+0x5a>
 8013fda:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8013fde:	2b03      	cmp	r3, #3
 8013fe0:	d902      	bls.n	8013fe8 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013fe2:	f240 4321 	movw	r3, #1057	@ 0x421
 8013fe6:	e287      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8013fe8:	79bb      	ldrb	r3, [r7, #6]
 8013fea:	2b07      	cmp	r3, #7
 8013fec:	d807      	bhi.n	8013ffe <phpalI14443p3b_Sw_Attrib+0x76>
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d102      	bne.n	8013ffe <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013ff8:	f240 4321 	movw	r3, #1057	@ 0x421
 8013ffc:	e27c      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 8013ffe:	231d      	movs	r3, #29
 8014000:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	3301      	adds	r3, #1
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	7d9b      	ldrb	r3, [r3, #22]
 8014010:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 8014014:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8014018:	019b      	lsls	r3, r3, #6
 801401a:	b25a      	sxtb	r2, r3
 801401c:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8014020:	011b      	lsls	r3, r3, #4
 8014022:	b25b      	sxtb	r3, r3
 8014024:	4313      	orrs	r3, r2
 8014026:	b25a      	sxtb	r2, r3
 8014028:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801402c:	4313      	orrs	r3, r2
 801402e:	b25b      	sxtb	r3, r3
 8014030:	b2db      	uxtb	r3, r3
 8014032:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801403c:	2b01      	cmp	r3, #1
 801403e:	d108      	bne.n	8014052 <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	330a      	adds	r3, #10
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	f003 0301 	and.w	r3, r3, #1
 801404a:	b2db      	uxtb	r3, r3
 801404c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014050:	e007      	b.n	8014062 <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	330a      	adds	r3, #10
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	f003 0307 	and.w	r3, r3, #7
 801405c:	b2db      	uxtb	r3, r3
 801405e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	330b      	adds	r3, #11
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	f003 0301 	and.w	r3, r3, #1
 801406c:	2b00      	cmp	r3, #0
 801406e:	d006      	beq.n	801407e <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 8014070:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8014074:	2b0e      	cmp	r3, #14
 8014076:	d905      	bls.n	8014084 <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014078:	f240 4321 	movw	r3, #1057	@ 0x421
 801407c:	e23c      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 801407e:	2300      	movs	r3, #0
 8014080:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 8014084:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8014088:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	330b      	adds	r3, #11
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	091b      	lsrs	r3, r3, #4
 8014094:	b2da      	uxtb	r2, r3
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	7c5b      	ldrb	r3, [r3, #17]
 801409e:	2b0f      	cmp	r3, #15
 80140a0:	d102      	bne.n	80140a8 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2204      	movs	r2, #4
 80140a6:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	7c5b      	ldrb	r3, [r3, #17]
 80140ac:	461a      	mov	r2, r3
 80140ae:	2301      	movs	r3, #1
 80140b0:	4093      	lsls	r3, r2
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7ec fa26 	bl	8000504 <__aeabi_ui2d>
 80140b8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8014368 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 80140ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140be:	f7ec fa9b 	bl	80005f8 <__aeabi_dmul>
 80140c2:	4602      	mov	r2, r0
 80140c4:	460b      	mov	r3, r1
 80140c6:	4610      	mov	r0, r2
 80140c8:	4619      	mov	r1, r3
 80140ca:	f7ec fd6d 	bl	8000ba8 <__aeabi_d2f>
 80140ce:	4603      	mov	r3, r0
 80140d0:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80140d8:	2b03      	cmp	r3, #3
 80140da:	d108      	bne.n	80140ee <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 80140dc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80140e0:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8014358 <phpalI14443p3b_Sw_Attrib+0x3d0>
 80140e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140e8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80140ec:	e014      	b.n	8014118 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 80140ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80140f2:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801435c <phpalI14443p3b_Sw_Attrib+0x3d4>
 80140f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140fa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014104:	2b01      	cmp	r3, #1
 8014106:	d107      	bne.n	8014118 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 8014108:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801410c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8014360 <phpalI14443p3b_Sw_Attrib+0x3d8>
 8014110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014114:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 8014118:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801411c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014120:	ee17 3a90 	vmov	r3, s15
 8014124:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 8014126:	79fb      	ldrb	r3, [r7, #7]
 8014128:	2b0d      	cmp	r3, #13
 801412a:	d10e      	bne.n	801414a <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	685b      	ldr	r3, [r3, #4]
 8014130:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8014134:	210d      	movs	r1, #13
 8014136:	4618      	mov	r0, r3
 8014138:	f7f9 f97e 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801413c:	4603      	mov	r3, r0
 801413e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014140:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014142:	2b00      	cmp	r3, #0
 8014144:	d029      	beq.n	801419a <phpalI14443p3b_Sw_Attrib+0x212>
 8014146:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014148:	e1d6      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014150:	d314      	bcc.n	801417c <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	6858      	ldr	r0, [r3, #4]
 8014156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014158:	4a82      	ldr	r2, [pc, #520]	@ (8014364 <phpalI14443p3b_Sw_Attrib+0x3dc>)
 801415a:	fba2 2303 	umull	r2, r3, r2, r3
 801415e:	099b      	lsrs	r3, r3, #6
 8014160:	b29b      	uxth	r3, r3
 8014162:	3301      	adds	r3, #1
 8014164:	b29b      	uxth	r3, r3
 8014166:	461a      	mov	r2, r3
 8014168:	210e      	movs	r1, #14
 801416a:	f7f9 f965 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801416e:	4603      	mov	r3, r0
 8014170:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014172:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014174:	2b00      	cmp	r3, #0
 8014176:	d010      	beq.n	801419a <phpalI14443p3b_Sw_Attrib+0x212>
 8014178:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801417a:	e1bd      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014182:	b292      	uxth	r2, r2
 8014184:	210d      	movs	r1, #13
 8014186:	4618      	mov	r0, r3
 8014188:	f7f9 f956 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801418c:	4603      	mov	r3, r0
 801418e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014190:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014192:	2b00      	cmp	r3, #0
 8014194:	d001      	beq.n	801419a <phpalI14443p3b_Sw_Attrib+0x212>
 8014196:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014198:	e1ae      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 801419a:	2300      	movs	r3, #0
 801419c:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	6858      	ldr	r0, [r3, #4]
 80141a2:	f107 021c 	add.w	r2, r7, #28
 80141a6:	f107 0316 	add.w	r3, r7, #22
 80141aa:	9301      	str	r3, [sp, #4]
 80141ac:	f107 0318 	add.w	r3, r7, #24
 80141b0:	9300      	str	r3, [sp, #0]
 80141b2:	2309      	movs	r3, #9
 80141b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80141b8:	f7f8 fd6e 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80141bc:	4603      	mov	r3, r0
 80141be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80141c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d001      	beq.n	80141ca <phpalI14443p3b_Sw_Attrib+0x242>
 80141c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80141c8:	e196      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6858      	ldr	r0, [r3, #4]
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	699a      	ldr	r2, [r3, #24]
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	8bd9      	ldrh	r1, [r3, #30]
 80141d6:	f107 0316 	add.w	r3, r7, #22
 80141da:	9301      	str	r3, [sp, #4]
 80141dc:	f107 0318 	add.w	r3, r7, #24
 80141e0:	9300      	str	r3, [sp, #0]
 80141e2:	460b      	mov	r3, r1
 80141e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80141e8:	f7f8 fd56 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80141ec:	4603      	mov	r3, r0
 80141ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80141f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 80141fa:	e04d      	b.n	8014298 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014202:	2b01      	cmp	r3, #1
 8014204:	d118      	bne.n	8014238 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8014206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014208:	b2db      	uxtb	r3, r3
 801420a:	2b01      	cmp	r3, #1
 801420c:	d003      	beq.n	8014216 <phpalI14443p3b_Sw_Attrib+0x28e>
 801420e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014210:	b2db      	uxtb	r3, r3
 8014212:	2b11      	cmp	r3, #17
 8014214:	d10e      	bne.n	8014234 <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801421e:	2100      	movs	r1, #0
 8014220:	4618      	mov	r0, r3
 8014222:	f7f9 f835 	bl	800d290 <phhalHw_Pn5180_Wait>
 8014226:	4603      	mov	r3, r0
 8014228:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801422a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801422c:	2b00      	cmp	r3, #0
 801422e:	d003      	beq.n	8014238 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8014230:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014232:	e161      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 8014234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014236:	e15f      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8014238:	2300      	movs	r3, #0
 801423a:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6858      	ldr	r0, [r3, #4]
 8014240:	f107 021c 	add.w	r2, r7, #28
 8014244:	f107 0316 	add.w	r3, r7, #22
 8014248:	9301      	str	r3, [sp, #4]
 801424a:	f107 0318 	add.w	r3, r7, #24
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	2309      	movs	r3, #9
 8014252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8014256:	f7f8 fd1f 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 801425a:	4603      	mov	r3, r0
 801425c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801425e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014260:	2b00      	cmp	r3, #0
 8014262:	d001      	beq.n	8014268 <phpalI14443p3b_Sw_Attrib+0x2e0>
 8014264:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014266:	e147      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	6858      	ldr	r0, [r3, #4]
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	699a      	ldr	r2, [r3, #24]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	8bd9      	ldrh	r1, [r3, #30]
 8014274:	f107 0316 	add.w	r3, r7, #22
 8014278:	9301      	str	r3, [sp, #4]
 801427a:	f107 0318 	add.w	r3, r7, #24
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	460b      	mov	r3, r1
 8014282:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014286:	f7f8 fd07 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 801428a:	4603      	mov	r3, r0
 801428c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 801428e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014292:	3b01      	subs	r3, #1
 8014294:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8014298:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801429c:	2b00      	cmp	r3, #0
 801429e:	d003      	beq.n	80142a8 <phpalI14443p3b_Sw_Attrib+0x320>
 80142a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d1a9      	bne.n	80141fc <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 80142a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d001      	beq.n	80142b2 <phpalI14443p3b_Sw_Attrib+0x32a>
 80142ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80142b0:	e122      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 80142b2:	8afb      	ldrh	r3, [r7, #22]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d102      	bne.n	80142be <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80142b8:	f240 4306 	movw	r3, #1030	@ 0x406
 80142bc:	e11c      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	330b      	adds	r3, #11
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	f003 0301 	and.w	r3, r3, #1
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d00a      	beq.n	80142e2 <phpalI14443p3b_Sw_Attrib+0x35a>
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	f003 020f 	and.w	r2, r3, #15
 80142d4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80142d8:	429a      	cmp	r2, r3
 80142da:	d002      	beq.n	80142e2 <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80142dc:	f240 4306 	movw	r3, #1030	@ 0x406
 80142e0:	e10a      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80142e8:	2b03      	cmp	r3, #3
 80142ea:	d00f      	beq.n	801430c <phpalI14443p3b_Sw_Attrib+0x384>
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	330b      	adds	r3, #11
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	f003 0301 	and.w	r3, r3, #1
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d108      	bne.n	801430c <phpalI14443p3b_Sw_Attrib+0x384>
 80142fa:	69bb      	ldr	r3, [r7, #24]
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	f003 030f 	and.w	r3, r3, #15
 8014302:	2b00      	cmp	r3, #0
 8014304:	d002      	beq.n	801430c <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8014306:	f240 4306 	movw	r3, #1030	@ 0x406
 801430a:	e0f5      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	091b      	lsrs	r3, r3, #4
 8014312:	b2da      	uxtb	r2, r3
 8014314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014316:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 8014318:	8afb      	ldrh	r3, [r7, #22]
 801431a:	2b01      	cmp	r3, #1
 801431c:	d931      	bls.n	8014382 <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 801431e:	8afb      	ldrh	r3, [r7, #22]
 8014320:	3b01      	subs	r3, #1
 8014322:	b29a      	uxth	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	8bdb      	ldrh	r3, [r3, #30]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d105      	bne.n	801433c <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2200      	movs	r2, #0
 8014334:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8014336:	f240 4306 	movw	r3, #1030	@ 0x406
 801433a:	e0dd      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014344:	429a      	cmp	r2, r3
 8014346:	d913      	bls.n	8014370 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2200      	movs	r2, #0
 801434c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 801434e:	f240 4304 	movw	r3, #1028	@ 0x404
 8014352:	e0d1      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
 8014354:	f3af 8000 	nop.w
 8014358:	427c0000 	.word	0x427c0000
 801435c:	4566a000 	.word	0x4566a000
 8014360:	447a0000 	.word	0x447a0000
 8014364:	10624dd3 	.word	0x10624dd3
 8014368:	d12e109d 	.word	0xd12e109d
 801436c:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	6a18      	ldr	r0, [r3, #32]
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	1c59      	adds	r1, r3, #1
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801437c:	461a      	mov	r2, r3
 801437e:	f009 f946 	bl	801d60e <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014388:	2b03      	cmp	r3, #3
 801438a:	d006      	beq.n	801439a <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	2200      	movs	r2, #0
 8014390:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2200      	movs	r2, #0
 8014396:	73da      	strb	r2, [r3, #15]
 8014398:	e011      	b.n	80143be <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	330b      	adds	r3, #11
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	f003 0301 	and.w	r3, r3, #1
 80143a4:	b2da      	uxtb	r2, r3
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	330b      	adds	r3, #11
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	085b      	lsrs	r3, r3, #1
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 80143be:	69bb      	ldr	r3, [r7, #24]
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	f003 030f 	and.w	r3, r3, #15
 80143c6:	b2da      	uxtb	r2, r3
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	330a      	adds	r3, #10
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	091b      	lsrs	r3, r3, #4
 80143d4:	b2da      	uxtb	r2, r3
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	79ba      	ldrb	r2, [r7, #6]
 80143de:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80143e6:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80143ee:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 80143f0:	2300      	movs	r3, #0
 80143f2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	2b0d      	cmp	r3, #13
 80143fa:	d125      	bne.n	8014448 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 80143fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014402:	d312      	bcc.n	801442a <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	6858      	ldr	r0, [r3, #4]
 8014408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801440a:	4a3d      	ldr	r2, [pc, #244]	@ (8014500 <phpalI14443p3b_Sw_Attrib+0x578>)
 801440c:	fba2 2303 	umull	r2, r3, r2, r3
 8014410:	099b      	lsrs	r3, r3, #6
 8014412:	b29b      	uxth	r3, r3
 8014414:	461a      	mov	r2, r3
 8014416:	210e      	movs	r1, #14
 8014418:	f7f9 f80e 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801441c:	4603      	mov	r3, r0
 801441e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014420:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014422:	2b00      	cmp	r3, #0
 8014424:	d010      	beq.n	8014448 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8014426:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014428:	e066      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014430:	b292      	uxth	r2, r2
 8014432:	210d      	movs	r1, #13
 8014434:	4618      	mov	r0, r3
 8014436:	f7f8 ffff 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801443a:	4603      	mov	r3, r0
 801443c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801443e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014440:	2b00      	cmp	r3, #0
 8014442:	d001      	beq.n	8014448 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8014444:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014446:	e057      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 8014448:	68f8      	ldr	r0, [r7, #12]
 801444a:	f000 f9ef 	bl	801482c <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 801444e:	4603      	mov	r3, r0
 8014450:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014452:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014454:	2b00      	cmp	r3, #0
 8014456:	d001      	beq.n	801445c <phpalI14443p3b_Sw_Attrib+0x4d4>
 8014458:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801445a:	e04d      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	6858      	ldr	r0, [r3, #4]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	8b9b      	ldrh	r3, [r3, #28]
 8014464:	461a      	mov	r2, r3
 8014466:	2107      	movs	r1, #7
 8014468:	f7f8 ffe6 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801446c:	4603      	mov	r3, r0
 801446e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014472:	2b00      	cmp	r3, #0
 8014474:	d001      	beq.n	801447a <phpalI14443p3b_Sw_Attrib+0x4f2>
 8014476:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014478:	e03e      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 801447a:	79fb      	ldrb	r3, [r7, #7]
 801447c:	2b0d      	cmp	r3, #13
 801447e:	d13a      	bne.n	80144f6 <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	330c      	adds	r3, #12
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	091b      	lsrs	r3, r3, #4
 8014488:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 801448c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014490:	2b0f      	cmp	r3, #15
 8014492:	d102      	bne.n	801449a <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 8014494:	2300      	movs	r3, #0
 8014496:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 801449a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801449e:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80144a2:	fa02 f303 	lsl.w	r3, r2, r3
 80144a6:	333f      	adds	r3, #63	@ 0x3f
 80144a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 80144aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80144b0:	d312      	bcc.n	80144d8 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6858      	ldr	r0, [r3, #4]
 80144b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b8:	4a11      	ldr	r2, [pc, #68]	@ (8014500 <phpalI14443p3b_Sw_Attrib+0x578>)
 80144ba:	fba2 2303 	umull	r2, r3, r2, r3
 80144be:	099b      	lsrs	r3, r3, #6
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	461a      	mov	r2, r3
 80144c4:	2101      	movs	r1, #1
 80144c6:	f7f8 fee3 	bl	800d290 <phhalHw_Pn5180_Wait>
 80144ca:	4603      	mov	r3, r0
 80144cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80144ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d010      	beq.n	80144f6 <phpalI14443p3b_Sw_Attrib+0x56e>
 80144d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80144d6:	e00f      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80144de:	b292      	uxth	r2, r2
 80144e0:	2100      	movs	r1, #0
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7f8 fed4 	bl	800d290 <phhalHw_Pn5180_Wait>
 80144e8:	4603      	mov	r3, r0
 80144ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80144ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d001      	beq.n	80144f6 <phpalI14443p3b_Sw_Attrib+0x56e>
 80144f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80144f4:	e000      	b.n	80144f8 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3738      	adds	r7, #56	@ 0x38
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	10624dd3 	.word	0x10624dd3

08014504 <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8014504:	b480      	push	{r7}
 8014506:	b085      	sub	sp, #20
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	7b9a      	ldrb	r2, [r3, #14]
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	7c1a      	ldrb	r2, [r3, #16]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	7bda      	ldrb	r2, [r3, #15]
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	7c5a      	ldrb	r2, [r3, #17]
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	7cda      	ldrb	r2, [r3, #19]
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	7c9a      	ldrb	r2, [r3, #18]
 801453e:	6a3b      	ldr	r3, [r7, #32]
 8014540:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3714      	adds	r7, #20
 8014548:	46bd      	mov	sp, r7
 801454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454e:	4770      	bx	lr

08014550 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b086      	sub	sp, #24
 8014554:	af00      	add	r7, sp, #0
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	60b9      	str	r1, [r7, #8]
 801455a:	603b      	str	r3, [r7, #0]
 801455c:	4613      	mov	r3, r2
 801455e:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 8014560:	88fb      	ldrh	r3, [r7, #6]
 8014562:	2b0c      	cmp	r3, #12
 8014564:	d005      	beq.n	8014572 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 8014566:	88fb      	ldrh	r3, [r7, #6]
 8014568:	2b0d      	cmp	r3, #13
 801456a:	d002      	beq.n	8014572 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801456c:	f240 4306 	movw	r3, #1030	@ 0x406
 8014570:	e0ae      	b.n	80146d0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	2b50      	cmp	r3, #80	@ 0x50
 8014578:	d002      	beq.n	8014580 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801457a:	f240 4306 	movw	r3, #1030	@ 0x406
 801457e:	e0a7      	b.n	80146d0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 8014580:	88fb      	ldrh	r3, [r7, #6]
 8014582:	461a      	mov	r2, r3
 8014584:	68b9      	ldr	r1, [r7, #8]
 8014586:	6838      	ldr	r0, [r7, #0]
 8014588:	f009 f841 	bl	801d60e <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 801458c:	88fb      	ldrh	r3, [r7, #6]
 801458e:	b2da      	uxtb	r2, r3
 8014590:	6a3b      	ldr	r3, [r7, #32]
 8014592:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801459a:	2b02      	cmp	r3, #2
 801459c:	d013      	beq.n	80145c6 <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	330a      	adds	r3, #10
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80145a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80145aa:	d91f      	bls.n	80145ec <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	330a      	adds	r3, #10
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	f003 030f 	and.w	r3, r3, #15
 80145b6:	b2da      	uxtb	r2, r3
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	330a      	adds	r3, #10
 80145bc:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80145c0:	b2d2      	uxtb	r2, r2
 80145c2:	701a      	strb	r2, [r3, #0]
 80145c4:	e012      	b.n	80145ec <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	330a      	adds	r3, #10
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80145d0:	2b80      	cmp	r3, #128	@ 0x80
 80145d2:	d90b      	bls.n	80145ec <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	330a      	adds	r3, #10
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	f003 030f 	and.w	r3, r3, #15
 80145de:	b2da      	uxtb	r2, r3
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	330a      	adds	r3, #10
 80145e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80145e8:	b2d2      	uxtb	r2, r2
 80145ea:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d109      	bne.n	801460a <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	330a      	adds	r3, #10
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	f003 0308 	and.w	r3, r3, #8
 8014600:	2b00      	cmp	r3, #0
 8014602:	d002      	beq.n	801460a <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8014604:	f240 4306 	movw	r3, #1030	@ 0x406
 8014608:	e062      	b.n	80146d0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014610:	2b03      	cmp	r3, #3
 8014612:	d132      	bne.n	801467a <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	330a      	adds	r3, #10
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	085b      	lsrs	r3, r3, #1
 801461c:	b2db      	uxtb	r3, r3
 801461e:	f003 0303 	and.w	r3, r3, #3
 8014622:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 8014624:	7d7b      	ldrb	r3, [r7, #21]
 8014626:	2b02      	cmp	r3, #2
 8014628:	d00e      	beq.n	8014648 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 801462a:	2b02      	cmp	r3, #2
 801462c:	dc11      	bgt.n	8014652 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 801462e:	2b00      	cmp	r3, #0
 8014630:	d002      	beq.n	8014638 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 8014632:	2b01      	cmp	r3, #1
 8014634:	d004      	beq.n	8014640 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 8014636:	e00c      	b.n	8014652 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2285      	movs	r2, #133	@ 0x85
 801463c:	839a      	strh	r2, [r3, #28]
            break;
 801463e:	e00d      	b.n	801465c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	22f6      	movs	r2, #246	@ 0xf6
 8014644:	839a      	strh	r2, [r3, #28]
            break;
 8014646:	e009      	b.n	801465c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f240 128d 	movw	r2, #397	@ 0x18d
 801464e:	839a      	strh	r2, [r3, #28]
            break;
 8014650:	e004      	b.n	801465c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8014658:	839a      	strh	r2, [r3, #28]
            break;
 801465a:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	6858      	ldr	r0, [r3, #4]
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	8b9b      	ldrh	r3, [r3, #28]
 8014664:	461a      	mov	r2, r3
 8014666:	2107      	movs	r1, #7
 8014668:	f7f8 fee6 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801466c:	4603      	mov	r3, r0
 801466e:	82fb      	strh	r3, [r7, #22]
 8014670:	8afb      	ldrh	r3, [r7, #22]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d022      	beq.n	80146bc <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8014676:	8afb      	ldrh	r3, [r7, #22]
 8014678:	e02a      	b.n	80146d0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	330a      	adds	r3, #10
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	085b      	lsrs	r3, r3, #1
 8014682:	b2db      	uxtb	r3, r3
 8014684:	f003 0303 	and.w	r3, r3, #3
 8014688:	b2db      	uxtb	r3, r3
 801468a:	2b03      	cmp	r3, #3
 801468c:	d112      	bne.n	80146b4 <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8014694:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	f240 22bb 	movw	r2, #699	@ 0x2bb
 801469e:	2107      	movs	r1, #7
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7f8 fec9 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80146a6:	4603      	mov	r3, r0
 80146a8:	82fb      	strh	r3, [r7, #22]
 80146aa:	8afb      	ldrh	r3, [r7, #22]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d005      	beq.n	80146bc <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 80146b0:	8afb      	ldrh	r3, [r7, #22]
 80146b2:	e00d      	b.n	80146d0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80146ba:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	3309      	adds	r3, #9
 80146c0:	683a      	ldr	r2, [r7, #0]
 80146c2:	3201      	adds	r2, #1
 80146c4:	6812      	ldr	r2, [r2, #0]
 80146c6:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2201      	movs	r2, #1
 80146cc:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 80146ce:	2300      	movs	r3, #0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b088      	sub	sp, #32
 80146dc:	af02      	add	r7, sp, #8
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	4608      	mov	r0, r1
 80146e2:	4611      	mov	r1, r2
 80146e4:	461a      	mov	r2, r3
 80146e6:	4603      	mov	r3, r0
 80146e8:	70fb      	strb	r3, [r7, #3]
 80146ea:	460b      	mov	r3, r1
 80146ec:	70bb      	strb	r3, [r7, #2]
 80146ee:	4613      	mov	r3, r2
 80146f0:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80146f2:	2300      	movs	r3, #0
 80146f4:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80146f6:	2300      	movs	r3, #0
 80146f8:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 80146fa:	78bb      	ldrb	r3, [r7, #2]
 80146fc:	2b04      	cmp	r3, #4
 80146fe:	d902      	bls.n	8014706 <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014700:	f240 4321 	movw	r3, #1057	@ 0x421
 8014704:	e08d      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 8014706:	2305      	movs	r3, #5
 8014708:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 801470a:	787b      	ldrb	r3, [r7, #1]
 801470c:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 801470e:	78bb      	ldrb	r3, [r7, #2]
 8014710:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 8014712:	78fb      	ldrb	r3, [r7, #3]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d004      	beq.n	8014722 <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 8014718:	7cbb      	ldrb	r3, [r7, #18]
 801471a:	f043 0308 	orr.w	r3, r3, #8
 801471e:	b2db      	uxtb	r3, r3
 8014720:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 8014722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d004      	beq.n	8014734 <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 801472a:	7cbb      	ldrb	r3, [r7, #18]
 801472c:	f043 0310 	orr.w	r3, r3, #16
 8014730:	b2db      	uxtb	r3, r3
 8014732:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f897 2020 	ldrb.w	r2, [r7, #32]
 801473a:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2200      	movs	r2, #0
 8014740:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	2109      	movs	r1, #9
 801474a:	4618      	mov	r0, r3
 801474c:	f7f8 fe74 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8014750:	4603      	mov	r3, r0
 8014752:	82fb      	strh	r3, [r7, #22]
 8014754:	8afb      	ldrh	r3, [r7, #22]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d001      	beq.n	801475e <phpalI14443p3b_Sw_RequestBEx+0x86>
 801475a:	8afb      	ldrh	r3, [r7, #22]
 801475c:	e061      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	210a      	movs	r1, #10
 8014766:	4618      	mov	r0, r3
 8014768:	f7f8 fe66 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801476c:	4603      	mov	r3, r0
 801476e:	82fb      	strh	r3, [r7, #22]
 8014770:	8afb      	ldrh	r3, [r7, #22]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d001      	beq.n	801477a <phpalI14443p3b_Sw_RequestBEx+0xa2>
 8014776:	8afb      	ldrh	r3, [r7, #22]
 8014778:	e053      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014780:	2b01      	cmp	r3, #1
 8014782:	d10e      	bne.n	80147a2 <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801478c:	210d      	movs	r1, #13
 801478e:	4618      	mov	r0, r3
 8014790:	f7f8 fe52 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8014794:	4603      	mov	r3, r0
 8014796:	82fb      	strh	r3, [r7, #22]
 8014798:	8afb      	ldrh	r3, [r7, #22]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d023      	beq.n	80147e6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 801479e:	8afb      	ldrh	r3, [r7, #22]
 80147a0:	e03f      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147a8:	2b03      	cmp	r3, #3
 80147aa:	d10e      	bne.n	80147ca <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	f240 2297 	movw	r2, #663	@ 0x297
 80147b4:	210d      	movs	r1, #13
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7f8 fe3e 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80147bc:	4603      	mov	r3, r0
 80147be:	82fb      	strh	r3, [r7, #22]
 80147c0:	8afb      	ldrh	r3, [r7, #22]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d00f      	beq.n	80147e6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80147c6:	8afb      	ldrh	r3, [r7, #22]
 80147c8:	e02b      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	2211      	movs	r2, #17
 80147d0:	210e      	movs	r1, #14
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7f8 fe30 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80147d8:	4603      	mov	r3, r0
 80147da:	82fb      	strh	r3, [r7, #22]
 80147dc:	8afb      	ldrh	r3, [r7, #22]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d001      	beq.n	80147e6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80147e2:	8afb      	ldrh	r3, [r7, #22]
 80147e4:	e01d      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6858      	ldr	r0, [r3, #4]
 80147ea:	f107 0210 	add.w	r2, r7, #16
 80147ee:	f107 030a 	add.w	r3, r7, #10
 80147f2:	9301      	str	r3, [sp, #4]
 80147f4:	f107 030c 	add.w	r3, r7, #12
 80147f8:	9300      	str	r3, [sp, #0]
 80147fa:	2303      	movs	r3, #3
 80147fc:	2100      	movs	r1, #0
 80147fe:	f7f8 fa4b 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8014802:	4603      	mov	r3, r0
 8014804:	82fb      	strh	r3, [r7, #22]
 8014806:	8afb      	ldrh	r3, [r7, #22]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d001      	beq.n	8014810 <phpalI14443p3b_Sw_RequestBEx+0x138>
 801480c:	8afb      	ldrh	r3, [r7, #22]
 801480e:	e008      	b.n	8014822 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8014810:	68f9      	ldr	r1, [r7, #12]
 8014812:	897a      	ldrh	r2, [r7, #10]
 8014814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7ff fe98 	bl	8014550 <phpalI14443p3b_Sw_CheckATQBEx>
 8014820:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8014822:	4618      	mov	r0, r3
 8014824:	3718      	adds	r7, #24
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
	...

0801482c <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	7d1b      	ldrb	r3, [r3, #20]
 8014838:	2b03      	cmp	r3, #3
 801483a:	d817      	bhi.n	801486c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 801483c:	a201      	add	r2, pc, #4	@ (adr r2, 8014844 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 801483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014842:	bf00      	nop
 8014844:	08014855 	.word	0x08014855
 8014848:	0801485b 	.word	0x0801485b
 801484c:	08014861 	.word	0x08014861
 8014850:	08014867 	.word	0x08014867
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014854:	2300      	movs	r3, #0
 8014856:	81fb      	strh	r3, [r7, #14]
        break;
 8014858:	e00b      	b.n	8014872 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 801485a:	2301      	movs	r3, #1
 801485c:	81fb      	strh	r3, [r7, #14]
        break;
 801485e:	e008      	b.n	8014872 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8014860:	2302      	movs	r3, #2
 8014862:	81fb      	strh	r3, [r7, #14]
        break;
 8014864:	e005      	b.n	8014872 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8014866:	2303      	movs	r3, #3
 8014868:	81fb      	strh	r3, [r7, #14]
        break;
 801486a:	e002      	b.n	8014872 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801486c:	f240 4321 	movw	r3, #1057	@ 0x421
 8014870:	e03a      	b.n	80148e8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	7d5b      	ldrb	r3, [r3, #21]
 8014876:	2b03      	cmp	r3, #3
 8014878:	d816      	bhi.n	80148a8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 801487a:	a201      	add	r2, pc, #4	@ (adr r2, 8014880 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 801487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014880:	08014891 	.word	0x08014891
 8014884:	08014897 	.word	0x08014897
 8014888:	0801489d 	.word	0x0801489d
 801488c:	080148a3 	.word	0x080148a3
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014890:	2300      	movs	r3, #0
 8014892:	81bb      	strh	r3, [r7, #12]
        break;
 8014894:	e00b      	b.n	80148ae <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8014896:	2301      	movs	r3, #1
 8014898:	81bb      	strh	r3, [r7, #12]
        break;
 801489a:	e008      	b.n	80148ae <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 801489c:	2302      	movs	r3, #2
 801489e:	81bb      	strh	r3, [r7, #12]
        break;
 80148a0:	e005      	b.n	80148ae <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 80148a2:	2303      	movs	r3, #3
 80148a4:	81bb      	strh	r3, [r7, #12]
        break;
 80148a6:	e002      	b.n	80148ae <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80148a8:	f240 4321 	movw	r3, #1057	@ 0x421
 80148ac:	e01c      	b.n	80148e8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	89fa      	ldrh	r2, [r7, #14]
 80148b4:	2109      	movs	r1, #9
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7f8 fdbe 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80148bc:	4603      	mov	r3, r0
 80148be:	817b      	strh	r3, [r7, #10]
 80148c0:	897b      	ldrh	r3, [r7, #10]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d001      	beq.n	80148ca <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 80148c6:	897b      	ldrh	r3, [r7, #10]
 80148c8:	e00e      	b.n	80148e8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	685b      	ldr	r3, [r3, #4]
 80148ce:	89ba      	ldrh	r2, [r7, #12]
 80148d0:	210a      	movs	r1, #10
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7f8 fdb0 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80148d8:	4603      	mov	r3, r0
 80148da:	817b      	strh	r3, [r7, #10]
 80148dc:	897b      	ldrh	r3, [r7, #10]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d001      	beq.n	80148e6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 80148e2:	897b      	ldrh	r3, [r7, #10]
 80148e4:	e000      	b.n	80148e8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 80148e6:	2300      	movs	r3, #0

}
 80148e8:	4618      	mov	r0, r3
 80148ea:	3710      	adds	r7, #16
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	3309      	adds	r3, #9
 80148fe:	683a      	ldr	r2, [r7, #0]
 8014900:	6812      	ldr	r2, [r2, #0]
 8014902:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2201      	movs	r2, #1
 8014908:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 801490a:	2300      	movs	r3, #0
}
 801490c:	4618      	mov	r0, r3
 801490e:	370c      	adds	r7, #12
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr

08014918 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	460b      	mov	r3, r1
 8014922:	607a      	str	r2, [r7, #4]
 8014924:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 8014926:	897b      	ldrh	r3, [r7, #10]
 8014928:	2b14      	cmp	r3, #20
 801492a:	d002      	beq.n	8014932 <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 801492c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8014930:	e017      	b.n	8014962 <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <phpalI14443p4_Sw_Init+0x24>
 8014938:	2321      	movs	r3, #33	@ 0x21
 801493a:	e012      	b.n	8014962 <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d101      	bne.n	8014946 <phpalI14443p4_Sw_Init+0x2e>
 8014942:	2321      	movs	r3, #33	@ 0x21
 8014944:	e00d      	b.n	8014962 <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	f240 6201 	movw	r2, #1537	@ 0x601
 801494c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	2202      	movs	r2, #2
 8014958:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 801495a:	68f8      	ldr	r0, [r7, #12]
 801495c:	f000 f840 	bl	80149e0 <phpalI14443p4_Sw_ResetProtocol>
 8014960:	4603      	mov	r3, r0
}
 8014962:	4618      	mov	r0, r3
 8014964:	3710      	adds	r7, #16
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}

0801496a <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 801496a:	b480      	push	{r7}
 801496c:	b083      	sub	sp, #12
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	4608      	mov	r0, r1
 8014974:	4611      	mov	r1, r2
 8014976:	461a      	mov	r2, r3
 8014978:	4603      	mov	r3, r0
 801497a:	70fb      	strb	r3, [r7, #3]
 801497c:	460b      	mov	r3, r1
 801497e:	70bb      	strb	r3, [r7, #2]
 8014980:	4613      	mov	r3, r2
 8014982:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2200      	movs	r2, #0
 8014988:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 801498a:	78bb      	ldrb	r3, [r7, #2]
 801498c:	2b0e      	cmp	r3, #14
 801498e:	d808      	bhi.n	80149a2 <phpalI14443p4_Sw_SetProtocol+0x38>
 8014990:	7d3b      	ldrb	r3, [r7, #20]
 8014992:	2b0e      	cmp	r3, #14
 8014994:	d805      	bhi.n	80149a2 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 8014996:	7e3b      	ldrb	r3, [r7, #24]
 8014998:	2b0c      	cmp	r3, #12
 801499a:	d802      	bhi.n	80149a2 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 801499c:	7f3b      	ldrb	r3, [r7, #28]
 801499e:	2b0c      	cmp	r3, #12
 80149a0:	d902      	bls.n	80149a8 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80149a2:	f240 6321 	movw	r3, #1569	@ 0x621
 80149a6:	e015      	b.n	80149d4 <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	78fa      	ldrb	r2, [r7, #3]
 80149ac:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	78ba      	ldrb	r2, [r7, #2]
 80149b2:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	787a      	ldrb	r2, [r7, #1]
 80149b8:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	7c3a      	ldrb	r2, [r7, #16]
 80149be:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	7d3a      	ldrb	r2, [r7, #20]
 80149c4:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	7e3a      	ldrb	r2, [r7, #24]
 80149ca:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	7f3a      	ldrb	r2, [r7, #28]
 80149d0:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 80149d2:	2300      	movs	r3, #0
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2201      	movs	r2, #1
 80149ec:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2200      	movs	r2, #0
 80149f2:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2200      	movs	r2, #0
 80149f8:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2200      	movs	r2, #0
 80149fe:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2200      	movs	r2, #0
 8014a04:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2204      	movs	r2, #4
 8014a10:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2200      	movs	r2, #0
 8014a16:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2202      	movs	r2, #2
 8014a1c:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2202      	movs	r2, #2
 8014a22:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 8014a24:	2300      	movs	r3, #0
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	370c      	adds	r7, #12
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
	...

08014a34 <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	807b      	strh	r3, [r7, #2]
 8014a40:	4613      	mov	r3, r2
 8014a42:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8014a44:	887b      	ldrh	r3, [r7, #2]
 8014a46:	2b06      	cmp	r3, #6
 8014a48:	d876      	bhi.n	8014b38 <phpalI14443p4_Sw_SetConfig+0x104>
 8014a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8014a50 <phpalI14443p4_Sw_SetConfig+0x1c>)
 8014a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a50:	08014a77 	.word	0x08014a77
 8014a54:	08014a8d 	.word	0x08014a8d
 8014a58:	08014ac3 	.word	0x08014ac3
 8014a5c:	08014aeb 	.word	0x08014aeb
 8014a60:	08014b01 	.word	0x08014b01
 8014a64:	08014b2f 	.word	0x08014b2f
 8014a68:	08014a6d 	.word	0x08014a6d
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 8014a6c:	883b      	ldrh	r3, [r7, #0]
 8014a6e:	b2da      	uxtb	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	749a      	strb	r2, [r3, #18]
            break;
 8014a74:	e063      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 8014a76:	883b      	ldrh	r3, [r7, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d103      	bne.n	8014a84 <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 8014a82:	e05c      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2201      	movs	r2, #1
 8014a88:	741a      	strb	r2, [r3, #16]
            break;
 8014a8a:	e058      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 8014a8c:	883b      	ldrh	r3, [r7, #0]
 8014a8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00e      	beq.n	8014ab4 <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 8014a96:	883b      	ldrh	r3, [r7, #0]
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	2b0e      	cmp	r3, #14
 8014a9c:	d902      	bls.n	8014aa4 <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014a9e:	f240 6321 	movw	r3, #1569	@ 0x621
 8014aa2:	e04d      	b.n	8014b40 <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2201      	movs	r2, #1
 8014aa8:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 8014aaa:	883b      	ldrh	r3, [r7, #0]
 8014aac:	b2da      	uxtb	r2, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 8014ab2:	e044      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2200      	movs	r2, #0
 8014abe:	729a      	strb	r2, [r3, #10]
            break;
 8014ac0:	e03d      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 8014ac2:	883b      	ldrh	r3, [r7, #0]
 8014ac4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d007      	beq.n	8014adc <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2201      	movs	r2, #1
 8014ad0:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 8014ad2:	883b      	ldrh	r3, [r7, #0]
 8014ad4:	b2da      	uxtb	r2, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 8014ada:	e030      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	731a      	strb	r2, [r3, #12]
            break;
 8014ae8:	e029      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 8014aea:	883b      	ldrh	r3, [r7, #0]
 8014aec:	2b0e      	cmp	r3, #14
 8014aee:	d902      	bls.n	8014af6 <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014af0:	f240 6321 	movw	r3, #1569	@ 0x621
 8014af4:	e024      	b.n	8014b40 <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 8014af6:	883b      	ldrh	r3, [r7, #0]
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	735a      	strb	r2, [r3, #13]
            break;
 8014afe:	e01e      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8014b00:	883b      	ldrh	r3, [r7, #0]
 8014b02:	0a1b      	lsrs	r3, r3, #8
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	2b0c      	cmp	r3, #12
 8014b08:	d803      	bhi.n	8014b12 <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 8014b0a:	883b      	ldrh	r3, [r7, #0]
 8014b0c:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8014b0e:	2b0c      	cmp	r3, #12
 8014b10:	d902      	bls.n	8014b18 <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014b12:	f240 6321 	movw	r3, #1569	@ 0x621
 8014b16:	e013      	b.n	8014b40 <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 8014b18:	883b      	ldrh	r3, [r7, #0]
 8014b1a:	0a1b      	lsrs	r3, r3, #8
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	b2da      	uxtb	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 8014b24:	883b      	ldrh	r3, [r7, #0]
 8014b26:	b2da      	uxtb	r2, r3
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	73da      	strb	r2, [r3, #15]
            break;
 8014b2c:	e007      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 8014b2e:	883b      	ldrh	r3, [r7, #0]
 8014b30:	b2da      	uxtb	r2, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	745a      	strb	r2, [r3, #17]
            break;
 8014b36:	e002      	b.n	8014b3e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014b38:	f240 6323 	movw	r3, #1571	@ 0x623
 8014b3c:	e000      	b.n	8014b40 <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 8014b3e:	2300      	movs	r3, #0
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b085      	sub	sp, #20
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	460b      	mov	r3, r1
 8014b56:	607a      	str	r2, [r7, #4]
 8014b58:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 8014b5a:	897b      	ldrh	r3, [r7, #10]
 8014b5c:	2b14      	cmp	r3, #20
 8014b5e:	d002      	beq.n	8014b66 <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 8014b60:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8014b64:	e032      	b.n	8014bcc <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d101      	bne.n	8014b70 <phpalI14443p4a_Sw_Init+0x24>
 8014b6c:	2321      	movs	r3, #33	@ 0x21
 8014b6e:	e02d      	b.n	8014bcc <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d101      	bne.n	8014b7a <phpalI14443p4a_Sw_Init+0x2e>
 8014b76:	2321      	movs	r3, #33	@ 0x21
 8014b78:	e028      	b.n	8014bcc <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f240 5201 	movw	r2, #1281	@ 0x501
 8014b80:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2200      	movs	r2, #0
 8014b92:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2200      	movs	r2, #0
 8014b98:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	2204      	movs	r2, #4
 8014ba4:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2202      	movs	r2, #2
 8014baa:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2202      	movs	r2, #2
 8014bc2:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 8014bca:	2300      	movs	r3, #0
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3714      	adds	r7, #20
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr

08014bd8 <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b083      	sub	sp, #12
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	460b      	mov	r3, r1
 8014be2:	807b      	strh	r3, [r7, #2]
 8014be4:	4613      	mov	r3, r2
 8014be6:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 8014be8:	887b      	ldrh	r3, [r7, #2]
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d002      	beq.n	8014bf4 <phpalI14443p4a_Sw_SetConfig+0x1c>
 8014bee:	2b02      	cmp	r3, #2
 8014bf0:	d005      	beq.n	8014bfe <phpalI14443p4a_Sw_SetConfig+0x26>
 8014bf2:	e014      	b.n	8014c1e <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 8014bf4:	883b      	ldrh	r3, [r7, #0]
 8014bf6:	b2da      	uxtb	r2, r3
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	745a      	strb	r2, [r3, #17]
      break;
 8014bfc:	e012      	b.n	8014c24 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8014bfe:	883b      	ldrh	r3, [r7, #0]
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d006      	beq.n	8014c14 <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 8014c06:	883b      	ldrh	r3, [r7, #0]
 8014c08:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d002      	beq.n	8014c14 <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014c0e:	f240 5321 	movw	r3, #1313	@ 0x521
 8014c12:	e008      	b.n	8014c26 <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 8014c14:	883b      	ldrh	r3, [r7, #0]
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	749a      	strb	r2, [r3, #18]
      break;
 8014c1c:	e002      	b.n	8014c24 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014c1e:	f240 5323 	movw	r3, #1315	@ 0x523
 8014c22:	e000      	b.n	8014c26 <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 8014c24:	2300      	movs	r3, #0
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	370c      	adds	r7, #12
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
	...

08014c34 <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 8014c34:	b480      	push	{r7}
 8014c36:	b085      	sub	sp, #20
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	607a      	str	r2, [r7, #4]
 8014c40:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8014c42:	897b      	ldrh	r3, [r7, #10]
 8014c44:	3b01      	subs	r3, #1
 8014c46:	2b03      	cmp	r3, #3
 8014c48:	d822      	bhi.n	8014c90 <phpalI14443p4a_Sw_GetConfig+0x5c>
 8014c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8014c50 <phpalI14443p4a_Sw_GetConfig+0x1c>)
 8014c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c50:	08014c61 	.word	0x08014c61
 8014c54:	08014c6d 	.word	0x08014c6d
 8014c58:	08014c79 	.word	0x08014c79
 8014c5c:	08014c85 	.word	0x08014c85
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	7c5b      	ldrb	r3, [r3, #17]
 8014c64:	461a      	mov	r2, r3
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	801a      	strh	r2, [r3, #0]
        break;
 8014c6a:	e014      	b.n	8014c96 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	7c9b      	ldrb	r3, [r3, #18]
 8014c70:	461a      	mov	r2, r3
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	801a      	strh	r2, [r3, #0]
        break;
 8014c76:	e00e      	b.n	8014c96 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	7bdb      	ldrb	r3, [r3, #15]
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	801a      	strh	r2, [r3, #0]
        break;
 8014c82:	e008      	b.n	8014c96 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	7c1b      	ldrb	r3, [r3, #16]
 8014c88:	461a      	mov	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	801a      	strh	r2, [r3, #0]
        break;
 8014c8e:	e002      	b.n	8014c96 <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014c90:	f240 5323 	movw	r3, #1315	@ 0x523
 8014c94:	e000      	b.n	8014c98 <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8014c96:	2300      	movs	r3, #0
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3714      	adds	r7, #20
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr
 8014ca4:	0000      	movs	r0, r0
	...

08014ca8 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 8014ca8:	b5b0      	push	{r4, r5, r7, lr}
 8014caa:	b08e      	sub	sp, #56	@ 0x38
 8014cac:	af02      	add	r7, sp, #8
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	607b      	str	r3, [r7, #4]
 8014cb2:	460b      	mov	r3, r1
 8014cb4:	72fb      	strb	r3, [r7, #11]
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	7c5b      	ldrb	r3, [r3, #17]
 8014cca:	2b02      	cmp	r3, #2
 8014ccc:	d012      	beq.n	8014cf4 <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 8014cce:	7afb      	ldrb	r3, [r7, #11]
 8014cd0:	2b0c      	cmp	r3, #12
 8014cd2:	d802      	bhi.n	8014cda <phpalI14443p4a_Sw_Rats+0x32>
 8014cd4:	7abb      	ldrb	r3, [r7, #10]
 8014cd6:	2b0e      	cmp	r3, #14
 8014cd8:	d902      	bls.n	8014ce0 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014cda:	f240 5321 	movw	r3, #1313	@ 0x521
 8014cde:	e2c5      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8014ce0:	7afb      	ldrb	r3, [r7, #11]
 8014ce2:	2b07      	cmp	r3, #7
 8014ce4:	d80f      	bhi.n	8014d06 <phpalI14443p4a_Sw_Rats+0x5e>
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	7c5b      	ldrb	r3, [r3, #17]
 8014cea:	2b01      	cmp	r3, #1
 8014cec:	d10b      	bne.n	8014d06 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014cee:	f240 5321 	movw	r3, #1313	@ 0x521
 8014cf2:	e2bb      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 8014cf4:	7afb      	ldrb	r3, [r7, #11]
 8014cf6:	2b08      	cmp	r3, #8
 8014cf8:	d802      	bhi.n	8014d00 <phpalI14443p4a_Sw_Rats+0x58>
 8014cfa:	7abb      	ldrb	r3, [r7, #10]
 8014cfc:	2b0e      	cmp	r3, #14
 8014cfe:	d902      	bls.n	8014d06 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014d00:	f240 5321 	movw	r3, #1313	@ 0x521
 8014d04:	e2b2      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8014d0e:	210d      	movs	r1, #13
 8014d10:	4618      	mov	r0, r3
 8014d12:	f7f8 fb91 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8014d16:	4603      	mov	r3, r0
 8014d18:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014d1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d001      	beq.n	8014d24 <phpalI14443p4a_Sw_Rats+0x7c>
 8014d20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d22:	e2a3      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 8014d24:	23e0      	movs	r3, #224	@ 0xe0
 8014d26:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8014d28:	7afb      	ldrb	r3, [r7, #11]
 8014d2a:	011b      	lsls	r3, r3, #4
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	7abb      	ldrb	r3, [r7, #10]
 8014d30:	f003 030f 	and.w	r3, r3, #15
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	4313      	orrs	r3, r2
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	6858      	ldr	r0, [r3, #4]
 8014d40:	f107 0218 	add.w	r2, r7, #24
 8014d44:	f107 0312 	add.w	r3, r7, #18
 8014d48:	9301      	str	r3, [sp, #4]
 8014d4a:	f107 0314 	add.w	r3, r7, #20
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	2302      	movs	r3, #2
 8014d52:	2100      	movs	r1, #0
 8014d54:	f7f7 ffa0 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	7c9b      	ldrb	r3, [r3, #18]
 8014d60:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8014d64:	e031      	b.n	8014dca <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	7c5b      	ldrb	r3, [r3, #17]
 8014d6a:	2b01      	cmp	r3, #1
 8014d6c:	d118      	bne.n	8014da0 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8014d6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	2b01      	cmp	r3, #1
 8014d74:	d003      	beq.n	8014d7e <phpalI14443p4a_Sw_Rats+0xd6>
 8014d76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	2b11      	cmp	r3, #17
 8014d7c:	d10e      	bne.n	8014d9c <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	685b      	ldr	r3, [r3, #4]
 8014d82:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014d86:	2100      	movs	r1, #0
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7f8 fa81 	bl	800d290 <phhalHw_Pn5180_Wait>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8014d92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d003      	beq.n	8014da0 <phpalI14443p4a_Sw_Rats+0xf8>
 8014d98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d9a:	e267      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 8014d9c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d9e:	e265      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	6858      	ldr	r0, [r3, #4]
 8014da4:	f107 0218 	add.w	r2, r7, #24
 8014da8:	f107 0312 	add.w	r3, r7, #18
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	f107 0314 	add.w	r3, r7, #20
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	2302      	movs	r3, #2
 8014db6:	2100      	movs	r1, #0
 8014db8:	f7f7 ff6e 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 8014dc0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014dc4:	3b01      	subs	r3, #1
 8014dc6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8014dca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d003      	beq.n	8014dda <phpalI14443p4a_Sw_Rats+0x132>
 8014dd2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1c5      	bne.n	8014d66 <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8014dda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f040 81c5 	bne.w	801516e <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 8014de4:	8a7b      	ldrh	r3, [r7, #18]
 8014de6:	b2da      	uxtb	r2, r3
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d102      	bne.n	8014df6 <phpalI14443p4a_Sw_Rats+0x14e>
 8014df0:	8a7b      	ldrh	r3, [r7, #18]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d102      	bne.n	8014dfc <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014df6:	f240 5306 	movw	r3, #1286	@ 0x506
 8014dfa:	e237      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	8a7a      	ldrh	r2, [r7, #18]
 8014e00:	4619      	mov	r1, r3
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f008 fc03 	bl	801d60e <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	7c5b      	ldrb	r3, [r3, #17]
 8014e0c:	2b03      	cmp	r3, #3
 8014e0e:	d006      	beq.n	8014e1e <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2200      	movs	r2, #0
 8014e14:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	729a      	strb	r2, [r3, #10]
 8014e1c:	e005      	b.n	8014e2a <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	2201      	movs	r2, #1
 8014e22:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	7aba      	ldrb	r2, [r7, #10]
 8014e28:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2200      	movs	r2, #0
 8014e34:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2204      	movs	r2, #4
 8014e3a:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	7afa      	ldrb	r2, [r7, #11]
 8014e40:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2202      	movs	r2, #2
 8014e46:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2200      	movs	r2, #0
 8014e52:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8014e54:	2300      	movs	r3, #0
 8014e56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 8014e60:	8a7b      	ldrh	r3, [r7, #18]
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	f240 80ba 	bls.w	8014fdc <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 8014e68:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	4413      	add	r3, r2
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	f003 030f 	and.w	r3, r3, #15
 8014e76:	b2da      	uxtb	r2, r3
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	7c5b      	ldrb	r3, [r3, #17]
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d007      	beq.n	8014e94 <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	7b5b      	ldrb	r3, [r3, #13]
 8014e88:	2b0c      	cmp	r3, #12
 8014e8a:	d90a      	bls.n	8014ea2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	220c      	movs	r2, #12
 8014e90:	735a      	strb	r2, [r3, #13]
 8014e92:	e006      	b.n	8014ea2 <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	7b5b      	ldrb	r3, [r3, #13]
 8014e98:	2b08      	cmp	r3, #8
 8014e9a:	d902      	bls.n	8014ea2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2208      	movs	r2, #8
 8014ea0:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 8014ea2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	f003 0310 	and.w	r3, r3, #16
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d021      	beq.n	8014efe <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014eba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	8a7b      	ldrh	r3, [r7, #18]
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d302      	bcc.n	8014ecc <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014ec6:	f240 5306 	movw	r3, #1286	@ 0x506
 8014eca:	e1cf      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 8014ecc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ed0:	687a      	ldr	r2, [r7, #4]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	f003 0308 	and.w	r3, r3, #8
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d003      	beq.n	8014ee6 <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	72da      	strb	r2, [r3, #11]
 8014ee4:	e006      	b.n	8014ef4 <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 8014ee6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	4413      	add	r3, r2
 8014eee:	781a      	ldrb	r2, [r3, #0]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 8014ef4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ef8:	3301      	adds	r3, #1
 8014efa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	3301      	adds	r3, #1
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	f003 0320 	and.w	r3, r3, #32
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d02d      	beq.n	8014f68 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014f0c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014f10:	b29a      	uxth	r2, r3
 8014f12:	8a7b      	ldrh	r3, [r7, #18]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d302      	bcc.n	8014f1e <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014f18:	f240 5306 	movw	r3, #1286	@ 0x506
 8014f1c:	e1a6      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 8014f1e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	4413      	add	r3, r2
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	f003 030f 	and.w	r3, r3, #15
 8014f2c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8014f30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014f34:	2b0f      	cmp	r3, #15
 8014f36:	d102      	bne.n	8014f3e <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 8014f3e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	4413      	add	r3, r2
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	091b      	lsrs	r3, r3, #4
 8014f4a:	b2da      	uxtb	r2, r3
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	7b1b      	ldrb	r3, [r3, #12]
 8014f54:	2b0f      	cmp	r3, #15
 8014f56:	d102      	bne.n	8014f5e <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2204      	movs	r2, #4
 8014f5c:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 8014f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014f62:	3301      	adds	r3, #1
 8014f64:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d032      	beq.n	8014fdc <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014f76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	8a7b      	ldrh	r3, [r7, #18]
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d302      	bcc.n	8014f88 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014f82:	f240 5306 	movw	r3, #1286	@ 0x506
 8014f86:	e171      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	7c5b      	ldrb	r3, [r3, #17]
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d025      	beq.n	8014fdc <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	7c5b      	ldrb	r3, [r3, #17]
 8014f94:	2b03      	cmp	r3, #3
 8014f96:	d10b      	bne.n	8014fb0 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 8014f98:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014f9c:	687a      	ldr	r2, [r7, #4]
 8014f9e:	4413      	add	r3, r2
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	f003 0301 	and.w	r3, r3, #1
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d002      	beq.n	8014fb0 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2201      	movs	r2, #1
 8014fae:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 8014fb0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	f003 0302 	and.w	r3, r3, #2
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d106      	bne.n	8014fd0 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	729a      	strb	r2, [r3, #10]
 8014fce:	e005      	b.n	8014fdc <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2201      	movs	r2, #1
 8014fd4:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	7aba      	ldrb	r2, [r7, #10]
 8014fda:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 8014fdc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7eb fa8c 	bl	8000504 <__aeabi_ui2d>
 8014fec:	a3a7      	add	r3, pc, #668	@ (adr r3, 801528c <phpalI14443p4a_Sw_Rats+0x5e4>)
 8014fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff2:	f7eb fb01 	bl	80005f8 <__aeabi_dmul>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	f7eb fdd3 	bl	8000ba8 <__aeabi_d2f>
 8015002:	4603      	mov	r3, r0
 8015004:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	7c5b      	ldrb	r3, [r3, #17]
 801500a:	2b03      	cmp	r3, #3
 801500c:	d01f      	beq.n	801504e <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 801500e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015010:	f7eb fa9a 	bl	8000548 <__aeabi_f2d>
 8015014:	4604      	mov	r4, r0
 8015016:	460d      	mov	r5, r1
 8015018:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801501c:	2201      	movs	r2, #1
 801501e:	fa02 f303 	lsl.w	r3, r2, r3
 8015022:	4618      	mov	r0, r3
 8015024:	f7eb fa6e 	bl	8000504 <__aeabi_ui2d>
 8015028:	a39a      	add	r3, pc, #616	@ (adr r3, 8015294 <phpalI14443p4a_Sw_Rats+0x5ec>)
 801502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502e:	f7eb fae3 	bl	80005f8 <__aeabi_dmul>
 8015032:	4602      	mov	r2, r0
 8015034:	460b      	mov	r3, r1
 8015036:	4620      	mov	r0, r4
 8015038:	4629      	mov	r1, r5
 801503a:	f7eb f927 	bl	800028c <__adddf3>
 801503e:	4602      	mov	r2, r0
 8015040:	460b      	mov	r3, r1
 8015042:	4610      	mov	r0, r2
 8015044:	4619      	mov	r1, r3
 8015046:	f7eb fdaf 	bl	8000ba8 <__aeabi_d2f>
 801504a:	4603      	mov	r3, r0
 801504c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 801504e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015056:	ee17 3a90 	vmov	r3, s15
 801505a:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 801505c:	6a3b      	ldr	r3, [r7, #32]
 801505e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015062:	d314      	bcc.n	801508e <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	6858      	ldr	r0, [r3, #4]
 8015068:	6a3b      	ldr	r3, [r7, #32]
 801506a:	4a83      	ldr	r2, [pc, #524]	@ (8015278 <phpalI14443p4a_Sw_Rats+0x5d0>)
 801506c:	fba2 2303 	umull	r2, r3, r2, r3
 8015070:	099b      	lsrs	r3, r3, #6
 8015072:	b29b      	uxth	r3, r3
 8015074:	3301      	adds	r3, #1
 8015076:	b29b      	uxth	r3, r3
 8015078:	461a      	mov	r2, r3
 801507a:	2101      	movs	r1, #1
 801507c:	f7f8 f908 	bl	800d290 <phhalHw_Pn5180_Wait>
 8015080:	4603      	mov	r3, r0
 8015082:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8015084:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015086:	2b00      	cmp	r3, #0
 8015088:	d010      	beq.n	80150ac <phpalI14443p4a_Sw_Rats+0x404>
 801508a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801508c:	e0ee      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	6a3a      	ldr	r2, [r7, #32]
 8015094:	b292      	uxth	r2, r2
 8015096:	2100      	movs	r1, #0
 8015098:	4618      	mov	r0, r3
 801509a:	f7f8 f8f9 	bl	800d290 <phhalHw_Pn5180_Wait>
 801509e:	4603      	mov	r3, r0
 80150a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80150a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d001      	beq.n	80150ac <phpalI14443p4a_Sw_Rats+0x404>
 80150a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80150aa:	e0df      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 80150ac:	4b73      	ldr	r3, [pc, #460]	@ (801527c <phpalI14443p4a_Sw_Rats+0x5d4>)
 80150ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	7b1b      	ldrb	r3, [r3, #12]
 80150b4:	461a      	mov	r2, r3
 80150b6:	2301      	movs	r3, #1
 80150b8:	4093      	lsls	r3, r2
 80150ba:	ee07 3a90 	vmov	s15, r3
 80150be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80150c2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80150c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150ca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	7c5b      	ldrb	r3, [r3, #17]
 80150d2:	2b03      	cmp	r3, #3
 80150d4:	d108      	bne.n	80150e8 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 80150d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80150da:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8015280 <phpalI14443p4a_Sw_Rats+0x5d8>
 80150de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80150e6:	e013      	b.n	8015110 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 80150e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80150ec:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8015284 <phpalI14443p4a_Sw_Rats+0x5dc>
 80150f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	7c5b      	ldrb	r3, [r3, #17]
 80150fc:	2b01      	cmp	r3, #1
 80150fe:	d107      	bne.n	8015110 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8015100:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015104:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8015288 <phpalI14443p4a_Sw_Rats+0x5e0>
 8015108:	ee77 7a87 	vadd.f32	s15, s15, s14
 801510c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8015110:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015118:	ee17 3a90 	vmov	r3, s15
 801511c:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801511e:	69fb      	ldr	r3, [r7, #28]
 8015120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015124:	d314      	bcc.n	8015150 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	6858      	ldr	r0, [r3, #4]
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	4a52      	ldr	r2, [pc, #328]	@ (8015278 <phpalI14443p4a_Sw_Rats+0x5d0>)
 801512e:	fba2 2303 	umull	r2, r3, r2, r3
 8015132:	099b      	lsrs	r3, r3, #6
 8015134:	b29b      	uxth	r3, r3
 8015136:	3301      	adds	r3, #1
 8015138:	b29b      	uxth	r3, r3
 801513a:	461a      	mov	r2, r3
 801513c:	210e      	movs	r1, #14
 801513e:	f7f8 f97b 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015142:	4603      	mov	r3, r0
 8015144:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8015146:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015148:	2b00      	cmp	r3, #0
 801514a:	d07f      	beq.n	801524c <phpalI14443p4a_Sw_Rats+0x5a4>
 801514c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801514e:	e08d      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	69fa      	ldr	r2, [r7, #28]
 8015156:	b292      	uxth	r2, r2
 8015158:	210d      	movs	r1, #13
 801515a:	4618      	mov	r0, r3
 801515c:	f7f8 f96c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015160:	4603      	mov	r3, r0
 8015162:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8015164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015166:	2b00      	cmp	r3, #0
 8015168:	d070      	beq.n	801524c <phpalI14443p4a_Sw_Rats+0x5a4>
 801516a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801516c:	e07e      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	7c5b      	ldrb	r3, [r3, #17]
 8015172:	2b01      	cmp	r3, #1
 8015174:	d101      	bne.n	801517a <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 8015176:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015178:	e078      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 801517a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801517c:	b2db      	uxtb	r3, r3
 801517e:	2b01      	cmp	r3, #1
 8015180:	d00d      	beq.n	801519e <phpalI14443p4a_Sw_Rats+0x4f6>
 8015182:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015184:	b2db      	uxtb	r3, r3
 8015186:	2b02      	cmp	r3, #2
 8015188:	d009      	beq.n	801519e <phpalI14443p4a_Sw_Rats+0x4f6>
 801518a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801518c:	b2db      	uxtb	r3, r3
 801518e:	2b05      	cmp	r3, #5
 8015190:	d005      	beq.n	801519e <phpalI14443p4a_Sw_Rats+0x4f6>
 8015192:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015194:	b2db      	uxtb	r3, r3
 8015196:	2b03      	cmp	r3, #3
 8015198:	d001      	beq.n	801519e <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 801519a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801519c:	e066      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 801519e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d00e      	beq.n	80151c4 <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80151ae:	2100      	movs	r1, #0
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7f8 f86d 	bl	800d290 <phhalHw_Pn5180_Wait>
 80151b6:	4603      	mov	r3, r0
 80151b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80151ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d001      	beq.n	80151c4 <phpalI14443p4a_Sw_Rats+0x51c>
 80151c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80151c2:	e053      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 80151c4:	23c2      	movs	r3, #194	@ 0xc2
 80151c6:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 80151c8:	2301      	movs	r3, #1
 80151ca:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	6858      	ldr	r0, [r3, #4]
 80151d0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80151d2:	f107 0218 	add.w	r2, r7, #24
 80151d6:	f107 0312 	add.w	r3, r7, #18
 80151da:	9301      	str	r3, [sp, #4]
 80151dc:	f107 0314 	add.w	r3, r7, #20
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	460b      	mov	r3, r1
 80151e4:	2100      	movs	r1, #0
 80151e6:	f7f7 fd57 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80151ea:	4603      	mov	r3, r0
 80151ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 80151ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80151f0:	b2db      	uxtb	r3, r3
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d107      	bne.n	8015206 <phpalI14443p4a_Sw_Rats+0x55e>
 80151f6:	8a7b      	ldrh	r3, [r7, #18]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d104      	bne.n	8015206 <phpalI14443p4a_Sw_Rats+0x55e>
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	781a      	ldrb	r2, [r3, #0]
 8015200:	7e3b      	ldrb	r3, [r7, #24]
 8015202:	429a      	cmp	r2, r3
 8015204:	d022      	beq.n	801524c <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	f240 424c 	movw	r2, #1100	@ 0x44c
 801520e:	210d      	movs	r1, #13
 8015210:	4618      	mov	r0, r3
 8015212:	f7f8 f911 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015216:	4603      	mov	r3, r0
 8015218:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801521a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801521c:	2b00      	cmp	r3, #0
 801521e:	d001      	beq.n	8015224 <phpalI14443p4a_Sw_Rats+0x57c>
 8015220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015222:	e023      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 8015224:	2350      	movs	r3, #80	@ 0x50
 8015226:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8015228:	2300      	movs	r3, #0
 801522a:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	6858      	ldr	r0, [r3, #4]
 8015230:	f107 0218 	add.w	r2, r7, #24
 8015234:	f107 0312 	add.w	r3, r7, #18
 8015238:	9301      	str	r3, [sp, #4]
 801523a:	f107 0314 	add.w	r3, r7, #20
 801523e:	9300      	str	r3, [sp, #0]
 8015240:	2302      	movs	r3, #2
 8015242:	2100      	movs	r1, #0
 8015244:	f7f7 fd28 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8015248:	4603      	mov	r3, r0
 801524a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 801524c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801524e:	2b00      	cmp	r3, #0
 8015250:	d00b      	beq.n	801526a <phpalI14443p4a_Sw_Rats+0x5c2>
 8015252:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015254:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015258:	2b00      	cmp	r3, #0
 801525a:	d106      	bne.n	801526a <phpalI14443p4a_Sw_Rats+0x5c2>
 801525c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801525e:	b2db      	uxtb	r3, r3
 8015260:	b29b      	uxth	r3, r3
 8015262:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8015266:	b29b      	uxth	r3, r3
 8015268:	e000      	b.n	801526c <phpalI14443p4a_Sw_Rats+0x5c4>
 801526a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 801526c:	4618      	mov	r0, r3
 801526e:	3730      	adds	r7, #48	@ 0x30
 8015270:	46bd      	mov	sp, r7
 8015272:	bdb0      	pop	{r4, r5, r7, pc}
 8015274:	f3af 8000 	nop.w
 8015278:	10624dd3 	.word	0x10624dd3
 801527c:	4397084f 	.word	0x4397084f
 8015280:	42700000 	.word	0x42700000
 8015284:	45638000 	.word	0x45638000
 8015288:	447a0000 	.word	0x447a0000
 801528c:	d12e109d 	.word	0xd12e109d
 8015290:	4072e109 	.word	0x4072e109
 8015294:	b9c518eb 	.word	0xb9c518eb
 8015298:	403c518e 	.word	0x403c518e

0801529c <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b08a      	sub	sp, #40	@ 0x28
 80152a0:	af02      	add	r7, sp, #8
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	460b      	mov	r3, r1
 80152a6:	70fb      	strb	r3, [r7, #3]
 80152a8:	4613      	mov	r3, r2
 80152aa:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80152ac:	2300      	movs	r3, #0
 80152ae:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80152b0:	2300      	movs	r3, #0
 80152b2:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 80152b4:	78fb      	ldrb	r3, [r7, #3]
 80152b6:	2b03      	cmp	r3, #3
 80152b8:	d816      	bhi.n	80152e8 <phpalI14443p4a_Sw_Pps+0x4c>
 80152ba:	a201      	add	r2, pc, #4	@ (adr r2, 80152c0 <phpalI14443p4a_Sw_Pps+0x24>)
 80152bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152c0:	080152d1 	.word	0x080152d1
 80152c4:	080152d7 	.word	0x080152d7
 80152c8:	080152dd 	.word	0x080152dd
 80152cc:	080152e3 	.word	0x080152e3
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 80152d0:	2300      	movs	r3, #0
 80152d2:	83fb      	strh	r3, [r7, #30]
        break;
 80152d4:	e00b      	b.n	80152ee <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 80152d6:	2301      	movs	r3, #1
 80152d8:	83fb      	strh	r3, [r7, #30]
        break;
 80152da:	e008      	b.n	80152ee <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 80152dc:	2302      	movs	r3, #2
 80152de:	83fb      	strh	r3, [r7, #30]
        break;
 80152e0:	e005      	b.n	80152ee <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 80152e2:	2303      	movs	r3, #3
 80152e4:	83fb      	strh	r3, [r7, #30]
        break;
 80152e6:	e002      	b.n	80152ee <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80152e8:	f240 5321 	movw	r3, #1313	@ 0x521
 80152ec:	e080      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 80152ee:	78bb      	ldrb	r3, [r7, #2]
 80152f0:	2b03      	cmp	r3, #3
 80152f2:	d817      	bhi.n	8015324 <phpalI14443p4a_Sw_Pps+0x88>
 80152f4:	a201      	add	r2, pc, #4	@ (adr r2, 80152fc <phpalI14443p4a_Sw_Pps+0x60>)
 80152f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152fa:	bf00      	nop
 80152fc:	0801530d 	.word	0x0801530d
 8015300:	08015313 	.word	0x08015313
 8015304:	08015319 	.word	0x08015319
 8015308:	0801531f 	.word	0x0801531f
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 801530c:	2300      	movs	r3, #0
 801530e:	83bb      	strh	r3, [r7, #28]
        break;
 8015310:	e00b      	b.n	801532a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8015312:	2301      	movs	r3, #1
 8015314:	83bb      	strh	r3, [r7, #28]
        break;
 8015316:	e008      	b.n	801532a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8015318:	2302      	movs	r3, #2
 801531a:	83bb      	strh	r3, [r7, #28]
        break;
 801531c:	e005      	b.n	801532a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 801531e:	2303      	movs	r3, #3
 8015320:	83bb      	strh	r3, [r7, #28]
        break;
 8015322:	e002      	b.n	801532a <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015324:	f240 5321 	movw	r3, #1313	@ 0x521
 8015328:	e062      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	7a9b      	ldrb	r3, [r3, #10]
 801532e:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8015332:	b2db      	uxtb	r3, r3
 8015334:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 8015336:	2311      	movs	r3, #17
 8015338:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 801533a:	78bb      	ldrb	r3, [r7, #2]
 801533c:	009b      	lsls	r3, r3, #2
 801533e:	b2db      	uxtb	r3, r3
 8015340:	f003 030c 	and.w	r3, r3, #12
 8015344:	b2da      	uxtb	r2, r3
 8015346:	78fb      	ldrb	r3, [r7, #3]
 8015348:	f003 0303 	and.w	r3, r3, #3
 801534c:	b2db      	uxtb	r3, r3
 801534e:	4313      	orrs	r3, r2
 8015350:	b2db      	uxtb	r3, r3
 8015352:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6858      	ldr	r0, [r3, #4]
 8015358:	f107 0214 	add.w	r2, r7, #20
 801535c:	f107 030e 	add.w	r3, r7, #14
 8015360:	9301      	str	r3, [sp, #4]
 8015362:	f107 0310 	add.w	r3, r7, #16
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	2303      	movs	r3, #3
 801536a:	2100      	movs	r1, #0
 801536c:	f7f7 fc94 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8015370:	4603      	mov	r3, r0
 8015372:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8015374:	8b7b      	ldrh	r3, [r7, #26]
 8015376:	b2db      	uxtb	r3, r3
 8015378:	2b73      	cmp	r3, #115	@ 0x73
 801537a:	d102      	bne.n	8015382 <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 801537c:	f240 5306 	movw	r3, #1286	@ 0x506
 8015380:	e036      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 8015382:	8b7b      	ldrh	r3, [r7, #26]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d001      	beq.n	801538c <phpalI14443p4a_Sw_Pps+0xf0>
 8015388:	8b7b      	ldrh	r3, [r7, #26]
 801538a:	e031      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 801538c:	89fb      	ldrh	r3, [r7, #14]
 801538e:	2b01      	cmp	r3, #1
 8015390:	d108      	bne.n	80153a4 <phpalI14443p4a_Sw_Pps+0x108>
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	781a      	ldrb	r2, [r3, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	7a9b      	ldrb	r3, [r3, #10]
 801539a:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d002      	beq.n	80153aa <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80153a4:	f240 5306 	movw	r3, #1286	@ 0x506
 80153a8:	e022      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	78fa      	ldrb	r2, [r7, #3]
 80153ae:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	78ba      	ldrb	r2, [r7, #2]
 80153b4:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	685b      	ldr	r3, [r3, #4]
 80153ba:	8bfa      	ldrh	r2, [r7, #30]
 80153bc:	2109      	movs	r1, #9
 80153be:	4618      	mov	r0, r3
 80153c0:	f7f8 f83a 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80153c4:	4603      	mov	r3, r0
 80153c6:	833b      	strh	r3, [r7, #24]
 80153c8:	8b3b      	ldrh	r3, [r7, #24]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d001      	beq.n	80153d2 <phpalI14443p4a_Sw_Pps+0x136>
 80153ce:	8b3b      	ldrh	r3, [r7, #24]
 80153d0:	e00e      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	8bba      	ldrh	r2, [r7, #28]
 80153d8:	210a      	movs	r1, #10
 80153da:	4618      	mov	r0, r3
 80153dc:	f7f8 f82c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80153e0:	4603      	mov	r3, r0
 80153e2:	833b      	strh	r3, [r7, #24]
 80153e4:	8b3b      	ldrh	r3, [r7, #24]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d001      	beq.n	80153ee <phpalI14443p4a_Sw_Pps+0x152>
 80153ea:	8b3b      	ldrh	r3, [r7, #24]
 80153ec:	e000      	b.n	80153f0 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 80153ee:	2300      	movs	r3, #0
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3720      	adds	r7, #32
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	4608      	mov	r0, r1
 8015402:	4611      	mov	r1, r2
 8015404:	461a      	mov	r2, r3
 8015406:	4603      	mov	r3, r0
 8015408:	70fb      	strb	r3, [r7, #3]
 801540a:	460b      	mov	r3, r1
 801540c:	70bb      	strb	r3, [r7, #2]
 801540e:	4613      	mov	r3, r2
 8015410:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 8015412:	787b      	ldrb	r3, [r7, #1]
 8015414:	2b03      	cmp	r3, #3
 8015416:	d902      	bls.n	801541e <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015418:	f240 5321 	movw	r3, #1313	@ 0x521
 801541c:	e0a0      	b.n	8015560 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 801541e:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8015420:	7e3b      	ldrb	r3, [r7, #24]
 8015422:	2b03      	cmp	r3, #3
 8015424:	d902      	bls.n	801542c <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015426:	f240 5321 	movw	r3, #1313	@ 0x521
 801542a:	e099      	b.n	8015560 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 801542c:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 801542e:	78ba      	ldrb	r2, [r7, #2]
 8015430:	78f9      	ldrb	r1, [r7, #3]
 8015432:	69fb      	ldr	r3, [r7, #28]
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f7ff fc37 	bl	8014ca8 <phpalI14443p4a_Sw_Rats>
 801543a:	4603      	mov	r3, r0
 801543c:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801543e:	89fb      	ldrh	r3, [r7, #14]
 8015440:	b2db      	uxtb	r3, r3
 8015442:	2b00      	cmp	r3, #0
 8015444:	d17c      	bne.n	8015540 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8015446:	787b      	ldrb	r3, [r7, #1]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d102      	bne.n	8015452 <phpalI14443p4a_Sw_ActivateCard+0x5a>
 801544c:	7e3b      	ldrb	r3, [r7, #24]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d076      	beq.n	8015540 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8015456:	2b00      	cmp	r3, #0
 8015458:	d072      	beq.n	8015540 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	7adb      	ldrb	r3, [r3, #11]
 801545e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015462:	2b00      	cmp	r3, #0
 8015464:	d002      	beq.n	801546c <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 8015466:	2303      	movs	r3, #3
 8015468:	737b      	strb	r3, [r7, #13]
 801546a:	e013      	b.n	8015494 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	7adb      	ldrb	r3, [r3, #11]
 8015470:	f003 0320 	and.w	r3, r3, #32
 8015474:	2b00      	cmp	r3, #0
 8015476:	d002      	beq.n	801547e <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 8015478:	2302      	movs	r3, #2
 801547a:	737b      	strb	r3, [r7, #13]
 801547c:	e00a      	b.n	8015494 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	7adb      	ldrb	r3, [r3, #11]
 8015482:	f003 0310 	and.w	r3, r3, #16
 8015486:	2b00      	cmp	r3, #0
 8015488:	d002      	beq.n	8015490 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 801548a:	2301      	movs	r3, #1
 801548c:	737b      	strb	r3, [r7, #13]
 801548e:	e001      	b.n	8015494 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 8015490:	2300      	movs	r3, #0
 8015492:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	7adb      	ldrb	r3, [r3, #11]
 8015498:	f003 0304 	and.w	r3, r3, #4
 801549c:	2b00      	cmp	r3, #0
 801549e:	d002      	beq.n	80154a6 <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 80154a0:	2303      	movs	r3, #3
 80154a2:	733b      	strb	r3, [r7, #12]
 80154a4:	e013      	b.n	80154ce <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	7adb      	ldrb	r3, [r3, #11]
 80154aa:	f003 0302 	and.w	r3, r3, #2
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d002      	beq.n	80154b8 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 80154b2:	2302      	movs	r3, #2
 80154b4:	733b      	strb	r3, [r7, #12]
 80154b6:	e00a      	b.n	80154ce <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	7adb      	ldrb	r3, [r3, #11]
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d002      	beq.n	80154ca <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 80154c4:	2301      	movs	r3, #1
 80154c6:	733b      	strb	r3, [r7, #12]
 80154c8:	e001      	b.n	80154ce <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 80154ca:	2300      	movs	r3, #0
 80154cc:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 80154ce:	7e3a      	ldrb	r2, [r7, #24]
 80154d0:	7b7b      	ldrb	r3, [r7, #13]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d005      	beq.n	80154e2 <phpalI14443p4a_Sw_ActivateCard+0xea>
 80154d6:	7e3a      	ldrb	r2, [r7, #24]
 80154d8:	7b7b      	ldrb	r3, [r7, #13]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d901      	bls.n	80154e2 <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 80154de:	7b7b      	ldrb	r3, [r7, #13]
 80154e0:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 80154e2:	787a      	ldrb	r2, [r7, #1]
 80154e4:	7b3b      	ldrb	r3, [r7, #12]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d005      	beq.n	80154f6 <phpalI14443p4a_Sw_ActivateCard+0xfe>
 80154ea:	787a      	ldrb	r2, [r7, #1]
 80154ec:	7b3b      	ldrb	r3, [r7, #12]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d901      	bls.n	80154f6 <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 80154f2:	7b3b      	ldrb	r3, [r7, #12]
 80154f4:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	7adb      	ldrb	r3, [r3, #11]
 80154fa:	b25b      	sxtb	r3, r3
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	da0c      	bge.n	801551a <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8015500:	7e3a      	ldrb	r2, [r7, #24]
 8015502:	787b      	ldrb	r3, [r7, #1]
 8015504:	429a      	cmp	r2, r3
 8015506:	d008      	beq.n	801551a <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8015508:	7e3a      	ldrb	r2, [r7, #24]
 801550a:	787b      	ldrb	r3, [r7, #1]
 801550c:	429a      	cmp	r2, r3
 801550e:	d202      	bcs.n	8015516 <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8015510:	7e3b      	ldrb	r3, [r7, #24]
 8015512:	707b      	strb	r3, [r7, #1]
 8015514:	e001      	b.n	801551a <phpalI14443p4a_Sw_ActivateCard+0x122>
 8015516:	787b      	ldrb	r3, [r7, #1]
 8015518:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 801551a:	787b      	ldrb	r3, [r7, #1]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8015520:	7e3b      	ldrb	r3, [r7, #24]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d00c      	beq.n	8015540 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 8015526:	7e3a      	ldrb	r2, [r7, #24]
 8015528:	787b      	ldrb	r3, [r7, #1]
 801552a:	4619      	mov	r1, r3
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7ff feb5 	bl	801529c <phpalI14443p4a_Sw_Pps>
 8015532:	4603      	mov	r3, r0
 8015534:	81fb      	strh	r3, [r7, #14]
 8015536:	89fb      	ldrh	r3, [r7, #14]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d001      	beq.n	8015540 <phpalI14443p4a_Sw_ActivateCard+0x148>
 801553c:	89fb      	ldrh	r3, [r7, #14]
 801553e:	e00f      	b.n	8015560 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8015540:	89fb      	ldrh	r3, [r7, #14]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00b      	beq.n	801555e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8015546:	89fb      	ldrh	r3, [r7, #14]
 8015548:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801554c:	2b00      	cmp	r3, #0
 801554e:	d106      	bne.n	801555e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8015550:	89fb      	ldrh	r3, [r7, #14]
 8015552:	b2db      	uxtb	r3, r3
 8015554:	b29b      	uxth	r3, r3
 8015556:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801555a:	b29b      	uxth	r3, r3
 801555c:	e000      	b.n	8015560 <phpalI14443p4a_Sw_ActivateCard+0x168>
 801555e:	89fb      	ldrh	r3, [r7, #14]
}
 8015560:	4618      	mov	r0, r3
 8015562:	3710      	adds	r7, #16
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8015568:	b480      	push	{r7}
 801556a:	b085      	sub	sp, #20
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
 8015574:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	7a1a      	ldrb	r2, [r3, #8]
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	7a9a      	ldrb	r2, [r3, #10]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	7a5a      	ldrb	r2, [r3, #9]
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	7b1a      	ldrb	r2, [r3, #12]
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	7b9a      	ldrb	r2, [r3, #14]
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	7b5a      	ldrb	r2, [r3, #13]
 80155a2:	6a3b      	ldr	r3, [r7, #32]
 80155a4:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3714      	adds	r7, #20
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr

080155b4 <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b086      	sub	sp, #24
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	607a      	str	r2, [r7, #4]
 80155be:	603b      	str	r3, [r7, #0]
 80155c0:	460b      	mov	r3, r1
 80155c2:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80155c4:	2300      	movs	r3, #0
 80155c6:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 80155c8:	897b      	ldrh	r3, [r7, #10]
 80155ca:	2b34      	cmp	r3, #52	@ 0x34
 80155cc:	d002      	beq.n	80155d4 <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 80155ce:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80155d2:	e039      	b.n	8015648 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d101      	bne.n	80155de <phpalI14443p4mC_Sw_Init+0x2a>
 80155da:	2321      	movs	r3, #33	@ 0x21
 80155dc:	e034      	b.n	8015648 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <phpalI14443p4mC_Sw_Init+0x34>
 80155e4:	2321      	movs	r3, #33	@ 0x21
 80155e6:	e02f      	b.n	8015648 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f640 7201 	movw	r2, #3841	@ 0xf01
 80155ee:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2201      	movs	r2, #1
 8015600:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	2200      	movs	r2, #0
 8015606:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2202      	movs	r2, #2
 801560c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2200      	movs	r2, #0
 8015614:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	224b      	movs	r2, #75	@ 0x4b
 801561a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 801561e:	68f8      	ldr	r0, [r7, #12]
 8015620:	f000 f818 	bl	8015654 <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	2200      	movs	r2, #0
 8015628:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	4a08      	ldr	r2, [pc, #32]	@ (8015650 <phpalI14443p4mC_Sw_Init+0x9c>)
 801562e:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f103 0208 	add.w	r2, r3, #8
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	3308      	adds	r3, #8
 801563a:	4619      	mov	r1, r3
 801563c:	4610      	mov	r0, r2
 801563e:	f001 fe29 	bl	8017294 <phOsal_EventCreate>
 8015642:	4603      	mov	r3, r0
 8015644:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8015646:	8afb      	ldrh	r3, [r7, #22]
}
 8015648:	4618      	mov	r0, r3
 801564a:	3718      	adds	r7, #24
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}
 8015650:	0802079c 	.word	0x0802079c

08015654 <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 801565c:	2300      	movs	r3, #0
 801565e:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2200      	movs	r2, #0
 8015664:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2201      	movs	r2, #1
 801566c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2200      	movs	r2, #0
 8015674:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2202      	movs	r2, #2
 801567a:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2200      	movs	r2, #0
 8015680:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2200      	movs	r2, #0
 8015686:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2200      	movs	r2, #0
 801568c:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2204      	movs	r2, #4
 8015692:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	2200      	movs	r2, #0
 8015698:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2200      	movs	r2, #0
 80156a0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2200      	movs	r2, #0
 80156b0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2200      	movs	r2, #0
 80156b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	2201      	movs	r2, #1
 80156c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2200      	movs	r2, #0
 80156c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2200      	movs	r2, #0
 80156d0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2200      	movs	r2, #0
 80156d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	685b      	ldr	r3, [r3, #4]
 80156e0:	2200      	movs	r2, #0
 80156e2:	2130      	movs	r1, #48	@ 0x30
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7f7 fea7 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80156ea:	4603      	mov	r3, r0
 80156ec:	81fb      	strh	r3, [r7, #14]
 80156ee:	89fb      	ldrh	r3, [r7, #14]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d001      	beq.n	80156f8 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 80156f4:	89fb      	ldrh	r3, [r7, #14]
 80156f6:	e000      	b.n	80156fa <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 80156f8:	89fb      	ldrh	r3, [r7, #14]
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3710      	adds	r7, #16
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}

08015702 <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 8015702:	b480      	push	{r7}
 8015704:	b085      	sub	sp, #20
 8015706:	af00      	add	r7, sp, #0
 8015708:	60f8      	str	r0, [r7, #12]
 801570a:	460b      	mov	r3, r1
 801570c:	607a      	str	r2, [r7, #4]
 801570e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8015710:	897b      	ldrh	r3, [r7, #10]
 8015712:	2b0c      	cmp	r3, #12
 8015714:	d002      	beq.n	801571c <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 8015716:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 801571a:	e017      	b.n	801574c <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d101      	bne.n	8015726 <phpalI18000p3m3_Sw_Init+0x24>
 8015722:	2321      	movs	r3, #33	@ 0x21
 8015724:	e012      	b.n	801574c <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d101      	bne.n	8015730 <phpalI18000p3m3_Sw_Init+0x2e>
 801572c:	2321      	movs	r3, #33	@ 0x21
 801572e:	e00d      	b.n	801574c <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	f640 3201 	movw	r2, #2817	@ 0xb01
 8015736:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	2200      	movs	r2, #0
 8015742:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	2200      	movs	r2, #0
 8015748:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 801574a:	2300      	movs	r3, #0
}
 801574c:	4618      	mov	r0, r3
 801574e:	3714      	adds	r7, #20
 8015750:	46bd      	mov	sp, r7
 8015752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015756:	4770      	bx	lr

08015758 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 8015758:	b480      	push	{r7}
 801575a:	b085      	sub	sp, #20
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	4608      	mov	r0, r1
 8015762:	4611      	mov	r1, r2
 8015764:	461a      	mov	r2, r3
 8015766:	4603      	mov	r3, r0
 8015768:	70fb      	strb	r3, [r7, #3]
 801576a:	460b      	mov	r3, r1
 801576c:	70bb      	strb	r3, [r7, #2]
 801576e:	4613      	mov	r3, r2
 8015770:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 8015776:	78fb      	ldrb	r3, [r7, #3]
 8015778:	2b07      	cmp	r3, #7
 801577a:	d80c      	bhi.n	8015796 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 801577c:	78bb      	ldrb	r3, [r7, #2]
 801577e:	2b07      	cmp	r3, #7
 8015780:	d809      	bhi.n	8015796 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8015782:	787b      	ldrb	r3, [r7, #1]
 8015784:	2b03      	cmp	r3, #3
 8015786:	d806      	bhi.n	8015796 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8015788:	7f3b      	ldrb	r3, [r7, #28]
 801578a:	2b03      	cmp	r3, #3
 801578c:	d803      	bhi.n	8015796 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 801578e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015792:	2b01      	cmp	r3, #1
 8015794:	d902      	bls.n	801579c <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8015796:	f640 3321 	movw	r3, #2849	@ 0xb21
 801579a:	e0f0      	b.n	801597e <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 801579c:	2300      	movs	r3, #0
 801579e:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 80157a0:	78fb      	ldrb	r3, [r7, #3]
 80157a2:	005b      	lsls	r3, r3, #1
 80157a4:	b2da      	uxtb	r2, r3
 80157a6:	78bb      	ldrb	r3, [r7, #2]
 80157a8:	089b      	lsrs	r3, r3, #2
 80157aa:	b2db      	uxtb	r3, r3
 80157ac:	4313      	orrs	r3, r2
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	7bbb      	ldrb	r3, [r7, #14]
 80157b2:	1c59      	adds	r1, r3, #1
 80157b4:	73b9      	strb	r1, [r7, #14]
 80157b6:	4619      	mov	r1, r3
 80157b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ba:	440b      	add	r3, r1
 80157bc:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 80157c0:	b2d2      	uxtb	r2, r2
 80157c2:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 80157c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80157c8:	019b      	lsls	r3, r3, #6
 80157ca:	b25a      	sxtb	r2, r3
 80157cc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80157d0:	011b      	lsls	r3, r3, #4
 80157d2:	b25b      	sxtb	r3, r3
 80157d4:	4313      	orrs	r3, r2
 80157d6:	b25a      	sxtb	r2, r3
 80157d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	b25b      	sxtb	r3, r3
 80157e0:	4313      	orrs	r3, r2
 80157e2:	b259      	sxtb	r1, r3
 80157e4:	7bbb      	ldrb	r3, [r7, #14]
 80157e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157e8:	4413      	add	r3, r2
 80157ea:	b2ca      	uxtb	r2, r1
 80157ec:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 80157ee:	2300      	movs	r3, #0
 80157f0:	73fb      	strb	r3, [r7, #15]
 80157f2:	e01f      	b.n	8015834 <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 80157f4:	7bbb      	ldrb	r3, [r7, #14]
 80157f6:	1c5a      	adds	r2, r3, #1
 80157f8:	73ba      	strb	r2, [r7, #14]
 80157fa:	4619      	mov	r1, r3
 80157fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157fe:	440a      	add	r2, r1
 8015800:	7811      	ldrb	r1, [r2, #0]
 8015802:	7bfa      	ldrb	r2, [r7, #15]
 8015804:	69b8      	ldr	r0, [r7, #24]
 8015806:	4402      	add	r2, r0
 8015808:	7812      	ldrb	r2, [r2, #0]
 801580a:	0992      	lsrs	r2, r2, #6
 801580c:	b2d2      	uxtb	r2, r2
 801580e:	4618      	mov	r0, r3
 8015810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015812:	4403      	add	r3, r0
 8015814:	430a      	orrs	r2, r1
 8015816:	b2d2      	uxtb	r2, r2
 8015818:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 801581a:	7bfb      	ldrb	r3, [r7, #15]
 801581c:	69ba      	ldr	r2, [r7, #24]
 801581e:	4413      	add	r3, r2
 8015820:	781a      	ldrb	r2, [r3, #0]
 8015822:	7bbb      	ldrb	r3, [r7, #14]
 8015824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015826:	440b      	add	r3, r1
 8015828:	0092      	lsls	r2, r2, #2
 801582a:	b2d2      	uxtb	r2, r2
 801582c:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 801582e:	7bfb      	ldrb	r3, [r7, #15]
 8015830:	3301      	adds	r3, #1
 8015832:	73fb      	strb	r3, [r7, #15]
 8015834:	7bfa      	ldrb	r2, [r7, #15]
 8015836:	7f3b      	ldrb	r3, [r7, #28]
 8015838:	3301      	adds	r3, #1
 801583a:	429a      	cmp	r2, r3
 801583c:	d3da      	bcc.n	80157f4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 801583e:	7bbb      	ldrb	r3, [r7, #14]
 8015840:	1c5a      	adds	r2, r3, #1
 8015842:	73ba      	strb	r2, [r7, #14]
 8015844:	4619      	mov	r1, r3
 8015846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015848:	440a      	add	r2, r1
 801584a:	7811      	ldrb	r1, [r2, #0]
 801584c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8015850:	0992      	lsrs	r2, r2, #6
 8015852:	b2d2      	uxtb	r2, r2
 8015854:	4618      	mov	r0, r3
 8015856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015858:	4403      	add	r3, r0
 801585a:	430a      	orrs	r2, r1
 801585c:	b2d2      	uxtb	r2, r2
 801585e:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 8015860:	7bbb      	ldrb	r3, [r7, #14]
 8015862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015864:	4413      	add	r3, r2
 8015866:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 801586a:	0092      	lsls	r2, r2, #2
 801586c:	b2d2      	uxtb	r2, r2
 801586e:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 8015870:	7bbb      	ldrb	r3, [r7, #14]
 8015872:	b29b      	uxth	r3, r3
 8015874:	00db      	lsls	r3, r3, #3
 8015876:	b29b      	uxth	r3, r3
 8015878:	3306      	adds	r3, #6
 801587a:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 801587c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015880:	08db      	lsrs	r3, r3, #3
 8015882:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 8015884:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015888:	f003 0307 	and.w	r3, r3, #7
 801588c:	2b00      	cmp	r3, #0
 801588e:	d002      	beq.n	8015896 <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 8015890:	7b3b      	ldrb	r3, [r7, #12]
 8015892:	3301      	adds	r3, #1
 8015894:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8015896:	2300      	movs	r3, #0
 8015898:	73fb      	strb	r3, [r7, #15]
 801589a:	e036      	b.n	801590a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 801589c:	7bfb      	ldrb	r3, [r7, #15]
 801589e:	6a3a      	ldr	r2, [r7, #32]
 80158a0:	4413      	add	r3, r2
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 80158a6:	7bfa      	ldrb	r2, [r7, #15]
 80158a8:	7b3b      	ldrb	r3, [r7, #12]
 80158aa:	3b01      	subs	r3, #1
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d112      	bne.n	80158d6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 80158b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80158b4:	f003 0307 	and.w	r3, r3, #7
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d00c      	beq.n	80158d6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 80158bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80158c0:	f003 0307 	and.w	r3, r3, #7
 80158c4:	f1c3 0308 	rsb	r3, r3, #8
 80158c8:	22ff      	movs	r2, #255	@ 0xff
 80158ca:	fa02 f303 	lsl.w	r3, r2, r3
 80158ce:	b2da      	uxtb	r2, r3
 80158d0:	7b7b      	ldrb	r3, [r7, #13]
 80158d2:	4013      	ands	r3, r2
 80158d4:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 80158d6:	7bbb      	ldrb	r3, [r7, #14]
 80158d8:	1c5a      	adds	r2, r3, #1
 80158da:	73ba      	strb	r2, [r7, #14]
 80158dc:	4619      	mov	r1, r3
 80158de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158e0:	440a      	add	r2, r1
 80158e2:	7811      	ldrb	r1, [r2, #0]
 80158e4:	7b7a      	ldrb	r2, [r7, #13]
 80158e6:	0992      	lsrs	r2, r2, #6
 80158e8:	b2d2      	uxtb	r2, r2
 80158ea:	4618      	mov	r0, r3
 80158ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158ee:	4403      	add	r3, r0
 80158f0:	430a      	orrs	r2, r1
 80158f2:	b2d2      	uxtb	r2, r2
 80158f4:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 80158f6:	7bbb      	ldrb	r3, [r7, #14]
 80158f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158fa:	4413      	add	r3, r2
 80158fc:	7b7a      	ldrb	r2, [r7, #13]
 80158fe:	0092      	lsls	r2, r2, #2
 8015900:	b2d2      	uxtb	r2, r2
 8015902:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8015904:	7bfb      	ldrb	r3, [r7, #15]
 8015906:	3301      	adds	r3, #1
 8015908:	73fb      	strb	r3, [r7, #15]
 801590a:	7bfa      	ldrb	r2, [r7, #15]
 801590c:	7b3b      	ldrb	r3, [r7, #12]
 801590e:	429a      	cmp	r2, r3
 8015910:	d3c4      	bcc.n	801589c <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 8015912:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015916:	b29a      	uxth	r2, r3
 8015918:	897b      	ldrh	r3, [r7, #10]
 801591a:	4413      	add	r3, r2
 801591c:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 801591e:	897b      	ldrh	r3, [r7, #10]
 8015920:	08db      	lsrs	r3, r3, #3
 8015922:	b29a      	uxth	r2, r3
 8015924:	7bbb      	ldrb	r3, [r7, #14]
 8015926:	b29b      	uxth	r3, r3
 8015928:	429a      	cmp	r2, r3
 801592a:	d002      	beq.n	8015932 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 801592c:	7bbb      	ldrb	r3, [r7, #14]
 801592e:	3b01      	subs	r3, #1
 8015930:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 8015932:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015936:	2b00      	cmp	r3, #0
 8015938:	d010      	beq.n	801595c <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 801593a:	7bbb      	ldrb	r3, [r7, #14]
 801593c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801593e:	4413      	add	r3, r2
 8015940:	7819      	ldrb	r1, [r3, #0]
 8015942:	897b      	ldrh	r3, [r7, #10]
 8015944:	f003 0307 	and.w	r3, r3, #7
 8015948:	2280      	movs	r2, #128	@ 0x80
 801594a:	fa22 f303 	lsr.w	r3, r2, r3
 801594e:	b2da      	uxtb	r2, r3
 8015950:	7bbb      	ldrb	r3, [r7, #14]
 8015952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015954:	4403      	add	r3, r0
 8015956:	430a      	orrs	r2, r1
 8015958:	b2d2      	uxtb	r2, r2
 801595a:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 801595c:	7bbb      	ldrb	r3, [r7, #14]
 801595e:	3301      	adds	r3, #1
 8015960:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 8015962:	897b      	ldrh	r3, [r7, #10]
 8015964:	3301      	adds	r3, #1
 8015966:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 8015968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801596a:	7bba      	ldrb	r2, [r7, #14]
 801596c:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 801596e:	897b      	ldrh	r3, [r7, #10]
 8015970:	b2db      	uxtb	r3, r3
 8015972:	f003 0307 	and.w	r3, r3, #7
 8015976:	b2da      	uxtb	r2, r3
 8015978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801597a:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801597c:	2300      	movs	r3, #0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3714      	adds	r7, #20
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr

0801598a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 801598a:	b580      	push	{r7, lr}
 801598c:	b084      	sub	sp, #16
 801598e:	af00      	add	r7, sp, #0
 8015990:	6078      	str	r0, [r7, #4]
 8015992:	4608      	mov	r0, r1
 8015994:	4611      	mov	r1, r2
 8015996:	461a      	mov	r2, r3
 8015998:	4603      	mov	r3, r0
 801599a:	70fb      	strb	r3, [r7, #3]
 801599c:	460b      	mov	r3, r1
 801599e:	70bb      	strb	r3, [r7, #2]
 80159a0:	4613      	mov	r3, r2
 80159a2:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 80159a4:	2300      	movs	r3, #0
 80159a6:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 80159a8:	78fb      	ldrb	r3, [r7, #3]
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d816      	bhi.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159ae:	78bb      	ldrb	r3, [r7, #2]
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	d913      	bls.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159b4:	78bb      	ldrb	r3, [r7, #2]
 80159b6:	2b03      	cmp	r3, #3
 80159b8:	d810      	bhi.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159ba:	787b      	ldrb	r3, [r7, #1]
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d80d      	bhi.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159c0:	7e3b      	ldrb	r3, [r7, #24]
 80159c2:	2b03      	cmp	r3, #3
 80159c4:	d80a      	bhi.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159c6:	7f3b      	ldrb	r3, [r7, #28]
 80159c8:	2b03      	cmp	r3, #3
 80159ca:	d807      	bhi.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80159d0:	2b01      	cmp	r3, #1
 80159d2:	d803      	bhi.n	80159dc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80159d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80159d8:	2b0f      	cmp	r3, #15
 80159da:	d902      	bls.n	80159e2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80159dc:	f640 3321 	movw	r3, #2849	@ 0xb21
 80159e0:	e072      	b.n	8015ac8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	7f3a      	ldrb	r2, [r7, #28]
 80159e6:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 80159e8:	787b      	ldrb	r3, [r7, #1]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d002      	beq.n	80159f4 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 80159ee:	2301      	movs	r3, #1
 80159f0:	707b      	strb	r3, [r7, #1]
 80159f2:	e001      	b.n	80159f8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 80159f4:	2300      	movs	r3, #0
 80159f6:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 80159f8:	78fb      	ldrb	r3, [r7, #3]
 80159fa:	00db      	lsls	r3, r3, #3
 80159fc:	b2da      	uxtb	r2, r3
 80159fe:	78bb      	ldrb	r3, [r7, #2]
 8015a00:	005b      	lsls	r3, r3, #1
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	4313      	orrs	r3, r2
 8015a06:	b2da      	uxtb	r2, r3
 8015a08:	787b      	ldrb	r3, [r7, #1]
 8015a0a:	4313      	orrs	r3, r2
 8015a0c:	b2db      	uxtb	r3, r3
 8015a0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015a12:	b2da      	uxtb	r2, r3
 8015a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a16:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8015a18:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8015a1c:	019b      	lsls	r3, r3, #6
 8015a1e:	b25a      	sxtb	r2, r3
 8015a20:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015a24:	011b      	lsls	r3, r3, #4
 8015a26:	b25b      	sxtb	r3, r3
 8015a28:	4313      	orrs	r3, r2
 8015a2a:	b25a      	sxtb	r2, r3
 8015a2c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	b25b      	sxtb	r3, r3
 8015a34:	4313      	orrs	r3, r2
 8015a36:	b25a      	sxtb	r2, r3
 8015a38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015a3c:	085b      	lsrs	r3, r3, #1
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	b25b      	sxtb	r3, r3
 8015a42:	4313      	orrs	r3, r2
 8015a44:	b25a      	sxtb	r2, r3
 8015a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a48:	3301      	adds	r3, #1
 8015a4a:	b2d2      	uxtb	r2, r2
 8015a4c:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 8015a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a50:	3302      	adds	r3, #2
 8015a52:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8015a56:	01d2      	lsls	r2, r2, #7
 8015a58:	b2d2      	uxtb	r2, r2
 8015a5a:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 8015a5c:	78fb      	ldrb	r3, [r7, #3]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d108      	bne.n	8015a74 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 8015a62:	78bb      	ldrb	r3, [r7, #2]
 8015a64:	2b02      	cmp	r3, #2
 8015a66:	d102      	bne.n	8015a6e <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 8015a68:	2313      	movs	r3, #19
 8015a6a:	81fb      	strh	r3, [r7, #14]
 8015a6c:	e00a      	b.n	8015a84 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 8015a6e:	2315      	movs	r3, #21
 8015a70:	81fb      	strh	r3, [r7, #14]
 8015a72:	e007      	b.n	8015a84 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 8015a74:	78bb      	ldrb	r3, [r7, #2]
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d102      	bne.n	8015a80 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 8015a7a:	2314      	movs	r3, #20
 8015a7c:	81fb      	strh	r3, [r7, #14]
 8015a7e:	e001      	b.n	8015a84 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 8015a80:	2316      	movs	r3, #22
 8015a82:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	89fa      	ldrh	r2, [r7, #14]
 8015a8a:	210a      	movs	r1, #10
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f7 fcd3 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015a92:	4603      	mov	r3, r0
 8015a94:	81bb      	strh	r3, [r7, #12]
 8015a96:	89bb      	ldrh	r3, [r7, #12]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d001      	beq.n	8015aa0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 8015a9c:	89bb      	ldrh	r3, [r7, #12]
 8015a9e:	e013      	b.n	8015ac8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6858      	ldr	r0, [r3, #4]
 8015aa4:	78fb      	ldrb	r3, [r7, #3]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d101      	bne.n	8015aae <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 8015aaa:	2301      	movs	r3, #1
 8015aac:	e000      	b.n	8015ab0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 8015aae:	2302      	movs	r3, #2
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	210f      	movs	r1, #15
 8015ab4:	f7f7 fcc0 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	81bb      	strh	r3, [r7, #12]
 8015abc:	89bb      	ldrh	r3, [r7, #12]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d001      	beq.n	8015ac6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 8015ac2:	89bb      	ldrh	r3, [r7, #12]
 8015ac4:	e000      	b.n	8015ac8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 8015ac6:	2300      	movs	r3, #0
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3710      	adds	r7, #16
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}

08015ad0 <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	b085      	sub	sp, #20
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	60f8      	str	r0, [r7, #12]
 8015ad8:	607a      	str	r2, [r7, #4]
 8015ada:	603b      	str	r3, [r7, #0]
 8015adc:	460b      	mov	r3, r1
 8015ade:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 8015ae0:	897b      	ldrh	r3, [r7, #10]
 8015ae2:	2b0c      	cmp	r3, #12
 8015ae4:	d002      	beq.n	8015aec <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 8015ae6:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8015aea:	e014      	b.n	8015b16 <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d101      	bne.n	8015af6 <phpalMifare_Sw_Init+0x26>
 8015af2:	2321      	movs	r3, #33	@ 0x21
 8015af4:	e00f      	b.n	8015b16 <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d101      	bne.n	8015b00 <phpalMifare_Sw_Init+0x30>
 8015afc:	2321      	movs	r3, #33	@ 0x21
 8015afe:	e00a      	b.n	8015b16 <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	f240 7202 	movw	r2, #1794	@ 0x702
 8015b06:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	683a      	ldr	r2, [r7, #0]
 8015b12:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 8015b14:	2300      	movs	r3, #0
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3714      	adds	r7, #20
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b20:	4770      	bx	lr

08015b22 <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8015b22:	b480      	push	{r7}
 8015b24:	b085      	sub	sp, #20
 8015b26:	af00      	add	r7, sp, #0
 8015b28:	60f8      	str	r0, [r7, #12]
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	607a      	str	r2, [r7, #4]
 8015b2e:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d101      	bne.n	8015b3a <phpalSli15693_Sw_Init+0x18>
 8015b36:	2321      	movs	r3, #33	@ 0x21
 8015b38:	e02d      	b.n	8015b96 <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d101      	bne.n	8015b44 <phpalSli15693_Sw_Init+0x22>
 8015b40:	2321      	movs	r3, #33	@ 0x21
 8015b42:	e028      	b.n	8015b96 <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 8015b44:	897b      	ldrh	r3, [r7, #10]
 8015b46:	2b1c      	cmp	r3, #28
 8015b48:	d002      	beq.n	8015b50 <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 8015b4a:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8015b4e:	e022      	b.n	8015b96 <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	f640 2201 	movw	r2, #2561	@ 0xa01
 8015b56:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2200      	movs	r2, #0
 8015b62:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2206      	movs	r2, #6
 8015b68:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	2200      	movs	r2, #0
 8015b74:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2203      	movs	r2, #3
 8015b7a:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	2200      	movs	r2, #0
 8015b80:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2202      	movs	r2, #2
 8015b86:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	2204      	movs	r2, #4
 8015b8c:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	2200      	movs	r2, #0
 8015b92:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3714      	adds	r7, #20
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba0:	4770      	bx	lr

08015ba2 <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 8015ba2:	b580      	push	{r7, lr}
 8015ba4:	b08e      	sub	sp, #56	@ 0x38
 8015ba6:	af08      	add	r7, sp, #32
 8015ba8:	60f8      	str	r0, [r7, #12]
 8015baa:	607b      	str	r3, [r7, #4]
 8015bac:	460b      	mov	r3, r1
 8015bae:	72fb      	strb	r3, [r7, #11]
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 8015bb8:	7ab9      	ldrb	r1, [r7, #10]
 8015bba:	7afa      	ldrb	r2, [r7, #11]
 8015bbc:	f107 0314 	add.w	r3, r7, #20
 8015bc0:	9307      	str	r3, [sp, #28]
 8015bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bc4:	9306      	str	r3, [sp, #24]
 8015bc6:	f107 0317 	add.w	r3, r7, #23
 8015bca:	9305      	str	r3, [sp, #20]
 8015bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bce:	9304      	str	r3, [sp, #16]
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	9303      	str	r3, [sp, #12]
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	9302      	str	r3, [sp, #8]
 8015bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bdc:	9301      	str	r3, [sp, #4]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	460b      	mov	r3, r1
 8015be4:	2101      	movs	r1, #1
 8015be6:	68f8      	ldr	r0, [r7, #12]
 8015be8:	f000 fe64 	bl	80168b4 <phpalSli15693_Sw_InventoryEx>
 8015bec:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3718      	adds	r7, #24
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b08a      	sub	sp, #40	@ 0x28
 8015bfa:	af02      	add	r7, sp, #8
 8015bfc:	60f8      	str	r0, [r7, #12]
 8015bfe:	607a      	str	r2, [r7, #4]
 8015c00:	603b      	str	r3, [r7, #0]
 8015c02:	460b      	mov	r3, r1
 8015c04:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015c06:	2300      	movs	r3, #0
 8015c08:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 8015c0e:	7afb      	ldrb	r3, [r7, #11]
 8015c10:	2b03      	cmp	r3, #3
 8015c12:	d902      	bls.n	8015c1a <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015c14:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015c18:	e1c1      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 8015c1a:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2200      	movs	r2, #0
 8015c20:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 8015c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c24:	2200      	movs	r2, #0
 8015c26:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8015c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 8015c2e:	7afb      	ldrb	r3, [r7, #11]
 8015c30:	2b03      	cmp	r3, #3
 8015c32:	d10e      	bne.n	8015c52 <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015c3c:	2100      	movs	r1, #0
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7f7 fb26 	bl	800d290 <phhalHw_Pn5180_Wait>
 8015c44:	4603      	mov	r3, r0
 8015c46:	83bb      	strh	r3, [r7, #28]
 8015c48:	8bbb      	ldrh	r3, [r7, #28]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d001      	beq.n	8015c52 <phpalSli15693_Sw_SendEof+0x5c>
 8015c4e:	8bbb      	ldrh	r3, [r7, #28]
 8015c50:	e1a5      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	f107 0210 	add.w	r2, r7, #16
 8015c5a:	210c      	movs	r1, #12
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7f9 f839 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8015c62:	4603      	mov	r3, r0
 8015c64:	83bb      	strh	r3, [r7, #28]
 8015c66:	8bbb      	ldrh	r3, [r7, #28]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d001      	beq.n	8015c70 <phpalSli15693_Sw_SendEof+0x7a>
 8015c6c:	8bbb      	ldrh	r3, [r7, #28]
 8015c6e:	e196      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8015c70:	7afb      	ldrb	r3, [r7, #11]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d12a      	bne.n	8015ccc <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 8015c76:	8a3b      	ldrh	r3, [r7, #16]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d00d      	beq.n	8015c98 <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	7a9b      	ldrb	r3, [r3, #10]
 8015c80:	f003 0302 	and.w	r3, r3, #2
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d003      	beq.n	8015c90 <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 8015c88:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8015c8c:	83fb      	strh	r3, [r7, #30]
 8015c8e:	e010      	b.n	8015cb2 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 8015c90:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8015c94:	83fb      	strh	r3, [r7, #30]
 8015c96:	e00c      	b.n	8015cb2 <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	7a9b      	ldrb	r3, [r3, #10]
 8015c9c:	f003 0302 	and.w	r3, r3, #2
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d003      	beq.n	8015cac <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 8015ca4:	f241 039c 	movw	r3, #4252	@ 0x109c
 8015ca8:	83fb      	strh	r3, [r7, #30]
 8015caa:	e002      	b.n	8015cb2 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 8015cac:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8015cb0:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015cb2:	8bfb      	ldrh	r3, [r7, #30]
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	2102      	movs	r1, #2
 8015cb8:	68f8      	ldr	r0, [r7, #12]
 8015cba:	f000 faf9 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	83bb      	strh	r3, [r7, #28]
 8015cc2:	8bbb      	ldrh	r3, [r7, #28]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d04b      	beq.n	8015d60 <phpalSli15693_Sw_SendEof+0x16a>
 8015cc8:	8bbb      	ldrh	r3, [r7, #28]
 8015cca:	e168      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8015ccc:	7afb      	ldrb	r3, [r7, #11]
 8015cce:	2b01      	cmp	r3, #1
 8015cd0:	d12a      	bne.n	8015d28 <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 8015cd2:	8a3b      	ldrh	r3, [r7, #16]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d00d      	beq.n	8015cf4 <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	7a9b      	ldrb	r3, [r3, #10]
 8015cdc:	f003 0302 	and.w	r3, r3, #2
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d003      	beq.n	8015cec <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 8015ce4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015ce8:	83fb      	strh	r3, [r7, #30]
 8015cea:	e010      	b.n	8015d0e <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 8015cec:	f240 2373 	movw	r3, #627	@ 0x273
 8015cf0:	83fb      	strh	r3, [r7, #30]
 8015cf2:	e00c      	b.n	8015d0e <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	7a9b      	ldrb	r3, [r3, #10]
 8015cf8:	f003 0302 	and.w	r3, r3, #2
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d003      	beq.n	8015d08 <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8015d00:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8015d04:	83fb      	strh	r3, [r7, #30]
 8015d06:	e002      	b.n	8015d0e <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 8015d08:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 8015d0c:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015d0e:	8bfb      	ldrh	r3, [r7, #30]
 8015d10:	461a      	mov	r2, r3
 8015d12:	2102      	movs	r1, #2
 8015d14:	68f8      	ldr	r0, [r7, #12]
 8015d16:	f000 facb 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	83bb      	strh	r3, [r7, #28]
 8015d1e:	8bbb      	ldrh	r3, [r7, #28]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d01d      	beq.n	8015d60 <phpalSli15693_Sw_SendEof+0x16a>
 8015d24:	8bbb      	ldrh	r3, [r7, #28]
 8015d26:	e13a      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	7d9b      	ldrb	r3, [r3, #22]
 8015d2c:	2b02      	cmp	r3, #2
 8015d2e:	d10b      	bne.n	8015d48 <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015d30:	2246      	movs	r2, #70	@ 0x46
 8015d32:	2103      	movs	r1, #3
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f000 fabb 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	83bb      	strh	r3, [r7, #28]
 8015d3e:	8bbb      	ldrh	r3, [r7, #28]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00d      	beq.n	8015d60 <phpalSli15693_Sw_SendEof+0x16a>
 8015d44:	8bbb      	ldrh	r3, [r7, #28]
 8015d46:	e12a      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015d48:	2214      	movs	r2, #20
 8015d4a:	2103      	movs	r1, #3
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	f000 faaf 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8015d52:	4603      	mov	r3, r0
 8015d54:	83bb      	strh	r3, [r7, #28]
 8015d56:	8bbb      	ldrh	r3, [r7, #28]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <phpalSli15693_Sw_SendEof+0x16a>
 8015d5c:	8bbb      	ldrh	r3, [r7, #28]
 8015d5e:	e11e      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	2200      	movs	r2, #0
 8015d66:	2115      	movs	r1, #21
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f7 fb65 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	83bb      	strh	r3, [r7, #28]
 8015d72:	8bbb      	ldrh	r3, [r7, #28]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d001      	beq.n	8015d7c <phpalSli15693_Sw_SendEof+0x186>
 8015d78:	8bbb      	ldrh	r3, [r7, #28]
 8015d7a:	e110      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	6858      	ldr	r0, [r3, #4]
 8015d80:	f107 0312 	add.w	r3, r7, #18
 8015d84:	9301      	str	r3, [sp, #4]
 8015d86:	f107 0314 	add.w	r3, r7, #20
 8015d8a:	9300      	str	r3, [sp, #0]
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	2200      	movs	r2, #0
 8015d90:	2100      	movs	r1, #0
 8015d92:	f7f6 ff81 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8015d96:	4603      	mov	r3, r0
 8015d98:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	2205      	movs	r2, #5
 8015da0:	2115      	movs	r1, #21
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7f7 fb48 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8015da8:	4603      	mov	r3, r0
 8015daa:	83bb      	strh	r3, [r7, #28]
 8015dac:	8bbb      	ldrh	r3, [r7, #28]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d001      	beq.n	8015db6 <phpalSli15693_Sw_SendEof+0x1c0>
 8015db2:	8bbb      	ldrh	r3, [r7, #28]
 8015db4:	e0f3      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 8015db6:	8b7b      	ldrh	r3, [r7, #26]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d001      	beq.n	8015dc0 <phpalSli15693_Sw_SendEof+0x1ca>
 8015dbc:	8b7b      	ldrh	r3, [r7, #26]
 8015dbe:	e0ee      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 8015dc0:	8a7b      	ldrh	r3, [r7, #18]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d102      	bne.n	8015dcc <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015dc6:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015dca:	e0e8      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	781b      	ldrb	r3, [r3, #0]
 8015dd0:	f003 0301 	and.w	r3, r3, #1
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d00e      	beq.n	8015df6 <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 8015dd8:	8a7b      	ldrh	r3, [r7, #18]
 8015dda:	2b02      	cmp	r3, #2
 8015ddc:	d002      	beq.n	8015de4 <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015dde:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015de2:	e0dc      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	3301      	adds	r3, #1
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	461a      	mov	r2, r3
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8015df0:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8015df4:	e0d3      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8015df6:	7afb      	ldrb	r3, [r7, #11]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d13d      	bne.n	8015e78 <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	3301      	adds	r3, #1
 8015e00:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8015e02:	8a7b      	ldrh	r3, [r7, #18]
 8015e04:	3b01      	subs	r3, #1
 8015e06:	b29b      	uxth	r3, r3
 8015e08:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 8015e0a:	8a7b      	ldrh	r3, [r7, #18]
 8015e0c:	2b09      	cmp	r3, #9
 8015e0e:	d002      	beq.n	8015e16 <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015e10:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015e14:	e0c3      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	685b      	ldr	r3, [r3, #4]
 8015e1a:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8015e1e:	2100      	movs	r1, #0
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7f7 fa35 	bl	800d290 <phhalHw_Pn5180_Wait>
 8015e26:	4603      	mov	r3, r0
 8015e28:	83bb      	strh	r3, [r7, #28]
 8015e2a:	8bbb      	ldrh	r3, [r7, #28]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d001      	beq.n	8015e34 <phpalSli15693_Sw_SendEof+0x23e>
 8015e30:	8bbb      	ldrh	r3, [r7, #28]
 8015e32:	e0b4      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	781a      	ldrb	r2, [r3, #0]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	f103 000c 	add.w	r0, r3, #12
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	3301      	adds	r3, #1
 8015e46:	2208      	movs	r2, #8
 8015e48:	4619      	mov	r1, r3
 8015e4a:	f007 fbe0 	bl	801d60e <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2240      	movs	r2, #64	@ 0x40
 8015e52:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	3301      	adds	r3, #1
 8015e58:	2208      	movs	r2, #8
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	6838      	ldr	r0, [r7, #0]
 8015e5e:	f007 fbd6 	bl	801d60e <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8015e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e64:	2208      	movs	r2, #8
 8015e66:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	7a9b      	ldrb	r3, [r3, #10]
 8015e6c:	f043 0320 	orr.w	r3, r3, #32
 8015e70:	b2da      	uxtb	r2, r3
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	729a      	strb	r2, [r3, #10]
 8015e76:	e091      	b.n	8015f9c <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8015e78:	7afb      	ldrb	r3, [r7, #11]
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	f040 8088 	bne.w	8015f90 <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	3301      	adds	r3, #1
 8015e84:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8015e86:	8a7b      	ldrh	r3, [r7, #18]
 8015e88:	3b01      	subs	r3, #1
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	7a9b      	ldrb	r3, [r3, #10]
 8015e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d05b      	beq.n	8015f52 <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	7d1b      	ldrb	r3, [r3, #20]
 8015e9e:	08db      	lsrs	r3, r3, #3
 8015ea0:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8015ea2:	7e7b      	ldrb	r3, [r7, #25]
 8015ea4:	f1c3 0308 	rsb	r3, r3, #8
 8015ea8:	b2da      	uxtb	r2, r3
 8015eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eac:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 8015eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	8a7b      	ldrh	r3, [r7, #18]
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d902      	bls.n	8015ec0 <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015eba:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015ebe:	e06e      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8015ec0:	7e7b      	ldrb	r3, [r7, #25]
 8015ec2:	2b07      	cmp	r3, #7
 8015ec4:	d837      	bhi.n	8015f36 <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	7d1b      	ldrb	r3, [r3, #20]
 8015eca:	f003 0307 	and.w	r3, r3, #7
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d01e      	beq.n	8015f12 <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 8015ed4:	7e7b      	ldrb	r3, [r7, #25]
 8015ed6:	2b06      	cmp	r3, #6
 8015ed8:	d80d      	bhi.n	8015ef6 <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 8015eda:	7e7b      	ldrb	r3, [r7, #25]
 8015edc:	3301      	adds	r3, #1
 8015ede:	3308      	adds	r3, #8
 8015ee0:	68fa      	ldr	r2, [r7, #12]
 8015ee2:	4413      	add	r3, r2
 8015ee4:	1d18      	adds	r0, r3, #4
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	1c59      	adds	r1, r3, #1
 8015eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	3b01      	subs	r3, #1
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	f007 fb8c 	bl	801d60e <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8015ef6:	7e7b      	ldrb	r3, [r7, #25]
 8015ef8:	68fa      	ldr	r2, [r7, #12]
 8015efa:	4413      	add	r3, r2
 8015efc:	7b19      	ldrb	r1, [r3, #12]
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	781a      	ldrb	r2, [r3, #0]
 8015f02:	7e7b      	ldrb	r3, [r7, #25]
 8015f04:	430a      	orrs	r2, r1
 8015f06:	b2d1      	uxtb	r1, r2
 8015f08:	68fa      	ldr	r2, [r7, #12]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	460a      	mov	r2, r1
 8015f0e:	731a      	strb	r2, [r3, #12]
 8015f10:	e00a      	b.n	8015f28 <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8015f12:	7e7b      	ldrb	r3, [r7, #25]
 8015f14:	3308      	adds	r3, #8
 8015f16:	68fa      	ldr	r2, [r7, #12]
 8015f18:	4413      	add	r3, r2
 8015f1a:	1d18      	adds	r0, r3, #4
 8015f1c:	6979      	ldr	r1, [r7, #20]
 8015f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	461a      	mov	r2, r3
 8015f24:	f007 fb73 	bl	801d60e <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 8015f28:	6979      	ldr	r1, [r7, #20]
 8015f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	461a      	mov	r2, r3
 8015f30:	6838      	ldr	r0, [r7, #0]
 8015f32:	f007 fb6c 	bl	801d60e <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2240      	movs	r2, #64	@ 0x40
 8015f3a:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f40:	7812      	ldrb	r2, [r2, #0]
 8015f42:	4413      	add	r3, r2
 8015f44:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 8015f46:	8a7b      	ldrh	r3, [r7, #18]
 8015f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f4a:	7812      	ldrb	r2, [r2, #0]
 8015f4c:	1a9b      	subs	r3, r3, r2
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	8a7a      	ldrh	r2, [r7, #18]
 8015f56:	4619      	mov	r1, r3
 8015f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f5a:	f007 fb58 	bl	801d60e <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 8015f5e:	8a7a      	ldrh	r2, [r7, #18]
 8015f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f62:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	7a9b      	ldrb	r3, [r3, #10]
 8015f68:	f043 0320 	orr.w	r3, r3, #32
 8015f6c:	b2da      	uxtb	r2, r3
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8015f7a:	2100      	movs	r1, #0
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7f7 f987 	bl	800d290 <phhalHw_Pn5180_Wait>
 8015f82:	4603      	mov	r3, r0
 8015f84:	83bb      	strh	r3, [r7, #28]
 8015f86:	8bbb      	ldrh	r3, [r7, #28]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d007      	beq.n	8015f9c <phpalSli15693_Sw_SendEof+0x3a6>
 8015f8c:	8bbb      	ldrh	r3, [r7, #28]
 8015f8e:	e006      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 8015f90:	8a7b      	ldrh	r3, [r7, #18]
 8015f92:	2b01      	cmp	r3, #1
 8015f94:	d002      	beq.n	8015f9c <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015f96:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015f9a:	e000      	b.n	8015f9e <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3720      	adds	r7, #32
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 8015fa6:	b580      	push	{r7, lr}
 8015fa8:	b088      	sub	sp, #32
 8015faa:	af02      	add	r7, sp, #8
 8015fac:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	7a9b      	ldrb	r3, [r3, #10]
 8015fba:	f023 0310 	bic.w	r3, r3, #16
 8015fbe:	b2da      	uxtb	r2, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	7a9b      	ldrb	r3, [r3, #10]
 8015fc8:	f043 0320 	orr.w	r3, r3, #32
 8015fcc:	b2da      	uxtb	r2, r3
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 8015fd2:	2325      	movs	r3, #37	@ 0x25
 8015fd4:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015fd6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8015fda:	2102      	movs	r1, #2
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f000 f967 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	82fb      	strh	r3, [r7, #22]
 8015fe6:	8afb      	ldrh	r3, [r7, #22]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d001      	beq.n	8015ff0 <phpalSli15693_Sw_Select+0x4a>
 8015fec:	8afb      	ldrh	r3, [r7, #22]
 8015fee:	e028      	b.n	8016042 <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 8015ff0:	f107 0214 	add.w	r2, r7, #20
 8015ff4:	f107 030e 	add.w	r3, r7, #14
 8015ff8:	9301      	str	r3, [sp, #4]
 8015ffa:	f107 0310 	add.w	r3, r7, #16
 8015ffe:	9300      	str	r3, [sp, #0]
 8016000:	2301      	movs	r3, #1
 8016002:	2100      	movs	r1, #0
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 f820 	bl	801604a <phpalSli15693_Sw_Exchange>
 801600a:	4603      	mov	r3, r0
 801600c:	82fb      	strh	r3, [r7, #22]
 801600e:	8afb      	ldrh	r3, [r7, #22]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d001      	beq.n	8016018 <phpalSli15693_Sw_Select+0x72>
 8016014:	8afb      	ldrh	r3, [r7, #22]
 8016016:	e014      	b.n	8016042 <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 8016018:	89fb      	ldrh	r3, [r7, #14]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d002      	beq.n	8016024 <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801601e:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016022:	e00e      	b.n	8016042 <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	7a9b      	ldrb	r3, [r3, #10]
 8016028:	f023 0320 	bic.w	r3, r3, #32
 801602c:	b2da      	uxtb	r2, r3
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	7a9b      	ldrb	r3, [r3, #10]
 8016036:	f043 0310 	orr.w	r3, r3, #16
 801603a:	b2da      	uxtb	r2, r3
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8016040:	2300      	movs	r3, #0
}
 8016042:	4618      	mov	r0, r3
 8016044:	3718      	adds	r7, #24
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}

0801604a <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 801604a:	b580      	push	{r7, lr}
 801604c:	b08a      	sub	sp, #40	@ 0x28
 801604e:	af02      	add	r7, sp, #8
 8016050:	60f8      	str	r0, [r7, #12]
 8016052:	607a      	str	r2, [r7, #4]
 8016054:	461a      	mov	r2, r3
 8016056:	460b      	mov	r3, r1
 8016058:	817b      	strh	r3, [r7, #10]
 801605a:	4613      	mov	r3, r2
 801605c:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 8016062:	2300      	movs	r3, #0
 8016064:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	7a9b      	ldrb	r3, [r3, #10]
 801606a:	f003 0304 	and.w	r3, r3, #4
 801606e:	2b00      	cmp	r3, #0
 8016070:	d10c      	bne.n	801608c <phpalSli15693_Sw_Exchange+0x42>
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	7a9b      	ldrb	r3, [r3, #10]
 8016076:	f003 0320 	and.w	r3, r3, #32
 801607a:	2b00      	cmp	r3, #0
 801607c:	d006      	beq.n	801608c <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	7d1b      	ldrb	r3, [r3, #20]
 8016082:	2b40      	cmp	r3, #64	@ 0x40
 8016084:	d002      	beq.n	801608c <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 8016086:	f640 2325 	movw	r3, #2597	@ 0xa25
 801608a:	e0f0      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 801608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801608e:	2b00      	cmp	r3, #0
 8016090:	d102      	bne.n	8016098 <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 8016092:	f107 0310 	add.w	r3, r7, #16
 8016096:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 8016098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801609a:	2b00      	cmp	r3, #0
 801609c:	d102      	bne.n	80160a4 <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 801609e:	f107 0316 	add.w	r3, r7, #22
 80160a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 80160a4:	897b      	ldrh	r3, [r7, #10]
 80160a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f040 8086 	bne.w	80161bc <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 80160b0:	8bfb      	ldrh	r3, [r7, #30]
 80160b2:	1c5a      	adds	r2, r3, #1
 80160b4:	83fa      	strh	r2, [r7, #30]
 80160b6:	4619      	mov	r1, r3
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	7a9a      	ldrb	r2, [r3, #10]
 80160bc:	f101 0320 	add.w	r3, r1, #32
 80160c0:	443b      	add	r3, r7
 80160c2:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 80160c6:	8bfb      	ldrh	r3, [r7, #30]
 80160c8:	1c5a      	adds	r2, r3, #1
 80160ca:	83fa      	strh	r2, [r7, #30]
 80160cc:	4619      	mov	r1, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	781a      	ldrb	r2, [r3, #0]
 80160d2:	f101 0320 	add.w	r3, r1, #32
 80160d6:	443b      	add	r3, r7
 80160d8:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	2b9f      	cmp	r3, #159	@ 0x9f
 80160e2:	d90f      	bls.n	8016104 <phpalSli15693_Sw_Exchange+0xba>
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	2bdf      	cmp	r3, #223	@ 0xdf
 80160ea:	d80b      	bhi.n	8016104 <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 80160ec:	8bfb      	ldrh	r3, [r7, #30]
 80160ee:	1c5a      	adds	r2, r3, #1
 80160f0:	83fa      	strh	r2, [r7, #30]
 80160f2:	4619      	mov	r1, r3
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	7e5a      	ldrb	r2, [r3, #25]
 80160f8:	f101 0320 	add.w	r3, r1, #32
 80160fc:	443b      	add	r3, r7
 80160fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8016102:	e017      	b.n	8016134 <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b3b      	cmp	r3, #59	@ 0x3b
 801610a:	d113      	bne.n	8016134 <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 801610c:	893b      	ldrh	r3, [r7, #8]
 801610e:	2b01      	cmp	r3, #1
 8016110:	d910      	bls.n	8016134 <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 8016112:	8bfb      	ldrh	r3, [r7, #30]
 8016114:	1c5a      	adds	r2, r3, #1
 8016116:	83fa      	strh	r2, [r7, #30]
 8016118:	4619      	mov	r1, r3
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	785a      	ldrb	r2, [r3, #1]
 801611e:	f101 0320 	add.w	r3, r1, #32
 8016122:	443b      	add	r3, r7
 8016124:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	3301      	adds	r3, #1
 801612c:	607b      	str	r3, [r7, #4]
               --wTxLength;
 801612e:	893b      	ldrh	r3, [r7, #8]
 8016130:	3b01      	subs	r3, #1
 8016132:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	6858      	ldr	r0, [r3, #4]
 8016138:	8bf9      	ldrh	r1, [r7, #30]
 801613a:	f107 0218 	add.w	r2, r7, #24
 801613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016140:	9301      	str	r3, [sp, #4]
 8016142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016144:	9300      	str	r3, [sp, #0]
 8016146:	460b      	mov	r3, r1
 8016148:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801614c:	f7f6 fda4 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 8016150:	4603      	mov	r3, r0
 8016152:	83bb      	strh	r3, [r7, #28]
 8016154:	8bbb      	ldrh	r3, [r7, #28]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d001      	beq.n	801615e <phpalSli15693_Sw_Exchange+0x114>
 801615a:	8bbb      	ldrh	r3, [r7, #28]
 801615c:	e087      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	3301      	adds	r3, #1
 8016162:	607b      	str	r3, [r7, #4]
        --wTxLength;
 8016164:	893b      	ldrh	r3, [r7, #8]
 8016166:	3b01      	subs	r3, #1
 8016168:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	7a9b      	ldrb	r3, [r3, #10]
 801616e:	f003 0304 	and.w	r3, r3, #4
 8016172:	2b00      	cmp	r3, #0
 8016174:	d11e      	bne.n	80161b4 <phpalSli15693_Sw_Exchange+0x16a>
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	7a9b      	ldrb	r3, [r3, #10]
 801617a:	f003 0320 	and.w	r3, r3, #32
 801617e:	2b00      	cmp	r3, #0
 8016180:	d018      	beq.n	80161b4 <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	7d5b      	ldrb	r3, [r3, #21]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d114      	bne.n	80161b4 <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	6858      	ldr	r0, [r3, #4]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f103 020c 	add.w	r2, r3, #12
 8016194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016196:	9301      	str	r3, [sp, #4]
 8016198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801619a:	9300      	str	r3, [sp, #0]
 801619c:	2308      	movs	r3, #8
 801619e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80161a2:	f7f6 fd79 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80161a6:	4603      	mov	r3, r0
 80161a8:	83bb      	strh	r3, [r7, #28]
 80161aa:	8bbb      	ldrh	r3, [r7, #28]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d001      	beq.n	80161b4 <phpalSli15693_Sw_Exchange+0x16a>
 80161b0:	8bbb      	ldrh	r3, [r7, #28]
 80161b2:	e05c      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 80161b4:	897b      	ldrh	r3, [r7, #10]
 80161b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80161ba:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	6858      	ldr	r0, [r3, #4]
 80161c0:	893a      	ldrh	r2, [r7, #8]
 80161c2:	8979      	ldrh	r1, [r7, #10]
 80161c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161c6:	9301      	str	r3, [sp, #4]
 80161c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ca:	9300      	str	r3, [sp, #0]
 80161cc:	4613      	mov	r3, r2
 80161ce:	687a      	ldr	r2, [r7, #4]
 80161d0:	f7f6 fd62 	bl	800cc98 <phhalHw_Pn5180_Exchange>
 80161d4:	4603      	mov	r3, r0
 80161d6:	83bb      	strh	r3, [r7, #28]
 80161d8:	8bbb      	ldrh	r3, [r7, #28]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d001      	beq.n	80161e2 <phpalSli15693_Sw_Exchange+0x198>
 80161de:	8bbb      	ldrh	r3, [r7, #28]
 80161e0:	e045      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 80161e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	db40      	blt.n	801626c <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 80161ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ec:	881b      	ldrh	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d102      	bne.n	80161f8 <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 80161f2:	f640 2306 	movw	r3, #2566	@ 0xa06
 80161f6:	e03a      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	2200      	movs	r2, #0
 80161fc:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 80161fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	f003 0301 	and.w	r3, r3, #1
 8016208:	2b00      	cmp	r3, #0
 801620a:	d019      	beq.n	8016240 <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	2201      	movs	r2, #1
 8016210:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 8016212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016214:	881b      	ldrh	r3, [r3, #0]
 8016216:	2b02      	cmp	r3, #2
 8016218:	d002      	beq.n	8016220 <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801621a:	f640 2306 	movw	r3, #2566	@ 0xa06
 801621e:	e026      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 8016220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	3301      	adds	r3, #1
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	461a      	mov	r2, r3
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 801622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016230:	2200      	movs	r2, #0
 8016232:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 8016234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016236:	2200      	movs	r2, #0
 8016238:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 801623a:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 801623e:	e016      	b.n	801626e <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 8016240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	461a      	mov	r2, r3
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 801624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	781a      	ldrb	r2, [r3, #0]
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 8016256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	1c5a      	adds	r2, r3, #1
 801625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801625e:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 8016260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016262:	881b      	ldrh	r3, [r3, #0]
 8016264:	3b01      	subs	r3, #1
 8016266:	b29a      	uxth	r2, r3
 8016268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801626a:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 801626c:	2300      	movs	r3, #0
}
 801626e:	4618      	mov	r0, r3
 8016270:	3720      	adds	r7, #32
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b084      	sub	sp, #16
 801627a:	af00      	add	r7, sp, #0
 801627c:	60f8      	str	r0, [r7, #12]
 801627e:	60b9      	str	r1, [r7, #8]
 8016280:	4613      	mov	r3, r2
 8016282:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 8016284:	79fb      	ldrb	r3, [r7, #7]
 8016286:	2b08      	cmp	r3, #8
 8016288:	d002      	beq.n	8016290 <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801628a:	f640 2321 	movw	r3, #2593	@ 0xa21
 801628e:	e00a      	b.n	80162a6 <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	330c      	adds	r3, #12
 8016294:	2208      	movs	r2, #8
 8016296:	68b9      	ldr	r1, [r7, #8]
 8016298:	4618      	mov	r0, r3
 801629a:	f007 f9b8 	bl	801d60e <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2240      	movs	r2, #64	@ 0x40
 80162a2:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 80162a4:	2300      	movs	r3, #0
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3710      	adds	r7, #16
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
	...

080162b0 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	460b      	mov	r3, r1
 80162ba:	807b      	strh	r3, [r7, #2]
 80162bc:	4613      	mov	r3, r2
 80162be:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 80162c0:	887b      	ldrh	r3, [r7, #2]
 80162c2:	2b0a      	cmp	r3, #10
 80162c4:	f200 81b9 	bhi.w	801663a <phpalSli15693_Sw_SetConfig+0x38a>
 80162c8:	a201      	add	r2, pc, #4	@ (adr r2, 80162d0 <phpalSli15693_Sw_SetConfig+0x20>)
 80162ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162ce:	bf00      	nop
 80162d0:	080162fd 	.word	0x080162fd
 80162d4:	0801663b 	.word	0x0801663b
 80162d8:	080163fb 	.word	0x080163fb
 80162dc:	08016467 	.word	0x08016467
 80162e0:	08016533 	.word	0x08016533
 80162e4:	080165a7 	.word	0x080165a7
 80162e8:	080164ad 	.word	0x080164ad
 80162ec:	08016529 	.word	0x08016529
 80162f0:	0801660f 	.word	0x0801660f
 80162f4:	08016627 	.word	0x08016627
 80162f8:	08016631 	.word	0x08016631
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	f107 020c 	add.w	r2, r7, #12
 8016304:	210f      	movs	r1, #15
 8016306:	4618      	mov	r0, r3
 8016308:	f7f8 fce4 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 801630c:	4603      	mov	r3, r0
 801630e:	81fb      	strh	r3, [r7, #14]
 8016310:	89fb      	ldrh	r3, [r7, #14]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d001      	beq.n	801631a <phpalSli15693_Sw_SetConfig+0x6a>
 8016316:	89fb      	ldrh	r3, [r7, #14]
 8016318:	e19c      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 801631a:	883b      	ldrh	r3, [r7, #0]
 801631c:	f003 0301 	and.w	r3, r3, #1
 8016320:	2b00      	cmp	r3, #0
 8016322:	d017      	beq.n	8016354 <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	7d9b      	ldrb	r3, [r3, #22]
 8016328:	2b02      	cmp	r3, #2
 801632a:	d102      	bne.n	8016332 <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801632c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016330:	e190      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 8016332:	89bb      	ldrh	r3, [r7, #12]
 8016334:	2b01      	cmp	r3, #1
 8016336:	d01e      	beq.n	8016376 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	2201      	movs	r2, #1
 801633e:	210f      	movs	r1, #15
 8016340:	4618      	mov	r0, r3
 8016342:	f7f7 f879 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016346:	4603      	mov	r3, r0
 8016348:	81fb      	strh	r3, [r7, #14]
 801634a:	89fb      	ldrh	r3, [r7, #14]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d012      	beq.n	8016376 <phpalSli15693_Sw_SetConfig+0xc6>
 8016350:	89fb      	ldrh	r3, [r7, #14]
 8016352:	e17f      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 8016354:	89bb      	ldrh	r3, [r7, #12]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00d      	beq.n	8016376 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	2200      	movs	r2, #0
 8016360:	210f      	movs	r1, #15
 8016362:	4618      	mov	r0, r3
 8016364:	f7f7 f868 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016368:	4603      	mov	r3, r0
 801636a:	81fb      	strh	r3, [r7, #14]
 801636c:	89fb      	ldrh	r3, [r7, #14]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d001      	beq.n	8016376 <phpalSli15693_Sw_SetConfig+0xc6>
 8016372:	89fb      	ldrh	r3, [r7, #14]
 8016374:	e16e      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	f107 020c 	add.w	r2, r7, #12
 801637e:	210a      	movs	r1, #10
 8016380:	4618      	mov	r0, r3
 8016382:	f7f8 fca7 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8016386:	4603      	mov	r3, r0
 8016388:	81fb      	strh	r3, [r7, #14]
 801638a:	89fb      	ldrh	r3, [r7, #14]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d001      	beq.n	8016394 <phpalSli15693_Sw_SetConfig+0xe4>
 8016390:	89fb      	ldrh	r3, [r7, #14]
 8016392:	e15f      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016394:	883b      	ldrh	r3, [r7, #0]
 8016396:	f003 0302 	and.w	r3, r3, #2
 801639a:	2b00      	cmp	r3, #0
 801639c:	d117      	bne.n	80163ce <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	7d9b      	ldrb	r3, [r3, #22]
 80163a2:	2b02      	cmp	r3, #2
 80163a4:	d102      	bne.n	80163ac <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80163a6:	f640 2321 	movw	r3, #2593	@ 0xa21
 80163aa:	e153      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 80163ac:	89bb      	ldrh	r3, [r7, #12]
 80163ae:	2b0c      	cmp	r3, #12
 80163b0:	d01e      	beq.n	80163f0 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	220c      	movs	r2, #12
 80163b8:	210a      	movs	r1, #10
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7f7 f83c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80163c0:	4603      	mov	r3, r0
 80163c2:	81fb      	strh	r3, [r7, #14]
 80163c4:	89fb      	ldrh	r3, [r7, #14]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d012      	beq.n	80163f0 <phpalSli15693_Sw_SetConfig+0x140>
 80163ca:	89fb      	ldrh	r3, [r7, #14]
 80163cc:	e142      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 80163ce:	89bb      	ldrh	r3, [r7, #12]
 80163d0:	2b0d      	cmp	r3, #13
 80163d2:	d00d      	beq.n	80163f0 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	685b      	ldr	r3, [r3, #4]
 80163d8:	220d      	movs	r2, #13
 80163da:	210a      	movs	r1, #10
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f7 f82b 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80163e2:	4603      	mov	r3, r0
 80163e4:	81fb      	strh	r3, [r7, #14]
 80163e6:	89fb      	ldrh	r3, [r7, #14]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <phpalSli15693_Sw_SetConfig+0x140>
 80163ec:	89fb      	ldrh	r3, [r7, #14]
 80163ee:	e131      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 80163f0:	883b      	ldrh	r3, [r7, #0]
 80163f2:	b2da      	uxtb	r2, r3
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	729a      	strb	r2, [r3, #10]

        break;
 80163f8:	e12b      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 80163fa:	883b      	ldrh	r3, [r7, #0]
 80163fc:	333c      	adds	r3, #60	@ 0x3c
 80163fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016402:	d302      	bcc.n	801640a <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 8016404:	f640 2322 	movw	r3, #2594	@ 0xa22
 8016408:	e124      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 801640a:	883b      	ldrh	r3, [r7, #0]
 801640c:	333c      	adds	r3, #60	@ 0x3c
 801640e:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	f107 020c 	add.w	r2, r7, #12
 8016418:	210d      	movs	r1, #13
 801641a:	4618      	mov	r0, r3
 801641c:	f7f8 fc5a 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8016420:	4603      	mov	r3, r0
 8016422:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 8016424:	89fb      	ldrh	r3, [r7, #14]
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b00      	cmp	r3, #0
 801642a:	d103      	bne.n	8016434 <phpalSli15693_Sw_SetConfig+0x184>
 801642c:	89bb      	ldrh	r3, [r7, #12]
 801642e:	883a      	ldrh	r2, [r7, #0]
 8016430:	429a      	cmp	r2, r3
 8016432:	d103      	bne.n	801643c <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 8016434:	89fb      	ldrh	r3, [r7, #14]
 8016436:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 8016438:	2b22      	cmp	r3, #34	@ 0x22
 801643a:	d10d      	bne.n	8016458 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	883a      	ldrh	r2, [r7, #0]
 8016442:	210d      	movs	r1, #13
 8016444:	4618      	mov	r0, r3
 8016446:	f7f6 fff7 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801644a:	4603      	mov	r3, r0
 801644c:	81fb      	strh	r3, [r7, #14]
 801644e:	89fb      	ldrh	r3, [r7, #14]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d007      	beq.n	8016464 <phpalSli15693_Sw_SetConfig+0x1b4>
 8016454:	89fb      	ldrh	r3, [r7, #14]
 8016456:	e0fd      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 8016458:	89fb      	ldrh	r3, [r7, #14]
 801645a:	2b00      	cmp	r3, #0
 801645c:	f000 80f0 	beq.w	8016640 <phpalSli15693_Sw_SetConfig+0x390>
 8016460:	89fb      	ldrh	r3, [r7, #14]
 8016462:	e0f7      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 8016464:	e0ec      	b.n	8016640 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	f107 020c 	add.w	r2, r7, #12
 801646e:	210e      	movs	r1, #14
 8016470:	4618      	mov	r0, r3
 8016472:	f7f8 fc2f 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8016476:	4603      	mov	r3, r0
 8016478:	81fb      	strh	r3, [r7, #14]
 801647a:	89fb      	ldrh	r3, [r7, #14]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d001      	beq.n	8016484 <phpalSli15693_Sw_SetConfig+0x1d4>
 8016480:	89fb      	ldrh	r3, [r7, #14]
 8016482:	e0e7      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 8016484:	89bb      	ldrh	r3, [r7, #12]
 8016486:	883a      	ldrh	r2, [r7, #0]
 8016488:	429a      	cmp	r2, r3
 801648a:	f000 80db 	beq.w	8016644 <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	883a      	ldrh	r2, [r7, #0]
 8016494:	210e      	movs	r1, #14
 8016496:	4618      	mov	r0, r3
 8016498:	f7f6 ffce 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 801649c:	4603      	mov	r3, r0
 801649e:	81fb      	strh	r3, [r7, #14]
 80164a0:	89fb      	ldrh	r3, [r7, #14]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	f000 80ce 	beq.w	8016644 <phpalSli15693_Sw_SetConfig+0x394>
 80164a8:	89fb      	ldrh	r3, [r7, #14]
 80164aa:	e0d3      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 80164ac:	883b      	ldrh	r3, [r7, #0]
 80164ae:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 80164b2:	d006      	beq.n	80164c2 <phpalSli15693_Sw_SetConfig+0x212>
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	7d9b      	ldrb	r3, [r3, #22]
 80164b8:	2b02      	cmp	r3, #2
 80164ba:	d102      	bne.n	80164c2 <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80164bc:	f640 2321 	movw	r3, #2593	@ 0xa21
 80164c0:	e0c8      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	f107 020c 	add.w	r2, r7, #12
 80164ca:	210d      	movs	r1, #13
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7f8 fc01 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 80164d2:	4603      	mov	r3, r0
 80164d4:	81fb      	strh	r3, [r7, #14]
 80164d6:	89fb      	ldrh	r3, [r7, #14]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d001      	beq.n	80164e0 <phpalSli15693_Sw_SetConfig+0x230>
 80164dc:	89fb      	ldrh	r3, [r7, #14]
 80164de:	e0b9      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 80164e0:	89bb      	ldrh	r3, [r7, #12]
 80164e2:	883a      	ldrh	r2, [r7, #0]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	f000 80af 	beq.w	8016648 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	6858      	ldr	r0, [r3, #4]
 80164ee:	883b      	ldrh	r3, [r7, #0]
 80164f0:	3b0a      	subs	r3, #10
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	461a      	mov	r2, r3
 80164f6:	2106      	movs	r1, #6
 80164f8:	f7f6 ff9e 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 80164fc:	4603      	mov	r3, r0
 80164fe:	81fb      	strh	r3, [r7, #14]
 8016500:	89fb      	ldrh	r3, [r7, #14]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <phpalSli15693_Sw_SetConfig+0x25a>
 8016506:	89fb      	ldrh	r3, [r7, #14]
 8016508:	e0a4      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	883a      	ldrh	r2, [r7, #0]
 8016510:	210d      	movs	r1, #13
 8016512:	4618      	mov	r0, r3
 8016514:	f7f6 ff90 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016518:	4603      	mov	r3, r0
 801651a:	81fb      	strh	r3, [r7, #14]
 801651c:	89fb      	ldrh	r3, [r7, #14]
 801651e:	2b00      	cmp	r3, #0
 8016520:	f000 8092 	beq.w	8016648 <phpalSli15693_Sw_SetConfig+0x398>
 8016524:	89fb      	ldrh	r3, [r7, #14]
 8016526:	e095      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 8016528:	883b      	ldrh	r3, [r7, #0]
 801652a:	b2da      	uxtb	r2, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	75da      	strb	r2, [r3, #23]
        break;
 8016530:	e08f      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	7d9b      	ldrb	r3, [r3, #22]
 8016536:	2b02      	cmp	r3, #2
 8016538:	d105      	bne.n	8016546 <phpalSli15693_Sw_SetConfig+0x296>
 801653a:	883b      	ldrh	r3, [r7, #0]
 801653c:	2b1a      	cmp	r3, #26
 801653e:	d002      	beq.n	8016546 <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016540:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016544:	e086      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 8016546:	883b      	ldrh	r3, [r7, #0]
 8016548:	2b1d      	cmp	r3, #29
 801654a:	d902      	bls.n	8016552 <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801654c:	f640 2323 	movw	r3, #2595	@ 0xa23
 8016550:	e080      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 8016552:	883b      	ldrh	r3, [r7, #0]
 8016554:	3b1a      	subs	r3, #26
 8016556:	2b03      	cmp	r3, #3
 8016558:	d816      	bhi.n	8016588 <phpalSli15693_Sw_SetConfig+0x2d8>
 801655a:	a201      	add	r2, pc, #4	@ (adr r2, 8016560 <phpalSli15693_Sw_SetConfig+0x2b0>)
 801655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016560:	08016571 	.word	0x08016571
 8016564:	08016577 	.word	0x08016577
 8016568:	0801657d 	.word	0x0801657d
 801656c:	08016583 	.word	0x08016583
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 8016570:	230b      	movs	r3, #11
 8016572:	803b      	strh	r3, [r7, #0]
            break;
 8016574:	e009      	b.n	801658a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 8016576:	231b      	movs	r3, #27
 8016578:	803b      	strh	r3, [r7, #0]
            break;
 801657a:	e006      	b.n	801658a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801657c:	2300      	movs	r3, #0
 801657e:	803b      	strh	r3, [r7, #0]
            break;
 8016580:	e003      	b.n	801658a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 8016582:	2301      	movs	r3, #1
 8016584:	803b      	strh	r3, [r7, #0]
            break;
 8016586:	e000      	b.n	801658a <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 8016588:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	883a      	ldrh	r2, [r7, #0]
 8016590:	2109      	movs	r1, #9
 8016592:	4618      	mov	r0, r3
 8016594:	f7f6 ff50 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016598:	4603      	mov	r3, r0
 801659a:	81fb      	strh	r3, [r7, #14]
 801659c:	89fb      	ldrh	r3, [r7, #14]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d054      	beq.n	801664c <phpalSli15693_Sw_SetConfig+0x39c>
 80165a2:	89fb      	ldrh	r3, [r7, #14]
 80165a4:	e056      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	7d9b      	ldrb	r3, [r3, #22]
 80165aa:	2b02      	cmp	r3, #2
 80165ac:	d105      	bne.n	80165ba <phpalSli15693_Sw_SetConfig+0x30a>
 80165ae:	883b      	ldrh	r3, [r7, #0]
 80165b0:	2b1a      	cmp	r3, #26
 80165b2:	d002      	beq.n	80165ba <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80165b4:	f640 2321 	movw	r3, #2593	@ 0xa21
 80165b8:	e04c      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 80165ba:	883b      	ldrh	r3, [r7, #0]
 80165bc:	3b1a      	subs	r3, #26
 80165be:	2b03      	cmp	r3, #3
 80165c0:	d816      	bhi.n	80165f0 <phpalSli15693_Sw_SetConfig+0x340>
 80165c2:	a201      	add	r2, pc, #4	@ (adr r2, 80165c8 <phpalSli15693_Sw_SetConfig+0x318>)
 80165c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165c8:	080165d9 	.word	0x080165d9
 80165cc:	080165df 	.word	0x080165df
 80165d0:	080165e5 	.word	0x080165e5
 80165d4:	080165eb 	.word	0x080165eb
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 80165d8:	230d      	movs	r3, #13
 80165da:	803b      	strh	r3, [r7, #0]
            break;
 80165dc:	e009      	b.n	80165f2 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 80165de:	230f      	movs	r3, #15
 80165e0:	803b      	strh	r3, [r7, #0]
            break;
 80165e2:	e006      	b.n	80165f2 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 80165e4:	2300      	movs	r3, #0
 80165e6:	803b      	strh	r3, [r7, #0]
            break;
 80165e8:	e003      	b.n	80165f2 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 80165ea:	2301      	movs	r3, #1
 80165ec:	803b      	strh	r3, [r7, #0]
            break;
 80165ee:	e000      	b.n	80165f2 <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 80165f0:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	685b      	ldr	r3, [r3, #4]
 80165f6:	883a      	ldrh	r2, [r7, #0]
 80165f8:	210a      	movs	r1, #10
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7f6 ff1c 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016600:	4603      	mov	r3, r0
 8016602:	81fb      	strh	r3, [r7, #14]
 8016604:	89fb      	ldrh	r3, [r7, #14]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d022      	beq.n	8016650 <phpalSli15693_Sw_SetConfig+0x3a0>
 801660a:	89fb      	ldrh	r3, [r7, #14]
 801660c:	e022      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	7e1b      	ldrb	r3, [r3, #24]
 8016612:	2b05      	cmp	r3, #5
 8016614:	d902      	bls.n	801661c <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016616:	f640 2321 	movw	r3, #2593	@ 0xa21
 801661a:	e01b      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 801661c:	883b      	ldrh	r3, [r7, #0]
 801661e:	b2da      	uxtb	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	761a      	strb	r2, [r3, #24]
            break;
 8016624:	e015      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 8016626:	883b      	ldrh	r3, [r7, #0]
 8016628:	b2da      	uxtb	r2, r3
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	765a      	strb	r2, [r3, #25]
            break;
 801662e:	e010      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 8016630:	883b      	ldrh	r3, [r7, #0]
 8016632:	b2da      	uxtb	r2, r3
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	759a      	strb	r2, [r3, #22]
            break;
 8016638:	e00b      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801663a:	f640 2323 	movw	r3, #2595	@ 0xa23
 801663e:	e009      	b.n	8016654 <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 8016640:	bf00      	nop
 8016642:	e006      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 8016644:	bf00      	nop
 8016646:	e004      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 8016648:	bf00      	nop
 801664a:	e002      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801664c:	bf00      	nop
 801664e:	e000      	b.n	8016652 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 8016650:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8016652:	2300      	movs	r3, #0
}
 8016654:	4618      	mov	r0, r3
 8016656:	3710      	adds	r7, #16
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b086      	sub	sp, #24
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	460b      	mov	r3, r1
 8016666:	607a      	str	r2, [r7, #4]
 8016668:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 801666a:	897b      	ldrh	r3, [r7, #10]
 801666c:	2b0a      	cmp	r3, #10
 801666e:	f200 8115 	bhi.w	801689c <phpalSli15693_Sw_GetConfig+0x240>
 8016672:	a201      	add	r2, pc, #4	@ (adr r2, 8016678 <phpalSli15693_Sw_GetConfig+0x1c>)
 8016674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016678:	080166a5 	.word	0x080166a5
 801667c:	080166b1 	.word	0x080166b1
 8016680:	080166bb 	.word	0x080166bb
 8016684:	080166e5 	.word	0x080166e5
 8016688:	08016703 	.word	0x08016703
 801668c:	080167c1 	.word	0x080167c1
 8016690:	08016851 	.word	0x08016851
 8016694:	0801686d 	.word	0x0801686d
 8016698:	08016879 	.word	0x08016879
 801669c:	08016885 	.word	0x08016885
 80166a0:	08016891 	.word	0x08016891
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	7a9b      	ldrb	r3, [r3, #10]
 80166a8:	461a      	mov	r2, r3
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	801a      	strh	r2, [r3, #0]
        break;
 80166ae:	e0fb      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	891a      	ldrh	r2, [r3, #8]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	801a      	strh	r2, [r3, #0]
        break;
 80166b8:	e0f6      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	685b      	ldr	r3, [r3, #4]
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	210d      	movs	r1, #13
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7f8 fb06 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 80166c8:	4603      	mov	r3, r0
 80166ca:	82fb      	strh	r3, [r7, #22]
 80166cc:	8afb      	ldrh	r3, [r7, #22]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d001      	beq.n	80166d6 <phpalSli15693_Sw_GetConfig+0x7a>
 80166d2:	8afb      	ldrh	r3, [r7, #22]
 80166d4:	e0e9      	b.n	80168aa <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	881b      	ldrh	r3, [r3, #0]
 80166da:	3b3c      	subs	r3, #60	@ 0x3c
 80166dc:	b29a      	uxth	r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	801a      	strh	r2, [r3, #0]
        break;
 80166e2:	e0e1      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	685b      	ldr	r3, [r3, #4]
 80166e8:	687a      	ldr	r2, [r7, #4]
 80166ea:	210e      	movs	r1, #14
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7f8 faf1 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 80166f2:	4603      	mov	r3, r0
 80166f4:	82fb      	strh	r3, [r7, #22]
 80166f6:	8afb      	ldrh	r3, [r7, #22]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f000 80d2 	beq.w	80168a2 <phpalSli15693_Sw_GetConfig+0x246>
 80166fe:	8afb      	ldrh	r3, [r7, #22]
 8016700:	e0d3      	b.n	80168aa <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	2109      	movs	r1, #9
 801670a:	4618      	mov	r0, r3
 801670c:	f7f8 fae2 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8016710:	4603      	mov	r3, r0
 8016712:	82fb      	strh	r3, [r7, #22]
 8016714:	8afb      	ldrh	r3, [r7, #22]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d001      	beq.n	801671e <phpalSli15693_Sw_GetConfig+0xc2>
 801671a:	8afb      	ldrh	r3, [r7, #22]
 801671c:	e0c5      	b.n	80168aa <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	881b      	ldrh	r3, [r3, #0]
 8016722:	2b1b      	cmp	r3, #27
 8016724:	d84a      	bhi.n	80167bc <phpalSli15693_Sw_GetConfig+0x160>
 8016726:	a201      	add	r2, pc, #4	@ (adr r2, 801672c <phpalSli15693_Sw_GetConfig+0xd0>)
 8016728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801672c:	080167ad 	.word	0x080167ad
 8016730:	080167b5 	.word	0x080167b5
 8016734:	080167bd 	.word	0x080167bd
 8016738:	080167bd 	.word	0x080167bd
 801673c:	080167bd 	.word	0x080167bd
 8016740:	080167bd 	.word	0x080167bd
 8016744:	080167bd 	.word	0x080167bd
 8016748:	080167bd 	.word	0x080167bd
 801674c:	080167bd 	.word	0x080167bd
 8016750:	080167bd 	.word	0x080167bd
 8016754:	080167bd 	.word	0x080167bd
 8016758:	0801679d 	.word	0x0801679d
 801675c:	080167bd 	.word	0x080167bd
 8016760:	080167bd 	.word	0x080167bd
 8016764:	080167bd 	.word	0x080167bd
 8016768:	080167bd 	.word	0x080167bd
 801676c:	080167bd 	.word	0x080167bd
 8016770:	080167bd 	.word	0x080167bd
 8016774:	080167bd 	.word	0x080167bd
 8016778:	080167bd 	.word	0x080167bd
 801677c:	080167bd 	.word	0x080167bd
 8016780:	080167bd 	.word	0x080167bd
 8016784:	080167bd 	.word	0x080167bd
 8016788:	080167bd 	.word	0x080167bd
 801678c:	080167bd 	.word	0x080167bd
 8016790:	080167bd 	.word	0x080167bd
 8016794:	080167bd 	.word	0x080167bd
 8016798:	080167a5 	.word	0x080167a5
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	221a      	movs	r2, #26
 80167a0:	801a      	strh	r2, [r3, #0]
            break;
 80167a2:	e00c      	b.n	80167be <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	221b      	movs	r2, #27
 80167a8:	801a      	strh	r2, [r3, #0]
            break;
 80167aa:	e008      	b.n	80167be <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	221c      	movs	r2, #28
 80167b0:	801a      	strh	r2, [r3, #0]
            break;
 80167b2:	e004      	b.n	80167be <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	221d      	movs	r2, #29
 80167b8:	801a      	strh	r2, [r3, #0]
            break;
 80167ba:	e000      	b.n	80167be <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 80167bc:	bf00      	nop
        }
        break;
 80167be:	e073      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	210a      	movs	r1, #10
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7f8 fa83 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 80167ce:	4603      	mov	r3, r0
 80167d0:	82fb      	strh	r3, [r7, #22]
 80167d2:	8afb      	ldrh	r3, [r7, #22]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d001      	beq.n	80167dc <phpalSli15693_Sw_GetConfig+0x180>
 80167d8:	8afb      	ldrh	r3, [r7, #22]
 80167da:	e066      	b.n	80168aa <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	881b      	ldrh	r3, [r3, #0]
 80167e0:	2b0f      	cmp	r3, #15
 80167e2:	d833      	bhi.n	801684c <phpalSli15693_Sw_GetConfig+0x1f0>
 80167e4:	a201      	add	r2, pc, #4	@ (adr r2, 80167ec <phpalSli15693_Sw_GetConfig+0x190>)
 80167e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167ea:	bf00      	nop
 80167ec:	0801683d 	.word	0x0801683d
 80167f0:	08016845 	.word	0x08016845
 80167f4:	0801684d 	.word	0x0801684d
 80167f8:	0801684d 	.word	0x0801684d
 80167fc:	0801684d 	.word	0x0801684d
 8016800:	0801684d 	.word	0x0801684d
 8016804:	0801684d 	.word	0x0801684d
 8016808:	0801684d 	.word	0x0801684d
 801680c:	0801684d 	.word	0x0801684d
 8016810:	0801684d 	.word	0x0801684d
 8016814:	0801684d 	.word	0x0801684d
 8016818:	0801684d 	.word	0x0801684d
 801681c:	0801684d 	.word	0x0801684d
 8016820:	0801682d 	.word	0x0801682d
 8016824:	0801684d 	.word	0x0801684d
 8016828:	08016835 	.word	0x08016835
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	221a      	movs	r2, #26
 8016830:	801a      	strh	r2, [r3, #0]
            break;
 8016832:	e00c      	b.n	801684e <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	221b      	movs	r2, #27
 8016838:	801a      	strh	r2, [r3, #0]
            break;
 801683a:	e008      	b.n	801684e <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	221c      	movs	r2, #28
 8016840:	801a      	strh	r2, [r3, #0]
            break;
 8016842:	e004      	b.n	801684e <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	221d      	movs	r2, #29
 8016848:	801a      	strh	r2, [r3, #0]
            break;
 801684a:	e000      	b.n	801684e <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 801684c:	bf00      	nop
        }
        break;
 801684e:	e02b      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	210d      	movs	r1, #13
 8016858:	4618      	mov	r0, r3
 801685a:	f7f8 fa3b 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 801685e:	4603      	mov	r3, r0
 8016860:	82fb      	strh	r3, [r7, #22]
 8016862:	8afb      	ldrh	r3, [r7, #22]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d01e      	beq.n	80168a6 <phpalSli15693_Sw_GetConfig+0x24a>
 8016868:	8afb      	ldrh	r3, [r7, #22]
 801686a:	e01e      	b.n	80168aa <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	7ddb      	ldrb	r3, [r3, #23]
 8016870:	461a      	mov	r2, r3
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	801a      	strh	r2, [r3, #0]
        break;
 8016876:	e017      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	7e1b      	ldrb	r3, [r3, #24]
 801687c:	461a      	mov	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	801a      	strh	r2, [r3, #0]
        break;
 8016882:	e011      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	7e5b      	ldrb	r3, [r3, #25]
 8016888:	461a      	mov	r2, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	801a      	strh	r2, [r3, #0]
        break;
 801688e:	e00b      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	7d9b      	ldrb	r3, [r3, #22]
 8016894:	461a      	mov	r2, r3
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	801a      	strh	r2, [r3, #0]
        break;
 801689a:	e005      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801689c:	f640 2323 	movw	r3, #2595	@ 0xa23
 80168a0:	e003      	b.n	80168aa <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 80168a2:	bf00      	nop
 80168a4:	e000      	b.n	80168a8 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 80168a6:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80168a8:	2300      	movs	r3, #0
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3718      	adds	r7, #24
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
 80168b2:	bf00      	nop

080168b4 <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b08e      	sub	sp, #56	@ 0x38
 80168b8:	af0c      	add	r7, sp, #48	@ 0x30
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	4608      	mov	r0, r1
 80168be:	4611      	mov	r1, r2
 80168c0:	461a      	mov	r2, r3
 80168c2:	4603      	mov	r3, r0
 80168c4:	70fb      	strb	r3, [r7, #3]
 80168c6:	460b      	mov	r3, r1
 80168c8:	70bb      	strb	r3, [r7, #2]
 80168ca:	4613      	mov	r3, r2
 80168cc:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 80168ce:	7878      	ldrb	r0, [r7, #1]
 80168d0:	78ba      	ldrb	r2, [r7, #2]
 80168d2:	78f9      	ldrb	r1, [r7, #3]
 80168d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168da:	930a      	str	r3, [sp, #40]	@ 0x28
 80168dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168de:	9309      	str	r3, [sp, #36]	@ 0x24
 80168e0:	6a3b      	ldr	r3, [r7, #32]
 80168e2:	9308      	str	r3, [sp, #32]
 80168e4:	2300      	movs	r3, #0
 80168e6:	9307      	str	r3, [sp, #28]
 80168e8:	8bbb      	ldrh	r3, [r7, #28]
 80168ea:	9306      	str	r3, [sp, #24]
 80168ec:	7e3b      	ldrb	r3, [r7, #24]
 80168ee:	9305      	str	r3, [sp, #20]
 80168f0:	7d3b      	ldrb	r3, [r7, #20]
 80168f2:	9304      	str	r3, [sp, #16]
 80168f4:	693b      	ldr	r3, [r7, #16]
 80168f6:	9303      	str	r3, [sp, #12]
 80168f8:	2300      	movs	r3, #0
 80168fa:	9302      	str	r3, [sp, #8]
 80168fc:	2300      	movs	r3, #0
 80168fe:	9301      	str	r3, [sp, #4]
 8016900:	2300      	movs	r3, #0
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	4603      	mov	r3, r0
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 f805 	bl	8016916 <phpalSli15693_Sw_InventoryExt>
 801690c:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 801690e:	4618      	mov	r0, r3
 8016910:	3708      	adds	r7, #8
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}

08016916 <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 8016916:	b580      	push	{r7, lr}
 8016918:	b090      	sub	sp, #64	@ 0x40
 801691a:	af02      	add	r7, sp, #8
 801691c:	6078      	str	r0, [r7, #4]
 801691e:	4608      	mov	r0, r1
 8016920:	4611      	mov	r1, r2
 8016922:	461a      	mov	r2, r3
 8016924:	4603      	mov	r3, r0
 8016926:	70fb      	strb	r3, [r7, #3]
 8016928:	460b      	mov	r3, r1
 801692a:	70bb      	strb	r3, [r7, #2]
 801692c:	4613      	mov	r3, r2
 801692e:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 8016930:	2300      	movs	r3, #0
 8016932:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 8016936:	2300      	movs	r3, #0
 8016938:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801693c:	2300      	movs	r3, #0
 801693e:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016940:	2300      	movs	r3, #0
 8016942:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 8016944:	2300      	movs	r3, #0
 8016946:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 801694a:	2300      	movs	r3, #0
 801694c:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 801694e:	2300      	movs	r3, #0
 8016950:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 8016952:	2300      	movs	r3, #0
 8016954:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 8016956:	2300      	movs	r3, #0
 8016958:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 801695a:	2300      	movs	r3, #0
 801695c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 801695e:	2300      	movs	r3, #0
 8016960:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 8016964:	2300      	movs	r3, #0
 8016966:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2200      	movs	r2, #0
 801696e:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 8016970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016972:	2b00      	cmp	r3, #0
 8016974:	d00e      	beq.n	8016994 <phpalSli15693_Sw_InventoryExt+0x7e>
 8016976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016978:	2b00      	cmp	r3, #0
 801697a:	d00b      	beq.n	8016994 <phpalSli15693_Sw_InventoryExt+0x7e>
 801697c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016980:	f003 0310 	and.w	r3, r3, #16
 8016984:	2b00      	cmp	r3, #0
 8016986:	d008      	beq.n	801699a <phpalSli15693_Sw_InventoryExt+0x84>
 8016988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801698a:	2b00      	cmp	r3, #0
 801698c:	d002      	beq.n	8016994 <phpalSli15693_Sw_InventoryExt+0x7e>
 801698e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016990:	2b00      	cmp	r3, #0
 8016992:	d102      	bne.n	801699a <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016994:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016998:	e334      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 801699a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801699e:	f003 0304 	and.w	r3, r3, #4
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d005      	beq.n	80169b2 <phpalSli15693_Sw_InventoryExt+0x9c>
 80169a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d102      	bne.n	80169b2 <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80169ac:	f640 2321 	movw	r3, #2593	@ 0xa21
 80169b0:	e328      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 80169b2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80169b6:	f003 0308 	and.w	r3, r3, #8
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d005      	beq.n	80169ca <phpalSli15693_Sw_InventoryExt+0xb4>
 80169be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d102      	bne.n	80169ca <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80169c4:	f640 2321 	movw	r3, #2593	@ 0xa21
 80169c8:	e31c      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 80169ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169cc:	2200      	movs	r2, #0
 80169ce:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 80169d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80169d2:	2200      	movs	r2, #0
 80169d4:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 80169d6:	78bb      	ldrb	r3, [r7, #2]
 80169d8:	f003 0320 	and.w	r3, r3, #32
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d003      	beq.n	80169e8 <phpalSli15693_Sw_InventoryExt+0xd2>
 80169e0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80169e4:	2b40      	cmp	r3, #64	@ 0x40
 80169e6:	d808      	bhi.n	80169fa <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 80169e8:	78bb      	ldrb	r3, [r7, #2]
 80169ea:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d106      	bne.n	8016a00 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 80169f2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80169f6:	2b3c      	cmp	r3, #60	@ 0x3c
 80169f8:	d902      	bls.n	8016a00 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80169fa:	f640 2321 	movw	r3, #2593	@ 0xa21
 80169fe:	e301      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016a00:	78fb      	ldrb	r3, [r7, #3]
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	d010      	beq.n	8016a28 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 8016a06:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d102      	bne.n	8016a14 <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016a0e:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016a12:	e2f7      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 8016a14:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8016a18:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016a1c:	4413      	add	r3, r2
 8016a1e:	2bff      	cmp	r3, #255	@ 0xff
 8016a20:	d902      	bls.n	8016a28 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016a22:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016a26:	e2ed      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 8016a28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016a2c:	1c5a      	adds	r2, r3, #1
 8016a2e:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016a32:	3338      	adds	r3, #56	@ 0x38
 8016a34:	443b      	add	r3, r7
 8016a36:	78fa      	ldrb	r2, [r7, #3]
 8016a38:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8016a3c:	78bb      	ldrb	r3, [r7, #2]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	461a      	mov	r2, r3
 8016a42:	2100      	movs	r1, #0
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7ff fc33 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016a4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d001      	beq.n	8016a58 <phpalSli15693_Sw_InventoryExt+0x142>
 8016a54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a56:	e2d5      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8016a58:	78fb      	ldrb	r3, [r7, #3]
 8016a5a:	2ba1      	cmp	r3, #161	@ 0xa1
 8016a5c:	d002      	beq.n	8016a64 <phpalSli15693_Sw_InventoryExt+0x14e>
 8016a5e:	78fb      	ldrb	r3, [r7, #3]
 8016a60:	2bb1      	cmp	r3, #177	@ 0xb1
 8016a62:	d120      	bne.n	8016aa6 <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016a64:	78bb      	ldrb	r3, [r7, #2]
 8016a66:	f003 0302 	and.w	r3, r3, #2
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d00d      	beq.n	8016a8a <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	685b      	ldr	r3, [r3, #4]
 8016a72:	220f      	movs	r2, #15
 8016a74:	210a      	movs	r1, #10
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7f6 fcde 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016a80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d00f      	beq.n	8016aa6 <phpalSli15693_Sw_InventoryExt+0x190>
 8016a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a88:	e2bc      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	685b      	ldr	r3, [r3, #4]
 8016a8e:	220e      	movs	r2, #14
 8016a90:	210a      	movs	r1, #10
 8016a92:	4618      	mov	r0, r3
 8016a94:	f7f6 fcd0 	bl	800d438 <phhalHw_Pn5180_SetConfig>
 8016a98:	4603      	mov	r3, r0
 8016a9a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016a9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d001      	beq.n	8016aa6 <phpalSli15693_Sw_InventoryExt+0x190>
 8016aa2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016aa4:	e2ae      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 8016aa6:	78bb      	ldrb	r3, [r7, #2]
 8016aa8:	f003 0310 	and.w	r3, r3, #16
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d00e      	beq.n	8016ace <phpalSli15693_Sw_InventoryExt+0x1b8>
 8016ab0:	78bb      	ldrb	r3, [r7, #2]
 8016ab2:	f003 0304 	and.w	r3, r3, #4
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d009      	beq.n	8016ace <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 8016aba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016abe:	1c5a      	adds	r2, r3, #1
 8016ac0:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016ac4:	3338      	adds	r3, #56	@ 0x38
 8016ac6:	443b      	add	r3, r7
 8016ac8:	787a      	ldrb	r2, [r7, #1]
 8016aca:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 8016ace:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d03b      	beq.n	8016b4e <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 8016ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ada:	1c5a      	adds	r2, r3, #1
 8016adc:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016ae6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016aea:	b2da      	uxtb	r2, r3
 8016aec:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016af0:	443b      	add	r3, r7
 8016af2:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 8016af6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016afa:	1c5a      	adds	r2, r3, #1
 8016afc:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016b00:	3338      	adds	r3, #56	@ 0x38
 8016b02:	443b      	add	r3, r7
 8016b04:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8016b08:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 8016b0c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016b10:	f003 0304 	and.w	r3, r3, #4
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d025      	beq.n	8016b64 <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 8016b18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016b1c:	1c5a      	adds	r2, r3, #1
 8016b1e:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016b22:	4619      	mov	r1, r3
 8016b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016b26:	781a      	ldrb	r2, [r3, #0]
 8016b28:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016b2c:	443b      	add	r3, r7
 8016b2e:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 8016b32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016b36:	1c5a      	adds	r2, r3, #1
 8016b38:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016b40:	785a      	ldrb	r2, [r3, #1]
 8016b42:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016b46:	443b      	add	r3, r7
 8016b48:	f803 2c24 	strb.w	r2, [r3, #-36]
 8016b4c:	e00a      	b.n	8016b64 <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 8016b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016b52:	1c5a      	adds	r2, r3, #1
 8016b54:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016b58:	3338      	adds	r3, #56	@ 0x38
 8016b5a:	443b      	add	r3, r7
 8016b5c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8016b60:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 8016b64:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016b68:	f003 0307 	and.w	r3, r3, #7
 8016b6c:	b2db      	uxtb	r3, r3
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d006      	beq.n	8016b80 <phpalSli15693_Sw_InventoryExt+0x26a>
 8016b72:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016b76:	08db      	lsrs	r3, r3, #3
 8016b78:	b2db      	uxtb	r3, r3
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	e003      	b.n	8016b88 <phpalSli15693_Sw_InventoryExt+0x272>
 8016b80:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016b84:	08db      	lsrs	r3, r3, #3
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	330c      	adds	r3, #12
 8016b90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016b94:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016b96:	4618      	mov	r0, r3
 8016b98:	f006 fd39 	bl	801d60e <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8016ba2:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 8016ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ba8:	f107 0214 	add.w	r2, r7, #20
 8016bac:	4413      	add	r3, r2
 8016bae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016bb2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f006 fd2a 	bl	801d60e <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 8016bba:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016bc2:	4413      	add	r3, r2
 8016bc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 8016bc8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016bcc:	f003 0307 	and.w	r3, r3, #7
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d019      	beq.n	8016c08 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 8016bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016bd8:	3b01      	subs	r3, #1
 8016bda:	3338      	adds	r3, #56	@ 0x38
 8016bdc:	443b      	add	r3, r7
 8016bde:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8016be2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016be6:	f003 0307 	and.w	r3, r3, #7
 8016bea:	f1c3 0308 	rsb	r3, r3, #8
 8016bee:	22ff      	movs	r2, #255	@ 0xff
 8016bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8016bf4:	b2da      	uxtb	r2, r3
 8016bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016bfa:	3b01      	subs	r3, #1
 8016bfc:	400a      	ands	r2, r1
 8016bfe:	b2d2      	uxtb	r2, r2
 8016c00:	3338      	adds	r3, #56	@ 0x38
 8016c02:	443b      	add	r3, r7
 8016c04:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	f107 020c 	add.w	r2, r7, #12
 8016c10:	210c      	movs	r1, #12
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7f8 f85e 	bl	800ecd4 <phhalHw_Pn5180_GetConfig>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016c1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d001      	beq.n	8016c26 <phpalSli15693_Sw_InventoryExt+0x310>
 8016c22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016c24:	e1ee      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 8016c26:	89bb      	ldrh	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d01f      	beq.n	8016c6c <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8016c2c:	78fb      	ldrb	r3, [r7, #3]
 8016c2e:	2ba1      	cmp	r3, #161	@ 0xa1
 8016c30:	d002      	beq.n	8016c38 <phpalSli15693_Sw_InventoryExt+0x322>
 8016c32:	78fb      	ldrb	r3, [r7, #3]
 8016c34:	2bb1      	cmp	r3, #177	@ 0xb1
 8016c36:	d10c      	bne.n	8016c52 <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c38:	78bb      	ldrb	r3, [r7, #2]
 8016c3a:	f003 0302 	and.w	r3, r3, #2
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d003      	beq.n	8016c4a <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 8016c42:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016c46:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c48:	e02f      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 8016c4a:	f240 2373 	movw	r3, #627	@ 0x273
 8016c4e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c50:	e02b      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c52:	78bb      	ldrb	r3, [r7, #2]
 8016c54:	f003 0302 	and.w	r3, r3, #2
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d003      	beq.n	8016c64 <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 8016c5c:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8016c60:	867b      	strh	r3, [r7, #50]	@ 0x32
 8016c62:	e022      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 8016c64:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8016c68:	867b      	strh	r3, [r7, #50]	@ 0x32
 8016c6a:	e01e      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8016c6c:	78fb      	ldrb	r3, [r7, #3]
 8016c6e:	2ba1      	cmp	r3, #161	@ 0xa1
 8016c70:	d002      	beq.n	8016c78 <phpalSli15693_Sw_InventoryExt+0x362>
 8016c72:	78fb      	ldrb	r3, [r7, #3]
 8016c74:	2bb1      	cmp	r3, #177	@ 0xb1
 8016c76:	d10c      	bne.n	8016c92 <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c78:	78bb      	ldrb	r3, [r7, #2]
 8016c7a:	f003 0302 	and.w	r3, r3, #2
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d003      	beq.n	8016c8a <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8016c82:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8016c86:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c88:	e00f      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 8016c8a:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 8016c8e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c90:	e00b      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016c92:	78bb      	ldrb	r3, [r7, #2]
 8016c94:	f003 0302 	and.w	r3, r3, #2
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d003      	beq.n	8016ca4 <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 8016c9c:	f241 039c 	movw	r3, #4252	@ 0x109c
 8016ca0:	867b      	strh	r3, [r7, #50]	@ 0x32
 8016ca2:	e002      	b.n	8016caa <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 8016ca4:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8016ca8:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8016caa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8016cac:	461a      	mov	r2, r3
 8016cae:	2102      	movs	r1, #2
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f7ff fafd 	bl	80162b0 <phpalSli15693_Sw_SetConfig>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016cba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <phpalSli15693_Sw_InventoryExt+0x3ae>
 8016cc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016cc2:	e19f      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 8016cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016cc8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	7ddb      	ldrb	r3, [r3, #23]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d016      	beq.n	8016d02 <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 8016cd4:	78bb      	ldrb	r3, [r7, #2]
 8016cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d001      	beq.n	8016ce2 <phpalSli15693_Sw_InventoryExt+0x3cc>
 8016cde:	2328      	movs	r3, #40	@ 0x28
 8016ce0:	e000      	b.n	8016ce4 <phpalSli15693_Sw_InventoryExt+0x3ce>
 8016ce2:	233c      	movs	r3, #60	@ 0x3c
 8016ce4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8016ce6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016ce8:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 8016cea:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016cee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d20c      	bcs.n	8016d0e <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 8016cf4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016cf8:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016d00:	e005      	b.n	8016d0e <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 8016d02:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016d06:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 8016d08:	2301      	movs	r3, #1
 8016d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	7a9b      	ldrb	r3, [r3, #10]
 8016d12:	f003 0304 	and.w	r3, r3, #4
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d107      	bne.n	8016d2a <phpalSli15693_Sw_InventoryExt+0x414>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	7a9b      	ldrb	r3, [r3, #10]
 8016d1e:	f003 0320 	and.w	r3, r3, #32
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d001      	beq.n	8016d2a <phpalSli15693_Sw_InventoryExt+0x414>
 8016d26:	2301      	movs	r3, #1
 8016d28:	e000      	b.n	8016d2c <phpalSli15693_Sw_InventoryExt+0x416>
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d002      	beq.n	8016d36 <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2201      	movs	r2, #1
 8016d34:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 8016d36:	2301      	movs	r3, #1
 8016d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016d3c:	78fb      	ldrb	r3, [r7, #3]
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d028      	beq.n	8016d94 <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 8016d42:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016d44:	3b01      	subs	r3, #1
 8016d46:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 8016d48:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d005      	beq.n	8016d5c <phpalSli15693_Sw_InventoryExt+0x446>
 8016d50:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016d54:	f003 0310 	and.w	r3, r3, #16
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d11b      	bne.n	8016d94 <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 8016d5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016d5e:	b2da      	uxtb	r2, r3
 8016d60:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016d64:	1c59      	adds	r1, r3, #1
 8016d66:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016d70:	4413      	add	r3, r2
 8016d72:	b2da      	uxtb	r2, r3
 8016d74:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016d78:	443b      	add	r3, r7
 8016d7a:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 8016d7e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016d82:	1c5a      	adds	r2, r3, #1
 8016d84:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 8016d88:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8016d8a:	b2d2      	uxtb	r2, r2
 8016d8c:	3338      	adds	r3, #56	@ 0x38
 8016d8e:	443b      	add	r3, r7
 8016d90:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 8016d94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016d98:	b299      	uxth	r1, r3
 8016d9a:	f107 0214 	add.w	r2, r7, #20
 8016d9e:	f107 030e 	add.w	r3, r7, #14
 8016da2:	9301      	str	r3, [sp, #4]
 8016da4:	f107 0310 	add.w	r3, r7, #16
 8016da8:	9300      	str	r3, [sp, #0]
 8016daa:	460b      	mov	r3, r1
 8016dac:	2100      	movs	r1, #0
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f7ff f94b 	bl	801604a <phpalSli15693_Sw_Exchange>
 8016db4:	4603      	mov	r3, r0
 8016db6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8016db8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016dba:	b2db      	uxtb	r3, r3
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d006      	beq.n	8016dce <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	7a9b      	ldrb	r3, [r3, #10]
 8016dc4:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8016dc8:	b2da      	uxtb	r2, r3
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 8016dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d001      	beq.n	8016dd8 <phpalSli15693_Sw_InventoryExt+0x4c2>
 8016dd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016dd6:	e115      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 8016dd8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d011      	beq.n	8016e04 <phpalSli15693_Sw_InventoryExt+0x4ee>
 8016de0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016de4:	f003 0308 	and.w	r3, r3, #8
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d00b      	beq.n	8016e04 <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 8016dec:	693b      	ldr	r3, [r7, #16]
 8016dee:	881b      	ldrh	r3, [r3, #0]
 8016df0:	b29a      	uxth	r2, r3
 8016df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016df4:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 8016df6:	693b      	ldr	r3, [r7, #16]
 8016df8:	3302      	adds	r3, #2
 8016dfa:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 8016dfc:	89fb      	ldrh	r3, [r7, #14]
 8016dfe:	3b02      	subs	r3, #2
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016e04:	78fb      	ldrb	r3, [r7, #3]
 8016e06:	2b01      	cmp	r3, #1
 8016e08:	d123      	bne.n	8016e52 <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 8016e0a:	89fb      	ldrh	r3, [r7, #14]
 8016e0c:	2b09      	cmp	r3, #9
 8016e0e:	d002      	beq.n	8016e16 <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016e10:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016e14:	e0f6      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	781a      	ldrb	r2, [r3, #0]
 8016e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016e1c:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 8016e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016e20:	2201      	movs	r2, #1
 8016e22:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	f103 000c 	add.w	r0, r3, #12
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	2208      	movs	r2, #8
 8016e30:	4619      	mov	r1, r3
 8016e32:	f006 fbec 	bl	801d60e <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2240      	movs	r2, #64	@ 0x40
 8016e3a:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	330c      	adds	r3, #12
 8016e40:	2208      	movs	r2, #8
 8016e42:	4619      	mov	r1, r3
 8016e44:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016e46:	f006 fbe2 	bl	801d60e <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8016e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016e4c:	2208      	movs	r2, #8
 8016e4e:	701a      	strb	r2, [r3, #0]
 8016e50:	e099      	b.n	8016f86 <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 8016e52:	78bb      	ldrb	r3, [r7, #2]
 8016e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	f000 8083 	beq.w	8016f64 <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8016e5e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016e62:	f1c3 0308 	rsb	r3, r3, #8
 8016e66:	b2da      	uxtb	r2, r3
 8016e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016e6a:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 8016e6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d018      	beq.n	8016ea6 <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	7d1b      	ldrb	r3, [r3, #20]
 8016e78:	08db      	lsrs	r3, r3, #3
 8016e7a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8016e7e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016e82:	f1c3 0308 	rsb	r3, r3, #8
 8016e86:	b2da      	uxtb	r2, r3
 8016e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016e8a:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 8016e8c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d008      	beq.n	8016ea6 <phpalSli15693_Sw_InventoryExt+0x590>
 8016e94:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016e98:	f003 0302 	and.w	r3, r3, #2
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d002      	beq.n	8016ea6 <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8016ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ea2:	2208      	movs	r2, #8
 8016ea4:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 8016ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ea8:	781b      	ldrb	r3, [r3, #0]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	89fb      	ldrh	r3, [r7, #14]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d902      	bls.n	8016eb8 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016eb2:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016eb6:	e0a5      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8016eb8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016ebc:	2b07      	cmp	r3, #7
 8016ebe:	d843      	bhi.n	8016f48 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 8016ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d102      	bne.n	8016ece <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016ec8:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016ecc:	e09a      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 8016ece:	6939      	ldr	r1, [r7, #16]
 8016ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	461a      	mov	r2, r3
 8016ed6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016ed8:	f006 fb99 	bl	801d60e <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 8016edc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016ee0:	f003 0307 	and.w	r3, r3, #7
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d022      	beq.n	8016f30 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 8016eea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016eee:	2b06      	cmp	r3, #6
 8016ef0:	d80e      	bhi.n	8016f10 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 8016ef2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	3308      	adds	r3, #8
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	4413      	add	r3, r2
 8016efe:	1d18      	adds	r0, r3, #4
 8016f00:	693b      	ldr	r3, [r7, #16]
 8016f02:	1c59      	adds	r1, r3, #1
 8016f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	3b01      	subs	r3, #1
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	f006 fb7f 	bl	801d60e <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8016f10:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	4413      	add	r3, r2
 8016f18:	7b19      	ldrb	r1, [r3, #12]
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	781a      	ldrb	r2, [r3, #0]
 8016f1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016f22:	430a      	orrs	r2, r1
 8016f24:	b2d1      	uxtb	r1, r2
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	4413      	add	r3, r2
 8016f2a:	460a      	mov	r2, r1
 8016f2c:	731a      	strb	r2, [r3, #12]
 8016f2e:	e00b      	b.n	8016f48 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8016f30:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016f34:	3308      	adds	r3, #8
 8016f36:	687a      	ldr	r2, [r7, #4]
 8016f38:	4413      	add	r3, r2
 8016f3a:	1d18      	adds	r0, r3, #4
 8016f3c:	6939      	ldr	r1, [r7, #16]
 8016f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	461a      	mov	r2, r3
 8016f44:	f006 fb63 	bl	801d60e <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2240      	movs	r2, #64	@ 0x40
 8016f4c:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016f52:	7812      	ldrb	r2, [r2, #0]
 8016f54:	4413      	add	r3, r2
 8016f56:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 8016f58:	89fb      	ldrh	r3, [r7, #14]
 8016f5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016f5c:	7812      	ldrb	r2, [r2, #0]
 8016f5e:	1a9b      	subs	r3, r3, r2
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 8016f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016f66:	881b      	ldrh	r3, [r3, #0]
 8016f68:	461a      	mov	r2, r3
 8016f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016f6c:	4413      	add	r3, r2
 8016f6e:	6939      	ldr	r1, [r7, #16]
 8016f70:	89fa      	ldrh	r2, [r7, #14]
 8016f72:	4618      	mov	r0, r3
 8016f74:	f006 fb4b 	bl	801d60e <memcpy>
            *pDataLength += wRespLength;
 8016f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016f7a:	881a      	ldrh	r2, [r3, #0]
 8016f7c:	89fb      	ldrh	r3, [r7, #14]
 8016f7e:	4413      	add	r3, r2
 8016f80:	b29a      	uxth	r2, r3
 8016f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016f84:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 8016f86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016f88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016f8a:	4413      	add	r3, r2
 8016f8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8016f8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016f90:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 8016f92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 8016f9a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016f9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016fa0:	1ad2      	subs	r2, r2, r3
 8016fa2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	da04      	bge.n	8016fb2 <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 8016fa8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016fac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016fae:	1ad3      	subs	r3, r2, r3
 8016fb0:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 8016fb2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016fb6:	009b      	lsls	r3, r3, #2
 8016fb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016fba:	8812      	ldrh	r2, [r2, #0]
 8016fbc:	4293      	cmp	r3, r2
 8016fbe:	d102      	bne.n	8016fc6 <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 8016fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f43f aeb3 	beq.w	8016d3c <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	7a9b      	ldrb	r3, [r3, #10]
 8016fda:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8016fde:	b2da      	uxtb	r2, r3
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8016fea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <phpalSli15693_Sw_InventoryExt+0x6de>
 8016ff0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016ff2:	e007      	b.n	8017004 <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	7a9b      	ldrb	r3, [r3, #10]
 8016ff8:	f043 0320 	orr.w	r3, r3, #32
 8016ffc:	b2da      	uxtb	r2, r3
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8017002:	2300      	movs	r3, #0
}
 8017004:	4618      	mov	r0, r3
 8017006:	3738      	adds	r7, #56	@ 0x38
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <phDriver_PinConfig>:
 * PORT/GPIO PIN API's
 *******************************************************************************/

/* GPIO FUNC_1:配置GPIO引脚的功能和属性 */
phStatus_t phDriver_PinConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc, phDriver_Pin_Config_t *pPinConfig)
{
 801700c:	b480      	push	{r7}
 801700e:	b085      	sub	sp, #20
 8017010:	af00      	add	r7, sp, #0
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	607b      	str	r3, [r7, #4]
 8017016:	460b      	mov	r3, r1
 8017018:	817b      	strh	r3, [r7, #10]
 801701a:	4613      	mov	r3, r2
 801701c:	727b      	strb	r3, [r7, #9]
    /* 已经在GPIO_INIT实现 */
    return PH_DRIVER_SUCCESS;
 801701e:	2300      	movs	r3, #0
}
 8017020:	4618      	mov	r0, r3
 8017022:	3714      	adds	r7, #20
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <phDriver_PinRead>:

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	460b      	mov	r3, r1
 8017036:	807b      	strh	r3, [r7, #2]
 8017038:	4613      	mov	r3, r2
 801703a:	707b      	strb	r3, [r7, #1]
	if(GPIO_Pin == PN5180_IRQ_Pin)
 801703c:	887b      	ldrh	r3, [r7, #2]
 801703e:	2b10      	cmp	r3, #16
 8017040:	d10e      	bne.n	8017060 <phDriver_PinRead+0x34>
	{
		if(ePinFunc == PH_DRIVER_PINFUNC_INTERRUPT)
 8017042:	787b      	ldrb	r3, [r7, #1]
 8017044:	2b04      	cmp	r3, #4
 8017046:	d10b      	bne.n	8017060 <phDriver_PinRead+0x34>
		{
			// 中断模式：检查是否有pending的中断
			if(g_irq_pending)
 8017048:	4b0a      	ldr	r3, [pc, #40]	@ (8017074 <phDriver_PinRead+0x48>)
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	b2db      	uxtb	r3, r3
 801704e:	2b00      	cmp	r3, #0
 8017050:	d004      	beq.n	801705c <phDriver_PinRead+0x30>
			{
				g_irq_pending = 0;  // 读取后清除
 8017052:	4b08      	ldr	r3, [pc, #32]	@ (8017074 <phDriver_PinRead+0x48>)
 8017054:	2200      	movs	r2, #0
 8017056:	701a      	strb	r2, [r3, #0]
				return 1;  // 有中断
 8017058:	2301      	movs	r3, #1
 801705a:	e007      	b.n	801706c <phDriver_PinRead+0x40>
			}
			return 0;  // 无中断
 801705c:	2300      	movs	r3, #0
 801705e:	e005      	b.n	801706c <phDriver_PinRead+0x40>
		}
	}
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8017060:	887b      	ldrh	r3, [r7, #2]
 8017062:	4619      	mov	r1, r3
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 fedb 	bl	8017e20 <HAL_GPIO_ReadPin>
 801706a:	4603      	mov	r3, r0
}
 801706c:	4618      	mov	r0, r3
 801706e:	3708      	adds	r7, #8
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}
 8017074:	20001794 	.word	0x20001794

08017078 <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b082      	sub	sp, #8
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
 8017080:	460b      	mov	r3, r1
 8017082:	807b      	strh	r3, [r7, #2]
 8017084:	4613      	mov	r3, r2
 8017086:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 8017088:	787a      	ldrb	r2, [r7, #1]
 801708a:	887b      	ldrh	r3, [r7, #2]
 801708c:	4619      	mov	r1, r3
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f000 fede 	bl	8017e50 <HAL_GPIO_WritePin>
}
 8017094:	bf00      	nop
 8017096:	3708      	adds	r7, #8
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d11d      	bne.n	80170ea <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	2b01      	cmp	r3, #1
 80170b2:	d108      	bne.n	80170c6 <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80170ba:	fb02 f303 	mul.w	r3, r2, r3
 80170be:	4618      	mov	r0, r3
 80170c0:	f000 fb80 	bl	80177c4 <HAL_Delay>
 80170c4:	e029      	b.n	801711a <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80170cc:	d103      	bne.n	80170d6 <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 80170ce:	68b8      	ldr	r0, [r7, #8]
 80170d0:	f000 fb78 	bl	80177c4 <HAL_Delay>
 80170d4:	e021      	b.n	801711a <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	4a12      	ldr	r2, [pc, #72]	@ (8017124 <phDriver_TimerStart+0x88>)
 80170da:	4293      	cmp	r3, r2
 80170dc:	d11d      	bne.n	801711a <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7eb f8ec 	bl	80022c0 <delay_us>
 80170e8:	e017      	b.n	801711a <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 80170ea:	4a0f      	ldr	r2, [pc, #60]	@ (8017128 <phDriver_TimerStart+0x8c>)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 80170f0:	4b0e      	ldr	r3, [pc, #56]	@ (801712c <phDriver_TimerStart+0x90>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	68ba      	ldr	r2, [r7, #8]
 80170f6:	3a01      	subs	r2, #1
 80170f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	3b01      	subs	r3, #1
 80170fe:	4a0b      	ldr	r2, [pc, #44]	@ (801712c <phDriver_TimerStart+0x90>)
 8017100:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 8017102:	4b0a      	ldr	r3, [pc, #40]	@ (801712c <phDriver_TimerStart+0x90>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2200      	movs	r2, #0
 8017108:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 801710a:	4b08      	ldr	r3, [pc, #32]	@ (801712c <phDriver_TimerStart+0x90>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	f06f 0201 	mvn.w	r2, #1
 8017112:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 8017114:	4805      	ldr	r0, [pc, #20]	@ (801712c <phDriver_TimerStart+0x90>)
 8017116:	f002 fd63 	bl	8019be0 <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 801711a:	2300      	movs	r3, #0
}
 801711c:	4618      	mov	r0, r3
 801711e:	3710      	adds	r7, #16
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}
 8017124:	000f4240 	.word	0x000f4240
 8017128:	20001790 	.word	0x20001790
 801712c:	200002c0 	.word	0x200002c0

08017130 <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	af00      	add	r7, sp, #0
	 printf("NFC: Timer stop called (HAL_Delay mode - no action needed)\r\n");
 8017134:	4802      	ldr	r0, [pc, #8]	@ (8017140 <phDriver_TimerStop+0x10>)
 8017136:	f006 f8fb 	bl	801d330 <puts>

    return PH_DRIVER_SUCCESS;
 801713a:	2300      	movs	r3, #0
}
 801713c:	4618      	mov	r0, r3
 801713e:	bd80      	pop	{r7, pc}
 8017140:	0801fd3c 	.word	0x0801fd3c

08017144 <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 8017144:	b480      	push	{r7}
 8017146:	b085      	sub	sp, #20
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	460b      	mov	r3, r1
 801714e:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d002      	beq.n	801715c <phbalReg_Init+0x18>
 8017156:	887b      	ldrh	r3, [r7, #2]
 8017158:	2b04      	cmp	r3, #4
 801715a:	d002      	beq.n	8017162 <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 801715c:	f24f 1380 	movw	r3, #61824	@ 0xf180
 8017160:	e007      	b.n	8017172 <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 8017168:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2201      	movs	r2, #1
 801716e:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 8017170:	2300      	movs	r3, #0
}
 8017172:	4618      	mov	r0, r3
 8017174:	3714      	adds	r7, #20
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr
	...

08017180 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b08a      	sub	sp, #40	@ 0x28
 8017184:	af02      	add	r7, sp, #8
 8017186:	60f8      	str	r0, [r7, #12]
 8017188:	607a      	str	r2, [r7, #4]
 801718a:	461a      	mov	r2, r3
 801718c:	460b      	mov	r3, r1
 801718e:	817b      	strh	r3, [r7, #10]
 8017190:	4613      	mov	r3, r2
 8017192:	813b      	strh	r3, [r7, #8]
	uint8_t * pRxBuf = NULL;                    // 实际接收缓存指针
 8017194:	2300      	movs	r3, #0
 8017196:	61fb      	str	r3, [r7, #28]
	uint8_t dummyTxByte = 0xFF;
 8017198:	23ff      	movs	r3, #255	@ 0xff
 801719a:	74fb      	strb	r3, [r7, #19]

	/* 只发送不接收 */
	if (pRxBuffer == NULL)
 801719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d102      	bne.n	80171a8 <phbalReg_Exchange+0x28>
	{
		pRxBuf = NULL;
 80171a2:	2300      	movs	r3, #0
 80171a4:	61fb      	str	r3, [r7, #28]
 80171a6:	e001      	b.n	80171ac <phbalReg_Exchange+0x2c>
	}
	else /* 接收 */
	{
		pRxBuf = pRxBuffer;
 80171a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171aa:	61fb      	str	r3, [r7, #28]
	}

	printf("SPITX>> ");
 80171ac:	4835      	ldr	r0, [pc, #212]	@ (8017284 <phbalReg_Exchange+0x104>)
 80171ae:	f006 f84f 	bl	801d250 <iprintf>
	for (int i = 0; i < wTxLength; i++)
 80171b2:	2300      	movs	r3, #0
 80171b4:	61bb      	str	r3, [r7, #24]
 80171b6:	e02f      	b.n	8017218 <phbalReg_Exchange+0x98>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;	// 发送1字节
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d004      	beq.n	80171c8 <phbalReg_Exchange+0x48>
 80171be:	69bb      	ldr	r3, [r7, #24]
 80171c0:	687a      	ldr	r2, [r7, #4]
 80171c2:	4413      	add	r3, r2
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	e000      	b.n	80171ca <phbalReg_Exchange+0x4a>
 80171c8:	7cfb      	ldrb	r3, [r7, #19]
 80171ca:	74bb      	strb	r3, [r7, #18]
		uint8_t rxByte = 0x00;	// 接收1字节
 80171cc:	2300      	movs	r3, #0
 80171ce:	747b      	strb	r3, [r7, #17]

		// 单字节全双工发送+接收
		if (HAL_SPI_TransmitReceive(&hspi3, &txByte, &rxByte, 1, 100) != HAL_OK)
 80171d0:	f107 0211 	add.w	r2, r7, #17
 80171d4:	f107 0112 	add.w	r1, r7, #18
 80171d8:	2364      	movs	r3, #100	@ 0x64
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	2301      	movs	r3, #1
 80171de:	482a      	ldr	r0, [pc, #168]	@ (8017288 <phbalReg_Exchange+0x108>)
 80171e0:	f002 f8af 	bl	8019342 <HAL_SPI_TransmitReceive>
 80171e4:	4603      	mov	r3, r0
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d002      	beq.n	80171f0 <phbalReg_Exchange+0x70>
		{
			return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 80171ea:	f24f 1381 	movw	r3, #61825	@ 0xf181
 80171ee:	e045      	b.n	801727c <phbalReg_Exchange+0xfc>
		}

		printf("%02X ", txByte);  // 打印发送内容
 80171f0:	7cbb      	ldrb	r3, [r7, #18]
 80171f2:	4619      	mov	r1, r3
 80171f4:	4825      	ldr	r0, [pc, #148]	@ (801728c <phbalReg_Exchange+0x10c>)
 80171f6:	f006 f82b 	bl	801d250 <iprintf>

		if (pRxBuf != NULL && i < wRxBufSize)
 80171fa:	69fb      	ldr	r3, [r7, #28]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d008      	beq.n	8017212 <phbalReg_Exchange+0x92>
 8017200:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017202:	69ba      	ldr	r2, [r7, #24]
 8017204:	429a      	cmp	r2, r3
 8017206:	da04      	bge.n	8017212 <phbalReg_Exchange+0x92>
		{
			pRxBuf[i] = rxByte;
 8017208:	69bb      	ldr	r3, [r7, #24]
 801720a:	69fa      	ldr	r2, [r7, #28]
 801720c:	4413      	add	r3, r2
 801720e:	7c7a      	ldrb	r2, [r7, #17]
 8017210:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < wTxLength; i++)
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	3301      	adds	r3, #1
 8017216:	61bb      	str	r3, [r7, #24]
 8017218:	893b      	ldrh	r3, [r7, #8]
 801721a:	69ba      	ldr	r2, [r7, #24]
 801721c:	429a      	cmp	r2, r3
 801721e:	dbcb      	blt.n	80171b8 <phbalReg_Exchange+0x38>
		}
	}
	printf("\n");
 8017220:	200a      	movs	r0, #10
 8017222:	f006 f827 	bl	801d274 <putchar>

	if (pRxBuf != NULL)
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d01b      	beq.n	8017264 <phbalReg_Exchange+0xe4>
	{
		printf("SPIRX<< ");
 801722c:	4818      	ldr	r0, [pc, #96]	@ (8017290 <phbalReg_Exchange+0x110>)
 801722e:	f006 f80f 	bl	801d250 <iprintf>
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8017232:	2300      	movs	r3, #0
 8017234:	617b      	str	r3, [r7, #20]
 8017236:	e00a      	b.n	801724e <phbalReg_Exchange+0xce>
		{
			printf("%02X ", pRxBuf[i]);
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	69fa      	ldr	r2, [r7, #28]
 801723c:	4413      	add	r3, r2
 801723e:	781b      	ldrb	r3, [r3, #0]
 8017240:	4619      	mov	r1, r3
 8017242:	4812      	ldr	r0, [pc, #72]	@ (801728c <phbalReg_Exchange+0x10c>)
 8017244:	f006 f804 	bl	801d250 <iprintf>
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	3301      	adds	r3, #1
 801724c:	617b      	str	r3, [r7, #20]
 801724e:	893b      	ldrh	r3, [r7, #8]
 8017250:	697a      	ldr	r2, [r7, #20]
 8017252:	429a      	cmp	r2, r3
 8017254:	da03      	bge.n	801725e <phbalReg_Exchange+0xde>
 8017256:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017258:	697a      	ldr	r2, [r7, #20]
 801725a:	429a      	cmp	r2, r3
 801725c:	dbec      	blt.n	8017238 <phbalReg_Exchange+0xb8>
		}
		printf("\n");
 801725e:	200a      	movs	r0, #10
 8017260:	f006 f808 	bl	801d274 <putchar>
	}

	// 返回接收到的数据长度
	if (pRxLength != NULL)
 8017264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017266:	2b00      	cmp	r3, #0
 8017268:	d007      	beq.n	801727a <phbalReg_Exchange+0xfa>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d001      	beq.n	8017274 <phbalReg_Exchange+0xf4>
 8017270:	893a      	ldrh	r2, [r7, #8]
 8017272:	e000      	b.n	8017276 <phbalReg_Exchange+0xf6>
 8017274:	2200      	movs	r2, #0
 8017276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017278:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 801727a:	2300      	movs	r3, #0
}
 801727c:	4618      	mov	r0, r3
 801727e:	3720      	adds	r7, #32
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}
 8017284:	0801fd78 	.word	0x0801fd78
 8017288:	2000020c 	.word	0x2000020c
 801728c:	0801fd84 	.word	0x0801fd84
 8017290:	0801fd8c 	.word	0x0801fd8c

08017294 <phOsal_EventCreate>:

    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b084      	sub	sp, #16
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 801729e:	2300      	movs	r3, #0
 80172a0:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d002      	beq.n	80172ae <phOsal_EventCreate+0x1a>
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d102      	bne.n	80172b4 <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 80172ae:	f24f 0327 	movw	r3, #61479	@ 0xf027
 80172b2:	e033      	b.n	801731c <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 80172b4:	4b1b      	ldr	r3, [pc, #108]	@ (8017324 <phOsal_EventCreate+0x90>)
 80172b6:	6819      	ldr	r1, [r3, #0]
 80172b8:	f107 030c 	add.w	r3, r7, #12
 80172bc:	2205      	movs	r2, #5
 80172be:	4618      	mov	r0, r3
 80172c0:	f000 f940 	bl	8017544 <phOsal_NullOs_GetFreeIndex>
 80172c4:	4603      	mov	r3, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d009      	beq.n	80172de <phOsal_EventCreate+0x4a>
 80172ca:	4b16      	ldr	r3, [pc, #88]	@ (8017324 <phOsal_EventCreate+0x90>)
 80172cc:	6819      	ldr	r1, [r3, #0]
 80172ce:	f107 030c 	add.w	r3, r7, #12
 80172d2:	2205      	movs	r2, #5
 80172d4:	4618      	mov	r0, r3
 80172d6:	f000 f935 	bl	8017544 <phOsal_NullOs_GetFreeIndex>
 80172da:	4603      	mov	r3, r0
 80172dc:	e01e      	b.n	801731c <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	4a11      	ldr	r2, [pc, #68]	@ (8017328 <phOsal_EventCreate+0x94>)
 80172e2:	2100      	movs	r1, #0
 80172e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	2201      	movs	r2, #1
 80172ec:	fa02 f303 	lsl.w	r3, r2, r3
 80172f0:	461a      	mov	r2, r3
 80172f2:	4b0c      	ldr	r3, [pc, #48]	@ (8017324 <phOsal_EventCreate+0x90>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	4313      	orrs	r3, r2
 80172f8:	4a0a      	ldr	r2, [pc, #40]	@ (8017324 <phOsal_EventCreate+0x90>)
 80172fa:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	4a09      	ldr	r2, [pc, #36]	@ (8017328 <phOsal_EventCreate+0x94>)
 8017302:	441a      	add	r2, r3
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	009b      	lsls	r3, r3, #2
 801730c:	4a06      	ldr	r2, [pc, #24]	@ (8017328 <phOsal_EventCreate+0x94>)
 801730e:	441a      	add	r2, r3
 8017310:	683b      	ldr	r3, [r7, #0]
 8017312:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 8017314:	68fa      	ldr	r2, [r7, #12]
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 801731a:	2300      	movs	r3, #0
}
 801731c:	4618      	mov	r0, r3
 801731e:	3710      	adds	r7, #16
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	200017ac 	.word	0x200017ac
 8017328:	20001798 	.word	0x20001798

0801732c <phOsal_EventPend>:

phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b086      	sub	sp, #24
 8017330:	af00      	add	r7, sp, #0
 8017332:	60f8      	str	r0, [r7, #12]
 8017334:	607a      	str	r2, [r7, #4]
 8017336:	603b      	str	r3, [r7, #0]
 8017338:	460b      	mov	r3, r1
 801733a:	72fb      	strb	r3, [r7, #11]
    phStatus_t status;

    printf("EventPend START\r\n");
 801733c:	4842      	ldr	r0, [pc, #264]	@ (8017448 <phOsal_EventPend+0x11c>)
 801733e:	f005 fff7 	bl	801d330 <puts>
    printf("WAIT: 0x%08X\r\n", FlagsToWait);  // 看等待什么标志
 8017342:	6839      	ldr	r1, [r7, #0]
 8017344:	4841      	ldr	r0, [pc, #260]	@ (801744c <phOsal_EventPend+0x120>)
 8017346:	f005 ff83 	bl	801d250 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d003      	beq.n	8017358 <phOsal_EventPend+0x2c>
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d102      	bne.n	801735e <phOsal_EventPend+0x32>
    {
//        printf("EventPend ERROR\r\n");
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8017358:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801735c:	e06f      	b.n	801743e <phOsal_EventPend+0x112>
    }

    status = PH_OSAL_IO_TIMEOUT;
 801735e:	2301      	movs	r3, #1
 8017360:	82fb      	strh	r3, [r7, #22]

    /* Check whether infinite wait, if not config timer. */
    if (ticksToWait != PHOSAL_MAX_DELAY)
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017368:	d002      	beq.n	8017370 <phOsal_EventPend+0x44>
    {
//        printf("Timer START\r\n");
        phOsal_StartTickTimer(ticksToWait);
 801736a:	6878      	ldr	r0, [r7, #4]
 801736c:	f000 f956 	bl	801761c <phOsal_StartTickTimer>

    while(1)
    {
        /* Enter Critical Section */
//        printf("CS Enter\r\n");
        phOsal_EnterCriticalSection();
 8017370:	f000 f994 	bl	801769c <phOsal_EnterCriticalSection>
//        printf("CS OK\r\n");

        if ((((options & E_OS_EVENT_OPT_PEND_SET_ALL) && (((*((uint32_t *)(*eventHandle))) & FlagsToWait) == FlagsToWait))
 8017374:	7afb      	ldrb	r3, [r7, #11]
 8017376:	f003 0302 	and.w	r3, r3, #2
 801737a:	2b00      	cmp	r3, #0
 801737c:	d007      	beq.n	801738e <phOsal_EventPend+0x62>
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	4013      	ands	r3, r2
 8017388:	683a      	ldr	r2, [r7, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d010      	beq.n	80173b0 <phOsal_EventPend+0x84>
            || ((!(options & E_OS_EVENT_OPT_PEND_SET_ALL)) && ((*((uint32_t *)(*eventHandle))) & FlagsToWait)))
 801738e:	7afb      	ldrb	r3, [r7, #11]
 8017390:	f003 0302 	and.w	r3, r3, #2
 8017394:	2b00      	cmp	r3, #0
 8017396:	d106      	bne.n	80173a6 <phOsal_EventPend+0x7a>
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	4013      	ands	r3, r2
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d104      	bne.n	80173b0 <phOsal_EventPend+0x84>
            || (gbWaitTimedOut))
 80173a6:	4b2a      	ldr	r3, [pc, #168]	@ (8017450 <phOsal_EventPend+0x124>)
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d009      	beq.n	80173c4 <phOsal_EventPend+0x98>
        {
//            printf("CS Exit\r\n");
            /* Exit Critical Section. */
            phOsal_ExitCriticalSection();
 80173b0:	f000 f97c 	bl	80176ac <phOsal_ExitCriticalSection>
//            printf("Event OK\r\n");
            if (gbWaitTimedOut != 0x01)
 80173b4:	4b26      	ldr	r3, [pc, #152]	@ (8017450 <phOsal_EventPend+0x124>)
 80173b6:	781b      	ldrb	r3, [r3, #0]
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	d007      	beq.n	80173ce <phOsal_EventPend+0xa2>
            {
                status = PH_OSAL_SUCCESS;
 80173be:	2300      	movs	r3, #0
 80173c0:	82fb      	strh	r3, [r7, #22]
            }
            break;
 80173c2:	e004      	b.n	80173ce <phOsal_EventPend+0xa2>
        }

//        printf("CS Exit2\r\n");
        /* Exit Critical Section. */
        phOsal_ExitCriticalSection();
 80173c4:	f000 f972 	bl	80176ac <phOsal_ExitCriticalSection>
//        printf("Sleep\r\n");

        /* Wait for interrupts/events to occur */
        phOsal_Sleep();
 80173c8:	f000 f978 	bl	80176bc <phOsal_Sleep>
        phOsal_EnterCriticalSection();
 80173cc:	e7d0      	b.n	8017370 <phOsal_EventPend+0x44>
            break;
 80173ce:	bf00      	nop
    }

//    printf("Loop END\r\n");

    /* Check whether infinite wait, if not config timer. */
    if (ticksToWait != PHOSAL_MAX_DELAY)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173d6:	d001      	beq.n	80173dc <phOsal_EventPend+0xb0>
    {
//        printf("Timer STOP\r\n");
        phOsal_StopTickTimer();
 80173d8:	f000 f950 	bl	801767c <phOsal_StopTickTimer>
//        printf("Timer STOPPED\r\n");
    }

    gbWaitTimedOut = 0;
 80173dc:	4b1c      	ldr	r3, [pc, #112]	@ (8017450 <phOsal_EventPend+0x124>)
 80173de:	2200      	movs	r2, #0
 80173e0:	701a      	strb	r2, [r3, #0]

//    printf("Final CS\r\n");
    phOsal_EnterCriticalSection();
 80173e2:	f000 f95b 	bl	801769c <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d004      	beq.n	80173f6 <phOsal_EventPend+0xca>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	6a3b      	ldr	r3, [r7, #32]
 80173f4:	601a      	str	r2, [r3, #0]
    }

    if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 80173f6:	7afb      	ldrb	r3, [r7, #11]
 80173f8:	f003 0304 	and.w	r3, r3, #4
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d00a      	beq.n	8017416 <phOsal_EventPend+0xea>
    {
        (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	681a      	ldr	r2, [r3, #0]
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	4013      	ands	r3, r2
 801740a:	43d9      	mvns	r1, r3
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	400a      	ands	r2, r1
 8017414:	601a      	str	r2, [r3, #0]
    }

    phOsal_ExitCriticalSection();
 8017416:	f000 f949 	bl	80176ac <phOsal_ExitCriticalSection>
//    printf("EventPend END\r\n");

    return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 801741a:	8afb      	ldrh	r3, [r7, #22]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d00d      	beq.n	801743c <phOsal_EventPend+0x110>
 8017420:	8afb      	ldrh	r3, [r7, #22]
 8017422:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8017426:	2b00      	cmp	r3, #0
 8017428:	d108      	bne.n	801743c <phOsal_EventPend+0x110>
 801742a:	8afb      	ldrh	r3, [r7, #22]
 801742c:	b2db      	uxtb	r3, r3
 801742e:	b29b      	uxth	r3, r3
 8017430:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8017434:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8017438:	b29b      	uxth	r3, r3
 801743a:	e000      	b.n	801743e <phOsal_EventPend+0x112>
 801743c:	8afb      	ldrh	r3, [r7, #22]
}
 801743e:	4618      	mov	r0, r3
 8017440:	3718      	adds	r7, #24
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	0801fd98 	.word	0x0801fd98
 801744c:	0801fdac 	.word	0x0801fdac
 8017450:	20001795 	.word	0x20001795

08017454 <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b084      	sub	sp, #16
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	607a      	str	r2, [r7, #4]
 801745e:	603b      	str	r3, [r7, #0]
 8017460:	460b      	mov	r3, r1
 8017462:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08X\r\n", FlagsToPost);  // 添加这行
 8017464:	6879      	ldr	r1, [r7, #4]
 8017466:	4815      	ldr	r0, [pc, #84]	@ (80174bc <phOsal_EventPost+0x68>)
 8017468:	f005 fef2 	bl	801d250 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d003      	beq.n	801747a <phOsal_EventPost+0x26>
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d105      	bne.n	8017486 <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 801747a:	4811      	ldr	r0, [pc, #68]	@ (80174c0 <phOsal_EventPost+0x6c>)
 801747c:	f005 ff58 	bl	801d330 <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8017480:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8017484:	e016      	b.n	80174b4 <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 8017486:	f000 f909 	bl	801769c <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	6819      	ldr	r1, [r3, #0]
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	687a      	ldr	r2, [r7, #4]
 8017496:	430a      	orrs	r2, r1
 8017498:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d004      	beq.n	80174aa <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	681a      	ldr	r2, [r3, #0]
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 80174aa:	f000 f8ff 	bl	80176ac <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 80174ae:	f000 f90d 	bl	80176cc <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 80174b2:	2300      	movs	r3, #0

}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3710      	adds	r7, #16
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	0801fdbc 	.word	0x0801fdbc
 80174c0:	0801fdcc 	.word	0x0801fdcc

080174c4 <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	60f8      	str	r0, [r7, #12]
 80174cc:	607a      	str	r2, [r7, #4]
 80174ce:	603b      	str	r3, [r7, #0]
 80174d0:	460b      	mov	r3, r1
 80174d2:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d003      	beq.n	80174e2 <phOsal_EventClear+0x1e>
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d102      	bne.n	80174e8 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 80174e2:	f24f 0327 	movw	r3, #61479	@ 0xf027
 80174e6:	e015      	b.n	8017514 <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 80174e8:	f000 f8d8 	bl	801769c <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d004      	beq.n	80174fc <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	681a      	ldr	r2, [r3, #0]
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	6819      	ldr	r1, [r3, #0]
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	43da      	mvns	r2, r3
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	400a      	ands	r2, r1
 801750c:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 801750e:	f000 f8cd 	bl	80176ac <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 8017512:	2300      	movs	r3, #0
}
 8017514:	4618      	mov	r0, r3
 8017516:	3710      	adds	r7, #16
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <phOsal_ThreadSecureStack>:
{
    return phOsal_NullOs_ReturnUnsupportedCmd();
}

phStatus_t phOsal_ThreadSecureStack(uint32_t stackSizeInNum)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
   return phOsal_NullOs_ReturnUnsupportedCmd();
 8017524:	f000 f805 	bl	8017532 <phOsal_NullOs_ReturnUnsupportedCmd>
 8017528:	4603      	mov	r3, r0
}
 801752a:	4618      	mov	r0, r3
 801752c:	3708      	adds	r7, #8
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}

08017532 <phOsal_NullOs_ReturnUnsupportedCmd>:

/* *****************************************************************************************************************
 * Private Functions
 * ***************************************************************************************************************** */
static phStatus_t phOsal_NullOs_ReturnUnsupportedCmd(void)
{
 8017532:	b480      	push	{r7}
 8017534:	af00      	add	r7, sp, #0
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
 8017536:	f24f 0324 	movw	r3, #61476	@ 0xf024
}
 801753a:	4618      	mov	r0, r3
 801753c:	46bd      	mov	sp, r7
 801753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017542:	4770      	bx	lr

08017544 <phOsal_NullOs_GetFreeIndex>:

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 8017544:	b480      	push	{r7}
 8017546:	b087      	sub	sp, #28
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	2200      	movs	r2, #0
 8017554:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 8017556:	e004      	b.n	8017562 <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	1c5a      	adds	r2, r3, #1
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	2201      	movs	r2, #1
 8017568:	fa02 f303 	lsl.w	r3, r2, r3
 801756c:	461a      	mov	r2, r3
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	4013      	ands	r3, r2
 8017572:	2b00      	cmp	r3, #0
 8017574:	d004      	beq.n	8017580 <phOsal_NullOs_GetFreeIndex+0x3c>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	687a      	ldr	r2, [r7, #4]
 801757c:	429a      	cmp	r2, r3
 801757e:	d8eb      	bhi.n	8017558 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	687a      	ldr	r2, [r7, #4]
 8017586:	429a      	cmp	r2, r3
 8017588:	d103      	bne.n	8017592 <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 801758a:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801758e:	82fb      	strh	r3, [r7, #22]
 8017590:	e001      	b.n	8017596 <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 8017592:	2300      	movs	r3, #0
 8017594:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 8017596:	8afb      	ldrh	r3, [r7, #22]
}
 8017598:	4618      	mov	r0, r3
 801759a:	371c      	adds	r7, #28
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr

080175a4 <phOsal_ConfigTick>:

    return PH_OSAL_SUCCESS;
}

static void phOsal_ConfigTick(void)
{
 80175a4:	b490      	push	{r4, r7}
 80175a6:	af00      	add	r7, sp, #0
    /* Disable systick */
    SysTick->CTRL = 0x0;
 80175a8:	4b19      	ldr	r3, [pc, #100]	@ (8017610 <phOsal_ConfigTick+0x6c>)
 80175aa:	2200      	movs	r2, #0
 80175ac:	601a      	str	r2, [r3, #0]

    /* Configure SysTick count down value to interrupt at the requested time. */
    if(qwLoadValue > SYSTICK_TIMER_MAX)
 80175ae:	4b19      	ldr	r3, [pc, #100]	@ (8017614 <phOsal_ConfigTick+0x70>)
 80175b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b4:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80175b8:	f173 0300 	sbcs.w	r3, r3, #0
 80175bc:	d30e      	bcc.n	80175dc <phOsal_ConfigTick+0x38>
    {
        qwLoadValue -= SYSTICK_TIMER_MAX;
 80175be:	4b15      	ldr	r3, [pc, #84]	@ (8017614 <phOsal_ConfigTick+0x70>)
 80175c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c4:	4c14      	ldr	r4, [pc, #80]	@ (8017618 <phOsal_ConfigTick+0x74>)
 80175c6:	1910      	adds	r0, r2, r4
 80175c8:	f143 31ff 	adc.w	r1, r3, #4294967295
 80175cc:	4b11      	ldr	r3, [pc, #68]	@ (8017614 <phOsal_ConfigTick+0x70>)
 80175ce:	e9c3 0100 	strd	r0, r1, [r3]
        SysTick->LOAD = SYSTICK_TIMER_MAX;
 80175d2:	4b0f      	ldr	r3, [pc, #60]	@ (8017610 <phOsal_ConfigTick+0x6c>)
 80175d4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80175d8:	605a      	str	r2, [r3, #4]
 80175da:	e00e      	b.n	80175fa <phOsal_ConfigTick+0x56>
    }
    else
    {
        SysTick->LOAD = (uint32_t)(qwLoadValue & SYSTICK_TIMER_MAX);
 80175dc:	4b0d      	ldr	r3, [pc, #52]	@ (8017614 <phOsal_ConfigTick+0x70>)
 80175de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e2:	4613      	mov	r3, r2
 80175e4:	4a0a      	ldr	r2, [pc, #40]	@ (8017610 <phOsal_ConfigTick+0x6c>)
 80175e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80175ea:	6053      	str	r3, [r2, #4]
        qwLoadValue = 0;
 80175ec:	4909      	ldr	r1, [pc, #36]	@ (8017614 <phOsal_ConfigTick+0x70>)
 80175ee:	f04f 0200 	mov.w	r2, #0
 80175f2:	f04f 0300 	mov.w	r3, #0
 80175f6:	e9c1 2300 	strd	r2, r3, [r1]
    }

    /*Clear the current count value and also SysTick CTRL.COUNTFLAG. */
    SysTick->VAL = 0;
 80175fa:	4b05      	ldr	r3, [pc, #20]	@ (8017610 <phOsal_ConfigTick+0x6c>)
 80175fc:	2200      	movs	r2, #0
 80175fe:	609a      	str	r2, [r3, #8]

    SysTick->CTRL = SYSTICK_TIMER_CLK | SYSTICK_TIMER_INT | SYSTICK_TIMER_ENABLE;
 8017600:	4b03      	ldr	r3, [pc, #12]	@ (8017610 <phOsal_ConfigTick+0x6c>)
 8017602:	2207      	movs	r2, #7
 8017604:	601a      	str	r2, [r3, #0]
}
 8017606:	bf00      	nop
 8017608:	46bd      	mov	sp, r7
 801760a:	bc90      	pop	{r4, r7}
 801760c:	4770      	bx	lr
 801760e:	bf00      	nop
 8017610:	e000e010 	.word	0xe000e010
 8017614:	200017b0 	.word	0x200017b0
 8017618:	ff000001 	.word	0xff000001

0801761c <phOsal_StartTickTimer>:

phStatus_t phOsal_StartTickTimer(uint32_t dwTimeMilliSecs)
{
 801761c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017620:	b082      	sub	sp, #8
 8017622:	af00      	add	r7, sp, #0
 8017624:	6078      	str	r0, [r7, #4]
    qwLoadValue = ((uint64_t)dwTimeMilliSecs * (uint64_t)dwSysTickTimerFreq)/PH_PLATFORM_TIMER_UNIT_MS;
 8017626:	6879      	ldr	r1, [r7, #4]
 8017628:	2000      	movs	r0, #0
 801762a:	4688      	mov	r8, r1
 801762c:	4681      	mov	r9, r0
 801762e:	4911      	ldr	r1, [pc, #68]	@ (8017674 <phOsal_StartTickTimer+0x58>)
 8017630:	6809      	ldr	r1, [r1, #0]
 8017632:	2000      	movs	r0, #0
 8017634:	460a      	mov	r2, r1
 8017636:	4603      	mov	r3, r0
 8017638:	fb02 f009 	mul.w	r0, r2, r9
 801763c:	fb08 f103 	mul.w	r1, r8, r3
 8017640:	4401      	add	r1, r0
 8017642:	fba8 4502 	umull	r4, r5, r8, r2
 8017646:	194b      	adds	r3, r1, r5
 8017648:	461d      	mov	r5, r3
 801764a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801764e:	f04f 0300 	mov.w	r3, #0
 8017652:	4620      	mov	r0, r4
 8017654:	4629      	mov	r1, r5
 8017656:	f7e9 faf7 	bl	8000c48 <__aeabi_uldivmod>
 801765a:	4602      	mov	r2, r0
 801765c:	460b      	mov	r3, r1
 801765e:	4906      	ldr	r1, [pc, #24]	@ (8017678 <phOsal_StartTickTimer+0x5c>)
 8017660:	e9c1 2300 	strd	r2, r3, [r1]

    phOsal_ConfigTick();
 8017664:	f7ff ff9e 	bl	80175a4 <phOsal_ConfigTick>

    return PH_OSAL_SUCCESS;
 8017668:	2300      	movs	r3, #0
}
 801766a:	4618      	mov	r0, r3
 801766c:	3708      	adds	r7, #8
 801766e:	46bd      	mov	sp, r7
 8017670:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017674:	200017b8 	.word	0x200017b8
 8017678:	200017b0 	.word	0x200017b0

0801767c <phOsal_StopTickTimer>:

phStatus_t phOsal_StopTickTimer(void)
{
 801767c:	b480      	push	{r7}
 801767e:	af00      	add	r7, sp, #0
    /* Disable systick and clear the Load value. */
    SysTick->CTRL = 0x0;
 8017680:	4b05      	ldr	r3, [pc, #20]	@ (8017698 <phOsal_StopTickTimer+0x1c>)
 8017682:	2200      	movs	r2, #0
 8017684:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x0;
 8017686:	4b04      	ldr	r3, [pc, #16]	@ (8017698 <phOsal_StopTickTimer+0x1c>)
 8017688:	2200      	movs	r2, #0
 801768a:	605a      	str	r2, [r3, #4]

    return PH_OSAL_SUCCESS;
 801768c:	2300      	movs	r3, #0
}
 801768e:	4618      	mov	r0, r3
 8017690:	46bd      	mov	sp, r7
 8017692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017696:	4770      	bx	lr
 8017698:	e000e010 	.word	0xe000e010

0801769c <phOsal_EnterCriticalSection>:

void phOsal_EnterCriticalSection(void)
{
 801769c:	b480      	push	{r7}
 801769e:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 80176a0:	b672      	cpsid	i
}
 80176a2:	bf00      	nop
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 80176ac:	b480      	push	{r7}
 80176ae:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 80176b0:	b662      	cpsie	i
}
 80176b2:	bf00      	nop
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr

080176bc <phOsal_Sleep>:

void phOsal_Sleep(void)
{
 80176bc:	b480      	push	{r7}
 80176be:	af00      	add	r7, sp, #0
    __WFE();
 80176c0:	bf20      	wfe
}
 80176c2:	bf00      	nop
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr

080176cc <phOsal_WakeUp>:

void phOsal_WakeUp(void)
{
 80176cc:	b480      	push	{r7}
 80176ce:	af00      	add	r7, sp, #0
    __SEV();
 80176d0:	bf40      	sev
}
 80176d2:	bf00      	nop
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr

080176dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80176e2:	2300      	movs	r3, #0
 80176e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80176e6:	2003      	movs	r0, #3
 80176e8:	f000 f960 	bl	80179ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80176ec:	2001      	movs	r0, #1
 80176ee:	f000 f80d 	bl	801770c <HAL_InitTick>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d002      	beq.n	80176fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80176f8:	2301      	movs	r3, #1
 80176fa:	71fb      	strb	r3, [r7, #7]
 80176fc:	e001      	b.n	8017702 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80176fe:	f7ea faf7 	bl	8001cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8017702:	79fb      	ldrb	r3, [r7, #7]
}
 8017704:	4618      	mov	r0, r3
 8017706:	3708      	adds	r7, #8
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b084      	sub	sp, #16
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017714:	2300      	movs	r3, #0
 8017716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8017718:	4b17      	ldr	r3, [pc, #92]	@ (8017778 <HAL_InitTick+0x6c>)
 801771a:	781b      	ldrb	r3, [r3, #0]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d023      	beq.n	8017768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8017720:	4b16      	ldr	r3, [pc, #88]	@ (801777c <HAL_InitTick+0x70>)
 8017722:	681a      	ldr	r2, [r3, #0]
 8017724:	4b14      	ldr	r3, [pc, #80]	@ (8017778 <HAL_InitTick+0x6c>)
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	4619      	mov	r1, r3
 801772a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801772e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017732:	fbb2 f3f3 	udiv	r3, r2, r3
 8017736:	4618      	mov	r0, r3
 8017738:	f000 f96d 	bl	8017a16 <HAL_SYSTICK_Config>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	d10f      	bne.n	8017762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2b0f      	cmp	r3, #15
 8017746:	d809      	bhi.n	801775c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017748:	2200      	movs	r2, #0
 801774a:	6879      	ldr	r1, [r7, #4]
 801774c:	f04f 30ff 	mov.w	r0, #4294967295
 8017750:	f000 f937 	bl	80179c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8017754:	4a0a      	ldr	r2, [pc, #40]	@ (8017780 <HAL_InitTick+0x74>)
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6013      	str	r3, [r2, #0]
 801775a:	e007      	b.n	801776c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801775c:	2301      	movs	r3, #1
 801775e:	73fb      	strb	r3, [r7, #15]
 8017760:	e004      	b.n	801776c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8017762:	2301      	movs	r3, #1
 8017764:	73fb      	strb	r3, [r7, #15]
 8017766:	e001      	b.n	801776c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017768:	2301      	movs	r3, #1
 801776a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801776c:	7bfb      	ldrb	r3, [r7, #15]
}
 801776e:	4618      	mov	r0, r3
 8017770:	3710      	adds	r7, #16
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
 8017776:	bf00      	nop
 8017778:	2000001c 	.word	0x2000001c
 801777c:	20000004 	.word	0x20000004
 8017780:	20000018 	.word	0x20000018

08017784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8017784:	b480      	push	{r7}
 8017786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8017788:	4b06      	ldr	r3, [pc, #24]	@ (80177a4 <HAL_IncTick+0x20>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	461a      	mov	r2, r3
 801778e:	4b06      	ldr	r3, [pc, #24]	@ (80177a8 <HAL_IncTick+0x24>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	4413      	add	r3, r2
 8017794:	4a04      	ldr	r2, [pc, #16]	@ (80177a8 <HAL_IncTick+0x24>)
 8017796:	6013      	str	r3, [r2, #0]
}
 8017798:	bf00      	nop
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr
 80177a2:	bf00      	nop
 80177a4:	2000001c 	.word	0x2000001c
 80177a8:	200017bc 	.word	0x200017bc

080177ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80177ac:	b480      	push	{r7}
 80177ae:	af00      	add	r7, sp, #0
  return uwTick;
 80177b0:	4b03      	ldr	r3, [pc, #12]	@ (80177c0 <HAL_GetTick+0x14>)
 80177b2:	681b      	ldr	r3, [r3, #0]
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	200017bc 	.word	0x200017bc

080177c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80177cc:	f7ff ffee 	bl	80177ac <HAL_GetTick>
 80177d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177dc:	d005      	beq.n	80177ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80177de:	4b0a      	ldr	r3, [pc, #40]	@ (8017808 <HAL_Delay+0x44>)
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	461a      	mov	r2, r3
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	4413      	add	r3, r2
 80177e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80177ea:	bf00      	nop
 80177ec:	f7ff ffde 	bl	80177ac <HAL_GetTick>
 80177f0:	4602      	mov	r2, r0
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	1ad3      	subs	r3, r2, r3
 80177f6:	68fa      	ldr	r2, [r7, #12]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d8f7      	bhi.n	80177ec <HAL_Delay+0x28>
  {
  }
}
 80177fc:	bf00      	nop
 80177fe:	bf00      	nop
 8017800:	3710      	adds	r7, #16
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	2000001c 	.word	0x2000001c

0801780c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801780c:	b480      	push	{r7}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f003 0307 	and.w	r3, r3, #7
 801781a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801781c:	4b0c      	ldr	r3, [pc, #48]	@ (8017850 <__NVIC_SetPriorityGrouping+0x44>)
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017822:	68ba      	ldr	r2, [r7, #8]
 8017824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8017828:	4013      	ands	r3, r2
 801782a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017830:	68bb      	ldr	r3, [r7, #8]
 8017832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8017838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801783c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801783e:	4a04      	ldr	r2, [pc, #16]	@ (8017850 <__NVIC_SetPriorityGrouping+0x44>)
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	60d3      	str	r3, [r2, #12]
}
 8017844:	bf00      	nop
 8017846:	3714      	adds	r7, #20
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr
 8017850:	e000ed00 	.word	0xe000ed00

08017854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017854:	b480      	push	{r7}
 8017856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017858:	4b04      	ldr	r3, [pc, #16]	@ (801786c <__NVIC_GetPriorityGrouping+0x18>)
 801785a:	68db      	ldr	r3, [r3, #12]
 801785c:	0a1b      	lsrs	r3, r3, #8
 801785e:	f003 0307 	and.w	r3, r3, #7
}
 8017862:	4618      	mov	r0, r3
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr
 801786c:	e000ed00 	.word	0xe000ed00

08017870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017870:	b480      	push	{r7}
 8017872:	b083      	sub	sp, #12
 8017874:	af00      	add	r7, sp, #0
 8017876:	4603      	mov	r3, r0
 8017878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801787a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801787e:	2b00      	cmp	r3, #0
 8017880:	db0b      	blt.n	801789a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017882:	79fb      	ldrb	r3, [r7, #7]
 8017884:	f003 021f 	and.w	r2, r3, #31
 8017888:	4907      	ldr	r1, [pc, #28]	@ (80178a8 <__NVIC_EnableIRQ+0x38>)
 801788a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801788e:	095b      	lsrs	r3, r3, #5
 8017890:	2001      	movs	r0, #1
 8017892:	fa00 f202 	lsl.w	r2, r0, r2
 8017896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801789a:	bf00      	nop
 801789c:	370c      	adds	r7, #12
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop
 80178a8:	e000e100 	.word	0xe000e100

080178ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	4603      	mov	r3, r0
 80178b4:	6039      	str	r1, [r7, #0]
 80178b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80178b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	db0a      	blt.n	80178d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178c0:	683b      	ldr	r3, [r7, #0]
 80178c2:	b2da      	uxtb	r2, r3
 80178c4:	490c      	ldr	r1, [pc, #48]	@ (80178f8 <__NVIC_SetPriority+0x4c>)
 80178c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178ca:	0112      	lsls	r2, r2, #4
 80178cc:	b2d2      	uxtb	r2, r2
 80178ce:	440b      	add	r3, r1
 80178d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80178d4:	e00a      	b.n	80178ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	b2da      	uxtb	r2, r3
 80178da:	4908      	ldr	r1, [pc, #32]	@ (80178fc <__NVIC_SetPriority+0x50>)
 80178dc:	79fb      	ldrb	r3, [r7, #7]
 80178de:	f003 030f 	and.w	r3, r3, #15
 80178e2:	3b04      	subs	r3, #4
 80178e4:	0112      	lsls	r2, r2, #4
 80178e6:	b2d2      	uxtb	r2, r2
 80178e8:	440b      	add	r3, r1
 80178ea:	761a      	strb	r2, [r3, #24]
}
 80178ec:	bf00      	nop
 80178ee:	370c      	adds	r7, #12
 80178f0:	46bd      	mov	sp, r7
 80178f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f6:	4770      	bx	lr
 80178f8:	e000e100 	.word	0xe000e100
 80178fc:	e000ed00 	.word	0xe000ed00

08017900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017900:	b480      	push	{r7}
 8017902:	b089      	sub	sp, #36	@ 0x24
 8017904:	af00      	add	r7, sp, #0
 8017906:	60f8      	str	r0, [r7, #12]
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	f003 0307 	and.w	r3, r3, #7
 8017912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017914:	69fb      	ldr	r3, [r7, #28]
 8017916:	f1c3 0307 	rsb	r3, r3, #7
 801791a:	2b04      	cmp	r3, #4
 801791c:	bf28      	it	cs
 801791e:	2304      	movcs	r3, #4
 8017920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017922:	69fb      	ldr	r3, [r7, #28]
 8017924:	3304      	adds	r3, #4
 8017926:	2b06      	cmp	r3, #6
 8017928:	d902      	bls.n	8017930 <NVIC_EncodePriority+0x30>
 801792a:	69fb      	ldr	r3, [r7, #28]
 801792c:	3b03      	subs	r3, #3
 801792e:	e000      	b.n	8017932 <NVIC_EncodePriority+0x32>
 8017930:	2300      	movs	r3, #0
 8017932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017934:	f04f 32ff 	mov.w	r2, #4294967295
 8017938:	69bb      	ldr	r3, [r7, #24]
 801793a:	fa02 f303 	lsl.w	r3, r2, r3
 801793e:	43da      	mvns	r2, r3
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	401a      	ands	r2, r3
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017948:	f04f 31ff 	mov.w	r1, #4294967295
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	fa01 f303 	lsl.w	r3, r1, r3
 8017952:	43d9      	mvns	r1, r3
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017958:	4313      	orrs	r3, r2
         );
}
 801795a:	4618      	mov	r0, r3
 801795c:	3724      	adds	r7, #36	@ 0x24
 801795e:	46bd      	mov	sp, r7
 8017960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017964:	4770      	bx	lr
	...

08017968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	3b01      	subs	r3, #1
 8017974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017978:	d301      	bcc.n	801797e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801797a:	2301      	movs	r3, #1
 801797c:	e00f      	b.n	801799e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801797e:	4a0a      	ldr	r2, [pc, #40]	@ (80179a8 <SysTick_Config+0x40>)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	3b01      	subs	r3, #1
 8017984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017986:	210f      	movs	r1, #15
 8017988:	f04f 30ff 	mov.w	r0, #4294967295
 801798c:	f7ff ff8e 	bl	80178ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8017990:	4b05      	ldr	r3, [pc, #20]	@ (80179a8 <SysTick_Config+0x40>)
 8017992:	2200      	movs	r2, #0
 8017994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017996:	4b04      	ldr	r3, [pc, #16]	@ (80179a8 <SysTick_Config+0x40>)
 8017998:	2207      	movs	r2, #7
 801799a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801799c:	2300      	movs	r3, #0
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3708      	adds	r7, #8
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}
 80179a6:	bf00      	nop
 80179a8:	e000e010 	.word	0xe000e010

080179ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b082      	sub	sp, #8
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f7ff ff29 	bl	801780c <__NVIC_SetPriorityGrouping>
}
 80179ba:	bf00      	nop
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}

080179c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80179c2:	b580      	push	{r7, lr}
 80179c4:	b086      	sub	sp, #24
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	4603      	mov	r3, r0
 80179ca:	60b9      	str	r1, [r7, #8]
 80179cc:	607a      	str	r2, [r7, #4]
 80179ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80179d0:	2300      	movs	r3, #0
 80179d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80179d4:	f7ff ff3e 	bl	8017854 <__NVIC_GetPriorityGrouping>
 80179d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	68b9      	ldr	r1, [r7, #8]
 80179de:	6978      	ldr	r0, [r7, #20]
 80179e0:	f7ff ff8e 	bl	8017900 <NVIC_EncodePriority>
 80179e4:	4602      	mov	r2, r0
 80179e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179ea:	4611      	mov	r1, r2
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7ff ff5d 	bl	80178ac <__NVIC_SetPriority>
}
 80179f2:	bf00      	nop
 80179f4:	3718      	adds	r7, #24
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}

080179fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80179fa:	b580      	push	{r7, lr}
 80179fc:	b082      	sub	sp, #8
 80179fe:	af00      	add	r7, sp, #0
 8017a00:	4603      	mov	r3, r0
 8017a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7ff ff31 	bl	8017870 <__NVIC_EnableIRQ>
}
 8017a0e:	bf00      	nop
 8017a10:	3708      	adds	r7, #8
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}

08017a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017a16:	b580      	push	{r7, lr}
 8017a18:	b082      	sub	sp, #8
 8017a1a:	af00      	add	r7, sp, #0
 8017a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7ff ffa2 	bl	8017968 <SysTick_Config>
 8017a24:	4603      	mov	r3, r0
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3708      	adds	r7, #8
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}

08017a2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8017a2e:	b480      	push	{r7}
 8017a30:	b085      	sub	sp, #20
 8017a32:	af00      	add	r7, sp, #0
 8017a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017a36:	2300      	movs	r3, #0
 8017a38:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2b02      	cmp	r3, #2
 8017a44:	d008      	beq.n	8017a58 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	2204      	movs	r2, #4
 8017a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	2200      	movs	r2, #0
 8017a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8017a54:	2301      	movs	r3, #1
 8017a56:	e022      	b.n	8017a9e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	681a      	ldr	r2, [r3, #0]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	f022 020e 	bic.w	r2, r2, #14
 8017a66:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	681a      	ldr	r2, [r3, #0]
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	f022 0201 	bic.w	r2, r2, #1
 8017a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a7c:	f003 021c 	and.w	r2, r3, #28
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a84:	2101      	movs	r1, #1
 8017a86:	fa01 f202 	lsl.w	r2, r1, r2
 8017a8a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2201      	movs	r2, #1
 8017a90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2200      	movs	r2, #0
 8017a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8017a9c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3714      	adds	r7, #20
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa8:	4770      	bx	lr

08017aaa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8017aaa:	b580      	push	{r7, lr}
 8017aac:	b084      	sub	sp, #16
 8017aae:	af00      	add	r7, sp, #0
 8017ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	d005      	beq.n	8017ace <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2204      	movs	r2, #4
 8017ac6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8017ac8:	2301      	movs	r3, #1
 8017aca:	73fb      	strb	r3, [r7, #15]
 8017acc:	e029      	b.n	8017b22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	681a      	ldr	r2, [r3, #0]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	f022 020e 	bic.w	r2, r2, #14
 8017adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	681a      	ldr	r2, [r3, #0]
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	f022 0201 	bic.w	r2, r2, #1
 8017aec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017af2:	f003 021c 	and.w	r2, r3, #28
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017afa:	2101      	movs	r1, #1
 8017afc:	fa01 f202 	lsl.w	r2, r1, r2
 8017b00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2201      	movs	r2, #1
 8017b06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d003      	beq.n	8017b22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b1e:	6878      	ldr	r0, [r7, #4]
 8017b20:	4798      	blx	r3
    }
  }
  return status;
 8017b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3710      	adds	r7, #16
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}

08017b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017b2c:	b480      	push	{r7}
 8017b2e:	b087      	sub	sp, #28
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8017b36:	2300      	movs	r3, #0
 8017b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8017b3a:	e154      	b.n	8017de6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	681a      	ldr	r2, [r3, #0]
 8017b40:	2101      	movs	r1, #1
 8017b42:	697b      	ldr	r3, [r7, #20]
 8017b44:	fa01 f303 	lsl.w	r3, r1, r3
 8017b48:	4013      	ands	r3, r2
 8017b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	f000 8146 	beq.w	8017de0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	685b      	ldr	r3, [r3, #4]
 8017b58:	f003 0303 	and.w	r3, r3, #3
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d005      	beq.n	8017b6c <HAL_GPIO_Init+0x40>
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	685b      	ldr	r3, [r3, #4]
 8017b64:	f003 0303 	and.w	r3, r3, #3
 8017b68:	2b02      	cmp	r3, #2
 8017b6a:	d130      	bne.n	8017bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	689b      	ldr	r3, [r3, #8]
 8017b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	005b      	lsls	r3, r3, #1
 8017b76:	2203      	movs	r2, #3
 8017b78:	fa02 f303 	lsl.w	r3, r2, r3
 8017b7c:	43db      	mvns	r3, r3
 8017b7e:	693a      	ldr	r2, [r7, #16]
 8017b80:	4013      	ands	r3, r2
 8017b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8017b84:	683b      	ldr	r3, [r7, #0]
 8017b86:	68da      	ldr	r2, [r3, #12]
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	005b      	lsls	r3, r3, #1
 8017b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8017b90:	693a      	ldr	r2, [r7, #16]
 8017b92:	4313      	orrs	r3, r2
 8017b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	693a      	ldr	r2, [r7, #16]
 8017b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	685b      	ldr	r3, [r3, #4]
 8017ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8017baa:	43db      	mvns	r3, r3
 8017bac:	693a      	ldr	r2, [r7, #16]
 8017bae:	4013      	ands	r3, r2
 8017bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	091b      	lsrs	r3, r3, #4
 8017bb8:	f003 0201 	and.w	r2, r3, #1
 8017bbc:	697b      	ldr	r3, [r7, #20]
 8017bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8017bc2:	693a      	ldr	r2, [r7, #16]
 8017bc4:	4313      	orrs	r3, r2
 8017bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	693a      	ldr	r2, [r7, #16]
 8017bcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	685b      	ldr	r3, [r3, #4]
 8017bd2:	f003 0303 	and.w	r3, r3, #3
 8017bd6:	2b03      	cmp	r3, #3
 8017bd8:	d017      	beq.n	8017c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	68db      	ldr	r3, [r3, #12]
 8017bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	005b      	lsls	r3, r3, #1
 8017be4:	2203      	movs	r2, #3
 8017be6:	fa02 f303 	lsl.w	r3, r2, r3
 8017bea:	43db      	mvns	r3, r3
 8017bec:	693a      	ldr	r2, [r7, #16]
 8017bee:	4013      	ands	r3, r2
 8017bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017bf2:	683b      	ldr	r3, [r7, #0]
 8017bf4:	689a      	ldr	r2, [r3, #8]
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	005b      	lsls	r3, r3, #1
 8017bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8017bfe:	693a      	ldr	r2, [r7, #16]
 8017c00:	4313      	orrs	r3, r2
 8017c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	693a      	ldr	r2, [r7, #16]
 8017c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	685b      	ldr	r3, [r3, #4]
 8017c0e:	f003 0303 	and.w	r3, r3, #3
 8017c12:	2b02      	cmp	r3, #2
 8017c14:	d123      	bne.n	8017c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	08da      	lsrs	r2, r3, #3
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	3208      	adds	r2, #8
 8017c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	f003 0307 	and.w	r3, r3, #7
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	220f      	movs	r2, #15
 8017c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8017c32:	43db      	mvns	r3, r3
 8017c34:	693a      	ldr	r2, [r7, #16]
 8017c36:	4013      	ands	r3, r2
 8017c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	691a      	ldr	r2, [r3, #16]
 8017c3e:	697b      	ldr	r3, [r7, #20]
 8017c40:	f003 0307 	and.w	r3, r3, #7
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	fa02 f303 	lsl.w	r3, r2, r3
 8017c4a:	693a      	ldr	r2, [r7, #16]
 8017c4c:	4313      	orrs	r3, r2
 8017c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8017c50:	697b      	ldr	r3, [r7, #20]
 8017c52:	08da      	lsrs	r2, r3, #3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	3208      	adds	r2, #8
 8017c58:	6939      	ldr	r1, [r7, #16]
 8017c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	005b      	lsls	r3, r3, #1
 8017c68:	2203      	movs	r2, #3
 8017c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8017c6e:	43db      	mvns	r3, r3
 8017c70:	693a      	ldr	r2, [r7, #16]
 8017c72:	4013      	ands	r3, r2
 8017c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	f003 0203 	and.w	r2, r3, #3
 8017c7e:	697b      	ldr	r3, [r7, #20]
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	fa02 f303 	lsl.w	r3, r2, r3
 8017c86:	693a      	ldr	r2, [r7, #16]
 8017c88:	4313      	orrs	r3, r2
 8017c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	693a      	ldr	r2, [r7, #16]
 8017c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	f000 80a0 	beq.w	8017de0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017ca0:	4b58      	ldr	r3, [pc, #352]	@ (8017e04 <HAL_GPIO_Init+0x2d8>)
 8017ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017ca4:	4a57      	ldr	r2, [pc, #348]	@ (8017e04 <HAL_GPIO_Init+0x2d8>)
 8017ca6:	f043 0301 	orr.w	r3, r3, #1
 8017caa:	6613      	str	r3, [r2, #96]	@ 0x60
 8017cac:	4b55      	ldr	r3, [pc, #340]	@ (8017e04 <HAL_GPIO_Init+0x2d8>)
 8017cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017cb0:	f003 0301 	and.w	r3, r3, #1
 8017cb4:	60bb      	str	r3, [r7, #8]
 8017cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8017cb8:	4a53      	ldr	r2, [pc, #332]	@ (8017e08 <HAL_GPIO_Init+0x2dc>)
 8017cba:	697b      	ldr	r3, [r7, #20]
 8017cbc:	089b      	lsrs	r3, r3, #2
 8017cbe:	3302      	adds	r3, #2
 8017cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8017cc6:	697b      	ldr	r3, [r7, #20]
 8017cc8:	f003 0303 	and.w	r3, r3, #3
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	220f      	movs	r2, #15
 8017cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8017cd4:	43db      	mvns	r3, r3
 8017cd6:	693a      	ldr	r2, [r7, #16]
 8017cd8:	4013      	ands	r3, r2
 8017cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8017ce2:	d019      	beq.n	8017d18 <HAL_GPIO_Init+0x1ec>
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	4a49      	ldr	r2, [pc, #292]	@ (8017e0c <HAL_GPIO_Init+0x2e0>)
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d013      	beq.n	8017d14 <HAL_GPIO_Init+0x1e8>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	4a48      	ldr	r2, [pc, #288]	@ (8017e10 <HAL_GPIO_Init+0x2e4>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d00d      	beq.n	8017d10 <HAL_GPIO_Init+0x1e4>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	4a47      	ldr	r2, [pc, #284]	@ (8017e14 <HAL_GPIO_Init+0x2e8>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d007      	beq.n	8017d0c <HAL_GPIO_Init+0x1e0>
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	4a46      	ldr	r2, [pc, #280]	@ (8017e18 <HAL_GPIO_Init+0x2ec>)
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d101      	bne.n	8017d08 <HAL_GPIO_Init+0x1dc>
 8017d04:	2304      	movs	r3, #4
 8017d06:	e008      	b.n	8017d1a <HAL_GPIO_Init+0x1ee>
 8017d08:	2307      	movs	r3, #7
 8017d0a:	e006      	b.n	8017d1a <HAL_GPIO_Init+0x1ee>
 8017d0c:	2303      	movs	r3, #3
 8017d0e:	e004      	b.n	8017d1a <HAL_GPIO_Init+0x1ee>
 8017d10:	2302      	movs	r3, #2
 8017d12:	e002      	b.n	8017d1a <HAL_GPIO_Init+0x1ee>
 8017d14:	2301      	movs	r3, #1
 8017d16:	e000      	b.n	8017d1a <HAL_GPIO_Init+0x1ee>
 8017d18:	2300      	movs	r3, #0
 8017d1a:	697a      	ldr	r2, [r7, #20]
 8017d1c:	f002 0203 	and.w	r2, r2, #3
 8017d20:	0092      	lsls	r2, r2, #2
 8017d22:	4093      	lsls	r3, r2
 8017d24:	693a      	ldr	r2, [r7, #16]
 8017d26:	4313      	orrs	r3, r2
 8017d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8017d2a:	4937      	ldr	r1, [pc, #220]	@ (8017e08 <HAL_GPIO_Init+0x2dc>)
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	089b      	lsrs	r3, r3, #2
 8017d30:	3302      	adds	r3, #2
 8017d32:	693a      	ldr	r2, [r7, #16]
 8017d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8017d38:	4b38      	ldr	r3, [pc, #224]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017d3a:	689b      	ldr	r3, [r3, #8]
 8017d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	43db      	mvns	r3, r3
 8017d42:	693a      	ldr	r2, [r7, #16]
 8017d44:	4013      	ands	r3, r2
 8017d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	685b      	ldr	r3, [r3, #4]
 8017d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d003      	beq.n	8017d5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8017d54:	693a      	ldr	r2, [r7, #16]
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	4313      	orrs	r3, r2
 8017d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8017d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8017d62:	4b2e      	ldr	r3, [pc, #184]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017d64:	68db      	ldr	r3, [r3, #12]
 8017d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	43db      	mvns	r3, r3
 8017d6c:	693a      	ldr	r2, [r7, #16]
 8017d6e:	4013      	ands	r3, r2
 8017d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d003      	beq.n	8017d86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8017d7e:	693a      	ldr	r2, [r7, #16]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	4313      	orrs	r3, r2
 8017d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8017d86:	4a25      	ldr	r2, [pc, #148]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8017d8c:	4b23      	ldr	r3, [pc, #140]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017d8e:	685b      	ldr	r3, [r3, #4]
 8017d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	43db      	mvns	r3, r3
 8017d96:	693a      	ldr	r2, [r7, #16]
 8017d98:	4013      	ands	r3, r2
 8017d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d003      	beq.n	8017db0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8017da8:	693a      	ldr	r2, [r7, #16]
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	4313      	orrs	r3, r2
 8017dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8017db0:	4a1a      	ldr	r2, [pc, #104]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017db2:	693b      	ldr	r3, [r7, #16]
 8017db4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8017db6:	4b19      	ldr	r3, [pc, #100]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	43db      	mvns	r3, r3
 8017dc0:	693a      	ldr	r2, [r7, #16]
 8017dc2:	4013      	ands	r3, r2
 8017dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8017dc6:	683b      	ldr	r3, [r7, #0]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d003      	beq.n	8017dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8017dd2:	693a      	ldr	r2, [r7, #16]
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	4313      	orrs	r3, r2
 8017dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8017dda:	4a10      	ldr	r2, [pc, #64]	@ (8017e1c <HAL_GPIO_Init+0x2f0>)
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	3301      	adds	r3, #1
 8017de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	681a      	ldr	r2, [r3, #0]
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	fa22 f303 	lsr.w	r3, r2, r3
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	f47f aea3 	bne.w	8017b3c <HAL_GPIO_Init+0x10>
  }
}
 8017df6:	bf00      	nop
 8017df8:	bf00      	nop
 8017dfa:	371c      	adds	r7, #28
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	40021000 	.word	0x40021000
 8017e08:	40010000 	.word	0x40010000
 8017e0c:	48000400 	.word	0x48000400
 8017e10:	48000800 	.word	0x48000800
 8017e14:	48000c00 	.word	0x48000c00
 8017e18:	48001000 	.word	0x48001000
 8017e1c:	40010400 	.word	0x40010400

08017e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017e20:	b480      	push	{r7}
 8017e22:	b085      	sub	sp, #20
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
 8017e28:	460b      	mov	r3, r1
 8017e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	691a      	ldr	r2, [r3, #16]
 8017e30:	887b      	ldrh	r3, [r7, #2]
 8017e32:	4013      	ands	r3, r2
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d002      	beq.n	8017e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017e38:	2301      	movs	r3, #1
 8017e3a:	73fb      	strb	r3, [r7, #15]
 8017e3c:	e001      	b.n	8017e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3714      	adds	r7, #20
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4e:	4770      	bx	lr

08017e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017e50:	b480      	push	{r7}
 8017e52:	b083      	sub	sp, #12
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
 8017e58:	460b      	mov	r3, r1
 8017e5a:	807b      	strh	r3, [r7, #2]
 8017e5c:	4613      	mov	r3, r2
 8017e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017e60:	787b      	ldrb	r3, [r7, #1]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d003      	beq.n	8017e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8017e66:	887a      	ldrh	r2, [r7, #2]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8017e6c:	e002      	b.n	8017e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8017e6e:	887a      	ldrh	r2, [r7, #2]
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8017e74:	bf00      	nop
 8017e76:	370c      	adds	r7, #12
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7e:	4770      	bx	lr

08017e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	4603      	mov	r3, r0
 8017e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8017e8a:	4b08      	ldr	r3, [pc, #32]	@ (8017eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017e8c:	695a      	ldr	r2, [r3, #20]
 8017e8e:	88fb      	ldrh	r3, [r7, #6]
 8017e90:	4013      	ands	r3, r2
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d006      	beq.n	8017ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8017e96:	4a05      	ldr	r2, [pc, #20]	@ (8017eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017e98:	88fb      	ldrh	r3, [r7, #6]
 8017e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017e9c:	88fb      	ldrh	r3, [r7, #6]
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7e9 f98c 	bl	80011bc <HAL_GPIO_EXTI_Callback>
  }
}
 8017ea4:	bf00      	nop
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}
 8017eac:	40010400 	.word	0x40010400

08017eb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8017eb4:	4b04      	ldr	r3, [pc, #16]	@ (8017ec8 <HAL_PWREx_GetVoltageRange+0x18>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec4:	4770      	bx	lr
 8017ec6:	bf00      	nop
 8017ec8:	40007000 	.word	0x40007000

08017ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b085      	sub	sp, #20
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017eda:	d130      	bne.n	8017f3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8017edc:	4b23      	ldr	r3, [pc, #140]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ee8:	d038      	beq.n	8017f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8017eea:	4b20      	ldr	r3, [pc, #128]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8017ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017ef4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017ef8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8017efa:	4b1d      	ldr	r3, [pc, #116]	@ (8017f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2232      	movs	r2, #50	@ 0x32
 8017f00:	fb02 f303 	mul.w	r3, r2, r3
 8017f04:	4a1b      	ldr	r2, [pc, #108]	@ (8017f74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8017f06:	fba2 2303 	umull	r2, r3, r2, r3
 8017f0a:	0c9b      	lsrs	r3, r3, #18
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8017f10:	e002      	b.n	8017f18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	3b01      	subs	r3, #1
 8017f16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8017f18:	4b14      	ldr	r3, [pc, #80]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017f1a:	695b      	ldr	r3, [r3, #20]
 8017f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017f24:	d102      	bne.n	8017f2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d1f2      	bne.n	8017f12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8017f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017f2e:	695b      	ldr	r3, [r3, #20]
 8017f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017f38:	d110      	bne.n	8017f5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8017f3a:	2303      	movs	r3, #3
 8017f3c:	e00f      	b.n	8017f5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8017f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017f4a:	d007      	beq.n	8017f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8017f4c:	4b07      	ldr	r3, [pc, #28]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8017f54:	4a05      	ldr	r2, [pc, #20]	@ (8017f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8017f5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8017f5c:	2300      	movs	r3, #0
}
 8017f5e:	4618      	mov	r0, r3
 8017f60:	3714      	adds	r7, #20
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr
 8017f6a:	bf00      	nop
 8017f6c:	40007000 	.word	0x40007000
 8017f70:	20000004 	.word	0x20000004
 8017f74:	431bde83 	.word	0x431bde83

08017f78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b088      	sub	sp, #32
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d102      	bne.n	8017f8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017f86:	2301      	movs	r3, #1
 8017f88:	f000 bc02 	b.w	8018790 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017f8c:	4b96      	ldr	r3, [pc, #600]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8017f8e:	689b      	ldr	r3, [r3, #8]
 8017f90:	f003 030c 	and.w	r3, r3, #12
 8017f94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017f96:	4b94      	ldr	r3, [pc, #592]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8017f98:	68db      	ldr	r3, [r3, #12]
 8017f9a:	f003 0303 	and.w	r3, r3, #3
 8017f9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	f003 0310 	and.w	r3, r3, #16
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	f000 80e4 	beq.w	8018176 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8017fae:	69bb      	ldr	r3, [r7, #24]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d007      	beq.n	8017fc4 <HAL_RCC_OscConfig+0x4c>
 8017fb4:	69bb      	ldr	r3, [r7, #24]
 8017fb6:	2b0c      	cmp	r3, #12
 8017fb8:	f040 808b 	bne.w	80180d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	f040 8087 	bne.w	80180d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017fc4:	4b88      	ldr	r3, [pc, #544]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	f003 0302 	and.w	r3, r3, #2
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d005      	beq.n	8017fdc <HAL_RCC_OscConfig+0x64>
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	699b      	ldr	r3, [r3, #24]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d101      	bne.n	8017fdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	e3d9      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6a1a      	ldr	r2, [r3, #32]
 8017fe0:	4b81      	ldr	r3, [pc, #516]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	f003 0308 	and.w	r3, r3, #8
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d004      	beq.n	8017ff6 <HAL_RCC_OscConfig+0x7e>
 8017fec:	4b7e      	ldr	r3, [pc, #504]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017ff4:	e005      	b.n	8018002 <HAL_RCC_OscConfig+0x8a>
 8017ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8017ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017ffc:	091b      	lsrs	r3, r3, #4
 8017ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018002:	4293      	cmp	r3, r2
 8018004:	d223      	bcs.n	801804e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6a1b      	ldr	r3, [r3, #32]
 801800a:	4618      	mov	r0, r3
 801800c:	f000 fd8c 	bl	8018b28 <RCC_SetFlashLatencyFromMSIRange>
 8018010:	4603      	mov	r3, r0
 8018012:	2b00      	cmp	r3, #0
 8018014:	d001      	beq.n	801801a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8018016:	2301      	movs	r3, #1
 8018018:	e3ba      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801801a:	4b73      	ldr	r3, [pc, #460]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4a72      	ldr	r2, [pc, #456]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018020:	f043 0308 	orr.w	r3, r3, #8
 8018024:	6013      	str	r3, [r2, #0]
 8018026:	4b70      	ldr	r3, [pc, #448]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	6a1b      	ldr	r3, [r3, #32]
 8018032:	496d      	ldr	r1, [pc, #436]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018034:	4313      	orrs	r3, r2
 8018036:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018038:	4b6b      	ldr	r3, [pc, #428]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	69db      	ldr	r3, [r3, #28]
 8018044:	021b      	lsls	r3, r3, #8
 8018046:	4968      	ldr	r1, [pc, #416]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018048:	4313      	orrs	r3, r2
 801804a:	604b      	str	r3, [r1, #4]
 801804c:	e025      	b.n	801809a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801804e:	4b66      	ldr	r3, [pc, #408]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	4a65      	ldr	r2, [pc, #404]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018054:	f043 0308 	orr.w	r3, r3, #8
 8018058:	6013      	str	r3, [r2, #0]
 801805a:	4b63      	ldr	r3, [pc, #396]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	6a1b      	ldr	r3, [r3, #32]
 8018066:	4960      	ldr	r1, [pc, #384]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018068:	4313      	orrs	r3, r2
 801806a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801806c:	4b5e      	ldr	r3, [pc, #376]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801806e:	685b      	ldr	r3, [r3, #4]
 8018070:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	69db      	ldr	r3, [r3, #28]
 8018078:	021b      	lsls	r3, r3, #8
 801807a:	495b      	ldr	r1, [pc, #364]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801807c:	4313      	orrs	r3, r2
 801807e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018080:	69bb      	ldr	r3, [r7, #24]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d109      	bne.n	801809a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6a1b      	ldr	r3, [r3, #32]
 801808a:	4618      	mov	r0, r3
 801808c:	f000 fd4c 	bl	8018b28 <RCC_SetFlashLatencyFromMSIRange>
 8018090:	4603      	mov	r3, r0
 8018092:	2b00      	cmp	r3, #0
 8018094:	d001      	beq.n	801809a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8018096:	2301      	movs	r3, #1
 8018098:	e37a      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801809a:	f000 fc81 	bl	80189a0 <HAL_RCC_GetSysClockFreq>
 801809e:	4602      	mov	r2, r0
 80180a0:	4b51      	ldr	r3, [pc, #324]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80180a2:	689b      	ldr	r3, [r3, #8]
 80180a4:	091b      	lsrs	r3, r3, #4
 80180a6:	f003 030f 	and.w	r3, r3, #15
 80180aa:	4950      	ldr	r1, [pc, #320]	@ (80181ec <HAL_RCC_OscConfig+0x274>)
 80180ac:	5ccb      	ldrb	r3, [r1, r3]
 80180ae:	f003 031f 	and.w	r3, r3, #31
 80180b2:	fa22 f303 	lsr.w	r3, r2, r3
 80180b6:	4a4e      	ldr	r2, [pc, #312]	@ (80181f0 <HAL_RCC_OscConfig+0x278>)
 80180b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80180ba:	4b4e      	ldr	r3, [pc, #312]	@ (80181f4 <HAL_RCC_OscConfig+0x27c>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	4618      	mov	r0, r3
 80180c0:	f7ff fb24 	bl	801770c <HAL_InitTick>
 80180c4:	4603      	mov	r3, r0
 80180c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80180c8:	7bfb      	ldrb	r3, [r7, #15]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d052      	beq.n	8018174 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80180ce:	7bfb      	ldrb	r3, [r7, #15]
 80180d0:	e35e      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	699b      	ldr	r3, [r3, #24]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d032      	beq.n	8018140 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80180da:	4b43      	ldr	r3, [pc, #268]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	4a42      	ldr	r2, [pc, #264]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80180e0:	f043 0301 	orr.w	r3, r3, #1
 80180e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80180e6:	f7ff fb61 	bl	80177ac <HAL_GetTick>
 80180ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80180ec:	e008      	b.n	8018100 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80180ee:	f7ff fb5d 	bl	80177ac <HAL_GetTick>
 80180f2:	4602      	mov	r2, r0
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	1ad3      	subs	r3, r2, r3
 80180f8:	2b02      	cmp	r3, #2
 80180fa:	d901      	bls.n	8018100 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80180fc:	2303      	movs	r3, #3
 80180fe:	e347      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8018100:	4b39      	ldr	r3, [pc, #228]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	f003 0302 	and.w	r3, r3, #2
 8018108:	2b00      	cmp	r3, #0
 801810a:	d0f0      	beq.n	80180ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801810c:	4b36      	ldr	r3, [pc, #216]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	4a35      	ldr	r2, [pc, #212]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018112:	f043 0308 	orr.w	r3, r3, #8
 8018116:	6013      	str	r3, [r2, #0]
 8018118:	4b33      	ldr	r3, [pc, #204]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6a1b      	ldr	r3, [r3, #32]
 8018124:	4930      	ldr	r1, [pc, #192]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018126:	4313      	orrs	r3, r2
 8018128:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801812a:	4b2f      	ldr	r3, [pc, #188]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	69db      	ldr	r3, [r3, #28]
 8018136:	021b      	lsls	r3, r3, #8
 8018138:	492b      	ldr	r1, [pc, #172]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 801813a:	4313      	orrs	r3, r2
 801813c:	604b      	str	r3, [r1, #4]
 801813e:	e01a      	b.n	8018176 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8018140:	4b29      	ldr	r3, [pc, #164]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a28      	ldr	r2, [pc, #160]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018146:	f023 0301 	bic.w	r3, r3, #1
 801814a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801814c:	f7ff fb2e 	bl	80177ac <HAL_GetTick>
 8018150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8018152:	e008      	b.n	8018166 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018154:	f7ff fb2a 	bl	80177ac <HAL_GetTick>
 8018158:	4602      	mov	r2, r0
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	1ad3      	subs	r3, r2, r3
 801815e:	2b02      	cmp	r3, #2
 8018160:	d901      	bls.n	8018166 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8018162:	2303      	movs	r3, #3
 8018164:	e314      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8018166:	4b20      	ldr	r3, [pc, #128]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f003 0302 	and.w	r3, r3, #2
 801816e:	2b00      	cmp	r3, #0
 8018170:	d1f0      	bne.n	8018154 <HAL_RCC_OscConfig+0x1dc>
 8018172:	e000      	b.n	8018176 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8018174:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	f003 0301 	and.w	r3, r3, #1
 801817e:	2b00      	cmp	r3, #0
 8018180:	d073      	beq.n	801826a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8018182:	69bb      	ldr	r3, [r7, #24]
 8018184:	2b08      	cmp	r3, #8
 8018186:	d005      	beq.n	8018194 <HAL_RCC_OscConfig+0x21c>
 8018188:	69bb      	ldr	r3, [r7, #24]
 801818a:	2b0c      	cmp	r3, #12
 801818c:	d10e      	bne.n	80181ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801818e:	697b      	ldr	r3, [r7, #20]
 8018190:	2b03      	cmp	r3, #3
 8018192:	d10b      	bne.n	80181ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018194:	4b14      	ldr	r3, [pc, #80]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801819c:	2b00      	cmp	r3, #0
 801819e:	d063      	beq.n	8018268 <HAL_RCC_OscConfig+0x2f0>
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	685b      	ldr	r3, [r3, #4]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d15f      	bne.n	8018268 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80181a8:	2301      	movs	r3, #1
 80181aa:	e2f1      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80181b4:	d106      	bne.n	80181c4 <HAL_RCC_OscConfig+0x24c>
 80181b6:	4b0c      	ldr	r3, [pc, #48]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	4a0b      	ldr	r2, [pc, #44]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80181bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80181c0:	6013      	str	r3, [r2, #0]
 80181c2:	e025      	b.n	8018210 <HAL_RCC_OscConfig+0x298>
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	685b      	ldr	r3, [r3, #4]
 80181c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80181cc:	d114      	bne.n	80181f8 <HAL_RCC_OscConfig+0x280>
 80181ce:	4b06      	ldr	r3, [pc, #24]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	4a05      	ldr	r2, [pc, #20]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80181d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80181d8:	6013      	str	r3, [r2, #0]
 80181da:	4b03      	ldr	r3, [pc, #12]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4a02      	ldr	r2, [pc, #8]	@ (80181e8 <HAL_RCC_OscConfig+0x270>)
 80181e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80181e4:	6013      	str	r3, [r2, #0]
 80181e6:	e013      	b.n	8018210 <HAL_RCC_OscConfig+0x298>
 80181e8:	40021000 	.word	0x40021000
 80181ec:	0801fdd8 	.word	0x0801fdd8
 80181f0:	20000004 	.word	0x20000004
 80181f4:	20000018 	.word	0x20000018
 80181f8:	4ba0      	ldr	r3, [pc, #640]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	4a9f      	ldr	r2, [pc, #636]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80181fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8018202:	6013      	str	r3, [r2, #0]
 8018204:	4b9d      	ldr	r3, [pc, #628]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	4a9c      	ldr	r2, [pc, #624]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801820a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801820e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d013      	beq.n	8018240 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018218:	f7ff fac8 	bl	80177ac <HAL_GetTick>
 801821c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801821e:	e008      	b.n	8018232 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018220:	f7ff fac4 	bl	80177ac <HAL_GetTick>
 8018224:	4602      	mov	r2, r0
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	1ad3      	subs	r3, r2, r3
 801822a:	2b64      	cmp	r3, #100	@ 0x64
 801822c:	d901      	bls.n	8018232 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801822e:	2303      	movs	r3, #3
 8018230:	e2ae      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8018232:	4b92      	ldr	r3, [pc, #584]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801823a:	2b00      	cmp	r3, #0
 801823c:	d0f0      	beq.n	8018220 <HAL_RCC_OscConfig+0x2a8>
 801823e:	e014      	b.n	801826a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018240:	f7ff fab4 	bl	80177ac <HAL_GetTick>
 8018244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8018246:	e008      	b.n	801825a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018248:	f7ff fab0 	bl	80177ac <HAL_GetTick>
 801824c:	4602      	mov	r2, r0
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	1ad3      	subs	r3, r2, r3
 8018252:	2b64      	cmp	r3, #100	@ 0x64
 8018254:	d901      	bls.n	801825a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8018256:	2303      	movs	r3, #3
 8018258:	e29a      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801825a:	4b88      	ldr	r3, [pc, #544]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018262:	2b00      	cmp	r3, #0
 8018264:	d1f0      	bne.n	8018248 <HAL_RCC_OscConfig+0x2d0>
 8018266:	e000      	b.n	801826a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	f003 0302 	and.w	r3, r3, #2
 8018272:	2b00      	cmp	r3, #0
 8018274:	d060      	beq.n	8018338 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8018276:	69bb      	ldr	r3, [r7, #24]
 8018278:	2b04      	cmp	r3, #4
 801827a:	d005      	beq.n	8018288 <HAL_RCC_OscConfig+0x310>
 801827c:	69bb      	ldr	r3, [r7, #24]
 801827e:	2b0c      	cmp	r3, #12
 8018280:	d119      	bne.n	80182b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	2b02      	cmp	r3, #2
 8018286:	d116      	bne.n	80182b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8018288:	4b7c      	ldr	r3, [pc, #496]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018290:	2b00      	cmp	r3, #0
 8018292:	d005      	beq.n	80182a0 <HAL_RCC_OscConfig+0x328>
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	68db      	ldr	r3, [r3, #12]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d101      	bne.n	80182a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801829c:	2301      	movs	r3, #1
 801829e:	e277      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80182a0:	4b76      	ldr	r3, [pc, #472]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80182a2:	685b      	ldr	r3, [r3, #4]
 80182a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	691b      	ldr	r3, [r3, #16]
 80182ac:	061b      	lsls	r3, r3, #24
 80182ae:	4973      	ldr	r1, [pc, #460]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80182b0:	4313      	orrs	r3, r2
 80182b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80182b4:	e040      	b.n	8018338 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	68db      	ldr	r3, [r3, #12]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d023      	beq.n	8018306 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80182be:	4b6f      	ldr	r3, [pc, #444]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	4a6e      	ldr	r2, [pc, #440]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80182c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80182c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80182ca:	f7ff fa6f 	bl	80177ac <HAL_GetTick>
 80182ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80182d0:	e008      	b.n	80182e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80182d2:	f7ff fa6b 	bl	80177ac <HAL_GetTick>
 80182d6:	4602      	mov	r2, r0
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	1ad3      	subs	r3, r2, r3
 80182dc:	2b02      	cmp	r3, #2
 80182de:	d901      	bls.n	80182e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80182e0:	2303      	movs	r3, #3
 80182e2:	e255      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80182e4:	4b65      	ldr	r3, [pc, #404]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d0f0      	beq.n	80182d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80182f0:	4b62      	ldr	r3, [pc, #392]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	691b      	ldr	r3, [r3, #16]
 80182fc:	061b      	lsls	r3, r3, #24
 80182fe:	495f      	ldr	r1, [pc, #380]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018300:	4313      	orrs	r3, r2
 8018302:	604b      	str	r3, [r1, #4]
 8018304:	e018      	b.n	8018338 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018306:	4b5d      	ldr	r3, [pc, #372]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	4a5c      	ldr	r2, [pc, #368]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801830c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018312:	f7ff fa4b 	bl	80177ac <HAL_GetTick>
 8018316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8018318:	e008      	b.n	801832c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801831a:	f7ff fa47 	bl	80177ac <HAL_GetTick>
 801831e:	4602      	mov	r2, r0
 8018320:	693b      	ldr	r3, [r7, #16]
 8018322:	1ad3      	subs	r3, r2, r3
 8018324:	2b02      	cmp	r3, #2
 8018326:	d901      	bls.n	801832c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8018328:	2303      	movs	r3, #3
 801832a:	e231      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801832c:	4b53      	ldr	r3, [pc, #332]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018334:	2b00      	cmp	r3, #0
 8018336:	d1f0      	bne.n	801831a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f003 0308 	and.w	r3, r3, #8
 8018340:	2b00      	cmp	r3, #0
 8018342:	d03c      	beq.n	80183be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	695b      	ldr	r3, [r3, #20]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d01c      	beq.n	8018386 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801834c:	4b4b      	ldr	r3, [pc, #300]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801834e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8018352:	4a4a      	ldr	r2, [pc, #296]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018354:	f043 0301 	orr.w	r3, r3, #1
 8018358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801835c:	f7ff fa26 	bl	80177ac <HAL_GetTick>
 8018360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8018362:	e008      	b.n	8018376 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018364:	f7ff fa22 	bl	80177ac <HAL_GetTick>
 8018368:	4602      	mov	r2, r0
 801836a:	693b      	ldr	r3, [r7, #16]
 801836c:	1ad3      	subs	r3, r2, r3
 801836e:	2b02      	cmp	r3, #2
 8018370:	d901      	bls.n	8018376 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8018372:	2303      	movs	r3, #3
 8018374:	e20c      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8018376:	4b41      	ldr	r3, [pc, #260]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801837c:	f003 0302 	and.w	r3, r3, #2
 8018380:	2b00      	cmp	r3, #0
 8018382:	d0ef      	beq.n	8018364 <HAL_RCC_OscConfig+0x3ec>
 8018384:	e01b      	b.n	80183be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018386:	4b3d      	ldr	r3, [pc, #244]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801838c:	4a3b      	ldr	r2, [pc, #236]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801838e:	f023 0301 	bic.w	r3, r3, #1
 8018392:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018396:	f7ff fa09 	bl	80177ac <HAL_GetTick>
 801839a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801839c:	e008      	b.n	80183b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801839e:	f7ff fa05 	bl	80177ac <HAL_GetTick>
 80183a2:	4602      	mov	r2, r0
 80183a4:	693b      	ldr	r3, [r7, #16]
 80183a6:	1ad3      	subs	r3, r2, r3
 80183a8:	2b02      	cmp	r3, #2
 80183aa:	d901      	bls.n	80183b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80183ac:	2303      	movs	r3, #3
 80183ae:	e1ef      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80183b0:	4b32      	ldr	r3, [pc, #200]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80183b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80183b6:	f003 0302 	and.w	r3, r3, #2
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d1ef      	bne.n	801839e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f003 0304 	and.w	r3, r3, #4
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	f000 80a6 	beq.w	8018518 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80183cc:	2300      	movs	r3, #0
 80183ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80183d0:	4b2a      	ldr	r3, [pc, #168]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80183d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d10d      	bne.n	80183f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80183dc:	4b27      	ldr	r3, [pc, #156]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80183de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183e0:	4a26      	ldr	r2, [pc, #152]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80183e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80183e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80183e8:	4b24      	ldr	r3, [pc, #144]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 80183ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80183f0:	60bb      	str	r3, [r7, #8]
 80183f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80183f4:	2301      	movs	r3, #1
 80183f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80183f8:	4b21      	ldr	r3, [pc, #132]	@ (8018480 <HAL_RCC_OscConfig+0x508>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018400:	2b00      	cmp	r3, #0
 8018402:	d118      	bne.n	8018436 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8018404:	4b1e      	ldr	r3, [pc, #120]	@ (8018480 <HAL_RCC_OscConfig+0x508>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	4a1d      	ldr	r2, [pc, #116]	@ (8018480 <HAL_RCC_OscConfig+0x508>)
 801840a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801840e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018410:	f7ff f9cc 	bl	80177ac <HAL_GetTick>
 8018414:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018416:	e008      	b.n	801842a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018418:	f7ff f9c8 	bl	80177ac <HAL_GetTick>
 801841c:	4602      	mov	r2, r0
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	1ad3      	subs	r3, r2, r3
 8018422:	2b02      	cmp	r3, #2
 8018424:	d901      	bls.n	801842a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8018426:	2303      	movs	r3, #3
 8018428:	e1b2      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801842a:	4b15      	ldr	r3, [pc, #84]	@ (8018480 <HAL_RCC_OscConfig+0x508>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018432:	2b00      	cmp	r3, #0
 8018434:	d0f0      	beq.n	8018418 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	689b      	ldr	r3, [r3, #8]
 801843a:	2b01      	cmp	r3, #1
 801843c:	d108      	bne.n	8018450 <HAL_RCC_OscConfig+0x4d8>
 801843e:	4b0f      	ldr	r3, [pc, #60]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018444:	4a0d      	ldr	r2, [pc, #52]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018446:	f043 0301 	orr.w	r3, r3, #1
 801844a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801844e:	e029      	b.n	80184a4 <HAL_RCC_OscConfig+0x52c>
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	2b05      	cmp	r3, #5
 8018456:	d115      	bne.n	8018484 <HAL_RCC_OscConfig+0x50c>
 8018458:	4b08      	ldr	r3, [pc, #32]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801845e:	4a07      	ldr	r2, [pc, #28]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018460:	f043 0304 	orr.w	r3, r3, #4
 8018464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018468:	4b04      	ldr	r3, [pc, #16]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 801846a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801846e:	4a03      	ldr	r2, [pc, #12]	@ (801847c <HAL_RCC_OscConfig+0x504>)
 8018470:	f043 0301 	orr.w	r3, r3, #1
 8018474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018478:	e014      	b.n	80184a4 <HAL_RCC_OscConfig+0x52c>
 801847a:	bf00      	nop
 801847c:	40021000 	.word	0x40021000
 8018480:	40007000 	.word	0x40007000
 8018484:	4b9a      	ldr	r3, [pc, #616]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801848a:	4a99      	ldr	r2, [pc, #612]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801848c:	f023 0301 	bic.w	r3, r3, #1
 8018490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018494:	4b96      	ldr	r3, [pc, #600]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801849a:	4a95      	ldr	r2, [pc, #596]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801849c:	f023 0304 	bic.w	r3, r3, #4
 80184a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	689b      	ldr	r3, [r3, #8]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d016      	beq.n	80184da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80184ac:	f7ff f97e 	bl	80177ac <HAL_GetTick>
 80184b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80184b2:	e00a      	b.n	80184ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80184b4:	f7ff f97a 	bl	80177ac <HAL_GetTick>
 80184b8:	4602      	mov	r2, r0
 80184ba:	693b      	ldr	r3, [r7, #16]
 80184bc:	1ad3      	subs	r3, r2, r3
 80184be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80184c2:	4293      	cmp	r3, r2
 80184c4:	d901      	bls.n	80184ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80184c6:	2303      	movs	r3, #3
 80184c8:	e162      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80184ca:	4b89      	ldr	r3, [pc, #548]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80184cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80184d0:	f003 0302 	and.w	r3, r3, #2
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d0ed      	beq.n	80184b4 <HAL_RCC_OscConfig+0x53c>
 80184d8:	e015      	b.n	8018506 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80184da:	f7ff f967 	bl	80177ac <HAL_GetTick>
 80184de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80184e0:	e00a      	b.n	80184f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80184e2:	f7ff f963 	bl	80177ac <HAL_GetTick>
 80184e6:	4602      	mov	r2, r0
 80184e8:	693b      	ldr	r3, [r7, #16]
 80184ea:	1ad3      	subs	r3, r2, r3
 80184ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80184f0:	4293      	cmp	r3, r2
 80184f2:	d901      	bls.n	80184f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80184f4:	2303      	movs	r3, #3
 80184f6:	e14b      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80184f8:	4b7d      	ldr	r3, [pc, #500]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80184fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80184fe:	f003 0302 	and.w	r3, r3, #2
 8018502:	2b00      	cmp	r3, #0
 8018504:	d1ed      	bne.n	80184e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018506:	7ffb      	ldrb	r3, [r7, #31]
 8018508:	2b01      	cmp	r3, #1
 801850a:	d105      	bne.n	8018518 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801850c:	4b78      	ldr	r3, [pc, #480]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801850e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018510:	4a77      	ldr	r2, [pc, #476]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018516:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	f003 0320 	and.w	r3, r3, #32
 8018520:	2b00      	cmp	r3, #0
 8018522:	d03c      	beq.n	801859e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018528:	2b00      	cmp	r3, #0
 801852a:	d01c      	beq.n	8018566 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801852c:	4b70      	ldr	r3, [pc, #448]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801852e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018532:	4a6f      	ldr	r2, [pc, #444]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018534:	f043 0301 	orr.w	r3, r3, #1
 8018538:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801853c:	f7ff f936 	bl	80177ac <HAL_GetTick>
 8018540:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8018542:	e008      	b.n	8018556 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018544:	f7ff f932 	bl	80177ac <HAL_GetTick>
 8018548:	4602      	mov	r2, r0
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	1ad3      	subs	r3, r2, r3
 801854e:	2b02      	cmp	r3, #2
 8018550:	d901      	bls.n	8018556 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8018552:	2303      	movs	r3, #3
 8018554:	e11c      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8018556:	4b66      	ldr	r3, [pc, #408]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801855c:	f003 0302 	and.w	r3, r3, #2
 8018560:	2b00      	cmp	r3, #0
 8018562:	d0ef      	beq.n	8018544 <HAL_RCC_OscConfig+0x5cc>
 8018564:	e01b      	b.n	801859e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8018566:	4b62      	ldr	r3, [pc, #392]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801856c:	4a60      	ldr	r2, [pc, #384]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801856e:	f023 0301 	bic.w	r3, r3, #1
 8018572:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018576:	f7ff f919 	bl	80177ac <HAL_GetTick>
 801857a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801857c:	e008      	b.n	8018590 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801857e:	f7ff f915 	bl	80177ac <HAL_GetTick>
 8018582:	4602      	mov	r2, r0
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	1ad3      	subs	r3, r2, r3
 8018588:	2b02      	cmp	r3, #2
 801858a:	d901      	bls.n	8018590 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 801858c:	2303      	movs	r3, #3
 801858e:	e0ff      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018590:	4b57      	ldr	r3, [pc, #348]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018596:	f003 0302 	and.w	r3, r3, #2
 801859a:	2b00      	cmp	r3, #0
 801859c:	d1ef      	bne.n	801857e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	f000 80f3 	beq.w	801878e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185ac:	2b02      	cmp	r3, #2
 80185ae:	f040 80c9 	bne.w	8018744 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80185b2:	4b4f      	ldr	r3, [pc, #316]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80185b4:	68db      	ldr	r3, [r3, #12]
 80185b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	f003 0203 	and.w	r2, r3, #3
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d12c      	bne.n	8018620 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80185d0:	3b01      	subs	r3, #1
 80185d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d123      	bne.n	8018620 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d11b      	bne.n	8018620 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d113      	bne.n	8018620 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018602:	085b      	lsrs	r3, r3, #1
 8018604:	3b01      	subs	r3, #1
 8018606:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8018608:	429a      	cmp	r2, r3
 801860a:	d109      	bne.n	8018620 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018616:	085b      	lsrs	r3, r3, #1
 8018618:	3b01      	subs	r3, #1
 801861a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801861c:	429a      	cmp	r2, r3
 801861e:	d06b      	beq.n	80186f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8018620:	69bb      	ldr	r3, [r7, #24]
 8018622:	2b0c      	cmp	r3, #12
 8018624:	d062      	beq.n	80186ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8018626:	4b32      	ldr	r3, [pc, #200]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801862e:	2b00      	cmp	r3, #0
 8018630:	d001      	beq.n	8018636 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8018632:	2301      	movs	r3, #1
 8018634:	e0ac      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8018636:	4b2e      	ldr	r3, [pc, #184]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	4a2d      	ldr	r2, [pc, #180]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801863c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8018640:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8018642:	f7ff f8b3 	bl	80177ac <HAL_GetTick>
 8018646:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018648:	e008      	b.n	801865c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801864a:	f7ff f8af 	bl	80177ac <HAL_GetTick>
 801864e:	4602      	mov	r2, r0
 8018650:	693b      	ldr	r3, [r7, #16]
 8018652:	1ad3      	subs	r3, r2, r3
 8018654:	2b02      	cmp	r3, #2
 8018656:	d901      	bls.n	801865c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8018658:	2303      	movs	r3, #3
 801865a:	e099      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801865c:	4b24      	ldr	r3, [pc, #144]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018664:	2b00      	cmp	r3, #0
 8018666:	d1f0      	bne.n	801864a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018668:	4b21      	ldr	r3, [pc, #132]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 801866a:	68da      	ldr	r2, [r3, #12]
 801866c:	4b21      	ldr	r3, [pc, #132]	@ (80186f4 <HAL_RCC_OscConfig+0x77c>)
 801866e:	4013      	ands	r3, r2
 8018670:	687a      	ldr	r2, [r7, #4]
 8018672:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8018674:	687a      	ldr	r2, [r7, #4]
 8018676:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8018678:	3a01      	subs	r2, #1
 801867a:	0112      	lsls	r2, r2, #4
 801867c:	4311      	orrs	r1, r2
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018682:	0212      	lsls	r2, r2, #8
 8018684:	4311      	orrs	r1, r2
 8018686:	687a      	ldr	r2, [r7, #4]
 8018688:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801868a:	0852      	lsrs	r2, r2, #1
 801868c:	3a01      	subs	r2, #1
 801868e:	0552      	lsls	r2, r2, #21
 8018690:	4311      	orrs	r1, r2
 8018692:	687a      	ldr	r2, [r7, #4]
 8018694:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8018696:	0852      	lsrs	r2, r2, #1
 8018698:	3a01      	subs	r2, #1
 801869a:	0652      	lsls	r2, r2, #25
 801869c:	4311      	orrs	r1, r2
 801869e:	687a      	ldr	r2, [r7, #4]
 80186a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80186a2:	06d2      	lsls	r2, r2, #27
 80186a4:	430a      	orrs	r2, r1
 80186a6:	4912      	ldr	r1, [pc, #72]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80186a8:	4313      	orrs	r3, r2
 80186aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80186ac:	4b10      	ldr	r3, [pc, #64]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4a0f      	ldr	r2, [pc, #60]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80186b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80186b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80186b8:	4b0d      	ldr	r3, [pc, #52]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80186ba:	68db      	ldr	r3, [r3, #12]
 80186bc:	4a0c      	ldr	r2, [pc, #48]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80186be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80186c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80186c4:	f7ff f872 	bl	80177ac <HAL_GetTick>
 80186c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80186ca:	e008      	b.n	80186de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80186cc:	f7ff f86e 	bl	80177ac <HAL_GetTick>
 80186d0:	4602      	mov	r2, r0
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	1ad3      	subs	r3, r2, r3
 80186d6:	2b02      	cmp	r3, #2
 80186d8:	d901      	bls.n	80186de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80186da:	2303      	movs	r3, #3
 80186dc:	e058      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80186de:	4b04      	ldr	r3, [pc, #16]	@ (80186f0 <HAL_RCC_OscConfig+0x778>)
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d0f0      	beq.n	80186cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80186ea:	e050      	b.n	801878e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80186ec:	2301      	movs	r3, #1
 80186ee:	e04f      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
 80186f0:	40021000 	.word	0x40021000
 80186f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80186f8:	4b27      	ldr	r3, [pc, #156]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018700:	2b00      	cmp	r3, #0
 8018702:	d144      	bne.n	801878e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8018704:	4b24      	ldr	r3, [pc, #144]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	4a23      	ldr	r2, [pc, #140]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 801870a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801870e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018710:	4b21      	ldr	r3, [pc, #132]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018712:	68db      	ldr	r3, [r3, #12]
 8018714:	4a20      	ldr	r2, [pc, #128]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801871a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801871c:	f7ff f846 	bl	80177ac <HAL_GetTick>
 8018720:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018722:	e008      	b.n	8018736 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018724:	f7ff f842 	bl	80177ac <HAL_GetTick>
 8018728:	4602      	mov	r2, r0
 801872a:	693b      	ldr	r3, [r7, #16]
 801872c:	1ad3      	subs	r3, r2, r3
 801872e:	2b02      	cmp	r3, #2
 8018730:	d901      	bls.n	8018736 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8018732:	2303      	movs	r3, #3
 8018734:	e02c      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018736:	4b18      	ldr	r3, [pc, #96]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801873e:	2b00      	cmp	r3, #0
 8018740:	d0f0      	beq.n	8018724 <HAL_RCC_OscConfig+0x7ac>
 8018742:	e024      	b.n	801878e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8018744:	69bb      	ldr	r3, [r7, #24]
 8018746:	2b0c      	cmp	r3, #12
 8018748:	d01f      	beq.n	801878a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801874a:	4b13      	ldr	r3, [pc, #76]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	4a12      	ldr	r2, [pc, #72]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8018754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018756:	f7ff f829 	bl	80177ac <HAL_GetTick>
 801875a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801875c:	e008      	b.n	8018770 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801875e:	f7ff f825 	bl	80177ac <HAL_GetTick>
 8018762:	4602      	mov	r2, r0
 8018764:	693b      	ldr	r3, [r7, #16]
 8018766:	1ad3      	subs	r3, r2, r3
 8018768:	2b02      	cmp	r3, #2
 801876a:	d901      	bls.n	8018770 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 801876c:	2303      	movs	r3, #3
 801876e:	e00f      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018770:	4b09      	ldr	r3, [pc, #36]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018778:	2b00      	cmp	r3, #0
 801877a:	d1f0      	bne.n	801875e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801877c:	4b06      	ldr	r3, [pc, #24]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 801877e:	68da      	ldr	r2, [r3, #12]
 8018780:	4905      	ldr	r1, [pc, #20]	@ (8018798 <HAL_RCC_OscConfig+0x820>)
 8018782:	4b06      	ldr	r3, [pc, #24]	@ (801879c <HAL_RCC_OscConfig+0x824>)
 8018784:	4013      	ands	r3, r2
 8018786:	60cb      	str	r3, [r1, #12]
 8018788:	e001      	b.n	801878e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801878a:	2301      	movs	r3, #1
 801878c:	e000      	b.n	8018790 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 801878e:	2300      	movs	r3, #0
}
 8018790:	4618      	mov	r0, r3
 8018792:	3720      	adds	r7, #32
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}
 8018798:	40021000 	.word	0x40021000
 801879c:	feeefffc 	.word	0xfeeefffc

080187a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
 80187a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d101      	bne.n	80187b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80187b0:	2301      	movs	r3, #1
 80187b2:	e0e7      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80187b4:	4b75      	ldr	r3, [pc, #468]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f003 0307 	and.w	r3, r3, #7
 80187bc:	683a      	ldr	r2, [r7, #0]
 80187be:	429a      	cmp	r2, r3
 80187c0:	d910      	bls.n	80187e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80187c2:	4b72      	ldr	r3, [pc, #456]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	f023 0207 	bic.w	r2, r3, #7
 80187ca:	4970      	ldr	r1, [pc, #448]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	4313      	orrs	r3, r2
 80187d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80187d2:	4b6e      	ldr	r3, [pc, #440]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f003 0307 	and.w	r3, r3, #7
 80187da:	683a      	ldr	r2, [r7, #0]
 80187dc:	429a      	cmp	r2, r3
 80187de:	d001      	beq.n	80187e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80187e0:	2301      	movs	r3, #1
 80187e2:	e0cf      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	f003 0302 	and.w	r3, r3, #2
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d010      	beq.n	8018812 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	689a      	ldr	r2, [r3, #8]
 80187f4:	4b66      	ldr	r3, [pc, #408]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 80187f6:	689b      	ldr	r3, [r3, #8]
 80187f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d908      	bls.n	8018812 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018800:	4b63      	ldr	r3, [pc, #396]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018802:	689b      	ldr	r3, [r3, #8]
 8018804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	689b      	ldr	r3, [r3, #8]
 801880c:	4960      	ldr	r1, [pc, #384]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 801880e:	4313      	orrs	r3, r2
 8018810:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	f003 0301 	and.w	r3, r3, #1
 801881a:	2b00      	cmp	r3, #0
 801881c:	d04c      	beq.n	80188b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	685b      	ldr	r3, [r3, #4]
 8018822:	2b03      	cmp	r3, #3
 8018824:	d107      	bne.n	8018836 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018826:	4b5a      	ldr	r3, [pc, #360]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801882e:	2b00      	cmp	r3, #0
 8018830:	d121      	bne.n	8018876 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8018832:	2301      	movs	r3, #1
 8018834:	e0a6      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	685b      	ldr	r3, [r3, #4]
 801883a:	2b02      	cmp	r3, #2
 801883c:	d107      	bne.n	801884e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801883e:	4b54      	ldr	r3, [pc, #336]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018846:	2b00      	cmp	r3, #0
 8018848:	d115      	bne.n	8018876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801884a:	2301      	movs	r3, #1
 801884c:	e09a      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	685b      	ldr	r3, [r3, #4]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d107      	bne.n	8018866 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8018856:	4b4e      	ldr	r3, [pc, #312]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f003 0302 	and.w	r3, r3, #2
 801885e:	2b00      	cmp	r3, #0
 8018860:	d109      	bne.n	8018876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8018862:	2301      	movs	r3, #1
 8018864:	e08e      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8018866:	4b4a      	ldr	r3, [pc, #296]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801886e:	2b00      	cmp	r3, #0
 8018870:	d101      	bne.n	8018876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8018872:	2301      	movs	r3, #1
 8018874:	e086      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8018876:	4b46      	ldr	r3, [pc, #280]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018878:	689b      	ldr	r3, [r3, #8]
 801887a:	f023 0203 	bic.w	r2, r3, #3
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	4943      	ldr	r1, [pc, #268]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018884:	4313      	orrs	r3, r2
 8018886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018888:	f7fe ff90 	bl	80177ac <HAL_GetTick>
 801888c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801888e:	e00a      	b.n	80188a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018890:	f7fe ff8c 	bl	80177ac <HAL_GetTick>
 8018894:	4602      	mov	r2, r0
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	1ad3      	subs	r3, r2, r3
 801889a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801889e:	4293      	cmp	r3, r2
 80188a0:	d901      	bls.n	80188a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80188a2:	2303      	movs	r3, #3
 80188a4:	e06e      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80188a6:	4b3a      	ldr	r3, [pc, #232]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 80188a8:	689b      	ldr	r3, [r3, #8]
 80188aa:	f003 020c 	and.w	r2, r3, #12
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	009b      	lsls	r3, r3, #2
 80188b4:	429a      	cmp	r2, r3
 80188b6:	d1eb      	bne.n	8018890 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f003 0302 	and.w	r3, r3, #2
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d010      	beq.n	80188e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	689a      	ldr	r2, [r3, #8]
 80188c8:	4b31      	ldr	r3, [pc, #196]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 80188ca:	689b      	ldr	r3, [r3, #8]
 80188cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d208      	bcs.n	80188e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80188d4:	4b2e      	ldr	r3, [pc, #184]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 80188d6:	689b      	ldr	r3, [r3, #8]
 80188d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	689b      	ldr	r3, [r3, #8]
 80188e0:	492b      	ldr	r1, [pc, #172]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 80188e2:	4313      	orrs	r3, r2
 80188e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80188e6:	4b29      	ldr	r3, [pc, #164]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	f003 0307 	and.w	r3, r3, #7
 80188ee:	683a      	ldr	r2, [r7, #0]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d210      	bcs.n	8018916 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80188f4:	4b25      	ldr	r3, [pc, #148]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	f023 0207 	bic.w	r2, r3, #7
 80188fc:	4923      	ldr	r1, [pc, #140]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	4313      	orrs	r3, r2
 8018902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018904:	4b21      	ldr	r3, [pc, #132]	@ (801898c <HAL_RCC_ClockConfig+0x1ec>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	f003 0307 	and.w	r3, r3, #7
 801890c:	683a      	ldr	r2, [r7, #0]
 801890e:	429a      	cmp	r2, r3
 8018910:	d001      	beq.n	8018916 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8018912:	2301      	movs	r3, #1
 8018914:	e036      	b.n	8018984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f003 0304 	and.w	r3, r3, #4
 801891e:	2b00      	cmp	r3, #0
 8018920:	d008      	beq.n	8018934 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018922:	4b1b      	ldr	r3, [pc, #108]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018924:	689b      	ldr	r3, [r3, #8]
 8018926:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	68db      	ldr	r3, [r3, #12]
 801892e:	4918      	ldr	r1, [pc, #96]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018930:	4313      	orrs	r3, r2
 8018932:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	f003 0308 	and.w	r3, r3, #8
 801893c:	2b00      	cmp	r3, #0
 801893e:	d009      	beq.n	8018954 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8018940:	4b13      	ldr	r3, [pc, #76]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018942:	689b      	ldr	r3, [r3, #8]
 8018944:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	691b      	ldr	r3, [r3, #16]
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	4910      	ldr	r1, [pc, #64]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 8018950:	4313      	orrs	r3, r2
 8018952:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8018954:	f000 f824 	bl	80189a0 <HAL_RCC_GetSysClockFreq>
 8018958:	4602      	mov	r2, r0
 801895a:	4b0d      	ldr	r3, [pc, #52]	@ (8018990 <HAL_RCC_ClockConfig+0x1f0>)
 801895c:	689b      	ldr	r3, [r3, #8]
 801895e:	091b      	lsrs	r3, r3, #4
 8018960:	f003 030f 	and.w	r3, r3, #15
 8018964:	490b      	ldr	r1, [pc, #44]	@ (8018994 <HAL_RCC_ClockConfig+0x1f4>)
 8018966:	5ccb      	ldrb	r3, [r1, r3]
 8018968:	f003 031f 	and.w	r3, r3, #31
 801896c:	fa22 f303 	lsr.w	r3, r2, r3
 8018970:	4a09      	ldr	r2, [pc, #36]	@ (8018998 <HAL_RCC_ClockConfig+0x1f8>)
 8018972:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8018974:	4b09      	ldr	r3, [pc, #36]	@ (801899c <HAL_RCC_ClockConfig+0x1fc>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	4618      	mov	r0, r3
 801897a:	f7fe fec7 	bl	801770c <HAL_InitTick>
 801897e:	4603      	mov	r3, r0
 8018980:	72fb      	strb	r3, [r7, #11]

  return status;
 8018982:	7afb      	ldrb	r3, [r7, #11]
}
 8018984:	4618      	mov	r0, r3
 8018986:	3710      	adds	r7, #16
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	40022000 	.word	0x40022000
 8018990:	40021000 	.word	0x40021000
 8018994:	0801fdd8 	.word	0x0801fdd8
 8018998:	20000004 	.word	0x20000004
 801899c:	20000018 	.word	0x20000018

080189a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80189a0:	b480      	push	{r7}
 80189a2:	b089      	sub	sp, #36	@ 0x24
 80189a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80189a6:	2300      	movs	r3, #0
 80189a8:	61fb      	str	r3, [r7, #28]
 80189aa:	2300      	movs	r3, #0
 80189ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80189ae:	4b3e      	ldr	r3, [pc, #248]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80189b0:	689b      	ldr	r3, [r3, #8]
 80189b2:	f003 030c 	and.w	r3, r3, #12
 80189b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80189b8:	4b3b      	ldr	r3, [pc, #236]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80189ba:	68db      	ldr	r3, [r3, #12]
 80189bc:	f003 0303 	and.w	r3, r3, #3
 80189c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80189c2:	693b      	ldr	r3, [r7, #16]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d005      	beq.n	80189d4 <HAL_RCC_GetSysClockFreq+0x34>
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	2b0c      	cmp	r3, #12
 80189cc:	d121      	bne.n	8018a12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	2b01      	cmp	r3, #1
 80189d2:	d11e      	bne.n	8018a12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80189d4:	4b34      	ldr	r3, [pc, #208]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	f003 0308 	and.w	r3, r3, #8
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d107      	bne.n	80189f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80189e0:	4b31      	ldr	r3, [pc, #196]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80189e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80189e6:	0a1b      	lsrs	r3, r3, #8
 80189e8:	f003 030f 	and.w	r3, r3, #15
 80189ec:	61fb      	str	r3, [r7, #28]
 80189ee:	e005      	b.n	80189fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80189f0:	4b2d      	ldr	r3, [pc, #180]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	091b      	lsrs	r3, r3, #4
 80189f6:	f003 030f 	and.w	r3, r3, #15
 80189fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80189fc:	4a2b      	ldr	r2, [pc, #172]	@ (8018aac <HAL_RCC_GetSysClockFreq+0x10c>)
 80189fe:	69fb      	ldr	r3, [r7, #28]
 8018a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018a04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018a06:	693b      	ldr	r3, [r7, #16]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d10d      	bne.n	8018a28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018a10:	e00a      	b.n	8018a28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	2b04      	cmp	r3, #4
 8018a16:	d102      	bne.n	8018a1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8018a18:	4b25      	ldr	r3, [pc, #148]	@ (8018ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8018a1a:	61bb      	str	r3, [r7, #24]
 8018a1c:	e004      	b.n	8018a28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8018a1e:	693b      	ldr	r3, [r7, #16]
 8018a20:	2b08      	cmp	r3, #8
 8018a22:	d101      	bne.n	8018a28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8018a24:	4b23      	ldr	r3, [pc, #140]	@ (8018ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8018a26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	2b0c      	cmp	r3, #12
 8018a2c:	d134      	bne.n	8018a98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8018a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	f003 0303 	and.w	r3, r3, #3
 8018a36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	2b02      	cmp	r3, #2
 8018a3c:	d003      	beq.n	8018a46 <HAL_RCC_GetSysClockFreq+0xa6>
 8018a3e:	68bb      	ldr	r3, [r7, #8]
 8018a40:	2b03      	cmp	r3, #3
 8018a42:	d003      	beq.n	8018a4c <HAL_RCC_GetSysClockFreq+0xac>
 8018a44:	e005      	b.n	8018a52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8018a46:	4b1a      	ldr	r3, [pc, #104]	@ (8018ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8018a48:	617b      	str	r3, [r7, #20]
      break;
 8018a4a:	e005      	b.n	8018a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8018a4c:	4b19      	ldr	r3, [pc, #100]	@ (8018ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8018a4e:	617b      	str	r3, [r7, #20]
      break;
 8018a50:	e002      	b.n	8018a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8018a52:	69fb      	ldr	r3, [r7, #28]
 8018a54:	617b      	str	r3, [r7, #20]
      break;
 8018a56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8018a58:	4b13      	ldr	r3, [pc, #76]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8018a5a:	68db      	ldr	r3, [r3, #12]
 8018a5c:	091b      	lsrs	r3, r3, #4
 8018a5e:	f003 0307 	and.w	r3, r3, #7
 8018a62:	3301      	adds	r3, #1
 8018a64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8018a66:	4b10      	ldr	r3, [pc, #64]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8018a68:	68db      	ldr	r3, [r3, #12]
 8018a6a:	0a1b      	lsrs	r3, r3, #8
 8018a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a70:	697a      	ldr	r2, [r7, #20]
 8018a72:	fb03 f202 	mul.w	r2, r3, r2
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8018a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8018aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8018a80:	68db      	ldr	r3, [r3, #12]
 8018a82:	0e5b      	lsrs	r3, r3, #25
 8018a84:	f003 0303 	and.w	r3, r3, #3
 8018a88:	3301      	adds	r3, #1
 8018a8a:	005b      	lsls	r3, r3, #1
 8018a8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8018a8e:	697a      	ldr	r2, [r7, #20]
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8018a98:	69bb      	ldr	r3, [r7, #24]
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3724      	adds	r7, #36	@ 0x24
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa4:	4770      	bx	lr
 8018aa6:	bf00      	nop
 8018aa8:	40021000 	.word	0x40021000
 8018aac:	0801fdf0 	.word	0x0801fdf0
 8018ab0:	00f42400 	.word	0x00f42400
 8018ab4:	007a1200 	.word	0x007a1200

08018ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8018abc:	4b03      	ldr	r3, [pc, #12]	@ (8018acc <HAL_RCC_GetHCLKFreq+0x14>)
 8018abe:	681b      	ldr	r3, [r3, #0]
}
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac8:	4770      	bx	lr
 8018aca:	bf00      	nop
 8018acc:	20000004 	.word	0x20000004

08018ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8018ad4:	f7ff fff0 	bl	8018ab8 <HAL_RCC_GetHCLKFreq>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	4b06      	ldr	r3, [pc, #24]	@ (8018af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018adc:	689b      	ldr	r3, [r3, #8]
 8018ade:	0a1b      	lsrs	r3, r3, #8
 8018ae0:	f003 0307 	and.w	r3, r3, #7
 8018ae4:	4904      	ldr	r1, [pc, #16]	@ (8018af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8018ae6:	5ccb      	ldrb	r3, [r1, r3]
 8018ae8:	f003 031f 	and.w	r3, r3, #31
 8018aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	bd80      	pop	{r7, pc}
 8018af4:	40021000 	.word	0x40021000
 8018af8:	0801fde8 	.word	0x0801fde8

08018afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8018b00:	f7ff ffda 	bl	8018ab8 <HAL_RCC_GetHCLKFreq>
 8018b04:	4602      	mov	r2, r0
 8018b06:	4b06      	ldr	r3, [pc, #24]	@ (8018b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8018b08:	689b      	ldr	r3, [r3, #8]
 8018b0a:	0adb      	lsrs	r3, r3, #11
 8018b0c:	f003 0307 	and.w	r3, r3, #7
 8018b10:	4904      	ldr	r1, [pc, #16]	@ (8018b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8018b12:	5ccb      	ldrb	r3, [r1, r3]
 8018b14:	f003 031f 	and.w	r3, r3, #31
 8018b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	40021000 	.word	0x40021000
 8018b24:	0801fde8 	.word	0x0801fde8

08018b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b086      	sub	sp, #24
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8018b30:	2300      	movs	r3, #0
 8018b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8018b34:	4b2a      	ldr	r3, [pc, #168]	@ (8018be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d003      	beq.n	8018b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8018b40:	f7ff f9b6 	bl	8017eb0 <HAL_PWREx_GetVoltageRange>
 8018b44:	6178      	str	r0, [r7, #20]
 8018b46:	e014      	b.n	8018b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8018b48:	4b25      	ldr	r3, [pc, #148]	@ (8018be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b4c:	4a24      	ldr	r2, [pc, #144]	@ (8018be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8018b54:	4b22      	ldr	r3, [pc, #136]	@ (8018be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018b5c:	60fb      	str	r3, [r7, #12]
 8018b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8018b60:	f7ff f9a6 	bl	8017eb0 <HAL_PWREx_GetVoltageRange>
 8018b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8018b66:	4b1e      	ldr	r3, [pc, #120]	@ (8018be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8018be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018b70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018b78:	d10b      	bne.n	8018b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	2b80      	cmp	r3, #128	@ 0x80
 8018b7e:	d919      	bls.n	8018bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2ba0      	cmp	r3, #160	@ 0xa0
 8018b84:	d902      	bls.n	8018b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8018b86:	2302      	movs	r3, #2
 8018b88:	613b      	str	r3, [r7, #16]
 8018b8a:	e013      	b.n	8018bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	613b      	str	r3, [r7, #16]
 8018b90:	e010      	b.n	8018bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	2b80      	cmp	r3, #128	@ 0x80
 8018b96:	d902      	bls.n	8018b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8018b98:	2303      	movs	r3, #3
 8018b9a:	613b      	str	r3, [r7, #16]
 8018b9c:	e00a      	b.n	8018bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	2b80      	cmp	r3, #128	@ 0x80
 8018ba2:	d102      	bne.n	8018baa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8018ba4:	2302      	movs	r3, #2
 8018ba6:	613b      	str	r3, [r7, #16]
 8018ba8:	e004      	b.n	8018bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	2b70      	cmp	r3, #112	@ 0x70
 8018bae:	d101      	bne.n	8018bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8018bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8018be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	f023 0207 	bic.w	r2, r3, #7
 8018bbc:	4909      	ldr	r1, [pc, #36]	@ (8018be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8018bbe:	693b      	ldr	r3, [r7, #16]
 8018bc0:	4313      	orrs	r3, r2
 8018bc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8018bc4:	4b07      	ldr	r3, [pc, #28]	@ (8018be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	f003 0307 	and.w	r3, r3, #7
 8018bcc:	693a      	ldr	r2, [r7, #16]
 8018bce:	429a      	cmp	r2, r3
 8018bd0:	d001      	beq.n	8018bd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	e000      	b.n	8018bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8018bd6:	2300      	movs	r3, #0
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3718      	adds	r7, #24
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	40021000 	.word	0x40021000
 8018be4:	40022000 	.word	0x40022000

08018be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b086      	sub	sp, #24
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d031      	beq.n	8018c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8018c0c:	d01a      	beq.n	8018c44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8018c0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8018c12:	d814      	bhi.n	8018c3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d009      	beq.n	8018c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8018c18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018c1c:	d10f      	bne.n	8018c3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8018c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c20:	68db      	ldr	r3, [r3, #12]
 8018c22:	4a5c      	ldr	r2, [pc, #368]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018c28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8018c2a:	e00c      	b.n	8018c46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	3304      	adds	r3, #4
 8018c30:	2100      	movs	r1, #0
 8018c32:	4618      	mov	r0, r3
 8018c34:	f000 f9f0 	bl	8019018 <RCCEx_PLLSAI1_Config>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8018c3c:	e003      	b.n	8018c46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8018c3e:	2301      	movs	r3, #1
 8018c40:	74fb      	strb	r3, [r7, #19]
      break;
 8018c42:	e000      	b.n	8018c46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8018c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8018c46:	7cfb      	ldrb	r3, [r7, #19]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d10b      	bne.n	8018c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8018c4c:	4b51      	ldr	r3, [pc, #324]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018c52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c5a:	494e      	ldr	r1, [pc, #312]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c5c:	4313      	orrs	r3, r2
 8018c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8018c62:	e001      	b.n	8018c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018c64:	7cfb      	ldrb	r3, [r7, #19]
 8018c66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	f000 809e 	beq.w	8018db2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018c76:	2300      	movs	r3, #0
 8018c78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8018c7a:	4b46      	ldr	r3, [pc, #280]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d101      	bne.n	8018c8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8018c86:	2301      	movs	r3, #1
 8018c88:	e000      	b.n	8018c8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8018c8a:	2300      	movs	r3, #0
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d00d      	beq.n	8018cac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018c90:	4b40      	ldr	r3, [pc, #256]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c94:	4a3f      	ldr	r2, [pc, #252]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8018c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018ca4:	60bb      	str	r3, [r7, #8]
 8018ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018ca8:	2301      	movs	r3, #1
 8018caa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8018cac:	4b3a      	ldr	r3, [pc, #232]	@ (8018d98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	4a39      	ldr	r2, [pc, #228]	@ (8018d98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8018cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8018cb8:	f7fe fd78 	bl	80177ac <HAL_GetTick>
 8018cbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8018cbe:	e009      	b.n	8018cd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018cc0:	f7fe fd74 	bl	80177ac <HAL_GetTick>
 8018cc4:	4602      	mov	r2, r0
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	1ad3      	subs	r3, r2, r3
 8018cca:	2b02      	cmp	r3, #2
 8018ccc:	d902      	bls.n	8018cd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8018cce:	2303      	movs	r3, #3
 8018cd0:	74fb      	strb	r3, [r7, #19]
        break;
 8018cd2:	e005      	b.n	8018ce0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8018cd4:	4b30      	ldr	r3, [pc, #192]	@ (8018d98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d0ef      	beq.n	8018cc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8018ce0:	7cfb      	ldrb	r3, [r7, #19]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d15a      	bne.n	8018d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8018ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018cf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8018cf2:	697b      	ldr	r3, [r7, #20]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d01e      	beq.n	8018d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018cfc:	697a      	ldr	r2, [r7, #20]
 8018cfe:	429a      	cmp	r2, r3
 8018d00:	d019      	beq.n	8018d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8018d02:	4b24      	ldr	r3, [pc, #144]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018d0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8018d0e:	4b21      	ldr	r3, [pc, #132]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018d14:	4a1f      	ldr	r2, [pc, #124]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8018d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018d24:	4a1b      	ldr	r2, [pc, #108]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8018d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8018d2e:	4a19      	ldr	r2, [pc, #100]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	f003 0301 	and.w	r3, r3, #1
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d016      	beq.n	8018d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d40:	f7fe fd34 	bl	80177ac <HAL_GetTick>
 8018d44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018d46:	e00b      	b.n	8018d60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018d48:	f7fe fd30 	bl	80177ac <HAL_GetTick>
 8018d4c:	4602      	mov	r2, r0
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	1ad3      	subs	r3, r2, r3
 8018d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018d56:	4293      	cmp	r3, r2
 8018d58:	d902      	bls.n	8018d60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8018d5a:	2303      	movs	r3, #3
 8018d5c:	74fb      	strb	r3, [r7, #19]
            break;
 8018d5e:	e006      	b.n	8018d6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018d60:	4b0c      	ldr	r3, [pc, #48]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018d66:	f003 0302 	and.w	r3, r3, #2
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d0ec      	beq.n	8018d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8018d6e:	7cfb      	ldrb	r3, [r7, #19]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d10b      	bne.n	8018d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8018d74:	4b07      	ldr	r3, [pc, #28]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018d7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d82:	4904      	ldr	r1, [pc, #16]	@ (8018d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018d84:	4313      	orrs	r3, r2
 8018d86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8018d8a:	e009      	b.n	8018da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8018d8c:	7cfb      	ldrb	r3, [r7, #19]
 8018d8e:	74bb      	strb	r3, [r7, #18]
 8018d90:	e006      	b.n	8018da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8018d92:	bf00      	nop
 8018d94:	40021000 	.word	0x40021000
 8018d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018d9c:	7cfb      	ldrb	r3, [r7, #19]
 8018d9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018da0:	7c7b      	ldrb	r3, [r7, #17]
 8018da2:	2b01      	cmp	r3, #1
 8018da4:	d105      	bne.n	8018db2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018da6:	4b9b      	ldr	r3, [pc, #620]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018daa:	4a9a      	ldr	r2, [pc, #616]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018db0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	f003 0301 	and.w	r3, r3, #1
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d00a      	beq.n	8018dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018dbe:	4b95      	ldr	r3, [pc, #596]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018dc4:	f023 0203 	bic.w	r2, r3, #3
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6a1b      	ldr	r3, [r3, #32]
 8018dcc:	4991      	ldr	r1, [pc, #580]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018dce:	4313      	orrs	r3, r2
 8018dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	f003 0302 	and.w	r3, r3, #2
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00a      	beq.n	8018df6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018de0:	4b8c      	ldr	r3, [pc, #560]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018de6:	f023 020c 	bic.w	r2, r3, #12
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dee:	4989      	ldr	r1, [pc, #548]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018df0:	4313      	orrs	r3, r2
 8018df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f003 0304 	and.w	r3, r3, #4
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d00a      	beq.n	8018e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8018e02:	4b84      	ldr	r3, [pc, #528]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e10:	4980      	ldr	r1, [pc, #512]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e12:	4313      	orrs	r3, r2
 8018e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	f003 0320 	and.w	r3, r3, #32
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d00a      	beq.n	8018e3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018e24:	4b7b      	ldr	r3, [pc, #492]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e32:	4978      	ldr	r1, [pc, #480]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e34:	4313      	orrs	r3, r2
 8018e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d00a      	beq.n	8018e5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018e46:	4b73      	ldr	r3, [pc, #460]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018e54:	496f      	ldr	r1, [pc, #444]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e56:	4313      	orrs	r3, r2
 8018e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d00a      	beq.n	8018e7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018e68:	4b6a      	ldr	r3, [pc, #424]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018e76:	4967      	ldr	r1, [pc, #412]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e78:	4313      	orrs	r3, r2
 8018e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d00a      	beq.n	8018ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018e8a:	4b62      	ldr	r3, [pc, #392]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e98:	495e      	ldr	r1, [pc, #376]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018e9a:	4313      	orrs	r3, r2
 8018e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d00a      	beq.n	8018ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8018eac:	4b59      	ldr	r3, [pc, #356]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018eb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018eba:	4956      	ldr	r1, [pc, #344]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ebc:	4313      	orrs	r3, r2
 8018ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d00a      	beq.n	8018ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018ece:	4b51      	ldr	r3, [pc, #324]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ed4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018edc:	494d      	ldr	r1, [pc, #308]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ede:	4313      	orrs	r3, r2
 8018ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d028      	beq.n	8018f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8018ef0:	4b48      	ldr	r3, [pc, #288]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ef6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018efe:	4945      	ldr	r1, [pc, #276]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f00:	4313      	orrs	r3, r2
 8018f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018f0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018f0e:	d106      	bne.n	8018f1e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018f10:	4b40      	ldr	r3, [pc, #256]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f12:	68db      	ldr	r3, [r3, #12]
 8018f14:	4a3f      	ldr	r2, [pc, #252]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018f1a:	60d3      	str	r3, [r2, #12]
 8018f1c:	e011      	b.n	8018f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018f22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018f26:	d10c      	bne.n	8018f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	3304      	adds	r3, #4
 8018f2c:	2101      	movs	r1, #1
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f000 f872 	bl	8019018 <RCCEx_PLLSAI1_Config>
 8018f34:	4603      	mov	r3, r0
 8018f36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018f38:	7cfb      	ldrb	r3, [r7, #19]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d001      	beq.n	8018f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8018f3e:	7cfb      	ldrb	r3, [r7, #19]
 8018f40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d028      	beq.n	8018fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018f4e:	4b31      	ldr	r3, [pc, #196]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018f54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f5c:	492d      	ldr	r1, [pc, #180]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f5e:	4313      	orrs	r3, r2
 8018f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018f6c:	d106      	bne.n	8018f7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018f6e:	4b29      	ldr	r3, [pc, #164]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f70:	68db      	ldr	r3, [r3, #12]
 8018f72:	4a28      	ldr	r2, [pc, #160]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018f74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018f78:	60d3      	str	r3, [r2, #12]
 8018f7a:	e011      	b.n	8018fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018f84:	d10c      	bne.n	8018fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	3304      	adds	r3, #4
 8018f8a:	2101      	movs	r1, #1
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	f000 f843 	bl	8019018 <RCCEx_PLLSAI1_Config>
 8018f92:	4603      	mov	r3, r0
 8018f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018f96:	7cfb      	ldrb	r3, [r7, #19]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d001      	beq.n	8018fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8018f9c:	7cfb      	ldrb	r3, [r7, #19]
 8018f9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d01c      	beq.n	8018fe6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018fac:	4b19      	ldr	r3, [pc, #100]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018fb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018fba:	4916      	ldr	r1, [pc, #88]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018fbc:	4313      	orrs	r3, r2
 8018fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018fc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018fca:	d10c      	bne.n	8018fe6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	3304      	adds	r3, #4
 8018fd0:	2102      	movs	r1, #2
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f000 f820 	bl	8019018 <RCCEx_PLLSAI1_Config>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018fdc:	7cfb      	ldrb	r3, [r7, #19]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d001      	beq.n	8018fe6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8018fe2:	7cfb      	ldrb	r3, [r7, #19]
 8018fe4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d00a      	beq.n	8019008 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8018ff2:	4b08      	ldr	r3, [pc, #32]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ff8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019000:	4904      	ldr	r1, [pc, #16]	@ (8019014 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8019002:	4313      	orrs	r3, r2
 8019004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8019008:	7cbb      	ldrb	r3, [r7, #18]
}
 801900a:	4618      	mov	r0, r3
 801900c:	3718      	adds	r7, #24
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
 8019012:	bf00      	nop
 8019014:	40021000 	.word	0x40021000

08019018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b084      	sub	sp, #16
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
 8019020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019022:	2300      	movs	r3, #0
 8019024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8019026:	4b74      	ldr	r3, [pc, #464]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8019028:	68db      	ldr	r3, [r3, #12]
 801902a:	f003 0303 	and.w	r3, r3, #3
 801902e:	2b00      	cmp	r3, #0
 8019030:	d018      	beq.n	8019064 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8019032:	4b71      	ldr	r3, [pc, #452]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8019034:	68db      	ldr	r3, [r3, #12]
 8019036:	f003 0203 	and.w	r2, r3, #3
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	429a      	cmp	r2, r3
 8019040:	d10d      	bne.n	801905e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
       ||
 8019046:	2b00      	cmp	r3, #0
 8019048:	d009      	beq.n	801905e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801904a:	4b6b      	ldr	r3, [pc, #428]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 801904c:	68db      	ldr	r3, [r3, #12]
 801904e:	091b      	lsrs	r3, r3, #4
 8019050:	f003 0307 	and.w	r3, r3, #7
 8019054:	1c5a      	adds	r2, r3, #1
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	685b      	ldr	r3, [r3, #4]
       ||
 801905a:	429a      	cmp	r2, r3
 801905c:	d047      	beq.n	80190ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801905e:	2301      	movs	r3, #1
 8019060:	73fb      	strb	r3, [r7, #15]
 8019062:	e044      	b.n	80190ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	2b03      	cmp	r3, #3
 801906a:	d018      	beq.n	801909e <RCCEx_PLLSAI1_Config+0x86>
 801906c:	2b03      	cmp	r3, #3
 801906e:	d825      	bhi.n	80190bc <RCCEx_PLLSAI1_Config+0xa4>
 8019070:	2b01      	cmp	r3, #1
 8019072:	d002      	beq.n	801907a <RCCEx_PLLSAI1_Config+0x62>
 8019074:	2b02      	cmp	r3, #2
 8019076:	d009      	beq.n	801908c <RCCEx_PLLSAI1_Config+0x74>
 8019078:	e020      	b.n	80190bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801907a:	4b5f      	ldr	r3, [pc, #380]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	f003 0302 	and.w	r3, r3, #2
 8019082:	2b00      	cmp	r3, #0
 8019084:	d11d      	bne.n	80190c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8019086:	2301      	movs	r3, #1
 8019088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801908a:	e01a      	b.n	80190c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801908c:	4b5a      	ldr	r3, [pc, #360]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019094:	2b00      	cmp	r3, #0
 8019096:	d116      	bne.n	80190c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8019098:	2301      	movs	r3, #1
 801909a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801909c:	e013      	b.n	80190c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801909e:	4b56      	ldr	r3, [pc, #344]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d10f      	bne.n	80190ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80190aa:	4b53      	ldr	r3, [pc, #332]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d109      	bne.n	80190ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80190b6:	2301      	movs	r3, #1
 80190b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80190ba:	e006      	b.n	80190ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80190bc:	2301      	movs	r3, #1
 80190be:	73fb      	strb	r3, [r7, #15]
      break;
 80190c0:	e004      	b.n	80190cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80190c2:	bf00      	nop
 80190c4:	e002      	b.n	80190cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80190c6:	bf00      	nop
 80190c8:	e000      	b.n	80190cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80190ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80190cc:	7bfb      	ldrb	r3, [r7, #15]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d10d      	bne.n	80190ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80190d2:	4b49      	ldr	r3, [pc, #292]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80190d4:	68db      	ldr	r3, [r3, #12]
 80190d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	6819      	ldr	r1, [r3, #0]
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	3b01      	subs	r3, #1
 80190e4:	011b      	lsls	r3, r3, #4
 80190e6:	430b      	orrs	r3, r1
 80190e8:	4943      	ldr	r1, [pc, #268]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80190ea:	4313      	orrs	r3, r2
 80190ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80190ee:	7bfb      	ldrb	r3, [r7, #15]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d17c      	bne.n	80191ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80190f4:	4b40      	ldr	r3, [pc, #256]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	4a3f      	ldr	r2, [pc, #252]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80190fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80190fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019100:	f7fe fb54 	bl	80177ac <HAL_GetTick>
 8019104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8019106:	e009      	b.n	801911c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8019108:	f7fe fb50 	bl	80177ac <HAL_GetTick>
 801910c:	4602      	mov	r2, r0
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	1ad3      	subs	r3, r2, r3
 8019112:	2b02      	cmp	r3, #2
 8019114:	d902      	bls.n	801911c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8019116:	2303      	movs	r3, #3
 8019118:	73fb      	strb	r3, [r7, #15]
        break;
 801911a:	e005      	b.n	8019128 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801911c:	4b36      	ldr	r3, [pc, #216]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019124:	2b00      	cmp	r3, #0
 8019126:	d1ef      	bne.n	8019108 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8019128:	7bfb      	ldrb	r3, [r7, #15]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d15f      	bne.n	80191ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d110      	bne.n	8019156 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8019134:	4b30      	ldr	r3, [pc, #192]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8019136:	691b      	ldr	r3, [r3, #16]
 8019138:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 801913c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	6892      	ldr	r2, [r2, #8]
 8019144:	0211      	lsls	r1, r2, #8
 8019146:	687a      	ldr	r2, [r7, #4]
 8019148:	68d2      	ldr	r2, [r2, #12]
 801914a:	06d2      	lsls	r2, r2, #27
 801914c:	430a      	orrs	r2, r1
 801914e:	492a      	ldr	r1, [pc, #168]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8019150:	4313      	orrs	r3, r2
 8019152:	610b      	str	r3, [r1, #16]
 8019154:	e027      	b.n	80191a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8019156:	683b      	ldr	r3, [r7, #0]
 8019158:	2b01      	cmp	r3, #1
 801915a:	d112      	bne.n	8019182 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801915c:	4b26      	ldr	r3, [pc, #152]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 801915e:	691b      	ldr	r3, [r3, #16]
 8019160:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8019164:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	6892      	ldr	r2, [r2, #8]
 801916c:	0211      	lsls	r1, r2, #8
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	6912      	ldr	r2, [r2, #16]
 8019172:	0852      	lsrs	r2, r2, #1
 8019174:	3a01      	subs	r2, #1
 8019176:	0552      	lsls	r2, r2, #21
 8019178:	430a      	orrs	r2, r1
 801917a:	491f      	ldr	r1, [pc, #124]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 801917c:	4313      	orrs	r3, r2
 801917e:	610b      	str	r3, [r1, #16]
 8019180:	e011      	b.n	80191a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8019182:	4b1d      	ldr	r3, [pc, #116]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8019184:	691b      	ldr	r3, [r3, #16]
 8019186:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 801918a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801918e:	687a      	ldr	r2, [r7, #4]
 8019190:	6892      	ldr	r2, [r2, #8]
 8019192:	0211      	lsls	r1, r2, #8
 8019194:	687a      	ldr	r2, [r7, #4]
 8019196:	6952      	ldr	r2, [r2, #20]
 8019198:	0852      	lsrs	r2, r2, #1
 801919a:	3a01      	subs	r2, #1
 801919c:	0652      	lsls	r2, r2, #25
 801919e:	430a      	orrs	r2, r1
 80191a0:	4915      	ldr	r1, [pc, #84]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80191a2:	4313      	orrs	r3, r2
 80191a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80191a6:	4b14      	ldr	r3, [pc, #80]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	4a13      	ldr	r2, [pc, #76]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80191ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80191b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80191b2:	f7fe fafb 	bl	80177ac <HAL_GetTick>
 80191b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80191b8:	e009      	b.n	80191ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80191ba:	f7fe faf7 	bl	80177ac <HAL_GetTick>
 80191be:	4602      	mov	r2, r0
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	1ad3      	subs	r3, r2, r3
 80191c4:	2b02      	cmp	r3, #2
 80191c6:	d902      	bls.n	80191ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80191c8:	2303      	movs	r3, #3
 80191ca:	73fb      	strb	r3, [r7, #15]
          break;
 80191cc:	e005      	b.n	80191da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80191ce:	4b0a      	ldr	r3, [pc, #40]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d0ef      	beq.n	80191ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80191da:	7bfb      	ldrb	r3, [r7, #15]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d106      	bne.n	80191ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80191e0:	4b05      	ldr	r3, [pc, #20]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80191e2:	691a      	ldr	r2, [r3, #16]
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	699b      	ldr	r3, [r3, #24]
 80191e8:	4903      	ldr	r1, [pc, #12]	@ (80191f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80191ea:	4313      	orrs	r3, r2
 80191ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80191ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3710      	adds	r7, #16
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}
 80191f8:	40021000 	.word	0x40021000

080191fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b084      	sub	sp, #16
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d101      	bne.n	801920e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801920a:	2301      	movs	r3, #1
 801920c:	e095      	b.n	801933a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019212:	2b00      	cmp	r3, #0
 8019214:	d108      	bne.n	8019228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	685b      	ldr	r3, [r3, #4]
 801921a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801921e:	d009      	beq.n	8019234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	2200      	movs	r2, #0
 8019224:	61da      	str	r2, [r3, #28]
 8019226:	e005      	b.n	8019234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	2200      	movs	r2, #0
 801922c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	2200      	movs	r2, #0
 8019232:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	2200      	movs	r2, #0
 8019238:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8019240:	b2db      	uxtb	r3, r3
 8019242:	2b00      	cmp	r3, #0
 8019244:	d106      	bne.n	8019254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	2200      	movs	r2, #0
 801924a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f7e8 fd0a 	bl	8001c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2202      	movs	r2, #2
 8019258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	681a      	ldr	r2, [r3, #0]
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801926a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	68db      	ldr	r3, [r3, #12]
 8019270:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8019274:	d902      	bls.n	801927c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8019276:	2300      	movs	r3, #0
 8019278:	60fb      	str	r3, [r7, #12]
 801927a:	e002      	b.n	8019282 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801927c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019280:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	68db      	ldr	r3, [r3, #12]
 8019286:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801928a:	d007      	beq.n	801929c <HAL_SPI_Init+0xa0>
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	68db      	ldr	r3, [r3, #12]
 8019290:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8019294:	d002      	beq.n	801929c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2200      	movs	r2, #0
 801929a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	685b      	ldr	r3, [r3, #4]
 80192a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	689b      	ldr	r3, [r3, #8]
 80192a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80192ac:	431a      	orrs	r2, r3
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	691b      	ldr	r3, [r3, #16]
 80192b2:	f003 0302 	and.w	r3, r3, #2
 80192b6:	431a      	orrs	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	695b      	ldr	r3, [r3, #20]
 80192bc:	f003 0301 	and.w	r3, r3, #1
 80192c0:	431a      	orrs	r2, r3
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	699b      	ldr	r3, [r3, #24]
 80192c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80192ca:	431a      	orrs	r2, r3
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	69db      	ldr	r3, [r3, #28]
 80192d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80192d4:	431a      	orrs	r2, r3
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	6a1b      	ldr	r3, [r3, #32]
 80192da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80192de:	ea42 0103 	orr.w	r1, r2, r3
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	430a      	orrs	r2, r1
 80192f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	699b      	ldr	r3, [r3, #24]
 80192f6:	0c1b      	lsrs	r3, r3, #16
 80192f8:	f003 0204 	and.w	r2, r3, #4
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019300:	f003 0310 	and.w	r3, r3, #16
 8019304:	431a      	orrs	r2, r3
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801930a:	f003 0308 	and.w	r3, r3, #8
 801930e:	431a      	orrs	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	68db      	ldr	r3, [r3, #12]
 8019314:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019318:	ea42 0103 	orr.w	r1, r2, r3
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	430a      	orrs	r2, r1
 8019328:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2200      	movs	r2, #0
 801932e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2201      	movs	r2, #1
 8019334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8019338:	2300      	movs	r3, #0
}
 801933a:	4618      	mov	r0, r3
 801933c:	3710      	adds	r7, #16
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}

08019342 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8019342:	b580      	push	{r7, lr}
 8019344:	b08a      	sub	sp, #40	@ 0x28
 8019346:	af00      	add	r7, sp, #0
 8019348:	60f8      	str	r0, [r7, #12]
 801934a:	60b9      	str	r1, [r7, #8]
 801934c:	607a      	str	r2, [r7, #4]
 801934e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8019350:	2301      	movs	r3, #1
 8019352:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019354:	f7fe fa2a 	bl	80177ac <HAL_GetTick>
 8019358:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8019360:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8019368:	887b      	ldrh	r3, [r7, #2]
 801936a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 801936c:	887b      	ldrh	r3, [r7, #2]
 801936e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8019370:	7ffb      	ldrb	r3, [r7, #31]
 8019372:	2b01      	cmp	r3, #1
 8019374:	d00c      	beq.n	8019390 <HAL_SPI_TransmitReceive+0x4e>
 8019376:	69bb      	ldr	r3, [r7, #24]
 8019378:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801937c:	d106      	bne.n	801938c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	689b      	ldr	r3, [r3, #8]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d102      	bne.n	801938c <HAL_SPI_TransmitReceive+0x4a>
 8019386:	7ffb      	ldrb	r3, [r7, #31]
 8019388:	2b04      	cmp	r3, #4
 801938a:	d001      	beq.n	8019390 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 801938c:	2302      	movs	r3, #2
 801938e:	e1f3      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8019390:	68bb      	ldr	r3, [r7, #8]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d005      	beq.n	80193a2 <HAL_SPI_TransmitReceive+0x60>
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d002      	beq.n	80193a2 <HAL_SPI_TransmitReceive+0x60>
 801939c:	887b      	ldrh	r3, [r7, #2]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d101      	bne.n	80193a6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80193a2:	2301      	movs	r3, #1
 80193a4:	e1e8      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d101      	bne.n	80193b4 <HAL_SPI_TransmitReceive+0x72>
 80193b0:	2302      	movs	r3, #2
 80193b2:	e1e1      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	2201      	movs	r2, #1
 80193b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80193c2:	b2db      	uxtb	r3, r3
 80193c4:	2b04      	cmp	r3, #4
 80193c6:	d003      	beq.n	80193d0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	2205      	movs	r2, #5
 80193cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	2200      	movs	r2, #0
 80193d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	887a      	ldrh	r2, [r7, #2]
 80193e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	887a      	ldrh	r2, [r7, #2]
 80193e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	68ba      	ldr	r2, [r7, #8]
 80193f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	887a      	ldrh	r2, [r7, #2]
 80193f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	887a      	ldrh	r2, [r7, #2]
 80193fc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	2200      	movs	r2, #0
 8019402:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2200      	movs	r2, #0
 8019408:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	68db      	ldr	r3, [r3, #12]
 801940e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8019412:	d802      	bhi.n	801941a <HAL_SPI_TransmitReceive+0xd8>
 8019414:	8abb      	ldrh	r3, [r7, #20]
 8019416:	2b01      	cmp	r3, #1
 8019418:	d908      	bls.n	801942c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	685a      	ldr	r2, [r3, #4]
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8019428:	605a      	str	r2, [r3, #4]
 801942a:	e007      	b.n	801943c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	685a      	ldr	r2, [r3, #4]
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801943a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019446:	2b40      	cmp	r3, #64	@ 0x40
 8019448:	d007      	beq.n	801945a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	681a      	ldr	r2, [r3, #0]
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	68db      	ldr	r3, [r3, #12]
 801945e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8019462:	f240 8083 	bls.w	801956c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	685b      	ldr	r3, [r3, #4]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d002      	beq.n	8019474 <HAL_SPI_TransmitReceive+0x132>
 801946e:	8afb      	ldrh	r3, [r7, #22]
 8019470:	2b01      	cmp	r3, #1
 8019472:	d16f      	bne.n	8019554 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019478:	881a      	ldrh	r2, [r3, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019484:	1c9a      	adds	r2, r3, #2
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801948e:	b29b      	uxth	r3, r3
 8019490:	3b01      	subs	r3, #1
 8019492:	b29a      	uxth	r2, r3
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019498:	e05c      	b.n	8019554 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	689b      	ldr	r3, [r3, #8]
 80194a0:	f003 0302 	and.w	r3, r3, #2
 80194a4:	2b02      	cmp	r3, #2
 80194a6:	d11b      	bne.n	80194e0 <HAL_SPI_TransmitReceive+0x19e>
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80194ac:	b29b      	uxth	r3, r3
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d016      	beq.n	80194e0 <HAL_SPI_TransmitReceive+0x19e>
 80194b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b4:	2b01      	cmp	r3, #1
 80194b6:	d113      	bne.n	80194e0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194bc:	881a      	ldrh	r2, [r3, #0]
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194c8:	1c9a      	adds	r2, r3, #2
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80194d2:	b29b      	uxth	r3, r3
 80194d4:	3b01      	subs	r3, #1
 80194d6:	b29a      	uxth	r2, r3
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80194dc:	2300      	movs	r3, #0
 80194de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	689b      	ldr	r3, [r3, #8]
 80194e6:	f003 0301 	and.w	r3, r3, #1
 80194ea:	2b01      	cmp	r3, #1
 80194ec:	d11c      	bne.n	8019528 <HAL_SPI_TransmitReceive+0x1e6>
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80194f4:	b29b      	uxth	r3, r3
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d016      	beq.n	8019528 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	68da      	ldr	r2, [r3, #12]
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019504:	b292      	uxth	r2, r2
 8019506:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801950c:	1c9a      	adds	r2, r3, #2
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019518:	b29b      	uxth	r3, r3
 801951a:	3b01      	subs	r3, #1
 801951c:	b29a      	uxth	r2, r3
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8019524:	2301      	movs	r3, #1
 8019526:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8019528:	f7fe f940 	bl	80177ac <HAL_GetTick>
 801952c:	4602      	mov	r2, r0
 801952e:	6a3b      	ldr	r3, [r7, #32]
 8019530:	1ad3      	subs	r3, r2, r3
 8019532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019534:	429a      	cmp	r2, r3
 8019536:	d80d      	bhi.n	8019554 <HAL_SPI_TransmitReceive+0x212>
 8019538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801953a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801953e:	d009      	beq.n	8019554 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	2201      	movs	r2, #1
 8019544:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	2200      	movs	r2, #0
 801954c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8019550:	2303      	movs	r3, #3
 8019552:	e111      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019558:	b29b      	uxth	r3, r3
 801955a:	2b00      	cmp	r3, #0
 801955c:	d19d      	bne.n	801949a <HAL_SPI_TransmitReceive+0x158>
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019564:	b29b      	uxth	r3, r3
 8019566:	2b00      	cmp	r3, #0
 8019568:	d197      	bne.n	801949a <HAL_SPI_TransmitReceive+0x158>
 801956a:	e0e5      	b.n	8019738 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	685b      	ldr	r3, [r3, #4]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d003      	beq.n	801957c <HAL_SPI_TransmitReceive+0x23a>
 8019574:	8afb      	ldrh	r3, [r7, #22]
 8019576:	2b01      	cmp	r3, #1
 8019578:	f040 80d1 	bne.w	801971e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019580:	b29b      	uxth	r3, r3
 8019582:	2b01      	cmp	r3, #1
 8019584:	d912      	bls.n	80195ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801958a:	881a      	ldrh	r2, [r3, #0]
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019596:	1c9a      	adds	r2, r3, #2
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80195a0:	b29b      	uxth	r3, r3
 80195a2:	3b02      	subs	r3, #2
 80195a4:	b29a      	uxth	r2, r3
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80195aa:	e0b8      	b.n	801971e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	330c      	adds	r3, #12
 80195b6:	7812      	ldrb	r2, [r2, #0]
 80195b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80195be:	1c5a      	adds	r2, r3, #1
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	3b01      	subs	r3, #1
 80195cc:	b29a      	uxth	r2, r3
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80195d2:	e0a4      	b.n	801971e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	689b      	ldr	r3, [r3, #8]
 80195da:	f003 0302 	and.w	r3, r3, #2
 80195de:	2b02      	cmp	r3, #2
 80195e0:	d134      	bne.n	801964c <HAL_SPI_TransmitReceive+0x30a>
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80195e6:	b29b      	uxth	r3, r3
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d02f      	beq.n	801964c <HAL_SPI_TransmitReceive+0x30a>
 80195ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d12c      	bne.n	801964c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	2b01      	cmp	r3, #1
 80195fa:	d912      	bls.n	8019622 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019600:	881a      	ldrh	r2, [r3, #0]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801960c:	1c9a      	adds	r2, r3, #2
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019616:	b29b      	uxth	r3, r3
 8019618:	3b02      	subs	r3, #2
 801961a:	b29a      	uxth	r2, r3
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8019620:	e012      	b.n	8019648 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	330c      	adds	r3, #12
 801962c:	7812      	ldrb	r2, [r2, #0]
 801962e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019634:	1c5a      	adds	r2, r3, #1
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801963e:	b29b      	uxth	r3, r3
 8019640:	3b01      	subs	r3, #1
 8019642:	b29a      	uxth	r2, r3
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019648:	2300      	movs	r3, #0
 801964a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	689b      	ldr	r3, [r3, #8]
 8019652:	f003 0301 	and.w	r3, r3, #1
 8019656:	2b01      	cmp	r3, #1
 8019658:	d148      	bne.n	80196ec <HAL_SPI_TransmitReceive+0x3aa>
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019660:	b29b      	uxth	r3, r3
 8019662:	2b00      	cmp	r3, #0
 8019664:	d042      	beq.n	80196ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801966c:	b29b      	uxth	r3, r3
 801966e:	2b01      	cmp	r3, #1
 8019670:	d923      	bls.n	80196ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	68da      	ldr	r2, [r3, #12]
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801967c:	b292      	uxth	r2, r2
 801967e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019684:	1c9a      	adds	r2, r3, #2
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019690:	b29b      	uxth	r3, r3
 8019692:	3b02      	subs	r3, #2
 8019694:	b29a      	uxth	r2, r3
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d81f      	bhi.n	80196e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	685a      	ldr	r2, [r3, #4]
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80196b6:	605a      	str	r2, [r3, #4]
 80196b8:	e016      	b.n	80196e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	f103 020c 	add.w	r2, r3, #12
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196c6:	7812      	ldrb	r2, [r2, #0]
 80196c8:	b2d2      	uxtb	r2, r2
 80196ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196d0:	1c5a      	adds	r2, r3, #1
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80196dc:	b29b      	uxth	r3, r3
 80196de:	3b01      	subs	r3, #1
 80196e0:	b29a      	uxth	r2, r3
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80196e8:	2301      	movs	r3, #1
 80196ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80196ec:	f7fe f85e 	bl	80177ac <HAL_GetTick>
 80196f0:	4602      	mov	r2, r0
 80196f2:	6a3b      	ldr	r3, [r7, #32]
 80196f4:	1ad3      	subs	r3, r2, r3
 80196f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d803      	bhi.n	8019704 <HAL_SPI_TransmitReceive+0x3c2>
 80196fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019702:	d102      	bne.n	801970a <HAL_SPI_TransmitReceive+0x3c8>
 8019704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019706:	2b00      	cmp	r3, #0
 8019708:	d109      	bne.n	801971e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	2201      	movs	r2, #1
 801970e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	2200      	movs	r2, #0
 8019716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801971a:	2303      	movs	r3, #3
 801971c:	e02c      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019722:	b29b      	uxth	r3, r3
 8019724:	2b00      	cmp	r3, #0
 8019726:	f47f af55 	bne.w	80195d4 <HAL_SPI_TransmitReceive+0x292>
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019730:	b29b      	uxth	r3, r3
 8019732:	2b00      	cmp	r3, #0
 8019734:	f47f af4e 	bne.w	80195d4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019738:	6a3a      	ldr	r2, [r7, #32]
 801973a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801973c:	68f8      	ldr	r0, [r7, #12]
 801973e:	f000 f93d 	bl	80199bc <SPI_EndRxTxTransaction>
 8019742:	4603      	mov	r3, r0
 8019744:	2b00      	cmp	r3, #0
 8019746:	d008      	beq.n	801975a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	2220      	movs	r2, #32
 801974c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	2200      	movs	r2, #0
 8019752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8019756:	2301      	movs	r3, #1
 8019758:	e00e      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	2201      	movs	r2, #1
 801975e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	2200      	movs	r2, #0
 8019766:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801976e:	2b00      	cmp	r3, #0
 8019770:	d001      	beq.n	8019776 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8019772:	2301      	movs	r3, #1
 8019774:	e000      	b.n	8019778 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8019776:	2300      	movs	r3, #0
  }
}
 8019778:	4618      	mov	r0, r3
 801977a:	3728      	adds	r7, #40	@ 0x28
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}

08019780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b088      	sub	sp, #32
 8019784:	af00      	add	r7, sp, #0
 8019786:	60f8      	str	r0, [r7, #12]
 8019788:	60b9      	str	r1, [r7, #8]
 801978a:	603b      	str	r3, [r7, #0]
 801978c:	4613      	mov	r3, r2
 801978e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8019790:	f7fe f80c 	bl	80177ac <HAL_GetTick>
 8019794:	4602      	mov	r2, r0
 8019796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019798:	1a9b      	subs	r3, r3, r2
 801979a:	683a      	ldr	r2, [r7, #0]
 801979c:	4413      	add	r3, r2
 801979e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80197a0:	f7fe f804 	bl	80177ac <HAL_GetTick>
 80197a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80197a6:	4b39      	ldr	r3, [pc, #228]	@ (801988c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	015b      	lsls	r3, r3, #5
 80197ac:	0d1b      	lsrs	r3, r3, #20
 80197ae:	69fa      	ldr	r2, [r7, #28]
 80197b0:	fb02 f303 	mul.w	r3, r2, r3
 80197b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80197b6:	e054      	b.n	8019862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80197b8:	683b      	ldr	r3, [r7, #0]
 80197ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197be:	d050      	beq.n	8019862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80197c0:	f7fd fff4 	bl	80177ac <HAL_GetTick>
 80197c4:	4602      	mov	r2, r0
 80197c6:	69bb      	ldr	r3, [r7, #24]
 80197c8:	1ad3      	subs	r3, r2, r3
 80197ca:	69fa      	ldr	r2, [r7, #28]
 80197cc:	429a      	cmp	r2, r3
 80197ce:	d902      	bls.n	80197d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d13d      	bne.n	8019852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	685a      	ldr	r2, [r3, #4]
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80197e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80197ee:	d111      	bne.n	8019814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	689b      	ldr	r3, [r3, #8]
 80197f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80197f8:	d004      	beq.n	8019804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	689b      	ldr	r3, [r3, #8]
 80197fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019802:	d107      	bne.n	8019814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	681a      	ldr	r2, [r3, #0]
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8019812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801981c:	d10f      	bne.n	801983e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	681a      	ldr	r2, [r3, #0]
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801982c:	601a      	str	r2, [r3, #0]
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801983c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	2201      	movs	r2, #1
 8019842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	2200      	movs	r2, #0
 801984a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801984e:	2303      	movs	r3, #3
 8019850:	e017      	b.n	8019882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d101      	bne.n	801985c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8019858:	2300      	movs	r3, #0
 801985a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	3b01      	subs	r3, #1
 8019860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	689a      	ldr	r2, [r3, #8]
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	4013      	ands	r3, r2
 801986c:	68ba      	ldr	r2, [r7, #8]
 801986e:	429a      	cmp	r2, r3
 8019870:	bf0c      	ite	eq
 8019872:	2301      	moveq	r3, #1
 8019874:	2300      	movne	r3, #0
 8019876:	b2db      	uxtb	r3, r3
 8019878:	461a      	mov	r2, r3
 801987a:	79fb      	ldrb	r3, [r7, #7]
 801987c:	429a      	cmp	r2, r3
 801987e:	d19b      	bne.n	80197b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8019880:	2300      	movs	r3, #0
}
 8019882:	4618      	mov	r0, r3
 8019884:	3720      	adds	r7, #32
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	20000004 	.word	0x20000004

08019890 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b08a      	sub	sp, #40	@ 0x28
 8019894:	af00      	add	r7, sp, #0
 8019896:	60f8      	str	r0, [r7, #12]
 8019898:	60b9      	str	r1, [r7, #8]
 801989a:	607a      	str	r2, [r7, #4]
 801989c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801989e:	2300      	movs	r3, #0
 80198a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80198a2:	f7fd ff83 	bl	80177ac <HAL_GetTick>
 80198a6:	4602      	mov	r2, r0
 80198a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198aa:	1a9b      	subs	r3, r3, r2
 80198ac:	683a      	ldr	r2, [r7, #0]
 80198ae:	4413      	add	r3, r2
 80198b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80198b2:	f7fd ff7b 	bl	80177ac <HAL_GetTick>
 80198b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	330c      	adds	r3, #12
 80198be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80198c0:	4b3d      	ldr	r3, [pc, #244]	@ (80199b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80198c2:	681a      	ldr	r2, [r3, #0]
 80198c4:	4613      	mov	r3, r2
 80198c6:	009b      	lsls	r3, r3, #2
 80198c8:	4413      	add	r3, r2
 80198ca:	00da      	lsls	r2, r3, #3
 80198cc:	1ad3      	subs	r3, r2, r3
 80198ce:	0d1b      	lsrs	r3, r3, #20
 80198d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80198d2:	fb02 f303 	mul.w	r3, r2, r3
 80198d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80198d8:	e060      	b.n	801999c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80198e0:	d107      	bne.n	80198f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d104      	bne.n	80198f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	781b      	ldrb	r3, [r3, #0]
 80198ec:	b2db      	uxtb	r3, r3
 80198ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80198f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198f8:	d050      	beq.n	801999c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80198fa:	f7fd ff57 	bl	80177ac <HAL_GetTick>
 80198fe:	4602      	mov	r2, r0
 8019900:	6a3b      	ldr	r3, [r7, #32]
 8019902:	1ad3      	subs	r3, r2, r3
 8019904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019906:	429a      	cmp	r2, r3
 8019908:	d902      	bls.n	8019910 <SPI_WaitFifoStateUntilTimeout+0x80>
 801990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801990c:	2b00      	cmp	r3, #0
 801990e:	d13d      	bne.n	801998c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	685a      	ldr	r2, [r3, #4]
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801991e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	685b      	ldr	r3, [r3, #4]
 8019924:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8019928:	d111      	bne.n	801994e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	689b      	ldr	r3, [r3, #8]
 801992e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019932:	d004      	beq.n	801993e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	689b      	ldr	r3, [r3, #8]
 8019938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801993c:	d107      	bne.n	801994e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	681a      	ldr	r2, [r3, #0]
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801994c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019956:	d10f      	bne.n	8019978 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	681a      	ldr	r2, [r3, #0]
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8019966:	601a      	str	r2, [r3, #0]
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8019976:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	2201      	movs	r2, #1
 801997c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	2200      	movs	r2, #0
 8019984:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8019988:	2303      	movs	r3, #3
 801998a:	e010      	b.n	80199ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801998c:	69bb      	ldr	r3, [r7, #24]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d101      	bne.n	8019996 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8019992:	2300      	movs	r3, #0
 8019994:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8019996:	69bb      	ldr	r3, [r7, #24]
 8019998:	3b01      	subs	r3, #1
 801999a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	689a      	ldr	r2, [r3, #8]
 80199a2:	68bb      	ldr	r3, [r7, #8]
 80199a4:	4013      	ands	r3, r2
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d196      	bne.n	80198da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80199ac:	2300      	movs	r3, #0
}
 80199ae:	4618      	mov	r0, r3
 80199b0:	3728      	adds	r7, #40	@ 0x28
 80199b2:	46bd      	mov	sp, r7
 80199b4:	bd80      	pop	{r7, pc}
 80199b6:	bf00      	nop
 80199b8:	20000004 	.word	0x20000004

080199bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b086      	sub	sp, #24
 80199c0:	af02      	add	r7, sp, #8
 80199c2:	60f8      	str	r0, [r7, #12]
 80199c4:	60b9      	str	r1, [r7, #8]
 80199c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	9300      	str	r3, [sp, #0]
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	2200      	movs	r2, #0
 80199d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80199d4:	68f8      	ldr	r0, [r7, #12]
 80199d6:	f7ff ff5b 	bl	8019890 <SPI_WaitFifoStateUntilTimeout>
 80199da:	4603      	mov	r3, r0
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d007      	beq.n	80199f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80199e4:	f043 0220 	orr.w	r2, r3, #32
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80199ec:	2303      	movs	r3, #3
 80199ee:	e027      	b.n	8019a40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	9300      	str	r3, [sp, #0]
 80199f4:	68bb      	ldr	r3, [r7, #8]
 80199f6:	2200      	movs	r2, #0
 80199f8:	2180      	movs	r1, #128	@ 0x80
 80199fa:	68f8      	ldr	r0, [r7, #12]
 80199fc:	f7ff fec0 	bl	8019780 <SPI_WaitFlagStateUntilTimeout>
 8019a00:	4603      	mov	r3, r0
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d007      	beq.n	8019a16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a0a:	f043 0220 	orr.w	r2, r3, #32
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8019a12:	2303      	movs	r3, #3
 8019a14:	e014      	b.n	8019a40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	9300      	str	r3, [sp, #0]
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8019a22:	68f8      	ldr	r0, [r7, #12]
 8019a24:	f7ff ff34 	bl	8019890 <SPI_WaitFifoStateUntilTimeout>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d007      	beq.n	8019a3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a32:	f043 0220 	orr.w	r2, r3, #32
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8019a3a:	2303      	movs	r3, #3
 8019a3c:	e000      	b.n	8019a40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8019a3e:	2300      	movs	r3, #0
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	3710      	adds	r7, #16
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd80      	pop	{r7, pc}

08019a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b082      	sub	sp, #8
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d101      	bne.n	8019a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019a56:	2301      	movs	r3, #1
 8019a58:	e049      	b.n	8019aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d106      	bne.n	8019a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	2200      	movs	r2, #0
 8019a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f7e8 fbb6 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	2202      	movs	r2, #2
 8019a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	681a      	ldr	r2, [r3, #0]
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	3304      	adds	r3, #4
 8019a84:	4619      	mov	r1, r3
 8019a86:	4610      	mov	r0, r2
 8019a88:	f000 fdd4 	bl	801a634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	2201      	movs	r2, #1
 8019a90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	2201      	movs	r2, #1
 8019a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	2201      	movs	r2, #1
 8019aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	2201      	movs	r2, #1
 8019aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	2201      	movs	r2, #1
 8019ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2201      	movs	r2, #1
 8019ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	2201      	movs	r2, #1
 8019ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2201      	movs	r2, #1
 8019ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	2201      	movs	r2, #1
 8019ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	2201      	movs	r2, #1
 8019ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2201      	movs	r2, #1
 8019ae0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2201      	movs	r2, #1
 8019ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8019aec:	2300      	movs	r3, #0
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3708      	adds	r7, #8
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
	...

08019af8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8019af8:	b480      	push	{r7}
 8019afa:	b085      	sub	sp, #20
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019b06:	b2db      	uxtb	r3, r3
 8019b08:	2b01      	cmp	r3, #1
 8019b0a:	d001      	beq.n	8019b10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8019b0c:	2301      	movs	r3, #1
 8019b0e:	e033      	b.n	8019b78 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	2202      	movs	r2, #2
 8019b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	4a19      	ldr	r2, [pc, #100]	@ (8019b84 <HAL_TIM_Base_Start+0x8c>)
 8019b1e:	4293      	cmp	r3, r2
 8019b20:	d009      	beq.n	8019b36 <HAL_TIM_Base_Start+0x3e>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019b2a:	d004      	beq.n	8019b36 <HAL_TIM_Base_Start+0x3e>
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	4a15      	ldr	r2, [pc, #84]	@ (8019b88 <HAL_TIM_Base_Start+0x90>)
 8019b32:	4293      	cmp	r3, r2
 8019b34:	d115      	bne.n	8019b62 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	689a      	ldr	r2, [r3, #8]
 8019b3c:	4b13      	ldr	r3, [pc, #76]	@ (8019b8c <HAL_TIM_Base_Start+0x94>)
 8019b3e:	4013      	ands	r3, r2
 8019b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	2b06      	cmp	r3, #6
 8019b46:	d015      	beq.n	8019b74 <HAL_TIM_Base_Start+0x7c>
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019b4e:	d011      	beq.n	8019b74 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	681a      	ldr	r2, [r3, #0]
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	f042 0201 	orr.w	r2, r2, #1
 8019b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019b60:	e008      	b.n	8019b74 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	681a      	ldr	r2, [r3, #0]
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	f042 0201 	orr.w	r2, r2, #1
 8019b70:	601a      	str	r2, [r3, #0]
 8019b72:	e000      	b.n	8019b76 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019b74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019b76:	2300      	movs	r3, #0
}
 8019b78:	4618      	mov	r0, r3
 8019b7a:	3714      	adds	r7, #20
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b82:	4770      	bx	lr
 8019b84:	40012c00 	.word	0x40012c00
 8019b88:	40014000 	.word	0x40014000
 8019b8c:	00010007 	.word	0x00010007

08019b90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8019b90:	b480      	push	{r7}
 8019b92:	b083      	sub	sp, #12
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	6a1a      	ldr	r2, [r3, #32]
 8019b9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019ba2:	4013      	ands	r3, r2
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d10f      	bne.n	8019bc8 <HAL_TIM_Base_Stop+0x38>
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	6a1a      	ldr	r2, [r3, #32]
 8019bae:	f240 4344 	movw	r3, #1092	@ 0x444
 8019bb2:	4013      	ands	r3, r2
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d107      	bne.n	8019bc8 <HAL_TIM_Base_Stop+0x38>
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	681a      	ldr	r2, [r3, #0]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	f022 0201 	bic.w	r2, r2, #1
 8019bc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	2201      	movs	r2, #1
 8019bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8019bd0:	2300      	movs	r3, #0
}
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	370c      	adds	r7, #12
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bdc:	4770      	bx	lr
	...

08019be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019be0:	b480      	push	{r7}
 8019be2:	b085      	sub	sp, #20
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	2b01      	cmp	r3, #1
 8019bf2:	d001      	beq.n	8019bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	e03b      	b.n	8019c70 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2202      	movs	r2, #2
 8019bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	68da      	ldr	r2, [r3, #12]
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	f042 0201 	orr.w	r2, r2, #1
 8019c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	4a19      	ldr	r2, [pc, #100]	@ (8019c7c <HAL_TIM_Base_Start_IT+0x9c>)
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d009      	beq.n	8019c2e <HAL_TIM_Base_Start_IT+0x4e>
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019c22:	d004      	beq.n	8019c2e <HAL_TIM_Base_Start_IT+0x4e>
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	4a15      	ldr	r2, [pc, #84]	@ (8019c80 <HAL_TIM_Base_Start_IT+0xa0>)
 8019c2a:	4293      	cmp	r3, r2
 8019c2c:	d115      	bne.n	8019c5a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	689a      	ldr	r2, [r3, #8]
 8019c34:	4b13      	ldr	r3, [pc, #76]	@ (8019c84 <HAL_TIM_Base_Start_IT+0xa4>)
 8019c36:	4013      	ands	r3, r2
 8019c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	2b06      	cmp	r3, #6
 8019c3e:	d015      	beq.n	8019c6c <HAL_TIM_Base_Start_IT+0x8c>
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019c46:	d011      	beq.n	8019c6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	681a      	ldr	r2, [r3, #0]
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	f042 0201 	orr.w	r2, r2, #1
 8019c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c58:	e008      	b.n	8019c6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	681a      	ldr	r2, [r3, #0]
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	f042 0201 	orr.w	r2, r2, #1
 8019c68:	601a      	str	r2, [r3, #0]
 8019c6a:	e000      	b.n	8019c6e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019c6e:	2300      	movs	r3, #0
}
 8019c70:	4618      	mov	r0, r3
 8019c72:	3714      	adds	r7, #20
 8019c74:	46bd      	mov	sp, r7
 8019c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7a:	4770      	bx	lr
 8019c7c:	40012c00 	.word	0x40012c00
 8019c80:	40014000 	.word	0x40014000
 8019c84:	00010007 	.word	0x00010007

08019c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d101      	bne.n	8019c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019c96:	2301      	movs	r3, #1
 8019c98:	e049      	b.n	8019d2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d106      	bne.n	8019cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	2200      	movs	r2, #0
 8019caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019cae:	6878      	ldr	r0, [r7, #4]
 8019cb0:	f7e8 fa76 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	2202      	movs	r2, #2
 8019cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681a      	ldr	r2, [r3, #0]
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	3304      	adds	r3, #4
 8019cc4:	4619      	mov	r1, r3
 8019cc6:	4610      	mov	r0, r2
 8019cc8:	f000 fcb4 	bl	801a634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2201      	movs	r2, #1
 8019cd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2201      	movs	r2, #1
 8019cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2201      	movs	r2, #1
 8019ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2201      	movs	r2, #1
 8019ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	2201      	movs	r2, #1
 8019cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	2201      	movs	r2, #1
 8019cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	2201      	movs	r2, #1
 8019d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	2201      	movs	r2, #1
 8019d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	2201      	movs	r2, #1
 8019d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	2201      	movs	r2, #1
 8019d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	2201      	movs	r2, #1
 8019d20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2201      	movs	r2, #1
 8019d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8019d2c:	2300      	movs	r3, #0
}
 8019d2e:	4618      	mov	r0, r3
 8019d30:	3708      	adds	r7, #8
 8019d32:	46bd      	mov	sp, r7
 8019d34:	bd80      	pop	{r7, pc}
	...

08019d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b084      	sub	sp, #16
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8019d42:	683b      	ldr	r3, [r7, #0]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d109      	bne.n	8019d5c <HAL_TIM_PWM_Start+0x24>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8019d4e:	b2db      	uxtb	r3, r3
 8019d50:	2b01      	cmp	r3, #1
 8019d52:	bf14      	ite	ne
 8019d54:	2301      	movne	r3, #1
 8019d56:	2300      	moveq	r3, #0
 8019d58:	b2db      	uxtb	r3, r3
 8019d5a:	e03c      	b.n	8019dd6 <HAL_TIM_PWM_Start+0x9e>
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	2b04      	cmp	r3, #4
 8019d60:	d109      	bne.n	8019d76 <HAL_TIM_PWM_Start+0x3e>
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	2b01      	cmp	r3, #1
 8019d6c:	bf14      	ite	ne
 8019d6e:	2301      	movne	r3, #1
 8019d70:	2300      	moveq	r3, #0
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	e02f      	b.n	8019dd6 <HAL_TIM_PWM_Start+0x9e>
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	2b08      	cmp	r3, #8
 8019d7a:	d109      	bne.n	8019d90 <HAL_TIM_PWM_Start+0x58>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	2b01      	cmp	r3, #1
 8019d86:	bf14      	ite	ne
 8019d88:	2301      	movne	r3, #1
 8019d8a:	2300      	moveq	r3, #0
 8019d8c:	b2db      	uxtb	r3, r3
 8019d8e:	e022      	b.n	8019dd6 <HAL_TIM_PWM_Start+0x9e>
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	2b0c      	cmp	r3, #12
 8019d94:	d109      	bne.n	8019daa <HAL_TIM_PWM_Start+0x72>
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019d9c:	b2db      	uxtb	r3, r3
 8019d9e:	2b01      	cmp	r3, #1
 8019da0:	bf14      	ite	ne
 8019da2:	2301      	movne	r3, #1
 8019da4:	2300      	moveq	r3, #0
 8019da6:	b2db      	uxtb	r3, r3
 8019da8:	e015      	b.n	8019dd6 <HAL_TIM_PWM_Start+0x9e>
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	2b10      	cmp	r3, #16
 8019dae:	d109      	bne.n	8019dc4 <HAL_TIM_PWM_Start+0x8c>
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	bf14      	ite	ne
 8019dbc:	2301      	movne	r3, #1
 8019dbe:	2300      	moveq	r3, #0
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	e008      	b.n	8019dd6 <HAL_TIM_PWM_Start+0x9e>
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019dca:	b2db      	uxtb	r3, r3
 8019dcc:	2b01      	cmp	r3, #1
 8019dce:	bf14      	ite	ne
 8019dd0:	2301      	movne	r3, #1
 8019dd2:	2300      	moveq	r3, #0
 8019dd4:	b2db      	uxtb	r3, r3
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d001      	beq.n	8019dde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8019dda:	2301      	movs	r3, #1
 8019ddc:	e07e      	b.n	8019edc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d104      	bne.n	8019dee <HAL_TIM_PWM_Start+0xb6>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	2202      	movs	r2, #2
 8019de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019dec:	e023      	b.n	8019e36 <HAL_TIM_PWM_Start+0xfe>
 8019dee:	683b      	ldr	r3, [r7, #0]
 8019df0:	2b04      	cmp	r3, #4
 8019df2:	d104      	bne.n	8019dfe <HAL_TIM_PWM_Start+0xc6>
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2202      	movs	r2, #2
 8019df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019dfc:	e01b      	b.n	8019e36 <HAL_TIM_PWM_Start+0xfe>
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	2b08      	cmp	r3, #8
 8019e02:	d104      	bne.n	8019e0e <HAL_TIM_PWM_Start+0xd6>
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2202      	movs	r2, #2
 8019e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019e0c:	e013      	b.n	8019e36 <HAL_TIM_PWM_Start+0xfe>
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	2b0c      	cmp	r3, #12
 8019e12:	d104      	bne.n	8019e1e <HAL_TIM_PWM_Start+0xe6>
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2202      	movs	r2, #2
 8019e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019e1c:	e00b      	b.n	8019e36 <HAL_TIM_PWM_Start+0xfe>
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	2b10      	cmp	r3, #16
 8019e22:	d104      	bne.n	8019e2e <HAL_TIM_PWM_Start+0xf6>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2202      	movs	r2, #2
 8019e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019e2c:	e003      	b.n	8019e36 <HAL_TIM_PWM_Start+0xfe>
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2202      	movs	r2, #2
 8019e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2201      	movs	r2, #1
 8019e3c:	6839      	ldr	r1, [r7, #0]
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f000 ff80 	bl	801ad44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	4a26      	ldr	r2, [pc, #152]	@ (8019ee4 <HAL_TIM_PWM_Start+0x1ac>)
 8019e4a:	4293      	cmp	r3, r2
 8019e4c:	d009      	beq.n	8019e62 <HAL_TIM_PWM_Start+0x12a>
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	4a25      	ldr	r2, [pc, #148]	@ (8019ee8 <HAL_TIM_PWM_Start+0x1b0>)
 8019e54:	4293      	cmp	r3, r2
 8019e56:	d004      	beq.n	8019e62 <HAL_TIM_PWM_Start+0x12a>
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	4a23      	ldr	r2, [pc, #140]	@ (8019eec <HAL_TIM_PWM_Start+0x1b4>)
 8019e5e:	4293      	cmp	r3, r2
 8019e60:	d101      	bne.n	8019e66 <HAL_TIM_PWM_Start+0x12e>
 8019e62:	2301      	movs	r3, #1
 8019e64:	e000      	b.n	8019e68 <HAL_TIM_PWM_Start+0x130>
 8019e66:	2300      	movs	r3, #0
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d007      	beq.n	8019e7c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8019e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	4a18      	ldr	r2, [pc, #96]	@ (8019ee4 <HAL_TIM_PWM_Start+0x1ac>)
 8019e82:	4293      	cmp	r3, r2
 8019e84:	d009      	beq.n	8019e9a <HAL_TIM_PWM_Start+0x162>
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019e8e:	d004      	beq.n	8019e9a <HAL_TIM_PWM_Start+0x162>
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	4a14      	ldr	r2, [pc, #80]	@ (8019ee8 <HAL_TIM_PWM_Start+0x1b0>)
 8019e96:	4293      	cmp	r3, r2
 8019e98:	d115      	bne.n	8019ec6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	689a      	ldr	r2, [r3, #8]
 8019ea0:	4b13      	ldr	r3, [pc, #76]	@ (8019ef0 <HAL_TIM_PWM_Start+0x1b8>)
 8019ea2:	4013      	ands	r3, r2
 8019ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	2b06      	cmp	r3, #6
 8019eaa:	d015      	beq.n	8019ed8 <HAL_TIM_PWM_Start+0x1a0>
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019eb2:	d011      	beq.n	8019ed8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	681a      	ldr	r2, [r3, #0]
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	f042 0201 	orr.w	r2, r2, #1
 8019ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ec4:	e008      	b.n	8019ed8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	681a      	ldr	r2, [r3, #0]
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	f042 0201 	orr.w	r2, r2, #1
 8019ed4:	601a      	str	r2, [r3, #0]
 8019ed6:	e000      	b.n	8019eda <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019eda:	2300      	movs	r3, #0
}
 8019edc:	4618      	mov	r0, r3
 8019ede:	3710      	adds	r7, #16
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}
 8019ee4:	40012c00 	.word	0x40012c00
 8019ee8:	40014000 	.word	0x40014000
 8019eec:	40014400 	.word	0x40014400
 8019ef0:	00010007 	.word	0x00010007

08019ef4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b082      	sub	sp, #8
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
 8019efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	2200      	movs	r2, #0
 8019f04:	6839      	ldr	r1, [r7, #0]
 8019f06:	4618      	mov	r0, r3
 8019f08:	f000 ff1c 	bl	801ad44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	4a39      	ldr	r2, [pc, #228]	@ (8019ff8 <HAL_TIM_PWM_Stop+0x104>)
 8019f12:	4293      	cmp	r3, r2
 8019f14:	d009      	beq.n	8019f2a <HAL_TIM_PWM_Stop+0x36>
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	4a38      	ldr	r2, [pc, #224]	@ (8019ffc <HAL_TIM_PWM_Stop+0x108>)
 8019f1c:	4293      	cmp	r3, r2
 8019f1e:	d004      	beq.n	8019f2a <HAL_TIM_PWM_Stop+0x36>
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	4a36      	ldr	r2, [pc, #216]	@ (801a000 <HAL_TIM_PWM_Stop+0x10c>)
 8019f26:	4293      	cmp	r3, r2
 8019f28:	d101      	bne.n	8019f2e <HAL_TIM_PWM_Stop+0x3a>
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	e000      	b.n	8019f30 <HAL_TIM_PWM_Stop+0x3c>
 8019f2e:	2300      	movs	r3, #0
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d017      	beq.n	8019f64 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	6a1a      	ldr	r2, [r3, #32]
 8019f3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019f3e:	4013      	ands	r3, r2
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d10f      	bne.n	8019f64 <HAL_TIM_PWM_Stop+0x70>
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	6a1a      	ldr	r2, [r3, #32]
 8019f4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8019f4e:	4013      	ands	r3, r2
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d107      	bne.n	8019f64 <HAL_TIM_PWM_Stop+0x70>
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8019f62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	6a1a      	ldr	r2, [r3, #32]
 8019f6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019f6e:	4013      	ands	r3, r2
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d10f      	bne.n	8019f94 <HAL_TIM_PWM_Stop+0xa0>
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	6a1a      	ldr	r2, [r3, #32]
 8019f7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8019f7e:	4013      	ands	r3, r2
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d107      	bne.n	8019f94 <HAL_TIM_PWM_Stop+0xa0>
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	681a      	ldr	r2, [r3, #0]
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f022 0201 	bic.w	r2, r2, #1
 8019f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d104      	bne.n	8019fa4 <HAL_TIM_PWM_Stop+0xb0>
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	2201      	movs	r2, #1
 8019f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019fa2:	e023      	b.n	8019fec <HAL_TIM_PWM_Stop+0xf8>
 8019fa4:	683b      	ldr	r3, [r7, #0]
 8019fa6:	2b04      	cmp	r3, #4
 8019fa8:	d104      	bne.n	8019fb4 <HAL_TIM_PWM_Stop+0xc0>
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	2201      	movs	r2, #1
 8019fae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019fb2:	e01b      	b.n	8019fec <HAL_TIM_PWM_Stop+0xf8>
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	2b08      	cmp	r3, #8
 8019fb8:	d104      	bne.n	8019fc4 <HAL_TIM_PWM_Stop+0xd0>
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	2201      	movs	r2, #1
 8019fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019fc2:	e013      	b.n	8019fec <HAL_TIM_PWM_Stop+0xf8>
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	2b0c      	cmp	r3, #12
 8019fc8:	d104      	bne.n	8019fd4 <HAL_TIM_PWM_Stop+0xe0>
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2201      	movs	r2, #1
 8019fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019fd2:	e00b      	b.n	8019fec <HAL_TIM_PWM_Stop+0xf8>
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	2b10      	cmp	r3, #16
 8019fd8:	d104      	bne.n	8019fe4 <HAL_TIM_PWM_Stop+0xf0>
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	2201      	movs	r2, #1
 8019fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019fe2:	e003      	b.n	8019fec <HAL_TIM_PWM_Stop+0xf8>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2201      	movs	r2, #1
 8019fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8019fec:	2300      	movs	r3, #0
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3708      	adds	r7, #8
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
 8019ff6:	bf00      	nop
 8019ff8:	40012c00 	.word	0x40012c00
 8019ffc:	40014000 	.word	0x40014000
 801a000:	40014400 	.word	0x40014400

0801a004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b084      	sub	sp, #16
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	68db      	ldr	r3, [r3, #12]
 801a012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	691b      	ldr	r3, [r3, #16]
 801a01a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	f003 0302 	and.w	r3, r3, #2
 801a022:	2b00      	cmp	r3, #0
 801a024:	d020      	beq.n	801a068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	f003 0302 	and.w	r3, r3, #2
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d01b      	beq.n	801a068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	f06f 0202 	mvn.w	r2, #2
 801a038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2201      	movs	r2, #1
 801a03e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	699b      	ldr	r3, [r3, #24]
 801a046:	f003 0303 	and.w	r3, r3, #3
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d003      	beq.n	801a056 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a04e:	6878      	ldr	r0, [r7, #4]
 801a050:	f000 fad1 	bl	801a5f6 <HAL_TIM_IC_CaptureCallback>
 801a054:	e005      	b.n	801a062 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f000 fac3 	bl	801a5e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a05c:	6878      	ldr	r0, [r7, #4]
 801a05e:	f000 fad4 	bl	801a60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	2200      	movs	r2, #0
 801a066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	f003 0304 	and.w	r3, r3, #4
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d020      	beq.n	801a0b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	f003 0304 	and.w	r3, r3, #4
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d01b      	beq.n	801a0b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	f06f 0204 	mvn.w	r2, #4
 801a084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2202      	movs	r2, #2
 801a08a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	699b      	ldr	r3, [r3, #24]
 801a092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801a096:	2b00      	cmp	r3, #0
 801a098:	d003      	beq.n	801a0a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a09a:	6878      	ldr	r0, [r7, #4]
 801a09c:	f000 faab 	bl	801a5f6 <HAL_TIM_IC_CaptureCallback>
 801a0a0:	e005      	b.n	801a0ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a0a2:	6878      	ldr	r0, [r7, #4]
 801a0a4:	f000 fa9d 	bl	801a5e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	f000 faae 	bl	801a60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	f003 0308 	and.w	r3, r3, #8
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d020      	beq.n	801a100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	f003 0308 	and.w	r3, r3, #8
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d01b      	beq.n	801a100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	f06f 0208 	mvn.w	r2, #8
 801a0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	2204      	movs	r2, #4
 801a0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	69db      	ldr	r3, [r3, #28]
 801a0de:	f003 0303 	and.w	r3, r3, #3
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d003      	beq.n	801a0ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a0e6:	6878      	ldr	r0, [r7, #4]
 801a0e8:	f000 fa85 	bl	801a5f6 <HAL_TIM_IC_CaptureCallback>
 801a0ec:	e005      	b.n	801a0fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	f000 fa77 	bl	801a5e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a0f4:	6878      	ldr	r0, [r7, #4]
 801a0f6:	f000 fa88 	bl	801a60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	f003 0310 	and.w	r3, r3, #16
 801a106:	2b00      	cmp	r3, #0
 801a108:	d020      	beq.n	801a14c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	f003 0310 	and.w	r3, r3, #16
 801a110:	2b00      	cmp	r3, #0
 801a112:	d01b      	beq.n	801a14c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f06f 0210 	mvn.w	r2, #16
 801a11c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2208      	movs	r2, #8
 801a122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	69db      	ldr	r3, [r3, #28]
 801a12a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d003      	beq.n	801a13a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a132:	6878      	ldr	r0, [r7, #4]
 801a134:	f000 fa5f 	bl	801a5f6 <HAL_TIM_IC_CaptureCallback>
 801a138:	e005      	b.n	801a146 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a13a:	6878      	ldr	r0, [r7, #4]
 801a13c:	f000 fa51 	bl	801a5e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a140:	6878      	ldr	r0, [r7, #4]
 801a142:	f000 fa62 	bl	801a60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	2200      	movs	r2, #0
 801a14a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801a14c:	68bb      	ldr	r3, [r7, #8]
 801a14e:	f003 0301 	and.w	r3, r3, #1
 801a152:	2b00      	cmp	r3, #0
 801a154:	d00c      	beq.n	801a170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	f003 0301 	and.w	r3, r3, #1
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d007      	beq.n	801a170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	f06f 0201 	mvn.w	r2, #1
 801a168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f000 fa2f 	bl	801a5ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a176:	2b00      	cmp	r3, #0
 801a178:	d104      	bne.n	801a184 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801a180:	2b00      	cmp	r3, #0
 801a182:	d00c      	beq.n	801a19e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d007      	beq.n	801a19e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801a196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a198:	6878      	ldr	r0, [r7, #4]
 801a19a:	f000 fee1 	bl	801af60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801a19e:	68bb      	ldr	r3, [r7, #8]
 801a1a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d00c      	beq.n	801a1c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d007      	beq.n	801a1c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801a1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f000 fed9 	bl	801af74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d00c      	beq.n	801a1e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d007      	beq.n	801a1e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801a1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f000 fa1c 	bl	801a61e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801a1e6:	68bb      	ldr	r3, [r7, #8]
 801a1e8:	f003 0320 	and.w	r3, r3, #32
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d00c      	beq.n	801a20a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	f003 0320 	and.w	r3, r3, #32
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d007      	beq.n	801a20a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	f06f 0220 	mvn.w	r2, #32
 801a202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a204:	6878      	ldr	r0, [r7, #4]
 801a206:	f000 fea1 	bl	801af4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a20a:	bf00      	nop
 801a20c:	3710      	adds	r7, #16
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}
	...

0801a214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b086      	sub	sp, #24
 801a218:	af00      	add	r7, sp, #0
 801a21a:	60f8      	str	r0, [r7, #12]
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a220:	2300      	movs	r3, #0
 801a222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a22a:	2b01      	cmp	r3, #1
 801a22c:	d101      	bne.n	801a232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801a22e:	2302      	movs	r3, #2
 801a230:	e0ff      	b.n	801a432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	2201      	movs	r2, #1
 801a236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	2b14      	cmp	r3, #20
 801a23e:	f200 80f0 	bhi.w	801a422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801a242:	a201      	add	r2, pc, #4	@ (adr r2, 801a248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a248:	0801a29d 	.word	0x0801a29d
 801a24c:	0801a423 	.word	0x0801a423
 801a250:	0801a423 	.word	0x0801a423
 801a254:	0801a423 	.word	0x0801a423
 801a258:	0801a2dd 	.word	0x0801a2dd
 801a25c:	0801a423 	.word	0x0801a423
 801a260:	0801a423 	.word	0x0801a423
 801a264:	0801a423 	.word	0x0801a423
 801a268:	0801a31f 	.word	0x0801a31f
 801a26c:	0801a423 	.word	0x0801a423
 801a270:	0801a423 	.word	0x0801a423
 801a274:	0801a423 	.word	0x0801a423
 801a278:	0801a35f 	.word	0x0801a35f
 801a27c:	0801a423 	.word	0x0801a423
 801a280:	0801a423 	.word	0x0801a423
 801a284:	0801a423 	.word	0x0801a423
 801a288:	0801a3a1 	.word	0x0801a3a1
 801a28c:	0801a423 	.word	0x0801a423
 801a290:	0801a423 	.word	0x0801a423
 801a294:	0801a423 	.word	0x0801a423
 801a298:	0801a3e1 	.word	0x0801a3e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	68b9      	ldr	r1, [r7, #8]
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	f000 fa36 	bl	801a714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	699a      	ldr	r2, [r3, #24]
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	f042 0208 	orr.w	r2, r2, #8
 801a2b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a2b8:	68fb      	ldr	r3, [r7, #12]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	699a      	ldr	r2, [r3, #24]
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	f022 0204 	bic.w	r2, r2, #4
 801a2c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	6999      	ldr	r1, [r3, #24]
 801a2ce:	68bb      	ldr	r3, [r7, #8]
 801a2d0:	691a      	ldr	r2, [r3, #16]
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	430a      	orrs	r2, r1
 801a2d8:	619a      	str	r2, [r3, #24]
      break;
 801a2da:	e0a5      	b.n	801a428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	68b9      	ldr	r1, [r7, #8]
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	f000 fa92 	bl	801a80c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	699a      	ldr	r2, [r3, #24]
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801a2f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	699a      	ldr	r2, [r3, #24]
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801a306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	6999      	ldr	r1, [r3, #24]
 801a30e:	68bb      	ldr	r3, [r7, #8]
 801a310:	691b      	ldr	r3, [r3, #16]
 801a312:	021a      	lsls	r2, r3, #8
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	430a      	orrs	r2, r1
 801a31a:	619a      	str	r2, [r3, #24]
      break;
 801a31c:	e084      	b.n	801a428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	68b9      	ldr	r1, [r7, #8]
 801a324:	4618      	mov	r0, r3
 801a326:	f000 faeb 	bl	801a900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	69da      	ldr	r2, [r3, #28]
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	f042 0208 	orr.w	r2, r2, #8
 801a338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	69da      	ldr	r2, [r3, #28]
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	f022 0204 	bic.w	r2, r2, #4
 801a348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	69d9      	ldr	r1, [r3, #28]
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	691a      	ldr	r2, [r3, #16]
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	430a      	orrs	r2, r1
 801a35a:	61da      	str	r2, [r3, #28]
      break;
 801a35c:	e064      	b.n	801a428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	68b9      	ldr	r1, [r7, #8]
 801a364:	4618      	mov	r0, r3
 801a366:	f000 fb43 	bl	801a9f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	69da      	ldr	r2, [r3, #28]
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801a378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	69da      	ldr	r2, [r3, #28]
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801a388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	69d9      	ldr	r1, [r3, #28]
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	691b      	ldr	r3, [r3, #16]
 801a394:	021a      	lsls	r2, r3, #8
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	430a      	orrs	r2, r1
 801a39c:	61da      	str	r2, [r3, #28]
      break;
 801a39e:	e043      	b.n	801a428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	68b9      	ldr	r1, [r7, #8]
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f000 fb80 	bl	801aaac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	f042 0208 	orr.w	r2, r2, #8
 801a3ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	f022 0204 	bic.w	r2, r2, #4
 801a3ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	691a      	ldr	r2, [r3, #16]
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	430a      	orrs	r2, r1
 801a3dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801a3de:	e023      	b.n	801a428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	68b9      	ldr	r1, [r7, #8]
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f000 fbb8 	bl	801ab5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801a3fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801a40a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	691b      	ldr	r3, [r3, #16]
 801a416:	021a      	lsls	r2, r3, #8
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	430a      	orrs	r2, r1
 801a41e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801a420:	e002      	b.n	801a428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801a422:	2301      	movs	r3, #1
 801a424:	75fb      	strb	r3, [r7, #23]
      break;
 801a426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	2200      	movs	r2, #0
 801a42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801a430:	7dfb      	ldrb	r3, [r7, #23]
}
 801a432:	4618      	mov	r0, r3
 801a434:	3718      	adds	r7, #24
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}
 801a43a:	bf00      	nop

0801a43c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
 801a444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a446:	2300      	movs	r3, #0
 801a448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a450:	2b01      	cmp	r3, #1
 801a452:	d101      	bne.n	801a458 <HAL_TIM_ConfigClockSource+0x1c>
 801a454:	2302      	movs	r3, #2
 801a456:	e0b6      	b.n	801a5c6 <HAL_TIM_ConfigClockSource+0x18a>
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2201      	movs	r2, #1
 801a45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2202      	movs	r2, #2
 801a464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	689b      	ldr	r3, [r3, #8]
 801a46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a470:	68bb      	ldr	r3, [r7, #8]
 801a472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801a47a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801a482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	68ba      	ldr	r2, [r7, #8]
 801a48a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a494:	d03e      	beq.n	801a514 <HAL_TIM_ConfigClockSource+0xd8>
 801a496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a49a:	f200 8087 	bhi.w	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a49e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a4a2:	f000 8086 	beq.w	801a5b2 <HAL_TIM_ConfigClockSource+0x176>
 801a4a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a4aa:	d87f      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4ac:	2b70      	cmp	r3, #112	@ 0x70
 801a4ae:	d01a      	beq.n	801a4e6 <HAL_TIM_ConfigClockSource+0xaa>
 801a4b0:	2b70      	cmp	r3, #112	@ 0x70
 801a4b2:	d87b      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4b4:	2b60      	cmp	r3, #96	@ 0x60
 801a4b6:	d050      	beq.n	801a55a <HAL_TIM_ConfigClockSource+0x11e>
 801a4b8:	2b60      	cmp	r3, #96	@ 0x60
 801a4ba:	d877      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4bc:	2b50      	cmp	r3, #80	@ 0x50
 801a4be:	d03c      	beq.n	801a53a <HAL_TIM_ConfigClockSource+0xfe>
 801a4c0:	2b50      	cmp	r3, #80	@ 0x50
 801a4c2:	d873      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4c4:	2b40      	cmp	r3, #64	@ 0x40
 801a4c6:	d058      	beq.n	801a57a <HAL_TIM_ConfigClockSource+0x13e>
 801a4c8:	2b40      	cmp	r3, #64	@ 0x40
 801a4ca:	d86f      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4cc:	2b30      	cmp	r3, #48	@ 0x30
 801a4ce:	d064      	beq.n	801a59a <HAL_TIM_ConfigClockSource+0x15e>
 801a4d0:	2b30      	cmp	r3, #48	@ 0x30
 801a4d2:	d86b      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4d4:	2b20      	cmp	r3, #32
 801a4d6:	d060      	beq.n	801a59a <HAL_TIM_ConfigClockSource+0x15e>
 801a4d8:	2b20      	cmp	r3, #32
 801a4da:	d867      	bhi.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d05c      	beq.n	801a59a <HAL_TIM_ConfigClockSource+0x15e>
 801a4e0:	2b10      	cmp	r3, #16
 801a4e2:	d05a      	beq.n	801a59a <HAL_TIM_ConfigClockSource+0x15e>
 801a4e4:	e062      	b.n	801a5ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a4ea:	683b      	ldr	r3, [r7, #0]
 801a4ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a4f6:	f000 fc05 	bl	801ad04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	689b      	ldr	r3, [r3, #8]
 801a500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a502:	68bb      	ldr	r3, [r7, #8]
 801a504:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801a508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	68ba      	ldr	r2, [r7, #8]
 801a510:	609a      	str	r2, [r3, #8]
      break;
 801a512:	e04f      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a51c:	683b      	ldr	r3, [r7, #0]
 801a51e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a520:	683b      	ldr	r3, [r7, #0]
 801a522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a524:	f000 fbee 	bl	801ad04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	689a      	ldr	r2, [r3, #8]
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a536:	609a      	str	r2, [r3, #8]
      break;
 801a538:	e03c      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a546:	461a      	mov	r2, r3
 801a548:	f000 fb62 	bl	801ac10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	2150      	movs	r1, #80	@ 0x50
 801a552:	4618      	mov	r0, r3
 801a554:	f000 fbbb 	bl	801acce <TIM_ITRx_SetConfig>
      break;
 801a558:	e02c      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a562:	683b      	ldr	r3, [r7, #0]
 801a564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a566:	461a      	mov	r2, r3
 801a568:	f000 fb81 	bl	801ac6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	2160      	movs	r1, #96	@ 0x60
 801a572:	4618      	mov	r0, r3
 801a574:	f000 fbab 	bl	801acce <TIM_ITRx_SetConfig>
      break;
 801a578:	e01c      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a586:	461a      	mov	r2, r3
 801a588:	f000 fb42 	bl	801ac10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	2140      	movs	r1, #64	@ 0x40
 801a592:	4618      	mov	r0, r3
 801a594:	f000 fb9b 	bl	801acce <TIM_ITRx_SetConfig>
      break;
 801a598:	e00c      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	681a      	ldr	r2, [r3, #0]
 801a59e:	683b      	ldr	r3, [r7, #0]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	4610      	mov	r0, r2
 801a5a6:	f000 fb92 	bl	801acce <TIM_ITRx_SetConfig>
      break;
 801a5aa:	e003      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801a5ac:	2301      	movs	r3, #1
 801a5ae:	73fb      	strb	r3, [r7, #15]
      break;
 801a5b0:	e000      	b.n	801a5b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801a5b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2201      	movs	r2, #1
 801a5b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	2200      	movs	r2, #0
 801a5c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	3710      	adds	r7, #16
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	bd80      	pop	{r7, pc}

0801a5ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a5ce:	b480      	push	{r7}
 801a5d0:	b083      	sub	sp, #12
 801a5d2:	af00      	add	r7, sp, #0
 801a5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801a5d6:	bf00      	nop
 801a5d8:	370c      	adds	r7, #12
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e0:	4770      	bx	lr

0801a5e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a5e2:	b480      	push	{r7}
 801a5e4:	b083      	sub	sp, #12
 801a5e6:	af00      	add	r7, sp, #0
 801a5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a5ea:	bf00      	nop
 801a5ec:	370c      	adds	r7, #12
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f4:	4770      	bx	lr

0801a5f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a5f6:	b480      	push	{r7}
 801a5f8:	b083      	sub	sp, #12
 801a5fa:	af00      	add	r7, sp, #0
 801a5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a5fe:	bf00      	nop
 801a600:	370c      	adds	r7, #12
 801a602:	46bd      	mov	sp, r7
 801a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a608:	4770      	bx	lr

0801a60a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a60a:	b480      	push	{r7}
 801a60c:	b083      	sub	sp, #12
 801a60e:	af00      	add	r7, sp, #0
 801a610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a612:	bf00      	nop
 801a614:	370c      	adds	r7, #12
 801a616:	46bd      	mov	sp, r7
 801a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61c:	4770      	bx	lr

0801a61e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a61e:	b480      	push	{r7}
 801a620:	b083      	sub	sp, #12
 801a622:	af00      	add	r7, sp, #0
 801a624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a626:	bf00      	nop
 801a628:	370c      	adds	r7, #12
 801a62a:	46bd      	mov	sp, r7
 801a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a630:	4770      	bx	lr
	...

0801a634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a634:	b480      	push	{r7}
 801a636:	b085      	sub	sp, #20
 801a638:	af00      	add	r7, sp, #0
 801a63a:	6078      	str	r0, [r7, #4]
 801a63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	4a30      	ldr	r2, [pc, #192]	@ (801a708 <TIM_Base_SetConfig+0xd4>)
 801a648:	4293      	cmp	r3, r2
 801a64a:	d003      	beq.n	801a654 <TIM_Base_SetConfig+0x20>
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a652:	d108      	bne.n	801a666 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a65a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	685b      	ldr	r3, [r3, #4]
 801a660:	68fa      	ldr	r2, [r7, #12]
 801a662:	4313      	orrs	r3, r2
 801a664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	4a27      	ldr	r2, [pc, #156]	@ (801a708 <TIM_Base_SetConfig+0xd4>)
 801a66a:	4293      	cmp	r3, r2
 801a66c:	d00b      	beq.n	801a686 <TIM_Base_SetConfig+0x52>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a674:	d007      	beq.n	801a686 <TIM_Base_SetConfig+0x52>
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	4a24      	ldr	r2, [pc, #144]	@ (801a70c <TIM_Base_SetConfig+0xd8>)
 801a67a:	4293      	cmp	r3, r2
 801a67c:	d003      	beq.n	801a686 <TIM_Base_SetConfig+0x52>
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	4a23      	ldr	r2, [pc, #140]	@ (801a710 <TIM_Base_SetConfig+0xdc>)
 801a682:	4293      	cmp	r3, r2
 801a684:	d108      	bne.n	801a698 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a68c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	68db      	ldr	r3, [r3, #12]
 801a692:	68fa      	ldr	r2, [r7, #12]
 801a694:	4313      	orrs	r3, r2
 801a696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	695b      	ldr	r3, [r3, #20]
 801a6a2:	4313      	orrs	r3, r2
 801a6a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	68fa      	ldr	r2, [r7, #12]
 801a6aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	689a      	ldr	r2, [r3, #8]
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a6b4:	683b      	ldr	r3, [r7, #0]
 801a6b6:	681a      	ldr	r2, [r3, #0]
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	4a12      	ldr	r2, [pc, #72]	@ (801a708 <TIM_Base_SetConfig+0xd4>)
 801a6c0:	4293      	cmp	r3, r2
 801a6c2:	d007      	beq.n	801a6d4 <TIM_Base_SetConfig+0xa0>
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	4a11      	ldr	r2, [pc, #68]	@ (801a70c <TIM_Base_SetConfig+0xd8>)
 801a6c8:	4293      	cmp	r3, r2
 801a6ca:	d003      	beq.n	801a6d4 <TIM_Base_SetConfig+0xa0>
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	4a10      	ldr	r2, [pc, #64]	@ (801a710 <TIM_Base_SetConfig+0xdc>)
 801a6d0:	4293      	cmp	r3, r2
 801a6d2:	d103      	bne.n	801a6dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	691a      	ldr	r2, [r3, #16]
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2201      	movs	r2, #1
 801a6e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	691b      	ldr	r3, [r3, #16]
 801a6e6:	f003 0301 	and.w	r3, r3, #1
 801a6ea:	2b01      	cmp	r3, #1
 801a6ec:	d105      	bne.n	801a6fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	691b      	ldr	r3, [r3, #16]
 801a6f2:	f023 0201 	bic.w	r2, r3, #1
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	611a      	str	r2, [r3, #16]
  }
}
 801a6fa:	bf00      	nop
 801a6fc:	3714      	adds	r7, #20
 801a6fe:	46bd      	mov	sp, r7
 801a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a704:	4770      	bx	lr
 801a706:	bf00      	nop
 801a708:	40012c00 	.word	0x40012c00
 801a70c:	40014000 	.word	0x40014000
 801a710:	40014400 	.word	0x40014400

0801a714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a714:	b480      	push	{r7}
 801a716:	b087      	sub	sp, #28
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
 801a71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6a1b      	ldr	r3, [r3, #32]
 801a722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6a1b      	ldr	r3, [r3, #32]
 801a728:	f023 0201 	bic.w	r2, r3, #1
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	699b      	ldr	r3, [r3, #24]
 801a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	f023 0303 	bic.w	r3, r3, #3
 801a74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a750:	683b      	ldr	r3, [r7, #0]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	68fa      	ldr	r2, [r7, #12]
 801a756:	4313      	orrs	r3, r2
 801a758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a75a:	697b      	ldr	r3, [r7, #20]
 801a75c:	f023 0302 	bic.w	r3, r3, #2
 801a760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	689b      	ldr	r3, [r3, #8]
 801a766:	697a      	ldr	r2, [r7, #20]
 801a768:	4313      	orrs	r3, r2
 801a76a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	4a24      	ldr	r2, [pc, #144]	@ (801a800 <TIM_OC1_SetConfig+0xec>)
 801a770:	4293      	cmp	r3, r2
 801a772:	d007      	beq.n	801a784 <TIM_OC1_SetConfig+0x70>
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	4a23      	ldr	r2, [pc, #140]	@ (801a804 <TIM_OC1_SetConfig+0xf0>)
 801a778:	4293      	cmp	r3, r2
 801a77a:	d003      	beq.n	801a784 <TIM_OC1_SetConfig+0x70>
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	4a22      	ldr	r2, [pc, #136]	@ (801a808 <TIM_OC1_SetConfig+0xf4>)
 801a780:	4293      	cmp	r3, r2
 801a782:	d10c      	bne.n	801a79e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a784:	697b      	ldr	r3, [r7, #20]
 801a786:	f023 0308 	bic.w	r3, r3, #8
 801a78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a78c:	683b      	ldr	r3, [r7, #0]
 801a78e:	68db      	ldr	r3, [r3, #12]
 801a790:	697a      	ldr	r2, [r7, #20]
 801a792:	4313      	orrs	r3, r2
 801a794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	f023 0304 	bic.w	r3, r3, #4
 801a79c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	4a17      	ldr	r2, [pc, #92]	@ (801a800 <TIM_OC1_SetConfig+0xec>)
 801a7a2:	4293      	cmp	r3, r2
 801a7a4:	d007      	beq.n	801a7b6 <TIM_OC1_SetConfig+0xa2>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	4a16      	ldr	r2, [pc, #88]	@ (801a804 <TIM_OC1_SetConfig+0xf0>)
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	d003      	beq.n	801a7b6 <TIM_OC1_SetConfig+0xa2>
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	4a15      	ldr	r2, [pc, #84]	@ (801a808 <TIM_OC1_SetConfig+0xf4>)
 801a7b2:	4293      	cmp	r3, r2
 801a7b4:	d111      	bne.n	801a7da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a7bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a7be:	693b      	ldr	r3, [r7, #16]
 801a7c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	695b      	ldr	r3, [r3, #20]
 801a7ca:	693a      	ldr	r2, [r7, #16]
 801a7cc:	4313      	orrs	r3, r2
 801a7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a7d0:	683b      	ldr	r3, [r7, #0]
 801a7d2:	699b      	ldr	r3, [r3, #24]
 801a7d4:	693a      	ldr	r2, [r7, #16]
 801a7d6:	4313      	orrs	r3, r2
 801a7d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	693a      	ldr	r2, [r7, #16]
 801a7de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	68fa      	ldr	r2, [r7, #12]
 801a7e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a7e6:	683b      	ldr	r3, [r7, #0]
 801a7e8:	685a      	ldr	r2, [r3, #4]
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	697a      	ldr	r2, [r7, #20]
 801a7f2:	621a      	str	r2, [r3, #32]
}
 801a7f4:	bf00      	nop
 801a7f6:	371c      	adds	r7, #28
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7fe:	4770      	bx	lr
 801a800:	40012c00 	.word	0x40012c00
 801a804:	40014000 	.word	0x40014000
 801a808:	40014400 	.word	0x40014400

0801a80c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a80c:	b480      	push	{r7}
 801a80e:	b087      	sub	sp, #28
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
 801a814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	6a1b      	ldr	r3, [r3, #32]
 801a81a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6a1b      	ldr	r3, [r3, #32]
 801a820:	f023 0210 	bic.w	r2, r3, #16
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	685b      	ldr	r3, [r3, #4]
 801a82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	699b      	ldr	r3, [r3, #24]
 801a832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a83a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a848:	683b      	ldr	r3, [r7, #0]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	021b      	lsls	r3, r3, #8
 801a84e:	68fa      	ldr	r2, [r7, #12]
 801a850:	4313      	orrs	r3, r2
 801a852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a854:	697b      	ldr	r3, [r7, #20]
 801a856:	f023 0320 	bic.w	r3, r3, #32
 801a85a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	689b      	ldr	r3, [r3, #8]
 801a860:	011b      	lsls	r3, r3, #4
 801a862:	697a      	ldr	r2, [r7, #20]
 801a864:	4313      	orrs	r3, r2
 801a866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	4a22      	ldr	r2, [pc, #136]	@ (801a8f4 <TIM_OC2_SetConfig+0xe8>)
 801a86c:	4293      	cmp	r3, r2
 801a86e:	d10d      	bne.n	801a88c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a870:	697b      	ldr	r3, [r7, #20]
 801a872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a878:	683b      	ldr	r3, [r7, #0]
 801a87a:	68db      	ldr	r3, [r3, #12]
 801a87c:	011b      	lsls	r3, r3, #4
 801a87e:	697a      	ldr	r2, [r7, #20]
 801a880:	4313      	orrs	r3, r2
 801a882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a88a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	4a19      	ldr	r2, [pc, #100]	@ (801a8f4 <TIM_OC2_SetConfig+0xe8>)
 801a890:	4293      	cmp	r3, r2
 801a892:	d007      	beq.n	801a8a4 <TIM_OC2_SetConfig+0x98>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	4a18      	ldr	r2, [pc, #96]	@ (801a8f8 <TIM_OC2_SetConfig+0xec>)
 801a898:	4293      	cmp	r3, r2
 801a89a:	d003      	beq.n	801a8a4 <TIM_OC2_SetConfig+0x98>
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	4a17      	ldr	r2, [pc, #92]	@ (801a8fc <TIM_OC2_SetConfig+0xf0>)
 801a8a0:	4293      	cmp	r3, r2
 801a8a2:	d113      	bne.n	801a8cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801a8a4:	693b      	ldr	r3, [r7, #16]
 801a8a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a8aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801a8b4:	683b      	ldr	r3, [r7, #0]
 801a8b6:	695b      	ldr	r3, [r3, #20]
 801a8b8:	009b      	lsls	r3, r3, #2
 801a8ba:	693a      	ldr	r2, [r7, #16]
 801a8bc:	4313      	orrs	r3, r2
 801a8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801a8c0:	683b      	ldr	r3, [r7, #0]
 801a8c2:	699b      	ldr	r3, [r3, #24]
 801a8c4:	009b      	lsls	r3, r3, #2
 801a8c6:	693a      	ldr	r2, [r7, #16]
 801a8c8:	4313      	orrs	r3, r2
 801a8ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	693a      	ldr	r2, [r7, #16]
 801a8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	68fa      	ldr	r2, [r7, #12]
 801a8d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	685a      	ldr	r2, [r3, #4]
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	697a      	ldr	r2, [r7, #20]
 801a8e4:	621a      	str	r2, [r3, #32]
}
 801a8e6:	bf00      	nop
 801a8e8:	371c      	adds	r7, #28
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f0:	4770      	bx	lr
 801a8f2:	bf00      	nop
 801a8f4:	40012c00 	.word	0x40012c00
 801a8f8:	40014000 	.word	0x40014000
 801a8fc:	40014400 	.word	0x40014400

0801a900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a900:	b480      	push	{r7}
 801a902:	b087      	sub	sp, #28
 801a904:	af00      	add	r7, sp, #0
 801a906:	6078      	str	r0, [r7, #4]
 801a908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	6a1b      	ldr	r3, [r3, #32]
 801a90e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	6a1b      	ldr	r3, [r3, #32]
 801a914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	685b      	ldr	r3, [r3, #4]
 801a920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	69db      	ldr	r3, [r3, #28]
 801a926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a92e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	f023 0303 	bic.w	r3, r3, #3
 801a93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a93c:	683b      	ldr	r3, [r7, #0]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	68fa      	ldr	r2, [r7, #12]
 801a942:	4313      	orrs	r3, r2
 801a944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a946:	697b      	ldr	r3, [r7, #20]
 801a948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a94c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	689b      	ldr	r3, [r3, #8]
 801a952:	021b      	lsls	r3, r3, #8
 801a954:	697a      	ldr	r2, [r7, #20]
 801a956:	4313      	orrs	r3, r2
 801a958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	4a21      	ldr	r2, [pc, #132]	@ (801a9e4 <TIM_OC3_SetConfig+0xe4>)
 801a95e:	4293      	cmp	r3, r2
 801a960:	d10d      	bne.n	801a97e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801a962:	697b      	ldr	r3, [r7, #20]
 801a964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801a96a:	683b      	ldr	r3, [r7, #0]
 801a96c:	68db      	ldr	r3, [r3, #12]
 801a96e:	021b      	lsls	r3, r3, #8
 801a970:	697a      	ldr	r2, [r7, #20]
 801a972:	4313      	orrs	r3, r2
 801a974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801a976:	697b      	ldr	r3, [r7, #20]
 801a978:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a97c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	4a18      	ldr	r2, [pc, #96]	@ (801a9e4 <TIM_OC3_SetConfig+0xe4>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d007      	beq.n	801a996 <TIM_OC3_SetConfig+0x96>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	4a17      	ldr	r2, [pc, #92]	@ (801a9e8 <TIM_OC3_SetConfig+0xe8>)
 801a98a:	4293      	cmp	r3, r2
 801a98c:	d003      	beq.n	801a996 <TIM_OC3_SetConfig+0x96>
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	4a16      	ldr	r2, [pc, #88]	@ (801a9ec <TIM_OC3_SetConfig+0xec>)
 801a992:	4293      	cmp	r3, r2
 801a994:	d113      	bne.n	801a9be <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801a996:	693b      	ldr	r3, [r7, #16]
 801a998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a99c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801a99e:	693b      	ldr	r3, [r7, #16]
 801a9a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801a9a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	695b      	ldr	r3, [r3, #20]
 801a9aa:	011b      	lsls	r3, r3, #4
 801a9ac:	693a      	ldr	r2, [r7, #16]
 801a9ae:	4313      	orrs	r3, r2
 801a9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801a9b2:	683b      	ldr	r3, [r7, #0]
 801a9b4:	699b      	ldr	r3, [r3, #24]
 801a9b6:	011b      	lsls	r3, r3, #4
 801a9b8:	693a      	ldr	r2, [r7, #16]
 801a9ba:	4313      	orrs	r3, r2
 801a9bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	693a      	ldr	r2, [r7, #16]
 801a9c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	68fa      	ldr	r2, [r7, #12]
 801a9c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	685a      	ldr	r2, [r3, #4]
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	697a      	ldr	r2, [r7, #20]
 801a9d6:	621a      	str	r2, [r3, #32]
}
 801a9d8:	bf00      	nop
 801a9da:	371c      	adds	r7, #28
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e2:	4770      	bx	lr
 801a9e4:	40012c00 	.word	0x40012c00
 801a9e8:	40014000 	.word	0x40014000
 801a9ec:	40014400 	.word	0x40014400

0801a9f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a9f0:	b480      	push	{r7}
 801a9f2:	b087      	sub	sp, #28
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	6a1b      	ldr	r3, [r3, #32]
 801a9fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	6a1b      	ldr	r3, [r3, #32]
 801aa04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	685b      	ldr	r3, [r3, #4]
 801aa10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	69db      	ldr	r3, [r3, #28]
 801aa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801aa1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801aa22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801aa2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	021b      	lsls	r3, r3, #8
 801aa32:	68fa      	ldr	r2, [r7, #12]
 801aa34:	4313      	orrs	r3, r2
 801aa36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801aa38:	693b      	ldr	r3, [r7, #16]
 801aa3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801aa3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	689b      	ldr	r3, [r3, #8]
 801aa44:	031b      	lsls	r3, r3, #12
 801aa46:	693a      	ldr	r2, [r7, #16]
 801aa48:	4313      	orrs	r3, r2
 801aa4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	4a14      	ldr	r2, [pc, #80]	@ (801aaa0 <TIM_OC4_SetConfig+0xb0>)
 801aa50:	4293      	cmp	r3, r2
 801aa52:	d007      	beq.n	801aa64 <TIM_OC4_SetConfig+0x74>
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	4a13      	ldr	r2, [pc, #76]	@ (801aaa4 <TIM_OC4_SetConfig+0xb4>)
 801aa58:	4293      	cmp	r3, r2
 801aa5a:	d003      	beq.n	801aa64 <TIM_OC4_SetConfig+0x74>
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	4a12      	ldr	r2, [pc, #72]	@ (801aaa8 <TIM_OC4_SetConfig+0xb8>)
 801aa60:	4293      	cmp	r3, r2
 801aa62:	d109      	bne.n	801aa78 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801aa64:	697b      	ldr	r3, [r7, #20]
 801aa66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801aa6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801aa6c:	683b      	ldr	r3, [r7, #0]
 801aa6e:	695b      	ldr	r3, [r3, #20]
 801aa70:	019b      	lsls	r3, r3, #6
 801aa72:	697a      	ldr	r2, [r7, #20]
 801aa74:	4313      	orrs	r3, r2
 801aa76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	697a      	ldr	r2, [r7, #20]
 801aa7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	68fa      	ldr	r2, [r7, #12]
 801aa82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	685a      	ldr	r2, [r3, #4]
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	693a      	ldr	r2, [r7, #16]
 801aa90:	621a      	str	r2, [r3, #32]
}
 801aa92:	bf00      	nop
 801aa94:	371c      	adds	r7, #28
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr
 801aa9e:	bf00      	nop
 801aaa0:	40012c00 	.word	0x40012c00
 801aaa4:	40014000 	.word	0x40014000
 801aaa8:	40014400 	.word	0x40014400

0801aaac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801aaac:	b480      	push	{r7}
 801aaae:	b087      	sub	sp, #28
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	6a1b      	ldr	r3, [r3, #32]
 801aaba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	6a1b      	ldr	r3, [r3, #32]
 801aac0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	685b      	ldr	r3, [r3, #4]
 801aacc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801aade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	68fa      	ldr	r2, [r7, #12]
 801aae6:	4313      	orrs	r3, r2
 801aae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801aaea:	693b      	ldr	r3, [r7, #16]
 801aaec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801aaf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	689b      	ldr	r3, [r3, #8]
 801aaf6:	041b      	lsls	r3, r3, #16
 801aaf8:	693a      	ldr	r2, [r7, #16]
 801aafa:	4313      	orrs	r3, r2
 801aafc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	4a13      	ldr	r2, [pc, #76]	@ (801ab50 <TIM_OC5_SetConfig+0xa4>)
 801ab02:	4293      	cmp	r3, r2
 801ab04:	d007      	beq.n	801ab16 <TIM_OC5_SetConfig+0x6a>
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	4a12      	ldr	r2, [pc, #72]	@ (801ab54 <TIM_OC5_SetConfig+0xa8>)
 801ab0a:	4293      	cmp	r3, r2
 801ab0c:	d003      	beq.n	801ab16 <TIM_OC5_SetConfig+0x6a>
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	4a11      	ldr	r2, [pc, #68]	@ (801ab58 <TIM_OC5_SetConfig+0xac>)
 801ab12:	4293      	cmp	r3, r2
 801ab14:	d109      	bne.n	801ab2a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ab16:	697b      	ldr	r3, [r7, #20]
 801ab18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ab1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	695b      	ldr	r3, [r3, #20]
 801ab22:	021b      	lsls	r3, r3, #8
 801ab24:	697a      	ldr	r2, [r7, #20]
 801ab26:	4313      	orrs	r3, r2
 801ab28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	697a      	ldr	r2, [r7, #20]
 801ab2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	68fa      	ldr	r2, [r7, #12]
 801ab34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	685a      	ldr	r2, [r3, #4]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	693a      	ldr	r2, [r7, #16]
 801ab42:	621a      	str	r2, [r3, #32]
}
 801ab44:	bf00      	nop
 801ab46:	371c      	adds	r7, #28
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4e:	4770      	bx	lr
 801ab50:	40012c00 	.word	0x40012c00
 801ab54:	40014000 	.word	0x40014000
 801ab58:	40014400 	.word	0x40014400

0801ab5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801ab5c:	b480      	push	{r7}
 801ab5e:	b087      	sub	sp, #28
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
 801ab64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	6a1b      	ldr	r3, [r3, #32]
 801ab6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	6a1b      	ldr	r3, [r3, #32]
 801ab70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ab82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801ab8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801ab8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	021b      	lsls	r3, r3, #8
 801ab96:	68fa      	ldr	r2, [r7, #12]
 801ab98:	4313      	orrs	r3, r2
 801ab9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801ab9c:	693b      	ldr	r3, [r7, #16]
 801ab9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801aba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801aba4:	683b      	ldr	r3, [r7, #0]
 801aba6:	689b      	ldr	r3, [r3, #8]
 801aba8:	051b      	lsls	r3, r3, #20
 801abaa:	693a      	ldr	r2, [r7, #16]
 801abac:	4313      	orrs	r3, r2
 801abae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	4a14      	ldr	r2, [pc, #80]	@ (801ac04 <TIM_OC6_SetConfig+0xa8>)
 801abb4:	4293      	cmp	r3, r2
 801abb6:	d007      	beq.n	801abc8 <TIM_OC6_SetConfig+0x6c>
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	4a13      	ldr	r2, [pc, #76]	@ (801ac08 <TIM_OC6_SetConfig+0xac>)
 801abbc:	4293      	cmp	r3, r2
 801abbe:	d003      	beq.n	801abc8 <TIM_OC6_SetConfig+0x6c>
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	4a12      	ldr	r2, [pc, #72]	@ (801ac0c <TIM_OC6_SetConfig+0xb0>)
 801abc4:	4293      	cmp	r3, r2
 801abc6:	d109      	bne.n	801abdc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801abc8:	697b      	ldr	r3, [r7, #20]
 801abca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801abce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	695b      	ldr	r3, [r3, #20]
 801abd4:	029b      	lsls	r3, r3, #10
 801abd6:	697a      	ldr	r2, [r7, #20]
 801abd8:	4313      	orrs	r3, r2
 801abda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	697a      	ldr	r2, [r7, #20]
 801abe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	68fa      	ldr	r2, [r7, #12]
 801abe6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801abe8:	683b      	ldr	r3, [r7, #0]
 801abea:	685a      	ldr	r2, [r3, #4]
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	693a      	ldr	r2, [r7, #16]
 801abf4:	621a      	str	r2, [r3, #32]
}
 801abf6:	bf00      	nop
 801abf8:	371c      	adds	r7, #28
 801abfa:	46bd      	mov	sp, r7
 801abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac00:	4770      	bx	lr
 801ac02:	bf00      	nop
 801ac04:	40012c00 	.word	0x40012c00
 801ac08:	40014000 	.word	0x40014000
 801ac0c:	40014400 	.word	0x40014400

0801ac10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ac10:	b480      	push	{r7}
 801ac12:	b087      	sub	sp, #28
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60f8      	str	r0, [r7, #12]
 801ac18:	60b9      	str	r1, [r7, #8]
 801ac1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	6a1b      	ldr	r3, [r3, #32]
 801ac20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	6a1b      	ldr	r3, [r3, #32]
 801ac26:	f023 0201 	bic.w	r2, r3, #1
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	699b      	ldr	r3, [r3, #24]
 801ac32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ac34:	693b      	ldr	r3, [r7, #16]
 801ac36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801ac3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	011b      	lsls	r3, r3, #4
 801ac40:	693a      	ldr	r2, [r7, #16]
 801ac42:	4313      	orrs	r3, r2
 801ac44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	f023 030a 	bic.w	r3, r3, #10
 801ac4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ac4e:	697a      	ldr	r2, [r7, #20]
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	4313      	orrs	r3, r2
 801ac54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	693a      	ldr	r2, [r7, #16]
 801ac5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	697a      	ldr	r2, [r7, #20]
 801ac60:	621a      	str	r2, [r3, #32]
}
 801ac62:	bf00      	nop
 801ac64:	371c      	adds	r7, #28
 801ac66:	46bd      	mov	sp, r7
 801ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac6c:	4770      	bx	lr

0801ac6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ac6e:	b480      	push	{r7}
 801ac70:	b087      	sub	sp, #28
 801ac72:	af00      	add	r7, sp, #0
 801ac74:	60f8      	str	r0, [r7, #12]
 801ac76:	60b9      	str	r1, [r7, #8]
 801ac78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	6a1b      	ldr	r3, [r3, #32]
 801ac7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	6a1b      	ldr	r3, [r3, #32]
 801ac84:	f023 0210 	bic.w	r2, r3, #16
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	699b      	ldr	r3, [r3, #24]
 801ac90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801ac92:	693b      	ldr	r3, [r7, #16]
 801ac94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801ac98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	031b      	lsls	r3, r3, #12
 801ac9e:	693a      	ldr	r2, [r7, #16]
 801aca0:	4313      	orrs	r3, r2
 801aca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801aca4:	697b      	ldr	r3, [r7, #20]
 801aca6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801acaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801acac:	68bb      	ldr	r3, [r7, #8]
 801acae:	011b      	lsls	r3, r3, #4
 801acb0:	697a      	ldr	r2, [r7, #20]
 801acb2:	4313      	orrs	r3, r2
 801acb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	693a      	ldr	r2, [r7, #16]
 801acba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	697a      	ldr	r2, [r7, #20]
 801acc0:	621a      	str	r2, [r3, #32]
}
 801acc2:	bf00      	nop
 801acc4:	371c      	adds	r7, #28
 801acc6:	46bd      	mov	sp, r7
 801acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801accc:	4770      	bx	lr

0801acce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801acce:	b480      	push	{r7}
 801acd0:	b085      	sub	sp, #20
 801acd2:	af00      	add	r7, sp, #0
 801acd4:	6078      	str	r0, [r7, #4]
 801acd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	689b      	ldr	r3, [r3, #8]
 801acdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ace4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801ace6:	683a      	ldr	r2, [r7, #0]
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	4313      	orrs	r3, r2
 801acec:	f043 0307 	orr.w	r3, r3, #7
 801acf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	68fa      	ldr	r2, [r7, #12]
 801acf6:	609a      	str	r2, [r3, #8]
}
 801acf8:	bf00      	nop
 801acfa:	3714      	adds	r7, #20
 801acfc:	46bd      	mov	sp, r7
 801acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad02:	4770      	bx	lr

0801ad04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ad04:	b480      	push	{r7}
 801ad06:	b087      	sub	sp, #28
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	60f8      	str	r0, [r7, #12]
 801ad0c:	60b9      	str	r1, [r7, #8]
 801ad0e:	607a      	str	r2, [r7, #4]
 801ad10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	689b      	ldr	r3, [r3, #8]
 801ad16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ad18:	697b      	ldr	r3, [r7, #20]
 801ad1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ad1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ad20:	683b      	ldr	r3, [r7, #0]
 801ad22:	021a      	lsls	r2, r3, #8
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	431a      	orrs	r2, r3
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	4313      	orrs	r3, r2
 801ad2c:	697a      	ldr	r2, [r7, #20]
 801ad2e:	4313      	orrs	r3, r2
 801ad30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	697a      	ldr	r2, [r7, #20]
 801ad36:	609a      	str	r2, [r3, #8]
}
 801ad38:	bf00      	nop
 801ad3a:	371c      	adds	r7, #28
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad42:	4770      	bx	lr

0801ad44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ad44:	b480      	push	{r7}
 801ad46:	b087      	sub	sp, #28
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	60f8      	str	r0, [r7, #12]
 801ad4c:	60b9      	str	r1, [r7, #8]
 801ad4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	f003 031f 	and.w	r3, r3, #31
 801ad56:	2201      	movs	r2, #1
 801ad58:	fa02 f303 	lsl.w	r3, r2, r3
 801ad5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	6a1a      	ldr	r2, [r3, #32]
 801ad62:	697b      	ldr	r3, [r7, #20]
 801ad64:	43db      	mvns	r3, r3
 801ad66:	401a      	ands	r2, r3
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	6a1a      	ldr	r2, [r3, #32]
 801ad70:	68bb      	ldr	r3, [r7, #8]
 801ad72:	f003 031f 	and.w	r3, r3, #31
 801ad76:	6879      	ldr	r1, [r7, #4]
 801ad78:	fa01 f303 	lsl.w	r3, r1, r3
 801ad7c:	431a      	orrs	r2, r3
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	621a      	str	r2, [r3, #32]
}
 801ad82:	bf00      	nop
 801ad84:	371c      	adds	r7, #28
 801ad86:	46bd      	mov	sp, r7
 801ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8c:	4770      	bx	lr
	...

0801ad90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801ad90:	b480      	push	{r7}
 801ad92:	b085      	sub	sp, #20
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801ada0:	2b01      	cmp	r3, #1
 801ada2:	d101      	bne.n	801ada8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801ada4:	2302      	movs	r3, #2
 801ada6:	e04f      	b.n	801ae48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2201      	movs	r2, #1
 801adac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2202      	movs	r2, #2
 801adb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	685b      	ldr	r3, [r3, #4]
 801adbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	689b      	ldr	r3, [r3, #8]
 801adc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	4a21      	ldr	r2, [pc, #132]	@ (801ae54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801adce:	4293      	cmp	r3, r2
 801add0:	d108      	bne.n	801ade4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801add8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	685b      	ldr	r3, [r3, #4]
 801adde:	68fa      	ldr	r2, [r7, #12]
 801ade0:	4313      	orrs	r3, r2
 801ade2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801adea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	68fa      	ldr	r2, [r7, #12]
 801adf2:	4313      	orrs	r3, r2
 801adf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	68fa      	ldr	r2, [r7, #12]
 801adfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a14      	ldr	r2, [pc, #80]	@ (801ae54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801ae04:	4293      	cmp	r3, r2
 801ae06:	d009      	beq.n	801ae1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ae10:	d004      	beq.n	801ae1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a10      	ldr	r2, [pc, #64]	@ (801ae58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d10c      	bne.n	801ae36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ae22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	689b      	ldr	r3, [r3, #8]
 801ae28:	68ba      	ldr	r2, [r7, #8]
 801ae2a:	4313      	orrs	r3, r2
 801ae2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	68ba      	ldr	r2, [r7, #8]
 801ae34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	2201      	movs	r2, #1
 801ae3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	2200      	movs	r2, #0
 801ae42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801ae46:	2300      	movs	r3, #0
}
 801ae48:	4618      	mov	r0, r3
 801ae4a:	3714      	adds	r7, #20
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae52:	4770      	bx	lr
 801ae54:	40012c00 	.word	0x40012c00
 801ae58:	40014000 	.word	0x40014000

0801ae5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801ae5c:	b480      	push	{r7}
 801ae5e:	b085      	sub	sp, #20
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
 801ae64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801ae66:	2300      	movs	r3, #0
 801ae68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801ae70:	2b01      	cmp	r3, #1
 801ae72:	d101      	bne.n	801ae78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801ae74:	2302      	movs	r3, #2
 801ae76:	e060      	b.n	801af3a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	2201      	movs	r2, #1
 801ae7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	68db      	ldr	r3, [r3, #12]
 801ae8a:	4313      	orrs	r3, r2
 801ae8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801ae94:	683b      	ldr	r3, [r7, #0]
 801ae96:	689b      	ldr	r3, [r3, #8]
 801ae98:	4313      	orrs	r3, r2
 801ae9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	685b      	ldr	r3, [r3, #4]
 801aea6:	4313      	orrs	r3, r2
 801aea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	4313      	orrs	r3, r2
 801aeb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	691b      	ldr	r3, [r3, #16]
 801aec2:	4313      	orrs	r3, r2
 801aec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	695b      	ldr	r3, [r3, #20]
 801aed0:	4313      	orrs	r3, r2
 801aed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aede:	4313      	orrs	r3, r2
 801aee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801aee8:	683b      	ldr	r3, [r7, #0]
 801aeea:	699b      	ldr	r3, [r3, #24]
 801aeec:	041b      	lsls	r3, r3, #16
 801aeee:	4313      	orrs	r3, r2
 801aef0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	4a14      	ldr	r2, [pc, #80]	@ (801af48 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d115      	bne.n	801af28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801af02:	683b      	ldr	r3, [r7, #0]
 801af04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af06:	051b      	lsls	r3, r3, #20
 801af08:	4313      	orrs	r3, r2
 801af0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	69db      	ldr	r3, [r3, #28]
 801af16:	4313      	orrs	r3, r2
 801af18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801af20:	683b      	ldr	r3, [r7, #0]
 801af22:	6a1b      	ldr	r3, [r3, #32]
 801af24:	4313      	orrs	r3, r2
 801af26:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	68fa      	ldr	r2, [r7, #12]
 801af2e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	2200      	movs	r2, #0
 801af34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801af38:	2300      	movs	r3, #0
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	3714      	adds	r7, #20
 801af3e:	46bd      	mov	sp, r7
 801af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af44:	4770      	bx	lr
 801af46:	bf00      	nop
 801af48:	40012c00 	.word	0x40012c00

0801af4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801af4c:	b480      	push	{r7}
 801af4e:	b083      	sub	sp, #12
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801af54:	bf00      	nop
 801af56:	370c      	adds	r7, #12
 801af58:	46bd      	mov	sp, r7
 801af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5e:	4770      	bx	lr

0801af60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801af60:	b480      	push	{r7}
 801af62:	b083      	sub	sp, #12
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801af68:	bf00      	nop
 801af6a:	370c      	adds	r7, #12
 801af6c:	46bd      	mov	sp, r7
 801af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af72:	4770      	bx	lr

0801af74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801af74:	b480      	push	{r7}
 801af76:	b083      	sub	sp, #12
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801af7c:	bf00      	nop
 801af7e:	370c      	adds	r7, #12
 801af80:	46bd      	mov	sp, r7
 801af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af86:	4770      	bx	lr

0801af88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b082      	sub	sp, #8
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d101      	bne.n	801af9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801af96:	2301      	movs	r3, #1
 801af98:	e040      	b.n	801b01c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d106      	bne.n	801afb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	2200      	movs	r2, #0
 801afa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801afaa:	6878      	ldr	r0, [r7, #4]
 801afac:	f7e7 fa16 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2224      	movs	r2, #36	@ 0x24
 801afb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	681a      	ldr	r2, [r3, #0]
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	f022 0201 	bic.w	r2, r2, #1
 801afc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d002      	beq.n	801afd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801afce:	6878      	ldr	r0, [r7, #4]
 801afd0:	f000 fe7e 	bl	801bcd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801afd4:	6878      	ldr	r0, [r7, #4]
 801afd6:	f000 fc21 	bl	801b81c <UART_SetConfig>
 801afda:	4603      	mov	r3, r0
 801afdc:	2b01      	cmp	r3, #1
 801afde:	d101      	bne.n	801afe4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801afe0:	2301      	movs	r3, #1
 801afe2:	e01b      	b.n	801b01c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	685a      	ldr	r2, [r3, #4]
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801aff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	689a      	ldr	r2, [r3, #8]
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801b002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	681a      	ldr	r2, [r3, #0]
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	f042 0201 	orr.w	r2, r2, #1
 801b012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b014:	6878      	ldr	r0, [r7, #4]
 801b016:	f000 fefd 	bl	801be14 <UART_CheckIdleState>
 801b01a:	4603      	mov	r3, r0
}
 801b01c:	4618      	mov	r0, r3
 801b01e:	3708      	adds	r7, #8
 801b020:	46bd      	mov	sp, r7
 801b022:	bd80      	pop	{r7, pc}

0801b024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	b08a      	sub	sp, #40	@ 0x28
 801b028:	af02      	add	r7, sp, #8
 801b02a:	60f8      	str	r0, [r7, #12]
 801b02c:	60b9      	str	r1, [r7, #8]
 801b02e:	603b      	str	r3, [r7, #0]
 801b030:	4613      	mov	r3, r2
 801b032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b038:	2b20      	cmp	r3, #32
 801b03a:	d177      	bne.n	801b12c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801b03c:	68bb      	ldr	r3, [r7, #8]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d002      	beq.n	801b048 <HAL_UART_Transmit+0x24>
 801b042:	88fb      	ldrh	r3, [r7, #6]
 801b044:	2b00      	cmp	r3, #0
 801b046:	d101      	bne.n	801b04c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801b048:	2301      	movs	r3, #1
 801b04a:	e070      	b.n	801b12e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	2200      	movs	r2, #0
 801b050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	2221      	movs	r2, #33	@ 0x21
 801b058:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b05a:	f7fc fba7 	bl	80177ac <HAL_GetTick>
 801b05e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	88fa      	ldrh	r2, [r7, #6]
 801b064:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	88fa      	ldrh	r2, [r7, #6]
 801b06c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	689b      	ldr	r3, [r3, #8]
 801b074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b078:	d108      	bne.n	801b08c <HAL_UART_Transmit+0x68>
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	691b      	ldr	r3, [r3, #16]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d104      	bne.n	801b08c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801b082:	2300      	movs	r3, #0
 801b084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	61bb      	str	r3, [r7, #24]
 801b08a:	e003      	b.n	801b094 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801b08c:	68bb      	ldr	r3, [r7, #8]
 801b08e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b090:	2300      	movs	r3, #0
 801b092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b094:	e02f      	b.n	801b0f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	9300      	str	r3, [sp, #0]
 801b09a:	697b      	ldr	r3, [r7, #20]
 801b09c:	2200      	movs	r2, #0
 801b09e:	2180      	movs	r1, #128	@ 0x80
 801b0a0:	68f8      	ldr	r0, [r7, #12]
 801b0a2:	f000 ff5f 	bl	801bf64 <UART_WaitOnFlagUntilTimeout>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d004      	beq.n	801b0b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	2220      	movs	r2, #32
 801b0b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801b0b2:	2303      	movs	r3, #3
 801b0b4:	e03b      	b.n	801b12e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801b0b6:	69fb      	ldr	r3, [r7, #28]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d10b      	bne.n	801b0d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b0bc:	69bb      	ldr	r3, [r7, #24]
 801b0be:	881a      	ldrh	r2, [r3, #0]
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b0c8:	b292      	uxth	r2, r2
 801b0ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801b0cc:	69bb      	ldr	r3, [r7, #24]
 801b0ce:	3302      	adds	r3, #2
 801b0d0:	61bb      	str	r3, [r7, #24]
 801b0d2:	e007      	b.n	801b0e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b0d4:	69fb      	ldr	r3, [r7, #28]
 801b0d6:	781a      	ldrb	r2, [r3, #0]
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801b0de:	69fb      	ldr	r3, [r7, #28]
 801b0e0:	3301      	adds	r3, #1
 801b0e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801b0ea:	b29b      	uxth	r3, r3
 801b0ec:	3b01      	subs	r3, #1
 801b0ee:	b29a      	uxth	r2, r3
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801b0fc:	b29b      	uxth	r3, r3
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d1c9      	bne.n	801b096 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	9300      	str	r3, [sp, #0]
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	2200      	movs	r2, #0
 801b10a:	2140      	movs	r1, #64	@ 0x40
 801b10c:	68f8      	ldr	r0, [r7, #12]
 801b10e:	f000 ff29 	bl	801bf64 <UART_WaitOnFlagUntilTimeout>
 801b112:	4603      	mov	r3, r0
 801b114:	2b00      	cmp	r3, #0
 801b116:	d004      	beq.n	801b122 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	2220      	movs	r2, #32
 801b11c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801b11e:	2303      	movs	r3, #3
 801b120:	e005      	b.n	801b12e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	2220      	movs	r2, #32
 801b126:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801b128:	2300      	movs	r3, #0
 801b12a:	e000      	b.n	801b12e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801b12c:	2302      	movs	r3, #2
  }
}
 801b12e:	4618      	mov	r0, r3
 801b130:	3720      	adds	r7, #32
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
	...

0801b138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b08a      	sub	sp, #40	@ 0x28
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	60f8      	str	r0, [r7, #12]
 801b140:	60b9      	str	r1, [r7, #8]
 801b142:	4613      	mov	r3, r2
 801b144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801b14c:	2b20      	cmp	r3, #32
 801b14e:	d137      	bne.n	801b1c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801b150:	68bb      	ldr	r3, [r7, #8]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d002      	beq.n	801b15c <HAL_UART_Receive_IT+0x24>
 801b156:	88fb      	ldrh	r3, [r7, #6]
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d101      	bne.n	801b160 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801b15c:	2301      	movs	r3, #1
 801b15e:	e030      	b.n	801b1c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	2200      	movs	r2, #0
 801b164:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	4a18      	ldr	r2, [pc, #96]	@ (801b1cc <HAL_UART_Receive_IT+0x94>)
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d01f      	beq.n	801b1b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d018      	beq.n	801b1b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b184:	697b      	ldr	r3, [r7, #20]
 801b186:	e853 3f00 	ldrex	r3, [r3]
 801b18a:	613b      	str	r3, [r7, #16]
   return(result);
 801b18c:	693b      	ldr	r3, [r7, #16]
 801b18e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801b192:	627b      	str	r3, [r7, #36]	@ 0x24
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	461a      	mov	r2, r3
 801b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b19c:	623b      	str	r3, [r7, #32]
 801b19e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1a0:	69f9      	ldr	r1, [r7, #28]
 801b1a2:	6a3a      	ldr	r2, [r7, #32]
 801b1a4:	e841 2300 	strex	r3, r2, [r1]
 801b1a8:	61bb      	str	r3, [r7, #24]
   return(result);
 801b1aa:	69bb      	ldr	r3, [r7, #24]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d1e6      	bne.n	801b17e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801b1b0:	88fb      	ldrh	r3, [r7, #6]
 801b1b2:	461a      	mov	r2, r3
 801b1b4:	68b9      	ldr	r1, [r7, #8]
 801b1b6:	68f8      	ldr	r0, [r7, #12]
 801b1b8:	f000 ff42 	bl	801c040 <UART_Start_Receive_IT>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	e000      	b.n	801b1c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b1c0:	2302      	movs	r3, #2
  }
}
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	3728      	adds	r7, #40	@ 0x28
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd80      	pop	{r7, pc}
 801b1ca:	bf00      	nop
 801b1cc:	40008000 	.word	0x40008000

0801b1d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b0ba      	sub	sp, #232	@ 0xe8
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	69db      	ldr	r3, [r3, #28]
 801b1de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	689b      	ldr	r3, [r3, #8]
 801b1f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b1f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801b1fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 801b1fe:	4013      	ands	r3, r2
 801b200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801b204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d115      	bne.n	801b238 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801b20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b210:	f003 0320 	and.w	r3, r3, #32
 801b214:	2b00      	cmp	r3, #0
 801b216:	d00f      	beq.n	801b238 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b21c:	f003 0320 	and.w	r3, r3, #32
 801b220:	2b00      	cmp	r3, #0
 801b222:	d009      	beq.n	801b238 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b228:	2b00      	cmp	r3, #0
 801b22a:	f000 82ca 	beq.w	801b7c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b232:	6878      	ldr	r0, [r7, #4]
 801b234:	4798      	blx	r3
      }
      return;
 801b236:	e2c4      	b.n	801b7c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801b238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	f000 8117 	beq.w	801b470 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801b242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b246:	f003 0301 	and.w	r3, r3, #1
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d106      	bne.n	801b25c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801b24e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801b252:	4b85      	ldr	r3, [pc, #532]	@ (801b468 <HAL_UART_IRQHandler+0x298>)
 801b254:	4013      	ands	r3, r2
 801b256:	2b00      	cmp	r3, #0
 801b258:	f000 810a 	beq.w	801b470 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b260:	f003 0301 	and.w	r3, r3, #1
 801b264:	2b00      	cmp	r3, #0
 801b266:	d011      	beq.n	801b28c <HAL_UART_IRQHandler+0xbc>
 801b268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b26c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b270:	2b00      	cmp	r3, #0
 801b272:	d00b      	beq.n	801b28c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	2201      	movs	r2, #1
 801b27a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b282:	f043 0201 	orr.w	r2, r3, #1
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b290:	f003 0302 	and.w	r3, r3, #2
 801b294:	2b00      	cmp	r3, #0
 801b296:	d011      	beq.n	801b2bc <HAL_UART_IRQHandler+0xec>
 801b298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b29c:	f003 0301 	and.w	r3, r3, #1
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d00b      	beq.n	801b2bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	2202      	movs	r2, #2
 801b2aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b2b2:	f043 0204 	orr.w	r2, r3, #4
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b2c0:	f003 0304 	and.w	r3, r3, #4
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d011      	beq.n	801b2ec <HAL_UART_IRQHandler+0x11c>
 801b2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b2cc:	f003 0301 	and.w	r3, r3, #1
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d00b      	beq.n	801b2ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	2204      	movs	r2, #4
 801b2da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b2e2:	f043 0202 	orr.w	r2, r3, #2
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b2f0:	f003 0308 	and.w	r3, r3, #8
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d017      	beq.n	801b328 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b2fc:	f003 0320 	and.w	r3, r3, #32
 801b300:	2b00      	cmp	r3, #0
 801b302:	d105      	bne.n	801b310 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b308:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d00b      	beq.n	801b328 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	2208      	movs	r2, #8
 801b316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b31e:	f043 0208 	orr.w	r2, r3, #8
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b32c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b330:	2b00      	cmp	r3, #0
 801b332:	d012      	beq.n	801b35a <HAL_UART_IRQHandler+0x18a>
 801b334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b338:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d00c      	beq.n	801b35a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b350:	f043 0220 	orr.w	r2, r3, #32
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b360:	2b00      	cmp	r3, #0
 801b362:	f000 8230 	beq.w	801b7c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b36a:	f003 0320 	and.w	r3, r3, #32
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d00d      	beq.n	801b38e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b376:	f003 0320 	and.w	r3, r3, #32
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d007      	beq.n	801b38e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b382:	2b00      	cmp	r3, #0
 801b384:	d003      	beq.n	801b38e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	689b      	ldr	r3, [r3, #8]
 801b39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b3a2:	2b40      	cmp	r3, #64	@ 0x40
 801b3a4:	d005      	beq.n	801b3b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b3a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b3aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d04f      	beq.n	801b452 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b3b2:	6878      	ldr	r0, [r7, #4]
 801b3b4:	f000 ff0a 	bl	801c1cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	689b      	ldr	r3, [r3, #8]
 801b3be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b3c2:	2b40      	cmp	r3, #64	@ 0x40
 801b3c4:	d141      	bne.n	801b44a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	3308      	adds	r3, #8
 801b3cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801b3d4:	e853 3f00 	ldrex	r3, [r3]
 801b3d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801b3dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801b3e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b3e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	3308      	adds	r3, #8
 801b3ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801b3f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801b3f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801b3fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b402:	e841 2300 	strex	r3, r2, [r1]
 801b406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801b40a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d1d9      	bne.n	801b3c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b416:	2b00      	cmp	r3, #0
 801b418:	d013      	beq.n	801b442 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b41e:	4a13      	ldr	r2, [pc, #76]	@ (801b46c <HAL_UART_IRQHandler+0x29c>)
 801b420:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b426:	4618      	mov	r0, r3
 801b428:	f7fc fb3f 	bl	8017aaa <HAL_DMA_Abort_IT>
 801b42c:	4603      	mov	r3, r0
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d017      	beq.n	801b462 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b438:	687a      	ldr	r2, [r7, #4]
 801b43a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b43c:	4610      	mov	r0, r2
 801b43e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b440:	e00f      	b.n	801b462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b442:	6878      	ldr	r0, [r7, #4]
 801b444:	f000 f9d4 	bl	801b7f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b448:	e00b      	b.n	801b462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b44a:	6878      	ldr	r0, [r7, #4]
 801b44c:	f000 f9d0 	bl	801b7f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b450:	e007      	b.n	801b462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b452:	6878      	ldr	r0, [r7, #4]
 801b454:	f000 f9cc 	bl	801b7f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	2200      	movs	r2, #0
 801b45c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801b460:	e1b1      	b.n	801b7c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b462:	bf00      	nop
    return;
 801b464:	e1af      	b.n	801b7c6 <HAL_UART_IRQHandler+0x5f6>
 801b466:	bf00      	nop
 801b468:	04000120 	.word	0x04000120
 801b46c:	0801c295 	.word	0x0801c295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b474:	2b01      	cmp	r3, #1
 801b476:	f040 816a 	bne.w	801b74e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b47e:	f003 0310 	and.w	r3, r3, #16
 801b482:	2b00      	cmp	r3, #0
 801b484:	f000 8163 	beq.w	801b74e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b48c:	f003 0310 	and.w	r3, r3, #16
 801b490:	2b00      	cmp	r3, #0
 801b492:	f000 815c 	beq.w	801b74e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	2210      	movs	r2, #16
 801b49c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	689b      	ldr	r3, [r3, #8]
 801b4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b4a8:	2b40      	cmp	r3, #64	@ 0x40
 801b4aa:	f040 80d4 	bne.w	801b656 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	685b      	ldr	r3, [r3, #4]
 801b4b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b4ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	f000 80ad 	beq.w	801b61e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b4ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b4ce:	429a      	cmp	r2, r3
 801b4d0:	f080 80a5 	bcs.w	801b61e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b4da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	f003 0320 	and.w	r3, r3, #32
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	f040 8086 	bne.w	801b5fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b4f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b4fc:	e853 3f00 	ldrex	r3, [r3]
 801b500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801b504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801b508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b50c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	461a      	mov	r2, r3
 801b516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b51a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b51e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801b526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b52a:	e841 2300 	strex	r3, r2, [r1]
 801b52e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801b532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b536:	2b00      	cmp	r3, #0
 801b538:	d1da      	bne.n	801b4f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	3308      	adds	r3, #8
 801b540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b544:	e853 3f00 	ldrex	r3, [r3]
 801b548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801b54a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b54c:	f023 0301 	bic.w	r3, r3, #1
 801b550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	3308      	adds	r3, #8
 801b55a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b55e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801b562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801b566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b56a:	e841 2300 	strex	r3, r2, [r1]
 801b56e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801b570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b572:	2b00      	cmp	r3, #0
 801b574:	d1e1      	bne.n	801b53a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	3308      	adds	r3, #8
 801b57c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b57e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b580:	e853 3f00 	ldrex	r3, [r3]
 801b584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801b586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b58c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	3308      	adds	r3, #8
 801b596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b59a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b59c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b59e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b5a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b5a2:	e841 2300 	strex	r3, r2, [r1]
 801b5a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801b5a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d1e3      	bne.n	801b576 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	2220      	movs	r2, #32
 801b5b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b5c4:	e853 3f00 	ldrex	r3, [r3]
 801b5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801b5ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b5cc:	f023 0310 	bic.w	r3, r3, #16
 801b5d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	461a      	mov	r2, r3
 801b5da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5de:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b5e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b5e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b5e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b5e6:	e841 2300 	strex	r3, r2, [r1]
 801b5ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801b5ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d1e4      	bne.n	801b5bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7fc fa19 	bl	8017a2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	2202      	movs	r2, #2
 801b600:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b60e:	b29b      	uxth	r3, r3
 801b610:	1ad3      	subs	r3, r2, r3
 801b612:	b29b      	uxth	r3, r3
 801b614:	4619      	mov	r1, r3
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f000 f8f4 	bl	801b804 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801b61c:	e0d5      	b.n	801b7ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b624:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b628:	429a      	cmp	r2, r3
 801b62a:	f040 80ce 	bne.w	801b7ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	f003 0320 	and.w	r3, r3, #32
 801b63a:	2b20      	cmp	r3, #32
 801b63c:	f040 80c5 	bne.w	801b7ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	2202      	movs	r2, #2
 801b644:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b64c:	4619      	mov	r1, r3
 801b64e:	6878      	ldr	r0, [r7, #4]
 801b650:	f000 f8d8 	bl	801b804 <HAL_UARTEx_RxEventCallback>
      return;
 801b654:	e0b9      	b.n	801b7ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b662:	b29b      	uxth	r3, r3
 801b664:	1ad3      	subs	r3, r2, r3
 801b666:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b670:	b29b      	uxth	r3, r3
 801b672:	2b00      	cmp	r3, #0
 801b674:	f000 80ab 	beq.w	801b7ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801b678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	f000 80a6 	beq.w	801b7ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b68a:	e853 3f00 	ldrex	r3, [r3]
 801b68e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801b690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	461a      	mov	r2, r3
 801b6a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b6a4:	647b      	str	r3, [r7, #68]	@ 0x44
 801b6a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b6aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b6ac:	e841 2300 	strex	r3, r2, [r1]
 801b6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801b6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d1e4      	bne.n	801b682 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	3308      	adds	r3, #8
 801b6be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6c2:	e853 3f00 	ldrex	r3, [r3]
 801b6c6:	623b      	str	r3, [r7, #32]
   return(result);
 801b6c8:	6a3b      	ldr	r3, [r7, #32]
 801b6ca:	f023 0301 	bic.w	r3, r3, #1
 801b6ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	3308      	adds	r3, #8
 801b6d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b6dc:	633a      	str	r2, [r7, #48]	@ 0x30
 801b6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b6e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b6e4:	e841 2300 	strex	r3, r2, [r1]
 801b6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801b6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d1e3      	bne.n	801b6b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2220      	movs	r2, #32
 801b6f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	2200      	movs	r2, #0
 801b702:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b70a:	693b      	ldr	r3, [r7, #16]
 801b70c:	e853 3f00 	ldrex	r3, [r3]
 801b710:	60fb      	str	r3, [r7, #12]
   return(result);
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	f023 0310 	bic.w	r3, r3, #16
 801b718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	461a      	mov	r2, r3
 801b722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b726:	61fb      	str	r3, [r7, #28]
 801b728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b72a:	69b9      	ldr	r1, [r7, #24]
 801b72c:	69fa      	ldr	r2, [r7, #28]
 801b72e:	e841 2300 	strex	r3, r2, [r1]
 801b732:	617b      	str	r3, [r7, #20]
   return(result);
 801b734:	697b      	ldr	r3, [r7, #20]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d1e4      	bne.n	801b704 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	2202      	movs	r2, #2
 801b73e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801b740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801b744:	4619      	mov	r1, r3
 801b746:	6878      	ldr	r0, [r7, #4]
 801b748:	f000 f85c 	bl	801b804 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b74c:	e03f      	b.n	801b7ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b756:	2b00      	cmp	r3, #0
 801b758:	d00e      	beq.n	801b778 <HAL_UART_IRQHandler+0x5a8>
 801b75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b75e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b762:	2b00      	cmp	r3, #0
 801b764:	d008      	beq.n	801b778 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801b76e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801b770:	6878      	ldr	r0, [r7, #4]
 801b772:	f000 ff8b 	bl	801c68c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b776:	e02d      	b.n	801b7d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b77c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b780:	2b00      	cmp	r3, #0
 801b782:	d00e      	beq.n	801b7a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d008      	beq.n	801b7a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b794:	2b00      	cmp	r3, #0
 801b796:	d01c      	beq.n	801b7d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b79c:	6878      	ldr	r0, [r7, #4]
 801b79e:	4798      	blx	r3
    }
    return;
 801b7a0:	e017      	b.n	801b7d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d012      	beq.n	801b7d4 <HAL_UART_IRQHandler+0x604>
 801b7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b7b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d00c      	beq.n	801b7d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801b7ba:	6878      	ldr	r0, [r7, #4]
 801b7bc:	f000 fd80 	bl	801c2c0 <UART_EndTransmit_IT>
    return;
 801b7c0:	e008      	b.n	801b7d4 <HAL_UART_IRQHandler+0x604>
      return;
 801b7c2:	bf00      	nop
 801b7c4:	e006      	b.n	801b7d4 <HAL_UART_IRQHandler+0x604>
    return;
 801b7c6:	bf00      	nop
 801b7c8:	e004      	b.n	801b7d4 <HAL_UART_IRQHandler+0x604>
      return;
 801b7ca:	bf00      	nop
 801b7cc:	e002      	b.n	801b7d4 <HAL_UART_IRQHandler+0x604>
      return;
 801b7ce:	bf00      	nop
 801b7d0:	e000      	b.n	801b7d4 <HAL_UART_IRQHandler+0x604>
    return;
 801b7d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801b7d4:	37e8      	adds	r7, #232	@ 0xe8
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	bd80      	pop	{r7, pc}
 801b7da:	bf00      	nop

0801b7dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b7dc:	b480      	push	{r7}
 801b7de:	b083      	sub	sp, #12
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b7e4:	bf00      	nop
 801b7e6:	370c      	adds	r7, #12
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ee:	4770      	bx	lr

0801b7f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b7f0:	b480      	push	{r7}
 801b7f2:	b083      	sub	sp, #12
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b7f8:	bf00      	nop
 801b7fa:	370c      	adds	r7, #12
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b802:	4770      	bx	lr

0801b804 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b804:	b480      	push	{r7}
 801b806:	b083      	sub	sp, #12
 801b808:	af00      	add	r7, sp, #0
 801b80a:	6078      	str	r0, [r7, #4]
 801b80c:	460b      	mov	r3, r1
 801b80e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b810:	bf00      	nop
 801b812:	370c      	adds	r7, #12
 801b814:	46bd      	mov	sp, r7
 801b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b81a:	4770      	bx	lr

0801b81c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b81c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b820:	b08a      	sub	sp, #40	@ 0x28
 801b822:	af00      	add	r7, sp, #0
 801b824:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b826:	2300      	movs	r3, #0
 801b828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	689a      	ldr	r2, [r3, #8]
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	691b      	ldr	r3, [r3, #16]
 801b834:	431a      	orrs	r2, r3
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	695b      	ldr	r3, [r3, #20]
 801b83a:	431a      	orrs	r2, r3
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	69db      	ldr	r3, [r3, #28]
 801b840:	4313      	orrs	r3, r2
 801b842:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	681a      	ldr	r2, [r3, #0]
 801b84a:	4b9e      	ldr	r3, [pc, #632]	@ (801bac4 <UART_SetConfig+0x2a8>)
 801b84c:	4013      	ands	r3, r2
 801b84e:	68fa      	ldr	r2, [r7, #12]
 801b850:	6812      	ldr	r2, [r2, #0]
 801b852:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b854:	430b      	orrs	r3, r1
 801b856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	685b      	ldr	r3, [r3, #4]
 801b85e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	68da      	ldr	r2, [r3, #12]
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	430a      	orrs	r2, r1
 801b86c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	699b      	ldr	r3, [r3, #24]
 801b872:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	4a93      	ldr	r2, [pc, #588]	@ (801bac8 <UART_SetConfig+0x2ac>)
 801b87a:	4293      	cmp	r3, r2
 801b87c:	d004      	beq.n	801b888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	6a1b      	ldr	r3, [r3, #32]
 801b882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b884:	4313      	orrs	r3, r2
 801b886:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	689b      	ldr	r3, [r3, #8]
 801b88e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b898:	430a      	orrs	r2, r1
 801b89a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	4a8a      	ldr	r2, [pc, #552]	@ (801bacc <UART_SetConfig+0x2b0>)
 801b8a2:	4293      	cmp	r3, r2
 801b8a4:	d126      	bne.n	801b8f4 <UART_SetConfig+0xd8>
 801b8a6:	4b8a      	ldr	r3, [pc, #552]	@ (801bad0 <UART_SetConfig+0x2b4>)
 801b8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b8ac:	f003 0303 	and.w	r3, r3, #3
 801b8b0:	2b03      	cmp	r3, #3
 801b8b2:	d81b      	bhi.n	801b8ec <UART_SetConfig+0xd0>
 801b8b4:	a201      	add	r2, pc, #4	@ (adr r2, 801b8bc <UART_SetConfig+0xa0>)
 801b8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8ba:	bf00      	nop
 801b8bc:	0801b8cd 	.word	0x0801b8cd
 801b8c0:	0801b8dd 	.word	0x0801b8dd
 801b8c4:	0801b8d5 	.word	0x0801b8d5
 801b8c8:	0801b8e5 	.word	0x0801b8e5
 801b8cc:	2301      	movs	r3, #1
 801b8ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b8d2:	e0ab      	b.n	801ba2c <UART_SetConfig+0x210>
 801b8d4:	2302      	movs	r3, #2
 801b8d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b8da:	e0a7      	b.n	801ba2c <UART_SetConfig+0x210>
 801b8dc:	2304      	movs	r3, #4
 801b8de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b8e2:	e0a3      	b.n	801ba2c <UART_SetConfig+0x210>
 801b8e4:	2308      	movs	r3, #8
 801b8e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b8ea:	e09f      	b.n	801ba2c <UART_SetConfig+0x210>
 801b8ec:	2310      	movs	r3, #16
 801b8ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b8f2:	e09b      	b.n	801ba2c <UART_SetConfig+0x210>
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	4a76      	ldr	r2, [pc, #472]	@ (801bad4 <UART_SetConfig+0x2b8>)
 801b8fa:	4293      	cmp	r3, r2
 801b8fc:	d138      	bne.n	801b970 <UART_SetConfig+0x154>
 801b8fe:	4b74      	ldr	r3, [pc, #464]	@ (801bad0 <UART_SetConfig+0x2b4>)
 801b900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b904:	f003 030c 	and.w	r3, r3, #12
 801b908:	2b0c      	cmp	r3, #12
 801b90a:	d82d      	bhi.n	801b968 <UART_SetConfig+0x14c>
 801b90c:	a201      	add	r2, pc, #4	@ (adr r2, 801b914 <UART_SetConfig+0xf8>)
 801b90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b912:	bf00      	nop
 801b914:	0801b949 	.word	0x0801b949
 801b918:	0801b969 	.word	0x0801b969
 801b91c:	0801b969 	.word	0x0801b969
 801b920:	0801b969 	.word	0x0801b969
 801b924:	0801b959 	.word	0x0801b959
 801b928:	0801b969 	.word	0x0801b969
 801b92c:	0801b969 	.word	0x0801b969
 801b930:	0801b969 	.word	0x0801b969
 801b934:	0801b951 	.word	0x0801b951
 801b938:	0801b969 	.word	0x0801b969
 801b93c:	0801b969 	.word	0x0801b969
 801b940:	0801b969 	.word	0x0801b969
 801b944:	0801b961 	.word	0x0801b961
 801b948:	2300      	movs	r3, #0
 801b94a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b94e:	e06d      	b.n	801ba2c <UART_SetConfig+0x210>
 801b950:	2302      	movs	r3, #2
 801b952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b956:	e069      	b.n	801ba2c <UART_SetConfig+0x210>
 801b958:	2304      	movs	r3, #4
 801b95a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b95e:	e065      	b.n	801ba2c <UART_SetConfig+0x210>
 801b960:	2308      	movs	r3, #8
 801b962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b966:	e061      	b.n	801ba2c <UART_SetConfig+0x210>
 801b968:	2310      	movs	r3, #16
 801b96a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b96e:	e05d      	b.n	801ba2c <UART_SetConfig+0x210>
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	4a58      	ldr	r2, [pc, #352]	@ (801bad8 <UART_SetConfig+0x2bc>)
 801b976:	4293      	cmp	r3, r2
 801b978:	d125      	bne.n	801b9c6 <UART_SetConfig+0x1aa>
 801b97a:	4b55      	ldr	r3, [pc, #340]	@ (801bad0 <UART_SetConfig+0x2b4>)
 801b97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b980:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801b984:	2b30      	cmp	r3, #48	@ 0x30
 801b986:	d016      	beq.n	801b9b6 <UART_SetConfig+0x19a>
 801b988:	2b30      	cmp	r3, #48	@ 0x30
 801b98a:	d818      	bhi.n	801b9be <UART_SetConfig+0x1a2>
 801b98c:	2b20      	cmp	r3, #32
 801b98e:	d00a      	beq.n	801b9a6 <UART_SetConfig+0x18a>
 801b990:	2b20      	cmp	r3, #32
 801b992:	d814      	bhi.n	801b9be <UART_SetConfig+0x1a2>
 801b994:	2b00      	cmp	r3, #0
 801b996:	d002      	beq.n	801b99e <UART_SetConfig+0x182>
 801b998:	2b10      	cmp	r3, #16
 801b99a:	d008      	beq.n	801b9ae <UART_SetConfig+0x192>
 801b99c:	e00f      	b.n	801b9be <UART_SetConfig+0x1a2>
 801b99e:	2300      	movs	r3, #0
 801b9a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b9a4:	e042      	b.n	801ba2c <UART_SetConfig+0x210>
 801b9a6:	2302      	movs	r3, #2
 801b9a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b9ac:	e03e      	b.n	801ba2c <UART_SetConfig+0x210>
 801b9ae:	2304      	movs	r3, #4
 801b9b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b9b4:	e03a      	b.n	801ba2c <UART_SetConfig+0x210>
 801b9b6:	2308      	movs	r3, #8
 801b9b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b9bc:	e036      	b.n	801ba2c <UART_SetConfig+0x210>
 801b9be:	2310      	movs	r3, #16
 801b9c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b9c4:	e032      	b.n	801ba2c <UART_SetConfig+0x210>
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	4a3f      	ldr	r2, [pc, #252]	@ (801bac8 <UART_SetConfig+0x2ac>)
 801b9cc:	4293      	cmp	r3, r2
 801b9ce:	d12a      	bne.n	801ba26 <UART_SetConfig+0x20a>
 801b9d0:	4b3f      	ldr	r3, [pc, #252]	@ (801bad0 <UART_SetConfig+0x2b4>)
 801b9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b9d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801b9da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801b9de:	d01a      	beq.n	801ba16 <UART_SetConfig+0x1fa>
 801b9e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801b9e4:	d81b      	bhi.n	801ba1e <UART_SetConfig+0x202>
 801b9e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b9ea:	d00c      	beq.n	801ba06 <UART_SetConfig+0x1ea>
 801b9ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b9f0:	d815      	bhi.n	801ba1e <UART_SetConfig+0x202>
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d003      	beq.n	801b9fe <UART_SetConfig+0x1e2>
 801b9f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b9fa:	d008      	beq.n	801ba0e <UART_SetConfig+0x1f2>
 801b9fc:	e00f      	b.n	801ba1e <UART_SetConfig+0x202>
 801b9fe:	2300      	movs	r3, #0
 801ba00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ba04:	e012      	b.n	801ba2c <UART_SetConfig+0x210>
 801ba06:	2302      	movs	r3, #2
 801ba08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ba0c:	e00e      	b.n	801ba2c <UART_SetConfig+0x210>
 801ba0e:	2304      	movs	r3, #4
 801ba10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ba14:	e00a      	b.n	801ba2c <UART_SetConfig+0x210>
 801ba16:	2308      	movs	r3, #8
 801ba18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ba1c:	e006      	b.n	801ba2c <UART_SetConfig+0x210>
 801ba1e:	2310      	movs	r3, #16
 801ba20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801ba24:	e002      	b.n	801ba2c <UART_SetConfig+0x210>
 801ba26:	2310      	movs	r3, #16
 801ba28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	4a25      	ldr	r2, [pc, #148]	@ (801bac8 <UART_SetConfig+0x2ac>)
 801ba32:	4293      	cmp	r3, r2
 801ba34:	f040 808a 	bne.w	801bb4c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801ba38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ba3c:	2b08      	cmp	r3, #8
 801ba3e:	d824      	bhi.n	801ba8a <UART_SetConfig+0x26e>
 801ba40:	a201      	add	r2, pc, #4	@ (adr r2, 801ba48 <UART_SetConfig+0x22c>)
 801ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba46:	bf00      	nop
 801ba48:	0801ba6d 	.word	0x0801ba6d
 801ba4c:	0801ba8b 	.word	0x0801ba8b
 801ba50:	0801ba75 	.word	0x0801ba75
 801ba54:	0801ba8b 	.word	0x0801ba8b
 801ba58:	0801ba7b 	.word	0x0801ba7b
 801ba5c:	0801ba8b 	.word	0x0801ba8b
 801ba60:	0801ba8b 	.word	0x0801ba8b
 801ba64:	0801ba8b 	.word	0x0801ba8b
 801ba68:	0801ba83 	.word	0x0801ba83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ba6c:	f7fd f830 	bl	8018ad0 <HAL_RCC_GetPCLK1Freq>
 801ba70:	61f8      	str	r0, [r7, #28]
        break;
 801ba72:	e010      	b.n	801ba96 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ba74:	4b19      	ldr	r3, [pc, #100]	@ (801badc <UART_SetConfig+0x2c0>)
 801ba76:	61fb      	str	r3, [r7, #28]
        break;
 801ba78:	e00d      	b.n	801ba96 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ba7a:	f7fc ff91 	bl	80189a0 <HAL_RCC_GetSysClockFreq>
 801ba7e:	61f8      	str	r0, [r7, #28]
        break;
 801ba80:	e009      	b.n	801ba96 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ba82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ba86:	61fb      	str	r3, [r7, #28]
        break;
 801ba88:	e005      	b.n	801ba96 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801ba8e:	2301      	movs	r3, #1
 801ba90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801ba94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801ba96:	69fb      	ldr	r3, [r7, #28]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	f000 8109 	beq.w	801bcb0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	685a      	ldr	r2, [r3, #4]
 801baa2:	4613      	mov	r3, r2
 801baa4:	005b      	lsls	r3, r3, #1
 801baa6:	4413      	add	r3, r2
 801baa8:	69fa      	ldr	r2, [r7, #28]
 801baaa:	429a      	cmp	r2, r3
 801baac:	d305      	bcc.n	801baba <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801bab4:	69fa      	ldr	r2, [r7, #28]
 801bab6:	429a      	cmp	r2, r3
 801bab8:	d912      	bls.n	801bae0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 801baba:	2301      	movs	r3, #1
 801babc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801bac0:	e0f6      	b.n	801bcb0 <UART_SetConfig+0x494>
 801bac2:	bf00      	nop
 801bac4:	efff69f3 	.word	0xefff69f3
 801bac8:	40008000 	.word	0x40008000
 801bacc:	40013800 	.word	0x40013800
 801bad0:	40021000 	.word	0x40021000
 801bad4:	40004400 	.word	0x40004400
 801bad8:	40004800 	.word	0x40004800
 801badc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801bae0:	69fb      	ldr	r3, [r7, #28]
 801bae2:	2200      	movs	r2, #0
 801bae4:	461c      	mov	r4, r3
 801bae6:	4615      	mov	r5, r2
 801bae8:	f04f 0200 	mov.w	r2, #0
 801baec:	f04f 0300 	mov.w	r3, #0
 801baf0:	022b      	lsls	r3, r5, #8
 801baf2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801baf6:	0222      	lsls	r2, r4, #8
 801baf8:	68f9      	ldr	r1, [r7, #12]
 801bafa:	6849      	ldr	r1, [r1, #4]
 801bafc:	0849      	lsrs	r1, r1, #1
 801bafe:	2000      	movs	r0, #0
 801bb00:	4688      	mov	r8, r1
 801bb02:	4681      	mov	r9, r0
 801bb04:	eb12 0a08 	adds.w	sl, r2, r8
 801bb08:	eb43 0b09 	adc.w	fp, r3, r9
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	685b      	ldr	r3, [r3, #4]
 801bb10:	2200      	movs	r2, #0
 801bb12:	603b      	str	r3, [r7, #0]
 801bb14:	607a      	str	r2, [r7, #4]
 801bb16:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb1a:	4650      	mov	r0, sl
 801bb1c:	4659      	mov	r1, fp
 801bb1e:	f7e5 f893 	bl	8000c48 <__aeabi_uldivmod>
 801bb22:	4602      	mov	r2, r0
 801bb24:	460b      	mov	r3, r1
 801bb26:	4613      	mov	r3, r2
 801bb28:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801bb30:	d308      	bcc.n	801bb44 <UART_SetConfig+0x328>
 801bb32:	69bb      	ldr	r3, [r7, #24]
 801bb34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bb38:	d204      	bcs.n	801bb44 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	69ba      	ldr	r2, [r7, #24]
 801bb40:	60da      	str	r2, [r3, #12]
 801bb42:	e0b5      	b.n	801bcb0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 801bb44:	2301      	movs	r3, #1
 801bb46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801bb4a:	e0b1      	b.n	801bcb0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	69db      	ldr	r3, [r3, #28]
 801bb50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bb54:	d15d      	bne.n	801bc12 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 801bb56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bb5a:	2b08      	cmp	r3, #8
 801bb5c:	d827      	bhi.n	801bbae <UART_SetConfig+0x392>
 801bb5e:	a201      	add	r2, pc, #4	@ (adr r2, 801bb64 <UART_SetConfig+0x348>)
 801bb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb64:	0801bb89 	.word	0x0801bb89
 801bb68:	0801bb91 	.word	0x0801bb91
 801bb6c:	0801bb99 	.word	0x0801bb99
 801bb70:	0801bbaf 	.word	0x0801bbaf
 801bb74:	0801bb9f 	.word	0x0801bb9f
 801bb78:	0801bbaf 	.word	0x0801bbaf
 801bb7c:	0801bbaf 	.word	0x0801bbaf
 801bb80:	0801bbaf 	.word	0x0801bbaf
 801bb84:	0801bba7 	.word	0x0801bba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bb88:	f7fc ffa2 	bl	8018ad0 <HAL_RCC_GetPCLK1Freq>
 801bb8c:	61f8      	str	r0, [r7, #28]
        break;
 801bb8e:	e014      	b.n	801bbba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bb90:	f7fc ffb4 	bl	8018afc <HAL_RCC_GetPCLK2Freq>
 801bb94:	61f8      	str	r0, [r7, #28]
        break;
 801bb96:	e010      	b.n	801bbba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bb98:	4b4c      	ldr	r3, [pc, #304]	@ (801bccc <UART_SetConfig+0x4b0>)
 801bb9a:	61fb      	str	r3, [r7, #28]
        break;
 801bb9c:	e00d      	b.n	801bbba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bb9e:	f7fc feff 	bl	80189a0 <HAL_RCC_GetSysClockFreq>
 801bba2:	61f8      	str	r0, [r7, #28]
        break;
 801bba4:	e009      	b.n	801bbba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bbaa:	61fb      	str	r3, [r7, #28]
        break;
 801bbac:	e005      	b.n	801bbba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801bbae:	2300      	movs	r3, #0
 801bbb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801bbb2:	2301      	movs	r3, #1
 801bbb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801bbb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d077      	beq.n	801bcb0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801bbc0:	69fb      	ldr	r3, [r7, #28]
 801bbc2:	005a      	lsls	r2, r3, #1
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	685b      	ldr	r3, [r3, #4]
 801bbc8:	085b      	lsrs	r3, r3, #1
 801bbca:	441a      	add	r2, r3
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	685b      	ldr	r3, [r3, #4]
 801bbd0:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bbd6:	69bb      	ldr	r3, [r7, #24]
 801bbd8:	2b0f      	cmp	r3, #15
 801bbda:	d916      	bls.n	801bc0a <UART_SetConfig+0x3ee>
 801bbdc:	69bb      	ldr	r3, [r7, #24]
 801bbde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bbe2:	d212      	bcs.n	801bc0a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801bbe4:	69bb      	ldr	r3, [r7, #24]
 801bbe6:	b29b      	uxth	r3, r3
 801bbe8:	f023 030f 	bic.w	r3, r3, #15
 801bbec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801bbee:	69bb      	ldr	r3, [r7, #24]
 801bbf0:	085b      	lsrs	r3, r3, #1
 801bbf2:	b29b      	uxth	r3, r3
 801bbf4:	f003 0307 	and.w	r3, r3, #7
 801bbf8:	b29a      	uxth	r2, r3
 801bbfa:	8afb      	ldrh	r3, [r7, #22]
 801bbfc:	4313      	orrs	r3, r2
 801bbfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	8afa      	ldrh	r2, [r7, #22]
 801bc06:	60da      	str	r2, [r3, #12]
 801bc08:	e052      	b.n	801bcb0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801bc10:	e04e      	b.n	801bcb0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 801bc12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bc16:	2b08      	cmp	r3, #8
 801bc18:	d827      	bhi.n	801bc6a <UART_SetConfig+0x44e>
 801bc1a:	a201      	add	r2, pc, #4	@ (adr r2, 801bc20 <UART_SetConfig+0x404>)
 801bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc20:	0801bc45 	.word	0x0801bc45
 801bc24:	0801bc4d 	.word	0x0801bc4d
 801bc28:	0801bc55 	.word	0x0801bc55
 801bc2c:	0801bc6b 	.word	0x0801bc6b
 801bc30:	0801bc5b 	.word	0x0801bc5b
 801bc34:	0801bc6b 	.word	0x0801bc6b
 801bc38:	0801bc6b 	.word	0x0801bc6b
 801bc3c:	0801bc6b 	.word	0x0801bc6b
 801bc40:	0801bc63 	.word	0x0801bc63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bc44:	f7fc ff44 	bl	8018ad0 <HAL_RCC_GetPCLK1Freq>
 801bc48:	61f8      	str	r0, [r7, #28]
        break;
 801bc4a:	e014      	b.n	801bc76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bc4c:	f7fc ff56 	bl	8018afc <HAL_RCC_GetPCLK2Freq>
 801bc50:	61f8      	str	r0, [r7, #28]
        break;
 801bc52:	e010      	b.n	801bc76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bc54:	4b1d      	ldr	r3, [pc, #116]	@ (801bccc <UART_SetConfig+0x4b0>)
 801bc56:	61fb      	str	r3, [r7, #28]
        break;
 801bc58:	e00d      	b.n	801bc76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bc5a:	f7fc fea1 	bl	80189a0 <HAL_RCC_GetSysClockFreq>
 801bc5e:	61f8      	str	r0, [r7, #28]
        break;
 801bc60:	e009      	b.n	801bc76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bc62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bc66:	61fb      	str	r3, [r7, #28]
        break;
 801bc68:	e005      	b.n	801bc76 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801bc6e:	2301      	movs	r3, #1
 801bc70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801bc74:	bf00      	nop
    }

    if (pclk != 0U)
 801bc76:	69fb      	ldr	r3, [r7, #28]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d019      	beq.n	801bcb0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	685b      	ldr	r3, [r3, #4]
 801bc80:	085a      	lsrs	r2, r3, #1
 801bc82:	69fb      	ldr	r3, [r7, #28]
 801bc84:	441a      	add	r2, r3
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bc8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bc90:	69bb      	ldr	r3, [r7, #24]
 801bc92:	2b0f      	cmp	r3, #15
 801bc94:	d909      	bls.n	801bcaa <UART_SetConfig+0x48e>
 801bc96:	69bb      	ldr	r3, [r7, #24]
 801bc98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bc9c:	d205      	bcs.n	801bcaa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801bc9e:	69bb      	ldr	r3, [r7, #24]
 801bca0:	b29a      	uxth	r2, r3
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	60da      	str	r2, [r3, #12]
 801bca8:	e002      	b.n	801bcb0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801bcaa:	2301      	movs	r3, #1
 801bcac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	2200      	movs	r2, #0
 801bcba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801bcbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	3728      	adds	r7, #40	@ 0x28
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bcca:	bf00      	nop
 801bccc:	00f42400 	.word	0x00f42400

0801bcd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801bcd0:	b480      	push	{r7}
 801bcd2:	b083      	sub	sp, #12
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcdc:	f003 0308 	and.w	r3, r3, #8
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d00a      	beq.n	801bcfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	685b      	ldr	r3, [r3, #4]
 801bcea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	430a      	orrs	r2, r1
 801bcf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcfe:	f003 0301 	and.w	r3, r3, #1
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d00a      	beq.n	801bd1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	430a      	orrs	r2, r1
 801bd1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd20:	f003 0302 	and.w	r3, r3, #2
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d00a      	beq.n	801bd3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	685b      	ldr	r3, [r3, #4]
 801bd2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	430a      	orrs	r2, r1
 801bd3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd42:	f003 0304 	and.w	r3, r3, #4
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d00a      	beq.n	801bd60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	685b      	ldr	r3, [r3, #4]
 801bd50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	430a      	orrs	r2, r1
 801bd5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd64:	f003 0310 	and.w	r3, r3, #16
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d00a      	beq.n	801bd82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	689b      	ldr	r3, [r3, #8]
 801bd72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	430a      	orrs	r2, r1
 801bd80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd86:	f003 0320 	and.w	r3, r3, #32
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d00a      	beq.n	801bda4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	689b      	ldr	r3, [r3, #8]
 801bd94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	430a      	orrs	r2, r1
 801bda2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bda8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d01a      	beq.n	801bde6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	685b      	ldr	r3, [r3, #4]
 801bdb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	430a      	orrs	r2, r1
 801bdc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bdca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bdce:	d10a      	bne.n	801bde6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	685b      	ldr	r3, [r3, #4]
 801bdd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	430a      	orrs	r2, r1
 801bde4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bdea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d00a      	beq.n	801be08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	685b      	ldr	r3, [r3, #4]
 801bdf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	430a      	orrs	r2, r1
 801be06:	605a      	str	r2, [r3, #4]
  }
}
 801be08:	bf00      	nop
 801be0a:	370c      	adds	r7, #12
 801be0c:	46bd      	mov	sp, r7
 801be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be12:	4770      	bx	lr

0801be14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b098      	sub	sp, #96	@ 0x60
 801be18:	af02      	add	r7, sp, #8
 801be1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	2200      	movs	r2, #0
 801be20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801be24:	f7fb fcc2 	bl	80177ac <HAL_GetTick>
 801be28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	f003 0308 	and.w	r3, r3, #8
 801be34:	2b08      	cmp	r3, #8
 801be36:	d12e      	bne.n	801be96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801be38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801be3c:	9300      	str	r3, [sp, #0]
 801be3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801be40:	2200      	movs	r2, #0
 801be42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	f000 f88c 	bl	801bf64 <UART_WaitOnFlagUntilTimeout>
 801be4c:	4603      	mov	r3, r0
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d021      	beq.n	801be96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be5a:	e853 3f00 	ldrex	r3, [r3]
 801be5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801be60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801be62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801be66:	653b      	str	r3, [r7, #80]	@ 0x50
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	461a      	mov	r2, r3
 801be6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801be70:	647b      	str	r3, [r7, #68]	@ 0x44
 801be72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801be76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801be78:	e841 2300 	strex	r3, r2, [r1]
 801be7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801be7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be80:	2b00      	cmp	r3, #0
 801be82:	d1e6      	bne.n	801be52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	2220      	movs	r2, #32
 801be88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	2200      	movs	r2, #0
 801be8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801be92:	2303      	movs	r3, #3
 801be94:	e062      	b.n	801bf5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	f003 0304 	and.w	r3, r3, #4
 801bea0:	2b04      	cmp	r3, #4
 801bea2:	d149      	bne.n	801bf38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801bea8:	9300      	str	r3, [sp, #0]
 801beaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801beac:	2200      	movs	r2, #0
 801beae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801beb2:	6878      	ldr	r0, [r7, #4]
 801beb4:	f000 f856 	bl	801bf64 <UART_WaitOnFlagUntilTimeout>
 801beb8:	4603      	mov	r3, r0
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d03c      	beq.n	801bf38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bec6:	e853 3f00 	ldrex	r3, [r3]
 801beca:	623b      	str	r3, [r7, #32]
   return(result);
 801becc:	6a3b      	ldr	r3, [r7, #32]
 801bece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	461a      	mov	r2, r3
 801beda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bedc:	633b      	str	r3, [r7, #48]	@ 0x30
 801bede:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bee4:	e841 2300 	strex	r3, r2, [r1]
 801bee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801beea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beec:	2b00      	cmp	r3, #0
 801beee:	d1e6      	bne.n	801bebe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	3308      	adds	r3, #8
 801bef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bef8:	693b      	ldr	r3, [r7, #16]
 801befa:	e853 3f00 	ldrex	r3, [r3]
 801befe:	60fb      	str	r3, [r7, #12]
   return(result);
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	f023 0301 	bic.w	r3, r3, #1
 801bf06:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	3308      	adds	r3, #8
 801bf0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf10:	61fa      	str	r2, [r7, #28]
 801bf12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf14:	69b9      	ldr	r1, [r7, #24]
 801bf16:	69fa      	ldr	r2, [r7, #28]
 801bf18:	e841 2300 	strex	r3, r2, [r1]
 801bf1c:	617b      	str	r3, [r7, #20]
   return(result);
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d1e5      	bne.n	801bef0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	2220      	movs	r2, #32
 801bf28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	2200      	movs	r2, #0
 801bf30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bf34:	2303      	movs	r3, #3
 801bf36:	e011      	b.n	801bf5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2220      	movs	r2, #32
 801bf3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	2220      	movs	r2, #32
 801bf42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	2200      	movs	r2, #0
 801bf4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	2200      	movs	r2, #0
 801bf56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801bf5a:	2300      	movs	r3, #0
}
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	3758      	adds	r7, #88	@ 0x58
 801bf60:	46bd      	mov	sp, r7
 801bf62:	bd80      	pop	{r7, pc}

0801bf64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b084      	sub	sp, #16
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	60f8      	str	r0, [r7, #12]
 801bf6c:	60b9      	str	r1, [r7, #8]
 801bf6e:	603b      	str	r3, [r7, #0]
 801bf70:	4613      	mov	r3, r2
 801bf72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bf74:	e04f      	b.n	801c016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bf76:	69bb      	ldr	r3, [r7, #24]
 801bf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf7c:	d04b      	beq.n	801c016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bf7e:	f7fb fc15 	bl	80177ac <HAL_GetTick>
 801bf82:	4602      	mov	r2, r0
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	1ad3      	subs	r3, r2, r3
 801bf88:	69ba      	ldr	r2, [r7, #24]
 801bf8a:	429a      	cmp	r2, r3
 801bf8c:	d302      	bcc.n	801bf94 <UART_WaitOnFlagUntilTimeout+0x30>
 801bf8e:	69bb      	ldr	r3, [r7, #24]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d101      	bne.n	801bf98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801bf94:	2303      	movs	r3, #3
 801bf96:	e04e      	b.n	801c036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	f003 0304 	and.w	r3, r3, #4
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d037      	beq.n	801c016 <UART_WaitOnFlagUntilTimeout+0xb2>
 801bfa6:	68bb      	ldr	r3, [r7, #8]
 801bfa8:	2b80      	cmp	r3, #128	@ 0x80
 801bfaa:	d034      	beq.n	801c016 <UART_WaitOnFlagUntilTimeout+0xb2>
 801bfac:	68bb      	ldr	r3, [r7, #8]
 801bfae:	2b40      	cmp	r3, #64	@ 0x40
 801bfb0:	d031      	beq.n	801c016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	69db      	ldr	r3, [r3, #28]
 801bfb8:	f003 0308 	and.w	r3, r3, #8
 801bfbc:	2b08      	cmp	r3, #8
 801bfbe:	d110      	bne.n	801bfe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	2208      	movs	r2, #8
 801bfc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bfc8:	68f8      	ldr	r0, [r7, #12]
 801bfca:	f000 f8ff 	bl	801c1cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	2208      	movs	r2, #8
 801bfd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	2200      	movs	r2, #0
 801bfda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801bfde:	2301      	movs	r3, #1
 801bfe0:	e029      	b.n	801c036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	69db      	ldr	r3, [r3, #28]
 801bfe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bfec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801bff0:	d111      	bne.n	801c016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bffc:	68f8      	ldr	r0, [r7, #12]
 801bffe:	f000 f8e5 	bl	801c1cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	2220      	movs	r2, #32
 801c006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	2200      	movs	r2, #0
 801c00e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801c012:	2303      	movs	r3, #3
 801c014:	e00f      	b.n	801c036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	69da      	ldr	r2, [r3, #28]
 801c01c:	68bb      	ldr	r3, [r7, #8]
 801c01e:	4013      	ands	r3, r2
 801c020:	68ba      	ldr	r2, [r7, #8]
 801c022:	429a      	cmp	r2, r3
 801c024:	bf0c      	ite	eq
 801c026:	2301      	moveq	r3, #1
 801c028:	2300      	movne	r3, #0
 801c02a:	b2db      	uxtb	r3, r3
 801c02c:	461a      	mov	r2, r3
 801c02e:	79fb      	ldrb	r3, [r7, #7]
 801c030:	429a      	cmp	r2, r3
 801c032:	d0a0      	beq.n	801bf76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c034:	2300      	movs	r3, #0
}
 801c036:	4618      	mov	r0, r3
 801c038:	3710      	adds	r7, #16
 801c03a:	46bd      	mov	sp, r7
 801c03c:	bd80      	pop	{r7, pc}
	...

0801c040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c040:	b480      	push	{r7}
 801c042:	b097      	sub	sp, #92	@ 0x5c
 801c044:	af00      	add	r7, sp, #0
 801c046:	60f8      	str	r0, [r7, #12]
 801c048:	60b9      	str	r1, [r7, #8]
 801c04a:	4613      	mov	r3, r2
 801c04c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	68ba      	ldr	r2, [r7, #8]
 801c052:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	88fa      	ldrh	r2, [r7, #6]
 801c058:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	88fa      	ldrh	r2, [r7, #6]
 801c060:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	2200      	movs	r2, #0
 801c068:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	689b      	ldr	r3, [r3, #8]
 801c06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c072:	d10e      	bne.n	801c092 <UART_Start_Receive_IT+0x52>
 801c074:	68fb      	ldr	r3, [r7, #12]
 801c076:	691b      	ldr	r3, [r3, #16]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d105      	bne.n	801c088 <UART_Start_Receive_IT+0x48>
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801c082:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801c086:	e02d      	b.n	801c0e4 <UART_Start_Receive_IT+0xa4>
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	22ff      	movs	r2, #255	@ 0xff
 801c08c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801c090:	e028      	b.n	801c0e4 <UART_Start_Receive_IT+0xa4>
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	689b      	ldr	r3, [r3, #8]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d10d      	bne.n	801c0b6 <UART_Start_Receive_IT+0x76>
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	691b      	ldr	r3, [r3, #16]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d104      	bne.n	801c0ac <UART_Start_Receive_IT+0x6c>
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	22ff      	movs	r2, #255	@ 0xff
 801c0a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801c0aa:	e01b      	b.n	801c0e4 <UART_Start_Receive_IT+0xa4>
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	227f      	movs	r2, #127	@ 0x7f
 801c0b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801c0b4:	e016      	b.n	801c0e4 <UART_Start_Receive_IT+0xa4>
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	689b      	ldr	r3, [r3, #8]
 801c0ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c0be:	d10d      	bne.n	801c0dc <UART_Start_Receive_IT+0x9c>
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	691b      	ldr	r3, [r3, #16]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d104      	bne.n	801c0d2 <UART_Start_Receive_IT+0x92>
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	227f      	movs	r2, #127	@ 0x7f
 801c0cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801c0d0:	e008      	b.n	801c0e4 <UART_Start_Receive_IT+0xa4>
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	223f      	movs	r2, #63	@ 0x3f
 801c0d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801c0da:	e003      	b.n	801c0e4 <UART_Start_Receive_IT+0xa4>
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	2200      	movs	r2, #0
 801c0e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	2222      	movs	r2, #34	@ 0x22
 801c0f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	3308      	adds	r3, #8
 801c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c0fe:	e853 3f00 	ldrex	r3, [r3]
 801c102:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c106:	f043 0301 	orr.w	r3, r3, #1
 801c10a:	657b      	str	r3, [r7, #84]	@ 0x54
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	3308      	adds	r3, #8
 801c112:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c114:	64ba      	str	r2, [r7, #72]	@ 0x48
 801c116:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c118:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801c11a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c11c:	e841 2300 	strex	r3, r2, [r1]
 801c120:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801c122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c124:	2b00      	cmp	r3, #0
 801c126:	d1e5      	bne.n	801c0f4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	689b      	ldr	r3, [r3, #8]
 801c12c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c130:	d107      	bne.n	801c142 <UART_Start_Receive_IT+0x102>
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	691b      	ldr	r3, [r3, #16]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d103      	bne.n	801c142 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	4a21      	ldr	r2, [pc, #132]	@ (801c1c4 <UART_Start_Receive_IT+0x184>)
 801c13e:	669a      	str	r2, [r3, #104]	@ 0x68
 801c140:	e002      	b.n	801c148 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	4a20      	ldr	r2, [pc, #128]	@ (801c1c8 <UART_Start_Receive_IT+0x188>)
 801c146:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	691b      	ldr	r3, [r3, #16]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d019      	beq.n	801c184 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c158:	e853 3f00 	ldrex	r3, [r3]
 801c15c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801c15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c160:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801c164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	461a      	mov	r2, r3
 801c16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c16e:	637b      	str	r3, [r7, #52]	@ 0x34
 801c170:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c172:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c176:	e841 2300 	strex	r3, r2, [r1]
 801c17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801c17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d1e6      	bne.n	801c150 <UART_Start_Receive_IT+0x110>
 801c182:	e018      	b.n	801c1b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c18a:	697b      	ldr	r3, [r7, #20]
 801c18c:	e853 3f00 	ldrex	r3, [r3]
 801c190:	613b      	str	r3, [r7, #16]
   return(result);
 801c192:	693b      	ldr	r3, [r7, #16]
 801c194:	f043 0320 	orr.w	r3, r3, #32
 801c198:	653b      	str	r3, [r7, #80]	@ 0x50
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	461a      	mov	r2, r3
 801c1a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c1a2:	623b      	str	r3, [r7, #32]
 801c1a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1a6:	69f9      	ldr	r1, [r7, #28]
 801c1a8:	6a3a      	ldr	r2, [r7, #32]
 801c1aa:	e841 2300 	strex	r3, r2, [r1]
 801c1ae:	61bb      	str	r3, [r7, #24]
   return(result);
 801c1b0:	69bb      	ldr	r3, [r7, #24]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d1e6      	bne.n	801c184 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801c1b6:	2300      	movs	r3, #0
}
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	375c      	adds	r7, #92	@ 0x5c
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c2:	4770      	bx	lr
 801c1c4:	0801c4d1 	.word	0x0801c4d1
 801c1c8:	0801c315 	.word	0x0801c315

0801c1cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c1cc:	b480      	push	{r7}
 801c1ce:	b095      	sub	sp, #84	@ 0x54
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1dc:	e853 3f00 	ldrex	r3, [r3]
 801c1e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801c1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801c1e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	461a      	mov	r2, r3
 801c1f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c1f2:	643b      	str	r3, [r7, #64]	@ 0x40
 801c1f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c1f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c1fa:	e841 2300 	strex	r3, r2, [r1]
 801c1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801c200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c202:	2b00      	cmp	r3, #0
 801c204:	d1e6      	bne.n	801c1d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	3308      	adds	r3, #8
 801c20c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c20e:	6a3b      	ldr	r3, [r7, #32]
 801c210:	e853 3f00 	ldrex	r3, [r3]
 801c214:	61fb      	str	r3, [r7, #28]
   return(result);
 801c216:	69fb      	ldr	r3, [r7, #28]
 801c218:	f023 0301 	bic.w	r3, r3, #1
 801c21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	3308      	adds	r3, #8
 801c224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c22a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c22c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c22e:	e841 2300 	strex	r3, r2, [r1]
 801c232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c236:	2b00      	cmp	r3, #0
 801c238:	d1e5      	bne.n	801c206 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c23e:	2b01      	cmp	r3, #1
 801c240:	d118      	bne.n	801c274 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	e853 3f00 	ldrex	r3, [r3]
 801c24e:	60bb      	str	r3, [r7, #8]
   return(result);
 801c250:	68bb      	ldr	r3, [r7, #8]
 801c252:	f023 0310 	bic.w	r3, r3, #16
 801c256:	647b      	str	r3, [r7, #68]	@ 0x44
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	461a      	mov	r2, r3
 801c25e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c260:	61bb      	str	r3, [r7, #24]
 801c262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c264:	6979      	ldr	r1, [r7, #20]
 801c266:	69ba      	ldr	r2, [r7, #24]
 801c268:	e841 2300 	strex	r3, r2, [r1]
 801c26c:	613b      	str	r3, [r7, #16]
   return(result);
 801c26e:	693b      	ldr	r3, [r7, #16]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d1e6      	bne.n	801c242 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	2220      	movs	r2, #32
 801c278:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	2200      	movs	r2, #0
 801c280:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	2200      	movs	r2, #0
 801c286:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c288:	bf00      	nop
 801c28a:	3754      	adds	r7, #84	@ 0x54
 801c28c:	46bd      	mov	sp, r7
 801c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c292:	4770      	bx	lr

0801c294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b084      	sub	sp, #16
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c2b2:	68f8      	ldr	r0, [r7, #12]
 801c2b4:	f7ff fa9c 	bl	801b7f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c2b8:	bf00      	nop
 801c2ba:	3710      	adds	r7, #16
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	bd80      	pop	{r7, pc}

0801c2c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b088      	sub	sp, #32
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	e853 3f00 	ldrex	r3, [r3]
 801c2d4:	60bb      	str	r3, [r7, #8]
   return(result);
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c2dc:	61fb      	str	r3, [r7, #28]
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	461a      	mov	r2, r3
 801c2e4:	69fb      	ldr	r3, [r7, #28]
 801c2e6:	61bb      	str	r3, [r7, #24]
 801c2e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2ea:	6979      	ldr	r1, [r7, #20]
 801c2ec:	69ba      	ldr	r2, [r7, #24]
 801c2ee:	e841 2300 	strex	r3, r2, [r1]
 801c2f2:	613b      	str	r3, [r7, #16]
   return(result);
 801c2f4:	693b      	ldr	r3, [r7, #16]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d1e6      	bne.n	801c2c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	2220      	movs	r2, #32
 801c2fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	2200      	movs	r2, #0
 801c304:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c306:	6878      	ldr	r0, [r7, #4]
 801c308:	f7ff fa68 	bl	801b7dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c30c:	bf00      	nop
 801c30e:	3720      	adds	r7, #32
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}

0801c314 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c314:	b580      	push	{r7, lr}
 801c316:	b09c      	sub	sp, #112	@ 0x70
 801c318:	af00      	add	r7, sp, #0
 801c31a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801c322:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c32c:	2b22      	cmp	r3, #34	@ 0x22
 801c32e:	f040 80be 	bne.w	801c4ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c338:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c33c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801c340:	b2d9      	uxtb	r1, r3
 801c342:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801c346:	b2da      	uxtb	r2, r3
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c34c:	400a      	ands	r2, r1
 801c34e:	b2d2      	uxtb	r2, r2
 801c350:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c356:	1c5a      	adds	r2, r3, #1
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c362:	b29b      	uxth	r3, r3
 801c364:	3b01      	subs	r3, #1
 801c366:	b29a      	uxth	r2, r3
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c374:	b29b      	uxth	r3, r3
 801c376:	2b00      	cmp	r3, #0
 801c378:	f040 80a3 	bne.w	801c4c2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c384:	e853 3f00 	ldrex	r3, [r3]
 801c388:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801c38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c38c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801c390:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	461a      	mov	r2, r3
 801c398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c39a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c39c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c39e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801c3a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801c3a2:	e841 2300 	strex	r3, r2, [r1]
 801c3a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801c3a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d1e6      	bne.n	801c37c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	3308      	adds	r3, #8
 801c3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3b8:	e853 3f00 	ldrex	r3, [r3]
 801c3bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801c3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c3c0:	f023 0301 	bic.w	r3, r3, #1
 801c3c4:	667b      	str	r3, [r7, #100]	@ 0x64
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	3308      	adds	r3, #8
 801c3cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801c3ce:	647a      	str	r2, [r7, #68]	@ 0x44
 801c3d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801c3d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c3d6:	e841 2300 	strex	r3, r2, [r1]
 801c3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801c3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d1e5      	bne.n	801c3ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	2220      	movs	r2, #32
 801c3e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	4a34      	ldr	r2, [pc, #208]	@ (801c4cc <UART_RxISR_8BIT+0x1b8>)
 801c3fc:	4293      	cmp	r3, r2
 801c3fe:	d01f      	beq.n	801c440 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	685b      	ldr	r3, [r3, #4]
 801c406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d018      	beq.n	801c440 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c416:	e853 3f00 	ldrex	r3, [r3]
 801c41a:	623b      	str	r3, [r7, #32]
   return(result);
 801c41c:	6a3b      	ldr	r3, [r7, #32]
 801c41e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c422:	663b      	str	r3, [r7, #96]	@ 0x60
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	461a      	mov	r2, r3
 801c42a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c42c:	633b      	str	r3, [r7, #48]	@ 0x30
 801c42e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c434:	e841 2300 	strex	r3, r2, [r1]
 801c438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d1e6      	bne.n	801c40e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c444:	2b01      	cmp	r3, #1
 801c446:	d12e      	bne.n	801c4a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	2200      	movs	r2, #0
 801c44c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	e853 3f00 	ldrex	r3, [r3]
 801c45a:	60fb      	str	r3, [r7, #12]
   return(result);
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	f023 0310 	bic.w	r3, r3, #16
 801c462:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	461a      	mov	r2, r3
 801c46a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c46c:	61fb      	str	r3, [r7, #28]
 801c46e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c470:	69b9      	ldr	r1, [r7, #24]
 801c472:	69fa      	ldr	r2, [r7, #28]
 801c474:	e841 2300 	strex	r3, r2, [r1]
 801c478:	617b      	str	r3, [r7, #20]
   return(result);
 801c47a:	697b      	ldr	r3, [r7, #20]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d1e6      	bne.n	801c44e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	69db      	ldr	r3, [r3, #28]
 801c486:	f003 0310 	and.w	r3, r3, #16
 801c48a:	2b10      	cmp	r3, #16
 801c48c:	d103      	bne.n	801c496 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	2210      	movs	r2, #16
 801c494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801c49c:	4619      	mov	r1, r3
 801c49e:	6878      	ldr	r0, [r7, #4]
 801c4a0:	f7ff f9b0 	bl	801b804 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c4a4:	e00d      	b.n	801c4c2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801c4a6:	6878      	ldr	r0, [r7, #4]
 801c4a8:	f7e6 f80a 	bl	80024c0 <HAL_UART_RxCpltCallback>
}
 801c4ac:	e009      	b.n	801c4c2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	8b1b      	ldrh	r3, [r3, #24]
 801c4b4:	b29a      	uxth	r2, r3
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	f042 0208 	orr.w	r2, r2, #8
 801c4be:	b292      	uxth	r2, r2
 801c4c0:	831a      	strh	r2, [r3, #24]
}
 801c4c2:	bf00      	nop
 801c4c4:	3770      	adds	r7, #112	@ 0x70
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	bd80      	pop	{r7, pc}
 801c4ca:	bf00      	nop
 801c4cc:	40008000 	.word	0x40008000

0801c4d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b09c      	sub	sp, #112	@ 0x70
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801c4de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c4e8:	2b22      	cmp	r3, #34	@ 0x22
 801c4ea:	f040 80be 	bne.w	801c66a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c4f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c4fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801c4fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801c502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801c506:	4013      	ands	r3, r2
 801c508:	b29a      	uxth	r2, r3
 801c50a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c50c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c512:	1c9a      	adds	r2, r3, #2
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c51e:	b29b      	uxth	r3, r3
 801c520:	3b01      	subs	r3, #1
 801c522:	b29a      	uxth	r2, r3
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c530:	b29b      	uxth	r3, r3
 801c532:	2b00      	cmp	r3, #0
 801c534:	f040 80a3 	bne.w	801c67e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c53e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c540:	e853 3f00 	ldrex	r3, [r3]
 801c544:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801c546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801c54c:	667b      	str	r3, [r7, #100]	@ 0x64
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	461a      	mov	r2, r3
 801c554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c556:	657b      	str	r3, [r7, #84]	@ 0x54
 801c558:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c55a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c55c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c55e:	e841 2300 	strex	r3, r2, [r1]
 801c562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801c564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c566:	2b00      	cmp	r3, #0
 801c568:	d1e6      	bne.n	801c538 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	3308      	adds	r3, #8
 801c570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c574:	e853 3f00 	ldrex	r3, [r3]
 801c578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c57c:	f023 0301 	bic.w	r3, r3, #1
 801c580:	663b      	str	r3, [r7, #96]	@ 0x60
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	3308      	adds	r3, #8
 801c588:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801c58a:	643a      	str	r2, [r7, #64]	@ 0x40
 801c58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c58e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c592:	e841 2300 	strex	r3, r2, [r1]
 801c596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801c598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d1e5      	bne.n	801c56a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	2220      	movs	r2, #32
 801c5a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	4a34      	ldr	r2, [pc, #208]	@ (801c688 <UART_RxISR_16BIT+0x1b8>)
 801c5b8:	4293      	cmp	r3, r2
 801c5ba:	d01f      	beq.n	801c5fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	685b      	ldr	r3, [r3, #4]
 801c5c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d018      	beq.n	801c5fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5d0:	6a3b      	ldr	r3, [r7, #32]
 801c5d2:	e853 3f00 	ldrex	r3, [r3]
 801c5d6:	61fb      	str	r3, [r7, #28]
   return(result);
 801c5d8:	69fb      	ldr	r3, [r7, #28]
 801c5da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c5de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	461a      	mov	r2, r3
 801c5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c5ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c5ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5f0:	e841 2300 	strex	r3, r2, [r1]
 801c5f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d1e6      	bne.n	801c5ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c600:	2b01      	cmp	r3, #1
 801c602:	d12e      	bne.n	801c662 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2200      	movs	r2, #0
 801c608:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	e853 3f00 	ldrex	r3, [r3]
 801c616:	60bb      	str	r3, [r7, #8]
   return(result);
 801c618:	68bb      	ldr	r3, [r7, #8]
 801c61a:	f023 0310 	bic.w	r3, r3, #16
 801c61e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	461a      	mov	r2, r3
 801c626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c628:	61bb      	str	r3, [r7, #24]
 801c62a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c62c:	6979      	ldr	r1, [r7, #20]
 801c62e:	69ba      	ldr	r2, [r7, #24]
 801c630:	e841 2300 	strex	r3, r2, [r1]
 801c634:	613b      	str	r3, [r7, #16]
   return(result);
 801c636:	693b      	ldr	r3, [r7, #16]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d1e6      	bne.n	801c60a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	69db      	ldr	r3, [r3, #28]
 801c642:	f003 0310 	and.w	r3, r3, #16
 801c646:	2b10      	cmp	r3, #16
 801c648:	d103      	bne.n	801c652 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	2210      	movs	r2, #16
 801c650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801c658:	4619      	mov	r1, r3
 801c65a:	6878      	ldr	r0, [r7, #4]
 801c65c:	f7ff f8d2 	bl	801b804 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c660:	e00d      	b.n	801c67e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801c662:	6878      	ldr	r0, [r7, #4]
 801c664:	f7e5 ff2c 	bl	80024c0 <HAL_UART_RxCpltCallback>
}
 801c668:	e009      	b.n	801c67e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	8b1b      	ldrh	r3, [r3, #24]
 801c670:	b29a      	uxth	r2, r3
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	f042 0208 	orr.w	r2, r2, #8
 801c67a:	b292      	uxth	r2, r2
 801c67c:	831a      	strh	r2, [r3, #24]
}
 801c67e:	bf00      	nop
 801c680:	3770      	adds	r7, #112	@ 0x70
 801c682:	46bd      	mov	sp, r7
 801c684:	bd80      	pop	{r7, pc}
 801c686:	bf00      	nop
 801c688:	40008000 	.word	0x40008000

0801c68c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c68c:	b480      	push	{r7}
 801c68e:	b083      	sub	sp, #12
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c694:	bf00      	nop
 801c696:	370c      	adds	r7, #12
 801c698:	46bd      	mov	sp, r7
 801c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c69e:	4770      	bx	lr

0801c6a0 <__cvt>:
 801c6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c6a4:	ec57 6b10 	vmov	r6, r7, d0
 801c6a8:	2f00      	cmp	r7, #0
 801c6aa:	460c      	mov	r4, r1
 801c6ac:	4619      	mov	r1, r3
 801c6ae:	463b      	mov	r3, r7
 801c6b0:	bfbb      	ittet	lt
 801c6b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c6b6:	461f      	movlt	r7, r3
 801c6b8:	2300      	movge	r3, #0
 801c6ba:	232d      	movlt	r3, #45	@ 0x2d
 801c6bc:	700b      	strb	r3, [r1, #0]
 801c6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c6c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c6c4:	4691      	mov	r9, r2
 801c6c6:	f023 0820 	bic.w	r8, r3, #32
 801c6ca:	bfbc      	itt	lt
 801c6cc:	4632      	movlt	r2, r6
 801c6ce:	4616      	movlt	r6, r2
 801c6d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c6d4:	d005      	beq.n	801c6e2 <__cvt+0x42>
 801c6d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c6da:	d100      	bne.n	801c6de <__cvt+0x3e>
 801c6dc:	3401      	adds	r4, #1
 801c6de:	2102      	movs	r1, #2
 801c6e0:	e000      	b.n	801c6e4 <__cvt+0x44>
 801c6e2:	2103      	movs	r1, #3
 801c6e4:	ab03      	add	r3, sp, #12
 801c6e6:	9301      	str	r3, [sp, #4]
 801c6e8:	ab02      	add	r3, sp, #8
 801c6ea:	9300      	str	r3, [sp, #0]
 801c6ec:	ec47 6b10 	vmov	d0, r6, r7
 801c6f0:	4653      	mov	r3, sl
 801c6f2:	4622      	mov	r2, r4
 801c6f4:	f001 f824 	bl	801d740 <_dtoa_r>
 801c6f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c6fc:	4605      	mov	r5, r0
 801c6fe:	d119      	bne.n	801c734 <__cvt+0x94>
 801c700:	f019 0f01 	tst.w	r9, #1
 801c704:	d00e      	beq.n	801c724 <__cvt+0x84>
 801c706:	eb00 0904 	add.w	r9, r0, r4
 801c70a:	2200      	movs	r2, #0
 801c70c:	2300      	movs	r3, #0
 801c70e:	4630      	mov	r0, r6
 801c710:	4639      	mov	r1, r7
 801c712:	f7e4 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 801c716:	b108      	cbz	r0, 801c71c <__cvt+0x7c>
 801c718:	f8cd 900c 	str.w	r9, [sp, #12]
 801c71c:	2230      	movs	r2, #48	@ 0x30
 801c71e:	9b03      	ldr	r3, [sp, #12]
 801c720:	454b      	cmp	r3, r9
 801c722:	d31e      	bcc.n	801c762 <__cvt+0xc2>
 801c724:	9b03      	ldr	r3, [sp, #12]
 801c726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c728:	1b5b      	subs	r3, r3, r5
 801c72a:	4628      	mov	r0, r5
 801c72c:	6013      	str	r3, [r2, #0]
 801c72e:	b004      	add	sp, #16
 801c730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c738:	eb00 0904 	add.w	r9, r0, r4
 801c73c:	d1e5      	bne.n	801c70a <__cvt+0x6a>
 801c73e:	7803      	ldrb	r3, [r0, #0]
 801c740:	2b30      	cmp	r3, #48	@ 0x30
 801c742:	d10a      	bne.n	801c75a <__cvt+0xba>
 801c744:	2200      	movs	r2, #0
 801c746:	2300      	movs	r3, #0
 801c748:	4630      	mov	r0, r6
 801c74a:	4639      	mov	r1, r7
 801c74c:	f7e4 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 801c750:	b918      	cbnz	r0, 801c75a <__cvt+0xba>
 801c752:	f1c4 0401 	rsb	r4, r4, #1
 801c756:	f8ca 4000 	str.w	r4, [sl]
 801c75a:	f8da 3000 	ldr.w	r3, [sl]
 801c75e:	4499      	add	r9, r3
 801c760:	e7d3      	b.n	801c70a <__cvt+0x6a>
 801c762:	1c59      	adds	r1, r3, #1
 801c764:	9103      	str	r1, [sp, #12]
 801c766:	701a      	strb	r2, [r3, #0]
 801c768:	e7d9      	b.n	801c71e <__cvt+0x7e>

0801c76a <__exponent>:
 801c76a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c76c:	2900      	cmp	r1, #0
 801c76e:	bfba      	itte	lt
 801c770:	4249      	neglt	r1, r1
 801c772:	232d      	movlt	r3, #45	@ 0x2d
 801c774:	232b      	movge	r3, #43	@ 0x2b
 801c776:	2909      	cmp	r1, #9
 801c778:	7002      	strb	r2, [r0, #0]
 801c77a:	7043      	strb	r3, [r0, #1]
 801c77c:	dd29      	ble.n	801c7d2 <__exponent+0x68>
 801c77e:	f10d 0307 	add.w	r3, sp, #7
 801c782:	461d      	mov	r5, r3
 801c784:	270a      	movs	r7, #10
 801c786:	461a      	mov	r2, r3
 801c788:	fbb1 f6f7 	udiv	r6, r1, r7
 801c78c:	fb07 1416 	mls	r4, r7, r6, r1
 801c790:	3430      	adds	r4, #48	@ 0x30
 801c792:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c796:	460c      	mov	r4, r1
 801c798:	2c63      	cmp	r4, #99	@ 0x63
 801c79a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c79e:	4631      	mov	r1, r6
 801c7a0:	dcf1      	bgt.n	801c786 <__exponent+0x1c>
 801c7a2:	3130      	adds	r1, #48	@ 0x30
 801c7a4:	1e94      	subs	r4, r2, #2
 801c7a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c7aa:	1c41      	adds	r1, r0, #1
 801c7ac:	4623      	mov	r3, r4
 801c7ae:	42ab      	cmp	r3, r5
 801c7b0:	d30a      	bcc.n	801c7c8 <__exponent+0x5e>
 801c7b2:	f10d 0309 	add.w	r3, sp, #9
 801c7b6:	1a9b      	subs	r3, r3, r2
 801c7b8:	42ac      	cmp	r4, r5
 801c7ba:	bf88      	it	hi
 801c7bc:	2300      	movhi	r3, #0
 801c7be:	3302      	adds	r3, #2
 801c7c0:	4403      	add	r3, r0
 801c7c2:	1a18      	subs	r0, r3, r0
 801c7c4:	b003      	add	sp, #12
 801c7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c7cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c7d0:	e7ed      	b.n	801c7ae <__exponent+0x44>
 801c7d2:	2330      	movs	r3, #48	@ 0x30
 801c7d4:	3130      	adds	r1, #48	@ 0x30
 801c7d6:	7083      	strb	r3, [r0, #2]
 801c7d8:	70c1      	strb	r1, [r0, #3]
 801c7da:	1d03      	adds	r3, r0, #4
 801c7dc:	e7f1      	b.n	801c7c2 <__exponent+0x58>
	...

0801c7e0 <_printf_float>:
 801c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e4:	b08d      	sub	sp, #52	@ 0x34
 801c7e6:	460c      	mov	r4, r1
 801c7e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c7ec:	4616      	mov	r6, r2
 801c7ee:	461f      	mov	r7, r3
 801c7f0:	4605      	mov	r5, r0
 801c7f2:	f000 fe95 	bl	801d520 <_localeconv_r>
 801c7f6:	6803      	ldr	r3, [r0, #0]
 801c7f8:	9304      	str	r3, [sp, #16]
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f7e3 fd38 	bl	8000270 <strlen>
 801c800:	2300      	movs	r3, #0
 801c802:	930a      	str	r3, [sp, #40]	@ 0x28
 801c804:	f8d8 3000 	ldr.w	r3, [r8]
 801c808:	9005      	str	r0, [sp, #20]
 801c80a:	3307      	adds	r3, #7
 801c80c:	f023 0307 	bic.w	r3, r3, #7
 801c810:	f103 0208 	add.w	r2, r3, #8
 801c814:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c818:	f8d4 b000 	ldr.w	fp, [r4]
 801c81c:	f8c8 2000 	str.w	r2, [r8]
 801c820:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c828:	9307      	str	r3, [sp, #28]
 801c82a:	f8cd 8018 	str.w	r8, [sp, #24]
 801c82e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c836:	4b9c      	ldr	r3, [pc, #624]	@ (801caa8 <_printf_float+0x2c8>)
 801c838:	f04f 32ff 	mov.w	r2, #4294967295
 801c83c:	f7e4 f976 	bl	8000b2c <__aeabi_dcmpun>
 801c840:	bb70      	cbnz	r0, 801c8a0 <_printf_float+0xc0>
 801c842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c846:	4b98      	ldr	r3, [pc, #608]	@ (801caa8 <_printf_float+0x2c8>)
 801c848:	f04f 32ff 	mov.w	r2, #4294967295
 801c84c:	f7e4 f950 	bl	8000af0 <__aeabi_dcmple>
 801c850:	bb30      	cbnz	r0, 801c8a0 <_printf_float+0xc0>
 801c852:	2200      	movs	r2, #0
 801c854:	2300      	movs	r3, #0
 801c856:	4640      	mov	r0, r8
 801c858:	4649      	mov	r1, r9
 801c85a:	f7e4 f93f 	bl	8000adc <__aeabi_dcmplt>
 801c85e:	b110      	cbz	r0, 801c866 <_printf_float+0x86>
 801c860:	232d      	movs	r3, #45	@ 0x2d
 801c862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c866:	4a91      	ldr	r2, [pc, #580]	@ (801caac <_printf_float+0x2cc>)
 801c868:	4b91      	ldr	r3, [pc, #580]	@ (801cab0 <_printf_float+0x2d0>)
 801c86a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c86e:	bf8c      	ite	hi
 801c870:	4690      	movhi	r8, r2
 801c872:	4698      	movls	r8, r3
 801c874:	2303      	movs	r3, #3
 801c876:	6123      	str	r3, [r4, #16]
 801c878:	f02b 0304 	bic.w	r3, fp, #4
 801c87c:	6023      	str	r3, [r4, #0]
 801c87e:	f04f 0900 	mov.w	r9, #0
 801c882:	9700      	str	r7, [sp, #0]
 801c884:	4633      	mov	r3, r6
 801c886:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c888:	4621      	mov	r1, r4
 801c88a:	4628      	mov	r0, r5
 801c88c:	f000 f9d2 	bl	801cc34 <_printf_common>
 801c890:	3001      	adds	r0, #1
 801c892:	f040 808d 	bne.w	801c9b0 <_printf_float+0x1d0>
 801c896:	f04f 30ff 	mov.w	r0, #4294967295
 801c89a:	b00d      	add	sp, #52	@ 0x34
 801c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a0:	4642      	mov	r2, r8
 801c8a2:	464b      	mov	r3, r9
 801c8a4:	4640      	mov	r0, r8
 801c8a6:	4649      	mov	r1, r9
 801c8a8:	f7e4 f940 	bl	8000b2c <__aeabi_dcmpun>
 801c8ac:	b140      	cbz	r0, 801c8c0 <_printf_float+0xe0>
 801c8ae:	464b      	mov	r3, r9
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	bfbc      	itt	lt
 801c8b4:	232d      	movlt	r3, #45	@ 0x2d
 801c8b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c8ba:	4a7e      	ldr	r2, [pc, #504]	@ (801cab4 <_printf_float+0x2d4>)
 801c8bc:	4b7e      	ldr	r3, [pc, #504]	@ (801cab8 <_printf_float+0x2d8>)
 801c8be:	e7d4      	b.n	801c86a <_printf_float+0x8a>
 801c8c0:	6863      	ldr	r3, [r4, #4]
 801c8c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c8c6:	9206      	str	r2, [sp, #24]
 801c8c8:	1c5a      	adds	r2, r3, #1
 801c8ca:	d13b      	bne.n	801c944 <_printf_float+0x164>
 801c8cc:	2306      	movs	r3, #6
 801c8ce:	6063      	str	r3, [r4, #4]
 801c8d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	6022      	str	r2, [r4, #0]
 801c8d8:	9303      	str	r3, [sp, #12]
 801c8da:	ab0a      	add	r3, sp, #40	@ 0x28
 801c8dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c8e0:	ab09      	add	r3, sp, #36	@ 0x24
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	6861      	ldr	r1, [r4, #4]
 801c8e6:	ec49 8b10 	vmov	d0, r8, r9
 801c8ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	f7ff fed6 	bl	801c6a0 <__cvt>
 801c8f4:	9b06      	ldr	r3, [sp, #24]
 801c8f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c8f8:	2b47      	cmp	r3, #71	@ 0x47
 801c8fa:	4680      	mov	r8, r0
 801c8fc:	d129      	bne.n	801c952 <_printf_float+0x172>
 801c8fe:	1cc8      	adds	r0, r1, #3
 801c900:	db02      	blt.n	801c908 <_printf_float+0x128>
 801c902:	6863      	ldr	r3, [r4, #4]
 801c904:	4299      	cmp	r1, r3
 801c906:	dd41      	ble.n	801c98c <_printf_float+0x1ac>
 801c908:	f1aa 0a02 	sub.w	sl, sl, #2
 801c90c:	fa5f fa8a 	uxtb.w	sl, sl
 801c910:	3901      	subs	r1, #1
 801c912:	4652      	mov	r2, sl
 801c914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c918:	9109      	str	r1, [sp, #36]	@ 0x24
 801c91a:	f7ff ff26 	bl	801c76a <__exponent>
 801c91e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c920:	1813      	adds	r3, r2, r0
 801c922:	2a01      	cmp	r2, #1
 801c924:	4681      	mov	r9, r0
 801c926:	6123      	str	r3, [r4, #16]
 801c928:	dc02      	bgt.n	801c930 <_printf_float+0x150>
 801c92a:	6822      	ldr	r2, [r4, #0]
 801c92c:	07d2      	lsls	r2, r2, #31
 801c92e:	d501      	bpl.n	801c934 <_printf_float+0x154>
 801c930:	3301      	adds	r3, #1
 801c932:	6123      	str	r3, [r4, #16]
 801c934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d0a2      	beq.n	801c882 <_printf_float+0xa2>
 801c93c:	232d      	movs	r3, #45	@ 0x2d
 801c93e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c942:	e79e      	b.n	801c882 <_printf_float+0xa2>
 801c944:	9a06      	ldr	r2, [sp, #24]
 801c946:	2a47      	cmp	r2, #71	@ 0x47
 801c948:	d1c2      	bne.n	801c8d0 <_printf_float+0xf0>
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d1c0      	bne.n	801c8d0 <_printf_float+0xf0>
 801c94e:	2301      	movs	r3, #1
 801c950:	e7bd      	b.n	801c8ce <_printf_float+0xee>
 801c952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c956:	d9db      	bls.n	801c910 <_printf_float+0x130>
 801c958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c95c:	d118      	bne.n	801c990 <_printf_float+0x1b0>
 801c95e:	2900      	cmp	r1, #0
 801c960:	6863      	ldr	r3, [r4, #4]
 801c962:	dd0b      	ble.n	801c97c <_printf_float+0x19c>
 801c964:	6121      	str	r1, [r4, #16]
 801c966:	b913      	cbnz	r3, 801c96e <_printf_float+0x18e>
 801c968:	6822      	ldr	r2, [r4, #0]
 801c96a:	07d0      	lsls	r0, r2, #31
 801c96c:	d502      	bpl.n	801c974 <_printf_float+0x194>
 801c96e:	3301      	adds	r3, #1
 801c970:	440b      	add	r3, r1
 801c972:	6123      	str	r3, [r4, #16]
 801c974:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c976:	f04f 0900 	mov.w	r9, #0
 801c97a:	e7db      	b.n	801c934 <_printf_float+0x154>
 801c97c:	b913      	cbnz	r3, 801c984 <_printf_float+0x1a4>
 801c97e:	6822      	ldr	r2, [r4, #0]
 801c980:	07d2      	lsls	r2, r2, #31
 801c982:	d501      	bpl.n	801c988 <_printf_float+0x1a8>
 801c984:	3302      	adds	r3, #2
 801c986:	e7f4      	b.n	801c972 <_printf_float+0x192>
 801c988:	2301      	movs	r3, #1
 801c98a:	e7f2      	b.n	801c972 <_printf_float+0x192>
 801c98c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c992:	4299      	cmp	r1, r3
 801c994:	db05      	blt.n	801c9a2 <_printf_float+0x1c2>
 801c996:	6823      	ldr	r3, [r4, #0]
 801c998:	6121      	str	r1, [r4, #16]
 801c99a:	07d8      	lsls	r0, r3, #31
 801c99c:	d5ea      	bpl.n	801c974 <_printf_float+0x194>
 801c99e:	1c4b      	adds	r3, r1, #1
 801c9a0:	e7e7      	b.n	801c972 <_printf_float+0x192>
 801c9a2:	2900      	cmp	r1, #0
 801c9a4:	bfd4      	ite	le
 801c9a6:	f1c1 0202 	rsble	r2, r1, #2
 801c9aa:	2201      	movgt	r2, #1
 801c9ac:	4413      	add	r3, r2
 801c9ae:	e7e0      	b.n	801c972 <_printf_float+0x192>
 801c9b0:	6823      	ldr	r3, [r4, #0]
 801c9b2:	055a      	lsls	r2, r3, #21
 801c9b4:	d407      	bmi.n	801c9c6 <_printf_float+0x1e6>
 801c9b6:	6923      	ldr	r3, [r4, #16]
 801c9b8:	4642      	mov	r2, r8
 801c9ba:	4631      	mov	r1, r6
 801c9bc:	4628      	mov	r0, r5
 801c9be:	47b8      	blx	r7
 801c9c0:	3001      	adds	r0, #1
 801c9c2:	d12b      	bne.n	801ca1c <_printf_float+0x23c>
 801c9c4:	e767      	b.n	801c896 <_printf_float+0xb6>
 801c9c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c9ca:	f240 80dd 	bls.w	801cb88 <_printf_float+0x3a8>
 801c9ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	f7e4 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 801c9da:	2800      	cmp	r0, #0
 801c9dc:	d033      	beq.n	801ca46 <_printf_float+0x266>
 801c9de:	4a37      	ldr	r2, [pc, #220]	@ (801cabc <_printf_float+0x2dc>)
 801c9e0:	2301      	movs	r3, #1
 801c9e2:	4631      	mov	r1, r6
 801c9e4:	4628      	mov	r0, r5
 801c9e6:	47b8      	blx	r7
 801c9e8:	3001      	adds	r0, #1
 801c9ea:	f43f af54 	beq.w	801c896 <_printf_float+0xb6>
 801c9ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c9f2:	4543      	cmp	r3, r8
 801c9f4:	db02      	blt.n	801c9fc <_printf_float+0x21c>
 801c9f6:	6823      	ldr	r3, [r4, #0]
 801c9f8:	07d8      	lsls	r0, r3, #31
 801c9fa:	d50f      	bpl.n	801ca1c <_printf_float+0x23c>
 801c9fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ca00:	4631      	mov	r1, r6
 801ca02:	4628      	mov	r0, r5
 801ca04:	47b8      	blx	r7
 801ca06:	3001      	adds	r0, #1
 801ca08:	f43f af45 	beq.w	801c896 <_printf_float+0xb6>
 801ca0c:	f04f 0900 	mov.w	r9, #0
 801ca10:	f108 38ff 	add.w	r8, r8, #4294967295
 801ca14:	f104 0a1a 	add.w	sl, r4, #26
 801ca18:	45c8      	cmp	r8, r9
 801ca1a:	dc09      	bgt.n	801ca30 <_printf_float+0x250>
 801ca1c:	6823      	ldr	r3, [r4, #0]
 801ca1e:	079b      	lsls	r3, r3, #30
 801ca20:	f100 8103 	bmi.w	801cc2a <_printf_float+0x44a>
 801ca24:	68e0      	ldr	r0, [r4, #12]
 801ca26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca28:	4298      	cmp	r0, r3
 801ca2a:	bfb8      	it	lt
 801ca2c:	4618      	movlt	r0, r3
 801ca2e:	e734      	b.n	801c89a <_printf_float+0xba>
 801ca30:	2301      	movs	r3, #1
 801ca32:	4652      	mov	r2, sl
 801ca34:	4631      	mov	r1, r6
 801ca36:	4628      	mov	r0, r5
 801ca38:	47b8      	blx	r7
 801ca3a:	3001      	adds	r0, #1
 801ca3c:	f43f af2b 	beq.w	801c896 <_printf_float+0xb6>
 801ca40:	f109 0901 	add.w	r9, r9, #1
 801ca44:	e7e8      	b.n	801ca18 <_printf_float+0x238>
 801ca46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	dc39      	bgt.n	801cac0 <_printf_float+0x2e0>
 801ca4c:	4a1b      	ldr	r2, [pc, #108]	@ (801cabc <_printf_float+0x2dc>)
 801ca4e:	2301      	movs	r3, #1
 801ca50:	4631      	mov	r1, r6
 801ca52:	4628      	mov	r0, r5
 801ca54:	47b8      	blx	r7
 801ca56:	3001      	adds	r0, #1
 801ca58:	f43f af1d 	beq.w	801c896 <_printf_float+0xb6>
 801ca5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ca60:	ea59 0303 	orrs.w	r3, r9, r3
 801ca64:	d102      	bne.n	801ca6c <_printf_float+0x28c>
 801ca66:	6823      	ldr	r3, [r4, #0]
 801ca68:	07d9      	lsls	r1, r3, #31
 801ca6a:	d5d7      	bpl.n	801ca1c <_printf_float+0x23c>
 801ca6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ca70:	4631      	mov	r1, r6
 801ca72:	4628      	mov	r0, r5
 801ca74:	47b8      	blx	r7
 801ca76:	3001      	adds	r0, #1
 801ca78:	f43f af0d 	beq.w	801c896 <_printf_float+0xb6>
 801ca7c:	f04f 0a00 	mov.w	sl, #0
 801ca80:	f104 0b1a 	add.w	fp, r4, #26
 801ca84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca86:	425b      	negs	r3, r3
 801ca88:	4553      	cmp	r3, sl
 801ca8a:	dc01      	bgt.n	801ca90 <_printf_float+0x2b0>
 801ca8c:	464b      	mov	r3, r9
 801ca8e:	e793      	b.n	801c9b8 <_printf_float+0x1d8>
 801ca90:	2301      	movs	r3, #1
 801ca92:	465a      	mov	r2, fp
 801ca94:	4631      	mov	r1, r6
 801ca96:	4628      	mov	r0, r5
 801ca98:	47b8      	blx	r7
 801ca9a:	3001      	adds	r0, #1
 801ca9c:	f43f aefb 	beq.w	801c896 <_printf_float+0xb6>
 801caa0:	f10a 0a01 	add.w	sl, sl, #1
 801caa4:	e7ee      	b.n	801ca84 <_printf_float+0x2a4>
 801caa6:	bf00      	nop
 801caa8:	7fefffff 	.word	0x7fefffff
 801caac:	080207a8 	.word	0x080207a8
 801cab0:	080207a4 	.word	0x080207a4
 801cab4:	080207b0 	.word	0x080207b0
 801cab8:	080207ac 	.word	0x080207ac
 801cabc:	080207b4 	.word	0x080207b4
 801cac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cac6:	4553      	cmp	r3, sl
 801cac8:	bfa8      	it	ge
 801caca:	4653      	movge	r3, sl
 801cacc:	2b00      	cmp	r3, #0
 801cace:	4699      	mov	r9, r3
 801cad0:	dc36      	bgt.n	801cb40 <_printf_float+0x360>
 801cad2:	f04f 0b00 	mov.w	fp, #0
 801cad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cada:	f104 021a 	add.w	r2, r4, #26
 801cade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cae0:	9306      	str	r3, [sp, #24]
 801cae2:	eba3 0309 	sub.w	r3, r3, r9
 801cae6:	455b      	cmp	r3, fp
 801cae8:	dc31      	bgt.n	801cb4e <_printf_float+0x36e>
 801caea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caec:	459a      	cmp	sl, r3
 801caee:	dc3a      	bgt.n	801cb66 <_printf_float+0x386>
 801caf0:	6823      	ldr	r3, [r4, #0]
 801caf2:	07da      	lsls	r2, r3, #31
 801caf4:	d437      	bmi.n	801cb66 <_printf_float+0x386>
 801caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caf8:	ebaa 0903 	sub.w	r9, sl, r3
 801cafc:	9b06      	ldr	r3, [sp, #24]
 801cafe:	ebaa 0303 	sub.w	r3, sl, r3
 801cb02:	4599      	cmp	r9, r3
 801cb04:	bfa8      	it	ge
 801cb06:	4699      	movge	r9, r3
 801cb08:	f1b9 0f00 	cmp.w	r9, #0
 801cb0c:	dc33      	bgt.n	801cb76 <_printf_float+0x396>
 801cb0e:	f04f 0800 	mov.w	r8, #0
 801cb12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cb16:	f104 0b1a 	add.w	fp, r4, #26
 801cb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb1c:	ebaa 0303 	sub.w	r3, sl, r3
 801cb20:	eba3 0309 	sub.w	r3, r3, r9
 801cb24:	4543      	cmp	r3, r8
 801cb26:	f77f af79 	ble.w	801ca1c <_printf_float+0x23c>
 801cb2a:	2301      	movs	r3, #1
 801cb2c:	465a      	mov	r2, fp
 801cb2e:	4631      	mov	r1, r6
 801cb30:	4628      	mov	r0, r5
 801cb32:	47b8      	blx	r7
 801cb34:	3001      	adds	r0, #1
 801cb36:	f43f aeae 	beq.w	801c896 <_printf_float+0xb6>
 801cb3a:	f108 0801 	add.w	r8, r8, #1
 801cb3e:	e7ec      	b.n	801cb1a <_printf_float+0x33a>
 801cb40:	4642      	mov	r2, r8
 801cb42:	4631      	mov	r1, r6
 801cb44:	4628      	mov	r0, r5
 801cb46:	47b8      	blx	r7
 801cb48:	3001      	adds	r0, #1
 801cb4a:	d1c2      	bne.n	801cad2 <_printf_float+0x2f2>
 801cb4c:	e6a3      	b.n	801c896 <_printf_float+0xb6>
 801cb4e:	2301      	movs	r3, #1
 801cb50:	4631      	mov	r1, r6
 801cb52:	4628      	mov	r0, r5
 801cb54:	9206      	str	r2, [sp, #24]
 801cb56:	47b8      	blx	r7
 801cb58:	3001      	adds	r0, #1
 801cb5a:	f43f ae9c 	beq.w	801c896 <_printf_float+0xb6>
 801cb5e:	9a06      	ldr	r2, [sp, #24]
 801cb60:	f10b 0b01 	add.w	fp, fp, #1
 801cb64:	e7bb      	b.n	801cade <_printf_float+0x2fe>
 801cb66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cb6a:	4631      	mov	r1, r6
 801cb6c:	4628      	mov	r0, r5
 801cb6e:	47b8      	blx	r7
 801cb70:	3001      	adds	r0, #1
 801cb72:	d1c0      	bne.n	801caf6 <_printf_float+0x316>
 801cb74:	e68f      	b.n	801c896 <_printf_float+0xb6>
 801cb76:	9a06      	ldr	r2, [sp, #24]
 801cb78:	464b      	mov	r3, r9
 801cb7a:	4442      	add	r2, r8
 801cb7c:	4631      	mov	r1, r6
 801cb7e:	4628      	mov	r0, r5
 801cb80:	47b8      	blx	r7
 801cb82:	3001      	adds	r0, #1
 801cb84:	d1c3      	bne.n	801cb0e <_printf_float+0x32e>
 801cb86:	e686      	b.n	801c896 <_printf_float+0xb6>
 801cb88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cb8c:	f1ba 0f01 	cmp.w	sl, #1
 801cb90:	dc01      	bgt.n	801cb96 <_printf_float+0x3b6>
 801cb92:	07db      	lsls	r3, r3, #31
 801cb94:	d536      	bpl.n	801cc04 <_printf_float+0x424>
 801cb96:	2301      	movs	r3, #1
 801cb98:	4642      	mov	r2, r8
 801cb9a:	4631      	mov	r1, r6
 801cb9c:	4628      	mov	r0, r5
 801cb9e:	47b8      	blx	r7
 801cba0:	3001      	adds	r0, #1
 801cba2:	f43f ae78 	beq.w	801c896 <_printf_float+0xb6>
 801cba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cbaa:	4631      	mov	r1, r6
 801cbac:	4628      	mov	r0, r5
 801cbae:	47b8      	blx	r7
 801cbb0:	3001      	adds	r0, #1
 801cbb2:	f43f ae70 	beq.w	801c896 <_printf_float+0xb6>
 801cbb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cbba:	2200      	movs	r2, #0
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cbc2:	f7e3 ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 801cbc6:	b9c0      	cbnz	r0, 801cbfa <_printf_float+0x41a>
 801cbc8:	4653      	mov	r3, sl
 801cbca:	f108 0201 	add.w	r2, r8, #1
 801cbce:	4631      	mov	r1, r6
 801cbd0:	4628      	mov	r0, r5
 801cbd2:	47b8      	blx	r7
 801cbd4:	3001      	adds	r0, #1
 801cbd6:	d10c      	bne.n	801cbf2 <_printf_float+0x412>
 801cbd8:	e65d      	b.n	801c896 <_printf_float+0xb6>
 801cbda:	2301      	movs	r3, #1
 801cbdc:	465a      	mov	r2, fp
 801cbde:	4631      	mov	r1, r6
 801cbe0:	4628      	mov	r0, r5
 801cbe2:	47b8      	blx	r7
 801cbe4:	3001      	adds	r0, #1
 801cbe6:	f43f ae56 	beq.w	801c896 <_printf_float+0xb6>
 801cbea:	f108 0801 	add.w	r8, r8, #1
 801cbee:	45d0      	cmp	r8, sl
 801cbf0:	dbf3      	blt.n	801cbda <_printf_float+0x3fa>
 801cbf2:	464b      	mov	r3, r9
 801cbf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801cbf8:	e6df      	b.n	801c9ba <_printf_float+0x1da>
 801cbfa:	f04f 0800 	mov.w	r8, #0
 801cbfe:	f104 0b1a 	add.w	fp, r4, #26
 801cc02:	e7f4      	b.n	801cbee <_printf_float+0x40e>
 801cc04:	2301      	movs	r3, #1
 801cc06:	4642      	mov	r2, r8
 801cc08:	e7e1      	b.n	801cbce <_printf_float+0x3ee>
 801cc0a:	2301      	movs	r3, #1
 801cc0c:	464a      	mov	r2, r9
 801cc0e:	4631      	mov	r1, r6
 801cc10:	4628      	mov	r0, r5
 801cc12:	47b8      	blx	r7
 801cc14:	3001      	adds	r0, #1
 801cc16:	f43f ae3e 	beq.w	801c896 <_printf_float+0xb6>
 801cc1a:	f108 0801 	add.w	r8, r8, #1
 801cc1e:	68e3      	ldr	r3, [r4, #12]
 801cc20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cc22:	1a5b      	subs	r3, r3, r1
 801cc24:	4543      	cmp	r3, r8
 801cc26:	dcf0      	bgt.n	801cc0a <_printf_float+0x42a>
 801cc28:	e6fc      	b.n	801ca24 <_printf_float+0x244>
 801cc2a:	f04f 0800 	mov.w	r8, #0
 801cc2e:	f104 0919 	add.w	r9, r4, #25
 801cc32:	e7f4      	b.n	801cc1e <_printf_float+0x43e>

0801cc34 <_printf_common>:
 801cc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc38:	4616      	mov	r6, r2
 801cc3a:	4698      	mov	r8, r3
 801cc3c:	688a      	ldr	r2, [r1, #8]
 801cc3e:	690b      	ldr	r3, [r1, #16]
 801cc40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cc44:	4293      	cmp	r3, r2
 801cc46:	bfb8      	it	lt
 801cc48:	4613      	movlt	r3, r2
 801cc4a:	6033      	str	r3, [r6, #0]
 801cc4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cc50:	4607      	mov	r7, r0
 801cc52:	460c      	mov	r4, r1
 801cc54:	b10a      	cbz	r2, 801cc5a <_printf_common+0x26>
 801cc56:	3301      	adds	r3, #1
 801cc58:	6033      	str	r3, [r6, #0]
 801cc5a:	6823      	ldr	r3, [r4, #0]
 801cc5c:	0699      	lsls	r1, r3, #26
 801cc5e:	bf42      	ittt	mi
 801cc60:	6833      	ldrmi	r3, [r6, #0]
 801cc62:	3302      	addmi	r3, #2
 801cc64:	6033      	strmi	r3, [r6, #0]
 801cc66:	6825      	ldr	r5, [r4, #0]
 801cc68:	f015 0506 	ands.w	r5, r5, #6
 801cc6c:	d106      	bne.n	801cc7c <_printf_common+0x48>
 801cc6e:	f104 0a19 	add.w	sl, r4, #25
 801cc72:	68e3      	ldr	r3, [r4, #12]
 801cc74:	6832      	ldr	r2, [r6, #0]
 801cc76:	1a9b      	subs	r3, r3, r2
 801cc78:	42ab      	cmp	r3, r5
 801cc7a:	dc26      	bgt.n	801ccca <_printf_common+0x96>
 801cc7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cc80:	6822      	ldr	r2, [r4, #0]
 801cc82:	3b00      	subs	r3, #0
 801cc84:	bf18      	it	ne
 801cc86:	2301      	movne	r3, #1
 801cc88:	0692      	lsls	r2, r2, #26
 801cc8a:	d42b      	bmi.n	801cce4 <_printf_common+0xb0>
 801cc8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cc90:	4641      	mov	r1, r8
 801cc92:	4638      	mov	r0, r7
 801cc94:	47c8      	blx	r9
 801cc96:	3001      	adds	r0, #1
 801cc98:	d01e      	beq.n	801ccd8 <_printf_common+0xa4>
 801cc9a:	6823      	ldr	r3, [r4, #0]
 801cc9c:	6922      	ldr	r2, [r4, #16]
 801cc9e:	f003 0306 	and.w	r3, r3, #6
 801cca2:	2b04      	cmp	r3, #4
 801cca4:	bf02      	ittt	eq
 801cca6:	68e5      	ldreq	r5, [r4, #12]
 801cca8:	6833      	ldreq	r3, [r6, #0]
 801ccaa:	1aed      	subeq	r5, r5, r3
 801ccac:	68a3      	ldr	r3, [r4, #8]
 801ccae:	bf0c      	ite	eq
 801ccb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ccb4:	2500      	movne	r5, #0
 801ccb6:	4293      	cmp	r3, r2
 801ccb8:	bfc4      	itt	gt
 801ccba:	1a9b      	subgt	r3, r3, r2
 801ccbc:	18ed      	addgt	r5, r5, r3
 801ccbe:	2600      	movs	r6, #0
 801ccc0:	341a      	adds	r4, #26
 801ccc2:	42b5      	cmp	r5, r6
 801ccc4:	d11a      	bne.n	801ccfc <_printf_common+0xc8>
 801ccc6:	2000      	movs	r0, #0
 801ccc8:	e008      	b.n	801ccdc <_printf_common+0xa8>
 801ccca:	2301      	movs	r3, #1
 801cccc:	4652      	mov	r2, sl
 801ccce:	4641      	mov	r1, r8
 801ccd0:	4638      	mov	r0, r7
 801ccd2:	47c8      	blx	r9
 801ccd4:	3001      	adds	r0, #1
 801ccd6:	d103      	bne.n	801cce0 <_printf_common+0xac>
 801ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 801ccdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cce0:	3501      	adds	r5, #1
 801cce2:	e7c6      	b.n	801cc72 <_printf_common+0x3e>
 801cce4:	18e1      	adds	r1, r4, r3
 801cce6:	1c5a      	adds	r2, r3, #1
 801cce8:	2030      	movs	r0, #48	@ 0x30
 801ccea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ccee:	4422      	add	r2, r4
 801ccf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ccf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ccf8:	3302      	adds	r3, #2
 801ccfa:	e7c7      	b.n	801cc8c <_printf_common+0x58>
 801ccfc:	2301      	movs	r3, #1
 801ccfe:	4622      	mov	r2, r4
 801cd00:	4641      	mov	r1, r8
 801cd02:	4638      	mov	r0, r7
 801cd04:	47c8      	blx	r9
 801cd06:	3001      	adds	r0, #1
 801cd08:	d0e6      	beq.n	801ccd8 <_printf_common+0xa4>
 801cd0a:	3601      	adds	r6, #1
 801cd0c:	e7d9      	b.n	801ccc2 <_printf_common+0x8e>
	...

0801cd10 <_printf_i>:
 801cd10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cd14:	7e0f      	ldrb	r7, [r1, #24]
 801cd16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cd18:	2f78      	cmp	r7, #120	@ 0x78
 801cd1a:	4691      	mov	r9, r2
 801cd1c:	4680      	mov	r8, r0
 801cd1e:	460c      	mov	r4, r1
 801cd20:	469a      	mov	sl, r3
 801cd22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cd26:	d807      	bhi.n	801cd38 <_printf_i+0x28>
 801cd28:	2f62      	cmp	r7, #98	@ 0x62
 801cd2a:	d80a      	bhi.n	801cd42 <_printf_i+0x32>
 801cd2c:	2f00      	cmp	r7, #0
 801cd2e:	f000 80d1 	beq.w	801ced4 <_printf_i+0x1c4>
 801cd32:	2f58      	cmp	r7, #88	@ 0x58
 801cd34:	f000 80b8 	beq.w	801cea8 <_printf_i+0x198>
 801cd38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cd3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cd40:	e03a      	b.n	801cdb8 <_printf_i+0xa8>
 801cd42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cd46:	2b15      	cmp	r3, #21
 801cd48:	d8f6      	bhi.n	801cd38 <_printf_i+0x28>
 801cd4a:	a101      	add	r1, pc, #4	@ (adr r1, 801cd50 <_printf_i+0x40>)
 801cd4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cd50:	0801cda9 	.word	0x0801cda9
 801cd54:	0801cdbd 	.word	0x0801cdbd
 801cd58:	0801cd39 	.word	0x0801cd39
 801cd5c:	0801cd39 	.word	0x0801cd39
 801cd60:	0801cd39 	.word	0x0801cd39
 801cd64:	0801cd39 	.word	0x0801cd39
 801cd68:	0801cdbd 	.word	0x0801cdbd
 801cd6c:	0801cd39 	.word	0x0801cd39
 801cd70:	0801cd39 	.word	0x0801cd39
 801cd74:	0801cd39 	.word	0x0801cd39
 801cd78:	0801cd39 	.word	0x0801cd39
 801cd7c:	0801cebb 	.word	0x0801cebb
 801cd80:	0801cde7 	.word	0x0801cde7
 801cd84:	0801ce75 	.word	0x0801ce75
 801cd88:	0801cd39 	.word	0x0801cd39
 801cd8c:	0801cd39 	.word	0x0801cd39
 801cd90:	0801cedd 	.word	0x0801cedd
 801cd94:	0801cd39 	.word	0x0801cd39
 801cd98:	0801cde7 	.word	0x0801cde7
 801cd9c:	0801cd39 	.word	0x0801cd39
 801cda0:	0801cd39 	.word	0x0801cd39
 801cda4:	0801ce7d 	.word	0x0801ce7d
 801cda8:	6833      	ldr	r3, [r6, #0]
 801cdaa:	1d1a      	adds	r2, r3, #4
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	6032      	str	r2, [r6, #0]
 801cdb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cdb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cdb8:	2301      	movs	r3, #1
 801cdba:	e09c      	b.n	801cef6 <_printf_i+0x1e6>
 801cdbc:	6833      	ldr	r3, [r6, #0]
 801cdbe:	6820      	ldr	r0, [r4, #0]
 801cdc0:	1d19      	adds	r1, r3, #4
 801cdc2:	6031      	str	r1, [r6, #0]
 801cdc4:	0606      	lsls	r6, r0, #24
 801cdc6:	d501      	bpl.n	801cdcc <_printf_i+0xbc>
 801cdc8:	681d      	ldr	r5, [r3, #0]
 801cdca:	e003      	b.n	801cdd4 <_printf_i+0xc4>
 801cdcc:	0645      	lsls	r5, r0, #25
 801cdce:	d5fb      	bpl.n	801cdc8 <_printf_i+0xb8>
 801cdd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cdd4:	2d00      	cmp	r5, #0
 801cdd6:	da03      	bge.n	801cde0 <_printf_i+0xd0>
 801cdd8:	232d      	movs	r3, #45	@ 0x2d
 801cdda:	426d      	negs	r5, r5
 801cddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cde0:	4858      	ldr	r0, [pc, #352]	@ (801cf44 <_printf_i+0x234>)
 801cde2:	230a      	movs	r3, #10
 801cde4:	e011      	b.n	801ce0a <_printf_i+0xfa>
 801cde6:	6821      	ldr	r1, [r4, #0]
 801cde8:	6833      	ldr	r3, [r6, #0]
 801cdea:	0608      	lsls	r0, r1, #24
 801cdec:	f853 5b04 	ldr.w	r5, [r3], #4
 801cdf0:	d402      	bmi.n	801cdf8 <_printf_i+0xe8>
 801cdf2:	0649      	lsls	r1, r1, #25
 801cdf4:	bf48      	it	mi
 801cdf6:	b2ad      	uxthmi	r5, r5
 801cdf8:	2f6f      	cmp	r7, #111	@ 0x6f
 801cdfa:	4852      	ldr	r0, [pc, #328]	@ (801cf44 <_printf_i+0x234>)
 801cdfc:	6033      	str	r3, [r6, #0]
 801cdfe:	bf14      	ite	ne
 801ce00:	230a      	movne	r3, #10
 801ce02:	2308      	moveq	r3, #8
 801ce04:	2100      	movs	r1, #0
 801ce06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ce0a:	6866      	ldr	r6, [r4, #4]
 801ce0c:	60a6      	str	r6, [r4, #8]
 801ce0e:	2e00      	cmp	r6, #0
 801ce10:	db05      	blt.n	801ce1e <_printf_i+0x10e>
 801ce12:	6821      	ldr	r1, [r4, #0]
 801ce14:	432e      	orrs	r6, r5
 801ce16:	f021 0104 	bic.w	r1, r1, #4
 801ce1a:	6021      	str	r1, [r4, #0]
 801ce1c:	d04b      	beq.n	801ceb6 <_printf_i+0x1a6>
 801ce1e:	4616      	mov	r6, r2
 801ce20:	fbb5 f1f3 	udiv	r1, r5, r3
 801ce24:	fb03 5711 	mls	r7, r3, r1, r5
 801ce28:	5dc7      	ldrb	r7, [r0, r7]
 801ce2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ce2e:	462f      	mov	r7, r5
 801ce30:	42bb      	cmp	r3, r7
 801ce32:	460d      	mov	r5, r1
 801ce34:	d9f4      	bls.n	801ce20 <_printf_i+0x110>
 801ce36:	2b08      	cmp	r3, #8
 801ce38:	d10b      	bne.n	801ce52 <_printf_i+0x142>
 801ce3a:	6823      	ldr	r3, [r4, #0]
 801ce3c:	07df      	lsls	r7, r3, #31
 801ce3e:	d508      	bpl.n	801ce52 <_printf_i+0x142>
 801ce40:	6923      	ldr	r3, [r4, #16]
 801ce42:	6861      	ldr	r1, [r4, #4]
 801ce44:	4299      	cmp	r1, r3
 801ce46:	bfde      	ittt	le
 801ce48:	2330      	movle	r3, #48	@ 0x30
 801ce4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ce4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ce52:	1b92      	subs	r2, r2, r6
 801ce54:	6122      	str	r2, [r4, #16]
 801ce56:	f8cd a000 	str.w	sl, [sp]
 801ce5a:	464b      	mov	r3, r9
 801ce5c:	aa03      	add	r2, sp, #12
 801ce5e:	4621      	mov	r1, r4
 801ce60:	4640      	mov	r0, r8
 801ce62:	f7ff fee7 	bl	801cc34 <_printf_common>
 801ce66:	3001      	adds	r0, #1
 801ce68:	d14a      	bne.n	801cf00 <_printf_i+0x1f0>
 801ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ce6e:	b004      	add	sp, #16
 801ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce74:	6823      	ldr	r3, [r4, #0]
 801ce76:	f043 0320 	orr.w	r3, r3, #32
 801ce7a:	6023      	str	r3, [r4, #0]
 801ce7c:	4832      	ldr	r0, [pc, #200]	@ (801cf48 <_printf_i+0x238>)
 801ce7e:	2778      	movs	r7, #120	@ 0x78
 801ce80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ce84:	6823      	ldr	r3, [r4, #0]
 801ce86:	6831      	ldr	r1, [r6, #0]
 801ce88:	061f      	lsls	r7, r3, #24
 801ce8a:	f851 5b04 	ldr.w	r5, [r1], #4
 801ce8e:	d402      	bmi.n	801ce96 <_printf_i+0x186>
 801ce90:	065f      	lsls	r7, r3, #25
 801ce92:	bf48      	it	mi
 801ce94:	b2ad      	uxthmi	r5, r5
 801ce96:	6031      	str	r1, [r6, #0]
 801ce98:	07d9      	lsls	r1, r3, #31
 801ce9a:	bf44      	itt	mi
 801ce9c:	f043 0320 	orrmi.w	r3, r3, #32
 801cea0:	6023      	strmi	r3, [r4, #0]
 801cea2:	b11d      	cbz	r5, 801ceac <_printf_i+0x19c>
 801cea4:	2310      	movs	r3, #16
 801cea6:	e7ad      	b.n	801ce04 <_printf_i+0xf4>
 801cea8:	4826      	ldr	r0, [pc, #152]	@ (801cf44 <_printf_i+0x234>)
 801ceaa:	e7e9      	b.n	801ce80 <_printf_i+0x170>
 801ceac:	6823      	ldr	r3, [r4, #0]
 801ceae:	f023 0320 	bic.w	r3, r3, #32
 801ceb2:	6023      	str	r3, [r4, #0]
 801ceb4:	e7f6      	b.n	801cea4 <_printf_i+0x194>
 801ceb6:	4616      	mov	r6, r2
 801ceb8:	e7bd      	b.n	801ce36 <_printf_i+0x126>
 801ceba:	6833      	ldr	r3, [r6, #0]
 801cebc:	6825      	ldr	r5, [r4, #0]
 801cebe:	6961      	ldr	r1, [r4, #20]
 801cec0:	1d18      	adds	r0, r3, #4
 801cec2:	6030      	str	r0, [r6, #0]
 801cec4:	062e      	lsls	r6, r5, #24
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	d501      	bpl.n	801cece <_printf_i+0x1be>
 801ceca:	6019      	str	r1, [r3, #0]
 801cecc:	e002      	b.n	801ced4 <_printf_i+0x1c4>
 801cece:	0668      	lsls	r0, r5, #25
 801ced0:	d5fb      	bpl.n	801ceca <_printf_i+0x1ba>
 801ced2:	8019      	strh	r1, [r3, #0]
 801ced4:	2300      	movs	r3, #0
 801ced6:	6123      	str	r3, [r4, #16]
 801ced8:	4616      	mov	r6, r2
 801ceda:	e7bc      	b.n	801ce56 <_printf_i+0x146>
 801cedc:	6833      	ldr	r3, [r6, #0]
 801cede:	1d1a      	adds	r2, r3, #4
 801cee0:	6032      	str	r2, [r6, #0]
 801cee2:	681e      	ldr	r6, [r3, #0]
 801cee4:	6862      	ldr	r2, [r4, #4]
 801cee6:	2100      	movs	r1, #0
 801cee8:	4630      	mov	r0, r6
 801ceea:	f7e3 f971 	bl	80001d0 <memchr>
 801ceee:	b108      	cbz	r0, 801cef4 <_printf_i+0x1e4>
 801cef0:	1b80      	subs	r0, r0, r6
 801cef2:	6060      	str	r0, [r4, #4]
 801cef4:	6863      	ldr	r3, [r4, #4]
 801cef6:	6123      	str	r3, [r4, #16]
 801cef8:	2300      	movs	r3, #0
 801cefa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cefe:	e7aa      	b.n	801ce56 <_printf_i+0x146>
 801cf00:	6923      	ldr	r3, [r4, #16]
 801cf02:	4632      	mov	r2, r6
 801cf04:	4649      	mov	r1, r9
 801cf06:	4640      	mov	r0, r8
 801cf08:	47d0      	blx	sl
 801cf0a:	3001      	adds	r0, #1
 801cf0c:	d0ad      	beq.n	801ce6a <_printf_i+0x15a>
 801cf0e:	6823      	ldr	r3, [r4, #0]
 801cf10:	079b      	lsls	r3, r3, #30
 801cf12:	d413      	bmi.n	801cf3c <_printf_i+0x22c>
 801cf14:	68e0      	ldr	r0, [r4, #12]
 801cf16:	9b03      	ldr	r3, [sp, #12]
 801cf18:	4298      	cmp	r0, r3
 801cf1a:	bfb8      	it	lt
 801cf1c:	4618      	movlt	r0, r3
 801cf1e:	e7a6      	b.n	801ce6e <_printf_i+0x15e>
 801cf20:	2301      	movs	r3, #1
 801cf22:	4632      	mov	r2, r6
 801cf24:	4649      	mov	r1, r9
 801cf26:	4640      	mov	r0, r8
 801cf28:	47d0      	blx	sl
 801cf2a:	3001      	adds	r0, #1
 801cf2c:	d09d      	beq.n	801ce6a <_printf_i+0x15a>
 801cf2e:	3501      	adds	r5, #1
 801cf30:	68e3      	ldr	r3, [r4, #12]
 801cf32:	9903      	ldr	r1, [sp, #12]
 801cf34:	1a5b      	subs	r3, r3, r1
 801cf36:	42ab      	cmp	r3, r5
 801cf38:	dcf2      	bgt.n	801cf20 <_printf_i+0x210>
 801cf3a:	e7eb      	b.n	801cf14 <_printf_i+0x204>
 801cf3c:	2500      	movs	r5, #0
 801cf3e:	f104 0619 	add.w	r6, r4, #25
 801cf42:	e7f5      	b.n	801cf30 <_printf_i+0x220>
 801cf44:	080207b6 	.word	0x080207b6
 801cf48:	080207c7 	.word	0x080207c7

0801cf4c <__sflush_r>:
 801cf4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf54:	0716      	lsls	r6, r2, #28
 801cf56:	4605      	mov	r5, r0
 801cf58:	460c      	mov	r4, r1
 801cf5a:	d454      	bmi.n	801d006 <__sflush_r+0xba>
 801cf5c:	684b      	ldr	r3, [r1, #4]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	dc02      	bgt.n	801cf68 <__sflush_r+0x1c>
 801cf62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	dd48      	ble.n	801cffa <__sflush_r+0xae>
 801cf68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cf6a:	2e00      	cmp	r6, #0
 801cf6c:	d045      	beq.n	801cffa <__sflush_r+0xae>
 801cf6e:	2300      	movs	r3, #0
 801cf70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cf74:	682f      	ldr	r7, [r5, #0]
 801cf76:	6a21      	ldr	r1, [r4, #32]
 801cf78:	602b      	str	r3, [r5, #0]
 801cf7a:	d030      	beq.n	801cfde <__sflush_r+0x92>
 801cf7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cf7e:	89a3      	ldrh	r3, [r4, #12]
 801cf80:	0759      	lsls	r1, r3, #29
 801cf82:	d505      	bpl.n	801cf90 <__sflush_r+0x44>
 801cf84:	6863      	ldr	r3, [r4, #4]
 801cf86:	1ad2      	subs	r2, r2, r3
 801cf88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf8a:	b10b      	cbz	r3, 801cf90 <__sflush_r+0x44>
 801cf8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cf8e:	1ad2      	subs	r2, r2, r3
 801cf90:	2300      	movs	r3, #0
 801cf92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cf94:	6a21      	ldr	r1, [r4, #32]
 801cf96:	4628      	mov	r0, r5
 801cf98:	47b0      	blx	r6
 801cf9a:	1c43      	adds	r3, r0, #1
 801cf9c:	89a3      	ldrh	r3, [r4, #12]
 801cf9e:	d106      	bne.n	801cfae <__sflush_r+0x62>
 801cfa0:	6829      	ldr	r1, [r5, #0]
 801cfa2:	291d      	cmp	r1, #29
 801cfa4:	d82b      	bhi.n	801cffe <__sflush_r+0xb2>
 801cfa6:	4a2a      	ldr	r2, [pc, #168]	@ (801d050 <__sflush_r+0x104>)
 801cfa8:	40ca      	lsrs	r2, r1
 801cfaa:	07d6      	lsls	r6, r2, #31
 801cfac:	d527      	bpl.n	801cffe <__sflush_r+0xb2>
 801cfae:	2200      	movs	r2, #0
 801cfb0:	6062      	str	r2, [r4, #4]
 801cfb2:	04d9      	lsls	r1, r3, #19
 801cfb4:	6922      	ldr	r2, [r4, #16]
 801cfb6:	6022      	str	r2, [r4, #0]
 801cfb8:	d504      	bpl.n	801cfc4 <__sflush_r+0x78>
 801cfba:	1c42      	adds	r2, r0, #1
 801cfbc:	d101      	bne.n	801cfc2 <__sflush_r+0x76>
 801cfbe:	682b      	ldr	r3, [r5, #0]
 801cfc0:	b903      	cbnz	r3, 801cfc4 <__sflush_r+0x78>
 801cfc2:	6560      	str	r0, [r4, #84]	@ 0x54
 801cfc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cfc6:	602f      	str	r7, [r5, #0]
 801cfc8:	b1b9      	cbz	r1, 801cffa <__sflush_r+0xae>
 801cfca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cfce:	4299      	cmp	r1, r3
 801cfd0:	d002      	beq.n	801cfd8 <__sflush_r+0x8c>
 801cfd2:	4628      	mov	r0, r5
 801cfd4:	f001 f984 	bl	801e2e0 <_free_r>
 801cfd8:	2300      	movs	r3, #0
 801cfda:	6363      	str	r3, [r4, #52]	@ 0x34
 801cfdc:	e00d      	b.n	801cffa <__sflush_r+0xae>
 801cfde:	2301      	movs	r3, #1
 801cfe0:	4628      	mov	r0, r5
 801cfe2:	47b0      	blx	r6
 801cfe4:	4602      	mov	r2, r0
 801cfe6:	1c50      	adds	r0, r2, #1
 801cfe8:	d1c9      	bne.n	801cf7e <__sflush_r+0x32>
 801cfea:	682b      	ldr	r3, [r5, #0]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d0c6      	beq.n	801cf7e <__sflush_r+0x32>
 801cff0:	2b1d      	cmp	r3, #29
 801cff2:	d001      	beq.n	801cff8 <__sflush_r+0xac>
 801cff4:	2b16      	cmp	r3, #22
 801cff6:	d11e      	bne.n	801d036 <__sflush_r+0xea>
 801cff8:	602f      	str	r7, [r5, #0]
 801cffa:	2000      	movs	r0, #0
 801cffc:	e022      	b.n	801d044 <__sflush_r+0xf8>
 801cffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d002:	b21b      	sxth	r3, r3
 801d004:	e01b      	b.n	801d03e <__sflush_r+0xf2>
 801d006:	690f      	ldr	r7, [r1, #16]
 801d008:	2f00      	cmp	r7, #0
 801d00a:	d0f6      	beq.n	801cffa <__sflush_r+0xae>
 801d00c:	0793      	lsls	r3, r2, #30
 801d00e:	680e      	ldr	r6, [r1, #0]
 801d010:	bf08      	it	eq
 801d012:	694b      	ldreq	r3, [r1, #20]
 801d014:	600f      	str	r7, [r1, #0]
 801d016:	bf18      	it	ne
 801d018:	2300      	movne	r3, #0
 801d01a:	eba6 0807 	sub.w	r8, r6, r7
 801d01e:	608b      	str	r3, [r1, #8]
 801d020:	f1b8 0f00 	cmp.w	r8, #0
 801d024:	dde9      	ble.n	801cffa <__sflush_r+0xae>
 801d026:	6a21      	ldr	r1, [r4, #32]
 801d028:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d02a:	4643      	mov	r3, r8
 801d02c:	463a      	mov	r2, r7
 801d02e:	4628      	mov	r0, r5
 801d030:	47b0      	blx	r6
 801d032:	2800      	cmp	r0, #0
 801d034:	dc08      	bgt.n	801d048 <__sflush_r+0xfc>
 801d036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d03a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d03e:	81a3      	strh	r3, [r4, #12]
 801d040:	f04f 30ff 	mov.w	r0, #4294967295
 801d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d048:	4407      	add	r7, r0
 801d04a:	eba8 0800 	sub.w	r8, r8, r0
 801d04e:	e7e7      	b.n	801d020 <__sflush_r+0xd4>
 801d050:	20400001 	.word	0x20400001

0801d054 <_fflush_r>:
 801d054:	b538      	push	{r3, r4, r5, lr}
 801d056:	690b      	ldr	r3, [r1, #16]
 801d058:	4605      	mov	r5, r0
 801d05a:	460c      	mov	r4, r1
 801d05c:	b913      	cbnz	r3, 801d064 <_fflush_r+0x10>
 801d05e:	2500      	movs	r5, #0
 801d060:	4628      	mov	r0, r5
 801d062:	bd38      	pop	{r3, r4, r5, pc}
 801d064:	b118      	cbz	r0, 801d06e <_fflush_r+0x1a>
 801d066:	6a03      	ldr	r3, [r0, #32]
 801d068:	b90b      	cbnz	r3, 801d06e <_fflush_r+0x1a>
 801d06a:	f000 f8bb 	bl	801d1e4 <__sinit>
 801d06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d072:	2b00      	cmp	r3, #0
 801d074:	d0f3      	beq.n	801d05e <_fflush_r+0xa>
 801d076:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d078:	07d0      	lsls	r0, r2, #31
 801d07a:	d404      	bmi.n	801d086 <_fflush_r+0x32>
 801d07c:	0599      	lsls	r1, r3, #22
 801d07e:	d402      	bmi.n	801d086 <_fflush_r+0x32>
 801d080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d082:	f000 fac2 	bl	801d60a <__retarget_lock_acquire_recursive>
 801d086:	4628      	mov	r0, r5
 801d088:	4621      	mov	r1, r4
 801d08a:	f7ff ff5f 	bl	801cf4c <__sflush_r>
 801d08e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d090:	07da      	lsls	r2, r3, #31
 801d092:	4605      	mov	r5, r0
 801d094:	d4e4      	bmi.n	801d060 <_fflush_r+0xc>
 801d096:	89a3      	ldrh	r3, [r4, #12]
 801d098:	059b      	lsls	r3, r3, #22
 801d09a:	d4e1      	bmi.n	801d060 <_fflush_r+0xc>
 801d09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d09e:	f000 fab5 	bl	801d60c <__retarget_lock_release_recursive>
 801d0a2:	e7dd      	b.n	801d060 <_fflush_r+0xc>

0801d0a4 <fflush>:
 801d0a4:	4601      	mov	r1, r0
 801d0a6:	b920      	cbnz	r0, 801d0b2 <fflush+0xe>
 801d0a8:	4a04      	ldr	r2, [pc, #16]	@ (801d0bc <fflush+0x18>)
 801d0aa:	4905      	ldr	r1, [pc, #20]	@ (801d0c0 <fflush+0x1c>)
 801d0ac:	4805      	ldr	r0, [pc, #20]	@ (801d0c4 <fflush+0x20>)
 801d0ae:	f000 b8b1 	b.w	801d214 <_fwalk_sglue>
 801d0b2:	4b05      	ldr	r3, [pc, #20]	@ (801d0c8 <fflush+0x24>)
 801d0b4:	6818      	ldr	r0, [r3, #0]
 801d0b6:	f7ff bfcd 	b.w	801d054 <_fflush_r>
 801d0ba:	bf00      	nop
 801d0bc:	20000020 	.word	0x20000020
 801d0c0:	0801d055 	.word	0x0801d055
 801d0c4:	20000030 	.word	0x20000030
 801d0c8:	2000002c 	.word	0x2000002c

0801d0cc <std>:
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	b510      	push	{r4, lr}
 801d0d0:	4604      	mov	r4, r0
 801d0d2:	e9c0 3300 	strd	r3, r3, [r0]
 801d0d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d0da:	6083      	str	r3, [r0, #8]
 801d0dc:	8181      	strh	r1, [r0, #12]
 801d0de:	6643      	str	r3, [r0, #100]	@ 0x64
 801d0e0:	81c2      	strh	r2, [r0, #14]
 801d0e2:	6183      	str	r3, [r0, #24]
 801d0e4:	4619      	mov	r1, r3
 801d0e6:	2208      	movs	r2, #8
 801d0e8:	305c      	adds	r0, #92	@ 0x5c
 801d0ea:	f000 fa11 	bl	801d510 <memset>
 801d0ee:	4b0d      	ldr	r3, [pc, #52]	@ (801d124 <std+0x58>)
 801d0f0:	6263      	str	r3, [r4, #36]	@ 0x24
 801d0f2:	4b0d      	ldr	r3, [pc, #52]	@ (801d128 <std+0x5c>)
 801d0f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d0f6:	4b0d      	ldr	r3, [pc, #52]	@ (801d12c <std+0x60>)
 801d0f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d0fa:	4b0d      	ldr	r3, [pc, #52]	@ (801d130 <std+0x64>)
 801d0fc:	6323      	str	r3, [r4, #48]	@ 0x30
 801d0fe:	4b0d      	ldr	r3, [pc, #52]	@ (801d134 <std+0x68>)
 801d100:	6224      	str	r4, [r4, #32]
 801d102:	429c      	cmp	r4, r3
 801d104:	d006      	beq.n	801d114 <std+0x48>
 801d106:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d10a:	4294      	cmp	r4, r2
 801d10c:	d002      	beq.n	801d114 <std+0x48>
 801d10e:	33d0      	adds	r3, #208	@ 0xd0
 801d110:	429c      	cmp	r4, r3
 801d112:	d105      	bne.n	801d120 <std+0x54>
 801d114:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d11c:	f000 ba74 	b.w	801d608 <__retarget_lock_init_recursive>
 801d120:	bd10      	pop	{r4, pc}
 801d122:	bf00      	nop
 801d124:	0801d341 	.word	0x0801d341
 801d128:	0801d363 	.word	0x0801d363
 801d12c:	0801d39b 	.word	0x0801d39b
 801d130:	0801d3bf 	.word	0x0801d3bf
 801d134:	200017c0 	.word	0x200017c0

0801d138 <stdio_exit_handler>:
 801d138:	4a02      	ldr	r2, [pc, #8]	@ (801d144 <stdio_exit_handler+0xc>)
 801d13a:	4903      	ldr	r1, [pc, #12]	@ (801d148 <stdio_exit_handler+0x10>)
 801d13c:	4803      	ldr	r0, [pc, #12]	@ (801d14c <stdio_exit_handler+0x14>)
 801d13e:	f000 b869 	b.w	801d214 <_fwalk_sglue>
 801d142:	bf00      	nop
 801d144:	20000020 	.word	0x20000020
 801d148:	0801d055 	.word	0x0801d055
 801d14c:	20000030 	.word	0x20000030

0801d150 <cleanup_stdio>:
 801d150:	6841      	ldr	r1, [r0, #4]
 801d152:	4b0c      	ldr	r3, [pc, #48]	@ (801d184 <cleanup_stdio+0x34>)
 801d154:	4299      	cmp	r1, r3
 801d156:	b510      	push	{r4, lr}
 801d158:	4604      	mov	r4, r0
 801d15a:	d001      	beq.n	801d160 <cleanup_stdio+0x10>
 801d15c:	f7ff ff7a 	bl	801d054 <_fflush_r>
 801d160:	68a1      	ldr	r1, [r4, #8]
 801d162:	4b09      	ldr	r3, [pc, #36]	@ (801d188 <cleanup_stdio+0x38>)
 801d164:	4299      	cmp	r1, r3
 801d166:	d002      	beq.n	801d16e <cleanup_stdio+0x1e>
 801d168:	4620      	mov	r0, r4
 801d16a:	f7ff ff73 	bl	801d054 <_fflush_r>
 801d16e:	68e1      	ldr	r1, [r4, #12]
 801d170:	4b06      	ldr	r3, [pc, #24]	@ (801d18c <cleanup_stdio+0x3c>)
 801d172:	4299      	cmp	r1, r3
 801d174:	d004      	beq.n	801d180 <cleanup_stdio+0x30>
 801d176:	4620      	mov	r0, r4
 801d178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d17c:	f7ff bf6a 	b.w	801d054 <_fflush_r>
 801d180:	bd10      	pop	{r4, pc}
 801d182:	bf00      	nop
 801d184:	200017c0 	.word	0x200017c0
 801d188:	20001828 	.word	0x20001828
 801d18c:	20001890 	.word	0x20001890

0801d190 <global_stdio_init.part.0>:
 801d190:	b510      	push	{r4, lr}
 801d192:	4b0b      	ldr	r3, [pc, #44]	@ (801d1c0 <global_stdio_init.part.0+0x30>)
 801d194:	4c0b      	ldr	r4, [pc, #44]	@ (801d1c4 <global_stdio_init.part.0+0x34>)
 801d196:	4a0c      	ldr	r2, [pc, #48]	@ (801d1c8 <global_stdio_init.part.0+0x38>)
 801d198:	601a      	str	r2, [r3, #0]
 801d19a:	4620      	mov	r0, r4
 801d19c:	2200      	movs	r2, #0
 801d19e:	2104      	movs	r1, #4
 801d1a0:	f7ff ff94 	bl	801d0cc <std>
 801d1a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d1a8:	2201      	movs	r2, #1
 801d1aa:	2109      	movs	r1, #9
 801d1ac:	f7ff ff8e 	bl	801d0cc <std>
 801d1b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d1b4:	2202      	movs	r2, #2
 801d1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1ba:	2112      	movs	r1, #18
 801d1bc:	f7ff bf86 	b.w	801d0cc <std>
 801d1c0:	200018f8 	.word	0x200018f8
 801d1c4:	200017c0 	.word	0x200017c0
 801d1c8:	0801d139 	.word	0x0801d139

0801d1cc <__sfp_lock_acquire>:
 801d1cc:	4801      	ldr	r0, [pc, #4]	@ (801d1d4 <__sfp_lock_acquire+0x8>)
 801d1ce:	f000 ba1c 	b.w	801d60a <__retarget_lock_acquire_recursive>
 801d1d2:	bf00      	nop
 801d1d4:	20001901 	.word	0x20001901

0801d1d8 <__sfp_lock_release>:
 801d1d8:	4801      	ldr	r0, [pc, #4]	@ (801d1e0 <__sfp_lock_release+0x8>)
 801d1da:	f000 ba17 	b.w	801d60c <__retarget_lock_release_recursive>
 801d1de:	bf00      	nop
 801d1e0:	20001901 	.word	0x20001901

0801d1e4 <__sinit>:
 801d1e4:	b510      	push	{r4, lr}
 801d1e6:	4604      	mov	r4, r0
 801d1e8:	f7ff fff0 	bl	801d1cc <__sfp_lock_acquire>
 801d1ec:	6a23      	ldr	r3, [r4, #32]
 801d1ee:	b11b      	cbz	r3, 801d1f8 <__sinit+0x14>
 801d1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1f4:	f7ff bff0 	b.w	801d1d8 <__sfp_lock_release>
 801d1f8:	4b04      	ldr	r3, [pc, #16]	@ (801d20c <__sinit+0x28>)
 801d1fa:	6223      	str	r3, [r4, #32]
 801d1fc:	4b04      	ldr	r3, [pc, #16]	@ (801d210 <__sinit+0x2c>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	2b00      	cmp	r3, #0
 801d202:	d1f5      	bne.n	801d1f0 <__sinit+0xc>
 801d204:	f7ff ffc4 	bl	801d190 <global_stdio_init.part.0>
 801d208:	e7f2      	b.n	801d1f0 <__sinit+0xc>
 801d20a:	bf00      	nop
 801d20c:	0801d151 	.word	0x0801d151
 801d210:	200018f8 	.word	0x200018f8

0801d214 <_fwalk_sglue>:
 801d214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d218:	4607      	mov	r7, r0
 801d21a:	4688      	mov	r8, r1
 801d21c:	4614      	mov	r4, r2
 801d21e:	2600      	movs	r6, #0
 801d220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d224:	f1b9 0901 	subs.w	r9, r9, #1
 801d228:	d505      	bpl.n	801d236 <_fwalk_sglue+0x22>
 801d22a:	6824      	ldr	r4, [r4, #0]
 801d22c:	2c00      	cmp	r4, #0
 801d22e:	d1f7      	bne.n	801d220 <_fwalk_sglue+0xc>
 801d230:	4630      	mov	r0, r6
 801d232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d236:	89ab      	ldrh	r3, [r5, #12]
 801d238:	2b01      	cmp	r3, #1
 801d23a:	d907      	bls.n	801d24c <_fwalk_sglue+0x38>
 801d23c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d240:	3301      	adds	r3, #1
 801d242:	d003      	beq.n	801d24c <_fwalk_sglue+0x38>
 801d244:	4629      	mov	r1, r5
 801d246:	4638      	mov	r0, r7
 801d248:	47c0      	blx	r8
 801d24a:	4306      	orrs	r6, r0
 801d24c:	3568      	adds	r5, #104	@ 0x68
 801d24e:	e7e9      	b.n	801d224 <_fwalk_sglue+0x10>

0801d250 <iprintf>:
 801d250:	b40f      	push	{r0, r1, r2, r3}
 801d252:	b507      	push	{r0, r1, r2, lr}
 801d254:	4906      	ldr	r1, [pc, #24]	@ (801d270 <iprintf+0x20>)
 801d256:	ab04      	add	r3, sp, #16
 801d258:	6808      	ldr	r0, [r1, #0]
 801d25a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d25e:	6881      	ldr	r1, [r0, #8]
 801d260:	9301      	str	r3, [sp, #4]
 801d262:	f001 fce1 	bl	801ec28 <_vfiprintf_r>
 801d266:	b003      	add	sp, #12
 801d268:	f85d eb04 	ldr.w	lr, [sp], #4
 801d26c:	b004      	add	sp, #16
 801d26e:	4770      	bx	lr
 801d270:	2000002c 	.word	0x2000002c

0801d274 <putchar>:
 801d274:	4b02      	ldr	r3, [pc, #8]	@ (801d280 <putchar+0xc>)
 801d276:	4601      	mov	r1, r0
 801d278:	6818      	ldr	r0, [r3, #0]
 801d27a:	6882      	ldr	r2, [r0, #8]
 801d27c:	f001 be4e 	b.w	801ef1c <_putc_r>
 801d280:	2000002c 	.word	0x2000002c

0801d284 <_puts_r>:
 801d284:	6a03      	ldr	r3, [r0, #32]
 801d286:	b570      	push	{r4, r5, r6, lr}
 801d288:	6884      	ldr	r4, [r0, #8]
 801d28a:	4605      	mov	r5, r0
 801d28c:	460e      	mov	r6, r1
 801d28e:	b90b      	cbnz	r3, 801d294 <_puts_r+0x10>
 801d290:	f7ff ffa8 	bl	801d1e4 <__sinit>
 801d294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d296:	07db      	lsls	r3, r3, #31
 801d298:	d405      	bmi.n	801d2a6 <_puts_r+0x22>
 801d29a:	89a3      	ldrh	r3, [r4, #12]
 801d29c:	0598      	lsls	r0, r3, #22
 801d29e:	d402      	bmi.n	801d2a6 <_puts_r+0x22>
 801d2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2a2:	f000 f9b2 	bl	801d60a <__retarget_lock_acquire_recursive>
 801d2a6:	89a3      	ldrh	r3, [r4, #12]
 801d2a8:	0719      	lsls	r1, r3, #28
 801d2aa:	d502      	bpl.n	801d2b2 <_puts_r+0x2e>
 801d2ac:	6923      	ldr	r3, [r4, #16]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d135      	bne.n	801d31e <_puts_r+0x9a>
 801d2b2:	4621      	mov	r1, r4
 801d2b4:	4628      	mov	r0, r5
 801d2b6:	f000 f8c5 	bl	801d444 <__swsetup_r>
 801d2ba:	b380      	cbz	r0, 801d31e <_puts_r+0x9a>
 801d2bc:	f04f 35ff 	mov.w	r5, #4294967295
 801d2c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d2c2:	07da      	lsls	r2, r3, #31
 801d2c4:	d405      	bmi.n	801d2d2 <_puts_r+0x4e>
 801d2c6:	89a3      	ldrh	r3, [r4, #12]
 801d2c8:	059b      	lsls	r3, r3, #22
 801d2ca:	d402      	bmi.n	801d2d2 <_puts_r+0x4e>
 801d2cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2ce:	f000 f99d 	bl	801d60c <__retarget_lock_release_recursive>
 801d2d2:	4628      	mov	r0, r5
 801d2d4:	bd70      	pop	{r4, r5, r6, pc}
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	da04      	bge.n	801d2e4 <_puts_r+0x60>
 801d2da:	69a2      	ldr	r2, [r4, #24]
 801d2dc:	429a      	cmp	r2, r3
 801d2de:	dc17      	bgt.n	801d310 <_puts_r+0x8c>
 801d2e0:	290a      	cmp	r1, #10
 801d2e2:	d015      	beq.n	801d310 <_puts_r+0x8c>
 801d2e4:	6823      	ldr	r3, [r4, #0]
 801d2e6:	1c5a      	adds	r2, r3, #1
 801d2e8:	6022      	str	r2, [r4, #0]
 801d2ea:	7019      	strb	r1, [r3, #0]
 801d2ec:	68a3      	ldr	r3, [r4, #8]
 801d2ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d2f2:	3b01      	subs	r3, #1
 801d2f4:	60a3      	str	r3, [r4, #8]
 801d2f6:	2900      	cmp	r1, #0
 801d2f8:	d1ed      	bne.n	801d2d6 <_puts_r+0x52>
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	da11      	bge.n	801d322 <_puts_r+0x9e>
 801d2fe:	4622      	mov	r2, r4
 801d300:	210a      	movs	r1, #10
 801d302:	4628      	mov	r0, r5
 801d304:	f000 f85f 	bl	801d3c6 <__swbuf_r>
 801d308:	3001      	adds	r0, #1
 801d30a:	d0d7      	beq.n	801d2bc <_puts_r+0x38>
 801d30c:	250a      	movs	r5, #10
 801d30e:	e7d7      	b.n	801d2c0 <_puts_r+0x3c>
 801d310:	4622      	mov	r2, r4
 801d312:	4628      	mov	r0, r5
 801d314:	f000 f857 	bl	801d3c6 <__swbuf_r>
 801d318:	3001      	adds	r0, #1
 801d31a:	d1e7      	bne.n	801d2ec <_puts_r+0x68>
 801d31c:	e7ce      	b.n	801d2bc <_puts_r+0x38>
 801d31e:	3e01      	subs	r6, #1
 801d320:	e7e4      	b.n	801d2ec <_puts_r+0x68>
 801d322:	6823      	ldr	r3, [r4, #0]
 801d324:	1c5a      	adds	r2, r3, #1
 801d326:	6022      	str	r2, [r4, #0]
 801d328:	220a      	movs	r2, #10
 801d32a:	701a      	strb	r2, [r3, #0]
 801d32c:	e7ee      	b.n	801d30c <_puts_r+0x88>
	...

0801d330 <puts>:
 801d330:	4b02      	ldr	r3, [pc, #8]	@ (801d33c <puts+0xc>)
 801d332:	4601      	mov	r1, r0
 801d334:	6818      	ldr	r0, [r3, #0]
 801d336:	f7ff bfa5 	b.w	801d284 <_puts_r>
 801d33a:	bf00      	nop
 801d33c:	2000002c 	.word	0x2000002c

0801d340 <__sread>:
 801d340:	b510      	push	{r4, lr}
 801d342:	460c      	mov	r4, r1
 801d344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d348:	f000 f910 	bl	801d56c <_read_r>
 801d34c:	2800      	cmp	r0, #0
 801d34e:	bfab      	itete	ge
 801d350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d352:	89a3      	ldrhlt	r3, [r4, #12]
 801d354:	181b      	addge	r3, r3, r0
 801d356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d35a:	bfac      	ite	ge
 801d35c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d35e:	81a3      	strhlt	r3, [r4, #12]
 801d360:	bd10      	pop	{r4, pc}

0801d362 <__swrite>:
 801d362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d366:	461f      	mov	r7, r3
 801d368:	898b      	ldrh	r3, [r1, #12]
 801d36a:	05db      	lsls	r3, r3, #23
 801d36c:	4605      	mov	r5, r0
 801d36e:	460c      	mov	r4, r1
 801d370:	4616      	mov	r6, r2
 801d372:	d505      	bpl.n	801d380 <__swrite+0x1e>
 801d374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d378:	2302      	movs	r3, #2
 801d37a:	2200      	movs	r2, #0
 801d37c:	f000 f8e4 	bl	801d548 <_lseek_r>
 801d380:	89a3      	ldrh	r3, [r4, #12]
 801d382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d38a:	81a3      	strh	r3, [r4, #12]
 801d38c:	4632      	mov	r2, r6
 801d38e:	463b      	mov	r3, r7
 801d390:	4628      	mov	r0, r5
 801d392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d396:	f000 b8fb 	b.w	801d590 <_write_r>

0801d39a <__sseek>:
 801d39a:	b510      	push	{r4, lr}
 801d39c:	460c      	mov	r4, r1
 801d39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3a2:	f000 f8d1 	bl	801d548 <_lseek_r>
 801d3a6:	1c43      	adds	r3, r0, #1
 801d3a8:	89a3      	ldrh	r3, [r4, #12]
 801d3aa:	bf15      	itete	ne
 801d3ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d3ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d3b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d3b6:	81a3      	strheq	r3, [r4, #12]
 801d3b8:	bf18      	it	ne
 801d3ba:	81a3      	strhne	r3, [r4, #12]
 801d3bc:	bd10      	pop	{r4, pc}

0801d3be <__sclose>:
 801d3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3c2:	f000 b8b1 	b.w	801d528 <_close_r>

0801d3c6 <__swbuf_r>:
 801d3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3c8:	460e      	mov	r6, r1
 801d3ca:	4614      	mov	r4, r2
 801d3cc:	4605      	mov	r5, r0
 801d3ce:	b118      	cbz	r0, 801d3d8 <__swbuf_r+0x12>
 801d3d0:	6a03      	ldr	r3, [r0, #32]
 801d3d2:	b90b      	cbnz	r3, 801d3d8 <__swbuf_r+0x12>
 801d3d4:	f7ff ff06 	bl	801d1e4 <__sinit>
 801d3d8:	69a3      	ldr	r3, [r4, #24]
 801d3da:	60a3      	str	r3, [r4, #8]
 801d3dc:	89a3      	ldrh	r3, [r4, #12]
 801d3de:	071a      	lsls	r2, r3, #28
 801d3e0:	d501      	bpl.n	801d3e6 <__swbuf_r+0x20>
 801d3e2:	6923      	ldr	r3, [r4, #16]
 801d3e4:	b943      	cbnz	r3, 801d3f8 <__swbuf_r+0x32>
 801d3e6:	4621      	mov	r1, r4
 801d3e8:	4628      	mov	r0, r5
 801d3ea:	f000 f82b 	bl	801d444 <__swsetup_r>
 801d3ee:	b118      	cbz	r0, 801d3f8 <__swbuf_r+0x32>
 801d3f0:	f04f 37ff 	mov.w	r7, #4294967295
 801d3f4:	4638      	mov	r0, r7
 801d3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3f8:	6823      	ldr	r3, [r4, #0]
 801d3fa:	6922      	ldr	r2, [r4, #16]
 801d3fc:	1a98      	subs	r0, r3, r2
 801d3fe:	6963      	ldr	r3, [r4, #20]
 801d400:	b2f6      	uxtb	r6, r6
 801d402:	4283      	cmp	r3, r0
 801d404:	4637      	mov	r7, r6
 801d406:	dc05      	bgt.n	801d414 <__swbuf_r+0x4e>
 801d408:	4621      	mov	r1, r4
 801d40a:	4628      	mov	r0, r5
 801d40c:	f7ff fe22 	bl	801d054 <_fflush_r>
 801d410:	2800      	cmp	r0, #0
 801d412:	d1ed      	bne.n	801d3f0 <__swbuf_r+0x2a>
 801d414:	68a3      	ldr	r3, [r4, #8]
 801d416:	3b01      	subs	r3, #1
 801d418:	60a3      	str	r3, [r4, #8]
 801d41a:	6823      	ldr	r3, [r4, #0]
 801d41c:	1c5a      	adds	r2, r3, #1
 801d41e:	6022      	str	r2, [r4, #0]
 801d420:	701e      	strb	r6, [r3, #0]
 801d422:	6962      	ldr	r2, [r4, #20]
 801d424:	1c43      	adds	r3, r0, #1
 801d426:	429a      	cmp	r2, r3
 801d428:	d004      	beq.n	801d434 <__swbuf_r+0x6e>
 801d42a:	89a3      	ldrh	r3, [r4, #12]
 801d42c:	07db      	lsls	r3, r3, #31
 801d42e:	d5e1      	bpl.n	801d3f4 <__swbuf_r+0x2e>
 801d430:	2e0a      	cmp	r6, #10
 801d432:	d1df      	bne.n	801d3f4 <__swbuf_r+0x2e>
 801d434:	4621      	mov	r1, r4
 801d436:	4628      	mov	r0, r5
 801d438:	f7ff fe0c 	bl	801d054 <_fflush_r>
 801d43c:	2800      	cmp	r0, #0
 801d43e:	d0d9      	beq.n	801d3f4 <__swbuf_r+0x2e>
 801d440:	e7d6      	b.n	801d3f0 <__swbuf_r+0x2a>
	...

0801d444 <__swsetup_r>:
 801d444:	b538      	push	{r3, r4, r5, lr}
 801d446:	4b29      	ldr	r3, [pc, #164]	@ (801d4ec <__swsetup_r+0xa8>)
 801d448:	4605      	mov	r5, r0
 801d44a:	6818      	ldr	r0, [r3, #0]
 801d44c:	460c      	mov	r4, r1
 801d44e:	b118      	cbz	r0, 801d458 <__swsetup_r+0x14>
 801d450:	6a03      	ldr	r3, [r0, #32]
 801d452:	b90b      	cbnz	r3, 801d458 <__swsetup_r+0x14>
 801d454:	f7ff fec6 	bl	801d1e4 <__sinit>
 801d458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d45c:	0719      	lsls	r1, r3, #28
 801d45e:	d422      	bmi.n	801d4a6 <__swsetup_r+0x62>
 801d460:	06da      	lsls	r2, r3, #27
 801d462:	d407      	bmi.n	801d474 <__swsetup_r+0x30>
 801d464:	2209      	movs	r2, #9
 801d466:	602a      	str	r2, [r5, #0]
 801d468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d46c:	81a3      	strh	r3, [r4, #12]
 801d46e:	f04f 30ff 	mov.w	r0, #4294967295
 801d472:	e033      	b.n	801d4dc <__swsetup_r+0x98>
 801d474:	0758      	lsls	r0, r3, #29
 801d476:	d512      	bpl.n	801d49e <__swsetup_r+0x5a>
 801d478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d47a:	b141      	cbz	r1, 801d48e <__swsetup_r+0x4a>
 801d47c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d480:	4299      	cmp	r1, r3
 801d482:	d002      	beq.n	801d48a <__swsetup_r+0x46>
 801d484:	4628      	mov	r0, r5
 801d486:	f000 ff2b 	bl	801e2e0 <_free_r>
 801d48a:	2300      	movs	r3, #0
 801d48c:	6363      	str	r3, [r4, #52]	@ 0x34
 801d48e:	89a3      	ldrh	r3, [r4, #12]
 801d490:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d494:	81a3      	strh	r3, [r4, #12]
 801d496:	2300      	movs	r3, #0
 801d498:	6063      	str	r3, [r4, #4]
 801d49a:	6923      	ldr	r3, [r4, #16]
 801d49c:	6023      	str	r3, [r4, #0]
 801d49e:	89a3      	ldrh	r3, [r4, #12]
 801d4a0:	f043 0308 	orr.w	r3, r3, #8
 801d4a4:	81a3      	strh	r3, [r4, #12]
 801d4a6:	6923      	ldr	r3, [r4, #16]
 801d4a8:	b94b      	cbnz	r3, 801d4be <__swsetup_r+0x7a>
 801d4aa:	89a3      	ldrh	r3, [r4, #12]
 801d4ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d4b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d4b4:	d003      	beq.n	801d4be <__swsetup_r+0x7a>
 801d4b6:	4621      	mov	r1, r4
 801d4b8:	4628      	mov	r0, r5
 801d4ba:	f001 fcf3 	bl	801eea4 <__smakebuf_r>
 801d4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4c2:	f013 0201 	ands.w	r2, r3, #1
 801d4c6:	d00a      	beq.n	801d4de <__swsetup_r+0x9a>
 801d4c8:	2200      	movs	r2, #0
 801d4ca:	60a2      	str	r2, [r4, #8]
 801d4cc:	6962      	ldr	r2, [r4, #20]
 801d4ce:	4252      	negs	r2, r2
 801d4d0:	61a2      	str	r2, [r4, #24]
 801d4d2:	6922      	ldr	r2, [r4, #16]
 801d4d4:	b942      	cbnz	r2, 801d4e8 <__swsetup_r+0xa4>
 801d4d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d4da:	d1c5      	bne.n	801d468 <__swsetup_r+0x24>
 801d4dc:	bd38      	pop	{r3, r4, r5, pc}
 801d4de:	0799      	lsls	r1, r3, #30
 801d4e0:	bf58      	it	pl
 801d4e2:	6962      	ldrpl	r2, [r4, #20]
 801d4e4:	60a2      	str	r2, [r4, #8]
 801d4e6:	e7f4      	b.n	801d4d2 <__swsetup_r+0x8e>
 801d4e8:	2000      	movs	r0, #0
 801d4ea:	e7f7      	b.n	801d4dc <__swsetup_r+0x98>
 801d4ec:	2000002c 	.word	0x2000002c

0801d4f0 <memcmp>:
 801d4f0:	b510      	push	{r4, lr}
 801d4f2:	3901      	subs	r1, #1
 801d4f4:	4402      	add	r2, r0
 801d4f6:	4290      	cmp	r0, r2
 801d4f8:	d101      	bne.n	801d4fe <memcmp+0xe>
 801d4fa:	2000      	movs	r0, #0
 801d4fc:	e005      	b.n	801d50a <memcmp+0x1a>
 801d4fe:	7803      	ldrb	r3, [r0, #0]
 801d500:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d504:	42a3      	cmp	r3, r4
 801d506:	d001      	beq.n	801d50c <memcmp+0x1c>
 801d508:	1b18      	subs	r0, r3, r4
 801d50a:	bd10      	pop	{r4, pc}
 801d50c:	3001      	adds	r0, #1
 801d50e:	e7f2      	b.n	801d4f6 <memcmp+0x6>

0801d510 <memset>:
 801d510:	4402      	add	r2, r0
 801d512:	4603      	mov	r3, r0
 801d514:	4293      	cmp	r3, r2
 801d516:	d100      	bne.n	801d51a <memset+0xa>
 801d518:	4770      	bx	lr
 801d51a:	f803 1b01 	strb.w	r1, [r3], #1
 801d51e:	e7f9      	b.n	801d514 <memset+0x4>

0801d520 <_localeconv_r>:
 801d520:	4800      	ldr	r0, [pc, #0]	@ (801d524 <_localeconv_r+0x4>)
 801d522:	4770      	bx	lr
 801d524:	2000016c 	.word	0x2000016c

0801d528 <_close_r>:
 801d528:	b538      	push	{r3, r4, r5, lr}
 801d52a:	4d06      	ldr	r5, [pc, #24]	@ (801d544 <_close_r+0x1c>)
 801d52c:	2300      	movs	r3, #0
 801d52e:	4604      	mov	r4, r0
 801d530:	4608      	mov	r0, r1
 801d532:	602b      	str	r3, [r5, #0]
 801d534:	f7e4 fca6 	bl	8001e84 <_close>
 801d538:	1c43      	adds	r3, r0, #1
 801d53a:	d102      	bne.n	801d542 <_close_r+0x1a>
 801d53c:	682b      	ldr	r3, [r5, #0]
 801d53e:	b103      	cbz	r3, 801d542 <_close_r+0x1a>
 801d540:	6023      	str	r3, [r4, #0]
 801d542:	bd38      	pop	{r3, r4, r5, pc}
 801d544:	200018fc 	.word	0x200018fc

0801d548 <_lseek_r>:
 801d548:	b538      	push	{r3, r4, r5, lr}
 801d54a:	4d07      	ldr	r5, [pc, #28]	@ (801d568 <_lseek_r+0x20>)
 801d54c:	4604      	mov	r4, r0
 801d54e:	4608      	mov	r0, r1
 801d550:	4611      	mov	r1, r2
 801d552:	2200      	movs	r2, #0
 801d554:	602a      	str	r2, [r5, #0]
 801d556:	461a      	mov	r2, r3
 801d558:	f7e4 fcbb 	bl	8001ed2 <_lseek>
 801d55c:	1c43      	adds	r3, r0, #1
 801d55e:	d102      	bne.n	801d566 <_lseek_r+0x1e>
 801d560:	682b      	ldr	r3, [r5, #0]
 801d562:	b103      	cbz	r3, 801d566 <_lseek_r+0x1e>
 801d564:	6023      	str	r3, [r4, #0]
 801d566:	bd38      	pop	{r3, r4, r5, pc}
 801d568:	200018fc 	.word	0x200018fc

0801d56c <_read_r>:
 801d56c:	b538      	push	{r3, r4, r5, lr}
 801d56e:	4d07      	ldr	r5, [pc, #28]	@ (801d58c <_read_r+0x20>)
 801d570:	4604      	mov	r4, r0
 801d572:	4608      	mov	r0, r1
 801d574:	4611      	mov	r1, r2
 801d576:	2200      	movs	r2, #0
 801d578:	602a      	str	r2, [r5, #0]
 801d57a:	461a      	mov	r2, r3
 801d57c:	f7e4 fc49 	bl	8001e12 <_read>
 801d580:	1c43      	adds	r3, r0, #1
 801d582:	d102      	bne.n	801d58a <_read_r+0x1e>
 801d584:	682b      	ldr	r3, [r5, #0]
 801d586:	b103      	cbz	r3, 801d58a <_read_r+0x1e>
 801d588:	6023      	str	r3, [r4, #0]
 801d58a:	bd38      	pop	{r3, r4, r5, pc}
 801d58c:	200018fc 	.word	0x200018fc

0801d590 <_write_r>:
 801d590:	b538      	push	{r3, r4, r5, lr}
 801d592:	4d07      	ldr	r5, [pc, #28]	@ (801d5b0 <_write_r+0x20>)
 801d594:	4604      	mov	r4, r0
 801d596:	4608      	mov	r0, r1
 801d598:	4611      	mov	r1, r2
 801d59a:	2200      	movs	r2, #0
 801d59c:	602a      	str	r2, [r5, #0]
 801d59e:	461a      	mov	r2, r3
 801d5a0:	f7e4 fc54 	bl	8001e4c <_write>
 801d5a4:	1c43      	adds	r3, r0, #1
 801d5a6:	d102      	bne.n	801d5ae <_write_r+0x1e>
 801d5a8:	682b      	ldr	r3, [r5, #0]
 801d5aa:	b103      	cbz	r3, 801d5ae <_write_r+0x1e>
 801d5ac:	6023      	str	r3, [r4, #0]
 801d5ae:	bd38      	pop	{r3, r4, r5, pc}
 801d5b0:	200018fc 	.word	0x200018fc

0801d5b4 <__errno>:
 801d5b4:	4b01      	ldr	r3, [pc, #4]	@ (801d5bc <__errno+0x8>)
 801d5b6:	6818      	ldr	r0, [r3, #0]
 801d5b8:	4770      	bx	lr
 801d5ba:	bf00      	nop
 801d5bc:	2000002c 	.word	0x2000002c

0801d5c0 <__libc_init_array>:
 801d5c0:	b570      	push	{r4, r5, r6, lr}
 801d5c2:	4d0d      	ldr	r5, [pc, #52]	@ (801d5f8 <__libc_init_array+0x38>)
 801d5c4:	4c0d      	ldr	r4, [pc, #52]	@ (801d5fc <__libc_init_array+0x3c>)
 801d5c6:	1b64      	subs	r4, r4, r5
 801d5c8:	10a4      	asrs	r4, r4, #2
 801d5ca:	2600      	movs	r6, #0
 801d5cc:	42a6      	cmp	r6, r4
 801d5ce:	d109      	bne.n	801d5e4 <__libc_init_array+0x24>
 801d5d0:	4d0b      	ldr	r5, [pc, #44]	@ (801d600 <__libc_init_array+0x40>)
 801d5d2:	4c0c      	ldr	r4, [pc, #48]	@ (801d604 <__libc_init_array+0x44>)
 801d5d4:	f001 fdb8 	bl	801f148 <_init>
 801d5d8:	1b64      	subs	r4, r4, r5
 801d5da:	10a4      	asrs	r4, r4, #2
 801d5dc:	2600      	movs	r6, #0
 801d5de:	42a6      	cmp	r6, r4
 801d5e0:	d105      	bne.n	801d5ee <__libc_init_array+0x2e>
 801d5e2:	bd70      	pop	{r4, r5, r6, pc}
 801d5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d5e8:	4798      	blx	r3
 801d5ea:	3601      	adds	r6, #1
 801d5ec:	e7ee      	b.n	801d5cc <__libc_init_array+0xc>
 801d5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801d5f2:	4798      	blx	r3
 801d5f4:	3601      	adds	r6, #1
 801d5f6:	e7f2      	b.n	801d5de <__libc_init_array+0x1e>
 801d5f8:	08020b24 	.word	0x08020b24
 801d5fc:	08020b24 	.word	0x08020b24
 801d600:	08020b24 	.word	0x08020b24
 801d604:	08020b28 	.word	0x08020b28

0801d608 <__retarget_lock_init_recursive>:
 801d608:	4770      	bx	lr

0801d60a <__retarget_lock_acquire_recursive>:
 801d60a:	4770      	bx	lr

0801d60c <__retarget_lock_release_recursive>:
 801d60c:	4770      	bx	lr

0801d60e <memcpy>:
 801d60e:	440a      	add	r2, r1
 801d610:	4291      	cmp	r1, r2
 801d612:	f100 33ff 	add.w	r3, r0, #4294967295
 801d616:	d100      	bne.n	801d61a <memcpy+0xc>
 801d618:	4770      	bx	lr
 801d61a:	b510      	push	{r4, lr}
 801d61c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d620:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d624:	4291      	cmp	r1, r2
 801d626:	d1f9      	bne.n	801d61c <memcpy+0xe>
 801d628:	bd10      	pop	{r4, pc}

0801d62a <quorem>:
 801d62a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d62e:	6903      	ldr	r3, [r0, #16]
 801d630:	690c      	ldr	r4, [r1, #16]
 801d632:	42a3      	cmp	r3, r4
 801d634:	4607      	mov	r7, r0
 801d636:	db7e      	blt.n	801d736 <quorem+0x10c>
 801d638:	3c01      	subs	r4, #1
 801d63a:	f101 0814 	add.w	r8, r1, #20
 801d63e:	00a3      	lsls	r3, r4, #2
 801d640:	f100 0514 	add.w	r5, r0, #20
 801d644:	9300      	str	r3, [sp, #0]
 801d646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d64a:	9301      	str	r3, [sp, #4]
 801d64c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d654:	3301      	adds	r3, #1
 801d656:	429a      	cmp	r2, r3
 801d658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d65c:	fbb2 f6f3 	udiv	r6, r2, r3
 801d660:	d32e      	bcc.n	801d6c0 <quorem+0x96>
 801d662:	f04f 0a00 	mov.w	sl, #0
 801d666:	46c4      	mov	ip, r8
 801d668:	46ae      	mov	lr, r5
 801d66a:	46d3      	mov	fp, sl
 801d66c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d670:	b298      	uxth	r0, r3
 801d672:	fb06 a000 	mla	r0, r6, r0, sl
 801d676:	0c02      	lsrs	r2, r0, #16
 801d678:	0c1b      	lsrs	r3, r3, #16
 801d67a:	fb06 2303 	mla	r3, r6, r3, r2
 801d67e:	f8de 2000 	ldr.w	r2, [lr]
 801d682:	b280      	uxth	r0, r0
 801d684:	b292      	uxth	r2, r2
 801d686:	1a12      	subs	r2, r2, r0
 801d688:	445a      	add	r2, fp
 801d68a:	f8de 0000 	ldr.w	r0, [lr]
 801d68e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d692:	b29b      	uxth	r3, r3
 801d694:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d698:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d69c:	b292      	uxth	r2, r2
 801d69e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d6a2:	45e1      	cmp	r9, ip
 801d6a4:	f84e 2b04 	str.w	r2, [lr], #4
 801d6a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d6ac:	d2de      	bcs.n	801d66c <quorem+0x42>
 801d6ae:	9b00      	ldr	r3, [sp, #0]
 801d6b0:	58eb      	ldr	r3, [r5, r3]
 801d6b2:	b92b      	cbnz	r3, 801d6c0 <quorem+0x96>
 801d6b4:	9b01      	ldr	r3, [sp, #4]
 801d6b6:	3b04      	subs	r3, #4
 801d6b8:	429d      	cmp	r5, r3
 801d6ba:	461a      	mov	r2, r3
 801d6bc:	d32f      	bcc.n	801d71e <quorem+0xf4>
 801d6be:	613c      	str	r4, [r7, #16]
 801d6c0:	4638      	mov	r0, r7
 801d6c2:	f001 f97f 	bl	801e9c4 <__mcmp>
 801d6c6:	2800      	cmp	r0, #0
 801d6c8:	db25      	blt.n	801d716 <quorem+0xec>
 801d6ca:	4629      	mov	r1, r5
 801d6cc:	2000      	movs	r0, #0
 801d6ce:	f858 2b04 	ldr.w	r2, [r8], #4
 801d6d2:	f8d1 c000 	ldr.w	ip, [r1]
 801d6d6:	fa1f fe82 	uxth.w	lr, r2
 801d6da:	fa1f f38c 	uxth.w	r3, ip
 801d6de:	eba3 030e 	sub.w	r3, r3, lr
 801d6e2:	4403      	add	r3, r0
 801d6e4:	0c12      	lsrs	r2, r2, #16
 801d6e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d6ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d6ee:	b29b      	uxth	r3, r3
 801d6f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d6f4:	45c1      	cmp	r9, r8
 801d6f6:	f841 3b04 	str.w	r3, [r1], #4
 801d6fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d6fe:	d2e6      	bcs.n	801d6ce <quorem+0xa4>
 801d700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d708:	b922      	cbnz	r2, 801d714 <quorem+0xea>
 801d70a:	3b04      	subs	r3, #4
 801d70c:	429d      	cmp	r5, r3
 801d70e:	461a      	mov	r2, r3
 801d710:	d30b      	bcc.n	801d72a <quorem+0x100>
 801d712:	613c      	str	r4, [r7, #16]
 801d714:	3601      	adds	r6, #1
 801d716:	4630      	mov	r0, r6
 801d718:	b003      	add	sp, #12
 801d71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d71e:	6812      	ldr	r2, [r2, #0]
 801d720:	3b04      	subs	r3, #4
 801d722:	2a00      	cmp	r2, #0
 801d724:	d1cb      	bne.n	801d6be <quorem+0x94>
 801d726:	3c01      	subs	r4, #1
 801d728:	e7c6      	b.n	801d6b8 <quorem+0x8e>
 801d72a:	6812      	ldr	r2, [r2, #0]
 801d72c:	3b04      	subs	r3, #4
 801d72e:	2a00      	cmp	r2, #0
 801d730:	d1ef      	bne.n	801d712 <quorem+0xe8>
 801d732:	3c01      	subs	r4, #1
 801d734:	e7ea      	b.n	801d70c <quorem+0xe2>
 801d736:	2000      	movs	r0, #0
 801d738:	e7ee      	b.n	801d718 <quorem+0xee>
 801d73a:	0000      	movs	r0, r0
 801d73c:	0000      	movs	r0, r0
	...

0801d740 <_dtoa_r>:
 801d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d744:	69c7      	ldr	r7, [r0, #28]
 801d746:	b097      	sub	sp, #92	@ 0x5c
 801d748:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d74c:	ec55 4b10 	vmov	r4, r5, d0
 801d750:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d752:	9107      	str	r1, [sp, #28]
 801d754:	4681      	mov	r9, r0
 801d756:	920c      	str	r2, [sp, #48]	@ 0x30
 801d758:	9311      	str	r3, [sp, #68]	@ 0x44
 801d75a:	b97f      	cbnz	r7, 801d77c <_dtoa_r+0x3c>
 801d75c:	2010      	movs	r0, #16
 801d75e:	f000 fe09 	bl	801e374 <malloc>
 801d762:	4602      	mov	r2, r0
 801d764:	f8c9 001c 	str.w	r0, [r9, #28]
 801d768:	b920      	cbnz	r0, 801d774 <_dtoa_r+0x34>
 801d76a:	4ba9      	ldr	r3, [pc, #676]	@ (801da10 <_dtoa_r+0x2d0>)
 801d76c:	21ef      	movs	r1, #239	@ 0xef
 801d76e:	48a9      	ldr	r0, [pc, #676]	@ (801da14 <_dtoa_r+0x2d4>)
 801d770:	f001 fc3a 	bl	801efe8 <__assert_func>
 801d774:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d778:	6007      	str	r7, [r0, #0]
 801d77a:	60c7      	str	r7, [r0, #12]
 801d77c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d780:	6819      	ldr	r1, [r3, #0]
 801d782:	b159      	cbz	r1, 801d79c <_dtoa_r+0x5c>
 801d784:	685a      	ldr	r2, [r3, #4]
 801d786:	604a      	str	r2, [r1, #4]
 801d788:	2301      	movs	r3, #1
 801d78a:	4093      	lsls	r3, r2
 801d78c:	608b      	str	r3, [r1, #8]
 801d78e:	4648      	mov	r0, r9
 801d790:	f000 fee6 	bl	801e560 <_Bfree>
 801d794:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d798:	2200      	movs	r2, #0
 801d79a:	601a      	str	r2, [r3, #0]
 801d79c:	1e2b      	subs	r3, r5, #0
 801d79e:	bfb9      	ittee	lt
 801d7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d7a4:	9305      	strlt	r3, [sp, #20]
 801d7a6:	2300      	movge	r3, #0
 801d7a8:	6033      	strge	r3, [r6, #0]
 801d7aa:	9f05      	ldr	r7, [sp, #20]
 801d7ac:	4b9a      	ldr	r3, [pc, #616]	@ (801da18 <_dtoa_r+0x2d8>)
 801d7ae:	bfbc      	itt	lt
 801d7b0:	2201      	movlt	r2, #1
 801d7b2:	6032      	strlt	r2, [r6, #0]
 801d7b4:	43bb      	bics	r3, r7
 801d7b6:	d112      	bne.n	801d7de <_dtoa_r+0x9e>
 801d7b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d7ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d7be:	6013      	str	r3, [r2, #0]
 801d7c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d7c4:	4323      	orrs	r3, r4
 801d7c6:	f000 855a 	beq.w	801e27e <_dtoa_r+0xb3e>
 801d7ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d7cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801da2c <_dtoa_r+0x2ec>
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	f000 855c 	beq.w	801e28e <_dtoa_r+0xb4e>
 801d7d6:	f10a 0303 	add.w	r3, sl, #3
 801d7da:	f000 bd56 	b.w	801e28a <_dtoa_r+0xb4a>
 801d7de:	ed9d 7b04 	vldr	d7, [sp, #16]
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	ec51 0b17 	vmov	r0, r1, d7
 801d7e8:	2300      	movs	r3, #0
 801d7ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801d7ee:	f7e3 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 801d7f2:	4680      	mov	r8, r0
 801d7f4:	b158      	cbz	r0, 801d80e <_dtoa_r+0xce>
 801d7f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d7f8:	2301      	movs	r3, #1
 801d7fa:	6013      	str	r3, [r2, #0]
 801d7fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d7fe:	b113      	cbz	r3, 801d806 <_dtoa_r+0xc6>
 801d800:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d802:	4b86      	ldr	r3, [pc, #536]	@ (801da1c <_dtoa_r+0x2dc>)
 801d804:	6013      	str	r3, [r2, #0]
 801d806:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801da30 <_dtoa_r+0x2f0>
 801d80a:	f000 bd40 	b.w	801e28e <_dtoa_r+0xb4e>
 801d80e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801d812:	aa14      	add	r2, sp, #80	@ 0x50
 801d814:	a915      	add	r1, sp, #84	@ 0x54
 801d816:	4648      	mov	r0, r9
 801d818:	f001 f984 	bl	801eb24 <__d2b>
 801d81c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d820:	9002      	str	r0, [sp, #8]
 801d822:	2e00      	cmp	r6, #0
 801d824:	d078      	beq.n	801d918 <_dtoa_r+0x1d8>
 801d826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d828:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801d82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d830:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d834:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d838:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d83c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d840:	4619      	mov	r1, r3
 801d842:	2200      	movs	r2, #0
 801d844:	4b76      	ldr	r3, [pc, #472]	@ (801da20 <_dtoa_r+0x2e0>)
 801d846:	f7e2 fd1f 	bl	8000288 <__aeabi_dsub>
 801d84a:	a36b      	add	r3, pc, #428	@ (adr r3, 801d9f8 <_dtoa_r+0x2b8>)
 801d84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d850:	f7e2 fed2 	bl	80005f8 <__aeabi_dmul>
 801d854:	a36a      	add	r3, pc, #424	@ (adr r3, 801da00 <_dtoa_r+0x2c0>)
 801d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d85a:	f7e2 fd17 	bl	800028c <__adddf3>
 801d85e:	4604      	mov	r4, r0
 801d860:	4630      	mov	r0, r6
 801d862:	460d      	mov	r5, r1
 801d864:	f7e2 fe5e 	bl	8000524 <__aeabi_i2d>
 801d868:	a367      	add	r3, pc, #412	@ (adr r3, 801da08 <_dtoa_r+0x2c8>)
 801d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d86e:	f7e2 fec3 	bl	80005f8 <__aeabi_dmul>
 801d872:	4602      	mov	r2, r0
 801d874:	460b      	mov	r3, r1
 801d876:	4620      	mov	r0, r4
 801d878:	4629      	mov	r1, r5
 801d87a:	f7e2 fd07 	bl	800028c <__adddf3>
 801d87e:	4604      	mov	r4, r0
 801d880:	460d      	mov	r5, r1
 801d882:	f7e3 f969 	bl	8000b58 <__aeabi_d2iz>
 801d886:	2200      	movs	r2, #0
 801d888:	4607      	mov	r7, r0
 801d88a:	2300      	movs	r3, #0
 801d88c:	4620      	mov	r0, r4
 801d88e:	4629      	mov	r1, r5
 801d890:	f7e3 f924 	bl	8000adc <__aeabi_dcmplt>
 801d894:	b140      	cbz	r0, 801d8a8 <_dtoa_r+0x168>
 801d896:	4638      	mov	r0, r7
 801d898:	f7e2 fe44 	bl	8000524 <__aeabi_i2d>
 801d89c:	4622      	mov	r2, r4
 801d89e:	462b      	mov	r3, r5
 801d8a0:	f7e3 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 801d8a4:	b900      	cbnz	r0, 801d8a8 <_dtoa_r+0x168>
 801d8a6:	3f01      	subs	r7, #1
 801d8a8:	2f16      	cmp	r7, #22
 801d8aa:	d852      	bhi.n	801d952 <_dtoa_r+0x212>
 801d8ac:	4b5d      	ldr	r3, [pc, #372]	@ (801da24 <_dtoa_r+0x2e4>)
 801d8ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d8ba:	f7e3 f90f 	bl	8000adc <__aeabi_dcmplt>
 801d8be:	2800      	cmp	r0, #0
 801d8c0:	d049      	beq.n	801d956 <_dtoa_r+0x216>
 801d8c2:	3f01      	subs	r7, #1
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	9310      	str	r3, [sp, #64]	@ 0x40
 801d8c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d8ca:	1b9b      	subs	r3, r3, r6
 801d8cc:	1e5a      	subs	r2, r3, #1
 801d8ce:	bf45      	ittet	mi
 801d8d0:	f1c3 0301 	rsbmi	r3, r3, #1
 801d8d4:	9300      	strmi	r3, [sp, #0]
 801d8d6:	2300      	movpl	r3, #0
 801d8d8:	2300      	movmi	r3, #0
 801d8da:	9206      	str	r2, [sp, #24]
 801d8dc:	bf54      	ite	pl
 801d8de:	9300      	strpl	r3, [sp, #0]
 801d8e0:	9306      	strmi	r3, [sp, #24]
 801d8e2:	2f00      	cmp	r7, #0
 801d8e4:	db39      	blt.n	801d95a <_dtoa_r+0x21a>
 801d8e6:	9b06      	ldr	r3, [sp, #24]
 801d8e8:	970d      	str	r7, [sp, #52]	@ 0x34
 801d8ea:	443b      	add	r3, r7
 801d8ec:	9306      	str	r3, [sp, #24]
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	9308      	str	r3, [sp, #32]
 801d8f2:	9b07      	ldr	r3, [sp, #28]
 801d8f4:	2b09      	cmp	r3, #9
 801d8f6:	d863      	bhi.n	801d9c0 <_dtoa_r+0x280>
 801d8f8:	2b05      	cmp	r3, #5
 801d8fa:	bfc4      	itt	gt
 801d8fc:	3b04      	subgt	r3, #4
 801d8fe:	9307      	strgt	r3, [sp, #28]
 801d900:	9b07      	ldr	r3, [sp, #28]
 801d902:	f1a3 0302 	sub.w	r3, r3, #2
 801d906:	bfcc      	ite	gt
 801d908:	2400      	movgt	r4, #0
 801d90a:	2401      	movle	r4, #1
 801d90c:	2b03      	cmp	r3, #3
 801d90e:	d863      	bhi.n	801d9d8 <_dtoa_r+0x298>
 801d910:	e8df f003 	tbb	[pc, r3]
 801d914:	2b375452 	.word	0x2b375452
 801d918:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801d91c:	441e      	add	r6, r3
 801d91e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d922:	2b20      	cmp	r3, #32
 801d924:	bfc1      	itttt	gt
 801d926:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d92a:	409f      	lslgt	r7, r3
 801d92c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d930:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d934:	bfd6      	itet	le
 801d936:	f1c3 0320 	rsble	r3, r3, #32
 801d93a:	ea47 0003 	orrgt.w	r0, r7, r3
 801d93e:	fa04 f003 	lslle.w	r0, r4, r3
 801d942:	f7e2 fddf 	bl	8000504 <__aeabi_ui2d>
 801d946:	2201      	movs	r2, #1
 801d948:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d94c:	3e01      	subs	r6, #1
 801d94e:	9212      	str	r2, [sp, #72]	@ 0x48
 801d950:	e776      	b.n	801d840 <_dtoa_r+0x100>
 801d952:	2301      	movs	r3, #1
 801d954:	e7b7      	b.n	801d8c6 <_dtoa_r+0x186>
 801d956:	9010      	str	r0, [sp, #64]	@ 0x40
 801d958:	e7b6      	b.n	801d8c8 <_dtoa_r+0x188>
 801d95a:	9b00      	ldr	r3, [sp, #0]
 801d95c:	1bdb      	subs	r3, r3, r7
 801d95e:	9300      	str	r3, [sp, #0]
 801d960:	427b      	negs	r3, r7
 801d962:	9308      	str	r3, [sp, #32]
 801d964:	2300      	movs	r3, #0
 801d966:	930d      	str	r3, [sp, #52]	@ 0x34
 801d968:	e7c3      	b.n	801d8f2 <_dtoa_r+0x1b2>
 801d96a:	2301      	movs	r3, #1
 801d96c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d96e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d970:	eb07 0b03 	add.w	fp, r7, r3
 801d974:	f10b 0301 	add.w	r3, fp, #1
 801d978:	2b01      	cmp	r3, #1
 801d97a:	9303      	str	r3, [sp, #12]
 801d97c:	bfb8      	it	lt
 801d97e:	2301      	movlt	r3, #1
 801d980:	e006      	b.n	801d990 <_dtoa_r+0x250>
 801d982:	2301      	movs	r3, #1
 801d984:	9309      	str	r3, [sp, #36]	@ 0x24
 801d986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dd28      	ble.n	801d9de <_dtoa_r+0x29e>
 801d98c:	469b      	mov	fp, r3
 801d98e:	9303      	str	r3, [sp, #12]
 801d990:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801d994:	2100      	movs	r1, #0
 801d996:	2204      	movs	r2, #4
 801d998:	f102 0514 	add.w	r5, r2, #20
 801d99c:	429d      	cmp	r5, r3
 801d99e:	d926      	bls.n	801d9ee <_dtoa_r+0x2ae>
 801d9a0:	6041      	str	r1, [r0, #4]
 801d9a2:	4648      	mov	r0, r9
 801d9a4:	f000 fd9c 	bl	801e4e0 <_Balloc>
 801d9a8:	4682      	mov	sl, r0
 801d9aa:	2800      	cmp	r0, #0
 801d9ac:	d142      	bne.n	801da34 <_dtoa_r+0x2f4>
 801d9ae:	4b1e      	ldr	r3, [pc, #120]	@ (801da28 <_dtoa_r+0x2e8>)
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	f240 11af 	movw	r1, #431	@ 0x1af
 801d9b6:	e6da      	b.n	801d76e <_dtoa_r+0x2e>
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	e7e3      	b.n	801d984 <_dtoa_r+0x244>
 801d9bc:	2300      	movs	r3, #0
 801d9be:	e7d5      	b.n	801d96c <_dtoa_r+0x22c>
 801d9c0:	2401      	movs	r4, #1
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	9307      	str	r3, [sp, #28]
 801d9c6:	9409      	str	r4, [sp, #36]	@ 0x24
 801d9c8:	f04f 3bff 	mov.w	fp, #4294967295
 801d9cc:	2200      	movs	r2, #0
 801d9ce:	f8cd b00c 	str.w	fp, [sp, #12]
 801d9d2:	2312      	movs	r3, #18
 801d9d4:	920c      	str	r2, [sp, #48]	@ 0x30
 801d9d6:	e7db      	b.n	801d990 <_dtoa_r+0x250>
 801d9d8:	2301      	movs	r3, #1
 801d9da:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9dc:	e7f4      	b.n	801d9c8 <_dtoa_r+0x288>
 801d9de:	f04f 0b01 	mov.w	fp, #1
 801d9e2:	f8cd b00c 	str.w	fp, [sp, #12]
 801d9e6:	465b      	mov	r3, fp
 801d9e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801d9ec:	e7d0      	b.n	801d990 <_dtoa_r+0x250>
 801d9ee:	3101      	adds	r1, #1
 801d9f0:	0052      	lsls	r2, r2, #1
 801d9f2:	e7d1      	b.n	801d998 <_dtoa_r+0x258>
 801d9f4:	f3af 8000 	nop.w
 801d9f8:	636f4361 	.word	0x636f4361
 801d9fc:	3fd287a7 	.word	0x3fd287a7
 801da00:	8b60c8b3 	.word	0x8b60c8b3
 801da04:	3fc68a28 	.word	0x3fc68a28
 801da08:	509f79fb 	.word	0x509f79fb
 801da0c:	3fd34413 	.word	0x3fd34413
 801da10:	080207e5 	.word	0x080207e5
 801da14:	080207fc 	.word	0x080207fc
 801da18:	7ff00000 	.word	0x7ff00000
 801da1c:	080207b5 	.word	0x080207b5
 801da20:	3ff80000 	.word	0x3ff80000
 801da24:	08020950 	.word	0x08020950
 801da28:	08020854 	.word	0x08020854
 801da2c:	080207e1 	.word	0x080207e1
 801da30:	080207b4 	.word	0x080207b4
 801da34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801da38:	6018      	str	r0, [r3, #0]
 801da3a:	9b03      	ldr	r3, [sp, #12]
 801da3c:	2b0e      	cmp	r3, #14
 801da3e:	f200 80a1 	bhi.w	801db84 <_dtoa_r+0x444>
 801da42:	2c00      	cmp	r4, #0
 801da44:	f000 809e 	beq.w	801db84 <_dtoa_r+0x444>
 801da48:	2f00      	cmp	r7, #0
 801da4a:	dd33      	ble.n	801dab4 <_dtoa_r+0x374>
 801da4c:	4b9c      	ldr	r3, [pc, #624]	@ (801dcc0 <_dtoa_r+0x580>)
 801da4e:	f007 020f 	and.w	r2, r7, #15
 801da52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801da56:	ed93 7b00 	vldr	d7, [r3]
 801da5a:	05f8      	lsls	r0, r7, #23
 801da5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801da60:	ea4f 1427 	mov.w	r4, r7, asr #4
 801da64:	d516      	bpl.n	801da94 <_dtoa_r+0x354>
 801da66:	4b97      	ldr	r3, [pc, #604]	@ (801dcc4 <_dtoa_r+0x584>)
 801da68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801da6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801da70:	f7e2 feec 	bl	800084c <__aeabi_ddiv>
 801da74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801da78:	f004 040f 	and.w	r4, r4, #15
 801da7c:	2603      	movs	r6, #3
 801da7e:	4d91      	ldr	r5, [pc, #580]	@ (801dcc4 <_dtoa_r+0x584>)
 801da80:	b954      	cbnz	r4, 801da98 <_dtoa_r+0x358>
 801da82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801da86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801da8a:	f7e2 fedf 	bl	800084c <__aeabi_ddiv>
 801da8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801da92:	e028      	b.n	801dae6 <_dtoa_r+0x3a6>
 801da94:	2602      	movs	r6, #2
 801da96:	e7f2      	b.n	801da7e <_dtoa_r+0x33e>
 801da98:	07e1      	lsls	r1, r4, #31
 801da9a:	d508      	bpl.n	801daae <_dtoa_r+0x36e>
 801da9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801daa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801daa4:	f7e2 fda8 	bl	80005f8 <__aeabi_dmul>
 801daa8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801daac:	3601      	adds	r6, #1
 801daae:	1064      	asrs	r4, r4, #1
 801dab0:	3508      	adds	r5, #8
 801dab2:	e7e5      	b.n	801da80 <_dtoa_r+0x340>
 801dab4:	f000 80af 	beq.w	801dc16 <_dtoa_r+0x4d6>
 801dab8:	427c      	negs	r4, r7
 801daba:	4b81      	ldr	r3, [pc, #516]	@ (801dcc0 <_dtoa_r+0x580>)
 801dabc:	4d81      	ldr	r5, [pc, #516]	@ (801dcc4 <_dtoa_r+0x584>)
 801dabe:	f004 020f 	and.w	r2, r4, #15
 801dac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801dace:	f7e2 fd93 	bl	80005f8 <__aeabi_dmul>
 801dad2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dad6:	1124      	asrs	r4, r4, #4
 801dad8:	2300      	movs	r3, #0
 801dada:	2602      	movs	r6, #2
 801dadc:	2c00      	cmp	r4, #0
 801dade:	f040 808f 	bne.w	801dc00 <_dtoa_r+0x4c0>
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d1d3      	bne.n	801da8e <_dtoa_r+0x34e>
 801dae6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dae8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801daec:	2b00      	cmp	r3, #0
 801daee:	f000 8094 	beq.w	801dc1a <_dtoa_r+0x4da>
 801daf2:	4b75      	ldr	r3, [pc, #468]	@ (801dcc8 <_dtoa_r+0x588>)
 801daf4:	2200      	movs	r2, #0
 801daf6:	4620      	mov	r0, r4
 801daf8:	4629      	mov	r1, r5
 801dafa:	f7e2 ffef 	bl	8000adc <__aeabi_dcmplt>
 801dafe:	2800      	cmp	r0, #0
 801db00:	f000 808b 	beq.w	801dc1a <_dtoa_r+0x4da>
 801db04:	9b03      	ldr	r3, [sp, #12]
 801db06:	2b00      	cmp	r3, #0
 801db08:	f000 8087 	beq.w	801dc1a <_dtoa_r+0x4da>
 801db0c:	f1bb 0f00 	cmp.w	fp, #0
 801db10:	dd34      	ble.n	801db7c <_dtoa_r+0x43c>
 801db12:	4620      	mov	r0, r4
 801db14:	4b6d      	ldr	r3, [pc, #436]	@ (801dccc <_dtoa_r+0x58c>)
 801db16:	2200      	movs	r2, #0
 801db18:	4629      	mov	r1, r5
 801db1a:	f7e2 fd6d 	bl	80005f8 <__aeabi_dmul>
 801db1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801db22:	f107 38ff 	add.w	r8, r7, #4294967295
 801db26:	3601      	adds	r6, #1
 801db28:	465c      	mov	r4, fp
 801db2a:	4630      	mov	r0, r6
 801db2c:	f7e2 fcfa 	bl	8000524 <__aeabi_i2d>
 801db30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801db34:	f7e2 fd60 	bl	80005f8 <__aeabi_dmul>
 801db38:	4b65      	ldr	r3, [pc, #404]	@ (801dcd0 <_dtoa_r+0x590>)
 801db3a:	2200      	movs	r2, #0
 801db3c:	f7e2 fba6 	bl	800028c <__adddf3>
 801db40:	4605      	mov	r5, r0
 801db42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801db46:	2c00      	cmp	r4, #0
 801db48:	d16a      	bne.n	801dc20 <_dtoa_r+0x4e0>
 801db4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801db4e:	4b61      	ldr	r3, [pc, #388]	@ (801dcd4 <_dtoa_r+0x594>)
 801db50:	2200      	movs	r2, #0
 801db52:	f7e2 fb99 	bl	8000288 <__aeabi_dsub>
 801db56:	4602      	mov	r2, r0
 801db58:	460b      	mov	r3, r1
 801db5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801db5e:	462a      	mov	r2, r5
 801db60:	4633      	mov	r3, r6
 801db62:	f7e2 ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 801db66:	2800      	cmp	r0, #0
 801db68:	f040 8298 	bne.w	801e09c <_dtoa_r+0x95c>
 801db6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801db70:	462a      	mov	r2, r5
 801db72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801db76:	f7e2 ffb1 	bl	8000adc <__aeabi_dcmplt>
 801db7a:	bb38      	cbnz	r0, 801dbcc <_dtoa_r+0x48c>
 801db7c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801db80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801db84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801db86:	2b00      	cmp	r3, #0
 801db88:	f2c0 8157 	blt.w	801de3a <_dtoa_r+0x6fa>
 801db8c:	2f0e      	cmp	r7, #14
 801db8e:	f300 8154 	bgt.w	801de3a <_dtoa_r+0x6fa>
 801db92:	4b4b      	ldr	r3, [pc, #300]	@ (801dcc0 <_dtoa_r+0x580>)
 801db94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801db98:	ed93 7b00 	vldr	d7, [r3]
 801db9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	ed8d 7b00 	vstr	d7, [sp]
 801dba4:	f280 80e5 	bge.w	801dd72 <_dtoa_r+0x632>
 801dba8:	9b03      	ldr	r3, [sp, #12]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	f300 80e1 	bgt.w	801dd72 <_dtoa_r+0x632>
 801dbb0:	d10c      	bne.n	801dbcc <_dtoa_r+0x48c>
 801dbb2:	4b48      	ldr	r3, [pc, #288]	@ (801dcd4 <_dtoa_r+0x594>)
 801dbb4:	2200      	movs	r2, #0
 801dbb6:	ec51 0b17 	vmov	r0, r1, d7
 801dbba:	f7e2 fd1d 	bl	80005f8 <__aeabi_dmul>
 801dbbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dbc2:	f7e2 ff9f 	bl	8000b04 <__aeabi_dcmpge>
 801dbc6:	2800      	cmp	r0, #0
 801dbc8:	f000 8266 	beq.w	801e098 <_dtoa_r+0x958>
 801dbcc:	2400      	movs	r4, #0
 801dbce:	4625      	mov	r5, r4
 801dbd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dbd2:	4656      	mov	r6, sl
 801dbd4:	ea6f 0803 	mvn.w	r8, r3
 801dbd8:	2700      	movs	r7, #0
 801dbda:	4621      	mov	r1, r4
 801dbdc:	4648      	mov	r0, r9
 801dbde:	f000 fcbf 	bl	801e560 <_Bfree>
 801dbe2:	2d00      	cmp	r5, #0
 801dbe4:	f000 80bd 	beq.w	801dd62 <_dtoa_r+0x622>
 801dbe8:	b12f      	cbz	r7, 801dbf6 <_dtoa_r+0x4b6>
 801dbea:	42af      	cmp	r7, r5
 801dbec:	d003      	beq.n	801dbf6 <_dtoa_r+0x4b6>
 801dbee:	4639      	mov	r1, r7
 801dbf0:	4648      	mov	r0, r9
 801dbf2:	f000 fcb5 	bl	801e560 <_Bfree>
 801dbf6:	4629      	mov	r1, r5
 801dbf8:	4648      	mov	r0, r9
 801dbfa:	f000 fcb1 	bl	801e560 <_Bfree>
 801dbfe:	e0b0      	b.n	801dd62 <_dtoa_r+0x622>
 801dc00:	07e2      	lsls	r2, r4, #31
 801dc02:	d505      	bpl.n	801dc10 <_dtoa_r+0x4d0>
 801dc04:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dc08:	f7e2 fcf6 	bl	80005f8 <__aeabi_dmul>
 801dc0c:	3601      	adds	r6, #1
 801dc0e:	2301      	movs	r3, #1
 801dc10:	1064      	asrs	r4, r4, #1
 801dc12:	3508      	adds	r5, #8
 801dc14:	e762      	b.n	801dadc <_dtoa_r+0x39c>
 801dc16:	2602      	movs	r6, #2
 801dc18:	e765      	b.n	801dae6 <_dtoa_r+0x3a6>
 801dc1a:	9c03      	ldr	r4, [sp, #12]
 801dc1c:	46b8      	mov	r8, r7
 801dc1e:	e784      	b.n	801db2a <_dtoa_r+0x3ea>
 801dc20:	4b27      	ldr	r3, [pc, #156]	@ (801dcc0 <_dtoa_r+0x580>)
 801dc22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dc28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dc2c:	4454      	add	r4, sl
 801dc2e:	2900      	cmp	r1, #0
 801dc30:	d054      	beq.n	801dcdc <_dtoa_r+0x59c>
 801dc32:	4929      	ldr	r1, [pc, #164]	@ (801dcd8 <_dtoa_r+0x598>)
 801dc34:	2000      	movs	r0, #0
 801dc36:	f7e2 fe09 	bl	800084c <__aeabi_ddiv>
 801dc3a:	4633      	mov	r3, r6
 801dc3c:	462a      	mov	r2, r5
 801dc3e:	f7e2 fb23 	bl	8000288 <__aeabi_dsub>
 801dc42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801dc46:	4656      	mov	r6, sl
 801dc48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dc4c:	f7e2 ff84 	bl	8000b58 <__aeabi_d2iz>
 801dc50:	4605      	mov	r5, r0
 801dc52:	f7e2 fc67 	bl	8000524 <__aeabi_i2d>
 801dc56:	4602      	mov	r2, r0
 801dc58:	460b      	mov	r3, r1
 801dc5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dc5e:	f7e2 fb13 	bl	8000288 <__aeabi_dsub>
 801dc62:	3530      	adds	r5, #48	@ 0x30
 801dc64:	4602      	mov	r2, r0
 801dc66:	460b      	mov	r3, r1
 801dc68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801dc6c:	f806 5b01 	strb.w	r5, [r6], #1
 801dc70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801dc74:	f7e2 ff32 	bl	8000adc <__aeabi_dcmplt>
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	d172      	bne.n	801dd62 <_dtoa_r+0x622>
 801dc7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dc80:	4911      	ldr	r1, [pc, #68]	@ (801dcc8 <_dtoa_r+0x588>)
 801dc82:	2000      	movs	r0, #0
 801dc84:	f7e2 fb00 	bl	8000288 <__aeabi_dsub>
 801dc88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801dc8c:	f7e2 ff26 	bl	8000adc <__aeabi_dcmplt>
 801dc90:	2800      	cmp	r0, #0
 801dc92:	f040 80b4 	bne.w	801ddfe <_dtoa_r+0x6be>
 801dc96:	42a6      	cmp	r6, r4
 801dc98:	f43f af70 	beq.w	801db7c <_dtoa_r+0x43c>
 801dc9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801dca0:	4b0a      	ldr	r3, [pc, #40]	@ (801dccc <_dtoa_r+0x58c>)
 801dca2:	2200      	movs	r2, #0
 801dca4:	f7e2 fca8 	bl	80005f8 <__aeabi_dmul>
 801dca8:	4b08      	ldr	r3, [pc, #32]	@ (801dccc <_dtoa_r+0x58c>)
 801dcaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801dcae:	2200      	movs	r2, #0
 801dcb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dcb4:	f7e2 fca0 	bl	80005f8 <__aeabi_dmul>
 801dcb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dcbc:	e7c4      	b.n	801dc48 <_dtoa_r+0x508>
 801dcbe:	bf00      	nop
 801dcc0:	08020950 	.word	0x08020950
 801dcc4:	08020928 	.word	0x08020928
 801dcc8:	3ff00000 	.word	0x3ff00000
 801dccc:	40240000 	.word	0x40240000
 801dcd0:	401c0000 	.word	0x401c0000
 801dcd4:	40140000 	.word	0x40140000
 801dcd8:	3fe00000 	.word	0x3fe00000
 801dcdc:	4631      	mov	r1, r6
 801dcde:	4628      	mov	r0, r5
 801dce0:	f7e2 fc8a 	bl	80005f8 <__aeabi_dmul>
 801dce4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801dce8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801dcea:	4656      	mov	r6, sl
 801dcec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dcf0:	f7e2 ff32 	bl	8000b58 <__aeabi_d2iz>
 801dcf4:	4605      	mov	r5, r0
 801dcf6:	f7e2 fc15 	bl	8000524 <__aeabi_i2d>
 801dcfa:	4602      	mov	r2, r0
 801dcfc:	460b      	mov	r3, r1
 801dcfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dd02:	f7e2 fac1 	bl	8000288 <__aeabi_dsub>
 801dd06:	3530      	adds	r5, #48	@ 0x30
 801dd08:	f806 5b01 	strb.w	r5, [r6], #1
 801dd0c:	4602      	mov	r2, r0
 801dd0e:	460b      	mov	r3, r1
 801dd10:	42a6      	cmp	r6, r4
 801dd12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801dd16:	f04f 0200 	mov.w	r2, #0
 801dd1a:	d124      	bne.n	801dd66 <_dtoa_r+0x626>
 801dd1c:	4baf      	ldr	r3, [pc, #700]	@ (801dfdc <_dtoa_r+0x89c>)
 801dd1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801dd22:	f7e2 fab3 	bl	800028c <__adddf3>
 801dd26:	4602      	mov	r2, r0
 801dd28:	460b      	mov	r3, r1
 801dd2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dd2e:	f7e2 fef3 	bl	8000b18 <__aeabi_dcmpgt>
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d163      	bne.n	801ddfe <_dtoa_r+0x6be>
 801dd36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801dd3a:	49a8      	ldr	r1, [pc, #672]	@ (801dfdc <_dtoa_r+0x89c>)
 801dd3c:	2000      	movs	r0, #0
 801dd3e:	f7e2 faa3 	bl	8000288 <__aeabi_dsub>
 801dd42:	4602      	mov	r2, r0
 801dd44:	460b      	mov	r3, r1
 801dd46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dd4a:	f7e2 fec7 	bl	8000adc <__aeabi_dcmplt>
 801dd4e:	2800      	cmp	r0, #0
 801dd50:	f43f af14 	beq.w	801db7c <_dtoa_r+0x43c>
 801dd54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801dd56:	1e73      	subs	r3, r6, #1
 801dd58:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dd5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dd5e:	2b30      	cmp	r3, #48	@ 0x30
 801dd60:	d0f8      	beq.n	801dd54 <_dtoa_r+0x614>
 801dd62:	4647      	mov	r7, r8
 801dd64:	e03b      	b.n	801ddde <_dtoa_r+0x69e>
 801dd66:	4b9e      	ldr	r3, [pc, #632]	@ (801dfe0 <_dtoa_r+0x8a0>)
 801dd68:	f7e2 fc46 	bl	80005f8 <__aeabi_dmul>
 801dd6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dd70:	e7bc      	b.n	801dcec <_dtoa_r+0x5ac>
 801dd72:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801dd76:	4656      	mov	r6, sl
 801dd78:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	4629      	mov	r1, r5
 801dd80:	f7e2 fd64 	bl	800084c <__aeabi_ddiv>
 801dd84:	f7e2 fee8 	bl	8000b58 <__aeabi_d2iz>
 801dd88:	4680      	mov	r8, r0
 801dd8a:	f7e2 fbcb 	bl	8000524 <__aeabi_i2d>
 801dd8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd92:	f7e2 fc31 	bl	80005f8 <__aeabi_dmul>
 801dd96:	4602      	mov	r2, r0
 801dd98:	460b      	mov	r3, r1
 801dd9a:	4620      	mov	r0, r4
 801dd9c:	4629      	mov	r1, r5
 801dd9e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801dda2:	f7e2 fa71 	bl	8000288 <__aeabi_dsub>
 801dda6:	f806 4b01 	strb.w	r4, [r6], #1
 801ddaa:	9d03      	ldr	r5, [sp, #12]
 801ddac:	eba6 040a 	sub.w	r4, r6, sl
 801ddb0:	42a5      	cmp	r5, r4
 801ddb2:	4602      	mov	r2, r0
 801ddb4:	460b      	mov	r3, r1
 801ddb6:	d133      	bne.n	801de20 <_dtoa_r+0x6e0>
 801ddb8:	f7e2 fa68 	bl	800028c <__adddf3>
 801ddbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	460d      	mov	r5, r1
 801ddc4:	f7e2 fea8 	bl	8000b18 <__aeabi_dcmpgt>
 801ddc8:	b9c0      	cbnz	r0, 801ddfc <_dtoa_r+0x6bc>
 801ddca:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ddce:	4620      	mov	r0, r4
 801ddd0:	4629      	mov	r1, r5
 801ddd2:	f7e2 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 801ddd6:	b110      	cbz	r0, 801ddde <_dtoa_r+0x69e>
 801ddd8:	f018 0f01 	tst.w	r8, #1
 801dddc:	d10e      	bne.n	801ddfc <_dtoa_r+0x6bc>
 801ddde:	9902      	ldr	r1, [sp, #8]
 801dde0:	4648      	mov	r0, r9
 801dde2:	f000 fbbd 	bl	801e560 <_Bfree>
 801dde6:	2300      	movs	r3, #0
 801dde8:	7033      	strb	r3, [r6, #0]
 801ddea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ddec:	3701      	adds	r7, #1
 801ddee:	601f      	str	r7, [r3, #0]
 801ddf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	f000 824b 	beq.w	801e28e <_dtoa_r+0xb4e>
 801ddf8:	601e      	str	r6, [r3, #0]
 801ddfa:	e248      	b.n	801e28e <_dtoa_r+0xb4e>
 801ddfc:	46b8      	mov	r8, r7
 801ddfe:	4633      	mov	r3, r6
 801de00:	461e      	mov	r6, r3
 801de02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de06:	2a39      	cmp	r2, #57	@ 0x39
 801de08:	d106      	bne.n	801de18 <_dtoa_r+0x6d8>
 801de0a:	459a      	cmp	sl, r3
 801de0c:	d1f8      	bne.n	801de00 <_dtoa_r+0x6c0>
 801de0e:	2230      	movs	r2, #48	@ 0x30
 801de10:	f108 0801 	add.w	r8, r8, #1
 801de14:	f88a 2000 	strb.w	r2, [sl]
 801de18:	781a      	ldrb	r2, [r3, #0]
 801de1a:	3201      	adds	r2, #1
 801de1c:	701a      	strb	r2, [r3, #0]
 801de1e:	e7a0      	b.n	801dd62 <_dtoa_r+0x622>
 801de20:	4b6f      	ldr	r3, [pc, #444]	@ (801dfe0 <_dtoa_r+0x8a0>)
 801de22:	2200      	movs	r2, #0
 801de24:	f7e2 fbe8 	bl	80005f8 <__aeabi_dmul>
 801de28:	2200      	movs	r2, #0
 801de2a:	2300      	movs	r3, #0
 801de2c:	4604      	mov	r4, r0
 801de2e:	460d      	mov	r5, r1
 801de30:	f7e2 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 801de34:	2800      	cmp	r0, #0
 801de36:	d09f      	beq.n	801dd78 <_dtoa_r+0x638>
 801de38:	e7d1      	b.n	801ddde <_dtoa_r+0x69e>
 801de3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de3c:	2a00      	cmp	r2, #0
 801de3e:	f000 80ea 	beq.w	801e016 <_dtoa_r+0x8d6>
 801de42:	9a07      	ldr	r2, [sp, #28]
 801de44:	2a01      	cmp	r2, #1
 801de46:	f300 80cd 	bgt.w	801dfe4 <_dtoa_r+0x8a4>
 801de4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801de4c:	2a00      	cmp	r2, #0
 801de4e:	f000 80c1 	beq.w	801dfd4 <_dtoa_r+0x894>
 801de52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801de56:	9c08      	ldr	r4, [sp, #32]
 801de58:	9e00      	ldr	r6, [sp, #0]
 801de5a:	9a00      	ldr	r2, [sp, #0]
 801de5c:	441a      	add	r2, r3
 801de5e:	9200      	str	r2, [sp, #0]
 801de60:	9a06      	ldr	r2, [sp, #24]
 801de62:	2101      	movs	r1, #1
 801de64:	441a      	add	r2, r3
 801de66:	4648      	mov	r0, r9
 801de68:	9206      	str	r2, [sp, #24]
 801de6a:	f000 fc2d 	bl	801e6c8 <__i2b>
 801de6e:	4605      	mov	r5, r0
 801de70:	b166      	cbz	r6, 801de8c <_dtoa_r+0x74c>
 801de72:	9b06      	ldr	r3, [sp, #24]
 801de74:	2b00      	cmp	r3, #0
 801de76:	dd09      	ble.n	801de8c <_dtoa_r+0x74c>
 801de78:	42b3      	cmp	r3, r6
 801de7a:	9a00      	ldr	r2, [sp, #0]
 801de7c:	bfa8      	it	ge
 801de7e:	4633      	movge	r3, r6
 801de80:	1ad2      	subs	r2, r2, r3
 801de82:	9200      	str	r2, [sp, #0]
 801de84:	9a06      	ldr	r2, [sp, #24]
 801de86:	1af6      	subs	r6, r6, r3
 801de88:	1ad3      	subs	r3, r2, r3
 801de8a:	9306      	str	r3, [sp, #24]
 801de8c:	9b08      	ldr	r3, [sp, #32]
 801de8e:	b30b      	cbz	r3, 801ded4 <_dtoa_r+0x794>
 801de90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de92:	2b00      	cmp	r3, #0
 801de94:	f000 80c6 	beq.w	801e024 <_dtoa_r+0x8e4>
 801de98:	2c00      	cmp	r4, #0
 801de9a:	f000 80c0 	beq.w	801e01e <_dtoa_r+0x8de>
 801de9e:	4629      	mov	r1, r5
 801dea0:	4622      	mov	r2, r4
 801dea2:	4648      	mov	r0, r9
 801dea4:	f000 fcc8 	bl	801e838 <__pow5mult>
 801dea8:	9a02      	ldr	r2, [sp, #8]
 801deaa:	4601      	mov	r1, r0
 801deac:	4605      	mov	r5, r0
 801deae:	4648      	mov	r0, r9
 801deb0:	f000 fc20 	bl	801e6f4 <__multiply>
 801deb4:	9902      	ldr	r1, [sp, #8]
 801deb6:	4680      	mov	r8, r0
 801deb8:	4648      	mov	r0, r9
 801deba:	f000 fb51 	bl	801e560 <_Bfree>
 801debe:	9b08      	ldr	r3, [sp, #32]
 801dec0:	1b1b      	subs	r3, r3, r4
 801dec2:	9308      	str	r3, [sp, #32]
 801dec4:	f000 80b1 	beq.w	801e02a <_dtoa_r+0x8ea>
 801dec8:	9a08      	ldr	r2, [sp, #32]
 801deca:	4641      	mov	r1, r8
 801decc:	4648      	mov	r0, r9
 801dece:	f000 fcb3 	bl	801e838 <__pow5mult>
 801ded2:	9002      	str	r0, [sp, #8]
 801ded4:	2101      	movs	r1, #1
 801ded6:	4648      	mov	r0, r9
 801ded8:	f000 fbf6 	bl	801e6c8 <__i2b>
 801dedc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dede:	4604      	mov	r4, r0
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	f000 81d8 	beq.w	801e296 <_dtoa_r+0xb56>
 801dee6:	461a      	mov	r2, r3
 801dee8:	4601      	mov	r1, r0
 801deea:	4648      	mov	r0, r9
 801deec:	f000 fca4 	bl	801e838 <__pow5mult>
 801def0:	9b07      	ldr	r3, [sp, #28]
 801def2:	2b01      	cmp	r3, #1
 801def4:	4604      	mov	r4, r0
 801def6:	f300 809f 	bgt.w	801e038 <_dtoa_r+0x8f8>
 801defa:	9b04      	ldr	r3, [sp, #16]
 801defc:	2b00      	cmp	r3, #0
 801defe:	f040 8097 	bne.w	801e030 <_dtoa_r+0x8f0>
 801df02:	9b05      	ldr	r3, [sp, #20]
 801df04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801df08:	2b00      	cmp	r3, #0
 801df0a:	f040 8093 	bne.w	801e034 <_dtoa_r+0x8f4>
 801df0e:	9b05      	ldr	r3, [sp, #20]
 801df10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801df14:	0d1b      	lsrs	r3, r3, #20
 801df16:	051b      	lsls	r3, r3, #20
 801df18:	b133      	cbz	r3, 801df28 <_dtoa_r+0x7e8>
 801df1a:	9b00      	ldr	r3, [sp, #0]
 801df1c:	3301      	adds	r3, #1
 801df1e:	9300      	str	r3, [sp, #0]
 801df20:	9b06      	ldr	r3, [sp, #24]
 801df22:	3301      	adds	r3, #1
 801df24:	9306      	str	r3, [sp, #24]
 801df26:	2301      	movs	r3, #1
 801df28:	9308      	str	r3, [sp, #32]
 801df2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	f000 81b8 	beq.w	801e2a2 <_dtoa_r+0xb62>
 801df32:	6923      	ldr	r3, [r4, #16]
 801df34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801df38:	6918      	ldr	r0, [r3, #16]
 801df3a:	f000 fb79 	bl	801e630 <__hi0bits>
 801df3e:	f1c0 0020 	rsb	r0, r0, #32
 801df42:	9b06      	ldr	r3, [sp, #24]
 801df44:	4418      	add	r0, r3
 801df46:	f010 001f 	ands.w	r0, r0, #31
 801df4a:	f000 8082 	beq.w	801e052 <_dtoa_r+0x912>
 801df4e:	f1c0 0320 	rsb	r3, r0, #32
 801df52:	2b04      	cmp	r3, #4
 801df54:	dd73      	ble.n	801e03e <_dtoa_r+0x8fe>
 801df56:	9b00      	ldr	r3, [sp, #0]
 801df58:	f1c0 001c 	rsb	r0, r0, #28
 801df5c:	4403      	add	r3, r0
 801df5e:	9300      	str	r3, [sp, #0]
 801df60:	9b06      	ldr	r3, [sp, #24]
 801df62:	4403      	add	r3, r0
 801df64:	4406      	add	r6, r0
 801df66:	9306      	str	r3, [sp, #24]
 801df68:	9b00      	ldr	r3, [sp, #0]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	dd05      	ble.n	801df7a <_dtoa_r+0x83a>
 801df6e:	9902      	ldr	r1, [sp, #8]
 801df70:	461a      	mov	r2, r3
 801df72:	4648      	mov	r0, r9
 801df74:	f000 fcba 	bl	801e8ec <__lshift>
 801df78:	9002      	str	r0, [sp, #8]
 801df7a:	9b06      	ldr	r3, [sp, #24]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	dd05      	ble.n	801df8c <_dtoa_r+0x84c>
 801df80:	4621      	mov	r1, r4
 801df82:	461a      	mov	r2, r3
 801df84:	4648      	mov	r0, r9
 801df86:	f000 fcb1 	bl	801e8ec <__lshift>
 801df8a:	4604      	mov	r4, r0
 801df8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d061      	beq.n	801e056 <_dtoa_r+0x916>
 801df92:	9802      	ldr	r0, [sp, #8]
 801df94:	4621      	mov	r1, r4
 801df96:	f000 fd15 	bl	801e9c4 <__mcmp>
 801df9a:	2800      	cmp	r0, #0
 801df9c:	da5b      	bge.n	801e056 <_dtoa_r+0x916>
 801df9e:	2300      	movs	r3, #0
 801dfa0:	9902      	ldr	r1, [sp, #8]
 801dfa2:	220a      	movs	r2, #10
 801dfa4:	4648      	mov	r0, r9
 801dfa6:	f000 fafd 	bl	801e5a4 <__multadd>
 801dfaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfac:	9002      	str	r0, [sp, #8]
 801dfae:	f107 38ff 	add.w	r8, r7, #4294967295
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	f000 8177 	beq.w	801e2a6 <_dtoa_r+0xb66>
 801dfb8:	4629      	mov	r1, r5
 801dfba:	2300      	movs	r3, #0
 801dfbc:	220a      	movs	r2, #10
 801dfbe:	4648      	mov	r0, r9
 801dfc0:	f000 faf0 	bl	801e5a4 <__multadd>
 801dfc4:	f1bb 0f00 	cmp.w	fp, #0
 801dfc8:	4605      	mov	r5, r0
 801dfca:	dc6f      	bgt.n	801e0ac <_dtoa_r+0x96c>
 801dfcc:	9b07      	ldr	r3, [sp, #28]
 801dfce:	2b02      	cmp	r3, #2
 801dfd0:	dc49      	bgt.n	801e066 <_dtoa_r+0x926>
 801dfd2:	e06b      	b.n	801e0ac <_dtoa_r+0x96c>
 801dfd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dfd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801dfda:	e73c      	b.n	801de56 <_dtoa_r+0x716>
 801dfdc:	3fe00000 	.word	0x3fe00000
 801dfe0:	40240000 	.word	0x40240000
 801dfe4:	9b03      	ldr	r3, [sp, #12]
 801dfe6:	1e5c      	subs	r4, r3, #1
 801dfe8:	9b08      	ldr	r3, [sp, #32]
 801dfea:	42a3      	cmp	r3, r4
 801dfec:	db09      	blt.n	801e002 <_dtoa_r+0x8c2>
 801dfee:	1b1c      	subs	r4, r3, r4
 801dff0:	9b03      	ldr	r3, [sp, #12]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	f6bf af30 	bge.w	801de58 <_dtoa_r+0x718>
 801dff8:	9b00      	ldr	r3, [sp, #0]
 801dffa:	9a03      	ldr	r2, [sp, #12]
 801dffc:	1a9e      	subs	r6, r3, r2
 801dffe:	2300      	movs	r3, #0
 801e000:	e72b      	b.n	801de5a <_dtoa_r+0x71a>
 801e002:	9b08      	ldr	r3, [sp, #32]
 801e004:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e006:	9408      	str	r4, [sp, #32]
 801e008:	1ae3      	subs	r3, r4, r3
 801e00a:	441a      	add	r2, r3
 801e00c:	9e00      	ldr	r6, [sp, #0]
 801e00e:	9b03      	ldr	r3, [sp, #12]
 801e010:	920d      	str	r2, [sp, #52]	@ 0x34
 801e012:	2400      	movs	r4, #0
 801e014:	e721      	b.n	801de5a <_dtoa_r+0x71a>
 801e016:	9c08      	ldr	r4, [sp, #32]
 801e018:	9e00      	ldr	r6, [sp, #0]
 801e01a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801e01c:	e728      	b.n	801de70 <_dtoa_r+0x730>
 801e01e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e022:	e751      	b.n	801dec8 <_dtoa_r+0x788>
 801e024:	9a08      	ldr	r2, [sp, #32]
 801e026:	9902      	ldr	r1, [sp, #8]
 801e028:	e750      	b.n	801decc <_dtoa_r+0x78c>
 801e02a:	f8cd 8008 	str.w	r8, [sp, #8]
 801e02e:	e751      	b.n	801ded4 <_dtoa_r+0x794>
 801e030:	2300      	movs	r3, #0
 801e032:	e779      	b.n	801df28 <_dtoa_r+0x7e8>
 801e034:	9b04      	ldr	r3, [sp, #16]
 801e036:	e777      	b.n	801df28 <_dtoa_r+0x7e8>
 801e038:	2300      	movs	r3, #0
 801e03a:	9308      	str	r3, [sp, #32]
 801e03c:	e779      	b.n	801df32 <_dtoa_r+0x7f2>
 801e03e:	d093      	beq.n	801df68 <_dtoa_r+0x828>
 801e040:	9a00      	ldr	r2, [sp, #0]
 801e042:	331c      	adds	r3, #28
 801e044:	441a      	add	r2, r3
 801e046:	9200      	str	r2, [sp, #0]
 801e048:	9a06      	ldr	r2, [sp, #24]
 801e04a:	441a      	add	r2, r3
 801e04c:	441e      	add	r6, r3
 801e04e:	9206      	str	r2, [sp, #24]
 801e050:	e78a      	b.n	801df68 <_dtoa_r+0x828>
 801e052:	4603      	mov	r3, r0
 801e054:	e7f4      	b.n	801e040 <_dtoa_r+0x900>
 801e056:	9b03      	ldr	r3, [sp, #12]
 801e058:	2b00      	cmp	r3, #0
 801e05a:	46b8      	mov	r8, r7
 801e05c:	dc20      	bgt.n	801e0a0 <_dtoa_r+0x960>
 801e05e:	469b      	mov	fp, r3
 801e060:	9b07      	ldr	r3, [sp, #28]
 801e062:	2b02      	cmp	r3, #2
 801e064:	dd1e      	ble.n	801e0a4 <_dtoa_r+0x964>
 801e066:	f1bb 0f00 	cmp.w	fp, #0
 801e06a:	f47f adb1 	bne.w	801dbd0 <_dtoa_r+0x490>
 801e06e:	4621      	mov	r1, r4
 801e070:	465b      	mov	r3, fp
 801e072:	2205      	movs	r2, #5
 801e074:	4648      	mov	r0, r9
 801e076:	f000 fa95 	bl	801e5a4 <__multadd>
 801e07a:	4601      	mov	r1, r0
 801e07c:	4604      	mov	r4, r0
 801e07e:	9802      	ldr	r0, [sp, #8]
 801e080:	f000 fca0 	bl	801e9c4 <__mcmp>
 801e084:	2800      	cmp	r0, #0
 801e086:	f77f ada3 	ble.w	801dbd0 <_dtoa_r+0x490>
 801e08a:	4656      	mov	r6, sl
 801e08c:	2331      	movs	r3, #49	@ 0x31
 801e08e:	f806 3b01 	strb.w	r3, [r6], #1
 801e092:	f108 0801 	add.w	r8, r8, #1
 801e096:	e59f      	b.n	801dbd8 <_dtoa_r+0x498>
 801e098:	9c03      	ldr	r4, [sp, #12]
 801e09a:	46b8      	mov	r8, r7
 801e09c:	4625      	mov	r5, r4
 801e09e:	e7f4      	b.n	801e08a <_dtoa_r+0x94a>
 801e0a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801e0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	f000 8101 	beq.w	801e2ae <_dtoa_r+0xb6e>
 801e0ac:	2e00      	cmp	r6, #0
 801e0ae:	dd05      	ble.n	801e0bc <_dtoa_r+0x97c>
 801e0b0:	4629      	mov	r1, r5
 801e0b2:	4632      	mov	r2, r6
 801e0b4:	4648      	mov	r0, r9
 801e0b6:	f000 fc19 	bl	801e8ec <__lshift>
 801e0ba:	4605      	mov	r5, r0
 801e0bc:	9b08      	ldr	r3, [sp, #32]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d05c      	beq.n	801e17c <_dtoa_r+0xa3c>
 801e0c2:	6869      	ldr	r1, [r5, #4]
 801e0c4:	4648      	mov	r0, r9
 801e0c6:	f000 fa0b 	bl	801e4e0 <_Balloc>
 801e0ca:	4606      	mov	r6, r0
 801e0cc:	b928      	cbnz	r0, 801e0da <_dtoa_r+0x99a>
 801e0ce:	4b82      	ldr	r3, [pc, #520]	@ (801e2d8 <_dtoa_r+0xb98>)
 801e0d0:	4602      	mov	r2, r0
 801e0d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e0d6:	f7ff bb4a 	b.w	801d76e <_dtoa_r+0x2e>
 801e0da:	692a      	ldr	r2, [r5, #16]
 801e0dc:	3202      	adds	r2, #2
 801e0de:	0092      	lsls	r2, r2, #2
 801e0e0:	f105 010c 	add.w	r1, r5, #12
 801e0e4:	300c      	adds	r0, #12
 801e0e6:	f7ff fa92 	bl	801d60e <memcpy>
 801e0ea:	2201      	movs	r2, #1
 801e0ec:	4631      	mov	r1, r6
 801e0ee:	4648      	mov	r0, r9
 801e0f0:	f000 fbfc 	bl	801e8ec <__lshift>
 801e0f4:	f10a 0301 	add.w	r3, sl, #1
 801e0f8:	9300      	str	r3, [sp, #0]
 801e0fa:	eb0a 030b 	add.w	r3, sl, fp
 801e0fe:	9308      	str	r3, [sp, #32]
 801e100:	9b04      	ldr	r3, [sp, #16]
 801e102:	f003 0301 	and.w	r3, r3, #1
 801e106:	462f      	mov	r7, r5
 801e108:	9306      	str	r3, [sp, #24]
 801e10a:	4605      	mov	r5, r0
 801e10c:	9b00      	ldr	r3, [sp, #0]
 801e10e:	9802      	ldr	r0, [sp, #8]
 801e110:	4621      	mov	r1, r4
 801e112:	f103 3bff 	add.w	fp, r3, #4294967295
 801e116:	f7ff fa88 	bl	801d62a <quorem>
 801e11a:	4603      	mov	r3, r0
 801e11c:	3330      	adds	r3, #48	@ 0x30
 801e11e:	9003      	str	r0, [sp, #12]
 801e120:	4639      	mov	r1, r7
 801e122:	9802      	ldr	r0, [sp, #8]
 801e124:	9309      	str	r3, [sp, #36]	@ 0x24
 801e126:	f000 fc4d 	bl	801e9c4 <__mcmp>
 801e12a:	462a      	mov	r2, r5
 801e12c:	9004      	str	r0, [sp, #16]
 801e12e:	4621      	mov	r1, r4
 801e130:	4648      	mov	r0, r9
 801e132:	f000 fc63 	bl	801e9fc <__mdiff>
 801e136:	68c2      	ldr	r2, [r0, #12]
 801e138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e13a:	4606      	mov	r6, r0
 801e13c:	bb02      	cbnz	r2, 801e180 <_dtoa_r+0xa40>
 801e13e:	4601      	mov	r1, r0
 801e140:	9802      	ldr	r0, [sp, #8]
 801e142:	f000 fc3f 	bl	801e9c4 <__mcmp>
 801e146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e148:	4602      	mov	r2, r0
 801e14a:	4631      	mov	r1, r6
 801e14c:	4648      	mov	r0, r9
 801e14e:	920c      	str	r2, [sp, #48]	@ 0x30
 801e150:	9309      	str	r3, [sp, #36]	@ 0x24
 801e152:	f000 fa05 	bl	801e560 <_Bfree>
 801e156:	9b07      	ldr	r3, [sp, #28]
 801e158:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e15a:	9e00      	ldr	r6, [sp, #0]
 801e15c:	ea42 0103 	orr.w	r1, r2, r3
 801e160:	9b06      	ldr	r3, [sp, #24]
 801e162:	4319      	orrs	r1, r3
 801e164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e166:	d10d      	bne.n	801e184 <_dtoa_r+0xa44>
 801e168:	2b39      	cmp	r3, #57	@ 0x39
 801e16a:	d027      	beq.n	801e1bc <_dtoa_r+0xa7c>
 801e16c:	9a04      	ldr	r2, [sp, #16]
 801e16e:	2a00      	cmp	r2, #0
 801e170:	dd01      	ble.n	801e176 <_dtoa_r+0xa36>
 801e172:	9b03      	ldr	r3, [sp, #12]
 801e174:	3331      	adds	r3, #49	@ 0x31
 801e176:	f88b 3000 	strb.w	r3, [fp]
 801e17a:	e52e      	b.n	801dbda <_dtoa_r+0x49a>
 801e17c:	4628      	mov	r0, r5
 801e17e:	e7b9      	b.n	801e0f4 <_dtoa_r+0x9b4>
 801e180:	2201      	movs	r2, #1
 801e182:	e7e2      	b.n	801e14a <_dtoa_r+0xa0a>
 801e184:	9904      	ldr	r1, [sp, #16]
 801e186:	2900      	cmp	r1, #0
 801e188:	db04      	blt.n	801e194 <_dtoa_r+0xa54>
 801e18a:	9807      	ldr	r0, [sp, #28]
 801e18c:	4301      	orrs	r1, r0
 801e18e:	9806      	ldr	r0, [sp, #24]
 801e190:	4301      	orrs	r1, r0
 801e192:	d120      	bne.n	801e1d6 <_dtoa_r+0xa96>
 801e194:	2a00      	cmp	r2, #0
 801e196:	ddee      	ble.n	801e176 <_dtoa_r+0xa36>
 801e198:	9902      	ldr	r1, [sp, #8]
 801e19a:	9300      	str	r3, [sp, #0]
 801e19c:	2201      	movs	r2, #1
 801e19e:	4648      	mov	r0, r9
 801e1a0:	f000 fba4 	bl	801e8ec <__lshift>
 801e1a4:	4621      	mov	r1, r4
 801e1a6:	9002      	str	r0, [sp, #8]
 801e1a8:	f000 fc0c 	bl	801e9c4 <__mcmp>
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	9b00      	ldr	r3, [sp, #0]
 801e1b0:	dc02      	bgt.n	801e1b8 <_dtoa_r+0xa78>
 801e1b2:	d1e0      	bne.n	801e176 <_dtoa_r+0xa36>
 801e1b4:	07da      	lsls	r2, r3, #31
 801e1b6:	d5de      	bpl.n	801e176 <_dtoa_r+0xa36>
 801e1b8:	2b39      	cmp	r3, #57	@ 0x39
 801e1ba:	d1da      	bne.n	801e172 <_dtoa_r+0xa32>
 801e1bc:	2339      	movs	r3, #57	@ 0x39
 801e1be:	f88b 3000 	strb.w	r3, [fp]
 801e1c2:	4633      	mov	r3, r6
 801e1c4:	461e      	mov	r6, r3
 801e1c6:	3b01      	subs	r3, #1
 801e1c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e1cc:	2a39      	cmp	r2, #57	@ 0x39
 801e1ce:	d04e      	beq.n	801e26e <_dtoa_r+0xb2e>
 801e1d0:	3201      	adds	r2, #1
 801e1d2:	701a      	strb	r2, [r3, #0]
 801e1d4:	e501      	b.n	801dbda <_dtoa_r+0x49a>
 801e1d6:	2a00      	cmp	r2, #0
 801e1d8:	dd03      	ble.n	801e1e2 <_dtoa_r+0xaa2>
 801e1da:	2b39      	cmp	r3, #57	@ 0x39
 801e1dc:	d0ee      	beq.n	801e1bc <_dtoa_r+0xa7c>
 801e1de:	3301      	adds	r3, #1
 801e1e0:	e7c9      	b.n	801e176 <_dtoa_r+0xa36>
 801e1e2:	9a00      	ldr	r2, [sp, #0]
 801e1e4:	9908      	ldr	r1, [sp, #32]
 801e1e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e1ea:	428a      	cmp	r2, r1
 801e1ec:	d028      	beq.n	801e240 <_dtoa_r+0xb00>
 801e1ee:	9902      	ldr	r1, [sp, #8]
 801e1f0:	2300      	movs	r3, #0
 801e1f2:	220a      	movs	r2, #10
 801e1f4:	4648      	mov	r0, r9
 801e1f6:	f000 f9d5 	bl	801e5a4 <__multadd>
 801e1fa:	42af      	cmp	r7, r5
 801e1fc:	9002      	str	r0, [sp, #8]
 801e1fe:	f04f 0300 	mov.w	r3, #0
 801e202:	f04f 020a 	mov.w	r2, #10
 801e206:	4639      	mov	r1, r7
 801e208:	4648      	mov	r0, r9
 801e20a:	d107      	bne.n	801e21c <_dtoa_r+0xadc>
 801e20c:	f000 f9ca 	bl	801e5a4 <__multadd>
 801e210:	4607      	mov	r7, r0
 801e212:	4605      	mov	r5, r0
 801e214:	9b00      	ldr	r3, [sp, #0]
 801e216:	3301      	adds	r3, #1
 801e218:	9300      	str	r3, [sp, #0]
 801e21a:	e777      	b.n	801e10c <_dtoa_r+0x9cc>
 801e21c:	f000 f9c2 	bl	801e5a4 <__multadd>
 801e220:	4629      	mov	r1, r5
 801e222:	4607      	mov	r7, r0
 801e224:	2300      	movs	r3, #0
 801e226:	220a      	movs	r2, #10
 801e228:	4648      	mov	r0, r9
 801e22a:	f000 f9bb 	bl	801e5a4 <__multadd>
 801e22e:	4605      	mov	r5, r0
 801e230:	e7f0      	b.n	801e214 <_dtoa_r+0xad4>
 801e232:	f1bb 0f00 	cmp.w	fp, #0
 801e236:	bfcc      	ite	gt
 801e238:	465e      	movgt	r6, fp
 801e23a:	2601      	movle	r6, #1
 801e23c:	4456      	add	r6, sl
 801e23e:	2700      	movs	r7, #0
 801e240:	9902      	ldr	r1, [sp, #8]
 801e242:	9300      	str	r3, [sp, #0]
 801e244:	2201      	movs	r2, #1
 801e246:	4648      	mov	r0, r9
 801e248:	f000 fb50 	bl	801e8ec <__lshift>
 801e24c:	4621      	mov	r1, r4
 801e24e:	9002      	str	r0, [sp, #8]
 801e250:	f000 fbb8 	bl	801e9c4 <__mcmp>
 801e254:	2800      	cmp	r0, #0
 801e256:	dcb4      	bgt.n	801e1c2 <_dtoa_r+0xa82>
 801e258:	d102      	bne.n	801e260 <_dtoa_r+0xb20>
 801e25a:	9b00      	ldr	r3, [sp, #0]
 801e25c:	07db      	lsls	r3, r3, #31
 801e25e:	d4b0      	bmi.n	801e1c2 <_dtoa_r+0xa82>
 801e260:	4633      	mov	r3, r6
 801e262:	461e      	mov	r6, r3
 801e264:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e268:	2a30      	cmp	r2, #48	@ 0x30
 801e26a:	d0fa      	beq.n	801e262 <_dtoa_r+0xb22>
 801e26c:	e4b5      	b.n	801dbda <_dtoa_r+0x49a>
 801e26e:	459a      	cmp	sl, r3
 801e270:	d1a8      	bne.n	801e1c4 <_dtoa_r+0xa84>
 801e272:	2331      	movs	r3, #49	@ 0x31
 801e274:	f108 0801 	add.w	r8, r8, #1
 801e278:	f88a 3000 	strb.w	r3, [sl]
 801e27c:	e4ad      	b.n	801dbda <_dtoa_r+0x49a>
 801e27e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e280:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801e2dc <_dtoa_r+0xb9c>
 801e284:	b11b      	cbz	r3, 801e28e <_dtoa_r+0xb4e>
 801e286:	f10a 0308 	add.w	r3, sl, #8
 801e28a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e28c:	6013      	str	r3, [r2, #0]
 801e28e:	4650      	mov	r0, sl
 801e290:	b017      	add	sp, #92	@ 0x5c
 801e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e296:	9b07      	ldr	r3, [sp, #28]
 801e298:	2b01      	cmp	r3, #1
 801e29a:	f77f ae2e 	ble.w	801defa <_dtoa_r+0x7ba>
 801e29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2a0:	9308      	str	r3, [sp, #32]
 801e2a2:	2001      	movs	r0, #1
 801e2a4:	e64d      	b.n	801df42 <_dtoa_r+0x802>
 801e2a6:	f1bb 0f00 	cmp.w	fp, #0
 801e2aa:	f77f aed9 	ble.w	801e060 <_dtoa_r+0x920>
 801e2ae:	4656      	mov	r6, sl
 801e2b0:	9802      	ldr	r0, [sp, #8]
 801e2b2:	4621      	mov	r1, r4
 801e2b4:	f7ff f9b9 	bl	801d62a <quorem>
 801e2b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801e2bc:	f806 3b01 	strb.w	r3, [r6], #1
 801e2c0:	eba6 020a 	sub.w	r2, r6, sl
 801e2c4:	4593      	cmp	fp, r2
 801e2c6:	ddb4      	ble.n	801e232 <_dtoa_r+0xaf2>
 801e2c8:	9902      	ldr	r1, [sp, #8]
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	220a      	movs	r2, #10
 801e2ce:	4648      	mov	r0, r9
 801e2d0:	f000 f968 	bl	801e5a4 <__multadd>
 801e2d4:	9002      	str	r0, [sp, #8]
 801e2d6:	e7eb      	b.n	801e2b0 <_dtoa_r+0xb70>
 801e2d8:	08020854 	.word	0x08020854
 801e2dc:	080207d8 	.word	0x080207d8

0801e2e0 <_free_r>:
 801e2e0:	b538      	push	{r3, r4, r5, lr}
 801e2e2:	4605      	mov	r5, r0
 801e2e4:	2900      	cmp	r1, #0
 801e2e6:	d041      	beq.n	801e36c <_free_r+0x8c>
 801e2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e2ec:	1f0c      	subs	r4, r1, #4
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	bfb8      	it	lt
 801e2f2:	18e4      	addlt	r4, r4, r3
 801e2f4:	f000 f8e8 	bl	801e4c8 <__malloc_lock>
 801e2f8:	4a1d      	ldr	r2, [pc, #116]	@ (801e370 <_free_r+0x90>)
 801e2fa:	6813      	ldr	r3, [r2, #0]
 801e2fc:	b933      	cbnz	r3, 801e30c <_free_r+0x2c>
 801e2fe:	6063      	str	r3, [r4, #4]
 801e300:	6014      	str	r4, [r2, #0]
 801e302:	4628      	mov	r0, r5
 801e304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e308:	f000 b8e4 	b.w	801e4d4 <__malloc_unlock>
 801e30c:	42a3      	cmp	r3, r4
 801e30e:	d908      	bls.n	801e322 <_free_r+0x42>
 801e310:	6820      	ldr	r0, [r4, #0]
 801e312:	1821      	adds	r1, r4, r0
 801e314:	428b      	cmp	r3, r1
 801e316:	bf01      	itttt	eq
 801e318:	6819      	ldreq	r1, [r3, #0]
 801e31a:	685b      	ldreq	r3, [r3, #4]
 801e31c:	1809      	addeq	r1, r1, r0
 801e31e:	6021      	streq	r1, [r4, #0]
 801e320:	e7ed      	b.n	801e2fe <_free_r+0x1e>
 801e322:	461a      	mov	r2, r3
 801e324:	685b      	ldr	r3, [r3, #4]
 801e326:	b10b      	cbz	r3, 801e32c <_free_r+0x4c>
 801e328:	42a3      	cmp	r3, r4
 801e32a:	d9fa      	bls.n	801e322 <_free_r+0x42>
 801e32c:	6811      	ldr	r1, [r2, #0]
 801e32e:	1850      	adds	r0, r2, r1
 801e330:	42a0      	cmp	r0, r4
 801e332:	d10b      	bne.n	801e34c <_free_r+0x6c>
 801e334:	6820      	ldr	r0, [r4, #0]
 801e336:	4401      	add	r1, r0
 801e338:	1850      	adds	r0, r2, r1
 801e33a:	4283      	cmp	r3, r0
 801e33c:	6011      	str	r1, [r2, #0]
 801e33e:	d1e0      	bne.n	801e302 <_free_r+0x22>
 801e340:	6818      	ldr	r0, [r3, #0]
 801e342:	685b      	ldr	r3, [r3, #4]
 801e344:	6053      	str	r3, [r2, #4]
 801e346:	4408      	add	r0, r1
 801e348:	6010      	str	r0, [r2, #0]
 801e34a:	e7da      	b.n	801e302 <_free_r+0x22>
 801e34c:	d902      	bls.n	801e354 <_free_r+0x74>
 801e34e:	230c      	movs	r3, #12
 801e350:	602b      	str	r3, [r5, #0]
 801e352:	e7d6      	b.n	801e302 <_free_r+0x22>
 801e354:	6820      	ldr	r0, [r4, #0]
 801e356:	1821      	adds	r1, r4, r0
 801e358:	428b      	cmp	r3, r1
 801e35a:	bf04      	itt	eq
 801e35c:	6819      	ldreq	r1, [r3, #0]
 801e35e:	685b      	ldreq	r3, [r3, #4]
 801e360:	6063      	str	r3, [r4, #4]
 801e362:	bf04      	itt	eq
 801e364:	1809      	addeq	r1, r1, r0
 801e366:	6021      	streq	r1, [r4, #0]
 801e368:	6054      	str	r4, [r2, #4]
 801e36a:	e7ca      	b.n	801e302 <_free_r+0x22>
 801e36c:	bd38      	pop	{r3, r4, r5, pc}
 801e36e:	bf00      	nop
 801e370:	20001908 	.word	0x20001908

0801e374 <malloc>:
 801e374:	4b02      	ldr	r3, [pc, #8]	@ (801e380 <malloc+0xc>)
 801e376:	4601      	mov	r1, r0
 801e378:	6818      	ldr	r0, [r3, #0]
 801e37a:	f000 b825 	b.w	801e3c8 <_malloc_r>
 801e37e:	bf00      	nop
 801e380:	2000002c 	.word	0x2000002c

0801e384 <sbrk_aligned>:
 801e384:	b570      	push	{r4, r5, r6, lr}
 801e386:	4e0f      	ldr	r6, [pc, #60]	@ (801e3c4 <sbrk_aligned+0x40>)
 801e388:	460c      	mov	r4, r1
 801e38a:	6831      	ldr	r1, [r6, #0]
 801e38c:	4605      	mov	r5, r0
 801e38e:	b911      	cbnz	r1, 801e396 <sbrk_aligned+0x12>
 801e390:	f000 fe1a 	bl	801efc8 <_sbrk_r>
 801e394:	6030      	str	r0, [r6, #0]
 801e396:	4621      	mov	r1, r4
 801e398:	4628      	mov	r0, r5
 801e39a:	f000 fe15 	bl	801efc8 <_sbrk_r>
 801e39e:	1c43      	adds	r3, r0, #1
 801e3a0:	d103      	bne.n	801e3aa <sbrk_aligned+0x26>
 801e3a2:	f04f 34ff 	mov.w	r4, #4294967295
 801e3a6:	4620      	mov	r0, r4
 801e3a8:	bd70      	pop	{r4, r5, r6, pc}
 801e3aa:	1cc4      	adds	r4, r0, #3
 801e3ac:	f024 0403 	bic.w	r4, r4, #3
 801e3b0:	42a0      	cmp	r0, r4
 801e3b2:	d0f8      	beq.n	801e3a6 <sbrk_aligned+0x22>
 801e3b4:	1a21      	subs	r1, r4, r0
 801e3b6:	4628      	mov	r0, r5
 801e3b8:	f000 fe06 	bl	801efc8 <_sbrk_r>
 801e3bc:	3001      	adds	r0, #1
 801e3be:	d1f2      	bne.n	801e3a6 <sbrk_aligned+0x22>
 801e3c0:	e7ef      	b.n	801e3a2 <sbrk_aligned+0x1e>
 801e3c2:	bf00      	nop
 801e3c4:	20001904 	.word	0x20001904

0801e3c8 <_malloc_r>:
 801e3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3cc:	1ccd      	adds	r5, r1, #3
 801e3ce:	f025 0503 	bic.w	r5, r5, #3
 801e3d2:	3508      	adds	r5, #8
 801e3d4:	2d0c      	cmp	r5, #12
 801e3d6:	bf38      	it	cc
 801e3d8:	250c      	movcc	r5, #12
 801e3da:	2d00      	cmp	r5, #0
 801e3dc:	4606      	mov	r6, r0
 801e3de:	db01      	blt.n	801e3e4 <_malloc_r+0x1c>
 801e3e0:	42a9      	cmp	r1, r5
 801e3e2:	d904      	bls.n	801e3ee <_malloc_r+0x26>
 801e3e4:	230c      	movs	r3, #12
 801e3e6:	6033      	str	r3, [r6, #0]
 801e3e8:	2000      	movs	r0, #0
 801e3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e4c4 <_malloc_r+0xfc>
 801e3f2:	f000 f869 	bl	801e4c8 <__malloc_lock>
 801e3f6:	f8d8 3000 	ldr.w	r3, [r8]
 801e3fa:	461c      	mov	r4, r3
 801e3fc:	bb44      	cbnz	r4, 801e450 <_malloc_r+0x88>
 801e3fe:	4629      	mov	r1, r5
 801e400:	4630      	mov	r0, r6
 801e402:	f7ff ffbf 	bl	801e384 <sbrk_aligned>
 801e406:	1c43      	adds	r3, r0, #1
 801e408:	4604      	mov	r4, r0
 801e40a:	d158      	bne.n	801e4be <_malloc_r+0xf6>
 801e40c:	f8d8 4000 	ldr.w	r4, [r8]
 801e410:	4627      	mov	r7, r4
 801e412:	2f00      	cmp	r7, #0
 801e414:	d143      	bne.n	801e49e <_malloc_r+0xd6>
 801e416:	2c00      	cmp	r4, #0
 801e418:	d04b      	beq.n	801e4b2 <_malloc_r+0xea>
 801e41a:	6823      	ldr	r3, [r4, #0]
 801e41c:	4639      	mov	r1, r7
 801e41e:	4630      	mov	r0, r6
 801e420:	eb04 0903 	add.w	r9, r4, r3
 801e424:	f000 fdd0 	bl	801efc8 <_sbrk_r>
 801e428:	4581      	cmp	r9, r0
 801e42a:	d142      	bne.n	801e4b2 <_malloc_r+0xea>
 801e42c:	6821      	ldr	r1, [r4, #0]
 801e42e:	1a6d      	subs	r5, r5, r1
 801e430:	4629      	mov	r1, r5
 801e432:	4630      	mov	r0, r6
 801e434:	f7ff ffa6 	bl	801e384 <sbrk_aligned>
 801e438:	3001      	adds	r0, #1
 801e43a:	d03a      	beq.n	801e4b2 <_malloc_r+0xea>
 801e43c:	6823      	ldr	r3, [r4, #0]
 801e43e:	442b      	add	r3, r5
 801e440:	6023      	str	r3, [r4, #0]
 801e442:	f8d8 3000 	ldr.w	r3, [r8]
 801e446:	685a      	ldr	r2, [r3, #4]
 801e448:	bb62      	cbnz	r2, 801e4a4 <_malloc_r+0xdc>
 801e44a:	f8c8 7000 	str.w	r7, [r8]
 801e44e:	e00f      	b.n	801e470 <_malloc_r+0xa8>
 801e450:	6822      	ldr	r2, [r4, #0]
 801e452:	1b52      	subs	r2, r2, r5
 801e454:	d420      	bmi.n	801e498 <_malloc_r+0xd0>
 801e456:	2a0b      	cmp	r2, #11
 801e458:	d917      	bls.n	801e48a <_malloc_r+0xc2>
 801e45a:	1961      	adds	r1, r4, r5
 801e45c:	42a3      	cmp	r3, r4
 801e45e:	6025      	str	r5, [r4, #0]
 801e460:	bf18      	it	ne
 801e462:	6059      	strne	r1, [r3, #4]
 801e464:	6863      	ldr	r3, [r4, #4]
 801e466:	bf08      	it	eq
 801e468:	f8c8 1000 	streq.w	r1, [r8]
 801e46c:	5162      	str	r2, [r4, r5]
 801e46e:	604b      	str	r3, [r1, #4]
 801e470:	4630      	mov	r0, r6
 801e472:	f000 f82f 	bl	801e4d4 <__malloc_unlock>
 801e476:	f104 000b 	add.w	r0, r4, #11
 801e47a:	1d23      	adds	r3, r4, #4
 801e47c:	f020 0007 	bic.w	r0, r0, #7
 801e480:	1ac2      	subs	r2, r0, r3
 801e482:	bf1c      	itt	ne
 801e484:	1a1b      	subne	r3, r3, r0
 801e486:	50a3      	strne	r3, [r4, r2]
 801e488:	e7af      	b.n	801e3ea <_malloc_r+0x22>
 801e48a:	6862      	ldr	r2, [r4, #4]
 801e48c:	42a3      	cmp	r3, r4
 801e48e:	bf0c      	ite	eq
 801e490:	f8c8 2000 	streq.w	r2, [r8]
 801e494:	605a      	strne	r2, [r3, #4]
 801e496:	e7eb      	b.n	801e470 <_malloc_r+0xa8>
 801e498:	4623      	mov	r3, r4
 801e49a:	6864      	ldr	r4, [r4, #4]
 801e49c:	e7ae      	b.n	801e3fc <_malloc_r+0x34>
 801e49e:	463c      	mov	r4, r7
 801e4a0:	687f      	ldr	r7, [r7, #4]
 801e4a2:	e7b6      	b.n	801e412 <_malloc_r+0x4a>
 801e4a4:	461a      	mov	r2, r3
 801e4a6:	685b      	ldr	r3, [r3, #4]
 801e4a8:	42a3      	cmp	r3, r4
 801e4aa:	d1fb      	bne.n	801e4a4 <_malloc_r+0xdc>
 801e4ac:	2300      	movs	r3, #0
 801e4ae:	6053      	str	r3, [r2, #4]
 801e4b0:	e7de      	b.n	801e470 <_malloc_r+0xa8>
 801e4b2:	230c      	movs	r3, #12
 801e4b4:	6033      	str	r3, [r6, #0]
 801e4b6:	4630      	mov	r0, r6
 801e4b8:	f000 f80c 	bl	801e4d4 <__malloc_unlock>
 801e4bc:	e794      	b.n	801e3e8 <_malloc_r+0x20>
 801e4be:	6005      	str	r5, [r0, #0]
 801e4c0:	e7d6      	b.n	801e470 <_malloc_r+0xa8>
 801e4c2:	bf00      	nop
 801e4c4:	20001908 	.word	0x20001908

0801e4c8 <__malloc_lock>:
 801e4c8:	4801      	ldr	r0, [pc, #4]	@ (801e4d0 <__malloc_lock+0x8>)
 801e4ca:	f7ff b89e 	b.w	801d60a <__retarget_lock_acquire_recursive>
 801e4ce:	bf00      	nop
 801e4d0:	20001900 	.word	0x20001900

0801e4d4 <__malloc_unlock>:
 801e4d4:	4801      	ldr	r0, [pc, #4]	@ (801e4dc <__malloc_unlock+0x8>)
 801e4d6:	f7ff b899 	b.w	801d60c <__retarget_lock_release_recursive>
 801e4da:	bf00      	nop
 801e4dc:	20001900 	.word	0x20001900

0801e4e0 <_Balloc>:
 801e4e0:	b570      	push	{r4, r5, r6, lr}
 801e4e2:	69c6      	ldr	r6, [r0, #28]
 801e4e4:	4604      	mov	r4, r0
 801e4e6:	460d      	mov	r5, r1
 801e4e8:	b976      	cbnz	r6, 801e508 <_Balloc+0x28>
 801e4ea:	2010      	movs	r0, #16
 801e4ec:	f7ff ff42 	bl	801e374 <malloc>
 801e4f0:	4602      	mov	r2, r0
 801e4f2:	61e0      	str	r0, [r4, #28]
 801e4f4:	b920      	cbnz	r0, 801e500 <_Balloc+0x20>
 801e4f6:	4b18      	ldr	r3, [pc, #96]	@ (801e558 <_Balloc+0x78>)
 801e4f8:	4818      	ldr	r0, [pc, #96]	@ (801e55c <_Balloc+0x7c>)
 801e4fa:	216b      	movs	r1, #107	@ 0x6b
 801e4fc:	f000 fd74 	bl	801efe8 <__assert_func>
 801e500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e504:	6006      	str	r6, [r0, #0]
 801e506:	60c6      	str	r6, [r0, #12]
 801e508:	69e6      	ldr	r6, [r4, #28]
 801e50a:	68f3      	ldr	r3, [r6, #12]
 801e50c:	b183      	cbz	r3, 801e530 <_Balloc+0x50>
 801e50e:	69e3      	ldr	r3, [r4, #28]
 801e510:	68db      	ldr	r3, [r3, #12]
 801e512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e516:	b9b8      	cbnz	r0, 801e548 <_Balloc+0x68>
 801e518:	2101      	movs	r1, #1
 801e51a:	fa01 f605 	lsl.w	r6, r1, r5
 801e51e:	1d72      	adds	r2, r6, #5
 801e520:	0092      	lsls	r2, r2, #2
 801e522:	4620      	mov	r0, r4
 801e524:	f000 fd7e 	bl	801f024 <_calloc_r>
 801e528:	b160      	cbz	r0, 801e544 <_Balloc+0x64>
 801e52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e52e:	e00e      	b.n	801e54e <_Balloc+0x6e>
 801e530:	2221      	movs	r2, #33	@ 0x21
 801e532:	2104      	movs	r1, #4
 801e534:	4620      	mov	r0, r4
 801e536:	f000 fd75 	bl	801f024 <_calloc_r>
 801e53a:	69e3      	ldr	r3, [r4, #28]
 801e53c:	60f0      	str	r0, [r6, #12]
 801e53e:	68db      	ldr	r3, [r3, #12]
 801e540:	2b00      	cmp	r3, #0
 801e542:	d1e4      	bne.n	801e50e <_Balloc+0x2e>
 801e544:	2000      	movs	r0, #0
 801e546:	bd70      	pop	{r4, r5, r6, pc}
 801e548:	6802      	ldr	r2, [r0, #0]
 801e54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e54e:	2300      	movs	r3, #0
 801e550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e554:	e7f7      	b.n	801e546 <_Balloc+0x66>
 801e556:	bf00      	nop
 801e558:	080207e5 	.word	0x080207e5
 801e55c:	08020865 	.word	0x08020865

0801e560 <_Bfree>:
 801e560:	b570      	push	{r4, r5, r6, lr}
 801e562:	69c6      	ldr	r6, [r0, #28]
 801e564:	4605      	mov	r5, r0
 801e566:	460c      	mov	r4, r1
 801e568:	b976      	cbnz	r6, 801e588 <_Bfree+0x28>
 801e56a:	2010      	movs	r0, #16
 801e56c:	f7ff ff02 	bl	801e374 <malloc>
 801e570:	4602      	mov	r2, r0
 801e572:	61e8      	str	r0, [r5, #28]
 801e574:	b920      	cbnz	r0, 801e580 <_Bfree+0x20>
 801e576:	4b09      	ldr	r3, [pc, #36]	@ (801e59c <_Bfree+0x3c>)
 801e578:	4809      	ldr	r0, [pc, #36]	@ (801e5a0 <_Bfree+0x40>)
 801e57a:	218f      	movs	r1, #143	@ 0x8f
 801e57c:	f000 fd34 	bl	801efe8 <__assert_func>
 801e580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e584:	6006      	str	r6, [r0, #0]
 801e586:	60c6      	str	r6, [r0, #12]
 801e588:	b13c      	cbz	r4, 801e59a <_Bfree+0x3a>
 801e58a:	69eb      	ldr	r3, [r5, #28]
 801e58c:	6862      	ldr	r2, [r4, #4]
 801e58e:	68db      	ldr	r3, [r3, #12]
 801e590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e594:	6021      	str	r1, [r4, #0]
 801e596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e59a:	bd70      	pop	{r4, r5, r6, pc}
 801e59c:	080207e5 	.word	0x080207e5
 801e5a0:	08020865 	.word	0x08020865

0801e5a4 <__multadd>:
 801e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5a8:	690d      	ldr	r5, [r1, #16]
 801e5aa:	4607      	mov	r7, r0
 801e5ac:	460c      	mov	r4, r1
 801e5ae:	461e      	mov	r6, r3
 801e5b0:	f101 0c14 	add.w	ip, r1, #20
 801e5b4:	2000      	movs	r0, #0
 801e5b6:	f8dc 3000 	ldr.w	r3, [ip]
 801e5ba:	b299      	uxth	r1, r3
 801e5bc:	fb02 6101 	mla	r1, r2, r1, r6
 801e5c0:	0c1e      	lsrs	r6, r3, #16
 801e5c2:	0c0b      	lsrs	r3, r1, #16
 801e5c4:	fb02 3306 	mla	r3, r2, r6, r3
 801e5c8:	b289      	uxth	r1, r1
 801e5ca:	3001      	adds	r0, #1
 801e5cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e5d0:	4285      	cmp	r5, r0
 801e5d2:	f84c 1b04 	str.w	r1, [ip], #4
 801e5d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e5da:	dcec      	bgt.n	801e5b6 <__multadd+0x12>
 801e5dc:	b30e      	cbz	r6, 801e622 <__multadd+0x7e>
 801e5de:	68a3      	ldr	r3, [r4, #8]
 801e5e0:	42ab      	cmp	r3, r5
 801e5e2:	dc19      	bgt.n	801e618 <__multadd+0x74>
 801e5e4:	6861      	ldr	r1, [r4, #4]
 801e5e6:	4638      	mov	r0, r7
 801e5e8:	3101      	adds	r1, #1
 801e5ea:	f7ff ff79 	bl	801e4e0 <_Balloc>
 801e5ee:	4680      	mov	r8, r0
 801e5f0:	b928      	cbnz	r0, 801e5fe <__multadd+0x5a>
 801e5f2:	4602      	mov	r2, r0
 801e5f4:	4b0c      	ldr	r3, [pc, #48]	@ (801e628 <__multadd+0x84>)
 801e5f6:	480d      	ldr	r0, [pc, #52]	@ (801e62c <__multadd+0x88>)
 801e5f8:	21ba      	movs	r1, #186	@ 0xba
 801e5fa:	f000 fcf5 	bl	801efe8 <__assert_func>
 801e5fe:	6922      	ldr	r2, [r4, #16]
 801e600:	3202      	adds	r2, #2
 801e602:	f104 010c 	add.w	r1, r4, #12
 801e606:	0092      	lsls	r2, r2, #2
 801e608:	300c      	adds	r0, #12
 801e60a:	f7ff f800 	bl	801d60e <memcpy>
 801e60e:	4621      	mov	r1, r4
 801e610:	4638      	mov	r0, r7
 801e612:	f7ff ffa5 	bl	801e560 <_Bfree>
 801e616:	4644      	mov	r4, r8
 801e618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e61c:	3501      	adds	r5, #1
 801e61e:	615e      	str	r6, [r3, #20]
 801e620:	6125      	str	r5, [r4, #16]
 801e622:	4620      	mov	r0, r4
 801e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e628:	08020854 	.word	0x08020854
 801e62c:	08020865 	.word	0x08020865

0801e630 <__hi0bits>:
 801e630:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e634:	4603      	mov	r3, r0
 801e636:	bf36      	itet	cc
 801e638:	0403      	lslcc	r3, r0, #16
 801e63a:	2000      	movcs	r0, #0
 801e63c:	2010      	movcc	r0, #16
 801e63e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e642:	bf3c      	itt	cc
 801e644:	021b      	lslcc	r3, r3, #8
 801e646:	3008      	addcc	r0, #8
 801e648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e64c:	bf3c      	itt	cc
 801e64e:	011b      	lslcc	r3, r3, #4
 801e650:	3004      	addcc	r0, #4
 801e652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e656:	bf3c      	itt	cc
 801e658:	009b      	lslcc	r3, r3, #2
 801e65a:	3002      	addcc	r0, #2
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	db05      	blt.n	801e66c <__hi0bits+0x3c>
 801e660:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e664:	f100 0001 	add.w	r0, r0, #1
 801e668:	bf08      	it	eq
 801e66a:	2020      	moveq	r0, #32
 801e66c:	4770      	bx	lr

0801e66e <__lo0bits>:
 801e66e:	6803      	ldr	r3, [r0, #0]
 801e670:	4602      	mov	r2, r0
 801e672:	f013 0007 	ands.w	r0, r3, #7
 801e676:	d00b      	beq.n	801e690 <__lo0bits+0x22>
 801e678:	07d9      	lsls	r1, r3, #31
 801e67a:	d421      	bmi.n	801e6c0 <__lo0bits+0x52>
 801e67c:	0798      	lsls	r0, r3, #30
 801e67e:	bf49      	itett	mi
 801e680:	085b      	lsrmi	r3, r3, #1
 801e682:	089b      	lsrpl	r3, r3, #2
 801e684:	2001      	movmi	r0, #1
 801e686:	6013      	strmi	r3, [r2, #0]
 801e688:	bf5c      	itt	pl
 801e68a:	6013      	strpl	r3, [r2, #0]
 801e68c:	2002      	movpl	r0, #2
 801e68e:	4770      	bx	lr
 801e690:	b299      	uxth	r1, r3
 801e692:	b909      	cbnz	r1, 801e698 <__lo0bits+0x2a>
 801e694:	0c1b      	lsrs	r3, r3, #16
 801e696:	2010      	movs	r0, #16
 801e698:	b2d9      	uxtb	r1, r3
 801e69a:	b909      	cbnz	r1, 801e6a0 <__lo0bits+0x32>
 801e69c:	3008      	adds	r0, #8
 801e69e:	0a1b      	lsrs	r3, r3, #8
 801e6a0:	0719      	lsls	r1, r3, #28
 801e6a2:	bf04      	itt	eq
 801e6a4:	091b      	lsreq	r3, r3, #4
 801e6a6:	3004      	addeq	r0, #4
 801e6a8:	0799      	lsls	r1, r3, #30
 801e6aa:	bf04      	itt	eq
 801e6ac:	089b      	lsreq	r3, r3, #2
 801e6ae:	3002      	addeq	r0, #2
 801e6b0:	07d9      	lsls	r1, r3, #31
 801e6b2:	d403      	bmi.n	801e6bc <__lo0bits+0x4e>
 801e6b4:	085b      	lsrs	r3, r3, #1
 801e6b6:	f100 0001 	add.w	r0, r0, #1
 801e6ba:	d003      	beq.n	801e6c4 <__lo0bits+0x56>
 801e6bc:	6013      	str	r3, [r2, #0]
 801e6be:	4770      	bx	lr
 801e6c0:	2000      	movs	r0, #0
 801e6c2:	4770      	bx	lr
 801e6c4:	2020      	movs	r0, #32
 801e6c6:	4770      	bx	lr

0801e6c8 <__i2b>:
 801e6c8:	b510      	push	{r4, lr}
 801e6ca:	460c      	mov	r4, r1
 801e6cc:	2101      	movs	r1, #1
 801e6ce:	f7ff ff07 	bl	801e4e0 <_Balloc>
 801e6d2:	4602      	mov	r2, r0
 801e6d4:	b928      	cbnz	r0, 801e6e2 <__i2b+0x1a>
 801e6d6:	4b05      	ldr	r3, [pc, #20]	@ (801e6ec <__i2b+0x24>)
 801e6d8:	4805      	ldr	r0, [pc, #20]	@ (801e6f0 <__i2b+0x28>)
 801e6da:	f240 1145 	movw	r1, #325	@ 0x145
 801e6de:	f000 fc83 	bl	801efe8 <__assert_func>
 801e6e2:	2301      	movs	r3, #1
 801e6e4:	6144      	str	r4, [r0, #20]
 801e6e6:	6103      	str	r3, [r0, #16]
 801e6e8:	bd10      	pop	{r4, pc}
 801e6ea:	bf00      	nop
 801e6ec:	08020854 	.word	0x08020854
 801e6f0:	08020865 	.word	0x08020865

0801e6f4 <__multiply>:
 801e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6f8:	4617      	mov	r7, r2
 801e6fa:	690a      	ldr	r2, [r1, #16]
 801e6fc:	693b      	ldr	r3, [r7, #16]
 801e6fe:	429a      	cmp	r2, r3
 801e700:	bfa8      	it	ge
 801e702:	463b      	movge	r3, r7
 801e704:	4689      	mov	r9, r1
 801e706:	bfa4      	itt	ge
 801e708:	460f      	movge	r7, r1
 801e70a:	4699      	movge	r9, r3
 801e70c:	693d      	ldr	r5, [r7, #16]
 801e70e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e712:	68bb      	ldr	r3, [r7, #8]
 801e714:	6879      	ldr	r1, [r7, #4]
 801e716:	eb05 060a 	add.w	r6, r5, sl
 801e71a:	42b3      	cmp	r3, r6
 801e71c:	b085      	sub	sp, #20
 801e71e:	bfb8      	it	lt
 801e720:	3101      	addlt	r1, #1
 801e722:	f7ff fedd 	bl	801e4e0 <_Balloc>
 801e726:	b930      	cbnz	r0, 801e736 <__multiply+0x42>
 801e728:	4602      	mov	r2, r0
 801e72a:	4b41      	ldr	r3, [pc, #260]	@ (801e830 <__multiply+0x13c>)
 801e72c:	4841      	ldr	r0, [pc, #260]	@ (801e834 <__multiply+0x140>)
 801e72e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e732:	f000 fc59 	bl	801efe8 <__assert_func>
 801e736:	f100 0414 	add.w	r4, r0, #20
 801e73a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801e73e:	4623      	mov	r3, r4
 801e740:	2200      	movs	r2, #0
 801e742:	4573      	cmp	r3, lr
 801e744:	d320      	bcc.n	801e788 <__multiply+0x94>
 801e746:	f107 0814 	add.w	r8, r7, #20
 801e74a:	f109 0114 	add.w	r1, r9, #20
 801e74e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801e752:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801e756:	9302      	str	r3, [sp, #8]
 801e758:	1beb      	subs	r3, r5, r7
 801e75a:	3b15      	subs	r3, #21
 801e75c:	f023 0303 	bic.w	r3, r3, #3
 801e760:	3304      	adds	r3, #4
 801e762:	3715      	adds	r7, #21
 801e764:	42bd      	cmp	r5, r7
 801e766:	bf38      	it	cc
 801e768:	2304      	movcc	r3, #4
 801e76a:	9301      	str	r3, [sp, #4]
 801e76c:	9b02      	ldr	r3, [sp, #8]
 801e76e:	9103      	str	r1, [sp, #12]
 801e770:	428b      	cmp	r3, r1
 801e772:	d80c      	bhi.n	801e78e <__multiply+0x9a>
 801e774:	2e00      	cmp	r6, #0
 801e776:	dd03      	ble.n	801e780 <__multiply+0x8c>
 801e778:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d055      	beq.n	801e82c <__multiply+0x138>
 801e780:	6106      	str	r6, [r0, #16]
 801e782:	b005      	add	sp, #20
 801e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e788:	f843 2b04 	str.w	r2, [r3], #4
 801e78c:	e7d9      	b.n	801e742 <__multiply+0x4e>
 801e78e:	f8b1 a000 	ldrh.w	sl, [r1]
 801e792:	f1ba 0f00 	cmp.w	sl, #0
 801e796:	d01f      	beq.n	801e7d8 <__multiply+0xe4>
 801e798:	46c4      	mov	ip, r8
 801e79a:	46a1      	mov	r9, r4
 801e79c:	2700      	movs	r7, #0
 801e79e:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e7a2:	f8d9 3000 	ldr.w	r3, [r9]
 801e7a6:	fa1f fb82 	uxth.w	fp, r2
 801e7aa:	b29b      	uxth	r3, r3
 801e7ac:	fb0a 330b 	mla	r3, sl, fp, r3
 801e7b0:	443b      	add	r3, r7
 801e7b2:	f8d9 7000 	ldr.w	r7, [r9]
 801e7b6:	0c12      	lsrs	r2, r2, #16
 801e7b8:	0c3f      	lsrs	r7, r7, #16
 801e7ba:	fb0a 7202 	mla	r2, sl, r2, r7
 801e7be:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801e7c2:	b29b      	uxth	r3, r3
 801e7c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e7c8:	4565      	cmp	r5, ip
 801e7ca:	f849 3b04 	str.w	r3, [r9], #4
 801e7ce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801e7d2:	d8e4      	bhi.n	801e79e <__multiply+0xaa>
 801e7d4:	9b01      	ldr	r3, [sp, #4]
 801e7d6:	50e7      	str	r7, [r4, r3]
 801e7d8:	9b03      	ldr	r3, [sp, #12]
 801e7da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e7de:	3104      	adds	r1, #4
 801e7e0:	f1b9 0f00 	cmp.w	r9, #0
 801e7e4:	d020      	beq.n	801e828 <__multiply+0x134>
 801e7e6:	6823      	ldr	r3, [r4, #0]
 801e7e8:	4647      	mov	r7, r8
 801e7ea:	46a4      	mov	ip, r4
 801e7ec:	f04f 0a00 	mov.w	sl, #0
 801e7f0:	f8b7 b000 	ldrh.w	fp, [r7]
 801e7f4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801e7f8:	fb09 220b 	mla	r2, r9, fp, r2
 801e7fc:	4452      	add	r2, sl
 801e7fe:	b29b      	uxth	r3, r3
 801e800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e804:	f84c 3b04 	str.w	r3, [ip], #4
 801e808:	f857 3b04 	ldr.w	r3, [r7], #4
 801e80c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e810:	f8bc 3000 	ldrh.w	r3, [ip]
 801e814:	fb09 330a 	mla	r3, r9, sl, r3
 801e818:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801e81c:	42bd      	cmp	r5, r7
 801e81e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e822:	d8e5      	bhi.n	801e7f0 <__multiply+0xfc>
 801e824:	9a01      	ldr	r2, [sp, #4]
 801e826:	50a3      	str	r3, [r4, r2]
 801e828:	3404      	adds	r4, #4
 801e82a:	e79f      	b.n	801e76c <__multiply+0x78>
 801e82c:	3e01      	subs	r6, #1
 801e82e:	e7a1      	b.n	801e774 <__multiply+0x80>
 801e830:	08020854 	.word	0x08020854
 801e834:	08020865 	.word	0x08020865

0801e838 <__pow5mult>:
 801e838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e83c:	4615      	mov	r5, r2
 801e83e:	f012 0203 	ands.w	r2, r2, #3
 801e842:	4607      	mov	r7, r0
 801e844:	460e      	mov	r6, r1
 801e846:	d007      	beq.n	801e858 <__pow5mult+0x20>
 801e848:	4c25      	ldr	r4, [pc, #148]	@ (801e8e0 <__pow5mult+0xa8>)
 801e84a:	3a01      	subs	r2, #1
 801e84c:	2300      	movs	r3, #0
 801e84e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e852:	f7ff fea7 	bl	801e5a4 <__multadd>
 801e856:	4606      	mov	r6, r0
 801e858:	10ad      	asrs	r5, r5, #2
 801e85a:	d03d      	beq.n	801e8d8 <__pow5mult+0xa0>
 801e85c:	69fc      	ldr	r4, [r7, #28]
 801e85e:	b97c      	cbnz	r4, 801e880 <__pow5mult+0x48>
 801e860:	2010      	movs	r0, #16
 801e862:	f7ff fd87 	bl	801e374 <malloc>
 801e866:	4602      	mov	r2, r0
 801e868:	61f8      	str	r0, [r7, #28]
 801e86a:	b928      	cbnz	r0, 801e878 <__pow5mult+0x40>
 801e86c:	4b1d      	ldr	r3, [pc, #116]	@ (801e8e4 <__pow5mult+0xac>)
 801e86e:	481e      	ldr	r0, [pc, #120]	@ (801e8e8 <__pow5mult+0xb0>)
 801e870:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e874:	f000 fbb8 	bl	801efe8 <__assert_func>
 801e878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e87c:	6004      	str	r4, [r0, #0]
 801e87e:	60c4      	str	r4, [r0, #12]
 801e880:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e888:	b94c      	cbnz	r4, 801e89e <__pow5mult+0x66>
 801e88a:	f240 2171 	movw	r1, #625	@ 0x271
 801e88e:	4638      	mov	r0, r7
 801e890:	f7ff ff1a 	bl	801e6c8 <__i2b>
 801e894:	2300      	movs	r3, #0
 801e896:	f8c8 0008 	str.w	r0, [r8, #8]
 801e89a:	4604      	mov	r4, r0
 801e89c:	6003      	str	r3, [r0, #0]
 801e89e:	f04f 0900 	mov.w	r9, #0
 801e8a2:	07eb      	lsls	r3, r5, #31
 801e8a4:	d50a      	bpl.n	801e8bc <__pow5mult+0x84>
 801e8a6:	4631      	mov	r1, r6
 801e8a8:	4622      	mov	r2, r4
 801e8aa:	4638      	mov	r0, r7
 801e8ac:	f7ff ff22 	bl	801e6f4 <__multiply>
 801e8b0:	4631      	mov	r1, r6
 801e8b2:	4680      	mov	r8, r0
 801e8b4:	4638      	mov	r0, r7
 801e8b6:	f7ff fe53 	bl	801e560 <_Bfree>
 801e8ba:	4646      	mov	r6, r8
 801e8bc:	106d      	asrs	r5, r5, #1
 801e8be:	d00b      	beq.n	801e8d8 <__pow5mult+0xa0>
 801e8c0:	6820      	ldr	r0, [r4, #0]
 801e8c2:	b938      	cbnz	r0, 801e8d4 <__pow5mult+0x9c>
 801e8c4:	4622      	mov	r2, r4
 801e8c6:	4621      	mov	r1, r4
 801e8c8:	4638      	mov	r0, r7
 801e8ca:	f7ff ff13 	bl	801e6f4 <__multiply>
 801e8ce:	6020      	str	r0, [r4, #0]
 801e8d0:	f8c0 9000 	str.w	r9, [r0]
 801e8d4:	4604      	mov	r4, r0
 801e8d6:	e7e4      	b.n	801e8a2 <__pow5mult+0x6a>
 801e8d8:	4630      	mov	r0, r6
 801e8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8de:	bf00      	nop
 801e8e0:	08020918 	.word	0x08020918
 801e8e4:	080207e5 	.word	0x080207e5
 801e8e8:	08020865 	.word	0x08020865

0801e8ec <__lshift>:
 801e8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8f0:	460c      	mov	r4, r1
 801e8f2:	6849      	ldr	r1, [r1, #4]
 801e8f4:	6923      	ldr	r3, [r4, #16]
 801e8f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e8fa:	68a3      	ldr	r3, [r4, #8]
 801e8fc:	4607      	mov	r7, r0
 801e8fe:	4691      	mov	r9, r2
 801e900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e904:	f108 0601 	add.w	r6, r8, #1
 801e908:	42b3      	cmp	r3, r6
 801e90a:	db0b      	blt.n	801e924 <__lshift+0x38>
 801e90c:	4638      	mov	r0, r7
 801e90e:	f7ff fde7 	bl	801e4e0 <_Balloc>
 801e912:	4605      	mov	r5, r0
 801e914:	b948      	cbnz	r0, 801e92a <__lshift+0x3e>
 801e916:	4602      	mov	r2, r0
 801e918:	4b28      	ldr	r3, [pc, #160]	@ (801e9bc <__lshift+0xd0>)
 801e91a:	4829      	ldr	r0, [pc, #164]	@ (801e9c0 <__lshift+0xd4>)
 801e91c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e920:	f000 fb62 	bl	801efe8 <__assert_func>
 801e924:	3101      	adds	r1, #1
 801e926:	005b      	lsls	r3, r3, #1
 801e928:	e7ee      	b.n	801e908 <__lshift+0x1c>
 801e92a:	2300      	movs	r3, #0
 801e92c:	f100 0114 	add.w	r1, r0, #20
 801e930:	f100 0210 	add.w	r2, r0, #16
 801e934:	4618      	mov	r0, r3
 801e936:	4553      	cmp	r3, sl
 801e938:	db33      	blt.n	801e9a2 <__lshift+0xb6>
 801e93a:	6920      	ldr	r0, [r4, #16]
 801e93c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e940:	f104 0314 	add.w	r3, r4, #20
 801e944:	f019 091f 	ands.w	r9, r9, #31
 801e948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e94c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e950:	d02b      	beq.n	801e9aa <__lshift+0xbe>
 801e952:	f1c9 0e20 	rsb	lr, r9, #32
 801e956:	468a      	mov	sl, r1
 801e958:	2200      	movs	r2, #0
 801e95a:	6818      	ldr	r0, [r3, #0]
 801e95c:	fa00 f009 	lsl.w	r0, r0, r9
 801e960:	4310      	orrs	r0, r2
 801e962:	f84a 0b04 	str.w	r0, [sl], #4
 801e966:	f853 2b04 	ldr.w	r2, [r3], #4
 801e96a:	459c      	cmp	ip, r3
 801e96c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e970:	d8f3      	bhi.n	801e95a <__lshift+0x6e>
 801e972:	ebac 0304 	sub.w	r3, ip, r4
 801e976:	3b15      	subs	r3, #21
 801e978:	f023 0303 	bic.w	r3, r3, #3
 801e97c:	3304      	adds	r3, #4
 801e97e:	f104 0015 	add.w	r0, r4, #21
 801e982:	4560      	cmp	r0, ip
 801e984:	bf88      	it	hi
 801e986:	2304      	movhi	r3, #4
 801e988:	50ca      	str	r2, [r1, r3]
 801e98a:	b10a      	cbz	r2, 801e990 <__lshift+0xa4>
 801e98c:	f108 0602 	add.w	r6, r8, #2
 801e990:	3e01      	subs	r6, #1
 801e992:	4638      	mov	r0, r7
 801e994:	612e      	str	r6, [r5, #16]
 801e996:	4621      	mov	r1, r4
 801e998:	f7ff fde2 	bl	801e560 <_Bfree>
 801e99c:	4628      	mov	r0, r5
 801e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801e9a6:	3301      	adds	r3, #1
 801e9a8:	e7c5      	b.n	801e936 <__lshift+0x4a>
 801e9aa:	3904      	subs	r1, #4
 801e9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801e9b4:	459c      	cmp	ip, r3
 801e9b6:	d8f9      	bhi.n	801e9ac <__lshift+0xc0>
 801e9b8:	e7ea      	b.n	801e990 <__lshift+0xa4>
 801e9ba:	bf00      	nop
 801e9bc:	08020854 	.word	0x08020854
 801e9c0:	08020865 	.word	0x08020865

0801e9c4 <__mcmp>:
 801e9c4:	690a      	ldr	r2, [r1, #16]
 801e9c6:	4603      	mov	r3, r0
 801e9c8:	6900      	ldr	r0, [r0, #16]
 801e9ca:	1a80      	subs	r0, r0, r2
 801e9cc:	b530      	push	{r4, r5, lr}
 801e9ce:	d10e      	bne.n	801e9ee <__mcmp+0x2a>
 801e9d0:	3314      	adds	r3, #20
 801e9d2:	3114      	adds	r1, #20
 801e9d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e9d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e9dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e9e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e9e4:	4295      	cmp	r5, r2
 801e9e6:	d003      	beq.n	801e9f0 <__mcmp+0x2c>
 801e9e8:	d205      	bcs.n	801e9f6 <__mcmp+0x32>
 801e9ea:	f04f 30ff 	mov.w	r0, #4294967295
 801e9ee:	bd30      	pop	{r4, r5, pc}
 801e9f0:	42a3      	cmp	r3, r4
 801e9f2:	d3f3      	bcc.n	801e9dc <__mcmp+0x18>
 801e9f4:	e7fb      	b.n	801e9ee <__mcmp+0x2a>
 801e9f6:	2001      	movs	r0, #1
 801e9f8:	e7f9      	b.n	801e9ee <__mcmp+0x2a>
	...

0801e9fc <__mdiff>:
 801e9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea00:	4689      	mov	r9, r1
 801ea02:	4606      	mov	r6, r0
 801ea04:	4611      	mov	r1, r2
 801ea06:	4648      	mov	r0, r9
 801ea08:	4614      	mov	r4, r2
 801ea0a:	f7ff ffdb 	bl	801e9c4 <__mcmp>
 801ea0e:	1e05      	subs	r5, r0, #0
 801ea10:	d112      	bne.n	801ea38 <__mdiff+0x3c>
 801ea12:	4629      	mov	r1, r5
 801ea14:	4630      	mov	r0, r6
 801ea16:	f7ff fd63 	bl	801e4e0 <_Balloc>
 801ea1a:	4602      	mov	r2, r0
 801ea1c:	b928      	cbnz	r0, 801ea2a <__mdiff+0x2e>
 801ea1e:	4b3f      	ldr	r3, [pc, #252]	@ (801eb1c <__mdiff+0x120>)
 801ea20:	f240 2137 	movw	r1, #567	@ 0x237
 801ea24:	483e      	ldr	r0, [pc, #248]	@ (801eb20 <__mdiff+0x124>)
 801ea26:	f000 fadf 	bl	801efe8 <__assert_func>
 801ea2a:	2301      	movs	r3, #1
 801ea2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ea30:	4610      	mov	r0, r2
 801ea32:	b003      	add	sp, #12
 801ea34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea38:	bfbc      	itt	lt
 801ea3a:	464b      	movlt	r3, r9
 801ea3c:	46a1      	movlt	r9, r4
 801ea3e:	4630      	mov	r0, r6
 801ea40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ea44:	bfba      	itte	lt
 801ea46:	461c      	movlt	r4, r3
 801ea48:	2501      	movlt	r5, #1
 801ea4a:	2500      	movge	r5, #0
 801ea4c:	f7ff fd48 	bl	801e4e0 <_Balloc>
 801ea50:	4602      	mov	r2, r0
 801ea52:	b918      	cbnz	r0, 801ea5c <__mdiff+0x60>
 801ea54:	4b31      	ldr	r3, [pc, #196]	@ (801eb1c <__mdiff+0x120>)
 801ea56:	f240 2145 	movw	r1, #581	@ 0x245
 801ea5a:	e7e3      	b.n	801ea24 <__mdiff+0x28>
 801ea5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ea60:	6926      	ldr	r6, [r4, #16]
 801ea62:	60c5      	str	r5, [r0, #12]
 801ea64:	f109 0310 	add.w	r3, r9, #16
 801ea68:	f109 0514 	add.w	r5, r9, #20
 801ea6c:	f104 0e14 	add.w	lr, r4, #20
 801ea70:	f100 0b14 	add.w	fp, r0, #20
 801ea74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ea78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ea7c:	9301      	str	r3, [sp, #4]
 801ea7e:	46d9      	mov	r9, fp
 801ea80:	f04f 0c00 	mov.w	ip, #0
 801ea84:	9b01      	ldr	r3, [sp, #4]
 801ea86:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ea8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ea8e:	9301      	str	r3, [sp, #4]
 801ea90:	fa1f f38a 	uxth.w	r3, sl
 801ea94:	4619      	mov	r1, r3
 801ea96:	b283      	uxth	r3, r0
 801ea98:	1acb      	subs	r3, r1, r3
 801ea9a:	0c00      	lsrs	r0, r0, #16
 801ea9c:	4463      	add	r3, ip
 801ea9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801eaa2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801eaa6:	b29b      	uxth	r3, r3
 801eaa8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801eaac:	4576      	cmp	r6, lr
 801eaae:	f849 3b04 	str.w	r3, [r9], #4
 801eab2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801eab6:	d8e5      	bhi.n	801ea84 <__mdiff+0x88>
 801eab8:	1b33      	subs	r3, r6, r4
 801eaba:	3b15      	subs	r3, #21
 801eabc:	f023 0303 	bic.w	r3, r3, #3
 801eac0:	3415      	adds	r4, #21
 801eac2:	3304      	adds	r3, #4
 801eac4:	42a6      	cmp	r6, r4
 801eac6:	bf38      	it	cc
 801eac8:	2304      	movcc	r3, #4
 801eaca:	441d      	add	r5, r3
 801eacc:	445b      	add	r3, fp
 801eace:	461e      	mov	r6, r3
 801ead0:	462c      	mov	r4, r5
 801ead2:	4544      	cmp	r4, r8
 801ead4:	d30e      	bcc.n	801eaf4 <__mdiff+0xf8>
 801ead6:	f108 0103 	add.w	r1, r8, #3
 801eada:	1b49      	subs	r1, r1, r5
 801eadc:	f021 0103 	bic.w	r1, r1, #3
 801eae0:	3d03      	subs	r5, #3
 801eae2:	45a8      	cmp	r8, r5
 801eae4:	bf38      	it	cc
 801eae6:	2100      	movcc	r1, #0
 801eae8:	440b      	add	r3, r1
 801eaea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eaee:	b191      	cbz	r1, 801eb16 <__mdiff+0x11a>
 801eaf0:	6117      	str	r7, [r2, #16]
 801eaf2:	e79d      	b.n	801ea30 <__mdiff+0x34>
 801eaf4:	f854 1b04 	ldr.w	r1, [r4], #4
 801eaf8:	46e6      	mov	lr, ip
 801eafa:	0c08      	lsrs	r0, r1, #16
 801eafc:	fa1c fc81 	uxtah	ip, ip, r1
 801eb00:	4471      	add	r1, lr
 801eb02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801eb06:	b289      	uxth	r1, r1
 801eb08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801eb0c:	f846 1b04 	str.w	r1, [r6], #4
 801eb10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801eb14:	e7dd      	b.n	801ead2 <__mdiff+0xd6>
 801eb16:	3f01      	subs	r7, #1
 801eb18:	e7e7      	b.n	801eaea <__mdiff+0xee>
 801eb1a:	bf00      	nop
 801eb1c:	08020854 	.word	0x08020854
 801eb20:	08020865 	.word	0x08020865

0801eb24 <__d2b>:
 801eb24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eb28:	460f      	mov	r7, r1
 801eb2a:	2101      	movs	r1, #1
 801eb2c:	ec59 8b10 	vmov	r8, r9, d0
 801eb30:	4616      	mov	r6, r2
 801eb32:	f7ff fcd5 	bl	801e4e0 <_Balloc>
 801eb36:	4604      	mov	r4, r0
 801eb38:	b930      	cbnz	r0, 801eb48 <__d2b+0x24>
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	4b23      	ldr	r3, [pc, #140]	@ (801ebcc <__d2b+0xa8>)
 801eb3e:	4824      	ldr	r0, [pc, #144]	@ (801ebd0 <__d2b+0xac>)
 801eb40:	f240 310f 	movw	r1, #783	@ 0x30f
 801eb44:	f000 fa50 	bl	801efe8 <__assert_func>
 801eb48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801eb4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eb50:	b10d      	cbz	r5, 801eb56 <__d2b+0x32>
 801eb52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eb56:	9301      	str	r3, [sp, #4]
 801eb58:	f1b8 0300 	subs.w	r3, r8, #0
 801eb5c:	d023      	beq.n	801eba6 <__d2b+0x82>
 801eb5e:	4668      	mov	r0, sp
 801eb60:	9300      	str	r3, [sp, #0]
 801eb62:	f7ff fd84 	bl	801e66e <__lo0bits>
 801eb66:	e9dd 1200 	ldrd	r1, r2, [sp]
 801eb6a:	b1d0      	cbz	r0, 801eba2 <__d2b+0x7e>
 801eb6c:	f1c0 0320 	rsb	r3, r0, #32
 801eb70:	fa02 f303 	lsl.w	r3, r2, r3
 801eb74:	430b      	orrs	r3, r1
 801eb76:	40c2      	lsrs	r2, r0
 801eb78:	6163      	str	r3, [r4, #20]
 801eb7a:	9201      	str	r2, [sp, #4]
 801eb7c:	9b01      	ldr	r3, [sp, #4]
 801eb7e:	61a3      	str	r3, [r4, #24]
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	bf0c      	ite	eq
 801eb84:	2201      	moveq	r2, #1
 801eb86:	2202      	movne	r2, #2
 801eb88:	6122      	str	r2, [r4, #16]
 801eb8a:	b1a5      	cbz	r5, 801ebb6 <__d2b+0x92>
 801eb8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801eb90:	4405      	add	r5, r0
 801eb92:	603d      	str	r5, [r7, #0]
 801eb94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801eb98:	6030      	str	r0, [r6, #0]
 801eb9a:	4620      	mov	r0, r4
 801eb9c:	b003      	add	sp, #12
 801eb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eba2:	6161      	str	r1, [r4, #20]
 801eba4:	e7ea      	b.n	801eb7c <__d2b+0x58>
 801eba6:	a801      	add	r0, sp, #4
 801eba8:	f7ff fd61 	bl	801e66e <__lo0bits>
 801ebac:	9b01      	ldr	r3, [sp, #4]
 801ebae:	6163      	str	r3, [r4, #20]
 801ebb0:	3020      	adds	r0, #32
 801ebb2:	2201      	movs	r2, #1
 801ebb4:	e7e8      	b.n	801eb88 <__d2b+0x64>
 801ebb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ebba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ebbe:	6038      	str	r0, [r7, #0]
 801ebc0:	6918      	ldr	r0, [r3, #16]
 801ebc2:	f7ff fd35 	bl	801e630 <__hi0bits>
 801ebc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ebca:	e7e5      	b.n	801eb98 <__d2b+0x74>
 801ebcc:	08020854 	.word	0x08020854
 801ebd0:	08020865 	.word	0x08020865

0801ebd4 <__sfputc_r>:
 801ebd4:	6893      	ldr	r3, [r2, #8]
 801ebd6:	3b01      	subs	r3, #1
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	b410      	push	{r4}
 801ebdc:	6093      	str	r3, [r2, #8]
 801ebde:	da08      	bge.n	801ebf2 <__sfputc_r+0x1e>
 801ebe0:	6994      	ldr	r4, [r2, #24]
 801ebe2:	42a3      	cmp	r3, r4
 801ebe4:	db01      	blt.n	801ebea <__sfputc_r+0x16>
 801ebe6:	290a      	cmp	r1, #10
 801ebe8:	d103      	bne.n	801ebf2 <__sfputc_r+0x1e>
 801ebea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ebee:	f7fe bbea 	b.w	801d3c6 <__swbuf_r>
 801ebf2:	6813      	ldr	r3, [r2, #0]
 801ebf4:	1c58      	adds	r0, r3, #1
 801ebf6:	6010      	str	r0, [r2, #0]
 801ebf8:	7019      	strb	r1, [r3, #0]
 801ebfa:	4608      	mov	r0, r1
 801ebfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ec00:	4770      	bx	lr

0801ec02 <__sfputs_r>:
 801ec02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec04:	4606      	mov	r6, r0
 801ec06:	460f      	mov	r7, r1
 801ec08:	4614      	mov	r4, r2
 801ec0a:	18d5      	adds	r5, r2, r3
 801ec0c:	42ac      	cmp	r4, r5
 801ec0e:	d101      	bne.n	801ec14 <__sfputs_r+0x12>
 801ec10:	2000      	movs	r0, #0
 801ec12:	e007      	b.n	801ec24 <__sfputs_r+0x22>
 801ec14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec18:	463a      	mov	r2, r7
 801ec1a:	4630      	mov	r0, r6
 801ec1c:	f7ff ffda 	bl	801ebd4 <__sfputc_r>
 801ec20:	1c43      	adds	r3, r0, #1
 801ec22:	d1f3      	bne.n	801ec0c <__sfputs_r+0xa>
 801ec24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ec28 <_vfiprintf_r>:
 801ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec2c:	460d      	mov	r5, r1
 801ec2e:	b09d      	sub	sp, #116	@ 0x74
 801ec30:	4614      	mov	r4, r2
 801ec32:	4698      	mov	r8, r3
 801ec34:	4606      	mov	r6, r0
 801ec36:	b118      	cbz	r0, 801ec40 <_vfiprintf_r+0x18>
 801ec38:	6a03      	ldr	r3, [r0, #32]
 801ec3a:	b90b      	cbnz	r3, 801ec40 <_vfiprintf_r+0x18>
 801ec3c:	f7fe fad2 	bl	801d1e4 <__sinit>
 801ec40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ec42:	07d9      	lsls	r1, r3, #31
 801ec44:	d405      	bmi.n	801ec52 <_vfiprintf_r+0x2a>
 801ec46:	89ab      	ldrh	r3, [r5, #12]
 801ec48:	059a      	lsls	r2, r3, #22
 801ec4a:	d402      	bmi.n	801ec52 <_vfiprintf_r+0x2a>
 801ec4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ec4e:	f7fe fcdc 	bl	801d60a <__retarget_lock_acquire_recursive>
 801ec52:	89ab      	ldrh	r3, [r5, #12]
 801ec54:	071b      	lsls	r3, r3, #28
 801ec56:	d501      	bpl.n	801ec5c <_vfiprintf_r+0x34>
 801ec58:	692b      	ldr	r3, [r5, #16]
 801ec5a:	b99b      	cbnz	r3, 801ec84 <_vfiprintf_r+0x5c>
 801ec5c:	4629      	mov	r1, r5
 801ec5e:	4630      	mov	r0, r6
 801ec60:	f7fe fbf0 	bl	801d444 <__swsetup_r>
 801ec64:	b170      	cbz	r0, 801ec84 <_vfiprintf_r+0x5c>
 801ec66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ec68:	07dc      	lsls	r4, r3, #31
 801ec6a:	d504      	bpl.n	801ec76 <_vfiprintf_r+0x4e>
 801ec6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ec70:	b01d      	add	sp, #116	@ 0x74
 801ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec76:	89ab      	ldrh	r3, [r5, #12]
 801ec78:	0598      	lsls	r0, r3, #22
 801ec7a:	d4f7      	bmi.n	801ec6c <_vfiprintf_r+0x44>
 801ec7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ec7e:	f7fe fcc5 	bl	801d60c <__retarget_lock_release_recursive>
 801ec82:	e7f3      	b.n	801ec6c <_vfiprintf_r+0x44>
 801ec84:	2300      	movs	r3, #0
 801ec86:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec88:	2320      	movs	r3, #32
 801ec8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ec8e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ec92:	2330      	movs	r3, #48	@ 0x30
 801ec94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ee44 <_vfiprintf_r+0x21c>
 801ec98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ec9c:	f04f 0901 	mov.w	r9, #1
 801eca0:	4623      	mov	r3, r4
 801eca2:	469a      	mov	sl, r3
 801eca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eca8:	b10a      	cbz	r2, 801ecae <_vfiprintf_r+0x86>
 801ecaa:	2a25      	cmp	r2, #37	@ 0x25
 801ecac:	d1f9      	bne.n	801eca2 <_vfiprintf_r+0x7a>
 801ecae:	ebba 0b04 	subs.w	fp, sl, r4
 801ecb2:	d00b      	beq.n	801eccc <_vfiprintf_r+0xa4>
 801ecb4:	465b      	mov	r3, fp
 801ecb6:	4622      	mov	r2, r4
 801ecb8:	4629      	mov	r1, r5
 801ecba:	4630      	mov	r0, r6
 801ecbc:	f7ff ffa1 	bl	801ec02 <__sfputs_r>
 801ecc0:	3001      	adds	r0, #1
 801ecc2:	f000 80a7 	beq.w	801ee14 <_vfiprintf_r+0x1ec>
 801ecc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ecc8:	445a      	add	r2, fp
 801ecca:	9209      	str	r2, [sp, #36]	@ 0x24
 801eccc:	f89a 3000 	ldrb.w	r3, [sl]
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	f000 809f 	beq.w	801ee14 <_vfiprintf_r+0x1ec>
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	f04f 32ff 	mov.w	r2, #4294967295
 801ecdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ece0:	f10a 0a01 	add.w	sl, sl, #1
 801ece4:	9304      	str	r3, [sp, #16]
 801ece6:	9307      	str	r3, [sp, #28]
 801ece8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ecec:	931a      	str	r3, [sp, #104]	@ 0x68
 801ecee:	4654      	mov	r4, sl
 801ecf0:	2205      	movs	r2, #5
 801ecf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecf6:	4853      	ldr	r0, [pc, #332]	@ (801ee44 <_vfiprintf_r+0x21c>)
 801ecf8:	f7e1 fa6a 	bl	80001d0 <memchr>
 801ecfc:	9a04      	ldr	r2, [sp, #16]
 801ecfe:	b9d8      	cbnz	r0, 801ed38 <_vfiprintf_r+0x110>
 801ed00:	06d1      	lsls	r1, r2, #27
 801ed02:	bf44      	itt	mi
 801ed04:	2320      	movmi	r3, #32
 801ed06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ed0a:	0713      	lsls	r3, r2, #28
 801ed0c:	bf44      	itt	mi
 801ed0e:	232b      	movmi	r3, #43	@ 0x2b
 801ed10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ed14:	f89a 3000 	ldrb.w	r3, [sl]
 801ed18:	2b2a      	cmp	r3, #42	@ 0x2a
 801ed1a:	d015      	beq.n	801ed48 <_vfiprintf_r+0x120>
 801ed1c:	9a07      	ldr	r2, [sp, #28]
 801ed1e:	4654      	mov	r4, sl
 801ed20:	2000      	movs	r0, #0
 801ed22:	f04f 0c0a 	mov.w	ip, #10
 801ed26:	4621      	mov	r1, r4
 801ed28:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed2c:	3b30      	subs	r3, #48	@ 0x30
 801ed2e:	2b09      	cmp	r3, #9
 801ed30:	d94b      	bls.n	801edca <_vfiprintf_r+0x1a2>
 801ed32:	b1b0      	cbz	r0, 801ed62 <_vfiprintf_r+0x13a>
 801ed34:	9207      	str	r2, [sp, #28]
 801ed36:	e014      	b.n	801ed62 <_vfiprintf_r+0x13a>
 801ed38:	eba0 0308 	sub.w	r3, r0, r8
 801ed3c:	fa09 f303 	lsl.w	r3, r9, r3
 801ed40:	4313      	orrs	r3, r2
 801ed42:	9304      	str	r3, [sp, #16]
 801ed44:	46a2      	mov	sl, r4
 801ed46:	e7d2      	b.n	801ecee <_vfiprintf_r+0xc6>
 801ed48:	9b03      	ldr	r3, [sp, #12]
 801ed4a:	1d19      	adds	r1, r3, #4
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	9103      	str	r1, [sp, #12]
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	bfbb      	ittet	lt
 801ed54:	425b      	neglt	r3, r3
 801ed56:	f042 0202 	orrlt.w	r2, r2, #2
 801ed5a:	9307      	strge	r3, [sp, #28]
 801ed5c:	9307      	strlt	r3, [sp, #28]
 801ed5e:	bfb8      	it	lt
 801ed60:	9204      	strlt	r2, [sp, #16]
 801ed62:	7823      	ldrb	r3, [r4, #0]
 801ed64:	2b2e      	cmp	r3, #46	@ 0x2e
 801ed66:	d10a      	bne.n	801ed7e <_vfiprintf_r+0x156>
 801ed68:	7863      	ldrb	r3, [r4, #1]
 801ed6a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ed6c:	d132      	bne.n	801edd4 <_vfiprintf_r+0x1ac>
 801ed6e:	9b03      	ldr	r3, [sp, #12]
 801ed70:	1d1a      	adds	r2, r3, #4
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	9203      	str	r2, [sp, #12]
 801ed76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ed7a:	3402      	adds	r4, #2
 801ed7c:	9305      	str	r3, [sp, #20]
 801ed7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ee54 <_vfiprintf_r+0x22c>
 801ed82:	7821      	ldrb	r1, [r4, #0]
 801ed84:	2203      	movs	r2, #3
 801ed86:	4650      	mov	r0, sl
 801ed88:	f7e1 fa22 	bl	80001d0 <memchr>
 801ed8c:	b138      	cbz	r0, 801ed9e <_vfiprintf_r+0x176>
 801ed8e:	9b04      	ldr	r3, [sp, #16]
 801ed90:	eba0 000a 	sub.w	r0, r0, sl
 801ed94:	2240      	movs	r2, #64	@ 0x40
 801ed96:	4082      	lsls	r2, r0
 801ed98:	4313      	orrs	r3, r2
 801ed9a:	3401      	adds	r4, #1
 801ed9c:	9304      	str	r3, [sp, #16]
 801ed9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eda2:	4829      	ldr	r0, [pc, #164]	@ (801ee48 <_vfiprintf_r+0x220>)
 801eda4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eda8:	2206      	movs	r2, #6
 801edaa:	f7e1 fa11 	bl	80001d0 <memchr>
 801edae:	2800      	cmp	r0, #0
 801edb0:	d03f      	beq.n	801ee32 <_vfiprintf_r+0x20a>
 801edb2:	4b26      	ldr	r3, [pc, #152]	@ (801ee4c <_vfiprintf_r+0x224>)
 801edb4:	bb1b      	cbnz	r3, 801edfe <_vfiprintf_r+0x1d6>
 801edb6:	9b03      	ldr	r3, [sp, #12]
 801edb8:	3307      	adds	r3, #7
 801edba:	f023 0307 	bic.w	r3, r3, #7
 801edbe:	3308      	adds	r3, #8
 801edc0:	9303      	str	r3, [sp, #12]
 801edc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edc4:	443b      	add	r3, r7
 801edc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801edc8:	e76a      	b.n	801eca0 <_vfiprintf_r+0x78>
 801edca:	fb0c 3202 	mla	r2, ip, r2, r3
 801edce:	460c      	mov	r4, r1
 801edd0:	2001      	movs	r0, #1
 801edd2:	e7a8      	b.n	801ed26 <_vfiprintf_r+0xfe>
 801edd4:	2300      	movs	r3, #0
 801edd6:	3401      	adds	r4, #1
 801edd8:	9305      	str	r3, [sp, #20]
 801edda:	4619      	mov	r1, r3
 801eddc:	f04f 0c0a 	mov.w	ip, #10
 801ede0:	4620      	mov	r0, r4
 801ede2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ede6:	3a30      	subs	r2, #48	@ 0x30
 801ede8:	2a09      	cmp	r2, #9
 801edea:	d903      	bls.n	801edf4 <_vfiprintf_r+0x1cc>
 801edec:	2b00      	cmp	r3, #0
 801edee:	d0c6      	beq.n	801ed7e <_vfiprintf_r+0x156>
 801edf0:	9105      	str	r1, [sp, #20]
 801edf2:	e7c4      	b.n	801ed7e <_vfiprintf_r+0x156>
 801edf4:	fb0c 2101 	mla	r1, ip, r1, r2
 801edf8:	4604      	mov	r4, r0
 801edfa:	2301      	movs	r3, #1
 801edfc:	e7f0      	b.n	801ede0 <_vfiprintf_r+0x1b8>
 801edfe:	ab03      	add	r3, sp, #12
 801ee00:	9300      	str	r3, [sp, #0]
 801ee02:	462a      	mov	r2, r5
 801ee04:	4b12      	ldr	r3, [pc, #72]	@ (801ee50 <_vfiprintf_r+0x228>)
 801ee06:	a904      	add	r1, sp, #16
 801ee08:	4630      	mov	r0, r6
 801ee0a:	f7fd fce9 	bl	801c7e0 <_printf_float>
 801ee0e:	4607      	mov	r7, r0
 801ee10:	1c78      	adds	r0, r7, #1
 801ee12:	d1d6      	bne.n	801edc2 <_vfiprintf_r+0x19a>
 801ee14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ee16:	07d9      	lsls	r1, r3, #31
 801ee18:	d405      	bmi.n	801ee26 <_vfiprintf_r+0x1fe>
 801ee1a:	89ab      	ldrh	r3, [r5, #12]
 801ee1c:	059a      	lsls	r2, r3, #22
 801ee1e:	d402      	bmi.n	801ee26 <_vfiprintf_r+0x1fe>
 801ee20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ee22:	f7fe fbf3 	bl	801d60c <__retarget_lock_release_recursive>
 801ee26:	89ab      	ldrh	r3, [r5, #12]
 801ee28:	065b      	lsls	r3, r3, #25
 801ee2a:	f53f af1f 	bmi.w	801ec6c <_vfiprintf_r+0x44>
 801ee2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee30:	e71e      	b.n	801ec70 <_vfiprintf_r+0x48>
 801ee32:	ab03      	add	r3, sp, #12
 801ee34:	9300      	str	r3, [sp, #0]
 801ee36:	462a      	mov	r2, r5
 801ee38:	4b05      	ldr	r3, [pc, #20]	@ (801ee50 <_vfiprintf_r+0x228>)
 801ee3a:	a904      	add	r1, sp, #16
 801ee3c:	4630      	mov	r0, r6
 801ee3e:	f7fd ff67 	bl	801cd10 <_printf_i>
 801ee42:	e7e4      	b.n	801ee0e <_vfiprintf_r+0x1e6>
 801ee44:	080208be 	.word	0x080208be
 801ee48:	080208c8 	.word	0x080208c8
 801ee4c:	0801c7e1 	.word	0x0801c7e1
 801ee50:	0801ec03 	.word	0x0801ec03
 801ee54:	080208c4 	.word	0x080208c4

0801ee58 <__swhatbuf_r>:
 801ee58:	b570      	push	{r4, r5, r6, lr}
 801ee5a:	460c      	mov	r4, r1
 801ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee60:	2900      	cmp	r1, #0
 801ee62:	b096      	sub	sp, #88	@ 0x58
 801ee64:	4615      	mov	r5, r2
 801ee66:	461e      	mov	r6, r3
 801ee68:	da0d      	bge.n	801ee86 <__swhatbuf_r+0x2e>
 801ee6a:	89a3      	ldrh	r3, [r4, #12]
 801ee6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ee70:	f04f 0100 	mov.w	r1, #0
 801ee74:	bf14      	ite	ne
 801ee76:	2340      	movne	r3, #64	@ 0x40
 801ee78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ee7c:	2000      	movs	r0, #0
 801ee7e:	6031      	str	r1, [r6, #0]
 801ee80:	602b      	str	r3, [r5, #0]
 801ee82:	b016      	add	sp, #88	@ 0x58
 801ee84:	bd70      	pop	{r4, r5, r6, pc}
 801ee86:	466a      	mov	r2, sp
 801ee88:	f000 f87c 	bl	801ef84 <_fstat_r>
 801ee8c:	2800      	cmp	r0, #0
 801ee8e:	dbec      	blt.n	801ee6a <__swhatbuf_r+0x12>
 801ee90:	9901      	ldr	r1, [sp, #4]
 801ee92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ee96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ee9a:	4259      	negs	r1, r3
 801ee9c:	4159      	adcs	r1, r3
 801ee9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eea2:	e7eb      	b.n	801ee7c <__swhatbuf_r+0x24>

0801eea4 <__smakebuf_r>:
 801eea4:	898b      	ldrh	r3, [r1, #12]
 801eea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eea8:	079d      	lsls	r5, r3, #30
 801eeaa:	4606      	mov	r6, r0
 801eeac:	460c      	mov	r4, r1
 801eeae:	d507      	bpl.n	801eec0 <__smakebuf_r+0x1c>
 801eeb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eeb4:	6023      	str	r3, [r4, #0]
 801eeb6:	6123      	str	r3, [r4, #16]
 801eeb8:	2301      	movs	r3, #1
 801eeba:	6163      	str	r3, [r4, #20]
 801eebc:	b003      	add	sp, #12
 801eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eec0:	ab01      	add	r3, sp, #4
 801eec2:	466a      	mov	r2, sp
 801eec4:	f7ff ffc8 	bl	801ee58 <__swhatbuf_r>
 801eec8:	9f00      	ldr	r7, [sp, #0]
 801eeca:	4605      	mov	r5, r0
 801eecc:	4639      	mov	r1, r7
 801eece:	4630      	mov	r0, r6
 801eed0:	f7ff fa7a 	bl	801e3c8 <_malloc_r>
 801eed4:	b948      	cbnz	r0, 801eeea <__smakebuf_r+0x46>
 801eed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eeda:	059a      	lsls	r2, r3, #22
 801eedc:	d4ee      	bmi.n	801eebc <__smakebuf_r+0x18>
 801eede:	f023 0303 	bic.w	r3, r3, #3
 801eee2:	f043 0302 	orr.w	r3, r3, #2
 801eee6:	81a3      	strh	r3, [r4, #12]
 801eee8:	e7e2      	b.n	801eeb0 <__smakebuf_r+0xc>
 801eeea:	89a3      	ldrh	r3, [r4, #12]
 801eeec:	6020      	str	r0, [r4, #0]
 801eeee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eef2:	81a3      	strh	r3, [r4, #12]
 801eef4:	9b01      	ldr	r3, [sp, #4]
 801eef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eefa:	b15b      	cbz	r3, 801ef14 <__smakebuf_r+0x70>
 801eefc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef00:	4630      	mov	r0, r6
 801ef02:	f000 f851 	bl	801efa8 <_isatty_r>
 801ef06:	b128      	cbz	r0, 801ef14 <__smakebuf_r+0x70>
 801ef08:	89a3      	ldrh	r3, [r4, #12]
 801ef0a:	f023 0303 	bic.w	r3, r3, #3
 801ef0e:	f043 0301 	orr.w	r3, r3, #1
 801ef12:	81a3      	strh	r3, [r4, #12]
 801ef14:	89a3      	ldrh	r3, [r4, #12]
 801ef16:	431d      	orrs	r5, r3
 801ef18:	81a5      	strh	r5, [r4, #12]
 801ef1a:	e7cf      	b.n	801eebc <__smakebuf_r+0x18>

0801ef1c <_putc_r>:
 801ef1c:	b570      	push	{r4, r5, r6, lr}
 801ef1e:	460d      	mov	r5, r1
 801ef20:	4614      	mov	r4, r2
 801ef22:	4606      	mov	r6, r0
 801ef24:	b118      	cbz	r0, 801ef2e <_putc_r+0x12>
 801ef26:	6a03      	ldr	r3, [r0, #32]
 801ef28:	b90b      	cbnz	r3, 801ef2e <_putc_r+0x12>
 801ef2a:	f7fe f95b 	bl	801d1e4 <__sinit>
 801ef2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ef30:	07d8      	lsls	r0, r3, #31
 801ef32:	d405      	bmi.n	801ef40 <_putc_r+0x24>
 801ef34:	89a3      	ldrh	r3, [r4, #12]
 801ef36:	0599      	lsls	r1, r3, #22
 801ef38:	d402      	bmi.n	801ef40 <_putc_r+0x24>
 801ef3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef3c:	f7fe fb65 	bl	801d60a <__retarget_lock_acquire_recursive>
 801ef40:	68a3      	ldr	r3, [r4, #8]
 801ef42:	3b01      	subs	r3, #1
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	60a3      	str	r3, [r4, #8]
 801ef48:	da05      	bge.n	801ef56 <_putc_r+0x3a>
 801ef4a:	69a2      	ldr	r2, [r4, #24]
 801ef4c:	4293      	cmp	r3, r2
 801ef4e:	db12      	blt.n	801ef76 <_putc_r+0x5a>
 801ef50:	b2eb      	uxtb	r3, r5
 801ef52:	2b0a      	cmp	r3, #10
 801ef54:	d00f      	beq.n	801ef76 <_putc_r+0x5a>
 801ef56:	6823      	ldr	r3, [r4, #0]
 801ef58:	1c5a      	adds	r2, r3, #1
 801ef5a:	6022      	str	r2, [r4, #0]
 801ef5c:	701d      	strb	r5, [r3, #0]
 801ef5e:	b2ed      	uxtb	r5, r5
 801ef60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ef62:	07da      	lsls	r2, r3, #31
 801ef64:	d405      	bmi.n	801ef72 <_putc_r+0x56>
 801ef66:	89a3      	ldrh	r3, [r4, #12]
 801ef68:	059b      	lsls	r3, r3, #22
 801ef6a:	d402      	bmi.n	801ef72 <_putc_r+0x56>
 801ef6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef6e:	f7fe fb4d 	bl	801d60c <__retarget_lock_release_recursive>
 801ef72:	4628      	mov	r0, r5
 801ef74:	bd70      	pop	{r4, r5, r6, pc}
 801ef76:	4629      	mov	r1, r5
 801ef78:	4622      	mov	r2, r4
 801ef7a:	4630      	mov	r0, r6
 801ef7c:	f7fe fa23 	bl	801d3c6 <__swbuf_r>
 801ef80:	4605      	mov	r5, r0
 801ef82:	e7ed      	b.n	801ef60 <_putc_r+0x44>

0801ef84 <_fstat_r>:
 801ef84:	b538      	push	{r3, r4, r5, lr}
 801ef86:	4d07      	ldr	r5, [pc, #28]	@ (801efa4 <_fstat_r+0x20>)
 801ef88:	2300      	movs	r3, #0
 801ef8a:	4604      	mov	r4, r0
 801ef8c:	4608      	mov	r0, r1
 801ef8e:	4611      	mov	r1, r2
 801ef90:	602b      	str	r3, [r5, #0]
 801ef92:	f7e2 ff83 	bl	8001e9c <_fstat>
 801ef96:	1c43      	adds	r3, r0, #1
 801ef98:	d102      	bne.n	801efa0 <_fstat_r+0x1c>
 801ef9a:	682b      	ldr	r3, [r5, #0]
 801ef9c:	b103      	cbz	r3, 801efa0 <_fstat_r+0x1c>
 801ef9e:	6023      	str	r3, [r4, #0]
 801efa0:	bd38      	pop	{r3, r4, r5, pc}
 801efa2:	bf00      	nop
 801efa4:	200018fc 	.word	0x200018fc

0801efa8 <_isatty_r>:
 801efa8:	b538      	push	{r3, r4, r5, lr}
 801efaa:	4d06      	ldr	r5, [pc, #24]	@ (801efc4 <_isatty_r+0x1c>)
 801efac:	2300      	movs	r3, #0
 801efae:	4604      	mov	r4, r0
 801efb0:	4608      	mov	r0, r1
 801efb2:	602b      	str	r3, [r5, #0]
 801efb4:	f7e2 ff82 	bl	8001ebc <_isatty>
 801efb8:	1c43      	adds	r3, r0, #1
 801efba:	d102      	bne.n	801efc2 <_isatty_r+0x1a>
 801efbc:	682b      	ldr	r3, [r5, #0]
 801efbe:	b103      	cbz	r3, 801efc2 <_isatty_r+0x1a>
 801efc0:	6023      	str	r3, [r4, #0]
 801efc2:	bd38      	pop	{r3, r4, r5, pc}
 801efc4:	200018fc 	.word	0x200018fc

0801efc8 <_sbrk_r>:
 801efc8:	b538      	push	{r3, r4, r5, lr}
 801efca:	4d06      	ldr	r5, [pc, #24]	@ (801efe4 <_sbrk_r+0x1c>)
 801efcc:	2300      	movs	r3, #0
 801efce:	4604      	mov	r4, r0
 801efd0:	4608      	mov	r0, r1
 801efd2:	602b      	str	r3, [r5, #0]
 801efd4:	f7e2 ff8a 	bl	8001eec <_sbrk>
 801efd8:	1c43      	adds	r3, r0, #1
 801efda:	d102      	bne.n	801efe2 <_sbrk_r+0x1a>
 801efdc:	682b      	ldr	r3, [r5, #0]
 801efde:	b103      	cbz	r3, 801efe2 <_sbrk_r+0x1a>
 801efe0:	6023      	str	r3, [r4, #0]
 801efe2:	bd38      	pop	{r3, r4, r5, pc}
 801efe4:	200018fc 	.word	0x200018fc

0801efe8 <__assert_func>:
 801efe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801efea:	4614      	mov	r4, r2
 801efec:	461a      	mov	r2, r3
 801efee:	4b09      	ldr	r3, [pc, #36]	@ (801f014 <__assert_func+0x2c>)
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	4605      	mov	r5, r0
 801eff4:	68d8      	ldr	r0, [r3, #12]
 801eff6:	b14c      	cbz	r4, 801f00c <__assert_func+0x24>
 801eff8:	4b07      	ldr	r3, [pc, #28]	@ (801f018 <__assert_func+0x30>)
 801effa:	9100      	str	r1, [sp, #0]
 801effc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f000:	4906      	ldr	r1, [pc, #24]	@ (801f01c <__assert_func+0x34>)
 801f002:	462b      	mov	r3, r5
 801f004:	f000 f842 	bl	801f08c <fiprintf>
 801f008:	f000 f852 	bl	801f0b0 <abort>
 801f00c:	4b04      	ldr	r3, [pc, #16]	@ (801f020 <__assert_func+0x38>)
 801f00e:	461c      	mov	r4, r3
 801f010:	e7f3      	b.n	801effa <__assert_func+0x12>
 801f012:	bf00      	nop
 801f014:	2000002c 	.word	0x2000002c
 801f018:	080208d9 	.word	0x080208d9
 801f01c:	080208e6 	.word	0x080208e6
 801f020:	08020914 	.word	0x08020914

0801f024 <_calloc_r>:
 801f024:	b570      	push	{r4, r5, r6, lr}
 801f026:	fba1 5402 	umull	r5, r4, r1, r2
 801f02a:	b934      	cbnz	r4, 801f03a <_calloc_r+0x16>
 801f02c:	4629      	mov	r1, r5
 801f02e:	f7ff f9cb 	bl	801e3c8 <_malloc_r>
 801f032:	4606      	mov	r6, r0
 801f034:	b928      	cbnz	r0, 801f042 <_calloc_r+0x1e>
 801f036:	4630      	mov	r0, r6
 801f038:	bd70      	pop	{r4, r5, r6, pc}
 801f03a:	220c      	movs	r2, #12
 801f03c:	6002      	str	r2, [r0, #0]
 801f03e:	2600      	movs	r6, #0
 801f040:	e7f9      	b.n	801f036 <_calloc_r+0x12>
 801f042:	462a      	mov	r2, r5
 801f044:	4621      	mov	r1, r4
 801f046:	f7fe fa63 	bl	801d510 <memset>
 801f04a:	e7f4      	b.n	801f036 <_calloc_r+0x12>

0801f04c <__ascii_mbtowc>:
 801f04c:	b082      	sub	sp, #8
 801f04e:	b901      	cbnz	r1, 801f052 <__ascii_mbtowc+0x6>
 801f050:	a901      	add	r1, sp, #4
 801f052:	b142      	cbz	r2, 801f066 <__ascii_mbtowc+0x1a>
 801f054:	b14b      	cbz	r3, 801f06a <__ascii_mbtowc+0x1e>
 801f056:	7813      	ldrb	r3, [r2, #0]
 801f058:	600b      	str	r3, [r1, #0]
 801f05a:	7812      	ldrb	r2, [r2, #0]
 801f05c:	1e10      	subs	r0, r2, #0
 801f05e:	bf18      	it	ne
 801f060:	2001      	movne	r0, #1
 801f062:	b002      	add	sp, #8
 801f064:	4770      	bx	lr
 801f066:	4610      	mov	r0, r2
 801f068:	e7fb      	b.n	801f062 <__ascii_mbtowc+0x16>
 801f06a:	f06f 0001 	mvn.w	r0, #1
 801f06e:	e7f8      	b.n	801f062 <__ascii_mbtowc+0x16>

0801f070 <__ascii_wctomb>:
 801f070:	4603      	mov	r3, r0
 801f072:	4608      	mov	r0, r1
 801f074:	b141      	cbz	r1, 801f088 <__ascii_wctomb+0x18>
 801f076:	2aff      	cmp	r2, #255	@ 0xff
 801f078:	d904      	bls.n	801f084 <__ascii_wctomb+0x14>
 801f07a:	228a      	movs	r2, #138	@ 0x8a
 801f07c:	601a      	str	r2, [r3, #0]
 801f07e:	f04f 30ff 	mov.w	r0, #4294967295
 801f082:	4770      	bx	lr
 801f084:	700a      	strb	r2, [r1, #0]
 801f086:	2001      	movs	r0, #1
 801f088:	4770      	bx	lr
	...

0801f08c <fiprintf>:
 801f08c:	b40e      	push	{r1, r2, r3}
 801f08e:	b503      	push	{r0, r1, lr}
 801f090:	4601      	mov	r1, r0
 801f092:	ab03      	add	r3, sp, #12
 801f094:	4805      	ldr	r0, [pc, #20]	@ (801f0ac <fiprintf+0x20>)
 801f096:	f853 2b04 	ldr.w	r2, [r3], #4
 801f09a:	6800      	ldr	r0, [r0, #0]
 801f09c:	9301      	str	r3, [sp, #4]
 801f09e:	f7ff fdc3 	bl	801ec28 <_vfiprintf_r>
 801f0a2:	b002      	add	sp, #8
 801f0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f0a8:	b003      	add	sp, #12
 801f0aa:	4770      	bx	lr
 801f0ac:	2000002c 	.word	0x2000002c

0801f0b0 <abort>:
 801f0b0:	b508      	push	{r3, lr}
 801f0b2:	2006      	movs	r0, #6
 801f0b4:	f000 f82c 	bl	801f110 <raise>
 801f0b8:	2001      	movs	r0, #1
 801f0ba:	f7e2 fe9f 	bl	8001dfc <_exit>

0801f0be <_raise_r>:
 801f0be:	291f      	cmp	r1, #31
 801f0c0:	b538      	push	{r3, r4, r5, lr}
 801f0c2:	4605      	mov	r5, r0
 801f0c4:	460c      	mov	r4, r1
 801f0c6:	d904      	bls.n	801f0d2 <_raise_r+0x14>
 801f0c8:	2316      	movs	r3, #22
 801f0ca:	6003      	str	r3, [r0, #0]
 801f0cc:	f04f 30ff 	mov.w	r0, #4294967295
 801f0d0:	bd38      	pop	{r3, r4, r5, pc}
 801f0d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f0d4:	b112      	cbz	r2, 801f0dc <_raise_r+0x1e>
 801f0d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f0da:	b94b      	cbnz	r3, 801f0f0 <_raise_r+0x32>
 801f0dc:	4628      	mov	r0, r5
 801f0de:	f000 f831 	bl	801f144 <_getpid_r>
 801f0e2:	4622      	mov	r2, r4
 801f0e4:	4601      	mov	r1, r0
 801f0e6:	4628      	mov	r0, r5
 801f0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f0ec:	f000 b818 	b.w	801f120 <_kill_r>
 801f0f0:	2b01      	cmp	r3, #1
 801f0f2:	d00a      	beq.n	801f10a <_raise_r+0x4c>
 801f0f4:	1c59      	adds	r1, r3, #1
 801f0f6:	d103      	bne.n	801f100 <_raise_r+0x42>
 801f0f8:	2316      	movs	r3, #22
 801f0fa:	6003      	str	r3, [r0, #0]
 801f0fc:	2001      	movs	r0, #1
 801f0fe:	e7e7      	b.n	801f0d0 <_raise_r+0x12>
 801f100:	2100      	movs	r1, #0
 801f102:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f106:	4620      	mov	r0, r4
 801f108:	4798      	blx	r3
 801f10a:	2000      	movs	r0, #0
 801f10c:	e7e0      	b.n	801f0d0 <_raise_r+0x12>
	...

0801f110 <raise>:
 801f110:	4b02      	ldr	r3, [pc, #8]	@ (801f11c <raise+0xc>)
 801f112:	4601      	mov	r1, r0
 801f114:	6818      	ldr	r0, [r3, #0]
 801f116:	f7ff bfd2 	b.w	801f0be <_raise_r>
 801f11a:	bf00      	nop
 801f11c:	2000002c 	.word	0x2000002c

0801f120 <_kill_r>:
 801f120:	b538      	push	{r3, r4, r5, lr}
 801f122:	4d07      	ldr	r5, [pc, #28]	@ (801f140 <_kill_r+0x20>)
 801f124:	2300      	movs	r3, #0
 801f126:	4604      	mov	r4, r0
 801f128:	4608      	mov	r0, r1
 801f12a:	4611      	mov	r1, r2
 801f12c:	602b      	str	r3, [r5, #0]
 801f12e:	f7e2 fe55 	bl	8001ddc <_kill>
 801f132:	1c43      	adds	r3, r0, #1
 801f134:	d102      	bne.n	801f13c <_kill_r+0x1c>
 801f136:	682b      	ldr	r3, [r5, #0]
 801f138:	b103      	cbz	r3, 801f13c <_kill_r+0x1c>
 801f13a:	6023      	str	r3, [r4, #0]
 801f13c:	bd38      	pop	{r3, r4, r5, pc}
 801f13e:	bf00      	nop
 801f140:	200018fc 	.word	0x200018fc

0801f144 <_getpid_r>:
 801f144:	f7e2 be42 	b.w	8001dcc <_getpid>

0801f148 <_init>:
 801f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f14a:	bf00      	nop
 801f14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f14e:	bc08      	pop	{r3}
 801f150:	469e      	mov	lr, r3
 801f152:	4770      	bx	lr

0801f154 <_fini>:
 801f154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f156:	bf00      	nop
 801f158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f15a:	bc08      	pop	{r3}
 801f15c:	469e      	mov	lr, r3
 801f15e:	4770      	bx	lr
